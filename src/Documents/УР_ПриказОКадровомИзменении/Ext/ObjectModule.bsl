
// Процедура формирует структуру шапки документа и дополнительных полей.
//
Процедура ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ = Ложь) Экспорт
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ПредставлениеДокументаПриПроведении(Ссылка);

	// Сформируем запрос на дополнительные параметры, нужные при проведении, по данным шапки документа
	//СтруктураШапкиДокумента = СформироватьСтруктуруЗначенийПолейДокумента(ЭтотОбъект, ТаблицаПолейДокумента);
	СтруктураШапкиДокумента = ЭтотОбъект;
	
КонецПроцедуры // ПодготовитьСтруктуруШапкиДокумента()

// Функция проверяет заполнение обязательных полей
//
// Параметры
//              нет.
// Возвращаемое значение:
//   Булево   – Есть ли ошибки заполнения
//
Процедура ПроверитьЗаполнениеШапки(Заголовок, СтруктураШапкиДокумента, Отказ) Экспорт
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Фирма, Сотрудник, Дата, ВидПриказа, Должность");
	Если НЕ ВидПриказа = Перечисления.УР_ВидыОперацийПриказОКадровомИзменении.Увольнение Тогда
		СтруктураОбязательныхПолей.Вставить("ГрафикРаботы");
		СтруктураОбязательныхПолей.Вставить("КоличествоСтавок");
	Конецесли;
	
	// Теперь вызовем общую процедуру проверки.
	ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеДокумента()

Процедура ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаДанныеПоТрудоустройству, ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности,
								ТаблицаДанныеПоТрудоустройствуДействующиеПоСтаройДолжности, Отказ) Экспорт
	
	// Получим необходимые данные для проведения и проверки заполенения данные
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Период"				, "Ссылка.Дата");
	СтруктураПолей.Вставить("Действует"				, "ВЫБОР КОГДА ИСТИНА ТОГДА ИСТИНА КОНЕЦ");
	СтруктураПолей.Вставить("ГрафикРаботы"			, "Ссылка.ГрафикРаботы");

	СтруктураПолей.Вставить("Должность"				, "Ссылка.Должность");
	СтруктураПолей.Вставить("ДолжностьСтарая"		, "Ссылка.ДолжностьСтарая");
	СтруктураПолей.Вставить("КоличествоСтавок"		, "Ссылка.КоличествоСтавок");
	СтруктураПолей.Вставить("Сотрудник"				, "Ссылка.Сотрудник");
	СтруктураПолей.Вставить("Фирма"					, "Ссылка.Фирма");
	
	// Данные по трудоустройству
	ТаблицаДанныеПоТрудоустройству = Движения.УР_ДанныеПоТрудоустройствуСотрудников.ВыгрузитьКолонки();
	СтрокаТЗ = ТаблицаДанныеПоТрудоустройству.Добавить();
	СтрокаТЗ.Фирма				= СтруктураШапкиДокумента.Фирма;
	СтрокаТЗ.Сотрудник			= СтруктураШапкиДокумента.Сотрудник;
	СтрокаТЗ.Должность			= СтруктураШапкиДокумента.Должность;
	СтрокаТЗ.ГрафикРаботы		= СтруктураШапкиДокумента.ГрафикРаботы;
	СтрокаТЗ.Подразделение		= СтруктураШапкиДокумента.Подразделение;
	СтрокаТЗ.КоличествоСтавок	= СтруктураШапкиДокумента.КоличествоСтавок;
	СтрокаТЗ.Период				= СтруктураШапкиДокумента.Дата;
	
	// Таблица данные по трудоустройству по текущей должности
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеПоТрудоустройствуСотрудников.Период,
	               |	ДанныеПоТрудоустройствуСотрудников.Фирма,
	               |	ДанныеПоТрудоустройствуСотрудников.Сотрудник,
	               |	ДанныеПоТрудоустройствуСотрудников.Должность,
	               |	ДанныеПоТрудоустройствуСотрудников.КоличествоСтавок,
	               |	ДанныеПоТрудоустройствуСотрудников.ГрафикРаботы,
	               |	ДанныеПоТрудоустройствуСотрудников.Регистратор,
	               |	ДанныеПоТрудоустройствуСотрудников.Подразделение
	               |ИЗ
	               |	РегистрСведений.УР_ДанныеПоТрудоустройствуСотрудников.СрезПоследних(
	               |			&Дата,
	               |			Фирма = &Фирма
	               |				И Сотрудник = &Сотрудник
	               |				И Должность = &Должность) КАК ДанныеПоТрудоустройствуСотрудников
	               |ГДЕ
	               |	ДанныеПоТрудоустройствуСотрудников.КоличествоСтавок > 0";
	
	Запрос.УстановитьПараметр("Дата", МоментВремени());
	Запрос.УстановитьПараметр("Фирма", СтруктураШапкиДокумента.Фирма);
	Запрос.УстановитьПараметр("Сотрудник", СтруктураШапкиДокумента.Сотрудник);
	Запрос.УстановитьПараметр("Должность", СтруктураШапкиДокумента.Должность);

	ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности = Запрос.Выполнить().Выгрузить();
	
	// Таблица данные по трудоустройству по старой должности
	Если ВидПриказа = Перечисления.УР_ВидыОперацийПриказОКадровомИзменении.КадровоеПеремещение Тогда
		Запрос.УстановитьПараметр("Должность", СтруктураШапкиДокумента.ДолжностьСтарая);
		ТаблицаДанныеПоТрудоустройствуДействующиеПоСтаройДолжности = Запрос.Выполнить().Выгрузить();
	Иначе
		ТаблицаДанныеПоТрудоустройствуДействующиеПоСтаройДолжности = ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности.СкопироватьКолонки();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик события ПередЗаписью.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОчисткаБазы") Тогда
		Возврат;
	КонецЕсли;		
	
	// Если Дата документа < ДатыЗапретаРедактирования,
	// и РежимЗаписи - не запись, выдается сообщение 
	// об отказе проведения, документ не проводится
	ПроверитьНаДатуЗапретаПередЗаписью(Отказ, ЭтотОбъект, РежимЗаписи);

КонецПроцедуры 

// Процедура - обработчик события ОбработкаПроведения.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Перем Заголовок, СтруктураШапкиДокумента;
	Перем ТаблицаДанныеПоТрудоустройству, ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности, ТаблицаДанныеПоТрудоустройствуДействующиеПоСтаройДолжности;
	      
	ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента, Отказ);
	ПроверитьЗаполнениеШапки(Заголовок, СтруктураШапкиДокумента, Отказ);
	ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаДанныеПоТрудоустройству, ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности,
								ТаблицаДанныеПоТрудоустройствуДействующиеПоСтаройДолжности, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Дополнительные проверки и формирование движений
	ТаблицаДвиженийДанныеПоТрудоустройствуСотрудников = Движения.УР_ДанныеПоТрудоустройствуСотрудников.ВыгрузитьКолонки();
	
	Если ВидПриказа = Перечисления.УР_ВидыОперацийПриказОКадровомИзменении.ПриемНаРаботу Тогда
		
		Для каждого СтрокаТЗ Из ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности Цикл
			ТекстСообщения = "Сотрудник уже принят на должность: " + СтрокаТЗ.Должность + ", в Фирму: " + СтрокаТЗ.Фирма + ", документом: " + СтрокаТЗ.Регистратор; 
			СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЦикла;
		
		// Формируем таблицы движений
		Для каждого СтрокаТЗ Из ТаблицаДанныеПоТрудоустройству Цикл
			Движение = ТаблицаДвиженийДанныеПоТрудоустройствуСотрудников.Добавить();
			Движение.Период				= СтруктураШапкиДокумента.Дата;
			Движение.Фирма				= СтрокаТЗ.Фирма;
			Движение.Сотрудник			= СтрокаТЗ.Сотрудник;
			Движение.Должность			= СтрокаТЗ.Должность;
			Движение.ГрафикРаботы		= СтрокаТЗ.ГрафикРаботы;
			//Движение.МестоРаботы		= СтрокаТЗ.МестоРаботы;
			Движение.Подразделение		= СтрокаТЗ.Подразделение;
			Движение.КоличествоСтавок	= СтрокаТЗ.КоличествоСтавок;
		КонецЦикла;
		
	ИначеЕсли ВидПриказа = Перечисления.УР_ВидыОперацийПриказОКадровомИзменении.КадровоеПеремещение Тогда
		
		// Проверка: сотрудник должен быть устроен на старую должность
		Если ТаблицаДанныеПоТрудоустройствуДействующиеПоСтаройДолжности.Количество() = 0 Тогда
			ТекстСообщения = "Сотрудник не устроен на должность: " + СтруктураШапкиДокумента.ДолжностьСтарая + ", в Фирму: " + СтруктураШапкиДокумента.Фирма;
			СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		// Проверка: сотрудник не должен быть устроен на текущую должность
		Если ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности.Количество() <> 0 Тогда 
			Для каждого СтрокаТЗ Из ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности Цикл
				ТекстСообщения = "Сотрудник уже принят на должность: " + СтрокаТЗ.Должность + ", в Фирму: " + СтрокаТЗ.Фирма + ", документом: " + СтрокаТЗ.Регистратор;
				СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			КонецЦикла; 
		КонецЕсли;
		
		//// Движения по регистру Данные по трудоустройству сотрудников
		// обнулим данные по старой должности
		Для Каждого СтрокаТЗ Из ТаблицаДанныеПоТрудоустройствуДействующиеПоСтаройДолжности Цикл
			Движение = ТаблицаДвиженийДанныеПоТрудоустройствуСотрудников.Добавить();
			Движение.Период				= СтруктураШапкиДокумента.Дата;
			Движение.Фирма				= СтрокаТЗ.Фирма;
			Движение.Сотрудник			= СтрокаТЗ.Сотрудник;
			Движение.Должность			= СтрокаТЗ.Должность;
			Движение.ГрафикРаботы		= Справочники.ГрафикиРаботыСотрудников.ПустаяСсылка();
			Движение.Подразделение		= Справочники.УР_Подразделения.ПустаяСсылка();
			Движение.КоличествоСтавок	= 0;
		КонецЦикла;
		
		// добавим данные по новой должности
		Для Каждого СтрокаТЗ Из ТаблицаДанныеПоТрудоустройству Цикл
			Движение = ТаблицаДвиженийДанныеПоТрудоустройствуСотрудников.Добавить();
			Движение.Период				= СтруктураШапкиДокумента.Дата;
			Движение.Фирма				= СтрокаТЗ.Фирма;
			Движение.Сотрудник			= СтрокаТЗ.Сотрудник;
			Движение.Должность			= СтрокаТЗ.Должность;
			Движение.ГрафикРаботы		= СтрокаТЗ.ГрафикРаботы;
			Движение.Подразделение		= СтрокаТЗ.Подразделение;
			Движение.КоличествоСтавок	= СтрокаТЗ.КоличествоСтавок;
		КонецЦикла;
		
	ИначеЕсли ВидПриказа = Перечисления.УР_ВидыОперацийПриказОКадровомИзменении.ИзменениеУсловийТруда Тогда
	
		// Проверка: сотрудник должен быть устроен на текущую должность
		Если ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности.Количество() = 0 Тогда
			ТекстСообщения = "Сотрудник не устроен на должность: " + СтруктураШапкиДокумента.Должность + ", в Фирму: " + СтруктураШапкиДокумента.Фирма;
			СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		// добавим данные по новым реквизитам (график работы, место работы, количество ставок)
		Для Каждого СтрокаТЗ Из ТаблицаДанныеПоТрудоустройству Цикл
			
			СтруктураОтбора = Новый Структура("Фирма, Сотрудник, Должность", СтрокаТЗ.Фирма, СтрокаТЗ.Сотрудник, СтрокаТЗ.Должность);
			НайденныеСтроки = ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Если НайденныеСтроки[0].ГрафикРаботы <> СтрокаТЗ.ГрафикРаботы
					ИЛИ  НайденныеСтроки[0].Подразделение <> СтрокаТЗ.Подразделение
					ИЛИ  НайденныеСтроки[0].КоличествоСтавок <> СтрокаТЗ.КоличествоСтавок Тогда
					Движение = ТаблицаДвиженийДанныеПоТрудоустройствуСотрудников.Добавить();
					Движение.Период				= СтруктураШапкиДокумента.Дата;
					Движение.Фирма				= СтрокаТЗ.Фирма;
					Движение.Сотрудник			= СтрокаТЗ.Сотрудник;
					Движение.Должность			= СтрокаТЗ.Должность;
					Движение.ГрафикРаботы		= СтрокаТЗ.ГрафикРаботы;
					Движение.Подразделение		= СтрокаТЗ.Подразделение;
					Движение.КоличествоСтавок	= СтрокаТЗ.КоличествоСтавок;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		
	ИначеЕсли ВидПриказа = Перечисления.УР_ВидыОперацийПриказОКадровомИзменении.Увольнение Тогда
		
		// Проверка: сотрудник должен быть устроен на текущую должность
		Если ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности.Количество() = 0 Тогда
			ТекстСообщения = "Сотрудник не устроен на должность: " + СтруктураШапкиДокумента.Должность + ", в Фирму: " + СтруктураШапкиДокумента.Фирма;
			СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		//// Движения по регистру Данные по трудоустройству сотрудников
		// обнулим данные по должности
		Для Каждого СтрокаТЗ Из ТаблицаДанныеПоТрудоустройствуДействующиеПоТекущейДолжности Цикл
			Движение = ТаблицаДвиженийДанныеПоТрудоустройствуСотрудников.Добавить();
			Движение.Период				= СтруктураШапкиДокумента.Дата;
			Движение.Фирма				= СтрокаТЗ.Фирма;
			Движение.Сотрудник			= СтрокаТЗ.Сотрудник;
			Движение.Должность			= СтрокаТЗ.Должность;
			Движение.ГрафикРаботы		= Справочники.ГрафикиРаботыСотрудников.ПустаяСсылка();
			Движение.Подразделение		= Справочники.УР_Подразделения.ПустаяСсылка();
			Движение.КоличествоСтавок	= 0;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвиженийДанныеПоТрудоустройствуСотрудников.ЗаполнитьЗначения(Истина, "Активность");
	
	Движения.УР_ДанныеПоТрудоустройствуСотрудников.Загрузить(ТаблицаДвиженийДанныеПоТрудоустройствуСотрудников);

КонецПроцедуры // ОбработкаПроведения()
