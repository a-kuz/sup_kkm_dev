Перем ТаблицаЗаказов;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДЕЙСТВИЙ ФОРМЫ

Процедура ПриОткрытии()
	// формирование подменю отчетов
	ИнтерфейсАдмина.СоздатьСписокОтчетов(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ОТЧЕТОВ

// Процедура назначается динамически
// Процедура вызывается при выборе пункта подменю ПодменюОтчеты командной панели
// формы. Процедура отрабатывает выбор печатной формы.
// Подключение данной процедуры-обработчика выполняется из кода конфигурации
//
Процедура ДействияФормыДействиеВыбратьОтчет(Кнопка) 
	
	ИнтерфейсАдмина.ВыбратьОтчет(ЭтаФорма, Кнопка);
	
КонецПроцедуры

// Процедура обновляет статусы заказов, изменяет картинку статуса
// 
Процедура ОбновитьСтатусыЗаказов(ОформленияСтрок)
	Заказы = Новый Массив;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Заказы.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
	КонецЦикла;
	Запрос = Новый Запрос;		
	Запрос.УстановитьПараметр("Заказы", Заказы);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказДопИнф.Заказ,
	|	ЗаказДопИнф.Статус,
	|	ЗаказДопИнф.ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис КАК НеУдалосьОтправитьОтменуВегаис,
	|	Не ЗаказДопИнф.ПротоколРасчетов.ДобавленыЗаписиВexcise КАК НеДобавленыЗаписиВexcise,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЗаказДопИнф.ПротоколРасчетов.ИдентификаторЗапросаЕГАИС, """") = """"
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИдентификаторЗапросаЕГАИС,
	|	ЗаказДопИнф.ПротоколРасчетов.Фискализирован КАК Фискализирован,
	|	ЗаказДопИнф.ПротоколРасчетов,
	|	ЗаказДопИнф.ПротоколРасчетов.ККМ КАК ККМ,
	|	ЗаказДопИнф.ПротоколРасчетов.Неучетный КАК Неучетный,
	|	ЗаказДопИнф.Заказ.ИтоговаяСумма КАК СуммаРеализации,
	|	ЗаказДопИнф.Заказ.ИтогоСумма КАК Сумма
	|ИЗ
	|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|ГДЕ
	|	ЗаказДопИнф.Заказ В(&Заказы)";
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Заказ = ДанныеСтроки.Ссылка;		
		СтрокаЗаказа = ТаблицаЗаказов.Найти(Заказ, "Заказ");
		Если СтрокаЗаказа = Неопределено Тогда
			Разница = ДанныеСтроки.ИтоговаяСумма - ДанныеСтроки.ИтогоСумма;
		Иначе
			Разница = СтрокаЗаказа.СуммаРеализации - СтрокаЗаказа.Сумма;
			Если СтрокаЗаказа.Статус = Перечисления.СтатусыЗаказа.Закрыт Тогда
				
				ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку = Истина;

				Если СтрокаЗаказа.ККМ = Справочники.ТорговоеОборудование.ПустаяСсылка() И
					НЕ СтрокаЗаказа.Неучетный Тогда
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 5;
				Иначе
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 0;
				КонецЕсли;
				
			ИначеЕсли СтрокаЗаказа.Статус = Перечисления.СтатусыЗаказа.Удален Тогда
				ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку = Истина;
				ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 1;
			КонецЕсли;
			
			Для Каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
				Если ТаблицаЗаказов.Колонки.Найти(Ячейка.Имя) <> Неопределено Тогда
					Значение = СтрокаЗаказа[Ячейка.Имя];
					Если ТипЗнч(Значение) = Тип("Булево") Тогда
						Ячейка.УстановитьФлажок(Значение);
					Иначе
						Ячейка.УстановитьТекст(Значение);	
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ОформлениеСтроки.Ячейки.Номер.УстановитьТекст(УбратьВсеБуквы(ДанныеСтроки.Номер));
		КонецЕсли;
		Если Разница < 0 Тогда
			ОформлениеСтроки.Ячейки.Скидка.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.Скидка.ИндексКартинки = 3;
		ИначеЕсли Разница > 0 Тогда
			ОформлениеСтроки.Ячейки.Скидка.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.Скидка.ИндексКартинки = 4;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры //ОбновитьСтатусыЗаказов()

//Процедура-обработчик события ПриПолученииДанных списка.
//
Процедура ДокументСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	ОбновитьСтатусыЗаказов(ОформленияСтрок);
КонецПроцедуры

//Процедура-обработчик события ПриАктивизацииСтроки списка.
//
Процедура ДокументСписокПриАктивизацииСтроки(Элемент)
	
	ИнтерфейсАдмина.СоздатьСписокПечатныхФорм(ЭтаФорма);
	// формирование подменю отчетов
	ИнтерфейсАдмина.СоздатьСписокОтчетов(ЭтаФорма);
	
КонецПроцедуры

// Процедура назначается динамически
// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
// Подключение данной процедуры-обработчика выполняется из кода конфигурации
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка) 
	
	ИнтерфейсАдмина.ВыбратьПечатнуюФорму(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДокументСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Попытка
		
	Исключение	
	КонецПопытки;	
КонецПроцедуры


Процедура ДокументСписокПередУстановкойПометкиУдаления(Элемент, Отказ)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ДействияФормыСПУЛЛояльности(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Заказ", ТекущаяСтрока.Ссылка);
	ОткрытьФорму("РегистрСведений.СПУЛЛояльности.ФормаСписка", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

Процедура ДействияФормыУправляемаяФорма(Кнопка)
	ОткрытьФорму("Документ.Заказ.Форма.ФормаСпискаУправляемая");
КонецПроцедуры

Процедура ДействияФормыДанныеЛояльности(Кнопка)
	ТекущаяСтрока = ЭлементыФормы.ДокументСписок.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Заказ", ТекущаяСтрока.Ссылка);
	ОткрытьФорму("РегистрСведений.ДанныеЛояльностиПоЗаказу.ФормаСписка", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры




