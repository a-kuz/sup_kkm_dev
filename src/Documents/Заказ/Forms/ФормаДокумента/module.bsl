Перем ЗаписиРегистра;
Перем КонстантаВалюта;

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием" Формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Отказ = Истина;
	ИначеЕсли МестоРеализации = Справочники.МестаРеализации.Ресторан Тогда
		
	КонецЕсли;
	
КонецПроцедуры //ПередОткрытием()

// Обработчик события "ПриОткрытии" Формы.
//
Процедура ПриОткрытии()
	
	ЗаполнитьДанныеПоЗаказу();
	УправлениеВидимостью();
	УправлениеДоступностью();
	
	Попытка
		ЭлементыФормы.ПанельТаблиц.ТекущаяСтраница = ЭлементыФормы.ПанельТаблиц.Страницы[ВосстановитьЗначение("ТекущаяСтраницаЗаказ")];
	Исключение
	КонецПопытки;
	
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("ТекущаяСтраницаЗаказ", ЭлементыФормы.ПанельТаблиц.ТекущаяСтраница.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Обработчик нажатия гиперссылки Официант.
//
Процедура ОфициантНажатие(Элемент)
	ОткрытьЗначение(Автор);
КонецПроцедуры

// Обработчик нажатия гиперссылки МестоРеализации.
//
Процедура МестоРеализацииНажатие(Элемент)
	ОткрытьЗначение(МестоРеализации);
КонецПроцедуры

// Обработчик нажатия гиперссылки ПосадочноеМесто.
//
Процедура ПосадочноеМестоНажатие(Элемент)
	ОткрытьЗначение(ПосадочноеМесто);
КонецПроцедуры

// Обработчик нажатия гиперссылки Кассир.
//
Процедура КассирНажатие(Элемент)
	ОткрытьЗначение(Кассир);
КонецПроцедуры

// Обработчик нажатия гиперссылки Клиент.
//
Процедура КлиентНажатие(Элемент)
	ОткрытьЗначение(Клиент);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполняет данные о заказе
Процедура ЗаполнитьДанныеПоЗаказу()
	
	// Данные по товарам
	Для Каждого СтрокаТЧ Из Товары Цикл  
		
		СтрокаТовара = ДеревоТоваров.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовара, СтрокаТЧ);
		
		Если Товары.Итог("СуммаРеализации") - Товары.Итог("Сумма") < 0 Тогда
			СтрокаТовара.СуммаСкидки = -(СтрокаТовара.СуммаРеализации-СтрокаТовара.Сумма);		
		КонецЕсли;
		
		Если глВерсия = 1 Тогда
			Специфики = Неопределено;
		КонецЕсли;
		
		Если глВерсия > 1 Тогда
			МассивСпецифик = Специфики.НайтиСтроки(Новый Структура("НомерСтрокиТовара", СтрокаТЧ.НомерСтроки));
			Для Каждого СтрокаСпецифики Из МассивСпецифик Цикл 
				НоваяСтрока 		= СтрокаТовара.Строки.Добавить();
			    НоваяСтрока.Товар 	= СтрокаСпецифики.Специфика;
				НоваяСтрока.Цена 	= СтрокаСпецифики.Цена;
				НоваяСтрока.ЦенаРеализации = СтрокаСпецифики.ЦенаРеализации;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;		
	

	// Данные о протоколе расчетов
	Отбор 			= Новый Структура("Заказ", Ссылка);
	ЗаписиРегистра 	= РегистрыСведений.ЗаказДопИнф.Получить(Отбор);
	ДатаОткрытия 	= ЗаписиРегистра.ДатаОткрытия;
	ДатаЗакрытия 	= ЗаписиРегистра.ДатаЗакрытия;
	Запрос  = Новый Запрос;
	Кассир = Автор;
	Если ЗначениеЗаполнено(ЗаписиРегистра.ПротоколРасчетов) Тогда
		Кассир 		= ЗаписиРегистра.ПротоколРасчетов.Автор;
		
		Протокол 	= ПолучитьТаблицуОплаты(Протокол);
		
		Для Каждого СтрокаОплаты Из Протокол Цикл
			ТипОплаты = СтрокаОплаты.Тип;
			Если НЕ ЗначениеЗаполнено(ТипОплаты) Тогда
				Продолжить;
			КонецЕсли;
			СуммаОплаты = Формат(СтрокаОплаты.Сумма, "ЧЦ=12; ЧДЦ=2;")+ " " + КонстантаВалюта;
			Если ТипОплаты = Перечисления.ТипыОплаты.Нал Тогда
				Наличные = СуммаОплаты;
			ИначеЕсли ТипОплаты = Перечисления.ТипыОплаты.Безнал Тогда
				Безнал = СуммаОплаты;
			ИначеЕсли ТипОплаты = Перечисления.ТипыОплаты.Карта Тогда
				БанкКарта = СуммаОплаты;
			ИначеЕсли ТипОплаты = Перечисления.ТипыОплаты.Неплательщик Тогда
				Неплательщик = СуммаОплаты;				
			КонецЕсли;				
		КонецЦикла;
		
	КонецЕсли;
	
	// Найдем удаления
	Запрос.Текст = "ВЫБРАТЬ
	|	Удаление.Товар,
	|	Удаление.Количество,
	|	Удаление.Причина,
	|	Удаление.Сумма,
	|	Удаление.Автор
	|ИЗ
	|	Документ.Удаление КАК Удаление
	|ГДЕ
	|	Удаление.Заказ = &Заказ
	|	И Удаление.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	НомерСтроки = 1;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Удаления.Добавить();
		НоваяСтрока.НомерСтроки = НомерСтроки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	// Найдем возвраты
	Запрос.Текст = "ВЫБРАТЬ
	|	ВозвратТовары.Товар,
	|	ВозвратТовары.Количество,
	|	ВозвратТовары.Сумма КАК Сумма,
	|	ВозвратТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Возврат.Товары КАК ВозвратТовары
	|ГДЕ
	|	ВозвратТовары.Ссылка.Заказ = &Заказ
	|	И НЕ ВозвратТовары.Ссылка.ПометкаУдаления
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Ссылка";
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	ВыборкаСсылок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылок.Следующий() Цикл
		// Строка ссылки
		НоваяСтрокаСсылка 				= Возвраты.Строки.Добавить();
		НоваяСтрокаСсылка.Ссылка		= ВыборкаСсылок.Ссылка;
		НоваяСтрокаСсылка.Сумма 		= ВыборкаСсылок.Сумма;
		НоваяСтрокаСсылка.ВариантОплаты	= ВыборкаСсылок.Ссылка.ВариантОплаты;
		
		ВыборкаТоваров = ВыборкаСсылок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТоваров.Следующий() Цикл
			// Строка товаров
			НоваяСтрокаТовара 				= НоваяСтрокаСсылка.Строки.Добавить();
			НоваяСтрокаТовара.Ссылка 		= ВыборкаТоваров.Товар;
			НоваяСтрокаТовара.Количество 	= ВыборкаТоваров.Количество;
			НоваяСтрокаТовара.Сумма 		= ВыборкаТоваров.Сумма;			
		КонецЦикла;
		
	КонецЦикла;
	
	// Итоги
	СтрФормата = "ЧЦ=12; ЧДЦ=2;";
	ЭлементыФормы.Сумма.Значение 			= Строка(Формат(ИтоговаяСумма, СтрФормата)) + " " + КонстантаВалюта;
	ЭлементыФормы.Сумма1.Значение 			= ЭлементыФормы.Сумма.Значение;
	ЭлементыФормы.СуммаСкидок.Значение 		= Строка(Формат(Скидки.Итог("Сумма"), СтрФормата)) + " " + КонстантаВалюта;
	ЭлементыФормы.СуммаУдалений.Значение 	= Строка(Формат(Удаления.Итог("Сумма"), СтрФормата)) + " " + КонстантаВалюта;
	ЭлементыФормы.СуммаВозвратов.Значение 	= Строка(Формат(Возвраты.Строки.Итог("Сумма"), СтрФормата)) + " " + КонстантаВалюта;
	
	// Текстовые поля
	ЭлементыФормы.НадписьЗаголовок.Значение = "  Заказ № " + Номер + ?(ЗначениеЗаполнено(ВнешнийНомер), " / "+ВнешнийНомер, "");
	ЭлементыФормы.НадписьПроДаты.Значение 	= "Открыт: " + ДатаОткрытия + ?(ЗначениеЗаполнено(ДатаЗакрытия), "  Закрыт: " + ДатаЗакрытия, "");
	
КонецПроцедуры //ЗаполнитьДанныеПоЗаказу()

// Управляет видимостью формы.
//
Процедура УправлениеВидимостью()
	
	ПанельТаблиц  = ЭлементыФормы.ПанельТаблиц; 
	
	ЕстьУдаления 	= Удаления.Количество() > 0;
	ЕстьСкидки 		= Скидки.Количество() > 0;
	ЕстьВозвраты	= Возвраты.Строки.Количество() > 0;
	ЗаказЗакрыт		= ЗаписиРегистра.Статус = Перечисления.СтатусыЗаказа.Закрыт;
	ШапкаКолонкиСкидки = ?(Товары.Итог("СуммаРеализации") - Товары.Итог("Сумма")<0,"Скидка","Наценка");
	
	ПанельТаблиц.Страницы.Скидки.Видимость				= ЕстьСкидки;
	ПанельТаблиц.Страницы.ПротоколРасчетов.Видимость 	= ЗаказЗакрыт;
	ПанельТаблиц.Страницы.Возвраты.Видимость 			= ЕстьВозвраты;
	ПанельТаблиц.Страницы.Удаления.Видимость 			= ЕстьУдаления;	
	
	ЭтоРесторан = МестоРеализации = Справочники.МестаРеализации.Ресторан;
	
	ЭлементыФормы.ПанельТаблиц.Страницы.Товары.Видимость = Не ЭтоРесторан;
	ЭлементыФормы.ПанельТаблиц.Страницы.ТоварыСпецифики.Видимость = ЭтоРесторан;
	
КонецПроцедуры

// Управляет доступностью формы
//
Процедура УправлениеДоступностью()
	
	ТипТП = Тип("ТабличноеПоле");
	Для Каждого Эл Из ЭлементыФормы Цикл
		Если ТипЗнч(Эл) = ТипТП Тогда
			Для Каждого Колонка Из Эл.Колонки Цикл
				Если Колонка.ЭлементУправления = Неопределено Тогда
					Продолжить;
				КонецЕсли;								
				Колонка.ЭлементУправления.ТолькоПросмотр 		= Истина;
				Колонка.ЭлементУправления.РедактированиеТекста 	= Ложь;
			КонецЦикла;			
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры //УправлениеДоступностью()


Процедура ДеревоТоваровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если глВерсия>1 И ТипЗнч(ДанныеСтроки.Товар) = Тип("СправочникСсылка.Специфики") Тогда
		 ОформлениеСтроки.Ячейки.Товар.Текст = " - "+ДанныеСтроки.Товар;
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыРедакторОбъектаБДСтроки(Кнопка)
	ирОбщий.ОткрытьОбъектВРедактореОбъектаБДЛкс(Ссылка.ПолучитьОбъект());
КонецПроцедуры

Процедура ДействияФормыОткрытьПротокол(Кнопка)
	
	ПротоколРасчетов = ПротоколРасчетовПоЗаказуНаСервере(Ссылка);//:ПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка();
	Если Не ПротоколРасчетов.Пустая() Тогда
		ПротоколРасчетов.ПолучитьФорму("ФормаДокументаУправляемая").Открыть();
	КонецЕсли;
КонецПроцедуры

Функция ПротоколРасчетовПоЗаказуНаСервере(Заказ) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколРасчетов.Ссылка
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколРасчетов.Протокол КАК ПротоколТЧ
	|		ПО ПротоколТЧ.Ссылка = ПротоколРасчетов.Ссылка
	|ГДЕ
	|	ПротоколРасчетов.Заказ = &Заказ
	|	И НЕ ПротоколРасчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколРасчетов.Дата УБЫВ,
	|	ПротоколТЧ.СуммаФакт УБЫВ";
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Рез = Запрос.Выполнить();            
	Если Рез.Пустой() Тогда
		Возврат Документы.ПротоколРасчетов.ПустаяСсылка();
	Иначе 
		Возврат Рез.Выгрузить()[0][0];
	КонецЕсли;

КонецФункции

Процедура ДействияФормыОткрытьЖР(Кнопка)
	//АнализЖурналаРегистрации = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирАнализЖурналаРегистрации");
	//Отбор=Новый Структура("Данные", Ссылка);            
	//АнализЖурналаРегистрации.ОткрытьСОтбором(Дата - 86400, ,Отбор);
	ОткрытьФорму("Обработка.ЖурналРегистрацииТонкийКлиентSQL.Форма.ФормаСпискаУправляемая", Новый Структура("Данные", Ссылка),ЭтаФорма,Ссылка.УникальныйИдентификатор(),);
КонецПроцедуры

Процедура ПротоколВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ВыбраннаяСтрока.ПротоколРасчетов.ПолучитьФорму().Открыть();
КонецПроцедуры

Процедура НадписьЗаголовокНажатие(Элемент)
	Попытка
		Если РаботаСокнами = Неопределено Тогда
			РаботаСокнами = Обработки.РаботаСокнами.Создать();
		КонецЕсли;
		
		ирОбщий.БуферОбмена_УстановитьЗначениеЛкс(Номер);	
		РаботаСокнами.ПоказатьПлашку(Номер, "Номер заказа скопирован в буфер обмена");		
	Исключение
		Номер_ = Номер;
		ВвестиСтроку(Номер_)
	КонецПопытки;                                                                       	
КонецПроцедуры

Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если СтрНайти(Колонка.Имя, "Номер") Или Колонка.Имя = "ДокументОплаты" Тогда
		ВыбраннаяСтрока.ДокументОплаты.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ЗначениеЗаполнено(ДанныеСтроки.ДокументОплаты) Тогда
		ОформлениеСтроки.Ячейки.НомерЧека.УстановитьТекст(ДанныеСтроки.ДокументОплаты.НомерЧека); 
		ОформлениеСтроки.Ячейки.НомерСмены.УстановитьТекст(ДанныеСтроки.ДокументОплаты.НомерСмены); 
	КонецЕсли;
КонецПроцедуры

Процедура ДействияФормыУправляемаяФорма(Кнопка)
	ОткрытьФорму("Документ.Заказ.Форма.ФормаДокументаУправляемая");
КонецПроцедуры

КонстантаВалюта = Константы.ОсновнаяВалюта.Получить();