
Перем мВалютаРегламентированногоУчета Экспорт;
Перем мОшибкаПрименения Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ МЕНЮ И УСТАНОВКИ НАЛИЧИЯ В ПРОДАЖЕ

#Если Клиент Тогда

Функция ПрименитьПланМеню() Экспорт
	
	// ПланМеню с банкетом
	ЭтоБронь = ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ВремяНачала) И ЗначениеЗаполнено(ВремяКонца);
	
	// Если не указан каталог товаров и он 1, то подставим
	Если НЕ ЗначениеЗаполнено(КаталогТоваров) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.КаталогиТоваров ГДЕ НЕ ПометкаУдаления");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			КаталогТоваров = Выборка.Ссылка;
			ЗарегистрироватьСобытие("План меню. Предупреждение", УровеньЖурналаРегистрации.Предупреждение, , , "В реквизите ""каталог товаров"" заменено пустое значение на " + КаталогТоваров);
		КонецЕсли;
	КонецЕсли;
	
	// Если не указан тип цен
	Если НЕ ЗначениеЗаполнено(КатегорияЦен) И глВерсия > 1 И ЗначениеЗаполнено(Склад) И ЗначениеЗаполнено(Склад.ТипЦен) Тогда
		КатегорияЦен = Склад.ТипЦен;
		ЗарегистрироватьСобытие("План меню. Предупреждение", УровеньЖурналаРегистрации.Предупреждение, , , "В реквизите ""тип цены"" заменено пустое значение на " + КатегорияЦен);
	КонецЕсли;
	
	// ПланМеню с банкетом
	Если ЭтоБронь  И глВерсия > 1 Тогда
		Если СоздатьБронь() Тогда
			// Если текущая дата совпадает с датой ПланаМеню, обновляем цены
			Если ТекущаяДата() >= Дата Тогда
				Возврат ОбработатьМеню();
			// Если дата ПланаМеню больше текущей, ПланМеню повторно обработаем позже	
			Иначе
				ОбработкаСобытийЗапись = РегистрыСведений.ОбработкаСобытий.СоздатьМенеджерЗаписи();
				ОбработкаСобытийЗапись.Период			= Дата;
				ОбработкаСобытийЗапись.РабочееМесто		= Справочники.РабочиеМеста.ПустаяСсылка();
				//ОбработкаСобытийЗапись.Событие		= Ссылка;
				ОбработкаСобытийЗапись.ТипСобытия		= Перечисления.ТипыСобытий.ПланМеню;
				ОбработкаСобытийЗапись.ИдСобытия		= Строка(Ссылка.УникальныйИдентификатор());
				ОбработкаСобытийЗапись.Записать();
			КонецЕсли;
			Возврат Истина;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ОбработатьМеню();
	
КонецФункции

Функция ОбработатьМеню()
	
	// очистка всего меню
	Если ОчиститьНаличиеВПродаже Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Товары
								|ГДЕ Владелец = &Каталог И НЕ ЭтоГруппа И (КогдаВПродаже <> 0 ИЛИ ЕстьВПродаже)
								|ДЛЯ ИЗМЕНЕНИЯ");
								
		Запрос.УстановитьПараметр("Каталог", КаталогТоваров);
		Выборка = Запрос.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.Простой;
			Объект.КогдаВПродаже       = 0;
			Объект.КогдаВПродажеВремя1 = Неопределено;
			Объект.КогдаВПродажеВремя2 = Неопределено;
			Объект.ЕстьВПродаже        = Ложь;
			Объект.КогдаВПродажеПоНеделям.Очистить();
			
			Попытка
				Объект.Записать();
			Исключение
				ОшибкаПрименения(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли; 
	
	// обновление меню и установка наличия по план-меню
	НачатьТранзакцию();
	
	Для каждого СтрокаНоменклатуры Из Товары Цикл
		
		Если НЕ ОбновитьТоварПоНоменклатуре(СтрокаНоменклатуры) Тогда
			ОшибкаПрименения(ОписаниеОшибки());
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если глВерсия>1 Тогда
		Для каждого СтрокаСпецифики Из Специфики Цикл
			
			Если НЕ ОбновитьСпецификуПоНоменклатуре(СтрокаСпецифики) Тогда
				ОшибкаПрименения(ОписаниеОшибки());
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла; 
		
		// Изменить тип цены в месте реализации
		Если УстановитьТипЦенМестаРеализации И ЗначениеЗаполнено(Склад) И ЗначениеЗаполнено(КатегорияЦен) Тогда
			Если НЕ УстановитьТипЦенМестаРеализации() Тогда
				ОшибкаПрименения(ОписаниеОшибки());
				Возврат Ложь;
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЕсли; 
	
	Записать();
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;

КонецФункции	

Функция СоздатьБронь() 
	
	// Бронь уже создана?
	Запрос = Новый Запрос("ВЫБРАТЬ Бронь.Ссылка ИЗ	Документ.Бронь КАК Бронь ГДЕ Бронь.ДокОснование = &ДокОснование");	
	Запрос.УстановитьПараметр("ДокОснование", Ссылка);
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Создать бронь
	Бронь = Документы.Бронь.СоздатьДокумент();
	Бронь.ДокОснование		= Ссылка;	
	Бронь.Автор				= Неопределено;				// ???
	Бронь.Дата				= ТекущаяДата();
	Бронь.ВремяНачала		= ВремяНачала;
	Бронь.ВремяКонца		= ВремяКонца;
						
	Бронь.КлиентСтр			= Контрагент;
	Бронь.Интернет 			= Ложь;
	Если ЗначениеЗаполнено(Контрагент.Телефон) тогда
		Бронь.Комментарий	= Бронь.Комментарий + "Тел: " + Контрагент.Телефон + " ";
	КонецЕсли;
	Если ЗначениеЗаполнено(Комментарий) тогда
		Бронь.Комментарий	= Бронь.Комментарий + ?(Бронь.Комментарий="","",Символы.ПС) + Комментарий;
	КонецЕсли;
	СтрокаМесто = Бронь.ПосадочныеМеста.Добавить();
	СтрокаМесто.ПосадочноеМесто	= Справочники.ПосадочныеМеста.ПустаяСсылка();				
	СтрокаМесто.КоличествоПосетителей = Макс(1, КоличествоПосетителей);
	Бронь.БроньПроверена 	= Ложь;
	
	НачатьТранзакцию();
	
	// Найти / добавить товары
	Для каждого СтрокаНоменклатуры Из Товары Цикл
		НовСтр = Бронь.Товары.Добавить();
		Если НЕ ОбновитьТоварПоНоменклатуре(СтрокаНоменклатуры, Ложь, НовСтр) Тогда
			ОшибкаПрименения(ОписаниеОшибки());
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 

	// Найти / добавить специфики
	Для каждого СтрокаСпецифики Из Специфики Цикл
		НовСтрСпец = Бронь.Специфики.Добавить();
		Если НЕ ОбновитьСпецификуПоНоменклатуре(СтрокаСпецифики, НовСтрСпец) Тогда
			ОшибкаПрименения(ОписаниеОшибки());
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла; 

	// Записать бронь
	Попытка
		Бронь.Записать(РежимЗаписиДокумента.Запись);
		Записать();
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Исключение
		ОшибкаПрименения(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

КонецФункции

Функция ОбновитьТоварПоНоменклатуре(СтрокаНоменклатуры, ОбновлятьЦены = Истина, НовСтрБрони = Неопределено)
	
	Номенклатура = СтрокаНоменклатуры.Номенклатура;
	
	Товар = НайтиТоварПоНоменклатуре(Номенклатура, СтрокаНоменклатуры.Коэффициент);
	
	Если ЗначениеЗаполнено(Товар) Тогда
		Товар = Товар.ПолучитьОбъект();
		Товар.КогдаВПродажеПоНеделям.Очистить();
	Иначе
		Товар = Справочники.Товары.СоздатьЭлемент();
		Товар.Владелец				= КаталогТоваров;
		Товар.Номенклатура			= Номенклатура;
		Товар.КоэфПересчета			= СтрокаНоменклатуры.Коэффициент;
		Товар.ВариантПечати			= 511;	// все колонки
	КонецЕсли;
	
	Товар.Родитель			= НайтиРодителя(Номенклатура.Родитель);
	Товар.Наименование		= ?(Номенклатура.НаименованиеПолное="", Номенклатура.Наименование, Номенклатура.НаименованиеПолное);
	Товар.ГруппаПечати		= Номенклатура.ГруппаПечати;
	Товар.Категория			= Номенклатура.Категория;
	Товар.Выход				= СтрокаНоменклатуры.Выход;
	Товар.ЕдиницаИзмерения	= СтрокаНоменклатуры.ЕдиницаИзмерения;
	Товар.КратностьКоличества	= ?(Номенклатура.КратностьКоличества=0,1,Номенклатура.КратностьКоличества);
	//Товар.ВремяПриготовления= Номенклатура.ВремяПриготовления; // pr пока не получаем из БО	
	
	Если глВерсия>1 Тогда
		Товар.ГруппаСпецифик	= Номенклатура.ГруппаСпецифик;
		Товар.МинУдельныйВес	= Номенклатура.МинУдельныйВес;
		Товар.МаксУдельныйВес	= Номенклатура.МаксУдельныйВес;
	КонецЕсли; 
	
	Если УстанавливатьПризнакНаличияВПродаже Тогда
		Товар.ВариантНаличияВПродаже= ?(СтрокаНоменклатуры.ЕстьВПродаже, Перечисления.ВариантыНаличияВПродаже.Простой, Перечисления.ВариантыНаличияВПродаже.Сложный);
		Товар.ЕстьВПродаже			= СтрокаНоменклатуры.ЕстьВПродаже;
		Товар.КогдаВПродаже			= СтрокаНоменклатуры.КогдаВПродаже;
		Товар.КогдаВПродажеВремя1	= СтрокаНоменклатуры.КогдаВПродажеВремя1;
		Товар.КогдаВПродажеВремя2	= СтрокаНоменклатуры.КогдаВПродажеВремя2;
		ЗаполнитьНаличиеПоНеделям(СтрокаНоменклатуры, Товар);
	КонецЕсли; 
	
	Если УстанавливатьПараметрыПодбораВЗаказе Тогда
		Товар.ЗапросКоличества		= Номенклатура.ЗапросКоличества;
		Товар.ОтдельнойСтрокой		= Номенклатура.ОтдельнойСтрокой;
	КонецЕсли; 
	
	Товар.ОбменДанными.Загрузка = Истина;
	Попытка
		Товар.Записать();
		Если НовСтрБрони <> Неопределено Тогда
			НовСтрБрони.Товар		= Товар.Ссылка;
			НовСтрБрони.Цена		= СтрокаНоменклатуры.Цена;
			НовСтрБрони.Количество	= СтрокаНоменклатуры.Количество;
			НовСтрБрони.Сумма		= СтрокаНоменклатуры.Цена * СтрокаНоменклатуры.Количество;
		КонецЕсли;	
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	// установим себестоимость
	Отбор = Новый Структура("ТипЦен, Номенклатура", Справочники.ТипыЦен.Себестоимость, Номенклатура);
	ЦенаНоменклатуры = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(Дата, Отбор);
	
	
	Если НЕ НеУстанавливатьЦенуРеализацииИзПланМеню И ОбновлятьЦены Тогда
		// установим цену реализации
		ЦенаТовара = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();	
		ЦенаТовара.Период	= Дата;
		ЦенаТовара.ТипЦен	= КатегорияЦен;
		ЦенаТовара.Товар	= Товар.Ссылка;
		ЦенаТовара.Валюта	= ВалютаДокумента;
		ЦенаТовара.Цена		= СтрокаНоменклатуры.Цена;
		Попытка
			ЦенаТовара.Записать();
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	// штрих-коды
	МассивСтарыхШК = Новый Массив;
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ШтрихКод ИЗ Справочник.ШтрихКоды
	|ГДЕ Товар=&Товар И НЕ ПометкаУдаления");
	
	Запрос.УстановитьПараметр("Товар", Товар.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивСтарыхШК.Добавить(Выборка.ШтрихКод);
	КонецЦикла; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ ШтрихКод ИЗ РегистрСведений.ШтрихКодыНоменклатуры
	                 	|ГДЕ Владелец = &Номенклатура И ЕдиницаИзмерения = &ЕдиницаИзмерения И ШтрихКод НЕ В (&МассивСтарыхШК)
	                 	|");
	Запрос.УстановитьПараметр("МассивСтарыхШК"	, МассивСтарыхШК);
	Запрос.УстановитьПараметр("Номенклатура"	, Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", СтрокаНоменклатуры.ЕдиницаИзмерения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НовыйШК = Справочники.ШтрихКоды.СоздатьЭлемент();
		НовыйШК.Товар = Товар.Ссылка;
		НовыйШК.ШтрихКод = Выборка.ШтрихКод;
		Попытка
			НовыйШК.Записать();
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла; 
	
	Возврат Истина;
КонецФункции

Функция НайтиТоварПоНоменклатуре(Номенклатура, Коэффициент)
	
	Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка ИЗ Справочник.Товары
			|ГДЕ
			|	Владелец = &Каталог И Номенклатура = &Номенклатура И КоэфПересчета = &Коэффициент
			|");
			
	Запрос.УстановитьПараметр("Каталог"		, КаталогТоваров);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Коэффициент"	, Коэффициент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Неопределено;
КонецФункции

Функция НайтиРодителя(ГруппаНоменклатуры)
	
	Если НЕ ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ГруппаТов = Справочники.Товары.НайтиПоРеквизиту("Номенклатура", ГруппаНоменклатуры, , КаталогТоваров);
	
	Если ЗначениеЗаполнено(ГруппаТов) Тогда
		Возврат ГруппаТов;
	КонецЕсли; 
	
	ГруппаТов = Справочники.Товары.СоздатьГруппу();
	ГруппаТов.Владелец		= КаталогТоваров;
	ГруппаТов.Родитель		= НайтиРодителя(ГруппаНоменклатуры.Родитель);
	ГруппаТов.Номенклатура	= ГруппаНоменклатуры;
	ГруппаТов.Наименование	= ГруппаНоменклатуры.Наименование;
	ГруппаТов.ГруппаПечати	= ГруппаНоменклатуры.ГруппаПечати;       
	ГруппаТов.Категория		= ГруппаНоменклатуры.Категория;
	
	ГруппаТов.Записать();
	
	Возврат ГруппаТов.Ссылка;
КонецФункции

Процедура ЗаполнитьНаличиеПоНеделям(СтрокаНоменклатуры, Товар)
	
	Товар.КогдаВПродажеПоНеделям.Очистить();
	
	СтрокиНедели = КогдаВПродажеПоНеделям.НайтиСтроки( Новый Структура("ИдентификаторТовара", СтрокаНоменклатуры.ИдентификаторТовара) );
	Для каждого Неделя Из СтрокиНедели Цикл
		Товар.КогдаВПродажеПоНеделям.Добавить().ДатаПонедельника = Неделя.ДатаПонедельника;
	КонецЦикла; 

КонецПроцедуры
 
Функция ОбновитьСпецификуПоНоменклатуре(СтрокаНоменклатуры, НовСтрБрони = Неопределено)
	
	Номенклатура = СтрокаНоменклатуры.Номенклатура;
	
	Специфика = НайтиСпецификуПоНоменклатуре(Номенклатура, СтрокаНоменклатуры.Коэффициент);
	
	Если ЗначениеЗаполнено(Специфика) Тогда
		Специфика = Специфика.ПолучитьОбъект();
	Иначе
		Специфика = Справочники.Специфики.СоздатьЭлемент();
		Специфика.Номенклатура			= Номенклатура;
		Специфика.КоэфПересчета			= СтрокаНоменклатуры.Коэффициент;
	КонецЕсли;
	
	Специфика.Родитель			= Номенклатура.СпецификаГруппа;
	Специфика.Наименование		= ?(Номенклатура.НаименованиеПолное="", Номенклатура.Наименование, Номенклатура.НаименованиеПолное);
	Специфика.УдельныйВес		= Номенклатура.СпецификаУдельныйВес;
	Специфика.ГруппаПечати		= Номенклатура.ГруппаПечати;
	
	Если УстанавливатьПризнакНаличияВПродаже Тогда
		Специфика.ВариантНаличияВПродаже= ?(СтрокаНоменклатуры.ЕстьВПродаже, Перечисления.ВариантыНаличияВПродаже.Простой, Перечисления.ВариантыНаличияВПродаже.Сложный);
		Специфика.ЕстьВПродаже			= СтрокаНоменклатуры.ЕстьВПродаже;
		Специфика.КогдаВПродаже			= СтрокаНоменклатуры.КогдаВПродаже;
		Специфика.КогдаВПродажеВремя1	= СтрокаНоменклатуры.КогдаВПродажеВремя1;
		Специфика.КогдаВПродажеВремя2	= СтрокаНоменклатуры.КогдаВПродажеВремя2;
	КонецЕсли; 
	
	Специфика.ОбменДанными.Загрузка = Истина;
	Попытка
		Специфика.Записать();
		Если НовСтрБрони <> Неопределено Тогда
			НовСтрБрони.Специфика			= Специфика.Ссылка;
			НовСтрБрони.НомерСтрокиТовара	= СтрокаНоменклатуры.НомерСтрокиТовара;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция НайтиСпецификуПоНоменклатуре(Номенклатура, Коэффициент)
	
	Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка ИЗ Справочник.Специфики
			|ГДЕ
			|	Родитель = &ГруппаСпецифик И Номенклатура = &Номенклатура И КоэфПересчета = &Коэффициент
			|");
			
	Запрос.УстановитьПараметр("ГруппаСпецифик"	, Номенклатура.СпецификаГруппа);
	Запрос.УстановитьПараметр("Номенклатура"	, Номенклатура);
	Запрос.УстановитьПараметр("Коэффициент"		, Коэффициент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Неопределено;
КонецФункции

Функция УстановитьТипЦенМестаРеализации()
	
	МестоРеализации = Склад.ПолучитьОбъект();
	МестоРеализации.ТипЦен = КатегорияЦен;
	Попытка
		МестоРеализации.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции	
	
Процедура ОшибкаПрименения(СтрокаОписания)
	
	ОтменитьТранзакцию();
	
	мОшибкаПрименения	= Истина;
	// Поставить отметку об обработке
	ДокументОбработан	= Истина;
	// Поставить отметку об ошибке
	ОшибкаПрименения	= Истина;
	
	Записать();
	
	ЗарегистрироватьСобытие("ПланМеню: Ошибка применения", УровеньЖурналаРегистрации.Ошибка, , , Строка(ЭтотОбъект) + Символы.ПС + СтрокаОписания);
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ОшибкаПрименения = мОшибкаПрименения;
	
	Если ДокументОбработан ИЛИ ОшибкаПрименения Тогда
		Возврат;
	КонецЕсли; 
	
	// поскольку при проведении идет запись в независимый регистр сведений,
	// надо удалить оттуда запись со старой датой
	ОбработкаСобытийЗапись = РегистрыСведений.ОбработкаСобытий.СоздатьМенеджерЗаписи();
	ОбработкаСобытийЗапись.Период			= Ссылка.Дата;
	ОбработкаСобытийЗапись.РабочееМесто		= Справочники.РабочиеМеста.ПустаяСсылка();
	ОбработкаСобытийЗапись.ИдСобытия		= Строка(Ссылка.УникальныйИдентификатор());
	ОбработкаСобытийЗапись.Прочитать();
	Если ОбработкаСобытийЗапись.Выбран() Тогда
		ОбработкаСобытийЗапись.Удалить();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если ДокументОбработан Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КаталогТоваров) Тогда
		Сообщить("Не указан вид меню!",СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	// проверки нужны для последующего обновления элементов меню
	Для каждого СтрокаДок Из Товары Цикл
		Номенклатура = СтрокаДок.Номенклатура;
		Если НЕ ЗначениеЗаполнено(Номенклатура.Категория) Тогда
			Сообщить("Строка "+СтрокаДок.НомерСтроки+": у номенклатуры """+Номенклатура.Наименование+""" не указана категория!",СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Номенклатура.ГруппаПечати) Тогда
			Сообщить("Строка "+СтрокаДок.НомерСтроки+": у номенклатуры """+Номенклатура.Наименование+""" не указана группа печати!",СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаДок.ЕдиницаИзмерения) Тогда
			Сообщить("Строка "+СтрокаДок.НомерСтроки+": не выбрана единица измерения!",СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		Если СтрокаДок.Коэффициент=0 Тогда
			Сообщить("Строка "+СтрокаДок.НомерСтроки+": не задан коэффициент!",СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ЭтоБронь = ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(ВремяНачала) И ЗначениеЗаполнено(ВремяКонца);
	
	ОбработкаСобытийЗапись = РегистрыСведений.ОбработкаСобытий.СоздатьМенеджерЗаписи();
	// Бронь нужно обработать сразу
	ОбработкаСобытийЗапись.Период			= ?(ЭтоБронь, ТекущаяДата(), Дата);
	ОбработкаСобытийЗапись.РабочееМесто		= Справочники.РабочиеМеста.ПустаяСсылка();
	ОбработкаСобытийЗапись.ТипСобытия		= Перечисления.ТипыСобытий.ПланМеню;
	ОбработкаСобытийЗапись.ИдСобытия		= Строка(Ссылка.УникальныйИдентификатор());
	ОбработкаСобытийЗапись.Записать();
	
КонецПроцедуры


мВалютаРегламентированногоУчета = Константы.ОсновнаяВалюта.Получить();
мОшибкаПрименения = Ложь;
