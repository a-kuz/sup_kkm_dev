Перем мСохрИндекс;
Перем мСуммаКлиента;

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ОбновлениеОтображения" Формы.
//
Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.Предоплата.Доступность = Клиент.Безнал;
	ЭлементыФормы.НадписьЗаголовок.Значение = ?(Интернет, "Онлайн - ", "") + "Бронь № " + Номер + ?(ЗначениеЗаполнено(Автор), ". Автор: " + Автор, "");
	ОбновитьИнфНадпись();
	
	КолвоПозицийЗаказа = ТаблицаЗаказа.Строки.Количество();
	ЭлементыФормы.тПредварительныйЗаказ.Заголовок = ?(КолвоПозицийЗаказа=0, "Без предварительного меню", "Предварительное меню: "+КолвоПозицийЗаказа+" поз., на сумму: "+ФорматСумм(ТаблицаЗаказа.Строки.Итог("Сумма"),глРубли) );
	
КонецПроцедуры //ОбновлениеОтображения()

// Обработчик события "ПриОткрытии" Формы.
//
Процедура ПриОткрытии()
	
	
	ВосстановитьДеревоТоваров();
	УправлениеВидимостью();
	ПолучитьСуммуКлиентаБезнал();
	ИнтерфейсАдмина.ЗаполнитьПодменюВыбораПечатныхФорм(ЭтотОбъект, ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати);
	
КонецПроцедуры //ПриОткрытии()

// Обработчик события "ПередЗаписью" Формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СохранитьДеревоТоваров();
	
КонецПроцедуры //ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Обработчик нажатия на кнопку "Предоплата"
//
Процедура ПредоплатаНажатие(Элемент)
	
	Док = Документы.НачислениеБезнал.СоздатьДокумент();
	Если Клиент.Безнал Тогда
		Док.Клиент		= Клиент;
	КонецЕсли;
	Док.ДокОснование	= ЭтотОбъект.Ссылка;
	Док.Сумма			= ТаблицаЗаказа.Строки.Итог("Сумма");
	Форма = Док.ПолучитьФорму();
	Форма.Открыть();
	
КонецПроцедуры //ПредоплатаНажатие()

// Обработчик события НачалоВыбора поля ввода КлиентСтр.
//
Процедура КлиентСтрНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Клиенты.ПолучитьФормуВыбора();
	Если ЗначениеЗаполнено(Клиент) Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = Клиент;
	КонецЕсли;
	ВозвращаемоеЗначение = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВозвращаемоеЗначение) И НЕ ВозвращаемоеЗначение.ЭтоГруппа Тогда
		Клиент = ВозвращаемоеЗначение;
		КлиентСтр = Клиент.Наименование;
	КонецЕсли;
	ПолучитьСуммуКлиентаБезнал();
		
КонецПроцедуры //КлиентСтрНачалоВыбора()

// Обработчик события Очистка поля ввода КлиентСтр.
//
Процедура КлиентСтрОчистка(Элемент, СтандартнаяОбработка)
	
	Клиент = Справочники.Клиенты.ПустаяСсылка();
	ПолучитьСуммуКлиентаБезнал();
	
КонецПроцедуры //КлиентСтрОчистка()

// Обработчик события ПриИзменении поля ввода КлиентСтр.
//
Процедура КлиентСтрПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(КлиентСтр) Тогда
		Возврат;
	КонецЕсли;	
	
	НайденноеЗначение = Справочники.Клиенты.НайтиПоНаименованию(КлиентСтр);
	Если НЕ НайденноеЗначение.ЭтоГруппа Тогда
		Клиент = НайденноеЗначение;
	Иначе
		Клиент = Справочники.Клиенты.ПустаяСсылка();
	КонецЕсли;
	Если ЗначениеЗаполнено(Клиент) Тогда
		КлиентСтр = Клиент.Наименование;
	КонецЕсли;
	ПолучитьСуммуКлиентаБезнал();
	
КонецПроцедуры //КлиентСтрПриИзменении()

// Обработчик события Открытие поля ввода КлиентСтр.
//
Процедура КлиентСтрОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Клиент) Тогда
		Клиент.ПолучитьФорму().Открыть();
	КонецЕсли;
КонецПроцедуры //КлиентСтрОткрытие()

// Обработчик события ОкончаниеВводаТекста поля ввода КлиентСтр.
//
Процедура КлиентСтрОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
    Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Список 		   = Новый СписокЗначений;
	
	ЧислоБукв 	   = СтрДлина(Текст);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Клиенты.Ссылка
	|ИЗ
	|	Справочник.Клиенты КАК Клиенты
	|ГДЕ
	|	Клиенты.ПометкаУдаления = ЛОЖЬ
	|	И ПОДСТРОКА(Клиенты.Наименование, 1, &ЧислоБукв) = &ВведенныйТекст";
				
	Запрос.УстановитьПараметр("ЧислоБукв"	  , ЧислоБукв);
	Запрос.УстановитьПараметр("ВведенныйТекст", Текст);
	СписокКлиентов = Запрос.Выполнить().Выбрать();
	
	Пока СписокКлиентов.Следующий() Цикл
		Список.Добавить(СписокКлиентов.Ссылка);		
	КонецЦикла;
	
	Если Список.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Значение = Список;
	КонецЕсли;
	
КонецПроцедуры //КлиентСтрОкончаниеВводаТекста()

// Обработчик события НачалоВыбораИзСписка поля ввода ВремяНачала.
//
Процедура ВремяНачалаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьВремя(Элемент.Значение, Элемент);
	Если ВремяНачала > ВремяКонца Тогда
		ВремяКонца = ВремяНачала;
	КонецЕсли;
	
КонецПроцедуры //ВремяНачалаНачалоВыбораИзСписка()

// Обработчик события НачалоВыбораИзСписка поля ввода ВремяКонца.
//
Процедура ВремяКонцаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьВремя(Элемент.Значение, Элемент);
	
КонецПроцедуры //ВремяКонцаНачалоВыбораИзСписка()

// Обработчик события НачалоВыбораИзСписка поля ввода ВремяЗапрета.
//
Процедура ВремяЗапретаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьВремя(Элемент.Значение, Элемент);
	
КонецПроцедуры //ВремяЗапретаНачалоВыбораИзСписка()

///////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура инициирует диалог выбора времени.
//
// Параметры
//  ДатаВремен - дата для выбора времени
//  ТекЭлемент - элемент формы
//  ПолныйГод - булево, показывать год четырьмя цифрами или двумя
//
// Возвращаемое значение:
//  НЕТ
//
Процедура ВыбратьВремя(ДатаВремен, ТекЭлемент, ПолныйГод = Ложь)

	НачалоРабочегоДняКонстанта 		= Дата(1,1,1);
	ОкончаниеРабочегоДняКонстанта 	= Дата(1,1,1,23,30,00);
	
	Если ДатаВремен = Дата(1,1,1) Тогда
		ДатаВремен = НачалоДня(Дата);
	КонецЕсли;
	
	СписокВремен = Новый СписокЗначений;
	НачалоРабочегоДня = НачалоДня(ДатаВремен)+Час(НачалоРабочегоДняКонстанта)*60*60+?(Минута(НачалоРабочегоДняКонстанта) >= 30, 30, 0)*60;
	Если Минута(ОкончаниеРабочегоДняКонстанта) = 0 Тогда
		МинутРабочегоОкончанияДня = 0;
	ИначеЕсли Минута(ОкончаниеРабочегоДняКонстанта) > 30 Тогда
		МинутРабочегоОкончанияДня = 60;
	Иначе
		МинутРабочегоОкончанияДня = 30;
	КонецЕсли; 
	ОкончаниеРабочегоДня = НачалоДня(ДатаВремен)+Час(ОкончаниеРабочегоДняКонстанта)*60*60+МинутРабочегоОкончанияДня*60;

	а = 0;
	Пока 1=1 Цикл
		ВремяСписка = НачалоРабочегоДня + а*30*60;
		Если ВремяСписка > ОкончаниеРабочегоДня Тогда
			Прервать;
		КонецЕсли;
		Если ПолныйГод Тогда
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гггг ЧЧ:мм'"));
		Иначе
			СписокВремен.Добавить(ВремяСписка, Формат(ВремяСписка,"ДФ='дд.ММ.гг ЧЧ:мм'"));
		КонецЕсли; 
		а = а + 1;
	КонецЦикла; 

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(ДатаВремен);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент);
	Иначе
		ВыбранноеВремя = ЭтаФорма.ВыбратьИзСписка(СписокВремен, ТекЭлемент, НачальноеЗначение);
	КонецЕсли; 

	Если ВыбранноеВремя <> Неопределено Тогда
		ДатаВремен = ВыбранноеВремя.Значение;
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьВремя()

// Процедура сохраняет дерево значений ТаблицаЗаказов в ТЧ "Товары"
//
Процедура СохранитьДеревоТоваров()
	
	Товары.Очистить();
	Специфики.Очистить();
	Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
		НоваяСтрока 			= Товары.Добавить();
		НоваяСтрока.Товар		= СтрокаТовара.Товар;
		НоваяСтрока.Количество	= СтрокаТовара.Количество;
		НоваяСтрока.Цена		= СтрокаТовара.Цена;
		НоваяСтрока.Сумма		= СтрокаТовара.Сумма;
		НоваяСтрока.Комментарий	= СтрокаТовара.Комментарий;
						
		Для каждого СтрокаСпецифики Из СтрокаТовара.Строки Цикл
			СтрокаДокСпец 					= Специфики.Добавить();
			СтрокаДокСпец.НомерСтрокиТовара	= НоваяСтрока.НомерСтроки;
			СтрокаДокСпец.Специфика			= СтрокаСпецифики.Товар;
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры //СохранитьДеревоТоваров()

// Процедура восстанавливает ТЧ "Товары" в дерево значений ТаблицаЗаказов
//
Процедура ВосстановитьДеревоТоваров()
	
	Для каждого СтрокаТЧ ИЗ Товары Цикл
		СтрокаТовара 			= ТаблицаЗаказа.Строки.Добавить();
		СтрокаТовара.Товар		= СтрокаТЧ.Товар;
		СтрокаТовара.Количество	= СтрокаТЧ.Количество;
		СтрокаТовара.Цена		= СтрокаТЧ.Цена;
		СтрокаТовара.Сумма		= СтрокаТЧ.Сумма;
		СтрокаТовара.Комментарий= СтрокаТЧ.Комментарий;
		СтрокаТовара.Статус     = Перечисления.СтатусыПозицийЗаказа.Дозаказ;
	КонецЦикла;
			
	// специфики в отдельной ТЧ, привязка по номеру строки товара
	Для каждого СтрокаТЧ Из Специфики Цикл
		СтрокаТовара 		= ТаблицаЗаказа.Строки[СтрокаТЧ.НомерСтрокиТовара-1];
		СтрокаСпецифик 		= СтрокаТовара.Строки.Добавить();
		СтрокаСпецифик.Товар= СтрокаТЧ.Специфика;
	КонецЦикла;
		
КонецПроцедуры //ВосстановитьДеревоТоваров()

// Управляет видимостью формы.
//
Процедура УправлениеВидимостью()	
КонецПроцедуры //УправлениеВидимостью()

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
// Подключение данной процедуры-обработчика выполняется из кода конфигурации
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка) 
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		СписокМакетов = ПолучитьСписокПечатныхФорм();
		СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаМакетаВСписке <> Неопределено Тогда
			Печать(СтрокаМакетаВСписке.Значение);		
		Иначе
			СсылкаНаПечатнуюФорму = Справочники.ВнешниеОбработки.НайтиПоКоду(СтрЗаменить(Кнопка.Имя, "ВнешняяПечатнаяФорма_", ""));
			
			Если СсылкаНаПечатнуюФорму <> Неопределено Тогда
				Печать(СсылкаНаПечатнуюФорму);
			КонецЕсли;

		КонецЕсли;		
		          
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДействиеВыбратьПечатнуюФормы()

// Процедура доступную сумму по клиенту.
//
Процедура ПолучитьСуммуКлиентаБезнал()
	
	мСуммаКлиента = Клиент.ГлубинаКредита + НакопленияКлиента(Клиент).СуммаБезнал;
	
КонецПроцедуры

// Процедура обновляет ИнфНадпись.
//
Процедура ОбновитьИнфНадпись()
	
	Если ЗначениеЗаполнено(Клиент) Тогда
		Если Клиент.Безнал Тогда
			ЭлементыФормы.ИнфНадпись.Заголовок = "Доступная сумма: " + ФорматСумм(мСуммаКлиента, глРубли);
		Иначе
			ЭлементыФормы.ИнфНадпись.Заголовок = "Безналичные расчеты с клиентом не ведутся";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(КлиентСтр) Тогда
		ЭлементыФормы.ИнфНадпись.Заголовок = "Клиент не зарегистрирован";
	Иначе
		ЭлементыФормы.ИнфНадпись.Заголовок = "";
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТОВАРЫ"

// Процедура - обработчик нажатия на кнопку "Специфика" командной панели
// 
Процедура ДобавитьСпецифику(Кнопка)
	
	Если НЕ ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = Неопределено И ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока.Родитель = Неопределено Тогда
		Защита.ВыборСпецифики(ЭтаФорма, Ложь, ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры //ДобавитьСпецифику()

// Процедура - обработчик нажатия на кнопку "Специфика" командной панели
// 
Процедура ДобавитьСпецификуОбщая(Кнопка)
	
	Если НЕ ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = Неопределено И ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока.Родитель = Неопределено Тогда
		Защита.ВыборСпецифики(ЭтаФорма, Истина, ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры //ДобавитьСпецифику()


// Процедура вызывается при нажатии кнопки "Подбор" командной панели 
//
Процедура КоманднаяПанельТоварыПодбор(Кнопка)
	
	Форма 							= Справочники.Товары.ПолучитьФормуВыбора(,ЭлементыФормы.ТаблицаЗаказа);
	Форма.ЗакрыватьПриВыборе 		= Ложь;
	Форма.ФормаОткрытаДляВыбора 	= Истина;
	Форма.Открыть();
	
КонецПроцедуры //КоманднаяПанельТоварыПодбор()

// Процедура - обработчик события ПриВыводеСтроки
//
Процедура ТаблицаЗаказаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ДанныеСтроки = Неопределено И ДанныеСтроки.Родитель = Неопределено Тогда
		ОформлениеСтроки.Ячейки.НомерСтроки.Текст = ТаблицаЗаказа.Строки.Индекс(ДанныеСтроки)+1;
	Иначе
		ОформлениеСтроки.Ячейки.Товар.ТолькоПросмотр 		= Истина;
		ОформлениеСтроки.Ячейки.Количество.ТолькоПросмотр 	= Истина;
		ОформлениеСтроки.Ячейки.Сумма.ТолькоПросмотр 		= Истина;
		ОформлениеСтроки.Ячейки.Цена.ТолькоПросмотр 		= Истина;
		ОформлениеСтроки.Ячейки.Комментарий.ТолькоПросмотр 	= Истина;
	КонецЕсли;
	
КонецПроцедуры //ТаблицаЗаказаПриВыводеСтроки()

// Процедура - обработчик события ОбработкаВыбора
//
Процедура ТаблицаЗаказаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если (ВыбранноеЗначение.ЭтоГруппа) ИЛИ (НЕ ЗначениеЗаполнено(ВыбранноеЗначение)) Тогда
		Возврат;
	КонецЕсли;
	
	Количество = 1;
	Если ВыбранноеЗначение.ЗапросКоличества ИЛИ ВыбранноеЗначение.ОтдельнойСтрокой Тогда
		ВвестиЧисло(Количество, "Количество", 10, ?(ВыбранноеЗначение.КратностьКоличества = Цел(ВыбранноеЗначение.КратностьКоличества), 0, 3));
		СтрокаБрони 			= ТаблицаЗаказа.Строки.Добавить();
	Иначе
		НайденныеСтроки	= ТаблицаЗаказа.Строки.НайтиСтроки(Новый Структура("Товар",ВыбранноеЗначение));
		Если НайденныеСтроки.Количество() = 0 ИЛИ ТаблицаЗаказа.Строки.Индекс(НайденныеСтроки[НайденныеСтроки.Количество()-1]) < ТаблицаЗаказа.Строки.Количество() - 1 Тогда
			СтрокаБрони 		= ТаблицаЗаказа.Строки.Добавить();
		Иначе
			СтрокаБрони			= НайденныеСтроки[НайденныеСтроки.Количество()-1];
			Количество			= СтрокаБрони.Количество + 1;
		КонецЕсли;	
	КонецЕсли;	
	
	СтрокаБрони.Товар		= ВыбранноеЗначение;
	СтрокаБрони.Статус		= Перечисления.СтатусыПозицийЗаказа.Дозаказ;
	СтрокаБрони.Количество	= Количество;
	тчТоварПриИзменении(СтрокаБрони);
	Модифицированность	= Истина;
			
КонецПроцедуры //ТаблицаЗаказаОбработкаВыбора()

// Процедура - обработчик события ПриНачалеРедактирования
//
Процедура ТаблицаЗаказаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Товар = Справочники.Товары.ПустаяСсылка();
		Элемент.ТекущиеДанные.Статус = Перечисления.СтатусыПозицийЗаказа.Дозаказ;
	КонецЕсли;
	
КонецПроцедуры //ТаблицаЗаказаПриНачалеРедактирования()

// Процедура - обработчик события ПередНачаломДобавления
//
Процедура ТаблицаЗаказаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Если Не Родитель = Неопределено Тогда
		Отказ = Истина;
    	
		НоваяСтрока = ТаблицаЗаказа.Строки.Добавить();
		НоваяСтрока.Товар = Справочники.Товары.ПустаяСсылка();
		НоваяСтрока.Статус = Перечисления.СтатусыПозицийЗаказа.Дозаказ;
		ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = НоваяСтрока;
		ЭлементыФормы.ТаблицаЗаказа.ТекущаяКолонка 	= ЭлементыФормы.ТаблицаЗаказа.Колонки.Товар; 
		ЭлементыФормы.ТаблицаЗаказа.ИзменитьСтроку();
	КонецЕсли;
		
КонецПроцедуры //ТаблицаЗаказаПередНачаломДобавления()

// Процедура - обработчик события ПередУдалением
//
Процедура ТаблицаЗаказаПередУдалением(Элемент, Отказ)
	
	ТекДанные = ЭлементыФормы.ТаблицаЗаказа.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Если НЕ ТекДанные.Родитель = Неопределено Тогда
			мСохрИндекс = ТаблицаЗаказа.Строки.Индекс(ТекДанные.Родитель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ТаблицаЗаказаПередУдалением()

// Процедура - обработчик события ПослеУдаления
//
Процедура ТаблицаЗаказаПослеУдаления(Элемент)
	
	Если НЕ мСохрИндекс = Неопределено Тогда
		ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = ТаблицаЗаказа.Строки[мСохрИндекс];
		Если НЕ Защита.ПроверитьДобавитьСпецифику(Неопределено, ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока, Неопределено) Тогда
			ТаблицаЗаказа.Строки.Удалить(мСохрИндекс);
		КонецЕсли;
		мСохрИндекс = Неопределено;
	КонецЕсли;
	
КонецПроцедуры //ТаблицаЗаказаПослеУдаления()

// Обработчик события "ПриИзменении" поля ввода Товар.
//
Процедура ТаблицаЗаказаТоварПриИзменении(Элемент)
	
	тчТоварПриИзменении(ЭлементыФормы.ТаблицаЗаказа.ТекущиеДанные);
	
КонецПроцедуры //ТаблицаЗаказаТоварПриИзменении()

// Обработчик события "Очистка" поля ввода Товар.
//
Процедура ТаблицаЗаказаТоварОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.Значение = Справочники.Товары.ПустаяСсылка();
	
КонецПроцедуры //ТаблицаЗаказаТоварОчистка()

// Обработчик события "НачалоВыбора" поля ввода Товар.
//
Процедура ТаблицаЗаказаТоварНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.ВыборПоВладельцу = Элемент.Значение.Владелец;
	КонецЕсли;
КонецПроцедуры //ТаблицаЗаказаТоварНачалоВыбора()

// Обработчик события "ПриИзменении" поля ввода Цена.
//
Процедура ТаблицаЗаказаЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;

КонецПроцедуры //ТаблицаЗаказаЦенаПриИзменении()

// Обработчик события "ПриИзменении" поля ввода Количество.
//
Процедура ТаблицаЗаказаКоличествоПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на кратность количества
	Если ТекущаяСтрока.Количество/ТекущаяСтрока.Товар.КратностьКоличества <> Цел(ТекущаяСтрока.Количество/ТекущаяСтрока.Товар.КратностьКоличества) Тогда
		Предупреждение("Количество должно быть кратно " + ТекущаяСтрока.Товар.КратностьКоличества,15,"Количество не соответствует кратности");
		// Ближайшее кратное количесткво
		КратноеКоличество = Окр(ТекущаяСтрока.Количество/ТекущаяСтрока.Товар.КратностьКоличества)*ТекущаяСтрока.Товар.КратностьКоличества;
		// Подставим ближайшее кратное с проверкой на "0"
		ТекущаяСтрока.Количество = ?(КратноеКоличество = 0, ТекущаяСтрока.Товар.КратностьКоличества, КратноеКоличество);
	КонецЕсли;	
	
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока.Количество;
	
КонецПроцедуры //ТаблицаЗаказаКоличествоПриИзменении()

// Процедура выполняет действия при изменении товара
//
Процедура тчТоварПриИзменении(СтрокаТЧ)
	
	Если ТипЗнч(СтрокаТЧ.Товар) <> Тип("СправочникСсылка.Товары") Тогда
		Возврат;
	ИначеЕсли СтрокаТЧ.Товар = Справочники.Товары.ПустаяСсылка() Тогда
		СтрокаТЧ.Строки.Очистить();		
	КонецЕсли;	
		
	ВыбТовар = СтрокаТЧ.Товар;
	Если НЕ Защита.ПроверитьДобавитьСпецифику(Неопределено, СтрокаТЧ, Неопределено) Тогда
		ТаблицаЗаказа.Строки.Удалить(СтрокаТЧ);
		Возврат;
	КонецЕсли;
	Если ВыбТовар <> СтрокаТЧ.Товар Тогда
		ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = СтрокаТЧ.Родитель;
		ЭлементыФормы.ТаблицаЗаказа.Развернуть(СтрокаТЧ);
	КонецЕсли;
		
	Если СтрокаТЧ.Количество = 0 Тогда
		СтрокаТЧ.Количество = 1;
	КонецЕсли;
	СтруктураЦены = ЦенаТовара(СтрокаТЧ.Товар,,ВремяНачала);
	СтрокаТЧ.Цена = ПересчетВалют(СтруктураЦены.Цена, СтруктураЦены.Валюта);
	СтрокаТЧ.Сумма = СтрокаТЧ.Количество*СтрокаТЧ.Цена;
	
КонецПроцедуры //тчТоварПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ПОСАДОЧНЫЕ МЕСТА"

// Процедура - обработчик события ПриВыводеСтроки
//
Процедура ПосадочныеМестаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ПосадочноеМесто) Тогда
		ОформлениеСтроки.Ячейки.ПосадочноеМесто.Текст = ДанныеСтроки.ПосадочноеМесто.Наименование;// + " № " + ДанныеСтроки.ПосадочноеМесто.Код;
	КонецЕсли;
	
КонецПроцедуры //ПосадочныеМестаПриВыводеСтроки()
 
Процедура ПосадочныеМестаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Элемент.ТекущиеДанные.КоличествоПосетителей = ?(Элемент.ТекущиеДанные.КоличествоПосетителей=0,1,Элемент.ТекущиеДанные.КоличествоПосетителей);
КонецПроцедуры






