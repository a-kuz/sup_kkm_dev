
Перем БроньПроверена Экспорт;  // Истина, если бронь была проверена перед проведением

// Процедура - обработчик события "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ЗабронироватьПосадочныеМеста(Отказ);
	
КонецПроцедуры

// Процедура - проверяет заполнение документа
//
Процедура ПроверитьЗаполнениеРеквизитов(Отказ)
	
	СтруктураОбязательныхПолей = Новый Структура("ВремяНачала, ВремяКонца, КлиентСтр");
	МД = Метаданные();
	МетаданныеРеквизиты = МД.Реквизиты;
	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		
		Значение = ЭтотОбъект[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда 
			
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			СообщитьОбОшибке(СтрокаСообщения, Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ВремяЗапрета > ВремяНачала Тогда
		Сообщить("Время запрета не может быть больше времени начала!");
		Отказ = Истина;
	КонецЕсли;
	
	Если ВремяНачала > ВремяКонца Тогда
		Сообщить("Время окончания не может быть меньше времени начала!");
		Отказ = Истина;
	КонецЕсли;
	
	Если ВремяНачала = ВремяКонца Тогда
		Сообщить("Время окончания не может совпадать со временем начала!");
		Отказ = Истина;
	КонецЕсли;
	
		
	Если ПосадочныеМеста.Количество() = 0 Тогда
		Сообщить("Укажите посадочное место!");
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	ИмяТабличнойЧасти = "ПосадочныеМеста";
	ПредставлениеТабличнойЧасти = МД.ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	ТабличнаяЧасть = ЭтотОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = МД.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	СтруктураОбязательныхПолей = Новый Структура("ПосадочноеМесто");
	
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если Не ЗначениеЗаполнено(Значение) Тогда
				
				Если Не ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - проводит документ по регистру Бронирование
//
Процедура ЗабронироватьПосадочныеМеста(Отказ)
	
	Если Закрыто Тогда
		Возврат;
	КонецЕсли;
	
		
КонецПроцедуры

// Процедура - обработчики события "ПередЗаписью"
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ Интернет И НЕ ЗначениеЗаполнено(ДокОснование) Тогда
		ПроверитьЗаполнениеРеквизитов(Отказ);
	КонецЕсли; 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Дата = ВремяНачала;
	
КонецПроцедуры

#Если Клиент Тогда
	
	// Процедура осуществляет печать документа. Можно направить печать на 
	// экран или принтер, а также распечатать необходимое количество копий.
	//
	//  Название макета печати передается в качестве параметра,
	// по переданному названию находим имя макета в соответствии.
	//
	// Параметры:
	//  ИмяМакета             - строка, название макета.
	//  КоличествоЭкземпляров - количество экземпляров печатных форм.
	//  НаПринтер             - выводить печатную форму на принтер.
	//  ИмяПринтера           - имя принтера, на котором производится печать.
	//
	Процедура Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ИмяПринтера = Неопределено) Экспорт
		
		// Получить экземпляр документа на печать
		Если ИмяМакета = "Бронь" тогда
			ТабДокумент = ПечатьБронь();
		ИначеЕсли ИмяМакета = "ЗаказСчет" тогда
			ТабДокумент = ПечатьЗаказСчет();	
			
		ИначеЕсли ТипЗнч(ИмяМакета) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
			Попытка
				Обработка = ПолучитьОбработкуИзСправочникаВнешнихОбработок(ИмяМакета);
				ТабДокумент = Обработка.Печать(ЭтотОбъект);
			Исключение
				Сообщить("Ошибка открытия печатной формы!");
				Возврат;
			КонецПопытки;
		КонецЕсли;
		
		ТабДокумент.Показать();
		
	КонецПроцедуры //Печать()
	
	// Возвращает доступные варианты печати документа.
	//
	// Параметры:
	//  Нет.
	//
	// Возвращаемое значение:
	//  Структура, каждая строка которой соответствует одному из вариантов печати.
	//  
	Функция ПолучитьСписокПечатныхФорм() Экспорт
		
		СписокМакетов = Новый СписокЗначений;
		СписокМакетов.Добавить("Бронь",	"Бронь");
		СписокМакетов.Добавить("ЗаказСчет",	"Заказ-Счет");
		
		ЗаполнитьСписокОбработок(СписокМакетов, Перечисления.ВидыОбработок.ПечатнаяФорма, ЭтотОбъект.Метаданные().ПолноеИмя(), Истина, Ложь);
		Возврат СписокМакетов;
		
	КонецФункции
	
	// Функция формирует табличный документ с печатной формой брони
	// 
	Функция ПечатьБронь()
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Бронь.Фирма КАК НазваниеОрганизации,
		|	Бронь.ВремяНачала,
		|	Бронь.ВремяКонца,
		|	Бронь.КлиентСтр КАК Клиент,
		|	Бронь.Комментарий,
		|	Бронь.Номер КАК НомерДокумента,
		|	Бронь.Дата КАК ДатаДокумента
		|ИЗ
		|	Документ.Бронь КАК Бронь
		|ГДЕ
		|	Бронь.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БроньПосадочныеМеста.ПосадочноеМесто,
		|	БроньПосадочныеМеста.ПосадочноеМесто.Код,
		|	БроньПосадочныеМеста.КоличествоПосетителей
		|ИЗ
		|	Документ.Бронь.ПосадочныеМеста КАК БроньПосадочныеМеста
		|ГДЕ
		|	БроньПосадочныеМеста.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Товар КАК Товар,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Комментарий,
		|	Специфики.Специфика,
		|	Товары.Товар.Наименование КАК ТоварНаименование
		|ИЗ
		|	(ВЫБРАТЬ
		|		БроньТовары.Товар КАК Товар,
		|		БроньТовары.Количество КАК Количество,
		|		БроньТовары.Цена КАК Цена,
		|		БроньТовары.Сумма КАК Сумма,
		|		БроньТовары.НомерСтроки КАК НомерСтроки,
		|		БроньТовары.Комментарий КАК Комментарий
		|	ИЗ
		|		Документ.Бронь.Товары КАК БроньТовары
		|	ГДЕ
		|		БроньТовары.Ссылка = &Ссылка) КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			БроньСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
		|			БроньСпецифики.Специфика КАК Специфика
		|		ИЗ
		|			Документ.Бронь.Специфики КАК БроньСпецифики
		|		ГДЕ
		|			БроньСпецифики.Ссылка = &Ссылка) КАК Специфики
		|		ПО Товары.НомерСтроки = Специфики.НомерСтрокиТовара
		|ИТОГИ
		|	МАКСИМУМ(Товар),
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(ТоварНаименование)
		|ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезультатыЗапроса 		= Запрос.ВыполнитьПакет();
		ВыборкаШапка  			= РезультатыЗапроса[0].Выбрать();
		ВыборкаПосадочныеМеста 	= РезультатыЗапроса[1].Выбрать();
		ВыборкаТовары 			= РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Таб = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("Бронь");
		
		// Шапка
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
		КомментарийКДокументу = "";
		КлиентДокумента = "";
		Заголовок = "";
		Если ВыборкаШапка.Следующий() Тогда
			ОбластьШапки.Параметры.Заполнить(ВыборкаШапка);
			КомментарийКДокументу 	= ВыборкаШапка.Комментарий;
			КлиентДокумента 		= ВыборкаШапка.Клиент;
			Заголовок				= "Бронь № " + ВыборкаШапка.НомерДокумента;
		КонецЕсли;
		
		Таб.Вывести(ОбластьШапки);
		
		// Посадочные места
		ОбластьЗаголовокПосадочныеМеста = Макет.ПолучитьОбласть("ЗаголовокПосадочныеМеста");			
		Таб.Вывести(ОбластьЗаголовокПосадочныеМеста);
		
		ИтогоКоличествоПосетителей = 0;
		ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаПосадочныеМеста");
		Пока ВыборкаПосадочныеМеста.Следующий() Цикл
			ОбластьСтроки.Параметры.Заполнить(ВыборкаПосадочныеМеста);
			ИтогоКоличествоПосетителей = ИтогоКоличествоПосетителей + ВыборкаПосадочныеМеста.КоличествоПосетителей;
			Таб.Вывести(ОбластьСтроки);
		КонецЦикла;
		
		Если ВыборкаПосадочныеМеста.Количество() > 1 Тогда
			ОбластьИтог = Макет.ПолучитьОбласть("ИтогиПосадочныеМеста");
			ОбластьИтог.Параметры.КоличествоПосетителей = ИтогоКоличествоПосетителей;
			Таб.Вывести(ОбластьИтог);
		КонецЕсли;
		
		// Товары
		Если ВыборкаТовары.Количество() > 0 Тогда
			СуммаИтого = 0;
			ОбластьЗаголовка = Макет.ПолучитьОбласть("ЗаголовокТовары");
			Таб.Вывести(ОбластьЗаголовка);
			
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаТовары");
			Пока ВыборкаТовары.Следующий() Цикл
				ОбластьСтроки.Параметры.Заполнить(ВыборкаТовары);
				СуммаИтого = СуммаИтого + ВыборкаТовары.Сумма;
				ВыборкаСпецифик = ВыборкаТовары.Выбрать();
				ОписаниеТовара = ВыборкаТовары.ТоварНаименование;
				Пока ВыборкаСпецифик.Следующий() Цикл
					Коммент = ВыборкаСпецифик.Комментарий;
					Если Не ЗначениеЗаполнено(ВыборкаСпецифик.Специфика) Тогда
						Продолжить;
					КонецЕсли;
					ОписаниеТовара = ОписаниеТовара + Символы.ПС + "- " + ВыборкаСпецифик.Специфика;
				КонецЦикла;
				ОбластьСтроки.Параметры.ОписаниеТовара 	= ОписаниеТовара;
				ОбластьСтроки.Параметры.Комментарий 	= Коммент;
				Таб.Вывести(ОбластьСтроки);
			КонецЦикла;
			
			ОбластьИтоги = Макет.ПолучитьОбласть("ИтогиТовары");
			ОбластьИтоги.Параметры.СуммаИтого = СуммаИтого;
			Таб.Вывести(ОбластьИтоги);		
		КонецЕсли;
		
		// Комментарий
		Если ЗначениеЗаполнено(КомментарийКДокументу) Тогда
			ОбластьКомментарий = Макет.ПолучитьОбласть("Комментарий");
			ОбластьКомментарий.Параметры.Комментарий = КомментарийКДокументу;
			Таб.Вывести(ОбластьКомментарий);
		КонецЕсли;
		
		// Подвал
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Клиент = КлиентДокумента;
		Таб.Вывести(ОбластьПодвал);
		
		
		
		Таб.ОтображатьГруппировки = Ложь;
		Таб.ОтображатьЗаголовки = Ложь;
		Таб.ОтображатьСетку = Ложь;
		Таб.ТолькоПросмотр = Истина;
		Таб.Показать(Заголовок);
		
		Возврат Таб;
		
	КонецФункции //ПечатьЗаказа()
	
	// Функция формирует табличный документ с печатной формой заказа-счета
	// 
	Функция ПечатьЗаказСчет()
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Бронь.Фирма КАК НазваниеОрганизации,
		|	Бронь.ВремяНачала,
		|	Бронь.ВремяКонца,
		|	Бронь.КлиентСтр КАК Клиент,
		|	Бронь.Комментарий,
		|	Бронь.Номер КАК НомерДокумента,
		|	Бронь.Дата КАК ДатаДокумента
		|ИЗ
		|	Документ.Бронь КАК Бронь
		|ГДЕ
		|	Бронь.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Товар КАК Товар,
		|	Товары.Количество КАК Количество,
		|	Товары.Цена КАК Цена,
		|	Товары.Сумма КАК Сумма,
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	Товары.Комментарий,
		|	Специфики.Специфика,
		|	Товары.Товар.Наименование КАК ТоварНаименование,
		|	Товары.Товар.ГруппаПечати КАК ГруппаПечати
		|ИЗ
		|	(ВЫБРАТЬ
		|		БроньТовары.Товар КАК Товар,
		|		БроньТовары.Количество КАК Количество,
		|		БроньТовары.Цена КАК Цена,
		|		БроньТовары.Сумма КАК Сумма,
		|		БроньТовары.НомерСтроки КАК НомерСтроки,
		|		БроньТовары.Комментарий КАК Комментарий
		|	ИЗ
		|		Документ.Бронь.Товары КАК БроньТовары
		|	ГДЕ
		|		БроньТовары.Ссылка = &Ссылка) КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			БроньСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
		|			БроньСпецифики.Специфика КАК Специфика
		|		ИЗ
		|			Документ.Бронь.Специфики КАК БроньСпецифики
		|		ГДЕ
		|			БроньСпецифики.Ссылка = &Ссылка) КАК Специфики
		|		ПО Товары.НомерСтроки = Специфики.НомерСтрокиТовара
		|ИТОГИ
		|	МАКСИМУМ(Товар),
		|	МАКСИМУМ(Количество),
		|	МАКСИМУМ(Цена),
		|	МАКСИМУМ(Сумма),
		|	МАКСИМУМ(ТоварНаименование)
		|ПО
		|	ГруппаПечати,
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезультатыЗапроса 		= Запрос.ВыполнитьПакет();
		ВыборкаШапка  			= РезультатыЗапроса[0].Выбрать();
		ВыборкаГруппыПечати		= РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Таб = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("ЗаказСчет");
		
		// Шапка
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка");
		КомментарийКДокументу = "";
		КлиентДокумента = "";
		Заголовок = "";
		Если ВыборкаШапка.Следующий() Тогда
			ОбластьШапки.Параметры.Заполнить(ВыборкаШапка);
			ОбластьШапки.Параметры.МестоРеализации = ПосадочныеМеста[0].ПосадочноеМесто.МестоРеализации;
			ВремяОбслуживания = Формат(ВыборкаШапка.ВремяНачала,"ДЛФ=дд") + " с " + Формат(ВыборкаШапка.ВремяНачала,"ДФ='ЧЧ:мм'") 
			+ " до " + Формат(ВыборкаШапка.ВремяКонца,"ДФ='ЧЧ:мм'");
			ОбластьШапки.Параметры.ВремяОбслуживания = ВремяОбслуживания;
			Заголовок		  = "Заказ-счет № " + ВыборкаШапка.НомерДокумента;
		КонецЕсли;
		
		Таб.Вывести(ОбластьШапки);
		
		// Товары
		
		СуммаИтогПоДокументу = 0;
		КолВоИтогПоДокументу = 0;
		Пока ВыборкаГруппыПечати.Следующий() Цикл
			СуммаИтого = 0;
			КолВоИтого = 0;
			ОбластьЗаголовка = Макет.ПолучитьОбласть("ЗаголовокТовары");
			ОбластьЗаголовка.Параметры.Заполнить(ВыборкаГруппыПечати);
			Таб.Вывести(ОбластьЗаголовка);
			
			ВыборкаТовары = ВыборкаГруппыПечати.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаТовары");
			Пока ВыборкаТовары.Следующий() Цикл
				ОбластьСтроки.Параметры.Заполнить(ВыборкаТовары);
				СуммаИтого = СуммаИтого + ВыборкаТовары.Сумма;
				КолВоИтого = КолВоИтого + ВыборкаТовары.Количество;
				ВыборкаСпецифик = ВыборкаТовары.Выбрать();
				ОписаниеТовара = ВыборкаТовары.ТоварНаименование;
				Пока ВыборкаСпецифик.Следующий() Цикл
					Если Не ЗначениеЗаполнено(ВыборкаСпецифик.Специфика) Тогда
						Продолжить;
					КонецЕсли;
					ОписаниеТовара = ОписаниеТовара + Символы.ПС + "- " + ВыборкаСпецифик.Специфика;
				КонецЦикла;
				ОбластьСтроки.Параметры.ОписаниеТовара 	= ОписаниеТовара;
				Таб.Вывести(ОбластьСтроки);
			КонецЦикла;
			
			ОбластьИтоги = Макет.ПолучитьОбласть("ИтогиГруппаПечати");
			ОбластьИтоги.Параметры.Сумма 		= СуммаИтого;
			ОбластьИтоги.Параметры.Количество 	= КолВоИтого;
			СуммаИтогПоДокументу = СуммаИтогПоДокументу + СуммаИтого;
			КолВоИтогПоДокументу = КолВоИтогПоДокументу + КолВоИтого;
			Таб.Вывести(ОбластьИтоги);		
		КонецЦикла;
		
		ОбластьИтоги = Макет.ПолучитьОбласть("ИтогиТовары");
		ОбластьИтоги.Параметры.Сумма = СуммаИтогПоДокументу;
		ОбластьИтоги.Параметры.Количество = КолВоИтогПоДокументу;
		Таб.Вывести(ОбластьИтоги);
		
		// Подвал
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		Таб.Вывести(ОбластьПодвал);
		
		
		
		Таб.ОтображатьГруппировки = Ложь;
		Таб.ОтображатьЗаголовки = Ложь;
		Таб.ОтображатьСетку = Ложь;
		Таб.ТолькоПросмотр = Истина;
		Таб.Показать(Заголовок);
		
		Возврат Таб;
		
	КонецФункции //ПечатьЗаказа()
	
#КонецЕсли

БроньПроверена = Ложь;
