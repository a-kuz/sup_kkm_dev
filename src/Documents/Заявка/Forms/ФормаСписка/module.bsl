Перем ТаблицаЗаказов;

// Процедура обновляет статусы заказов, изменяет картинку статуса
// 
Процедура ОбновитьСтатусыЗаказов(ОформленияСтрок)
	
	Запрос = ПолучитьСписокДинамическогоПоля(ЭлементыФормы.ДокументСписок);
	Запрос.Выполнить();
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказДопИнф.Заказ,
	|	ЗаказДопИнф.Статус
	|ИЗ
	|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|ГДЕ
	|	ЗаказДопИнф.Заказ В
	|			(ВЫБРАТЬ
	|				Заказы.Ссылка КАК Заказ
	|			ИЗ
	|				Заказы КАК Заказы)";
	
	ТаблицаЗаказов = Запрос.Выполнить().Выгрузить();
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Заказ = ОформлениеСтроки.ДанныеСтроки.Ссылка;
		Разница = Заказ.Товары.Итог("СуммаРеализации") - Заказ.Товары.Итог("Сумма");
		Если Разница < 0 Тогда
			ОформлениеСтроки.Ячейки.Скидка.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.Скидка.ИндексКартинки = 3;
		ИначеЕсли Разница > 0 Тогда
			ОформлениеСтроки.Ячейки.Скидка.ОтображатьКартинку = Истина;
			ОформлениеСтроки.Ячейки.Скидка.ИндексКартинки = 4;
		КонецЕсли;
		
		СтрокаЗаказа = ТаблицаЗаказов.Найти(Заказ, "Заказ");
		Если НЕ СтрокаЗаказа = Неопределено Тогда
			Если СтрокаЗаказа.Статус = Перечисления.СтатусыЗаказа.Закрыт Тогда
				
				ОтборПротокол 			= Новый Структура("Заказ", СтрокаЗаказа.Заказ);
				ЗаписиРегистра 	= РегистрыСведений.ЗаказДопИнф.Получить(ОтборПротокол);
				
				ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку = Истина;

				Если ЗаписиРегистра.ПротоколРасчетов.ККМ = Справочники.ТорговоеОборудование.ПустаяСсылка() И
					НЕ ЗаписиРегистра.ПротоколРасчетов.Неучетный Тогда
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 5;
				Иначе
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 0;
				КонецЕсли;
				
			ИначеЕсли СтрокаЗаказа.Статус = Перечисления.СтатусыЗаказа.Удален Тогда
				ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку = Истина;
				ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ОбновитьСтатусыЗаказов()

// ---------------------------- взято с itland.ru (немного изменено) -----------------------------
// Функция предназначена для получения таблицы с содержимым текущего динамического списка
// Параметры:
//	тпДинСписок - элемент формы, отображающий динамический список
// Возвращаемое значение:
//	Объект типа "Запрос" с установленными параметрами, но не выполненный :)
// В случае ошибки возвращается Неопределено
Функция ПолучитьСписокДинамическогоПоля(тпДинСписок)
	// определим нужные переменные
	ствУсловия = Новый Соответствие;
	ствУсловия.Вставить(ВидСравнения.Больше, "П > &ПАРАМЕТР");
	ствУсловия.Вставить(ВидСравнения.БольшеИлиРавно, "П >= &ПАРАМЕТР");
	ствУсловия.Вставить(ВидСравнения.ВИерархии, "П В ИЕРАРХИИ (&ПАРАМЕТР)");
	ствУсловия.Вставить(ВидСравнения.ВСписке, "П В (&ПАРАМЕТР)");
	ствУсловия.Вставить(ВидСравнения.ВСпискеПоИерархии, "П В ИЕРАРХИИ (&ПАРАМЕТР)");
	ствУсловия.Вставить(ВидСравнения.Интервал, "Д > &ПАРАМЕТР1 И ПАРАМЕТР < &ПАРАМЕТР2");
	ствУсловия.Вставить(ВидСравнения.ИнтервалВключаяГраницы, "Д >= &ПАРАМЕТР1 И ПАРАМЕТР <= &ПАРАМЕТР2");
	ствУсловия.Вставить(ВидСравнения.ИнтервалВключаяНачало, "Д >= &ПАРАМЕТР1 И ПАРАМЕТР < &ПАРАМЕТР2");
	ствУсловия.Вставить(ВидСравнения.ИнтервалВключаяНачало, "Д > &ПАРАМЕТР1 И ПАРАМЕТР <= &ПАРАМЕТР2");
	ствУсловия.Вставить(ВидСравнения.Меньше, "П < &ПАРАМЕТР");
	ствУсловия.Вставить(ВидСравнения.МеньшеИлиРавно, "П <= &ПАРАМЕТР");
	ствУсловия.Вставить(ВидСравнения.НеВИерархии, "П НЕ В ИЕРАРХИИ (&ПАРАМЕТР)");
	ствУсловия.Вставить(ВидСравнения.НеВСписке, "П НЕ В (&ПАРАМЕТР)");
	ствУсловия.Вставить(ВидСравнения.НеВСпискеПоИерархии, "П НЕ В ИЕРАРХИИ (&ПАРАМЕТР)");
	ствУсловия.Вставить(ВидСравнения.НеРавно, "П <> &ПАРАМЕТР");
	ствУсловия.Вставить(ВидСравнения.Равно, "П = &ПАРАМЕТР");
	ствУсловия.Вставить(ВидСравнения.Содержит, "С ПОДОБНО &ПАРАМЕТР");
	// начнем делать запрос
	Запрос = Новый Запрос;
	// СофтБаланс начало
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	// СофтБаланс Окончание
	стрТекстЗапроса = "ВЫБРАТЬ";
	стрРазделитель = "";
	// получим перечень видимых полей
	стрТекстЗапроса = стрТекстЗапроса+стрРазделитель+" идз.Ссылка КАК Ссылка";
	стрРазделитель = ", ";
	Для каждого Элемент из тпДинСписок.Колонки Цикл
		Если Элемент.Видимость и не ПустаяСтрока(Элемент.Данные) Тогда
			стрТекстЗапроса = стрТекстЗапроса+стрРазделитель+" идз."+Элемент.Данные+" КАК "+Элемент.Данные;
			стрРазделитель = ", ";
		КонецЕсли;
	КонецЦикла;
	Если стрРазделитель = "" Тогда
		// нет полей в запросе, тогда просто подставим *
		стрТекстЗапроса = стрТекстЗапроса+"*";
	КонецЕсли;
	// определим, из какой таблицы делать запрос
	мдОбъект = Метаданные.НайтиПоТипу(ТипЗнч(тпДинСписок.Значение));
	стрИмяТаблицы = мдОбъект.ПолноеИмя();
	Если Метаданные.РегистрыСведений.Содержит(мдОбъект) Тогда
		Если тпДинСписок.ВыбиратьСрез = ИспользованиеСреза.Первые Тогда
			стрИмяТаблицы = стрИмяТаблицы + ".СрезПервых(&ПериодСрезаПериодическогоРегистраСведений)";
			Запрос.УстановитьПараметр("ПериодСрезаПериодическогоРегистраСведений", тпДинСписок.СтандартныйПериод.ДатаНачала);
		ИначеЕсли тпДинСписок.ВыбиратьСрез = ИспользованиеСреза.Последние Тогда
			стрИмяТаблицы = стрИмяТаблицы + ".СрезПоследних(&ПериодСрезаПериодическогоРегистраСведений)";
			Запрос.УстановитьПараметр("ПериодСрезаПериодическогоРегистраСведений", тпДинСписок.СтандартныйПериод.ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	// СофтБаланс начало
	стрТекстЗапроса = стрТекстЗапроса + " ПОМЕСТИТЬ Заказы ";
	// СофтБаланс окончание
	
	стрТекстЗапроса = стрТекстЗапроса+Символы.ПС+"ИЗ "+стрИмяТаблицы+" КАК идз";
	// сформируем условия
	Если тпДинСписок.Значение.Отбор <> Неопределено Тогда
		стрГДЕ = Символы.ПС+"ГДЕ ";
		стрРазделитель = "";
		Для каждого Элемент из тпДинСписок.Значение.Отбор Цикл
			Если Элемент.Использование Тогда
				сРежимПараметров = Лев(ствУсловия[Элемент.ВидСравнения], 1);
				стрУсловие = Элемент.ПутьКДанным+" "+стрЗаменить(Сред(ствУсловия[Элемент.ВидСравнения], 2), "ПАРАМЕТР", Элемент.ПутьКДанным);
				Если сРежимПараметров = "П" Тогда // одиночный параметр или список
					Запрос.УстановитьПараметр(Элемент.ПутьКДанным, Элемент.Значение);
				ИначеЕсли сРежимПараметров = "Д" Тогда // два параметра
					Запрос.УстановитьПараметр(Элемент.ПутьКДанным+"1", Элемент.ЗначениеС);
					Запрос.УстановитьПараметр(Элемент.ПутьКДанным+"2", Элемент.ЗначениеПо);
				ИначеЕсли сРежимПараметров = "С" Тогда // строка (условие ПОДОБНО)
					Запрос.УстановитьПараметр(Элемент.ПутьКДанным, "%"+Элемент.Значение+"%");
				КонецЕсли;
				стрТекстЗапроса = стрТекстЗапроса+стрГДЕ+стрРазделитель+стрУсловие;
				стрРазделитель = " И ";
				стрГДЕ = "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Запрос.Текст = стрТекстЗапроса;
	Возврат Запрос;
КонецФункции // ПолучитьСписок()

//Процедура-обработчик события ПриПолученииДанных списка.
//
Процедура ДокументСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	ОбновитьСтатусыЗаказов(ОформленияСтрок);
КонецПроцедуры

//Процедура-обработчик события ПриАктивизацииСтроки списка.
//
Процедура ДокументСписокПриАктивизацииСтроки(Элемент)
	
	ИнтерфейсАдмина.СоздатьСписокПечатныхФорм(ЭтаФорма);
	
КонецПроцедуры

// Процедура назначается динамически
// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
// Подключение данной процедуры-обработчика выполняется из кода конфигурации
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка) 
	
	ИнтерфейсАдмина.ВыбратьПечатнуюФорму(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДокументСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Попытка
		ОформлениеСтроки.Ячейки.ПосадочноеМесто.Текст = НаимПосадочногоМеста(ДанныеСтроки.ПосадочноеМесто);
	Исключение	
	КонецПопытки;	
КонецПроцедуры

