
Функция МестоНужно(Место)
	Возврат Место.ИнформационнаяБаза = ИнформационнаяБаза ИЛИ Место.ИнформационнаяБаза.Пустая();
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Обработчик события ПередЗаписью.
//
Процедура ПередЗаписью(Отказ)
			
	Если Не ЗначениеЗаполнено(Наименование) Тогда 
		ТекстСообщения = "Не заполнено наименование.";
		СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Код) Тогда 
		ТекстСообщения = "Не заполнен код.";
		СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;                                     
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено И ПланыОбмена.Основной.ЭтотУзел() = Ссылка 
		И ИнформационнаяБаза <> Справочники.ИнформационныеБазы.Центр Тогда
		
		ТекстСообщения = "В главном узле необходимо выбрать информационную базу " + Справочники.ИнформационныеБазы.Центр.Наименование + ".";
		СообщитьОбОшибке(ТекстСообщения, Отказ);		
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
		
		ТекстСообщения = "Не заполнена информационная база.";
		СообщитьОбОшибке(ТекстСообщения, Отказ);		
		
	КонецЕсли;	
	
	Если НЕ Отказ Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Основной.Ссылка
		|ИЗ
		|	ПланОбмена.Основной КАК Основной
		|ГДЕ
		|	Основной.ИнформационнаяБаза = &ИнформационнаяБаза
		|	И Основной.Ссылка <> &Ссылка";
		
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			ТекстСообщения = "Для информационной базы уже создан узел.";
			СообщитьОбОшибке(ТекстСообщения, Отказ);
		КонецЕсли;	
			
	КонецЕсли;
	
	Если Константы.ИБВедениеСправочников.Получить() = ИнформационнаяБаза И НЕ Центр Тогда
		ТекстСообщения = "Узел информационной базы с ведением справочников должен быть центром.";
		СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриОтправкеДанныхПодчиненному.
//
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза)
	
	Если НЕ СозданиеНачальногоОбраза ИЛИ Центр Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ЭлементДанных;
	ОтправлятьОбъект = Истина;
	Тип = ТипЗнч(Объект);
	СтрТип = Строка(Тип);
	
	Если Лев(СтрТип, 8) = "Документ" Тогда
		ОтправлятьОбъект = Ложь;		
	ИначеЕсли Тип = Тип("СправочникОбъект.МестаРеализации") Тогда
		ОтправлятьОбъект = Истина;
			
	ИначеЕсли Тип = Тип("СправочникОбъект.ПосадочныеМеста") Тогда
		ОтправлятьОбъект = Ложь;
		
	ИначеЕсли Тип = Тип("СправочникОбъект.Сотрудники") Тогда
		ОтправлятьОбъект = Ложь;
				
	ИначеЕсли Тип = Тип("СправочникОбъект.РабочиеМеста") Тогда
		ОтправлятьОбъект = МестоНужно(Объект);
		
	ИначеЕсли Тип = Тип("СправочникОбъект.ТорговоеОборудование") Тогда
		//:Объект = Справочники.ТорговоеОборудование.СоздатьЭлемент();
		Если Объект.ИнформационнаяБаза.Пустая() Тогда
			ОтправлятьОбъект = Объект.Регион = ИнформационнаяБаза.Регион ИЛИ Объект.Регион.Пустая();
		Иначе
			ОтправлятьОбъект = МестоНужно(Объект);
		КонецЕсли;
		
		
	ИначеЕсли Тип = Тип("СправочникОбъект.Фирмы") Тогда
		ОтправлятьОбъект = МестоНужно(Объект);

		
	ИначеЕсли Тип = Тип("СправочникОбъект.Товары") Тогда
		ОтправлятьОбъект = Ложь;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.КаталогиТоваров") Тогда
		ОтправлятьОбъект = Истина;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.ИнформационныеБазы") Тогда
		
		ОтправлятьОбъект = Объект.Ссылка = ИнформационнаяБаза;
		ОтправлятьОбъект = ОтправлятьОбъект ИЛИ Объект.ПолучитьУзелРИБ() = ПланыОбмена.Основной.ЭтотУзел();
		
	КонецЕсли;
	
	Если НЕ ОтправлятьОбъект Тогда
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
	КонецЕсли; 
	
КонецПроцедуры
