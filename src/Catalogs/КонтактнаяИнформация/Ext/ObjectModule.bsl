
#Если Клиент Тогда
	
// Процедура формирует строковое представление телефона
//
Процедура ТелефонСформироватьПредставление() Экспорт
    
    // СФ    
    Если ЗначениеЗаполнено(Поле4) И НЕ ЗначениеЗаполнено(Поле3) Тогда
		Поле1 = "";
		Поле2 = "";
		Представление = СокрЛП(Поле4);
		ПолеХраненияНомера = ПреобразоватьНомерДляСохранения(Поле4, глКоличествоХранимыхЦифрТелефона);
		Возврат;
	КонецЕсли;
    // СФ
    
	КодСтраны = СокрЛП(Константы.КодСтраны.Получить());
	КодГорода = СокрЛП(Константы.КодГорода.Получить());
	ДлинаКодаГорода = СтрДлина(КодГорода);
	
	_Номер = УбратьИзНомераТелефонаВсеБуквы(Поле3);
	КоличествоЦифрНомера = СтрДлина(_Номер);
	
	Если КоличествоЦифрНомера = 10 Тогда
		Если ПустаяСтрока(Поле1) И НЕ ПустаяСтрока(КодСтраны) Тогда
			Поле1 = "+"+КодСтраны;
		КонецЕсли;
		
		Если ДлинаКодаГорода>0 И Лев(_Номер, ДлинаКодаГорода) = КодГорода Тогда
			Поле2 = КодГорода;
			Поле3 = Сред(_Номер, ДлинаКодаГорода+1);
		Иначе
			Поле2 = Лев(_Номер, 3);
			Поле3 = Сред(_Номер, 4);
		КонецЕсли; 
		
		_Номер = Поле3;
		Если СтрДлина(_Номер) = 7 Тогда
			Поле3 = Лев(_Номер,3) + "-" + Сред(_Номер,4,2) + "-" + Сред(_Номер,6,2);
		КонецЕсли; 
		
	ИначеЕсли КоличествоЦифрНомера = 10 - ДлинаКодаГорода Тогда
		Если ПустаяСтрока(Поле1) И НЕ ПустаяСтрока(КодСтраны) Тогда
			Поле1 = "+"+КодСтраны;
		КонецЕсли;
		Если ПустаяСтрока(Поле2) Тогда
			Поле2 = КодГорода;
		КонецЕсли;
		
	КонецЕсли;
	
	Представление = Поле1;
	Представление = Представление + ?(Не ПустаяСтрока(Поле2), ПроверкаПустойСтроки(Представление, Ложь)+"(" + Поле2 + ")"		,"");
	Представление = Представление + ?(Не ПустаяСтрока(Поле3), ПроверкаПустойСтроки(Представление, ПустаяСтрока(Поле2)) + Поле3	,"");
	Если НЕ ПустаяСтрока(Представление) Тогда
		Представление = Представление + ?((Не ПустаяСтрока(Поле4)),(ПроверкаПустойСтроки(Представление) + "доб. " + Поле4),"");
        ПолеХраненияНомера = ПреобразоватьНомерДляСохранения( ?(Поле2=КодГорода, "", Поле2) + Поле3, глКоличествоХранимыхЦифрТелефона);    
    Иначе
		Представление = Поле4;
		ПолеХраненияНомера = ПреобразоватьНомерДляСохранения(Поле4, глКоличествоХранимыхЦифрТелефона);
	КонецЕсли; 

КонецПроцедуры

// Функция проверяет строку на наличие значимых символов
//
// Параметры
//  ВыбСтрока  – строка для проверки
// Возвращаемое значение:
//   Строка - пробел или пустое значение строки
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой=Истина)
	
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой,",","")+" ";
	КонецЕсли; 
	
КонецФункции

// Процедура обслуживает событие АвтоПодборТекста элемента управления ПолеВвода для подмены автопоиска по тексту.
//
Процедура АдресАвтоПодборПоКлассификатору(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ТипАдресногоЭлемента) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РезультатЗапроса = АдресПолучитьРезультатЗапросаАвтоподбора(Текст, ТипАдресногоЭлемента, 2);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество()=1 Тогда
		Выборка.Следующий();
		ТекстАвтоподбора = Выборка.Наименование;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обслуживает событие ОкончаниеВводаТекста элемента управления Вид в форме записи регистра
// сведений Контактная информация.
//
// Параметры
//  Элемент - поле ввода
//  Текст - текст введенный в поле ввода Вид
//  Значение - данные элемента управления поле ввода
//  СтандартнаяОбработка - булево, флаг стандартной обработки события автоподбора
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ЭтаФорма - форма записи регистра сведений контактная информация
//  ТипСправочника - Тип, тип справочника автоподбора текста
//
Процедура АдресОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ТипАдресногоЭлемента) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли; 
	
	РезультатЗапроса = АдресПолучитьРезультатЗапросаАвтоподбора(Текст, ТипАдресногоЭлемента, 50);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Значение = Новый СписокЗначений;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		АдреснаяЗапись = киПолучитьСтруктуруАдресногоЭлемента(Выборка.Код);
		Значение.Добавить(АдреснаяЗапись, киПолучитьПолноеНазвание(Выборка.Код) );
	
	КонецЦикла; 
	
	Если Значение.Количество() = 1 Тогда
		Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
		АдресЗаполнитьРодителей(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле1, АдреснаяЗапись);
	КонецЕсли; 
	
КонецПроцедуры

// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
//
// Параметры
//  Текст - Строка, текст введенный в поле ввода видв контактной информации, по которому необходимо строить поиск
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция АдресПолучитьРезультатЗапросаАвтоподбора(Знач Текст, ТипАдресногоЭлемента, КоличествоЭлементов)
	
	Запрос = Новый Запрос;
	
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Запрос.УстановитьПараметр("ТекстАвтоПодбора"		,Текст + "%");
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента"	,ТипАдресногоЭлемента);
	
	Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ " + КоличествоЭлементов + "
		|	Код,Наименование
		|ИЗ
		|	РегистрСведений.АдресныйКлассификатор
		|ГДЕ
		|	ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
		|	Наименование ПОДОБНО &ТекстАвтоПодбора СПЕЦСИМВОЛ ""~""
		|";
		
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
КонецФункции

// Процедура формирует строковое представление адресных элементов -
// "родителей" переданого в переданных параментрах
//
// Параметры:
//  Элемент - элемент справочника Адресный классфикатор, для которого надо получить родителей.
//  Регион - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//  Улица  - строка, куда будет помещено строковое представление "родительской" улица.
//  Дом - строка, куда будет помещено строковое представление "родительского" дома.
//  Индекс - строка, куда будет помещено строковое представление индекса.
//
Процедура АдресЗаполнитьРодителей(Регион, Район, Город, НаселенныйПункт, Улица, Дом, Индекс, Элемент) Экспорт

	Если Элемент.ТипАдресногоЭлемента > 5 Тогда
		АдресныйЭлемент = киПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%киМаскаДома());
		Если АдресныйЭлемент.ТипАдресногоЭлемента = 6 Тогда
			Дом = киПолучитьНазвание(АдресныйЭлемент);
		Иначе
			Дом = "";
		КонецЕсли;
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента > 4 Тогда
		АдресныйЭлемент = киПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%киМаскаУлицы());
		Если АдресныйЭлемент.ТипАдресногоЭлемента = 5 Тогда
			Улица = киПолучитьНазвание(АдресныйЭлемент);
		Иначе
			Улица = "";
		КонецЕсли;
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента > 3 Тогда
		АдресныйЭлемент = киПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%киМаскаНасПункта());
		Если АдресныйЭлемент.ТипАдресногоЭлемента = 4 Тогда
			НаселенныйПункт = киПолучитьНазвание(АдресныйЭлемент);
		Иначе
			НаселенныйПункт = "";
		КонецЕсли;
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента > 2 Тогда
		АдресныйЭлемент = киПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%киМаскаГорода());
		Если АдресныйЭлемент.ТипАдресногоЭлемента = 3 Тогда
			Город = киПолучитьНазвание(АдресныйЭлемент);
		Иначе
			Город = "";
		КонецЕсли;
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента > 1 Тогда
		АдресныйЭлемент = киПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%киМаскаРайона());
		Если АдресныйЭлемент.ТипАдресногоЭлемента = 2 Тогда
			Район = киПолучитьНазвание(АдресныйЭлемент);
		Иначе
			Район = "";
		КонецЕсли;
	КонецЕсли;

	АдресныйЭлемент = киПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%киМаскаРегиона());
	Если АдресныйЭлемент.ТипАдресногоЭлемента = 1 Тогда
		Регион = киПолучитьНазвание(АдресныйЭлемент);
	Иначе
		Регион = "";
	КонецЕсли;

	Индекс = Элемент.Индекс;

КонецПроцедуры

#КонецЕсли

