Функция ЗаписатьСправочникОбъект(Объект)
	Попытка
		Объект.Записать();
		Возврат Истина;
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
		Сообщить("Изменение порядка элементов в данный момент невозможно.");
		Возврат Ложь;
	КонецПопытки;	
КонецФункции

Процедура ДействияФормыРежимСортировки(Кнопка)
	
	Отказ = Ложь;
	Для Каждого ЭлОтбора Из СправочникСписок.Отбор Цикл
		Если ЭлОтбора.Имя <> "Владелец" И ЭлОтбора.Использование Тогда
			Сообщить("Для сохранения произвольного порядка необходимо отключить отбор.");
			Отказ = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		СправочникСписок.Порядок.Установить("Порядок");
		
		// отключим возможность сортировки и установки отбора
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Код.Доступность 			= Ложь;
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Наименование.Доступность 	= Ложь;
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Порядок.Доступность 		= Ложь;
		ЭлементыФормы.СправочникСписок.Колонки.Код.Видимость 						= Ложь;
		ЭлементыФормы.СправочникСписок.Колонки.Порядок.Видимость 					= Истина;
		ЭлементыФормы.СправочникСписок.ИзменятьИерархическийПросмотр				= Ложь;
		
		Для Каждого ЭлОтбора Из ЭлементыФормы.СправочникСписок.НастройкаОтбора Цикл
			Если ЭлОтбора.Имя <> "Владелец" И НЕ ЭлементыФормы.СправочникСписок.Колонки.Найти(ЭлОтбора.Имя) = Неопределено Тогда
				ЭлОтбора.Доступность = Ложь;
			КонецЕсли;			
		КонецЦикла;
		
	Иначе
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Код.Доступность 			= Истина;
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Наименование.Доступность 	= Истина;
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Порядок.Доступность 		= Истина;
		ЭлементыФормы.СправочникСписок.Колонки.Код.Видимость 						= Истина;
		ЭлементыФормы.СправочникСписок.Колонки.Порядок.Видимость 					= Ложь;
		ЭлементыФормы.СправочникСписок.ИзменятьИерархическийПросмотр				= Истина;
		
		Для Каждого ЭлОтбора Из ЭлементыФормы.СправочникСписок.НастройкаОтбора Цикл
			Если ЭлОтбора.Имя <> "Владелец" И НЕ ЭлементыФормы.СправочникСписок.Колонки.Найти(ЭлОтбора.Имя) = Неопределено Тогда
				ЭлОтбора.Доступность = Истина;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникСписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если НЕ Строка = Неопределено И ЭлементыФормы.ДействияФормы.Кнопки.РежимСортировки.Пометка Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура СправочникСписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если НЕ Строка = Неопределено И ЭлементыФормы.ДействияФормы.Кнопки.РежимСортировки.Пометка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НачатьТранзакцию();
		
		СписокТоваров = Новый СписокЗначений;
		СписокТоваров.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Специфики");
		ЭтоГруппа = Строка.ЭтоГруппа;
		
		// проверка переносимых элементов
		Для Каждого Элемент Из ПараметрыПеретаскивания.Значение Цикл
			// группы можно перемещать отдельно, элементы отдельно
			Если Элемент.ЭтоГруппа <> ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
			СписокТоваров.Добавить(Элемент);
		КонецЦикла;
		
		Если СписокТоваров.Количество() > 1 Тогда		
			// отсортируем переносимые элементы
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Элементы.Значение
			|ПОМЕСТИТЬ Таб
			|ИЗ
			|	&Элементы КАК Элементы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таб.Значение КАК Товар
			|ИЗ
			|	Таб КАК Таб
			|
			|УПОРЯДОЧИТЬ ПО
			|	Таб.Значение.Порядок";
			
			Запрос.УстановитьПараметр("Элементы", СписокТоваров);
			МассивЭлементов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Товар");
		Иначе
			МассивЭлементов = ПараметрыПеретаскивания.Значение;
		КонецЕсли;
		
		ПорядокПереносимогоЭлемента = МассивЭлементов[0].Порядок;
		ПорядокЗаменяегоЭлемента 	= Строка.Порядок;
		
		// Выполним проверку перед обработкой
		КолВоЭлементов = МассивЭлементов.Количество();
		Сч = 1;
		НомерПредыдущего = ПорядокПереносимогоЭлемента;
		Пока Сч < КолВоЭлементов Цикл
			Разница = НомерПредыдущего - МассивЭлементов[Сч].Порядок;
			Если Разница <> -1 Тогда
				Сообщить("Возможно перемещение только элементов, находящихся рядом");
				Возврат;
			КонецЕсли;
			НомерПредыдущего = НомерПредыдущего + 1;
			Сч = Сч + 1;			
		КонецЦикла;
		
		Если ПорядокПереносимогоЭлемента > ПорядокЗаменяегоЭлемента Тогда
			// переносим элементы, которые стоят ниже
			
			Для Каждого Элемент Из МассивЭлементов Цикл
				Объект = Элемент.ПолучитьОбъект();		
				Объект.Порядок = ПорядокЗаменяегоЭлемента;
				Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
					Возврат;
				КонецЕсли;
				ПорядокЗаменяегоЭлемента = ПорядокЗаменяегоЭлемента + 1;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Специфики.Ссылка
			|ИЗ
			|	Справочник.Специфики КАК Специфики
			|ГДЕ
			|	Специфики.Родитель = &Родитель
			|	И Специфики.Порядок > &Порядок
			|	И (НЕ Специфики.Ссылка В (&СписокПереносимыхЭлементов))
			|
			|УПОРЯДОЧИТЬ ПО
			|	Специфики.Порядок";
			
			Запрос.УстановитьПараметр("Порядок"						, Строка.Порядок);
			Запрос.УстановитьПараметр("Родитель"					, ЭлементыФормы.СправочникСписок.ТекущийРодитель);
			Запрос.УстановитьПараметр("СписокПереносимыхЭлементов"	, МассивЭлементов);
				
			Выборка = Запрос.Выполнить().Выбрать();
			
			Объект = Строка.ПолучитьОбъект();
			Объект.Порядок = ПорядокЗаменяегоЭлемента;
			Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
				Возврат;
			КонецЕсли;
			
			НовыйПорядок = ПорядокЗаменяегоЭлемента+1;
			
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.Порядок = НовыйПорядок;
				Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
					Возврат;
				КонецЕсли;
				НовыйПорядок = НовыйПорядок + 1;
			КонецЦикла;
			
		Иначе
			
			// переносим элементы, которые стоят выше
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Специфики.Ссылка
			|ИЗ
			|	Справочник.Специфики КАК Специфики
			|ГДЕ
			|	Специфики.Родитель = &Родитель
			|	И Специфики.Порядок < &Порядок
			|	И Специфики.Ссылка <> &Ссылка
			|	И (НЕ Специфики.Ссылка В (&СписокПереносимыхЭлементов))
		//	|	И Товары.Владелец = &Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	Специфики.Порядок УБЫВ";
			
			Запрос.УстановитьПараметр("Порядок"						, ПорядокЗаменяегоЭлемента);
			Запрос.УстановитьПараметр("Ссылка"						, МассивЭлементов[0]);
			Запрос.УстановитьПараметр("СписокПереносимыхЭлементов"	, МассивЭлементов);
			Запрос.УстановитьПараметр("Родитель"					, ЭлементыФормы.СправочникСписок.ТекущийРодитель);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Сч = КолВоЭлементов;
			Пока Сч <> 0 Цикл
				Элемент = МассивЭлементов[Сч-1];
				Объект = Элемент.ПолучитьОбъект();		
				Объект.Порядок = ПорядокЗаменяегоЭлемента;
				Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
					Возврат;
				КонецЕсли;
				ПорядокЗаменяегоЭлемента = ПорядокЗаменяегоЭлемента-1;
				Сч = Сч - 1;
			КонецЦикла;
			
			Объект = Строка.ПолучитьОбъект();
			НовыйПорядок = Строка.Порядок - КолВоЭлементов;
			Объект.Порядок = НовыйПорядок;
			Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
				Возврат;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				НовыйПорядок = НовыйПорядок - 1;
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.Порядок = НовыйПорядок;
				Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
					Возврат;
				КонецЕсли;				
			КонецЦикла;			
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УправлениеРИБ.ПриОткрытииСпискаСправочника(ЭтаФорма);
	
КонецПроцедуры

Процедура СправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Не ДанныеСтроки.ЭтоГруппа Тогда
		Если Не ДанныеСтроки.ЕстьВПродаже Тогда
			ОформлениеСтроки.ЦветТекста = Новый Цвет(153,51,0);		// бардовый
			ОформлениеСтроки.Шрифт		= Новый Шрифт(,,,,,Истина);	// зачеркнутый 		
		КонецЕсли;
	КонецЕсли; 
	
		

КонецПроцедуры
