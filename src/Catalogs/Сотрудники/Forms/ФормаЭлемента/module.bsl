
////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Управляет доступностью элементов формы.
//
Процедура УправлениеДоступностью()
	
	ЭлементыФормы.ПанельОсновная.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;

	ЭлементыФормы.ПанельОсновная.Страницы.ДопНаименования.Видимость = глВерсия>1 И Константы.ДопЯзыки.Получить();
	ЭлементыФормы.ПанельОсновная.Страницы.УчетРабочегоВремени.Видимость = глВерсия=3;
	
	Если глВерсия=1 Тогда
		ЭлементыФормы.РамкаПерсонализация		.Видимость = Ложь;
		ЭлементыФормы.ОсновнойПланЗала			.Видимость = Ложь;
		ЭлементыФормы.НадписьОсновнойПланЗала	.Видимость = Ложь;
		ЭлементыФормы.Пейджер					.Видимость = Ложь;
		ЭлементыФормы.НадписьПейджер			.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.Бригада.Доступность = Бригадир;
	ЭлементыФормы.НадписьБригада.Доступность = Бригадир;

	//Если НЕ(глВерсия>1 И Константы.ПодтверждениеГотовности.Получить()) Тогда
	Если НЕ(глВерсия>1 И Константы.РаботаСПодтверждениямиПозицийЗаказа.Получить()) Тогда
		ЭлементыФормы.НадписьЦветОповещения	.Видимость = Ложь;
		ЭлементыФормы.ЦветОповещения		.Видимость = Ложь;
	КонецЕсли;
	
	Если глВерсия<3 Тогда
		ЭлементыФормы.РамкаДоставка	.Видимость = Ложь;
		ЭлементыФормы.Курьер		.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу прав значениями всех мест реализации
// и установленными для них правами доступа сотрудника
Процедура ЗаполнитьПраваДоступа()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МестаРеализации.Ссылка КАК МестоРеализации,
	|	Сотрудник.НаборПрав
	|ИЗ
	|	Справочник.МестаРеализации КАК МестаРеализации
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|
	|	(ВЫБРАТЬ
	|		СотрудникиПраваДоступа.МестоРеализации,
	|		СотрудникиПраваДоступа.НаборПрав
	|	ИЗ
	|		Справочник.Сотрудники.ПраваДоступа КАК СотрудникиПраваДоступа
	|	ГДЕ СотрудникиПраваДоступа.Ссылка = &Сотрудник
	|	) КАК Сотрудник
	|
	|	ПО МестаРеализации.Ссылка = Сотрудник.МестоРеализации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицаПраваДоступа = ТаблицаПраваДоступа.Добавить();
		СтрокаТаблицаПраваДоступа.МестоРеализации	= Выборка.МестоРеализации;
		СтрокаТаблицаПраваДоступа.НаборПрав			= Выборка.НаборПрав;
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция выполняет запрос при автоподборе текста  и при окончании ввода текста в поле ввода.
//
// Параметры
//  Текст - Строка, текст введенный в поле ввода видв контактной информации, по которому необходимо строить поиск
//  СтруктураПараметров - Структура параметров запроса, ключ - имя параметра, значение - значение параметра.
//  ТипСправочника - Тип, тип справочника автоподбора текста
//  КоличествоЭлементов - Число, количество элементов в результирующей таблице запроса
//
// Возвращаемое значение
//  РезультатЗапроса
//
Функция ПейджерПолучитьРезультатЗапросаАвтоподбора(Знач Текст, КоличествоЭлементов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодВида"	,"Пейджер");
	Запрос.УстановитьПараметр("ТекстАвтоПодбора"	,"%" + Текст + "%");
	
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ " + КоличествоЭлементов + "
		|	Ссылка,Наименование
		|ИЗ
		|	Справочник.ТорговоеОборудование
		|ГДЕ
		|	НЕ ПометкаУдаления И НЕ ЭтоГруппа
		|	И Наименование ПОДОБНО &ТекстАвтоПодбора
		|	И КодВида =  &КодВида
		|
		|УПОРЯДОЧИТЬ ПО Наименование
		|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
КонецФункции

Функция СоздатьНовыйПейджер(ИдУстройства)
	
	Попытка
		ИдУстройстваЧисло = Число(ИдУстройства);
	Исключение
		Предупреждение("Введите 8-ми значный ID устройства.");
		Возврат Неопределено;
	КонецПопытки;
	
	Если Формат(ИдУстройстваЧисло,"ЧЦ=8; ЧВН=; ЧГ=0") <> ИдУстройства Тогда
		Предупреждение("Введите 8-ми значный ID устройства.");
		Возврат Неопределено;
	КонецЕсли; 
	
	Если Вопрос("Устройство с ID " + ИдУстройства + " не зарегистрировано!
				|Зарегистрировать новое устройство?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("ИдУстройства", ИдУстройства);
	
	Настройка = Справочники.ТорговоеОборудование.СоздатьЭлемент();
	Настройка.УстановитьНовыйКод();
	Настройка.Наименование	= "Пейджер "+ИдУстройства;
	Настройка.КодВида		= "Пейджер";
	Настройка.КодМодели		= "СофтБаланс";
	Настройка.КодВерсии		= "";
	Настройка.ТипПрофиля	= 1;
	Настройка.ИмяОбработки	= "Обслуживание_Пейджер_СофтБаланс";
	Настройка.Параметры	= ЗначениеВСтрокуВнутр( ПараметрыНастройки );
	Настройка.Записать();
	
	Возврат Настройка.Ссылка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	КартаДоступа = Справочники.КартыДоступа.НайтиПоРеквизиту("Привязка", Ссылка);
	
	ЗаполнитьПраваДоступа();
	Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		ИнтерфейсАдмина.ЗаполнитьДопНаименования(Ссылка,ТаблицаДопНаименования);
	Иначе
		ИнтерфейсАдмина.ЗаполнитьДопНаименования(ПараметрОбъектКопирования,ТаблицаДопНаименования);
	КонецЕсли;
	
	Если ЦветОповещенияГотовности = 0 Тогда
		ЦветОповещения = Новый Цвет();	// Авто
	Иначе
		ЦветRGB = ЦветЧисло2RGB(ЦветОповещенияГотовности);
		ЦветОповещения = Новый Цвет(ЦветRGB.R, ЦветRGB.G, ЦветRGB.B);
	КонецЕсли; 
	
	УправлениеДоступностью();
	
	Попытка
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы[ВосстановитьЗначение("ТекущаяСтраницаСотрудники")];
	Исключение
	КонецПопытки;
	
	ИнтерфейсАдмина.ЗаполнитьПодменюВыбораОтчетов(ЭтотОбъект, ЭлементыФормы.ДействияФормы.Кнопки.ПодменюОтчеты);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("ТекущаяСтраницаСотрудники", ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя);
	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;  
	
	_Знач = ОбработкаВнешнихСобытий.ПолучитьДанные(Источник,Событие,Данные);
	Если НЕ ЗначениеЗаполнено(_Знач) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбКарта = "Идентификатор_"+_Знач;
	
	Если ИнтерфейсАдмина.ОбработкаВыбораКартыДоступа(ВыбКарта, КартаДоступа, Ссылка) Тогда
		КартаДоступа = ВыбКарта;
	КонецЕсли;
	
	Попытка
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы["Основное"];
	Исключение
	КонецПопытки;

	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	ПраваДоступа.Очистить();
	Для каждого СтрокаТаблицаПраваДоступа Из ТаблицаПраваДоступа Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицаПраваДоступа.НаборПрав) Тогда
			СтрокаПраваДоступа = ПраваДоступа.Добавить();
			СтрокаПраваДоступа.МестоРеализации	= СтрокаТаблицаПраваДоступа.МестоРеализации;
			СтрокаПраваДоступа.НаборПрав		= СтрокаТаблицаПраваДоступа.НаборПрав;
		КонецЕсли; 
	КонецЦикла; 
	
	Если Бригадир И НЕ ЗначениеЗаполнено(Бригада) Тогда
		Сообщить("Не заполнена Бригада!",СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	ЦветОповещенияГотовности = ЦветRGB2Число(ЦветОповещения.Красный, ЦветОповещения.Зеленый, ЦветОповещения.Синий);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	ИнтерфейсАдмина.ЗаписатьДопНаименования(Ссылка,ТаблицаДопНаименования);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура БригадирПриИзменении(Элемент)
	ЭлементыФормы.Бригада.Доступность = Бригадир;
	ЭлементыФормы.НадписьБригада.Доступность = Бригадир;
КонецПроцедуры

Процедура НаименованиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ФИО) Тогда
		ФИО = Наименование;
	Иначе
		Н = Найти(ФИО, " ");
		Если Н = 0 Тогда
			Наименование = ФИО;
		Иначе 
			Наименование = Лев(ФИО, Н);
			ИО = СокрЛ(Прав(ФИО, СтрДлина(ФИО) - Н));
			Если НЕ ИО = "" Тогда
				Наименование = Наименование + Лев(ИО, 1) + ".";
				Н2 = Найти(ИО, " ");
				Если НЕ Н2 = 0 Тогда
					О = СокрЛ(Прав(ИО, СтрДлина(ИО) - Н2));
					Наименование = Наименование + ?(О ="", "", Лев(О,1) + ".");
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли; 	
	КонецЕсли;
	
КонецПроцедуры

Процедура КартаДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ИнтерфейсАдмина.ОбработкаВыбораКартыДоступа(ВыбранноеЗначение, КартаДоступа, Ссылка);
	
КонецПроцедуры

Процедура КартаДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ИнтерфейсАдмина.ОбработкаОчисткиКартыДоступа(КартаДоступа);
	
КонецПроцедуры

Процедура КодДоступаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка =  Ложь;
	ЭлементыФормы.КодДоступа.РежимПароля = Ложь;
	ЭлементыФормы.КодДоступа.КнопкаОткрытия = Ложь;
	
	//чтобы отобразить код доступа, его надо переприсвоить
	БылаМодифицированность = Модифицированность;
	КодДоступа = КодДоступа;
	Модифицированность = БылаМодифицированность;
	
КонецПроцедуры

Процедура ОсновноеМенюНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("ЭкранМеню");
	СписокВидов.Добавить("ЭкранМенюКПК");
	СписокВидов.Добавить("СписокМеню");
	СписокВидов.Добавить("СписокМенюКПК");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура ОсновноеМенюОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаНастройки = Обработки.ПодборТоваров.ПолучитьФорму("Настройка");
	ФормаНастройки.Открыть();
	Если ЗначениеЗаполнено(ОсновноеМеню) Тогда
		ФормаНастройки.ТекущаяНастройка = ОсновноеМеню;
		ФормаНастройки.ЗагрузитьПараметрыНастройки();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновнойПланЗалаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("ПланЗала");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура ПейджерНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("Пейджер");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент);
	
КонецПроцедуры

Процедура ПейджерАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//РезультатЗапроса = ПейджерПолучитьРезультатЗапросаАвтоподбора(Текст, 2);
	//
	//Если РезультатЗапроса.Пустой() Тогда
	//	Возврат;
	//КонецЕсли; 
	//
	//Выборка = РезультатЗапроса.Выбрать();
	//Если Выборка.Количество()=1 Тогда
	//	Выборка.Следующий();
	//	ТекстАвтоподбора = Выборка.Наименование;
	//КонецЕсли; 
	
КонецПроцедуры

Процедура ПейджерОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли; 
	
	РезультатЗапроса = ПейджерПолучитьРезультатЗапросаАвтоподбора(Текст, 50);
	
	Если РезультатЗапроса.Пустой() Тогда
		НовыйПейджер = СоздатьНовыйПейджер(Текст);
		Если НовыйПейджер<>Неопределено Тогда
			Значение = НовыйПейджер;
			СтандартнаяОбработка = Ложь;
	 	КонецЕсли; 
		Возврат;
	КонецЕсли; 
	
	СтандартнаяОбработка = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Количество()=1 Тогда
		Выборка.Следующий();
		Значение = Выборка.Ссылка;
		
	Иначе
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка);
		КонецЦикла; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЦветОповещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	ИнтерфейсАдмина.ПроверитьЦветНаАбсолютный(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Процедура назначается динамически
// Процедура вызывается при выборе пункта подменю ПодменюОтчеты командной панели
// формы. Процедура отрабатывает выбор печатной формы.
// Подключение данной процедуры-обработчика выполняется из кода конфигурации
//
Процедура ДействияФормыДействиеВыбратьОтчет(Кнопка) 
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		СписокОтчетов = ПолучитьСписокОтчетов();
		СтрокаОтчетаВСписке = СписокОтчетов.НайтиПоЗначению(Кнопка.Имя);
		Если СтрокаОтчетаВСписке <> Неопределено Тогда
			СформироватьОтчет(СтрокаОтчетаВСписке.Значение, ЭтотОбъект);
		Иначе
			СсылкаНаОтчет = Справочники.ВнешниеОбработки.НайтиПоКоду(СтрЗаменить(Кнопка.Имя, "ВнешнийОтчет_", ""));
			
			Если СсылкаНаОтчет <> Неопределено Тогда
				СформироватьОтчет(СсылкаНаОтчет, ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;
	
КонецПроцедуры

