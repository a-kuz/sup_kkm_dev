
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ЭлементыФормы.ГлубинаКредита.Доступность = Безнал;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ЗакрытьНажатие(Элемент)
	Закрыть();
КонецПроцедуры

Процедура ЗаполнитьНажатие(Элемент)
	
	Если Вопрос("Заполнить справочник ""Клиенты"" по заданным условиям?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Ок Тогда
		
		ОбщийСписок.Очистить();
		
		НачатьТранзакцию();
		
		Если НЕ ЗначениеЗаполнено(Контрагент) ИЛИ Контрагент.ЭтоГруппа Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ПометкаУдаления = ЛОЖЬ
			|	И Контрагенты.Родитель = &Родитель");
			Запрос.УстановитьПараметр("Родитель", Контрагент);
			Выгрузка = Запрос.Выполнить().Выгрузить();
			Для каждого Строка Из Выгрузка Цикл
				СформироватьКлиента(Строка.Ссылка, ВыбГруппа);				
			КонецЦикла;			
		Иначе	
			СформироватьКлиента(Контрагент, ВыбГруппа);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		Сообщить("Обработка закончена!")
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбщийСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыбраннаяСтрока.Клиент.ПолучитьФорму().Открыть();	
КонецПроцедуры


Процедура БезналПриИзменении(Элемент)
	ЭлементыФормы.ГлубинаКредита.Доступность = Безнал;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МОДУЛЯ

Процедура СформироватьКлиента(Параметр, Группа)
	Сообщить("Обрабатывается элемент - " + Параметр);
	
	Поиск = Справочники.Клиенты.НайтиПоРеквизиту("Контрагент", Параметр, Группа);
	
	Если ЗначениеЗаполнено(Поиск) Тогда
		Объект = Поиск.ПолучитьОбъект();
		Если ОбновлятьНаименование Тогда
			Объект.Наименование = Параметр.Наименование;
		КонецЕсли;
		
		Если Не Объект.ЭтоГруппа Тогда
			Если ОбновлятьКонтакты Тогда
				Объект.Адрес   = Параметр.Адрес;
				Объект.Телефон = Параметр.Телефон;
			КонецЕсли;	
			Объект.ДатаОбновления = ТекущаяДата();
		КонецЕсли;	
	КонецЕсли;	
	
	Если Параметр.ЭтоГруппа Тогда
		Если НЕ ЗначениеЗаполнено(Поиск) Тогда
			Объект = Справочники.Клиенты.СоздатьГруппу();
			Объект.Наименование = Параметр.Наименование;
			Объект.Контрагент   = Параметр;
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ПометкаУдаления = ЛОЖЬ
		|	И Контрагенты.Родитель = &Родитель");
		Запрос.УстановитьПараметр("Родитель", Параметр);
		Выгрузка = Запрос.Выполнить().Выгрузить();
		
		Попытка
			Объект.Записать();
		Исключение
			Сообщить("Не удалось выполнить обработку: " + ОписаниеОшибки());
		КонецПопытки;
		
		Для	каждого Элемент из Выгрузка Цикл
			СформироватьКлиента(Элемент.Ссылка, Объект.Ссылка);	
		КонецЦикла;
		
	Иначе	
		Если НЕ ЗначениеЗаполнено(Поиск) Тогда
			
			Объект = Справочники.Клиенты.СоздатьЭлемент();
			Объект.Наименование    = Параметр.Наименование;
			Объект.Родитель        = Группа;
			Объект.Телефон 		   = Параметр.Телефон;
			Объект.Адрес		   = Параметр.Адрес;
			Объект.ДатаРегистрации = ТекущаяДата();
			Объект.Контрагент      = Параметр;
			Объект.Наименование    = Параметр.Наименование;
			Объект.Безнал		   = БезНал;
			
			Если Безнал Тогда 
				Объект.ГлубинаКредита = ГлубинаКредита;
			КонецЕсли;
			
			Объект.Неплательщик = Неплательщик;
			Объект.ОсновнойВариантОплаты = ВариантОплаты;
			Объект.ТипОграниченияВариантовОплат = Перечисления.ТипыОграниченийПоСписку.Нет;
			
		КонецЕсли;
		
		
		Попытка			
			Объект.Записать();
			Стр = ОбщийСписок.Добавить();
			Стр.Код          = Объект.Код;
			Стр.Клиент       = Объект.Ссылка;
			Стр.Неплательщик = Объект.Неплательщик;
			
		Исключение
			Сообщить("Не удалось выполнить обработку: " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры	

