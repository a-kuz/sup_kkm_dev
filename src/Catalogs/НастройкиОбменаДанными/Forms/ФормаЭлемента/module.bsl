// Хранит массив страниц в форме.
Перем МассивСтраниц;

Перем мОбновлятьСписокАвтоОбмена;

Перем мЖирныйШрифт;
Перем мОбычныйШрифт;

Перем мНомерТекущейСтраницы;

// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////

// Процедура устанавливает доступность полей доп. ограничений для автообмена
Процедура УстановитьДоступностьЭлементовДопОграниченияДляАвтообмена()
	
	ЭлементыФормы.НаличиеКаталогаДляЗапускаАвтообмена.ТолькоПросмотр = НЕ ФлажокВыполнятьАвтообменПриВидимостиКаталога;
	
	ЭлементыФормы.ОтсутствиеКаталогаДляЗапускаАвтообмена.ТолькоПросмотр = НЕ ФлажокВыполнятьАвтообменПриНЕВидимостиКаталога;
	
КонецПроцедуры

// процедура по узлу устанавливает наименованеи плана обмена
Процедура УстановитьНаименованиеПланаОбмена()
	
	ИмяПланаОбмена = ПроцедурыОбменаДанными.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	ЭтаФорма.Заголовок = "Настройки обмена данными. План обмена: " + ИмяПланаОбмена + ", Настройка"; 
	
КонецПроцедуры

// процедура устанавлиВопросПриАвтообменевает доступность пароля архивации файлов при отправке 
Процедура УстановитьДоступностьАрхивацииФайловПриОтправке()
	
	ЭлементыФормы.НадписьПарольНаЗапись.Доступность = ВыполнятьАрхивациюФайловОбмена;
	ЭлементыФормы.ПарольНаОтправку.ТолькоПросмотр = НЕ ВыполнятьАрхивациюФайловОбмена;
	
КонецПроцедуры

//процедура устанавливает доступность редактирования каталога отслеживания видимости
Процедура УстановитьДоступностьРедактированияКаталогаОтслеживанияВидимости()
	
	ЭлементыФормы.КаталогПроверкиДоступности.ТолькоПросмотр = НЕ ПриИзмененииВидимостиКаталога;
	
КонецПроцедуры

// процедура устанавливает активной нужную страницу дополнительных настроек
Процедура УстановитьСтраницуДополнительныхНастроек()
	
	// в зависимости от типа обмена устанавливаем нужную настройку
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.Файловый;
		
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.FTPОбмен;
		
	КонецЕсли;
	
КонецПроцедуры

// процедура перечитывает данные параметров настройки
Процедура ПеречитатьПараметрыНастройки()
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыОбменаДанными.ДатаПоследнегоОбмена,
	               |	ПараметрыОбменаДанными.ДатаПоследнегоФайлаОбмена,
	               |	ПараметрыОбменаДанными.ДатаПоследнейЗагрузки,
	               |	ПараметрыОбменаДанными.ДатаПоследнейВыгрузки,
	               |	ПараметрыОбменаДанными.РезультатПоследнейЗагрузки,
	               |	ПараметрыОбменаДанными.РезультатПоследнейВыгрузки,
				   |    ПараметрыОбменаДанными.ДоступностьКаталогаПроверки
	               |ИЗ
	               |	РегистрСведений.ПараметрыОбменаДанными КАК ПараметрыОбменаДанными
				   |	ГДЕ (ПараметрыОбменаДанными.НастройкаОбменаДанными = &Ссылка)";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДатаПоследнегоОбмена = Выборка.ДатаПоследнегоОбмена;
		ДатаПоследнегоФайлаОбмена = Выборка.ДатаПоследнегоФайлаОбмена;
		
		ДатаПоследнейЗагрузки = Выборка.ДатаПоследнейЗагрузки;
		ДатаПоследнейВыгрузки = Выборка.ДатаПоследнейВыгрузки;
		РезультатПоследнейЗагрузки = Выборка.РезультатПоследнейЗагрузки;
		РезультатПоследнейВыгрузки = Выборка.РезультатПоследнейВыгрузки;
		
		ДоступностьКаталогаПроверки = Выборка.ДоступностьКаталогаПроверки;
		
	Иначе
		
		ДатаПоследнегоОбмена = Неопределено;
		ДатаПоследнегоФайлаОбмена = Неопределено;
		
		ДатаПоследнейЗагрузки = Неопределено;
		ДатаПоследнейВыгрузки = Неопределено;
		РезультатПоследнейЗагрузки = Ложь;
		РезультатПоследнейВыгрузки = Ложь;
		
		ДоступностьКаталогаПроверки = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

// процедура устанавливает в качестве реквизита узел обмена - единственный узел для обмена данными с текущей ИБ
Процедура УстановитьЕдинственныйУзелДляОбмена()
	
	ТекущийПодходящийУзел = Неопределено;
	// пробегаем все узлы всех планов обмена
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		ТекущийПланОбмена = ПланыОбмена[ПланОбмена.Имя];
		ТекущийУзелИБ = ТекущийПланОбмена.ЭтотУзел();
		
		// все узлы пробегаем
		ВыборкаУзлов = ТекущийПланОбмена.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			
			Узел = ВыборкаУзлов.Ссылка;
			Если (Узел <> ТекущийУзелИБ) Тогда
				
				Если ТекущийПодходящийУзел <> Неопределено Тогда
					// уже нашли второй узел с которым можно обменяться...
					Возврат;
				КонецЕсли;
				
				ТекущийПодходящийУзел = Узел; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТекущийПодходящийУзел <> Неопределено Тогда
		
		УзелИнформационнойБазы = ТекущийПодходящийУзел;
		
	КонецЕсли;		
	
КонецПроцедуры

//Функция для текущей редактируемой настройки определяет она для автоматического обмена или нет
Функция ОпределитьПоНастройкеРедактированияОнаДляАвтообмена()
	
	Возврат КаждыйЗапускПрограммы 
		ИЛИ КаждоеЗавершениеРаботыСПрограммой
		ИЛИ ( ПриИзмененииВидимостиКаталога
			И Не ПустаяСтрока(КаталогПроверкиДоступности));
	
КонецФункции

//Процедура устанавливает текст надписи регламентированного задания.
//
Процедура УстановитьТекстНадписиРегламентнойНастройки()
	
	РасписаниеАктивно = Ложь;
	
	Если мРегламентноеЗадание = Неопределено Тогда
		ТекстРасписания = "<Расписание не задано>";
	Иначе
		Если мРегламентноеЗадание.Использование Тогда
			ПрефиксРасписания = "Расписание: ";
			РасписаниеАктивно = Истина;
		Иначе
			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
		КонецЕсли;
		
		ТекстРасписания = ПрефиксРасписания + Строка(мРегламентноеЗадание.Расписание);
	КонецЕсли;
			
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Заголовок = ТекстРасписания;
	
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Шрифт = ?(РасписаниеАктивно И ИспользоватьРегламентныеЗадания, мЖирныйШрифт, мОбычныйШрифт);
	
КонецПроцедуры

//Процедура вызывается при открытии чтобы передать настройки расписания в форму.
//
Процедура ПередатьРасписаниеРегламентногоЗаданияВФорму(ТекРегламентноеЗадание)
	
	ВремяНачала = ТекРегламентноеЗадание.Расписание.ВремяНачала;
	ВремяКонца = ТекРегламентноеЗадание.Расписание.ВремяКонца;
	ИнтервалПовторения = ТекРегламентноеЗадание.Расписание.ПериодПовтораВТечениеДня/3600;
	МассивДнейНедели = ТекРегламентноеЗадание.Расписание.ДниНедели;
	Если МассивДнейНедели.Найти(1) <> Неопределено Тогда
		флПонедельник = Истина;
	Иначе
		флПонедельник = Ложь;
	КонецЕсли; 	
		
	Если МассивДнейНедели.Найти(2)<> Неопределено Тогда
		флВторник = Истина;
	Иначе
		флВторник = Ложь;
	КонецЕсли;
	
	Если МассивДнейНедели.Найти(3)<> Неопределено Тогда
		флСреда = Истина;
	Иначе
		флСреда = Ложь;
	КонецЕсли;
	
	Если МассивДнейНедели.Найти(4)<> Неопределено Тогда
		флЧетверг = Истина;
	Иначе
		флЧетверг = Ложь;
	КонецЕсли;
	
	Если МассивДнейНедели.Найти(5)<> Неопределено Тогда
		флПятница = Истина;
	Иначе
		флПятница = Ложь;

	КонецЕсли;
	
	Если МассивДнейНедели.Найти(7)<> Неопределено Тогда
		флВоскресенье = Истина;
	Иначе
		флВоскресенье = Ложь;
	КонецЕсли;
	
	Если МассивДнейНедели.Найти(6)<> Неопределено Тогда
		флСуббота = Истина;
	Иначе
		флСуббота = Ложь;
	КонецЕсли;

	
КонецПроцедуры

//Процедура управляет доступностью гиперссылки "Далее"
//
Процедура УправлениеДоступностью()
	
	ИмяТекСтраницы = ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница.Имя;
	ЭлементыФормы.ГиперссылкаНазад.Доступность  = Истина;
	ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
	
	Если ИмяТекСтраницы = "ОтправкаИПриемСообщений" Тогда
		
		ЭлементыФормы.ПроизводитьОтправкуСообщенийПриУспешномПриеме.Доступность = ПроизводитьПриемСообщений;			
		
		Если ЗначениеЗаполнено(УзелИнформационнойБазы) И (ПроизводитьПриемСообщений ИЛИ ПроизводитьОтправкуСообщений) Тогда
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
		Иначе
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.ГиперссылкаНазад.Доступность = Ложь;
		
	ИначеЕсли ИмяТекСтраницы = "ТипОбмена" Тогда
		
		Если ЗначениеЗаполнено(ТипНастройки)  Тогда
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
		Иначе
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//Процедура проверяет корректность заполнения расписания.
//
Процедура ПроверитьЗаполнениеРасписания(флДеньНедели)
	
	ЕстьХотяБыОдинДеньНедели = флПонедельник ИЛИ флВторник ИЛИ флСреда ИЛИ флЧетверг 
								ИЛИ флПятница ИЛИ флСуббота ИЛИ флВоскресенье;
	
	Если НЕ ЕстьХотяБыОдинДеньНедели ТОгда
		Предупреждение("Не задан день недели расписания!");
		флДеньНедели = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет параметры автообмена из настроек ИБ
//
Процедура ПрочитатьНастрокиИБ()
	
	ТекИБ						= ПараметрыСеанса.ТекущаяИБ;
	ПользовательАвтообменаИБ	= ТекИБ.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте;
	ИнтервалПовторенияОбмена	= ТекИБ.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте;
	
КонецПроцедуры	

// СОБЫТИЯ
///////////////////////////////////////////////////////////////////////////////

// СОБЫТИЯ ПРИ ВЫБОРЕ И ПРОСМОТРЕ КАТАЛОГА

// при изменении каталога
Процедура ОбработчикПриИзмененииКаталога(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// событие при нажатии на кнопку выбора у каталога 
Функция ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = РаботаСФайлами.ВыбратьКаталог(Элемент.Значение);
	
	Возврат РезультатВыбора;
	
КонецФункции

// событие при нажатии на кнопку выбора файла 
Функция ОбработчикФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Ложь, , "Файл (*.xml;*.zip)|*.xml;*.zip");
	
	Если Диалог.Выбрать() Тогда
		Элемент.Значение = Диалог.ПолноеИмяФайла;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


// при нажатии на "Открытие" у каталога 
Процедура ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение(Элемент.Значение);
	
КонецПроцедуры

//СОБЫТИЯ ФОРМЫ И ЭЛЕМЕНТОВ ФОРМЫ

// при открытии формы
Процедура ПриОткрытии()

	Если ЭтоНовый() 
		И ПараметрОбъектКопирования = Неопределено 
		И ПараметрОснование = Неопределено Тогда
		
		// ищем те узлы с которыми может текущий пользователь обмениваться
		УстановитьЕдинственныйУзелДляОбмена();
		
		ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс;
		КаталогОбменаИнформацией = КаталогВременныхФайлов();
		
		флПонедельник = Истина;
		флВторник = Истина;
		флСреда = Истина;
		флЧетверг = Истина;
		флПятница = Истина;
		флСуббота = Истина;
		флВоскресенье = Истина;
		
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
		
		ПроизводитьПриемСообщений = Истина;
		ПроизводитьОтправкуСообщений = Истина;
		
		ВыполнятьАрхивациюФайловОбмена = Истина;
		
		ПортFTPСоединения = 21;
		
		мНаборЗаписейПараметров = Неопределено;
		
		ВестиЛог = Истина;
		
		ВопросПриАвтообмене = Ложь;
		ВыводитьСообщенияОбОшибкахПриАвтоматическомОбменеДанными = Ложь;
		ВыводитьИнформационныеСообщенияПриАвтоматическомОбменеДанными =	  Ложь;
		
		ВидАвтообмена = Перечисления.ВидыАвтоматическогоОбменаДанными.ПоРасписанию;
		ИспользоватьРегламентныеЗадания = Истина;
		КаталогОбменаИнформацией = "\\"+УзелИнформационнойБазы.ИнформационнаяБаза.СерверХост+"\c$\temp";
		
		ОбновитьРасписаниеРегламентногоЗадания();
		

	Иначе
		
		ПеречитатьПараметрыНастройки();
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
		Если мРегламентноеЗадание <> Неопределено Тогда
			ПередатьРасписаниеРегламентногоЗаданияВФорму(мРегламентноеЗадание);
		КонецЕсли;
				
	КонецЕсли;
	
	ПриИзмененииВидимостиКаталога = Не ПустаяСтрока(КаталогПроверкиДоступности);
	УстановитьДоступностьРедактированияКаталогаОтслеживанияВидимости();
	
	УстановитьСтраницуДополнительныхНастроек();
	УстановитьНаименованиеПланаОбмена();
			
	УстановитьДоступностьАрхивацииФайловПриОтправке();
			
	Если мРегламентноеЗадание = Неопределено Тогда
	
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
	ФлажокВыполнятьАвтообменПриВидимостиКаталога = Не ПустаяСтрока(НаличиеКаталогаДляЗапускаАвтообмена);
	ФлажокВыполнятьАвтообменПриНЕВидимостиКаталога = Не ПустаяСтрока(ОтсутствиеКаталогаДляЗапускаАвтообмена);
		
	УстановитьДоступностьЭлементовДопОграниченияДляАвтообмена();
	
	ОбновитьДоступностьАвтообмена();
	
	ЭтаФорма.Модифицированность = Ложь;
	
	Если ВидАвтообмена = Перечисления.ВидыАвтоматическогоОбменаДанными.ПоРасписанию Тогда
		ПереключательВидАвтообмена = 0;
	ИначеЕсли ВидАвтообмена = Перечисления.ВидыАвтоматическогоОбменаДанными.ПоСобытиям ТОгда
		ПереключательВидАвтообмена = 1;
	Иначе
		ПереключательВидАвтообмена = 2;
	КонецЕсли;
	
	
	Заголовок = "Мастер настроек обмена данными";
	
	УправлениеСтраницами();
	ПрочитатьНастрокиИБ();
	УправлениеДоступностью();
		
КонецПроцедуры

// при изменении узла обмена
Процедура УзелИнформационнойБазыПриИзменении(Элемент)
	
	УстановитьНаименованиеПланаОбмена();
	УправлениеДоступностью();
	
КонецПроцедуры

// при изменении типа настройки
Процедура ТипНастройкиПриИзменении(Элемент)
	
	УстановитьСтраницуДополнительныхНастроек();
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура ПроизводитьПриемСообщенийПриИзменении(Элемент)
	
	Если Не ПроизводитьПриемСообщений Тогда
		ПроизводитьОтправкуСообщенийПриУспешномПриеме = Ложь;
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

// процедура выполняет действия после изменения каталога обмена данными
Процедура ДействияПриИзмененииКаталогаОбменаДанными()
	
	НаличиеКаталогаПроверкиДоступности = ПриИзмененииВидимостиКаталога
										И Не ПустаяСтрока(КаталогПроверкиДоступности) 
										И (Врег(КаталогПроверкиДоступности) <> Врег(КаталогОбменаИнформацией));
										
	НаличиеКаталогаДляПроведенияАвтообмена = ФлажокВыполнятьАвтообменПриВидимостиКаталога
										И Не ПустаяСтрока(НаличиеКаталогаДляЗапускаАвтообмена)
										И (Врег(НаличиеКаталогаДляЗапускаАвтообмена) <> Врег(КаталогОбменаИнформацией));
										
	Если НЕ НаличиеКаталогаПроверкиДоступности И НЕ НаличиеКаталогаДляПроведенияАвтообмена Тогда
											
		Возврат;
		
	ИначеЕсли НаличиеКаталогаПроверкиДоступности И НаличиеКаталогаДляПроведенияАвтообмена Тогда
		// оба каталога есть в наличии
		ТекстВопроса = "Установить автоматически для реквизитов настройки обмена ""При появлении каталога"" и ""Выполнять автообмен только при видимости каталога"" значение:
			|" + КаталогОбменаИнформацией;
			
	ИначеЕсли НаличиеКаталогаПроверкиДоступности Тогда
		
		ТекстВопроса = "Установить автоматически для реквизита настройки обмена ""При появлении каталога"" значение:
			|" + КаталогОбменаИнформацией;
			
	ИначеЕсли НаличиеКаталогаДляПроведенияАвтообмена Тогда
		
		ТекстВопроса = "Установить автоматически для реквизита настройки обмена ""Выполнять автообмен только при видимости каталога"" значение:
			|" + КаталогОбменаИнформацией;		
		
	КонецЕсли;
		
	ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НаличиеКаталогаПроверкиДоступности Тогда
		КаталогПроверкиДоступности = КаталогОбменаИнформацией;	
	КонецЕсли;
	
	Если НаличиеКаталогаДляПроведенияАвтообмена Тогда
		НаличиеКаталогаДляЗапускаАвтообмена = КаталогОбменаИнформацией;	
	КонецЕсли;
	
КонецПроцедуры

// событие при нажатии на кнопку выбора у каталога обмена информацией
Процедура КаталогОбменаИнформациейНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РезультатВыбора = ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
	
	Если РезультатВыбора Тогда
		ДействияПриИзмененииКаталогаОбменаДанными();
	КонецЕсли;
	
КонецПроцедуры

// при изменении каталога обмена информацией
Процедура КаталогОбменаИнформациейПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
	
	ДействияПриИзмененииКаталогаОбменаДанными();
	
КонецПроцедуры

// при изменении FTP адреса обмена
Процедура FTPАдресОбменаПриИзменении(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры
           
// после записи объекта
Процедура ПослеЗаписи()
	
	Если мОбновлятьСписокАвтоОбмена И глОбработкаАвтоОбменДанными <> Неопределено Тогда
		
		глОбработкаАвтоОбменДанными.ОбновитьНастройкуАвтоматическогоОбмена(Ссылка);
				
	КонецЕсли;
	
	мОбновлятьСписокАвтоОбмена = Ложь;	
	
КонецПроцедуры

// перед записью объекта
Процедура ПередЗаписью(Отказ)
	
	Если ПереключательВидАвтообмена = 0 Тогда
		КаждыйЗапускПрограммы = Ложь;
		КаждоеЗавершениеРаботыСПрограммой = Ложь;
		ПриИзмененииВидимостиКаталога = Ложь;
	ИначеЕсли ПереключательВидАвтообмена = 1 ТОгда
		ИспользоватьРегламентныеЗадания = Ложь;
	Иначе
		КаждыйЗапускПрограммы = Ложь;
		КаждоеЗавершениеРаботыСПрограммой = Ложь;
		ПриИзмененииВидимостиКаталога = Ложь;
		ИспользоватьРегламентныеЗадания = Ложь;
	КонецЕсли; 	
	
	//пустой каталог отслеживания изменения видимости
	Если ПриИзмененииВидимостиКаталога
		И ПустаяСтрока(КаталогПроверкиДоступности) Тогда
		
		СообщитьОбОшибке("Не задан каталог при появлении которого необходимо выполнять обмен данными", Отказ);
		
	КонецЕсли;
	
	Если ФлажокВыполнятьАвтообменПриВидимостиКаталога
		И ПустаяСтрока(НаличиеКаталогаДляЗапускаАвтообмена) Тогда
			
		СообщитьОбОшибке("Не указан каталог при видимости которого можно выполнять автоматический обмен данными", Отказ);
			
	КонецЕсли;
		
	Если ФлажокВыполнятьАвтообменПриНЕВидимостиКаталога 
		И ПустаяСтрока(ОтсутствиеКаталогаДляЗапускаАвтообмена) Тогда
			
		СообщитьОбОшибке("Не указан каталог при НЕ видимости которого можно выполнять автоматический обмен данными", Отказ);			
			
	КонецЕсли;
	
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭтоНовый() Тогда
		
		Если ОпределитьНеобходимостьПериодическогоОпределенияВыполненияОбменаДанными() 
			ИЛИ Ответственный = ПараметрыСеанса.ТекущийПользователь Тогда
			
			мОбновлятьСписокАвтоОбмена = Истина;
			
		КонецЕсли; 
		
	Иначе
		
		Если КаталогПроверкиДоступности <> Ссылка.КаталогПроверкиДоступности	
		 ИЛИ Ответственный = ПараметрыСеанса.ТекущийПользователь 
		 ИЛИ Ссылка.Ответственный = ПараметрыСеанса.ТекущийПользователь Тогда
		 
			мОбновлятьСписокАвтоОбмена = Истина;
			
		КонецЕсли;
		
	КонецЕсли; 
		
	// если в настройке указано, что нужно автоматически производить обмен данными
	// но не установлена константа автоматического обмена данными в системе то предупредим его
	
	ПоНастройкеЕстьАвтообмен = ОпределитьПоНастройкеРедактированияОнаДляАвтообмена();
	
	Если ПоНастройкеЕстьАвтообмен Тогда
		
		КонстантаАвтоматическогоВыполненияОбменов = ПараметрыСеанса.ТекущаяИБ.ИспользоватьМеханизмАвтоматическогоОбменаДанными;
				
		Если Не КонстантаАвтоматическогоВыполненияОбменов Тогда 
			
			//Сообщить("Не установлен параметр ""Использовать механизм автоматического обмена данными"" в справочнике ""Информационные базы"". Обмен данными по событиям выполняться не будет!", СтатусСообщения.ОченьВажное);
			ТекстСообщения = "Не установлен параметр ""Использовать механизм автоматического обмена данными"" в справочнике ""Информационные базы"". Обмен данными по событиям выполняться не будет!";
			УстановкаПараметровАвтообменаДляИБ(ТекстСообщения);
			
		КонецЕсли;
								
	КонецЕсли;
	
	ЭтоФайловаяИБ = ПроцедурыОбменаДанными.ОпределитьЭтаИнформационнаяБазаФайловая();
	
	Если ЭтоФайловаяИБ Тогда
		
		ПользовательДляВыполненияРеглЗаданий = ПараметрыСеанса.ТекущаяИБ.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте;
		
		Если Не ЗначениеЗаполнено(ПользовательДляВыполненияРеглЗаданий) Тогда
			
			//	Сообщить("Не установлен параметр ""Пользователь, для выполнения регламентных заданий в файловом режиме""  в справочнике ""Информационные базы"". Периодический обмен выполняться не будет!", СтатусСообщения.ОченьВажное);	
			ТекстСообщения = "Не установлен параметр ""Пользователь, для выполнения регламентных заданий в файловом режиме""  в справочнике ""Информационные базы"". Периодический обмен выполняться не будет!";
			Если ЗначениеЗаполнено(ПользовательАвтообменаИБ) Тогда
				УстановкаПараметровАвтообменаДляИБ(ТекстСообщения);
			Иначе	
				Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
            КонецЕсли;	
									
		КонецЕсли;
		               
	КонецЕсли;
	
	// для помеченной на удаление настройки обмен автоматически не производится
	Если (ПоНастройкеЕстьАвтообмен ИЛИ ИспользоватьРегламентныеЗадания)
		И ПометкаУдаления Тогда
			
		Сообщить("Настройка помечена на удаление. Автоматический обмен по ней производится не будет!", СтатусСообщения.Важное);	
					
	КонецЕсли;
		
	// предложим создать каталог обмена если его не обнаружили
	Если ЭтоНовый()
		И ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс И 
		Не ПустаяСтрока(КаталогОбменаИнформацией) Тогда
		
		// существует ли указанный каталог обмена данными
		РаботаСФайлами.ПроверитьСуществованиеКаталога(КаталогОбменаИнформацией);
		
	КонецЕсли;
	
	// очищаем каталог отслеживания видимости
	Если Не ПриИзмененииВидимостиКаталога
		И Не ПустаяСтрока(КаталогПроверкиДоступности) Тогда
		
		КаталогПроверкиДоступности = "";
		
	КонецЕсли;
	
	Если Не ФлажокВыполнятьАвтообменПриВидимостиКаталога Тогда
		НаличиеКаталогаДляЗапускаАвтообмена = "";
	КонецЕсли;
	
	Если Не ФлажокВыполнятьАвтообменПриНЕВидимостиКаталога Тогда
		ОтсутствиеКаталогаДляЗапускаАвтообмена = "";
	КонецЕсли;
	
КонецПроцедуры

// Установка автообмена в справочнике ИБ
//
Процедура УстановкаПараметровАвтообменаДляИБ(ТекстСообщения)
	
	ТекстВопроса = ТекстСообщения + Символы.ПС + "Установить данный параметр?";
	ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Сообщить(ТекстСообщения, СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = "В справочнике ""Информационные базы"" для базы " + ПараметрыСеанса.ТекущаяИБ.Наименование + ":";
	
	ТекОбъект = ПараметрыСеанса.ТекущаяИБ.ПолучитьОбъект();
	Если НЕ ТекОбъект.ИспользоватьМеханизмАвтоматическогоОбменаДанными Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Установлен параметр ""Использовать механизм автоматического обмена данными"".";
		ТекОбъект.ИспользоватьМеханизмАвтоматическогоОбменаДанными	= Истина;
	КонецЕсли;	
	
	ТекОбъект.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте	= ?(ИнтервалПовторенияОбмена > 60 , ИнтервалПовторенияОбмена, 60);
	
	Если ТекОбъект.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте <> ПользовательАвтообменаИБ Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + "Изменен параметр ""Пользователь, для выполнения регламентных заданий в файловом режиме"" с """ + 
		ТекОбъект.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте + """ на """ + ПользовательАвтообменаИБ + """.";
		ТекОбъект.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте	= ПользовательАвтообменаИБ;
	КонецЕсли;	

	ТекОбъект.Записать();
	
	//ТекстСообщения = "В справочнике ""Информационные базы"" для базы " + ПараметрыСеанса.ТекущаяИБ.Наименование + ":" + Символы.ПС + "Установлен параметр ""Использовать механизм автоматического обмена данными""." + 
	//?(ЗначениеЗаполнено(ПользовательАвтообменаИБ), Символы.ПС + "Установлен параметр ""Пользователь, для выполнения регламентных заданий в файловом режиме"" значение: """ + ПользовательАвтообменаИБ + """.", "");
	Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
	
КонецПроцедуры	

// при нажатии на "Открытие" у каталога обмена данными
Процедура КаталогОбменаИнформациейОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении флажка архивация при записи изменений
Процедура ВыполнятьАрхивациюФайловОбменаПриИзменении(Элемент)
	
	УстановитьДоступностьАрхивацииФайловПриОтправке();
	
КонецПроцедуры

// при нажатии на кнопку проверить FTP соединение
Процедура ПроверитьНажатие(Элемент)
	
	РезультатПроверки = ПроцедурыОбменаДанными.ПроверитьНастройкиFTPПодключения(ЭтотОбъект);
	
	Если РезультатПроверки Тогда
		Предупреждение("Проверка успешно пройдена !" , 30, "Проверка FTP подключения");
	Иначе
		Предупреждение("Возникли ошибки при подключении !", 30, "Проверка FTP подключения");
	КонецЕсли;
	
КонецПроцедуры


// открытие каталога FTP
Процедура FTPАдресОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение("ftp://" + ПроцедурыОбменаДанными.НормализоватьFTPАдрес(Элемент.Значение));
	
КонецПроцедуры

// при изменении доступности каталога
Процедура КаталогПроверкиДоступностиПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
			
КонецПроцедуры

// при начале выбора каталога проверки доступности
Процедура КаталогПроверкиДоступностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработчикФайлаНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при открытии каталога доступности
Процедура КаталогПроверкиДоступностиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении флажка каталога отслеживания изменений видимости
Процедура ПриИзмененииВидимостиКаталогаПриИзменении(Элемент)
	
	УстановитьДоступностьРедактированияКаталогаОтслеживанияВидимости();
	
	Если ПриИзмененииВидимостиКаталога 
		И ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс
		И ПустаяСтрока(КаталогПроверкиДоступности) Тогда
		
		КаталогПроверкиДоступности = КаталогОбменаИнформацией;
		
	КонецЕсли;
	
КонецПроцедуры


// при изменении каталога Наличие для автообмена
Процедура НаличиеКаталогаДляЗапускаАвтообменаПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
	
КонецПроцедуры

// начало выбора каталога Наличие для автообмена
Процедура НаличиеКаталогаДляЗапускаАвтообменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// открытие каталога Наличие для автообмена
Процедура НаличиеКаталогаДляЗапускаАвтообменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении каталога Отсутствие для автообмена
Процедура ОтсутствиеКаталогаДляЗапускаАвтообменаПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
	
КонецПроцедуры

// начало выбора каталога Отсутствие для автообмена
Процедура ОтсутствиеКаталогаДляЗапускаАвтообменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// открытие каталога Отсутствие для автообмена
Процедура ОтсутствиеКаталогаДляЗапускаАвтообменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении флажка редактирования каталога видимости каталога для выполнения автообмена
Процедура ФлажокВыполнятьАвтообменПриВидимостиКаталогаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовДопОграниченияДляАвтообмена();
	
	Если ФлажокВыполнятьАвтообменПриВидимостиКаталога 
		И ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс
		И ПустаяСтрока(НаличиеКаталогаДляЗапускаАвтообмена) Тогда
		
		НаличиеКаталогаДляЗапускаАвтообмена = КаталогОбменаИнформацией;
		
	КонецЕсли;
	
КонецПроцедуры

// при изменении флажка редактирования каталога НЕ видимости каталога для выполнения автообмена
Процедура ФлажокВыполнятьАвтообменПриНЕВидимостиКаталогаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовДопОграниченияДляАвтообмена();
	
КонецПроцедуры

//Процедура управляет доступность элемента 
Процедура ОбновитьДоступностьАвтообмена()
	
	ЭлементыФормы.НастройкаРегламентногоЗадания.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Доступность = ИспользоватьРегламентныеЗадания;
	
	ВидимостьНастроекАвтообмена = НЕ ВидАвтообмена = Перечисления.ВидыАвтоматическогоОбменаДанными.ТолькоВручную;
	
	ЭлементыФормы.РамкаВидАвтообменаФайловыйРежим.Видимость	= ВидимостьНастроекАвтообмена;
	ЭлементыФормы.НадписьПользовательАвтообменаИБ.Видимость	= ВидимостьНастроекАвтообмена;
	ЭлементыФормы.НадписьПовторятьОбменЧерез.Видимость		= ВидимостьНастроекАвтообмена;
	ЭлементыФормы.НадписьСекунд.Видимость					= ВидимостьНастроекАвтообмена;
	ЭлементыФормы.Пользователь.Видимость					= ВидимостьНастроекАвтообмена;
	ЭлементыФормы.ИнтервалПовторенияОбмена.Видимость		= ВидимостьНастроекАвтообмена;
	
КонецПроцедуры

//Процедура-обработчик события Нажатие элемента формы НадписьНастройкаРегламентногоЗадания.
//
Процедура НадписьНастройкаРегламентногоЗаданияНажатие(Элемент)
	
	Если мРегламентноеЗадание = Неопределено Тогда
	
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
			
	КонецЕсли;
	
	Диалог = ПолучитьОбщуюФорму("ДиалогРегламентногоЗадания");
	Диалог.РегламентноеЗадание = мРегламентноеЗадание;
	Диалог.Наименование = Наименование;
	Диалог.МетаданныеВыбор = "ЗаданиеАвтономноеРешение";
	
	Если Диалог.ОткрытьМодально() <> Истина Тогда
		
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
				
	Иначе
		
		Модифицированность = Истина;
		мРегламентноеЗадание = Диалог.РегламентноеЗадание;
				
	КонецЕсли;	
	
	Если мРегламентноеЗадание <> Неопределено Тогда
		
		РегламентноеЗадание = Строка(мРегламентноеЗадание.УникальныйИдентификатор);
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();
	ПередатьРасписаниеРегламентногоЗаданияВФорму(мРегламентноеЗадание);
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы "ПротоколПроксиFTP".
//
Процедура ПротоколПроксиFTPПриИзменении(Элемент)
	
	ПротоколПроксиFTP = СокрЛП(ПротоколПроксиFTP);
	
	Если ПустаяСтрока(ПротоколПроксиFTP) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПротокола = Врег(ПротоколПроксиFTP);
	
	Если НЕ (ИмяПротокола = "HTTP" ИЛИ ИмяПротокола = "HTTPS" ИЛИ ИмяПротокола = "FTP") Тогда
					
		СообщитьОбОшибке("Указан не допустимый для использования протокол. 
			|Допустимые для использования протоколы прокси-сервера: http, https и ftp.");
									
	КонецЕсли;				
		
КонецПроцедуры


//Процедура-обработчик события При Изменении переключателя ВидаАвтообмена.
//
Процедура ПереключательВидАвтообменаПриИзменении(Элемент)
	
	Если ПереключательВидАвтообмена = 0 Тогда
		ВидАвтообмена = Перечисления.ВидыАвтоматическогоОбменаДанными.ПоРасписанию;
		КаждыйЗапускПрограммы = Ложь;
		КаждоеЗавершениеРаботыСПрограммой = Ложь;
		ПриИзмененииВидимостиКаталога = Ложь;
		ИспользоватьРегламентныеЗадания = Истина;
	ИначеЕсли ПереключательВидАвтообмена = 1 Тогда
		ВидАвтообмена = Перечисления.ВидыАвтоматическогоОбменаДанными.ПоСобытиям;
		ИспользоватьРегламентныеЗадания = Ложь;
	Иначе
		ВидАвтообмена = Перечисления.ВидыАвтоматическогоОбменаДанными.ТолькоВручную;
		КаждыйЗапускПрограммы = Ложь;
		КаждоеЗавершениеРаботыСПрограммой = Ложь;
		ПриИзмененииВидимостиКаталога = Ложь;
		ИспользоватьРегламентныеЗадания = Ложь;
	КонецЕсли;
	ОбновитьДоступностьАвтообмена();
КонецПроцедуры

//Процедура управляет переключением страниц.
//
Процедура УправлениеСтраницами()
	
		
	Если мНомерТекущейСтраницы < 1 ИЛИ мНомерТекущейСтраницы > 6 Тогда
		мНомерТекущейСтраницы = 1;
	КонецЕсли;
		
	Если мНомерТекущейСтраницы = 1 Тогда
		ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.ОтправкаИПриемСообщений;
		УстановитьШрифтНадписи("НадписьОсновныеНастройки");	
	ИначеЕсли мНомерТекущейСтраницы = 2 Тогда
		ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.ТипОбмена;
		УстановитьШрифтНадписи("НадписьТипОбмена");	
	ИначеЕсли мНомерТекущейСтраницы = 3 Тогда
		ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.СтраницаВидАвтообмена;
		УстановитьШрифтНадписи("НадписьВидАвтообмена1");	
	ИначеЕсли мНомерТекущейСтраницы = 4 Тогда
		Если ПереключательВидАвтообмена = 0 Тогда
			ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.НастройкиОбменаПоРасписанию;	
			УстановитьШрифтНадписи("НадписьНастройкаАвтообмена");	
		ИначеЕсли ПереключательВидАвтообмена = 1 ТОгда
			ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.НастройкиОбменаПоСобытиям;	
			УстановитьШрифтНадписи("НадписьНастройкаАвтообмена");		
		Иначе
			ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.Дополнительно;
			УстановитьШрифтНадписи("НадписьСохранениеНастройки");
		КонецЕсли;
		//УстановитьШрифтНадписи("НадписьНастройкаАвтообмена");	
	ИначеЕсли мНомерТекущейСтраницы = 5 Тогда
		ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.ДополнительнаяНастройкаАвтообмена;
		УстановитьШрифтНадписи("НадписьДополнительнаяНастройка");
	ИначеЕсли мНомерТекущейСтраницы = 6 Тогда
		ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.Дополнительно;	
		УстановитьШрифтНадписи("НадписьСохранениеНастройки");	
	КонецЕсли;
	
	Если мНомерТекущейСтраницы = 1 Тогда
		
		ЭлементыФормы.ГиперссылкаНазад.Доступность = Ложь;
		ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
	ИначеЕсли мНомерТекущейСтраницы = 6 Тогда
		ЭлементыФормы.ГиперссылкаНазад.Доступность = Истина;
		//ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
		
	Иначе
		ЭлементыФормы.ГиперссылкаНазад.Доступность = Истина;
		ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница.Имя = "Дополнительно" Тогда
		ЭлементыФормы.ГиперссылкаВперед.Заголовок = "Готово";
	Иначе
		ЭлементыФормы.ГиперссылкаВперед.Заголовок = "Далее";
	КонецЕсли;

	
КонецПроцедуры

//Процедура-обработчик нажатия на гиперссылку "Назад".
//
Процедура ГиперссылкаНазадНажатие(Элемент)
	
	Если ПереключательВидАвтообмена = 2 
		И ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница  = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.Дополнительно Тогда
		мНомерТекущейСтраницы = мНомерТекущейСтраницы - 3;
	Иначе
		мНомерТекущейСтраницы = мНомерТекущейСтраницы - 1;
	КонецЕсли;
	УправлениеСтраницами();
	
КонецПроцедуры

//Процедура-обработчик нажатия на гипер-ссылку "Вперед".
//
Процедура ГиперссылкаВпередНажатие(Элемент)
	
	Если ЭлементыФормы.ГиперссылкаВперед.Заголовок = "Готово" ТОгда
		
		Если ЗаписатьНастройкуВФорме() ТОгда
			Записать();
			Закрыть();
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	//мНомерТекущейСтраницы = мНомерТекущейСтраницы + 1;
		Если ПереключательВидАвтообмена = 2 
		И ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница  = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.СтраницаВидАвтообмена Тогда
		мНомерТекущейСтраницы = мНомерТекущейСтраницы + 3;
	Иначе
		мНомерТекущейСтраницы = мНомерТекущейСтраницы + 1;
	КонецЕсли;

	УправлениеСтраницами();
	
КонецПроцедуры

//Процедура управляет жирностью шрифта в списке страниц.
//
Процедура УстановитьШрифтНадписи(ИмяНадписи)
	
	ЭлементыФормы.НадписьОсновныеНастройки.Шрифт       = Новый Шрифт(ЭлементыФормы.НадписьОсновныеНастройки.Шрифт,,,Ложь); 
	ЭлементыФормы.НадписьВидАвтообмена1.Шрифт          = Новый Шрифт(ЭлементыФормы.НадписьВидАвтообмена1.Шрифт,,,Ложь); 
	ЭлементыФормы.НадписьТипОбмена.Шрифт               = Новый Шрифт(ЭлементыФормы.НадписьТипОбмена.Шрифт,,,Ложь); 
	ЭлементыФормы.НадписьДополнительнаяНастройка.Шрифт = Новый Шрифт(ЭлементыФормы.НадписьДополнительнаяНастройка.Шрифт,,,Ложь); 
	ЭлементыФормы.НадписьНастройкаАвтообмена.Шрифт     = Новый Шрифт(ЭлементыФормы.НадписьНастройкаАвтообмена.Шрифт,,,Ложь); 
	ЭлементыФормы.НадписьСохранениеНастройки.Шрифт     = Новый Шрифт(ЭлементыФормы.НадписьСохранениеНастройки.Шрифт,,,Ложь);
	ЭлементыФормы[ИмяНадписи].Шрифт                    = Новый Шрифт(ЭлементыФормы[ИмяНадписи].Шрифт,,,Истина);
	
КонецПроцедуры

//Функция записывает элемент в форме.
//
Функция ЗаписатьНастройкуВФорме()
	
	Попытка
		Возврат ЗаписатьВФорме();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

//Процедура обновляет расписание регламентного задания при его изменении.
//
Процедура ОбновитьРасписаниеРегламентногоЗадания()
	
	Если мРегламентноеЗадание = Неопределено Тогда
		
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
		
	КонецЕсли;
	
	Если мРегламентноеЗадание = Неопределено Тогда
		
		мРегламентноеЗадание = РегламентныеЗадания.СоздатьРегламентноеЗадание("ЗаданиеАвтономноеРешение");
		
		мРегламентноеЗадание.Наименование = Наименование;
		мРегламентноеЗадание.Использование = Истина;
		
	КонецЕсли;
	
	мРегламентноеЗадание.Расписание.ВремяНачала       = ВремяНачала;
	мРегламентноеЗадание.Расписание.ВремяКонца        = ВремяКонца;
	мРегламентноеЗадание.Расписание.ПериодПовтораДней = 1;
	мРегламентноеЗадание.Расписание.ПериодПовтораВТечениеДня = ИнтервалПовторения*3600;
	
	МассивДнейНедели = новый Массив();
	Если флПонедельник ТОгда
		МассивДнейНедели.Добавить(1);
	КонецЕсли;
	Если флВторник ТОгда
		МассивДнейНедели.Добавить(2);
	КонецЕсли;
	Если флСреда ТОгда
		МассивДнейНедели.Добавить(3);
	КонецЕсли;
	Если флЧетверг ТОгда
		МассивДнейНедели.Добавить(4);
	КонецЕсли;
	Если флПятница ТОгда
		МассивДнейНедели.Добавить(5);
	КонецЕсли;
	Если флСуббота ТОгда
		МассивДнейНедели.Добавить(6);
	КонецЕсли;
	Если флВоскресенье ТОгда
		МассивДнейНедели.Добавить(7);
	КонецЕсли;
	
	мРегламентноеЗадание.Расписание.ДниНедели  = МассивДнейНедели;
	мРегламентноеЗадание.Записать();
	РегламентноеЗадание = Строка(мРегламентноеЗадание.УникальныйИдентификатор);
	УстановитьТекстНадписиРегламентнойНастройки();
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы ВремяНачала.
//
Процедура ВремяНачалаПриИзменении(Элемент)
	
	ОбновитьРасписаниеРегламентногоЗадания();
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы ВремяОкончания.
//
Процедура ВремяОкончанияПриИзменении(Элемент)
	
	ОбновитьРасписаниеРегламентногоЗадания();
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы ИнтервалПовторения.
//
Процедура ИнтервалПовторенияПриИзменении(Элемент)
	
	ОбновитьРасписаниеРегламентногоЗадания();
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы флПонедельник.
//
Процедура флПонедельникПриИзменении(Элемент)
	
	ОбновитьРасписаниеРегламентногоЗадания();
	ПроверитьЗаполнениеРасписания(флПонедельник);
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы флВторник.
//
Процедура флВторникПриИзменении(Элемент)
	
	ОбновитьРасписаниеРегламентногоЗадания();
	ПроверитьЗаполнениеРасписания(флВторник);
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы флСреда.
//
Процедура флСредаПриИзменении(Элемент)
	
	ОбновитьРасписаниеРегламентногоЗадания();
	ПроверитьЗаполнениеРасписания(флСреда);
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы флЧетверг.
//
Процедура флЧетвергПриИзменении(Элемент)
	
	ОбновитьРасписаниеРегламентногоЗадания();
	ПроверитьЗаполнениеРасписания(флЧетверг);
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы флПятница.
//
Процедура флПятницаПриИзменении(Элемент)
	
	ОбновитьРасписаниеРегламентногоЗадания();
	ПроверитьЗаполнениеРасписания(флПятница);
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы флСуббота.
//
Процедура флСубботаПриИзменении(Элемент)
	
	ОбновитьРасписаниеРегламентногоЗадания();
	ПроверитьЗаполнениеРасписания(флСуббота);
	
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" элемента формы флВоскресенье.
//
Процедура флВоскресеньеПриИзменении(Элемент)
	
	ОбновитьРасписаниеРегламентногоЗадания();
	ПроверитьЗаполнениеРасписания(флВоскресенье);
	
КонецПроцедуры

//Обработчик события Нажатие кнопки "Далее".
//
Процедура ДалееНажатие(Элемент)
	
	Если ЭлементыФормы.ГиперссылкаВперед.Доступность ТОгда
		Если ЭлементыФормы.ГиперссылкаВперед.Заголовок = "Готово" ТОгда
			
			Если ЗаписатьНастройкуВФорме() ТОгда
				Записать();
				Закрыть();
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПереключательВидАвтообмена = 2 
			И ЭлементыФормы.ПанельНастройкиОбмена.ТекущаяСтраница  = ЭлементыФормы.ПанельНастройкиОбмена.Страницы.СтраницаВидАвтообмена Тогда
			мНомерТекущейСтраницы = мНомерТекущейСтраницы + 3;
		Иначе
			мНомерТекущейСтраницы = мНомерТекущейСтраницы + 1;
		КонецЕсли;
		
		УправлениеСтраницами();
	КонецЕсли;
	
КонецПроцедуры


мОбновлятьСписокАвтоОбмена = Ложь;
мРегламентноеЗадание = Неопределено;

мЖирныйШрифт = Новый Шрифт(,,Истина);
мОбычныйШрифт = Новый Шрифт();

мНомерТекущейСтраницы = 1;

