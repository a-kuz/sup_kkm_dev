// Таблица значений, содержащая свойства различных видов обработок.
Перем СвойстваОбработок;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заполняет дерево значений метаданными.
//
Процедура ЗаполнитьДеревоМетаданных()
	
	ДеревоОбластьДействияОбработки.Строки.Очистить();
	
	//Заполняем ветку "Документы".
	СтрокаДереваЗначений = ДеревоОбластьДействияОбработки.Строки.Добавить();
	СтрокаДереваЗначений.Пометка = Ложь;
	СтрокаДереваЗначений.ПредставлениеМетаданных = "Документы";
	
	Для Каждого Документ Из Метаданные.Документы Цикл
		СтрокаВторогоУровня = СтрокаДереваЗначений.Строки.Добавить();
		СтрокаВторогоУровня.Пометка = Ложь;
		СтрокаВторогоУровня.ПредставлениеМетаданных = Документ.Синоним;
		СтрокаВторогоУровня.ИмяМетаданных = Документ.ПолноеИмя();
		
	КонецЦикла;
	
	//Если ВидОбработки <> Перечисления.ВидыОбработок.Действие Тогда
		
		//Заполняем ветку "Справочники".
		СтрокаДереваЗначений = ДеревоОбластьДействияОбработки.Строки.Добавить();
		СтрокаДереваЗначений.Пометка = Ложь;
		СтрокаДереваЗначений.ПредставлениеМетаданных = "Справочники";
		
		Для Каждого Справочник Из Метаданные.Справочники Цикл
			СтрокаВторогоУровня = СтрокаДереваЗначений.Строки.Добавить();
			СтрокаВторогоУровня.Пометка = Ложь;
			СтрокаВторогоУровня.ПредставлениеМетаданных = Справочник.Синоним;
			СтрокаВторогоУровня.ИмяМетаданных = Справочник.ПолноеИмя();
			
		КонецЦикла;
		
		//Заполняем ветку "Регистры сведений".
		СтрокаДереваЗначений = ДеревоОбластьДействияОбработки.Строки.Добавить();
		СтрокаДереваЗначений.Пометка = Ложь;
		СтрокаДереваЗначений.ПредставлениеМетаданных = "Регистры сведений";
		
		Для Каждого РегистрСведений Из Метаданные.РегистрыСведений Цикл
			СтрокаВторогоУровня = СтрокаДереваЗначений.Строки.Добавить();
			СтрокаВторогоУровня.Пометка = Ложь;
			СтрокаВторогоУровня.ПредставлениеМетаданных = РегистрСведений.Синоним;
			СтрокаВторогоУровня.ИмяМетаданных = РегистрСведений.ПолноеИмя();
			
		КонецЦикла;
		
		//Заполняем ветку "Регистры накопления".
		СтрокаДереваЗначений = ДеревоОбластьДействияОбработки.Строки.Добавить();
		СтрокаДереваЗначений.Пометка = Ложь;
		СтрокаДереваЗначений.ПредставлениеМетаданных = "Регистры накопления";
		
		Для Каждого РегистрНакопления Из Метаданные.РегистрыНакопления Цикл
			СтрокаВторогоУровня = СтрокаДереваЗначений.Строки.Добавить();
			СтрокаВторогоУровня.Пометка = Ложь;
			СтрокаВторогоУровня.ПредставлениеМетаданных = РегистрНакопления.Синоним;
			СтрокаВторогоУровня.ИмяМетаданных = РегистрНакопления.ПолноеИмя();
			
		КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

// Изменяет пометки в зависимости от того выбраны все пометки или нет.
//
//Параметры:
//	ТекущаяСтрокаДереваМетаданных - текущая строка дерева метаданных.
//
Процедура ИзменитьПометкиВДеревеМетаданных(ТекущаяСтрокаДереваМетаданных)
	
	Если ТекущаяСтрокаДереваМетаданных.Родитель = Неопределено Тогда
		
		ТекущаяСтрокаДереваМетаданных.Пометка = ?(ТекущаяСтрокаДереваМетаданных.Пометка = 1, 1, 0);
		
		Для Каждого СтрокаДереваЗначений Из ТекущаяСтрокаДереваМетаданных.Строки Цикл
			СтрокаДереваЗначений.Пометка = ТекущаяСтрокаДереваМетаданных.Пометка;
			
		КонецЦикла;
		
	Иначе
		
		ТекущаяСтрокаДереваМетаданных.Пометка = ?(ТекущаяСтрокаДереваМетаданных.Пометка = 1, 1, 0);
		
		КоличествоВыбранныхПометок = 0;
		
		Для Каждого СтрокаДереваЗначений Из ТекущаяСтрокаДереваМетаданных.Родитель.Строки Цикл
			Если СтрокаДереваЗначений.Пометка Тогда
				КоличествоВыбранныхПометок = КоличествоВыбранныхПометок + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоВыбранныхПометок = 0 Тогда
			ТекущаяСтрокаДереваМетаданных.Родитель.Пометка = 0;
		ИначеЕсли КоличествоВыбранныхПометок = ТекущаяСтрокаДереваМетаданных.Родитель.Строки.Количество() Тогда
			ТекущаяСтрокаДереваМетаданных.Родитель.Пометка = 1;
		Иначе
			ТекущаяСтрокаДереваМетаданных.Родитель.Пометка = 2;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает список метаданных, на которые действует обработка.
//
Процедура ВосстановитьОбластьДействияОбработки()
	
	Для Каждого СтрокаОбластиДействия Из ОбластьДействияОбработки Цикл
		
		ОбластьДействия = ДеревоОбластьДействияОбработки.Строки.Найти(СтрокаОбластиДействия.ИмяМетаданных, "ИмяМетаданных", Истина);
		
		Если ОбластьДействия <> Неопределено Тогда
			ОбластьДействия.Пометка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// берем по 1 элементу из каждого подуровня и анализируем пометки.
	Для Каждого СтрокаДереваМетаданныхПервогоУровня Из ДеревоОбластьДействияОбработки.Строки Цикл
		ИзменитьПометкиВДеревеМетаданных(СтрокаДереваМетаданныхПервогоУровня.Строки[0]);
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет список метаданных, на которые действует обработка.
//
Процедура СохранитьОбластьДействияОбработки()
	
	ОбластьДействияОбработки.Очистить();
	
	Строка = СвойстваОбработок.Найти(ВидОбработки, "ВидОбработки");
	Если Строка.ЗаданиеОбластиДействия Тогда
		
		Для Каждого СтрокаДереваМетаданныхПервогоУровня Из ДеревоОбластьДействияОбработки.Строки Цикл
			
			// записываем значения нижних уровней.
			Для Каждого СтрокаДереваМетаданныхВторогоУровня Из СтрокаДереваМетаданныхПервогоУровня.Строки Цикл
				
				Если СтрокаДереваМетаданныхВторогоУровня.Пометка Тогда
					НоваяОбласть = ОбластьДействияОбработки.Добавить();
					НоваяОбласть.ИмяМетаданных = СтрокаДереваМетаданныхВторогоУровня.ИмяМетаданных;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПриОткрытии".
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		ПутьДоОбработки = "<путь до обработки не задан>";
		ВидОбработки = ?(ЗначениеЗаполнено(ВидОбработки) = Ложь, Перечисления.ВидыОбработок.ВнешняяОбработка, ВидОбработки);
	КонецЕсли;
	
	Строка = СвойстваОбработок.Найти(ВидОбработки, "ВидОбработки");
	
	Если Не Строка.ЗаданиеОбластиДействия Тогда
		
		ЭлементыФормы.ДеревоОбластьДействияОбработки.Доступность = Ложь;
		
	Иначе	
		
		ЭлементыФормы.ДеревоОбластьДействияОбработки.Доступность = Истина;
		ЗаполнитьДеревоМетаданных();
		
		Если НЕ ЭтоНовый() Тогда
			ВосстановитьОбластьДействияОбработки();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "Перед записью".
//
Процедура ПередЗаписью(Отказ)
	
	СохранитьОбластьДействияОбработки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Обработчик события "ПриИзменении" поля "ВидОбработки".
//
Процедура ВидОбработкиПриИзменении(Элемент)
	
	Строка = СвойстваОбработок.Найти(ВидОбработки, "ВидОбработки");
	Если Не Строка.ЗаданиеОбластиДействия Тогда
		
		ЭлементыФормы.ДеревоОбластьДействияОбработки.Доступность = Ложь;
		ДеревоОбластьДействияОбработки.Строки.Очистить();
		
	Иначе	
		
		ЭлементыФормы.ДеревоОбластьДействияОбработки.Доступность = Истина;
		ЗаполнитьДеревоМетаданных();
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "Очистка" поля "ВидОбработки".
//
Процедура ВидОбработкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события "Нажатие" гиперссылки НадписьОбработка.
//
Процедура ОбработкаНажатие(Элемент)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	Строка = СвойстваОбработок.Найти(ВидОбработки, "ВидОбработки");
	Если Не Строка.Макет Тогда
		Если Строка.ВидОбработки = Перечисления.ВидыОбработок.ВнешнийОтчет Тогда
			ДиалогОткрытияФайла.Фильтр = "Внешние отчеты(*.erf)|*.erf|Все файлы (*.*)|*.*";
		Иначе
			ДиалогОткрытияФайла.Фильтр = "Внешние обработки(*.epf)|*.epf|Все файлы (*.*)|*.*";
		КонецЕсли;
	Иначе
		ДиалогОткрытияФайла.Фильтр = "Табличный документ(*.mxl)|*.mxl|Все файлы (*.*)|*.*";
	КОнецЕсли;
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		ПутьДоОбработки = ДиалогОткрытияФайла.ВыбранныеФайлы[0];
		
		Попытка
			ДвоичноеПредставлениеОбработки = Новый ДвоичныеДанные(ПутьДоОбработки);
		Исключение
			Сообщить("Ошибка открытия файла.", СтатусСообщения.Важное);
		КонецПопытки;
		
		ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичноеПредставлениеОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриИзмененииФлажка" дерева значений.
//
Процедура ДеревоОбластьДействияОбработкиПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ИзменитьПометкиВДеревеМетаданных(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события "Нажатие" кнопки Сохранить
//
Процедура СохранитьНажатие(Элемент)
	
	Если ЭтоНовый() Тогда
		Предупреждение("Перед сохранением обработки в файл элемент надо записать!");
		Возврат;
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Строка = СвойстваОбработок.Найти(ВидОбработки, "ВидОбработки");
	Если Не Строка.Макет Тогда
		ДиалогСохраненияФайла.Фильтр = "Внешние обработки(*.epf)|*.epf|Все файлы (*.*)|*.*";
	Иначе
		ДиалогСохраненияФайла.Фильтр = "Табличный документ(*.mxl)|*.mxl|Все файлы (*.*)|*.*";
	КонецЕсли;
	
	Если ДиалогСохраненияФайла.Выбрать() Тогда
		
		ПутьСохраненияОбработки = ДиалогСохраненияФайла.ВыбранныеФайлы[0];
		ДвоичноеПредставлениеОбработки = Ссылка.ХранилищеОбработки.Получить();
		
		Попытка
			ДвоичноеПредставлениеОбработки.Записать(ПутьСохраненияОбработки);
		Исключение
			Сообщить("Ошибка записи данных в файл.", СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" поля ВидОбработки.
//
Процедура ВидОбработкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//СписокЗначений = Новый СписокЗначений;
	//СписокЗначений.Добавить(Перечисления.ВидыОбработок.ПечатнаяФорма);
	//
	//ЗначениеВыбора = ВыбратьИзМеню(СписокЗначений, Элемент);
	//
	//Если ЗначениеВыбора <> Неопределено Тогда
	//	Элемент.Значение = ЗначениеВыбора.Значение;
	//КонецЕсли;

КонецПроцедуры


СвойстваОбработок = Новый ТаблицаЗначений;
СвойстваОбработок.Колонки.Добавить("ВидОбработки"          , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОбработок"));
// Область действия обработки задается пользователем
СвойстваОбработок.Колонки.Добавить("ЗаданиеОбластиДействия", Новый ОписаниеТипов("Булево"));
// Подключаемая обработка - макет
СвойстваОбработок.Колонки.Добавить("Макет"                 , Новый ОписаниеТипов("Булево"));

Свойство = СвойстваОбработок.Добавить();
Свойство.ВидОбработки           = Перечисления.ВидыОбработок.ВнешняяОбработка;
Свойство.ЗаданиеОбластиДействия = Ложь;
Свойство.Макет                  = Ложь;

Свойство = СвойстваОбработок.Добавить();
Свойство.ВидОбработки           = Перечисления.ВидыОбработок.ВнешнийОтчет;
Свойство.ЗаданиеОбластиДействия = Ложь;
Свойство.Макет                  = Ложь;

//Свойство = СвойстваОбработок.Добавить();
//Свойство.ВидОбработки           = Перечисления.ВидыОбработок.Действие;
//Свойство.ЗаданиеОбластиДействия = Истина;
//Свойство.Макет                  = Ложь;

Свойство = СвойстваОбработок.Добавить();
Свойство.ВидОбработки           = Перечисления.ВидыОбработок.ПечатнаяФорма;
Свойство.ЗаданиеОбластиДействия = Истина;
Свойство.Макет                  = Ложь;