
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	КаталогТоваров = Справочники.КаталогиТоваров.Мяснов;
	КатегорияБлюд = Константы.ОсновнаяКатегорияТоваров.Получить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ЗакрытьНажатие(Элемент)
	Закрыть();
КонецПроцедуры

Процедура ЗаполнитьНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(КаталогТоваров) Тогда
		Сообщить("Не заполнен Каталог товаров!", СтатусСообщения.Важное);
		Возврат;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ГруппаПечати) Тогда
		Сообщить("Не заполнена Группа печати!", СтатусСообщения.Важное);
		Возврат;	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КатегорияБлюд) Тогда
		Сообщить("Не заполнена Категория блюд!", СтатусСообщения.Важное);
		Возврат;	
	КонецЕсли;
	
	Если Вопрос("Заполнить справочник ""Меню"" по заданным условиям?", РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.Ок Тогда
		ЗаполнитьТовары();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МОДУЛЯ

Процедура ЗаполнитьТовары() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура
	|ГДЕ
	|	Ссылка В ИЕРАРХИИ (&ГруппаНоменклатуры)
	|	И НЕ ПометкаУдаления И Не ЭтоГруппа
	|");
	
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		ОбновитьТоварПоНоменклатуре(Выборка.Ссылка);	
	КонецЦикла;
	
	
	ЗафиксироватьТранзакцию();
	
	Сообщить("Обработка закончена!")
	
КонецПроцедуры
 
Функция ОбновитьТоварПоНоменклатуре(Номенклатура)
	
	Сообщить("Обрабатывается элемент - " + Номенклатура);
	
	Товар = НайтиТоварПоНоменклатуре(Номенклатура);
	
	ЭтоНовыйТовар = Истина;
	Если ЗначениеЗаполнено(Товар) Тогда
		Товар = Товар.ПолучитьОбъект();
		ЭтоНовыйТовар = Ложь;
	Иначе
		Товар = Справочники.Товары.СоздатьЭлемент();
		Товар.Владелец				= КаталогТоваров;
		Если не НеСоздаватьРодителя тогда
			Товар.Родитель				= НайтиРодителя(Номенклатура.Родитель);
		КонецЕсли;
		Товар.Номенклатура			= Номенклатура;
		Товар.ВариантПечати			= 511;	// все колонки
		Товар.КратностьКоличества	= ?(Номенклатура.КратностьКоличества=0,1,Номенклатура.КратностьКоличества);
		Товар.ЗапросКоличества		= Номенклатура.ЗапросКоличества;
		Товар.ОтдельнойСтрокой		= Номенклатура.ОтдельнойСтрокой;
		Товар.ГруппаПечати		    = ?(ЗначениеЗаполнено(Номенклатура.ГруппаПечати),Номенклатура.ГруппаПечати,ГруппаПечати);
		Товар.Категория			    = ?(ЗначениеЗаполнено(Номенклатура.Категория),Номенклатура.Категория,КатегорияБлюд);
		Товар.Выход				    = Номенклатура.Выход;
		Товар.ЕдиницаИзмерения	    = Номенклатура.БазоваяЕдиницаИзмерения;
		Товар.КоэфПересчета		    = 1;
	КонецЕсли;
	
	Если ЭтоНовыйТовар ИЛИ ОбновитьНаименование Тогда
		Товар.Наименование	= ?(Номенклатура.НаименованиеПолное="", Номенклатура.Наименование, Номенклатура.НаименованиеПолное);
	КонецЕсли; 
	
	Если ЭтоНовыйТовар ИЛИ УстановитьНаличиеВПродаже Тогда
		Товар.ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.Простой;
		Товар.ЕстьВПродаже			= Истина;
	КонецЕсли; 
	
	Товар.Записать();
	
	// установим себестоимость
	Отбор = Новый Структура("ТипЦен, Номенклатура", Справочники.ТипыЦен.Себестоимость, Номенклатура);
	ЦенаНоменклатуры = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ТекущаяДата(), Отбор);
	
	ЦенаТовара = РегистрыСведений.Цены.СоздатьМенеджерЗаписи();	
	ЦенаТовара.Период	= ТекущаяДата();
	ЦенаТовара.ТипЦен	= Справочники.ТипыЦен.Себестоимость;
	ЦенаТовара.Товар	= Товар.Ссылка;
	ЦенаТовара.Валюта	= ЦенаНоменклатуры.Валюта;
	ЦенаТовара.Цена		= ЦенаНоменклатуры.Цена;
	ЦенаТовара.Записать();
	
	Если ЭтоНовыйТовар ИЛИ ОбновитьЦенуРеализации Тогда
		// установим цену реализации
		Отбор = Новый Структура("ТипЦен, Номенклатура", Справочники.ТипыЦен.Розничная, Номенклатура);
		ЦенаНоменклатуры = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ТекущаяДата(), Отбор);
	КонецЕсли;
	
	// штрих-коды
	Если ЭтоНовыйТовар ИЛИ ОбновитьШтрихКоды Тогда
		
		МассивСтарыхШК = Новый Массив;
		Если НЕ ЭтоНовыйТовар Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ ШтрихКод ИЗ Справочник.ШтрихКоды
			|ГДЕ Товар=&Товар И НЕ ПометкаУдаления");
			
			Запрос.УстановитьПараметр("Товар", Товар.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивСтарыхШК.Добавить(Выборка.ШтрихКод);
			КонецЦикла; 
		КонецЕсли; 
		
		Запрос = Новый Запрос("ВЫБРАТЬ ШтрихКод ИЗ РегистрСведений.ШтрихКодыНоменклатуры
		                 	|ГДЕ Владелец = &Номенклатура И ШтрихКод НЕ В (&МассивСтарыхШК)
		                 	|");
		Запрос.УстановитьПараметр("МассивСтарыхШК", МассивСтарыхШК);
		Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НовыйШК = Справочники.ШтрихКоды.СоздатьЭлемент();
			НовыйШК.Товар = Товар.Ссылка;
			НовыйШК.ШтрихКод = Выборка.ШтрихКод;
			НовыйШК.Записать();
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция НайтиТоварПоНоменклатуре(Номенклатура)
	
	Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Ссылка ИЗ Справочник.Товары
			|ГДЕ
			|	Владелец = &Каталог И Номенклатура = &Номенклатура 
			|");
			
	Запрос.УстановитьПараметр("Каталог"		, КаталогТоваров);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Неопределено;
КонецФункции

Функция НайтиРодителя(ГруппаНоменклатуры)
	
	Если НЕ ЗначениеЗаполнено(ГруппаНоменклатуры) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ГруппаТов = Справочники.Товары.НайтиПоРеквизиту("Номенклатура", ГруппаНоменклатуры, , КаталогТоваров);
	
	Если ЗначениеЗаполнено(ГруппаТов) Тогда
		Возврат ГруппаТов;
	КонецЕсли; 
	
	ГруппаТов = Справочники.Товары.СоздатьГруппу();
	ГруппаТов.Владелец		= КаталогТоваров;
	ГруппаТов.Родитель		= НайтиРодителя(ГруппаНоменклатуры.Родитель);
	ГруппаТов.Номенклатура	= ГруппаНоменклатуры;
	ГруппаТов.Наименование	= ГруппаНоменклатуры.Наименование;
	ГруппаТов.ГруппаПечати	= ГруппаПечати;
	ГруппаТов.Категория		= КатегорияБлюд;
	
	ГруппаТов.Записать();
	
	Возврат ГруппаТов.Ссылка;
КонецФункции

