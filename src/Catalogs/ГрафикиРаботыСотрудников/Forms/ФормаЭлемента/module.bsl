////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем СписокВремениРаботы;

// Список соответствий 1 - пн, 2 - вт,.... 7 - вс.
Перем ДниНедели;

/////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Управляет видимостью на форме.
//
Процедура УправлениеВидимостью()
	
	ЭтоСменныйГрафик = ТипГрафика = Перечисления.ТипыГрафиковРаботы.Сменный;
	
	Если ЭтоСменныйГрафик Тогда
		ЭлементыФормы.ПанельГрафик.ТекущаяСтраница         = ЭлементыФормы.ПанельГрафик.Страницы.СтраницаГрафикСменный;
	Иначе
		ЭлементыФормы.ПанельГрафик.ТекущаяСтраница         = ЭлементыФормы.ПанельГрафик.Страницы.СтраницаГрафикВременной;
	КонецЕсли;
	
	ЭлементыФормы.ДатаОтсчета.Видимость						= ЭтоСменныйГрафик;
	ЭлементыФормы.НадписьДатаОтсчета.Видимость				= ЭтоСменныйГрафик;
	
	ЭлементыФормы.График.Колонки.ДеньНедели.Видимость		= НЕ ЭтоСменныйГрафик;
	ЭлементыФормы.График.Колонки.НомерСтроки.Видимость		= ЭтоСменныйГрафик;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УправлениеРИБ.ПередОткрытиемЭлементаСправочника(ЭтотОбъект, ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		ТипГрафика = Перечисления.ТипыГрафиковРаботы.Пятидневка;
	КонецЕсли;
	
	ЭлементыФормы.ТабличноеПолеГрафика.Колонки.ЧасовЗаДень.Видимость = Ложь;
	СформироватьТаблицуГрафика();
	
	ТекущийГод = НачалоГода(РабочаяДата);
	
	НачПериода = НачалоГода(ТекущийГод);
	КонПериода = КонецГода(ТекущийГод);
	
	НомерТекущегоГода = Год(ТекущийГод);
	ОтразитьГод(ТекущийГод, Истина);
	
	УправлениеВидимостью();
	
	ЭлементыФормы.График.Колонки.ВремяНачала.ЭлементУправления.СписокВыбора = СписокВремениРаботы;
	ЭлементыФормы.График.Колонки.ВремяОкончания.ЭлементУправления.СписокВыбора  = СписокВремениРаботы;
	ЭлементыФормы.График.Колонки.Длительность.ЭлементУправления.СписокВыбора = СписокВремениРаботы;
	ЭлементыФормы.График.Колонки.НеоплачиваемоеВремя.ЭлементУправления.СписокВыбора  = СписокВремениРаботы;
	
	ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.Колонки.ВремяНачала.ЭлементУправления.СписокВыбора = СписокВремениРаботы;
	ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.Колонки.ВремяОкончания.ЭлементУправления.СписокВыбора  = СписокВремениРаботы;
	ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.Колонки.Длительность.ЭлементУправления.СписокВыбора = СписокВремениРаботы;
	ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.Колонки.НеоплачиваемоеВремя.ЭлементУправления.СписокВыбора  = СписокВремениРаботы;
	
	ТабличноеПолеГрафикРаботыПодробно.Отбор.ГрафикРаботы.Установить(Ссылка, Истина);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события "ПриИзменении" поля ввода ТипГрафика.
//
Процедура ТипГрафикаПриИзменении(Элемент)
	
	График.Очистить();
	
	Если ТипГрафика = Перечисления.ТипыГрафиковРаботы.Пятидневка
		ИЛИ ТипГрафика = Перечисления.ТипыГрафиковРаботы.Шестидневка Тогда
		
		Если ТипГрафика = Перечисления.ТипыГрафиковРаботы.Пятидневка Тогда
			РазмерСписка = 5;
		Иначе
			РазмерСписка = 6;
		КонецЕсли;

		Сч = 0; 

		Для Каждого День Из Перечисления.ДниНедели Цикл
			
			Если Сч = РазмерСписка Тогда
				Прервать;
			КонецЕсли;
			
			НовыйДень = График.Добавить();
			НовыйДень.ДеньНедели = День;
			НовыйДень.Смена = Смена;
			ПриИзмененииСменыТабличнойЧастиГрафик(НовыйДень);
			
			Сч = Сч + 1;
			
		КонецЦикла;
	КонецЕсли;
		
	УправлениеВидимостью();
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Заполнить".
//
Процедура КоманднаяПанельГрафикВременнойЗаполнить(Кнопка)
	
	Если График.Количество() > 0 Тогда
		
		Ответ = Вопрос("Существующий график будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	График.Очистить();
	
	Если ТипГрафика = Перечисления.ТипыГрафиковРаботы.Пятидневка Тогда
		РазмерСписка = 5;
	Иначе
		РазмерСписка = 6;
	КонецЕсли;
	
	Сч = 0; 
	
	Для Каждого День Из Перечисления.ДниНедели Цикл
		
		НовыйДень = График.Добавить();
		НовыйДень.ДеньНедели = День;
		
		Если Сч < РазмерСписка Тогда
			НовыйДень.Смена = Смена;
		Иначе
			НовыйДень.Смена = СменаВыходной;
		КонецЕсли;
		ПриИзмененииСменыТабличнойЧастиГрафик(НовыйДень);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЗАКЛАДКИ ШАБЛОН ГРАФИКА

// Обработка нажатия на кнопку "УстановитьВремя" командной панели "КоманднаяПанельГрафикВременной"
//
Процедура КоманднаяПанельГрафикВременнойУстановитьВремя(Кнопка)
	
	Если График.Количество() = 0 Тогда
		Предупреждение("В таблице занятости нет ни одной строки.");
		Возврат;
	КонецЕсли;	
	
	Ответ = Вопрос("Указанные диапазоны занятости будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ФормаВыбораВремени = Справочники.ГрафикиРаботыСотрудников.ПолучитьФорму("ВыборДиапазонаЗанятости", ЭтаФорма);
	Результат = ФормаВыбораВремени.ОткрытьМодально();
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда

		Для Каждого СтрокаГрафика Из График Цикл
			
			СтрокаГрафика.ВремяНачала = Результат.ВремяНачала;
			СтрокаГрафика.ВремяОкончания  = Результат.ВремяОкончания;
			РассчитатьДлительность(СтрокаГрафика);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования табличной части График.
//
Процедура ГрафикПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = ЭлементыФормы.График.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока
		И НЕ ЗначениеЗаполнено(ТекущиеДанные.Смена)
		И ЗначениеЗаполнено(Смена) Тогда
		ТекущиеДанные.Смена = Смена;
		ПриИзмененииСменыТабличнойЧастиГрафик(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования табличной части График.
//
Процедура ГрафикПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипГрафика <> Перечисления.ТипыГрафиковРаботы.Сменный Тогда
		
		ТекДанные = ЭлементыФормы.График.ТекущиеДанные;

		Если ТекДанные <> Неопределено И График.НайтиСтроки(Новый Структура("ДеньНедели", ТекДанные.ДеньНедели)).Количество() > 1 Тогда
			
			Предупреждение("Дублирование дней недели в одном графике работы запрещено!");
			Отказ = Истина;
			
		//Иначе
		//	
		//	График.Сортировать("ДеньНедели Убыв", Новый СравнениеЗначений);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки табличной части График.
//
Процедура ГрафикПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Смена.ОтметкаНезаполненного			= НЕ ЗначениеЗаполнено(ОформлениеСтроки.Ячейки.Смена.Значение);
	
КонецПроцедуры

// Обработчик события ПриИзменении колонки Смена табличной части График.
//
Процедура ГрафикСменаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.График.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииСменыТабличнойЧастиГрафик(ТекущиеДанные);
	
КонецПроцедуры

// Процедура заполняет данные строки табличной части по данным Смены
//
Процедура ПриИзмененииСменыТабличнойЧастиГрафик(ТекущиеДанные)

	Если Не ЗначениеЗаполнено(ТекущиеДанные.Смена) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВремяНачала = ТекущиеДанные.Смена.ВремяНачала;
	ТекущиеДанные.ВремяОкончания = ТекущиеДанные.Смена.ВремяОкончания;
	ТекущиеДанные.Длительность = ТекущиеДанные.Смена.Длительность;
	ТекущиеДанные.НеоплачиваемоеВремя = ТекущиеДанные.Смена.НеоплачиваемоеВремя;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЛЯ РАБОТЫ ЗАКЛАДКИ ГРАФИК РАБОТ КАЛЕНДАРЬ

// Обработчик события ПриВыводеСтроки табличного поля ГрафикРаботыПодробно.
//
Процедура ТабличноеПолеГрафикРаботыПодробноПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ОформлениеСтроки.Ячейки.ВремяНачала.Значение = Дата(1,1,1)
		И ОформлениеСтроки.Ячейки.Длительность.Значение > 0 Тогда
		ОформлениеСтроки.Ячейки.ВремяНачала.Текст = "00:00";
	КонецЕсли;
	
	Если ОформлениеСтроки.Ячейки.ВремяОкончания.Значение = Дата(1,1,1)
		И ОформлениеСтроки.Ячейки.Длительность.Значение > 0 Тогда
		ОформлениеСтроки.Ячейки.ВремяОкончания.Текст = "00:00";
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы НомерТекущегоГода 
//
Процедура НомерТекущегоГодаПриИзменении(Элемент)
	
	ТекущийГод = НачалоГода(Дата(НомерТекущегоГода, 1, 1));
	
	Если ОтразитьГод(ТекущийГод) = 0 тогда
		ОтразитьГод(ТекущийГод, Истина);
	КонецЕсли;
	
	НачПериода = НачалоГода(Дата(НомерТекущегоГода,1,1));
	КонПериода = КонецГода(Дата(НомерТекущегоГода,1,1));
	
КонецПроцедуры

// Процедура формирует таблицу для вывода графика
//
Процедура СформироватьТаблицуГрафика()
	
	//Заполнение месяцев
	ДатаМесяца = НачалоГода(ПолучитьРабочуюДату());
	
	Для НомерМесяца = 1 По 12 Цикл
		
		НоваяСтрока = ТаблицаГрафикаЗаГод.Добавить();
		НоваяСтрока.Месяц = Формат(ДатаМесяца, "ДФ=""ММММ""");
		НоваяСтрока.НомерМесяца = НомерМесяца;
		
		ДатаМесяца = ДобавитьМесяц(ДатаМесяца, 1);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает записи таблицы графика
//
Процедура ТаблицаГрафикаЗаГодОчистить()
	
	Для Каждого СтрокаТаблицы Из ТаблицаГрафикаЗаГод Цикл
		Для НомерДня = 1 По 31 Цикл
			СтрокаТаблицы["День" + НомерДня] = 0;
		КонецЦикла;
		СтрокаТаблицы.ЧасовЗаМесяц = 0;
		СтрокаТаблицы.ДнейЗаМесяц = 0;
	КонецЦикла;
	
КонецПроцедуры // ТаблицаГрафикаЗаГодОчистить()

// Процедура отображает содержимое таблицы графика за год в таблице значениий за месяц
Функция ОтразитьГод(ДатаГода, ПрочитатьИзНабораЗаписей = Ложь)
	
	ТаблицаГрафикаЗаГодОчистить();
	ДатаНачалаГода = НачалоГода(ДатаГода);
	ДатаКонцаГода = КонецГода(ДатаГода);
	Если ПрочитатьИзНабораЗаписей тогда
		// если не нашли в таблице, тогда прочитаем из регистра сведений
		ЗаполнитьТаблицуЗаИнтервал(ДатаНачалаГода, ДатаКонцаГода);
	КонецЕсли;
	
	КоличествоНаденныхДат = 0;
	
	Для Каждого СтрокаТЗГрафикНаГод Из ТЗГрафикНаГод Цикл
		Если СтрокаТЗГрафикНаГод.Дата >= ДатаНачалаГода
			И СтрокаТЗГрафикНаГод.Дата <= ДатаКонцаГода Тогда
			
			ТекущийМесяц = Месяц(СтрокаТЗГрафикНаГод.Дата);
			ТекущийДень  = День(СтрокаТЗГрафикНаГод.Дата);
			
			ТаблицаГрафикаЗаГод[ТекущийМесяц-1]["День" + ТекущийДень] = СтрокаТЗГрафикНаГод.Часы;
			ТаблицаГрафикаЗаГод[ТекущийМесяц-1].ЧасовЗаМесяц = ТаблицаГрафикаЗаГод[ТекущийМесяц-1].ЧасовЗаМесяц + СтрокаТЗГрафикНаГод.Часы;
			Если СтрокаТЗГрафикНаГод.Часы > 0 Тогда
				ТаблицаГрафикаЗаГод[ТекущийМесяц-1].ДнейЗаМесяц = ТаблицаГрафикаЗаГод[ТекущийМесяц-1].ДнейЗаМесяц + 1;
			КонецЕсли;
			
			КоличествоНаденныхДат = КоличествоНаденныхДат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоНаденныхДат;
	
КонецФункции

// Отбирает данные за переданный интервал дат из регистра сведений
//
// Параметры: 
//  ДатаНачалаИнтервалаКалендаря - начало интервала дат
//  ДатаОкончанияИнтервалаКалендаря - окончание интервала дат
//
// Возвращаемое значение:
//  Нет.
//
Процедура ЗаполнитьТаблицуЗаИнтервал(ДатаНачалаИнтервалаКалендаря, ДатаОкончанияИнтервалаКалендаря) Экспорт
	
	ЗапросПоСменам = Новый Запрос;
	ЗапросПоСменам.УстановитьПараметр("ДатаНачалаИнтервалаКалендаря",  ДатаНачалаИнтервалаКалендаря);
	ЗапросПоСменам.УстановитьПараметр("ДатаОкончанияИнтервалаКалендаря", ДатаОкончанияИнтервалаКалендаря);
	ЗапросПоСменам.УстановитьПараметр("ГрафикРаботы", Ссылка);
	ЗапросПоСменам.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросПоСменам.Текст = "ВЫБРАТЬ
	                       |	УР_ГрафикиРаботы.Дата,
	                       |	УР_ГрафикиРаботы.Длительность КАК Часы,
	                       |	УР_ГрафикиРаботы.ВремяНачала,
	                       |	УР_ГрафикиРаботы.ВремяОкончания
	                       |ИЗ
	                       |	РегистрСведений.УР_ГрафикиРаботы КАК УР_ГрафикиРаботы
	                       |ГДЕ
	                       |	УР_ГрафикиРаботы.ГрафикРаботы = &ГрафикРаботы
	                       |	И УР_ГрафикиРаботы.Дата >= &ДатаНачалаИнтервалаКалендаря
	                       |	И УР_ГрафикиРаботы.Дата <= &ДатаОкончанияИнтервалаКалендаря";
	
	ПоместитьТаблицуВТЗГрафикНаГод(ЗапросПоСменам.Выполнить().Выгрузить(), ТЗГрафикНаГод, ДатаНачалаИнтервалаКалендаря, ДатаОкончанияИнтервалаКалендаря);
	
КонецПроцедуры

// Преобразует таблицу для вывода календаря по месяцам
//
Процедура ПоместитьТаблицуВТЗГрафикНаГод(ТаблицаПоместить, ТЗГрафикНаГод, ДатаНачалаИнтервала, ДатаОкончанияИнтервала) Экспорт
	
	СтруктураПоиска = Новый Структура("Дата");
	СтруктураПоискаВТЗГрафикНаГод = Новый Структура("Дата");
	
	ТаблицаПоместить.Индексы.Добавить("Дата");
	
	ДнейВТекущемМесяце = Окр((ДатаОкончанияИнтервала - ДатаНачалаИнтервала) / мДлинаСуток);
	ДатаМесяца = ДатаНачалаИнтервала;
	Для индДата = 0 по ДнейВТекущемМесяце-1 Цикл
		ДатаМесяца = ДатаНачалаИнтервала + индДата * мДлинаСуток;
		// попробуем найти строку с соответствующей датой в таблице из которой помещаем
		СтруктураПоиска.Дата = ДатаМесяца;
		
		НайдСтрокиПоместить = ТаблицаПоместить.НайтиСтроки(СтруктураПоиска);
		
		Если НайдСтрокиПоместить.Количество() > 0 Тогда
			
			// удалим имевшиеся ранее строки
			СтруктураПоискаВТЗГрафикНаГод.Дата = ДатаМесяца;
			НайдСтроки = ТЗГрафикНаГод.НайтиСтроки(СтруктураПоискаВТЗГрафикНаГод);
			Если НайдСтроки.Количество()>0 Тогда
				Для каждого СтрокаТЗ Из НайдСтроки Цикл
					ТЗГрафикНаГод.Удалить(СтрокаТЗ)
				КонецЦикла; 
			КонецЕсли;
			
			// нашли строки и теперь их поместим
			Для каждого СтрокаТЗ Из НайдСтрокиПоместить Цикл
				ЗаполнитьЗначенияСвойств(ТЗГрафикНаГод.Добавить(),СтрокаТЗ);
			КонецЦикла;
		Иначе
			// если не нашли строку, Тогда удалим соответствующую строку из другой таблицы
			НайдСтроки = ТЗГрафикНаГод.НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаТЗГрафикНаГод Из НайдСтроки Цикл
				ТЗГрафикНаГод.Удалить(СтрокаТЗГрафикНаГод);
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПоместитьТаблицуВТЗГрафикНаГод

// Обработчик события Выбор табличного поля График 
//
Процедура ТабличноеПолеГрафикаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Лев(Колонка.Имя, 4) = "День" Тогда
		
		КоличествоДнейВМесяце = День(КонецМесяца(Дата(НомерТекущегоГода, ВыбраннаяСтрока.НомерМесяца, 1)));
		Если Число(Сред(Колонка.Имя, 5)) > КоличествоДнейВМесяце Тогда
			Возврат;
		КонецЕсли;

		мДата = Дата(НомерТекущегоГода, ВыбраннаяСтрока.НомерМесяца, Сред(Колонка.Имя, 5));
		ТабличноеПолеГрафикРаботыПодробно.Отбор.Дата.Установить(мДата);
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ГрафикРаботПодробно;
		
	ИначеЕсли Колонка.Имя = "Месяц" Тогда
		
		мДата = Дата(НомерТекущегоГода, ВыбраннаяСтрока.НомерМесяца, 1);
		
		ТабличноеПолеГрафикРаботыПодробно.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
		ТабличноеПолеГрафикРаботыПодробно.Отбор.Дата.ЗначениеС = НачалоМесяца(мДата);
		ТабличноеПолеГрафикРаботыПодробно.Отбор.Дата.ЗначениеПо = КонецМесяца(мДата);
		ТабличноеПолеГрафикРаботыПодробно.Отбор.Дата.Использование = Истина;
		
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ГрафикРаботПодробно;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки табличного поля ТабличноеПолеГрафика 
//
Процедура ТабличноеПолеГрафикаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ТекущийМесяц = НачалоМесяца(Дата(НомерТекущегоГода, ОформлениеСтроки.ДанныеСтроки.НомерМесяца, 1));
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ТекущийМесяц));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ТекущийМесяц));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня,
	|	ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДеньНедели
	|ИЗ
	|	РегистрСведений.УР_ПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоМесяца И &КонецМесяца
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря";
	
	Результат = Запрос.Выполнить();
	Данные = Результат.Выгрузить();
			
	ОформлениеСтроки.Ячейки.Итого.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.Месяц.ВысотаЯчейки = 2;
	
	ИтогоДней 	  = 0;
	ИтогоЧасов    = 0;
	
	КоличествоДнейВМесяце = День(КонецМесяца(Дата(НомерТекущегоГода, ОформлениеСтроки.ДанныеСтроки.НомерМесяца, 1)));
	ДеньНеделиМесяца = ДеньНедели(НачалоМесяца(ТекущийМесяц));
	Для НомерДня = 1 По 31 Цикл
		
		ЗначениеЯчейки = ДанныеСтроки["День"+НомерДня];
		Если ЗначениеЯчейки <> 0 Тогда
			ОформлениеСтроки.Ячейки["День"+НомерДня].Текст = Строка(ЗначениеЯчейки);
			ИтогоДней = ИтогоДней + 1;
			ИтогоЧасов = ИтогоЧасов + ЗначениеЯчейки;
		КонецЕсли;
		
		Если НомерДня > КоличествоДнейВМесяце Тогда
			ОформлениеСтроки.Ячейки["День"+НомерДня].ТолькоПросмотр = Истина;
			ОформлениеСтроки.Ячейки["День"+НомерДня].ЦветФона = WebЦвета.СветлоСерый;
			
		Иначе
			Если Данные.Количество() > 0 Тогда
				  ВидДня = Данные[НомерДня - 1].ВидДня;
				Если ВидДня = Перечисления.УР_ВидыДнейПроизводственногоКалендаря.Воскресенье 
					Или ВидДня = Перечисления.УР_ВидыДнейПроизводственногоКалендаря.Суббота И НЕ ТипГрафика = Перечисления.ТипыГрафиковРаботы.Шестидневка 
					Или ВидДня = Перечисления.УР_ВидыДнейПроизводственногоКалендаря.Праздник Тогда
					ОформлениеСтроки.Ячейки["День"+НомерДня].ЦветФона = БледноКрасныйЦвет;
				Иначе
					ОформлениеСтроки.Ячейки["День"+НомерДня].ЦветФона = Новый Цвет();	
				КонецЕсли;
			Иначе
				Если (ДеньНеделиМесяца = 6 И НЕ ТипГрафика = Перечисления.ТипыГрафиковРаботы.Шестидневка) Или ДеньНеделиМесяца = 7 Тогда
					ОформлениеСтроки.Ячейки["День"+НомерДня].ЦветФона = БледноКрасныйЦвет;
				Иначе
					ОформлениеСтроки.Ячейки["День"+НомерДня].ЦветФона = Новый Цвет();	
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		ДеньНеделиМесяца = (ДеньНеделиМесяца%7)+1;
	КонецЦикла;
	
	ОформлениеСтроки.Ячейки.ДнейЗаМесяц.УстановитьТекст(Строка(ИтогоДней));
	ОформлениеСтроки.Ячейки.ЧасовЗаМесяц.УстановитьТекст(Строка(ИтогоЧасов));
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления табличного поля ТабличноеПолеГрафика 
//
Процедура ТабличноеПолеГрафикаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения табличного поля ТабличноеПолеГрафика 
//
Процедура ТабличноеПолеГрафикаПередНачаломИзменения(Элемент, Отказ)
	
	Если День(КонецМесяца(Дата(НомерТекущегоГода, Элемент.ТекущаяСтрока.НомерМесяца, 1))) < Число(СтрЗаменить(СтрЗаменить(СтрЗаменить(Элемент.ТекущаяКолонка.Имя, "День", ""), "ВЧ", ""), "НЧ", "")) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередУдалением табличного поля ТабличноеПолеГрафика 
//
Процедура ТабличноеПолеГрафикаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Процедура пересчитывает итоговые ячейки таблицы значений, после изменения
// значений в ячейках.
//

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЗАКЛАДКИ ГРАФИК РАБОТ ПОДРОБНО

// Процедура вызывает форму заполнения графика за интервал
//
Процедура КоманднаяПанельГрафикРаботыПодробноДействие(Кнопка)
	
	Если Модифицированность Тогда
		Если Не ИнтерфейсАдмина.ЗаписатьОбъектВФорме(ЭтаФорма) Тогда
			Возврат;
		КонецЕсли;
		ТабличноеПолеГрафикРаботыПодробно.Отбор.ГрафикРаботы.Установить(Ссылка, Истина);
	КонецЕсли;

	ФормаЗаполнения = РегистрыСведений.УР_ГрафикиРаботы.ПолучитьФорму("ФормаЗаполнения");
	ФормаЗаполнения.ГрафикРаботы = ЭтотОбъект.Ссылка;
	ФормаЗаполнения.ДатаОтсчета = ДатаОтсчета;
	ФормаЗаполнения.ВидОбработки = 1;
	ФормаЗаполнения.ОткрытьМодально();
	ОтразитьГод(ТекущийГод, Истина);
	
КонецПроцедуры

// Процедура рассчитывает длитеьность по строке
//
Процедура РассчитатьДлительность(ТекущиеДанные)

	мВремяНачала = Дата(1,1,1,Час(ТекущиеДанные.ВремяНачала), Минута(ТекущиеДанные.ВремяНачала),0);
	мВремяОкончания = Дата(1,1,1,Час(ТекущиеДанные.ВремяОкончания), Минута(ТекущиеДанные.ВремяОкончания),0);
	
	Если мВремяОкончания < мВремяНачала Тогда
		мВремяОкончания = мВремяОкончания + 60*60*24;
	КонецЕсли;
	
	ВсегоМинут = Цел((мВремяОкончания - мВремяНачала) / 60);
	ДлительностьЧасов = Цел(ВсегоМинут / 60);
	ДлительностьМинут = ВсегоМинут - ДлительностьЧасов * 60;
	ТекущиеДанные.Длительность = Дата(1,1,1,ДлительностьЧасов, ДлительностьМинут,0);
	
КонецПроцедуры

// Процедура рассчитывает длительность по строке в часах
//
Процедура РассчитатьДлительностьЧислом(ТекущиеДанные)

	мВремяНачала = Дата(1,1,1,Час(ТекущиеДанные.ВремяНачала), Минута(ТекущиеДанные.ВремяНачала),0);
	мВремяОкончания = Дата(1,1,1,Час(ТекущиеДанные.ВремяОкончания), Минута(ТекущиеДанные.ВремяОкончания),0);
	
	Если мВремяОкончания < мВремяНачала Тогда
		мВремяОкончания = мВремяОкончания + 60*60*24;
	КонецЕсли;
	
	ТекущиеДанные.Длительность = (мВремяОкончания - мВремяНачала) / 3600;
	
КонецПроцедуры

// Процедура рассчитывает время окончания по строке
//
Процедура РассчитатьВремяОкончания(ТекущиеДанные)
	
	мВремяОкончания = ТекущиеДанные.ВремяНачала + Час(ТекущиеДанные.Длительность)*60*60 + Минута(ТекущиеДанные.Длительность)*60;
	ТекущиеДанные.ВремяОкончания = Дата(1,1,1,Час(мВремяОкончания), Минута(мВремяОкончания),0);
	
КонецПроцедуры

// Процедура рассчитывает время окончания по строке
//
Процедура РассчитатьВремяОкончанияЧислом(ТекущиеДанные)
	
	мВремяОкончания = ТекущиеДанные.ВремяНачала + ТекущиеДанные.Длительность*3600;
	ТекущиеДанные.ВремяОкончания = Дата(1,1,1,Час(мВремяОкончания), Минута(мВремяОкончания),0);
	
КонецПроцедуры

// Обработчик события ПриИзменении колонки ВремяНачала табличного поля График 
//
Процедура ГрафикВремяНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.График.ТекущиеДанные;
	РассчитатьДлительность(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события Регулирование колонки ВремяНачала табличного поля График 
//
Процедура ГрафикВремяНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = -1 и Элемент.Значение = Дата(1,1,1,0,0,0) Тогда
		Элемент.Значение = Дата(1,1,1,23,30,0);
	Иначе
		Элемент.Значение = Элемент.Значение + (Направление * 30*60);
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.График.ТекущиеДанные;
	РассчитатьДлительность(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события ПриИзменении колонки ВремяОкончания табличного поля График 
//
Процедура ГрафикВремяОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.График.ТекущиеДанные;
	РассчитатьДлительность(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события Регулирование колонки ВремяОкончания табличного поля График 
//
Процедура ГрафикВремяОкончанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = -1 и Элемент.Значение = Дата(1,1,1,0,0,0) Тогда
		Элемент.Значение = Дата(1,1,1,23,30,0);
	Иначе
		Элемент.Значение = Элемент.Значение + (Направление * 30*60);
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.График.ТекущиеДанные;
	РассчитатьДлительность(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события ПриИзменении колонки Длительность табличного поля График 
//
Процедура ГрафикДлительностьПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.График.ТекущиеДанные;
	РассчитатьВремяОкончания(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события Регулирование колонки Длительность табличного поля График 
//
Процедура ГрафикДлительностьРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = -1 и Элемент.Значение = Дата(1,1,1,0,0,0) Тогда
		Элемент.Значение = Дата(1,1,1,23,30,0);
	Иначе
		Элемент.Значение = Элемент.Значение + (Направление * 30*60);
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.График.ТекущиеДанные;
	РассчитатьВремяОкончания(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события Регулирование колонки НеоплачиваемоеВремя табличного поля График 
//
Процедура ГрафикНеоплачиваемоеВремяРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = -1 и Элемент.Значение = Дата(1,1,1,0,0,0) Тогда
		Элемент.Значение = Дата(1,1,1,23,30,0);
	Иначе
		Элемент.Значение = Элемент.Значение + (Направление * 30*60);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении колонки ВремяНачала табличного поля ТабличноеПолеГрафикРаботыПодробно 
//
Процедура ТабличноеПолеГрафикРаботыПодробноВремяНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.ТекущиеДанные;
	РассчитатьДлительностьЧислом(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события Регулирование колонки ВремяНачала табличного поля ТабличноеПолеГрафикРаботыПодробно 
//
Процедура ТабличноеПолеГрафикРаботыПодробноВремяНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = -1 и Элемент.Значение = Дата(1,1,1,0,0,0) Тогда
		Элемент.Значение = Дата(1,1,1,23,30,0);
	Иначе
		Элемент.Значение = Элемент.Значение + (Направление * 30*60);
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.ТекущиеДанные;
	РассчитатьДлительностьЧислом(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события ПриИзменении колонки ВремяОкончания табличного поля ТабличноеПолеГрафикРаботыПодробно 
//
Процедура ТабличноеПолеГрафикРаботыПодробноВремяОкончанияПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.ТекущиеДанные;
	РассчитатьДлительностьЧислом(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события Регулирование колонки ВремяОкончания табличного поля ТабличноеПолеГрафикРаботыПодробно 
//
Процедура ТабличноеПолеГрафикРаботыПодробноВремяОкончанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = -1 и Элемент.Значение = Дата(1,1,1,0,0,0) Тогда
		Элемент.Значение = Дата(1,1,1,23,30,0);
	Иначе
		Элемент.Значение = Элемент.Значение + (Направление * 30*60);
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.ТекущиеДанные;
	РассчитатьДлительностьЧислом(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события ПриИзменении колонки Длительность табличного поля ТабличноеПолеГрафикРаботыПодробно 
//
Процедура ТабличноеПолеГрафикРаботыПодробноДлительностьПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.ТекущиеДанные;
	РассчитатьВремяОкончанияЧислом(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события Регулирование колонки Длительность табличного поля ТабличноеПолеГрафикРаботыПодробно 
//
Процедура ТабличноеПолеГрафикРаботыПодробноДлительностьРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.Значение = Элемент.Значение + (Направление * 0.5);
	
	Если Элемент.Значение > 24 Тогда
		Элемент.Значение = Элемент.Значение - 24;
	ИначеЕсли Элемент.Значение < 0 Тогда
		Элемент.Значение = Элемент.Значение + 24;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.ТекущиеДанные;
	РассчитатьВремяОкончанияЧислом(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события Регулирование колонки НеоплачиваемоеВремя табличного поля ТабличноеПолеГрафикРаботыПодробно 
//
Процедура ТабличноеПолеГрафикРаботыПодробноНеоплачиваемоеВремяРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = -1 и Элемент.Значение = Дата(1,1,1,0,0,0) Тогда
		Элемент.Значение = Дата(1,1,1,23,30,0);
	Иначе
		Элемент.Значение = Элемент.Значение + (Направление * 30*60);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении колонки Смена табличного поля ТабличноеПолеГрафикРаботыПодробно 
//
Процедура ТабличноеПолеГрафикРаботыПодробноСменаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ТабличноеПолеГрафикРаботыПодробно.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииСменыТабличнойЧастиГрафик(ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события Нажатие на кнопку Печать 
//
Процедура ПечатьНажатие(Элемент)
	
	Если ТаблицаГрафикаЗаГод.Итог("ДнейЗаМесяц") = 0 Тогда
		ТекстВопроса = "График на " + Формат(Год(ТекущийГод),"ЧГ=5") + " не заполнен";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОК);
		Возврат;
	КонецЕсли;	
	
	Если Модифицированность Тогда
		ТекстВопроса = "Перед печатью необходимо сохранить изменения. Сохранить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Печать(ТаблицаГрафикаЗаГод);

КонецПроцедуры

// Обработчик события Нажатие на кнопку КалендарьНаГодОбновить 
//
Процедура КалендарьНаГодОбновитьНажатие(Элемент)
	
	ОтразитьГод(ТекущийГод, Истина);
	
КонецПроцедуры


СписокВремениРаботы = Новый СписокЗначений;

Для Сч = 0 По 23 Цикл
	Часы = Формат(Сч, "ЧЦ=2; ЧВН=; ЧН='00'");
	СписокВремениРаботы.Добавить(Дата("00010101" + Часы + "00"), Часы + ":00");
	СписокВремениРаботы.Добавить(Дата("00010101" + Часы + "30"), Часы + ":30");
КонецЦикла;
