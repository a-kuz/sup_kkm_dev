
Перем мЧислоКогдаВПродаже;	// десятичное число, соответствующее выбранным в списке дням недели
Перем ОбъектДляПечатнойФормы; // для корректного выбора печатной формы после смены каталога товаров
Перем ТекущийКаталог;
////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Вкл/Выкл режима пометки
// 
Процедура УстановкаРежимаПометки()
	
	УпрПанель = ЭлементыФормы.ПанельДеревоПометки;
	
	Если ЭлементыФормы.ОсновныеДействияФормы.Кнопки.РежимПометки.Пометка Тогда
		// включили режим пометки
		УпрПанель.ТекущаяСтраница = УпрПанель.Страницы.СтраницаПометки;
		//УпрПанель.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Вдавленная);
		
	Иначе
		// выключили режим пометки
		УпрПанель.ТекущаяСтраница = УпрПанель.Страницы.СтраницаДерево;
		//УпрПанель.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при старте и из обработчиков, связанных с изменением пометок
//
Процедура ПриИзмененииДнейНедели()
	
	//мЧислоКогдаВПродаже = ИнтерфейсАдмина.СписокПометокВЧисло(СписокКогдаВПродаже);
	//СправочникСписок.Обновить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	УправлениеРИБ.ПриОткрытииСпискаСправочника(ЭтаФорма);
	Элементыформы.СправочникСписок.НастройкаОтбора.ПометкаУдаления.Доступность = Истина;
	Если НЕ ПараметрыСеанса.РаспределенныйРежим Тогда
		ЭлементыФормы.ИнформационнаяБаза.Видимость = Ложь;
	ИначеЕсли НЕ УправлениеРИБ.ВедениеСправочников() Тогда
		ЭлементыФормы.ИнформационнаяБаза.Гиперссылка = Ложь;
	КонецЕсли; 
	
	ПорядокСортировкиСписок = ВосстановитьЗначение("ТекущаяСортировкаСписок");
	ПорядокСортировкиДерево = ВосстановитьЗначение("ТекущаяСортировкаДерево");
	Если ЗначениеЗаполнено(ПорядокСортировкиСписок) Тогда
		СправочникСписок.Порядок.Установить(ПорядокСортировкиСписок);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПорядокСортировкиДерево) Тогда
		СправочникДерево.Порядок.Установить(ПорядокСортировкиДерево);
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ГрупповаяОбработка.Доступность = Ложь;
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.РежимСортировки.Доступность = Ложь;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Отбор.Владелец.Значение) Тогда
		// справочник подчиненный - надо установить владельца
		ТекущийКаталог = ВосстановитьЗначение("ТекущийКаталог");
		
		Если ТипЗнч(ТекущийКаталог) <> Тип("СправочникСсылка.КаталогиТоваров") ИЛИ ТекущийКаталог.Наименование="" Тогда
			ТекущийКаталог = Справочники.КаталогиТоваров.Мяснов;
		КонецЕсли; 
		
		Отбор.Владелец.Установить(ТекущийКаталог);
	КонецЕсли; 
	
	ТипЦен = Справочники	.ТипыЦен.Розничная;
	
	// для первоначальной установки нормального вида ПанельДеревоПометки
	УстановкаРежимаПометки();
	
	ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Истина;
	
	СпрТовары = Справочники.Товары.Выбрать();
	Если СпрТовары.Следующий() Тогда
		СписокМакетов = СпрТовары.ПолучитьОбъект().ПолучитьСписокПечатныхФорм();
		СписокОтчетов = СпрТовары.ПолучитьОбъект().ПолучитьСписокОтчетов();
		Попытка
			ИнтерфейсАдмина.УстановитьПодменюВыбораПечатнойФормы(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменюПечати,
			СписокМакетов,
			Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));
			// для редактируемых печатных форм
			НовыйДействие=Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию");  
			
			ИнтерфейсАдмина.УстановитьПодменюВыбораОтчетов(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПодменОтчетов,
			СписокОтчетов,
			Новый Действие("ДействияФормыДействиеВыбратьОтчет"));
		Исключение
		КонецПопытки;
		
		ИнтерфейсАдмина.СформироватьМенюПечать(СпрТовары.Ссылка,ЭтаФорма,НовыйДействие);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("ТекущийКаталог", Отбор.Владелец.Значение);
	
	СтрокаСортировкиСписок = ""; 
	СтрокаСортировкиДерево = "";
	
	Для Каждого СтрПорядка Из СправочникСписок.Порядок Цикл
		СтрокаСортировкиСписок = СтрокаСортировкиСписок + СтрПорядка.Данные+" "+СтрПорядка.Направление+",";
	КонецЦикла;
		
	Для Каждого СтрПорядка Из СправочникДерево.Порядок Цикл
		СтрокаСортировкиДерево = СтрокаСортировкиДерево + СтрПорядка.Данные+" "+СтрПорядка.Направление+",";
	КонецЦикла;
	
	СтрокаСортировкиСписок = Лев(СтрокаСортировкиСписок,СтрДлина(СтрокаСортировкиСписок)-1);
	СтрокаСортировкиДерево = Лев(СтрокаСортировкиДерево,СтрДлина(СтрокаСортировкиДерево)-1);
	
	СохранитьЗначение("ТекущаяСортировкаСписок",СтрокаСортировкиСписок);
	СохранитьЗначение("ТекущаяСортировкаДерево",СтрокаСортировкиДерево);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	ТекущийКаталог = Отбор.Владелец.Значение;
	ЭлементыФормы.НадписьТекущийКаталог.Заголовок = ТекущийКаталог.Наименование;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ИнформационнаяБазаНажатие(Элемент)
	
	ВыбЭлемент = ИнтерфейсАдмина.ИнфБазаВыбратьИзСписка(ЭтаФорма, Элемент);
	Если ВыбЭлемент <> Неопределено Тогда
		ИнформационнаяБаза = ВыбЭлемент.Значение;
		СправочникСписок.Обновить();
	КонецЕсли; 
	
КонецПроцедуры

Процедура НадписьТекущийКаталогНажатие(Элемент)
	
	СписокКаталогов = Новый СписокЗначений;
	
	Выборка = Справочники.КаталогиТоваров.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ПометкаУдаления Тогда
			СписокКаталогов.Добавить(Выборка.Ссылка);
		КонецЕсли; 
	КонецЦикла; 
	
	ВыбЭлемент = ВыбратьИзМеню(СписокКаталогов);
	Если ВыбЭлемент <> Неопределено Тогда 
		ОбъектДляПечатнойФормы = Неопределено;
		Отбор.Владелец.Установить(ВыбЭлемент.Значение);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДействияФормыРежимПометки(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановкаРежимаПометки();
	
КонецПроцедуры

Процедура СписокКогдаВПродажеПриИзмененииФлажка(Элемент)
	
	ПриИзмененииДнейНедели();
	
КонецПроцедуры

Процедура КоманднаяПанельКогдаВПродажеУстановитьФлажки(Кнопка)
	
	//СписокКогдаВПродаже.ЗаполнитьПометки(Истина);
	//ПриИзмененииДнейНедели();
	
КонецПроцедуры

Процедура КоманднаяПанельКогдаВПродажеСнятьФлажки(Кнопка)
	
	//СписокКогдаВПродаже.ЗаполнитьПометки(Ложь);
	//ПриИзмененииДнейНедели();
	
КонецПроцедуры

Процедура КнопкаОбновитьВПродажеНажатие(Элемент)
	
	ИнтерфейсАдмина.ОбновлениеПризнакаНаличияВПродаже(Истина);
	
КонецПроцедуры

Процедура СправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Товар = ДанныеСтроки.Ссылка;
	
	ОбъектДляПечатнойФормы = ?(ЗначениеЗаполнено(ОбъектДляПечатнойФормы), ОбъектДляПечатнойФормы, Товар);
	
	ВариантНаличияВПродаже = Товар.ВариантНаличияВПродаже;
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		СтатусСтроки = "ОК";
		
	ИначеЕсли ДанныеСтроки.ПометкаУдаления Тогда // не отмечен ни один день
		СтатусСтроки = "НикогдаНет";
			
	ИначеЕсли ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.Простой Тогда
		СтатусСтроки = ?(Товар.ЕстьВПродаже, "ОК", "НикогдаНет");
		
	//ИначеЕсли ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.ПростойПоИБ Тогда
	//	СтрокаИБ = Товар.КогдаВПродажеПоИБ.Найти(ИнформационнаяБаза, "ИнформационнаяБаза");
	//	СтатусСтроки = ?(СтрокаИБ<>Неопределено И СтрокаИБ.ЕстьВПродаже, "ОК", "НикогдаНет");
	//	
	Иначе
		СтатусСтроки = "Нет";
		//Если ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.Сложный Тогда
		//	Число10КогдаВПродаже = Товар.КогдаВПродаже;
		//Иначе
		//	СтрокаИБ = Товар.КогдаВПродажеПоИБ.Найти(ИнформационнаяБаза, "ИнформационнаяБаза");
		//	Число10КогдаВПродаже = ?(СтрокаИБ=Неопределено, 0, СтрокаИБ.КогдаВПродаже);
		//КонецЕсли;
		//
		//Если Число10КогдаВПродаже=0 Тогда // не отмечен ни один день
		//	СтатусСтроки = "НикогдаНет";
		//	
		////ИначеЕсли РежимСоответствия=1 Тогда  // хотя бы один
		////	СтатусСтроки = "Нет";
		////	
		////	//Число2КогдаВПродаже = Формат( Число10в2(Число10КогдаВПродаже), "ЧВН=;ЧГ=;ЧЦ=7");
		////	//Для н=1 По 7 Цикл
		////	//	Если СписокКогдаВПродаже[н-1].Пометка И Сред(Число2КогдаВПродаже,н,1) = "1" Тогда
		////	//		СтатусСтроки = "ОК";
		////	//		Прервать;
		////	//	КонецЕсли;
		////	//КонецЦикла;
		////	
		////ИначеЕсли РежимСоответствия=2 Тогда  // полное соответствие
		////	СтатусСтроки = ?( мЧислоКогдаВПродаже = Число10КогдаВПродаже, "ОК", "Нет");
		////	
		//КонецЕсли;
		
	КонецЕсли;
	
	Если Не ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Цена.ОтображатьТекст = Истина;
		//ОформлениеСтроки.Ячейки.Валюта.ОтображатьТекст = Истина;
		ЦенаТов = ЦенаТовара(ДанныеСтроки.Ссылка, ТипЦен);
		ОформлениеСтроки.Ячейки.Цена.Текст = Формат(ЦенаТов.Цена,"ЧДЦ=2; ЧН="); ;
		//ОформлениеСтроки.Ячейки.Валюта.Текст = ЦенаТов.Валюта;
	КонецЕсли;
	
	Если СтатусСтроки="ОК" Тогда
		ОформлениеСтроки.ЦветТекста = Новый Цвет();				// по умолчанию
		ОформлениеСтроки.Шрифт		= Новый Шрифт();			// по умолчанию
		
	ИначеЕсли СтатусСтроки="НикогдаНет" Тогда
		ОформлениеСтроки.ЦветТекста = Новый Цвет(153,51,0);		// бардовый
		ОформлениеСтроки.Шрифт		= Новый Шрифт(,,,,,Истина);	// зачеркнутый 
		
	ИначеЕсли СтатусСтроки="Нет" Тогда
		ОформлениеСтроки.ЦветТекста = Новый Цвет(153,51,0);		// бардовый
		ОформлениеСтроки.Шрифт		= Новый Шрифт();			// по умолчанию
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если НЕ ЭлементыФормы.ОсновныеДействияФормы.Кнопки.РежимПометки.Пометка ИЛИ
		ВыбраннаяСтрока.ПометкаУдаления ИЛИ ВыбраннаяСтрока.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли; 
	
	// если включен режим пометки, то при выборе строки устанавливаем значение КогдаВПродаже
	СтандартнаяОбработка = Ложь;
	
	Товар = ВыбраннаяСтрока.ПолучитьОбъект();
	ВариантНаличияВПродаже = Товар.ВариантНаличияВПродаже;
	
	Если ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.Простой Тогда
		Товар.ЕстьВПродаже = НЕ Товар.ЕстьВПродаже;
		
	ИначеЕсли ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.Сложный Тогда
		Товар.КогдаВПродаже = ?(Товар.КогдаВПродаже = мЧислоКогдаВПродаже, 0, мЧислоКогдаВПродаже);
		
	Иначе
		СтрокаИБ = Товар.КогдаВПродажеПоИБ.Найти(ИнформационнаяБаза, "ИнформационнаяБаза");
		Если СтрокаИБ = Неопределено Тогда
			СтрокаИБ = Товар.КогдаВПродажеПоИБ.Добавить();
			СтрокаИБ.ИнформационнаяБаза = ИнформационнаяБаза;
		КонецЕсли;
		
		Если ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.ПростойПоИБ Тогда
			СтрокаИБ.ЕстьВПродаже = НЕ СтрокаИБ.ЕстьВПродаже;
		Иначе
			СтрокаИБ.КогдаВПродаже = ?(СтрокаИБ.КогдаВПродаже = мЧислоКогдаВПродаже, 0, мЧислоКогдаВПродаже);
		КонецЕсли; 
		
	КонецЕсли; 
	
	Товар.Записать();
	
КонецПроцедуры	

Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.СправочникДерево.ТекущаяСтрока = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Родитель;
	КонецЕсли;
	// формирование подменю отчетов
	ИнтерфейсАдмина.СоздатьСписокОтчетов(ЭтаФорма, СправочникСписок);
	
КонецПроцедуры

// Процедура назначается динамически
// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// формы. Процедура отрабатывает выбор печатной формы.
//
Процедура ДействияФормыДействиеВыбратьПечатнуюФормы(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	
	Если ЗначениеЗаполнено(ОбъектДляПечатнойФормы) Тогда 
		ИнтерфейсАдмина.ВыбратьПечатнуюФорму(ЭтаФорма, Кнопка, "СправочникСписок",ОбъектДляПечатнойФормы);
	Иначе
		Предупреждение("Нет данных для вывода на печать!");
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникСписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если НЕ Строка = Неопределено И ЭлементыФормы.ОсновныеДействияФормы.Кнопки.РежимСортировки.Пометка Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура СправочникСписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если НЕ Строка = Неопределено И ЭлементыФормы.ОсновныеДействияФормы.Кнопки.РежимСортировки.Пометка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		НачатьТранзакцию();
		
		СписокТоваров = Новый СписокЗначений;
		СписокТоваров.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Товары");
		ЭтоГруппа = Строка.ЭтоГруппа;
		
		// проверка переносимых элементов
		Для Каждого Элемент Из ПараметрыПеретаскивания.Значение Цикл
			// группы можно перемещать отдельно, элементы отдельно
			Если Элемент.ЭтоГруппа <> ЭтоГруппа Тогда
				Возврат;
			КонецЕсли;
			СписокТоваров.Добавить(Элемент);
		КонецЦикла;
		
		Если СписокТоваров.Количество() > 1 Тогда		
			// отсортируем переносимые элементы
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Элементы.Значение
			|ПОМЕСТИТЬ Таб
			|ИЗ
			|	&Элементы КАК Элементы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Таб.Значение КАК Товар
			|ИЗ
			|	Таб КАК Таб
			|
			|УПОРЯДОЧИТЬ ПО
			|	Таб.Значение.Порядок";
			
			Запрос.УстановитьПараметр("Элементы", СписокТоваров);
			МассивЭлементов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Товар");
		Иначе
			МассивЭлементов = ПараметрыПеретаскивания.Значение;
		КонецЕсли;
		
		ПорядокПереносимогоЭлемента = МассивЭлементов[0].Порядок;
		ПорядокЗаменяегоЭлемента 	= Строка.Порядок;
		
		Если Не ПорядокПереносимогоЭлемента + ПорядокЗаменяегоЭлемента Тогда
			ПорядокПереносимогоЭлемента = 1;
		КонецЕсли;
		// Выполним проверку перед обработкой
		КолВоЭлементов = МассивЭлементов.Количество();
		Сч = 1;
		НомерПредыдущего = ПорядокПереносимогоЭлемента;
		Пока Сч < КолВоЭлементов Цикл
			Разница = НомерПредыдущего - МассивЭлементов[Сч].Порядок;
			Если Разница <> -1 Тогда
				Сообщить("Возможно перемещение только элементов, находящихся рядом");
				Возврат;
			КонецЕсли;
			НомерПредыдущего = НомерПредыдущего + 1;
			Сч = Сч + 1;			
		КонецЦикла;
		
		Если ПорядокПереносимогоЭлемента > ПорядокЗаменяегоЭлемента Тогда
			// переносим элементы, которые стоят ниже
			
			Для Каждого Элемент Из МассивЭлементов Цикл
				Объект = Элемент.ПолучитьОбъект();		
				Объект.Порядок = ПорядокЗаменяегоЭлемента;
				Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
					Возврат;
				КонецЕсли;
				ПорядокЗаменяегоЭлемента = ПорядокЗаменяегоЭлемента + 1;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Товары.Ссылка
			|ИЗ
			|	Справочник.Товары КАК Товары
			|ГДЕ
			|	Товары.Родитель = &Родитель
			|	И Товары.Порядок > &Порядок
			|	И (НЕ Товары.Ссылка В (&СписокПереносимыхЭлементов))
			|	И Товары.Владелец = &Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	Товары.Порядок";
			
			Запрос.УстановитьПараметр("Порядок"						, Строка.Порядок);
			Запрос.УстановитьПараметр("Родитель"					, ЭлементыФормы.СправочникСписок.ТекущийРодитель);
			Запрос.УстановитьПараметр("СписокПереносимыхЭлементов"	, МассивЭлементов);
			Запрос.УстановитьПараметр("Владелец"					, Отбор.Владелец.Значение);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Объект = Строка.ПолучитьОбъект();
			Объект.Порядок = ПорядокЗаменяегоЭлемента;
			Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
				Возврат;
			КонецЕсли;
			
			НовыйПорядок = ПорядокЗаменяегоЭлемента+1;
			
			Пока Выборка.Следующий() Цикл
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.Порядок = НовыйПорядок;
				Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
					Возврат;
				КонецЕсли;
				НовыйПорядок = НовыйПорядок + 1;
			КонецЦикла;
			
		Иначе
			
			// переносим элементы, которые стоят выше
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	Товары.Ссылка
			|ИЗ
			|	Справочник.Товары КАК Товары
			|ГДЕ
			|	Товары.Родитель = &Родитель
			|	И Товары.Порядок < &Порядок
			|	И Товары.Ссылка <> &Ссылка
			|	И (НЕ Товары.Ссылка В (&СписокПереносимыхЭлементов))
			|	И Товары.Владелец = &Владелец
			|
			|УПОРЯДОЧИТЬ ПО
			|	Товары.Порядок УБЫВ";
			
			Запрос.УстановитьПараметр("Порядок"						, ПорядокЗаменяегоЭлемента);
			Запрос.УстановитьПараметр("Ссылка"						, МассивЭлементов[0]);
			Запрос.УстановитьПараметр("СписокПереносимыхЭлементов"	, МассивЭлементов);
			Запрос.УстановитьПараметр("Родитель"					, ЭлементыФормы.СправочникСписок.ТекущийРодитель);
			Запрос.УстановитьПараметр("Владелец"					, Отбор.Владелец.Значение);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Сч = КолВоЭлементов;
			Пока Сч <> 0 Цикл
				Элемент = МассивЭлементов[Сч-1];
				Объект = Элемент.ПолучитьОбъект();		
				Объект.Порядок = ПорядокЗаменяегоЭлемента;
				Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
					Возврат;
				КонецЕсли;
				ПорядокЗаменяегоЭлемента = ПорядокЗаменяегоЭлемента-1;
				Сч = Сч - 1;
			КонецЦикла;
			
			Объект = Строка.ПолучитьОбъект();
			НовыйПорядок = Строка.Порядок - КолВоЭлементов;
			Объект.Порядок = НовыйПорядок;
			Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
				Возврат;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				НовыйПорядок = НовыйПорядок - 1;
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				Объект.Порядок = НовыйПорядок;
				Если НЕ ЗаписатьСправочникОбъект(Объект) Тогда
					Возврат;
				КонецЕсли;				
			КонецЦикла;			
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьСправочникОбъект(Объект)
	Попытка
		Объект.Записать();
		Возврат Истина;
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки());
		Сообщить("Изменение порядка элементов в данный момент невозможно.");
		Возврат Ложь;
	КонецПопытки;	
КонецФункции

Процедура ДействияФормыРежимСортировки(Кнопка)
	
	Отказ = Ложь;
	Для Каждого ЭлОтбора Из СправочникСписок.Отбор Цикл
		Если ЭлОтбора.Имя <> "Владелец" И ЭлОтбора.Имя <> "ПометкаУдаления" И ЭлОтбора.Использование Тогда
			Сообщить("Для сохранения произвольного порядка необходимо отключить отбор.");
			Отказ = Истина;
			Прервать;
		КонецЕсли;			
	КонецЦикла;
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		СправочникСписок.Порядок.Установить("Порядок");
		
		// отключим возможность сортировки и установки отбора
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Код.Доступность 			= Ложь;
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Наименование.Доступность 	= Ложь;
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Порядок.Доступность 		= Ложь;
		ЭлементыФормы.СправочникСписок.Колонки.Код.Видимость 						= Ложь;
		ЭлементыФормы.СправочникСписок.Колонки.Порядок.Видимость 					= Истина;
		ЭлементыФормы.СправочникСписок.ИзменятьИерархическийПросмотр				= Ложь;
		
		Для Каждого ЭлОтбора Из ЭлементыФормы.СправочникСписок.НастройкаОтбора Цикл
			Если ЭлОтбора.Имя <> "Владелец" И НЕ ЭлементыФормы.СправочникСписок.Колонки.Найти(ЭлОтбора.Имя) = Неопределено Тогда
				ЭлОтбора.Доступность = Ложь;
			КонецЕсли;			
		КонецЦикла;
		
	Иначе
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Код.Доступность 			= Истина;
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Наименование.Доступность 	= Истина;
		ЭлементыФормы.СправочникСписок.НастройкаПорядка.Порядок.Доступность 		= Истина;
		ЭлементыФормы.СправочникСписок.Колонки.Код.Видимость 						= Истина;
		ЭлементыФормы.СправочникСписок.Колонки.Порядок.Видимость 					= Ложь;
		ЭлементыФормы.СправочникСписок.ИзменятьИерархическийПросмотр				= Истина;
		
		Для Каждого ЭлОтбора Из ЭлементыФормы.СправочникСписок.НастройкаОтбора Цикл
			Если ЭлОтбора.Имя <> "Владелец" И НЕ ЭлементыФормы.СправочникСписок.Колонки.Найти(ЭлОтбора.Имя) = Неопределено Тогда
				ЭлОтбора.Доступность = Истина;
			КонецЕсли;			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПечать(Кнопка)
	Если ЗначениеЗаполнено(ОбъектДляПечатнойФормы) Тогда 
		ПолучитьОбщуюФорму("ФормаВыбораПечатныхФорм",ЭтаФорма,ОбъектДляПечатнойФормы).Открыть();
	Иначе
		Предупреждение("Нет данных для вывода на печать!");
	КонецЕсли;

КонецПроцедуры

Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	Если ЗначениеЗаполнено(ОбъектДляПечатнойФормы) Тогда 
		ОбъектДляПечатнойФормы.ПолучитьОбъект().Печать();
	Иначе
		Предупреждение("Нет данных для вывода на печать!");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНовоеМеню(Кнопка)
	
	НаимВидаМеню = "";
	Если НЕ ВвестиСтроку(НаимВидаМеню,"Введите наименование нового меню") Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(НаимВидаМеню) Тогда
		Возврат;
	КонецЕсли;
	
	СпрКаталогиТоваров = Справочники.КаталогиТоваров.СоздатьЭлемент();
	СпрКаталогиТоваров.Наименование = НаимВидаМеню;
	СпрКаталогиТоваров.Записать();
	
	ОбъектДляПечатнойФормы = Неопределено;
	Отбор.Владелец.Установить(СпрКаталогиТоваров.Ссылка);

КонецПроцедуры

Процедура ОсновныеДействияФормыКопироватьМеню(Кнопка)
	
	Если Вопрос("Скопировать текущее меню в новое?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	НаимВидаМеню = "";
	Если НЕ ВвестиСтроку(НаимВидаМеню,"Введите наименование нового меню") Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(НаимВидаМеню) Тогда
		Возврат;
	КонецЕсли;
	
	СпрКаталогиТоваров = Справочники.КаталогиТоваров.СоздатьЭлемент();
	СпрКаталогиТоваров.Наименование = НаимВидаМеню;
	СпрКаталогиТоваров.Записать();

	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Наименование КАК Наименование
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Справочник.Товары КАК Товары
	|ГДЕ
	|	Товары.Владелец = &Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	ЦеныСрезПоследних.Цена КАК Цена,
	|	ЦеныСрезПоследних.ТипЦен КАК ТипЦен,
	|	ЦеныСрезПоследних.Цена КАК МинимальнаяЦена,
	|	ЦеныСрезПоследних.Валюта КАК Валюта
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				Номенклатура В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура КАК Номенклатура
	|					ИЗ
	|						Товары)) КАК ЦеныСрезПоследних
	|		ПО Товары.Номенклатура = ЦеныСрезПоследних.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.Наименование
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
				  
	Запрос.УстановитьПараметр("Владелец", ТекущийКаталог);
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
	Для Каждого СтрЗапроса Из РезультатЗапроса.Строки Цикл
		НовыйТовар = СтрЗапроса.Ссылка.Скопировать();
		НовыйТовар.Владелец = СпрКаталогиТоваров.Ссылка; 
		НовыйТовар.Код = СтрЗапроса.Ссылка.Код; 
		НовыйТовар.Записать();
		Если СтрЗапроса.Ссылка.ЭтоГруппа Тогда
			СкопироватьНижниеУровни(НовыйТовар.ССылка, СтрЗапроса);
		Иначе
		КонецЕсли;
	КонецЦикла;
		
	ОбъектДляПечатнойФормы = Неопределено;
	Отбор.Владелец.Установить(СпрКаталогиТоваров.Ссылка);
	
КонецПроцедуры

Процедура СкопироватьНижниеУровни(Родитель,СтрЗапроса)
	
	Для Каждого Строка Из СтрЗапроса.Строки Цикл
		Если Строка.Ссылка.Код = Родитель.Код Тогда
			Продолжить;
		КонецЕсли;
		НовыйТоварСтр = Строка.Ссылка.Скопировать();
		НовыйТоварСтр.Владелец = Родитель.Владелец;
		НовыйТоварСтр.Родитель = Родитель;
		НовыйТоварСтр.Код = Строка.Ссылка.Код; 
		НовыйТоварСтр.Записать();
		Если НовыйТоварСтр.Ссылка.ЭтоГруппа Тогда
			СкопироватьНижниеУровни(НовыйТоварСтр.Ссылка, Строка);
		Иначе
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОсновныеДействияФормыУстановкаКартинок(Кнопка)
	
	Обработки.КартинкиОбъектов.ПолучитьФорму().Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ОТЧЕТОВ

// Процедура назначается динамически
// Процедура вызывается при выборе пункта подменю ПодменюОтчеты командной панели
// формы. Процедура отрабатывает выбор печатной формы.
// Подключение данной процедуры-обработчика выполняется из кода конфигурации
//
Процедура ДействияФормыДействиеВыбратьОтчет(Кнопка) 
	
	ИнтерфейсАдмина.ВыбратьОтчет(ЭтаФорма, Кнопка, "СправочникСписок");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОСНОВНОЕ ТЕЛО МОДУЛЯ

Если глВерсия>1 Тогда
	ИнформационнаяБаза = ПараметрыСеанса.ТекущаяИБ;
КонецЕсли;

//ИнтерфейсАдмина.ЗаполнитьСписокДнейНедели(СписокКогдаВПродаже);
// по умолчанию, поставим галочку на текущий день недели
//СписокКогдаВПродаже[ДеньНедели(ТекущаяДата())-1].Пометка = Истина;

ПриИзмененииДнейНедели();

СправочникСписок.Отбор.ПометкаУдаления.Установить(Ложь);

