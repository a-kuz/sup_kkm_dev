Перем МассивСтраниц;						// для упрощения процедуры переключения страниц
Перем МассивНесохраняемыхЭлементовФормы;	// несохраняемых в реквизите ПараметрыРМ (вспомогательные элементы диалога)
Перем МассивИсключенийПриВосстановлении;	// элементы, данные которых заполняются особым образом
Перем ЕстьГруппыОплаты;
Перем СписокДействийПриОткрытииЗакрытииСмены;
Перем ФормаСкрытияМеню;
Перем ТекущееРМ;
////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ПерейтиВРаздел(ИмяРаздела) Экспорт

	ТекущаяСтрока = ДеревоСтраниц.Строки.Найти(ИмяРаздела,"Имя",Истина);
	Если ТекущаяСтрока <> Неопределено Тогда
		ЭлементыФормы.ДеревоСтраниц.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли; 

КонецПроцедуры
 
// Описание процедуры
//
// Параметры:
//	Параметр1	- описание параметра
//
Процедура ИнициализацияПараметровНастройки()
	
	МассивНесохраняемыхЭлементовФормы = Новый Массив;
	МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.ДеревоСтраниц);
	МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.СписокРМ);
	МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.Наименование);
	МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.ПрофильВхода);
	МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.ЗаказСписокКолонок);

	Если глВерсия=1 Тогда
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.ПланЗалаСписок);
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.ПланЗалаПериодОбновления);
		
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.СкидкиЕстьНаЗаказ);
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.СкидкаНаЗаказ);
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.СкидкиДоступРучные);
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.СкидкиВариантКомбинирования);
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.СкидкиПорядок);
	КонецЕсли;

	Если глВерсия<3 Тогда
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.СписокКЭП);
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.КЭПВыбиратьКомУстройствоПоНомеру);
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.ДоставкаЕсть);
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.ДоставкаРежимИспользования);
		МассивНесохраняемыхЭлементовФормы.Добавить(ЭлементыФормы.ДоставкаСписокЗаказовОформление);
	КонецЕсли;

	МассивИсключенийПриВосстановлении = Новый Массив;
	МассивИсключенийПриВосстановлении.Добавить(ЭлементыФормы.Тип);				// это реквизит справочника, поэтому он сам заполняется
	МассивИсключенийПриВосстановлении.Добавить(ЭлементыФормы.МестоРеализации);	// это реквизит справочника, поэтому он сам заполняется
	МассивИсключенийПриВосстановлении.Добавить(ЭлементыФормы.ККМГруппыОплаты);
	МассивИсключенийПриВосстановлении.Добавить(ЭлементыФормы.ГруппыПечати);
	МассивИсключенийПриВосстановлении.Добавить(ЭлементыФормы.ДействияПриОткрытииСмены);
	МассивИсключенийПриВосстановлении.Добавить(ЭлементыФормы.ДействияПриЗакрытииСмены);
	МассивИсключенийПриВосстановлении.Добавить(ЭлементыФормы.ПечатьСчетаТаблицаШапки);
	МассивИсключенийПриВосстановлении.Добавить(ЭлементыФормы.ПечатьСчетаТаблицаПодвала);
	МассивИсключенийПриВосстановлении.Добавить(ЭлементыФормы.МестоПроизводстваТаблица);
	// < КС_ВДВ ------------------------------------------------------------ 
	МассивИсключенийПриВосстановлении.Добавить(ЭлементыФормы.Станция);	// это реквизит справочника, поэтому он сам заполняется
	// КС_ВДВ > ------------------------------------------------------------ 
	
	//-------------------------------------------------------------
	СписокВыбора = ЭлементыФормы.БлокировкаАвтоВремя.СписокВыбора;
	СписокВыбора.Добавить(  10, "10 секунд");
	СписокВыбора.Добавить(  20, "20 секунд");
	СписокВыбора.Добавить(  30, "30 секунд");
	СписокВыбора.Добавить(  60, " 1 минута");
	СписокВыбора.Добавить( 180, " 3 минуты");
	СписокВыбора.Добавить( 300, " 5 минут");
	СписокВыбора.Добавить( 600, "10 минут");
	СписокВыбора.Добавить( 900, "15 минут");
	СписокВыбора.Добавить(1800, "30 минут");

	//-------------------------------------------------------------
	Если глВерсия=3 Тогда
		ДоставкаСписокЗаказовОформление.Колонки.Добавить("Статус");
		ДоставкаСписокЗаказовОформление.Колонки.Добавить("Цвет"	, Новый ОписаниеТипов("Цвет"));
		ДоставкаСписокЗаказовОформление.Колонки.Добавить("Шрифт", Новый ОписаниеТипов("Шрифт"));
		Для каждого СтатусДоставки Из Перечисления.СтатусыДоставки Цикл
			ДоставкаСписокЗаказовОформление.Добавить().Статус = СтатусДоставки;
		КонецЦикла; 
	КонецЕсли; 
	
	//-------------------------------------------------------------
	ЗаказСписокКолонок.Добавить("Ном","№ строки");
	ЗаказСписокКолонок.Добавить("Статус");
	ЗаказСписокКолонок.Добавить("Количество");
	ЗаказСписокКолонок.Добавить("Удалено");
	ЗаказСписокКолонок.Добавить("Цена");
	ЗаказСписокКолонок.Добавить("Сумма");   
	ЗаказСписокКолонок.Добавить("ЦенаРеализации", "Цена реализации");
	ЗаказСписокКолонок.Добавить("СуммаРеализации", "Сумма реализации");   

	//-------------------------------------------------------------
	СписокДействийПриОткрытииЗакрытииСмены = Новый СписокЗначений;
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("ОткрытиеСмены"			, "Открытие смены");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("ЗакрытиеСмены"			, "Закрытие смены");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("ОтчетККМ_Z"			, "ККМ: Z-отчет");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("ОтчетККМ_X"			, "ККМ: Х-отчет");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("ОтчетККМ_ПоСекциям"	, "ККМ: Отчет по секциям");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("ОтчетККМ_ПоКассирам"	, "ККМ: Отчет по кассирам");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("ОтчетККМ_Почасовой"	, "ККМ: Почасовой отчет");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("ОтчетККМ_ОткрытиеСмены", "ККМ: Принудительное открытие смены");
	Если глВерсия>1 Тогда
		СписокДействийПриОткрытииЗакрытииСмены.Добавить("ОтчетПС_ЖурналОпераций"	, "Платежная система: Журнал операций");
		СписокДействийПриОткрытииЗакрытииСмены.Добавить("ОтчетПС_ИтогиОпераций"		, "Платежная система: Итоги операций");
		СписокДействийПриОткрытииЗакрытииСмены.Добавить("ОтчетПС_ЗакрытиеСмены"		, "Платежная система: Закрытие смены");
	КонецЕсли;
	// В отчетах через второй "_" передается ПараметрФормирования.
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("Отчет_СистемныйБаланс"				, "Отчет: Системный баланс");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("Отчет_ОтчетПоВыручке"				, "Отчет: Общая выручка");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("Отчет_ОтчетПоВыручке_ГруппаОплаты"	, "Отчет: Общая выручка (по группам оплаты)");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("Отчет_ОтчетПоРасходу"				, "Отчет: Общий расход блюд");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("Отчет_ОтчетПоРасходу_ГруппаПечати"	, "Отчет: Общий расход блюд (по группам печати)");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("Отчет_ПродажиПоКатегориям"			, "Отчет: Продажи по категориям");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("Отчет_НачисленияПоКартам"			, "Отчет: Начисления по картам");
	Если глВерсия>1 Тогда
		СписокДействийПриОткрытииЗакрытииСмены.Добавить("Отчет_ОтчетПоБроням"		         , "Отчет: По броням");
		СписокДействийПриОткрытииЗакрытииСмены.Добавить("Отчет_ОтчетПоПредварительнымЗаказам", "Отчет: Предварительные заказы");
	КонецЕсли;
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("СинхронизироватьВремяККМ"	, "Синхронизировать время с ККМ");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("ВыгрузкаДанных"		    , "Выгрузка данных за смену");
	СписокДействийПриОткрытииЗакрытииСмены.Добавить("Регламент"					, "Внешняя регламентная обработка");
	
	ЭлементыФормы.ДействияПриОткрытииСмены.Колонки.Действие.ЭлементУправления.СписокВыбора = СписокДействийПриОткрытииЗакрытииСмены;
	
	СписокВыбора = ЭлементыФормы.ДействияПриОткрытииСмены.Колонки.Запрос.ЭлементУправления.СписокВыбора;
	СписокВыбора.Добавить(Ложь	, "Без запроса");
	СписокВыбора.Добавить(Истина, "С запросом");
	
	ЭлементыФормы.ДействияПриЗакрытииСмены.Колонки.Действие.ЭлементУправления.СписокВыбора = СписокДействийПриОткрытииЗакрытииСмены;
	
	СписокВыбора = ЭлементыФормы.ДействияПриЗакрытииСмены.Колонки.Запрос.ЭлементУправления.СписокВыбора;
	СписокВыбора.Добавить(Ложь	, "Без запроса");
	СписокВыбора.Добавить(Истина, "С запросом");
	
	//-----------------------------------------------
	// Производство
    
	//Если глВерсия>1 Тогда
	//	ПроизводствоСписокБлюдОформление.Колонки.Добавить("Наименование",,,50);
	//	ПроизводствоСписокБлюдОформление.Колонки.Добавить("Цвет"	, Новый ОписаниеТипов("Цвет"),"Цвет строки ",10);
	//	//ПроизводствоСписокБлюдОформление.Колонки.Добавить("Шрифт", Новый ОписаниеТипов("Шрифт"),,10);
	//	ПроизводствоСписокБлюдОформление.Добавить().Наименование = "Время приготовления блюда в норме";
	//	ПроизводствоСписокБлюдОформление.Добавить().Наименование = "Внимание время приготовления блюда заканчивается";
	//	ПроизводствоСписокБлюдОформление.Добавить().Наименование = "Время приготовления блюда просрочено";
	//	ПроизводствоСписокБлюдОформление.Добавить().Наименование = "Отмена приготовления блюда";
	//КонецЕсли; 
	
	//-----------------------------------------------
	// видимость реквизитов, зависящих только от внешних факторов
	
	Если глВерсия=1 Тогда
		ЭлементыФормы.ПанельВидЗаказаСпецификиДозаказ.Видимость	= Ложь;
	КонецЕсли;
	
КонецПроцедуры
 
// Заполнение дерева страниц в зависимости от версии и общих настроек
//
Процедура ЗаполнитьДеревоСтраниц()
	
	// запомним текущую строку, чтобы после заполнения восстановить если надо
	ТекущаяСтрока = ЭлементыФормы.ДеревоСтраниц.ТекущаяСтрока;
	ИмяСтраницы = ?(ТекущаяСтрока = Неопределено, Неопределено, ТекущаяСтрока.Имя);
	
	// очищаем и заполняем в соответствии с текущими условиями
	ДеревоСтраниц.Колонки.Очистить();
	ДеревоСтраниц.Строки.Очистить();
	
	ДеревоСтраниц.Колонки.Добавить("Заголовок");
	ДеревоСтраниц.Колонки.Добавить("Имя");
	ДеревоСтраниц.Колонки.Добавить("Картинка");
	
	ЭлементыФормы.ДеревоСтраниц.СоздатьКолонки();
	ЭлементыФормы.ДеревоСтраниц.Колонки.Имя.Видимость = Ложь;
	ЭлементыФормы.ДеревоСтраниц.Колонки.Картинка.Видимость = Ложь;
	ЭлементыФормы.ДеревоСтраниц.Колонки.Заголовок.ДанныеКартинки = "Картинка";
	
	Если СправочникОбъект.Ссылка.Пустая() Тогда
		// пустой список РМ
		Возврат;
	КонецЕсли; 
	
	Страница = ДеревоСтраниц.Строки.Добавить();
	Страница.Имя = "Наименование";	Страница.Заголовок = "Наименование, профиль входа";
	Страница.Картинка = БиблиотекаКартинок.МестаРеализации;
	
	ЭтоCallЦентр	= 0;
	ЭтоПроизводство = 0;
	
	Страница = ДеревоСтраниц.Строки.Добавить();
	Страница.Имя = "Производство";	Страница.Заголовок = "Настройки производство";
	Страница.Картинка = БиблиотекаКартинок.Настройка;

	//--------------------------------------------------------------------------------------------
	Страница = ДеревоСтраниц.Строки.Добавить();
	Страница.Имя = "ПараметрыЭкрана";	Страница.Заголовок = "Тип интерфейса, блокировка";
	Страница.Картинка = БиблиотекаКартинок.НастройкаЭкранногоМеню;
	
	Страница = ДеревоСтраниц.Строки.Добавить();
	Страница.Имя = "ИдентификацияКлиента";	Страница.Заголовок = "Идентификация клиента";
	Страница.Картинка = БиблиотекаКартинок.КартаДоступа;
	
	Страница = ДеревоСтраниц.Строки.Добавить();
	Страница.Имя = "Оплата";				Страница.Заголовок = "Оплата заказа и печать чека";
	Страница.Картинка = БиблиотекаКартинок.Дебет;
		
	//--------------------------------------------------------------------------------------------
	Страница = ДеревоСтраниц.Строки.Добавить();
	Страница.Имя = "Пустая";			Страница.Заголовок = "Торговое оборудование";
	Страница.Картинка = БиблиотекаКартинок.ТорговоеОборудование;
	
	ПодСтраница = Страница.Строки.Добавить();
	ПодСтраница.Имя = "КассовоеМесто";		ПодСтраница.Заголовок = "Кассовое место";
	ПодСтраница.Картинка = БиблиотекаКартинок.СправочникЭлемент;
	
	ПодСтраница = Страница.Строки.Добавить();
	ПодСтраница.Имя = "ПлатежнаяСистема";	ПодСтраница.Заголовок = "Банковская платежная система";
	ПодСтраница.Картинка = БиблиотекаКартинок.СправочникЭлемент;
	
	ПодСтраница = Страница.Строки.Добавить();
	ПодСтраница.Имя = "СУ";			ПодСтраница.Заголовок = "Устройства ввода";
	ПодСтраница.Картинка = БиблиотекаКартинок.СправочникЭлемент;

	ПодСтраница = Страница.Строки.Добавить();
	ПодСтраница.Имя = "Весы";	ПодСтраница.Заголовок = "Электронные весы";
	ПодСтраница.Картинка = БиблиотекаКартинок.СправочникЭлемент;

	ПодСтраница = Страница.Строки.Добавить();
	ПодСтраница.Имя = "ДП";	ПодСтраница.Заголовок = "Дисплей покупателя";
	ПодСтраница.Картинка = БиблиотекаКартинок.СправочникЭлемент;
	
	Страница = ДеревоСтраниц.Строки.Добавить();
	Страница.Имя = "Пустая";			Страница.Заголовок = "Оформление заказа";
	Страница.Картинка = БиблиотекаКартинок.НастройкаРабочихМест;

	ПодСтраница = Страница.Строки.Добавить();
	ПодСтраница.Имя = "Заказ";					ПодСтраница.Заголовок = "Общие настройки";
	ПодСтраница.Картинка = БиблиотекаКартинок.СправочникЭлемент;
	
	
	 	
	ПодСтраница = Страница.Строки.Добавить();
	ПодСтраница.Имя = "ВидЗаказа";				ПодСтраница.Заголовок = "Вид заказа";
	ПодСтраница.Картинка = БиблиотекаКартинок.СправочникЭлемент;
	
	ПодСтраница = Страница.Строки.Добавить();
	ПодСтраница.Имя = "ВидМеню";				ПодСтраница.Заголовок = "Вид меню";
	ПодСтраница.Картинка = БиблиотекаКартинок.СправочникЭлемент;
	
	Страница = ДеревоСтраниц.Строки.Добавить();
		Страница.Имя = "ПечатьСчета";			Страница.Заголовок = "Печать счета";
		Страница.Картинка = БиблиотекаКартинок.Пречек;
		
		ПодСтраница = Страница.Строки.Добавить();
		ПодСтраница.Имя = "ПечатьСчетаШапкаПодвал";		ПодСтраница.Заголовок = "Шапка, подвал";
		ПодСтраница.Картинка = БиблиотекаКартинок.СправочникЭлемент;
		
	ПодСтраница = Страница.Строки.Добавить();
	ПодСтраница.Имя = "ПечатьСчетаДополнительно";	ПодСтраница.Заголовок = "Выбор языка";
	ПодСтраница.Картинка = БиблиотекаКартинок.СправочникЭлемент;

	
	
	Страница = ДеревоСтраниц.Строки.Добавить();
	Страница.Имя = "ЖурналЗаказов";			Страница.Заголовок = "Настройка журнала заказов";
	Страница.Картинка = БиблиотекаКартинок.СписокЗаказов;
	
	
	Страница = ДеревоСтраниц.Строки.Добавить();
	Страница.Имя = "ПечатьОтчетов";		Страница.Заголовок = "Печать отчетов";
	Страница.Картинка = БиблиотекаКартинок.НастройкаОтчета;
	
		Страница = ДеревоСтраниц.Строки.Добавить();
		Страница.Имя = "Прочее";			Страница.Заголовок = "Прочее";
		Страница.Картинка = БиблиотекаКартинок.Прочее;

	
	

									
  	//--------------------------------------------------------------------------------------------
	// для удобства навигации, скопируем все строки дерева в линейный массив
	МассивСтраниц = Новый Массив;
	ЗаполнитьМассивСтраниц(ДеревоСтраниц.Строки);
	
	//--------------------------------------------------------------------------------------------
	// при повторном открытии дерево само не разворачивается
	Для каждого Страница Из ДеревоСтраниц.Строки Цикл
		ЭлементыФормы.ДеревоСтраниц.Развернуть(Страница, Истина);
	КонецЦикла; 
	
	// восстанавливаем текущую позицию
	ТекущаяСтрока = ДеревоСтраниц.Строки.Найти(ИмяСтраницы,"Имя",Истина);
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = ДеревоСтраниц.Строки[0];
	КонецЕсли; 
	ЭлементыФормы.ДеревоСтраниц.ТекущаяСтрока = ТекущаяСтрока;
	
КонецПроцедуры

// Преобразование дерева страниц в линейный массив
//
Процедура ЗаполнитьМассивСтраниц(СтрокиУровня)
	
	Для каждого Строка Из СтрокиУровня Цикл
		МассивСтраниц.Добавить(Строка);
		Если ЗначениеЗаполнено(Строка.Строки) Тогда
			ЗаполнитьМассивСтраниц(Строка.Строки);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Отработка кнопок "<Назад" и "Вперед>"
//
Процедура ПереключитьСтраницу(Направление, ИндексСтраницы=Неопределено)
	
	Если ИндексСтраницы = Неопределено Тогда
		ИндексСтраницы = МассивСтраниц.Найти( ЭлементыФормы.ДеревоСтраниц.ТекущаяСтрока );
	КонецЕсли; 
	
	ИндексСтраницы = ИндексСтраницы + Направление;
	ТекущаяСтрока = МассивСтраниц[ИндексСтраницы];
	
	Если ТекущаяСтрока.Имя = "Пустая" Тогда
		ПереключитьСтраницу(Направление,ИндексСтраницы);
	Иначе
		ЭлементыФормы.ДеревоСтраниц.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

// Восстанавливает структуру параметров из реквизита ПараметрыРМ и проставляет значения 
// элементов формы, связанных с данными, кроме указанных в МассивНесохраняемыхЭлементовФормы.
// Вызывается также при запуске РМ для приведения параметров в соответствие с текущим релизом
//
Процедура ВосстановитьПараметры() Экспорт 
	
	Перем ЗначениеПараметра;	

	Попытка
		СтруктураПараметров = ЗначениеИзСтрокиВнутр(ПараметрыРМ);
	Исключение
		СтруктураПараметров = Новый Структура;
	КонецПопытки;
	Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли; 
	
	Для каждого Элемент Из ЭлементыФормы Цикл
		
		Если НЕ ЗначениеЗаполнено(Элемент.Данные) Тогда
			Продолжить;
		ИначеЕсли МассивНесохраняемыхЭлементовФормы.Найти(Элемент) <> Неопределено Тогда
			Продолжить;
		ИначеЕсли МассивИсключенийПриВосстановлении.Найти(Элемент) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураПараметров.Свойство(Элемент.Данные, ЗначениеПараметра);
		
		Элемент.Значение = Элемент.ТипЗначения.ПривестиЗначение( ЗначениеПараметра );
		
		// для элементов формы, значения которых выбираются из списка,
		// подставим значения по умолчанию равными первому значению из списка
		Если Элемент.Значение=Неопределено Тогда
			Попытка
				Элемент.Значение = Элемент.СписокВыбора[0].Значение;
			Исключение
			КонецПопытки;
		КонецЕсли; 
		
		Если Элемент.ТипЗначения.СодержитТип( Тип("СправочникСсылка.ТорговоеОборудование") ) Тогда
			Элемент.РедактированиеТекста = Ложь;
		КонецЕсли; 
		
		Если Элемент.ТипЗначения.СодержитТип( Тип("ПеречислениеСсылка.ТипыОграниченийПоСписку") ) И Элемент.Значение.Пустая() Тогда
			Элемент.Значение = Перечисления.ТипыОграниченийПоСписку.Нет;
		КонецЕсли; 
		
	КонецЦикла; 
	
	//------------------------------------------------------------
	// необходимые преобразования после автоматического заполнения и установка значений по умолчанию
	
	Если НЕ ЗначениеЗаполнено(Тип) Тогда
		Тип = Перечисления.ТипыРМ.ПустаяСсылка();
	КонецЕсли; 
	
	Если Тип = Перечисления.ТипыРМ.СтанцияОплаты Тогда
		Если ИнтерфейсРазмерОкна = 0 Или ИнтерфейсРазмерОкна = 3 Тогда
			ИнтерфейсТип = 9;
		Иначе
			ИнтерфейсТип = 8;
		КонецЕсли;
		
		//ПараметрыРМ.ИнтерфейсТип = ИнтерфейсТип;
	КонецЕсли;
	
	
	ЗаполнитьСписокВыбораРазмеровОкна();
	
	//------------------------------------------------------------
	// группы оплаты
	ЕстьГруппыОплаты = Константы.ИспользоватьГруппыОплаты.Получить();
	
	Если ЕстьГруппыОплаты Тогда
		
		СтруктураПараметров.Свойство("ККМГруппыОплаты", ЗначениеПараметра);
		
		ККМГруппыОплаты.Очистить();
		Выборка = Справочники.ГруппыОплаты.Выбрать(,,,"Код");
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли; 
			
			ГруппаОплаты = ККМГруппыОплаты.Добавить();
			ГруппаОплаты.Группа = Выборка.Ссылка;
			
			Если ЗначениеЗаполнено(ЗначениеПараметра) Тогда
				СтрокаТаблицы = ЗначениеПараметра.Найти(ГруппаОплаты.Группа, "Группа");
				Если СтрокаТаблицы<>Неопределено Тогда
					ГруппаОплаты.ККМ = СтрокаТаблицы.ККМ;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЕсли; 
	
	//------------------------------------------------------------
	// группы печати	
	СтруктураПараметров.Свойство("ГруппыПечати", ЗначениеПараметра);
	Если ТипЗнч(ЗначениеПараметра) = Тип("ДеревоЗначений") Тогда
		СохраненныеГруппыПечати = ЗначениеПараметра.Строки;
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("ТаблицаЗначений") Тогда
		СохраненныеГруппыПечати = ЗначениеПараметра;
	Иначе
		СохраненныеГруппыПечати = Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПечати
							|ГДЕ НЕ ПометкаУдаления И НЕ ЭтоГруппа И ЕстьПринтер
							|УПОРЯДОЧИТЬ ПО Наименование
							|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ГруппыПечати.Строки.Очистить();
	Пока Выборка.Следующий() Цикл
		
		ГруппаПечати = ГруппыПечати.Строки.Добавить();
		ГруппаПечати.Группа			= Выборка.Ссылка;
		ГруппаПечати.ПроверкаСвязи	= Истина;
		
		Если ЗначениеЗаполнено(СохраненныеГруппыПечати) Тогда
			СтрокаТаблицы = СохраненныеГруппыПечати.Найти(ГруппаПечати.Группа, "Группа");
			Если СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ЗаполнитьЗначенияСвойств(ГруппаПечати, СтрокаТаблицы);
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("ДеревоЗначений") Тогда
				Для каждого ДопСтрока Из СтрокаТаблицы.Строки Цикл
					ЗаполнитьЗначенияСвойств(ГруппаПечати.Строки.Добавить(), ДопСтрока);
				КонецЦикла; 
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
		
	//------------------------------------------------------------
	НевидимыеКолонкиЗаказа = Неопределено;
	СтруктураПараметров.Свойство("НевидимыеКолонкиЗаказа", НевидимыеКолонкиЗаказа);
	// раньше был список, проверим для совместимости
	Если ТипЗнч(НевидимыеКолонкиЗаказа) = Тип("СписокЗначений") Тогда
		НевидимыеКолонкиЗаказа = НевидимыеКолонкиЗаказа.ВыгрузитьЗначения();
	ИначеЕсли ТипЗнч(НевидимыеКолонкиЗаказа) <> Тип("Массив") Тогда
		НевидимыеКолонкиЗаказа = Новый Массив;
	КонецЕсли;
	
	Для каждого КолонкаЗаказа Из ЗаказСписокКолонок Цикл
		КолонкаЗаказа.Пометка = НевидимыеКолонкиЗаказа.Найти(КолонкаЗаказа.Значение) = Неопределено;
	КонецЦикла; 
	
	Если ЗаказВыделятьДозаказыЦветНечет = Новый Цвет(0,0,0) Тогда
		ЭлементыФормы.ЗаказВыделятьДозаказыЦветНечет.Значение = Новый Цвет(220,220,220);
	КонецЕсли; 
	Если ЗаказВыделятьДозаказыЦветЧет = Новый Цвет(0,0,0) Тогда
		ЭлементыФормы.ЗаказВыделятьДозаказыЦветЧет.Значение = Новый Цвет(192,192,192);
	КонецЕсли; 
	
	//------------------------------------------------------------
	Если ДоставкаСписокЗаказовОформление.Колонки.Количество() <> 0 Тогда
		ДоставкаСписокЗаказовОформление.ЗаполнитьЗначения(Неопределено, "Цвет, Шрифт");
		Если СтруктураПараметров.Свойство("ДоставкаСписокЗаказовОформление", ЗначениеПараметра) Тогда
			Для каждого СтрокаПараметра Из ЗначениеПараметра Цикл
				СтрокаОформления = ДоставкаСписокЗаказовОформление.Найти(СтрокаПараметра.Статус, "Статус");
				Если ЗначениеЗаполнено(СтрокаОформления) Тогда
					ЗаполнитьЗначенияСвойств(СтрокаОформления, СтрокаПараметра);
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли; 
	
	//------------------------------------------------------------
	Для каждого ТипСкидки Из Перечисления.ТипыСкидок Цикл
		Если СкидкиПорядок.НайтиПоЗначению(ТипСкидки) = Неопределено Тогда
			СкидкиПорядок.Добавить( ТипСкидки );
		КонецЕсли; 
	КонецЦикла; 
	
	//------------------------------------------------------------
	ДействияПриОткрытииСмены.Очистить();
	Если СтруктураПараметров.Свойство("ДействияПриОткрытииСмены", ЗначениеПараметра) Тогда
		Для каждого ТекСтрока Из ЗначениеПараметра Цикл
			ЗаполнитьЗначенияСвойств(ДействияПриОткрытииСмены.Добавить(), ТекСтрока);
		КонецЦикла; 
	КонецЕсли; 
	
	ДействияПриЗакрытииСмены.Очистить();
	Если СтруктураПараметров.Свойство("ДействияПриЗакрытииСмены", ЗначениеПараметра) Тогда
		Для каждого ТекСтрока Из ЗначениеПараметра Цикл
			ЗаполнитьЗначенияСвойств(ДействияПриЗакрытииСмены.Добавить(), ТекСтрока);
		КонецЦикла; 
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СтруктураПараметров) Тогда
		СтрОткрытиеСмены = ДействияПриОткрытииСмены.Добавить();
		СтрОткрытиеСмены.Запрос = Ложь;
		СтрОткрытиеСмены.Действие = "ОткрытиеСмены";
		
		СтрЗакрытиеСмены = ДействияПриЗакрытииСмены.Добавить();
		СтрЗакрытиеСмены.Запрос = Ложь;
		СтрЗакрытиеСмены.Действие = "ЗакрытиеСмены";
	КонецЕсли;
		
	//------------------------------------------------------------
	ПечатьСчетаТаблицаШапки.Очистить();
	Если СтруктураПараметров.Свойство("ПечатьСчетаТаблицаШапки", ЗначениеПараметра) Тогда
		Для каждого ТекСтрока Из ЗначениеПараметра Цикл
			ЗаполнитьЗначенияСвойств(ПечатьСчетаТаблицаШапки.Добавить(), ТекСтрока);
		КонецЦикла; 
	КонецЕсли; 
	
	ПечатьСчетаТаблицаПодвала.Очистить();
	Если СтруктураПараметров.Свойство("ПечатьСчетаТаблицаПодвала", ЗначениеПараметра) Тогда
		Для каждого ТекСтрока Из ЗначениеПараметра Цикл
			ЗаполнитьЗначенияСвойств(ПечатьСчетаТаблицаПодвала.Добавить(), ТекСтрока);
		КонецЦикла; 
	КонецЕсли;
	
	//------------------------------------------------------------
	Если НЕ ЗначениеЗаполнено(БроньРабочееВремяКон) Тогда
	   ЭлементыФормы.БроньРабочееВремяКон.Значение = Дата(1,1,1,23,59,59);
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(БроньПредоплатаВариантОплаты) ИЛИ БроньПредоплатаВариантОплаты.Тип <> Перечисления.ТипыОплаты.Безнал Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.ВариантыОплаты 
								|ГДЕ НЕ ПометкаУдаления И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Безнал)
								|");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЭлементыФормы.БроньПредоплатаВариантОплаты.Значение = Выборка.Ссылка;
		КонецЕсли;  
	КонецЕсли;
	
	//------------------------------------------------------------
	Если ПечатьОтчетовСистемыйБалансРазделы.Количество()<>6 Тогда
		ПечатьОтчетовСистемыйБалансРазделы.Очистить();
		ПечатьОтчетовСистемыйБалансРазделы.Добавить(1,"Раздел1. Выручка", Истина);
		ПечатьОтчетовСистемыйБалансРазделы.Добавить(2,"Раздел2. Удаления", Истина);
		ПечатьОтчетовСистемыйБалансРазделы.Добавить(3,"Раздел3. Средние показатели", Истина);
		ПечатьОтчетовСистемыйБалансРазделы.Добавить(4,"Раздел4. Расшифровка по статусу заказов", Истина);
		ПечатьОтчетовСистемыйБалансРазделы.Добавить(5,"Раздел5. Скидки и наценки", Истина);
		ПечатьОтчетовСистемыйБалансРазделы.Добавить(6,"Раздел6. Начисления и удержания", Истина);
	КонецЕсли; 
	
	//------------------------------------------------------------
	ЖурналЗаказовДавностьВозвратовКолвоПериодов	= Макс(1, ЖурналЗаказовДавностьВозвратовКолвоПериодов);
	
	
	
КонецПроцедуры

// Заполняет переданную структуру значениям настройки РМ.
// Структура заполняется автоматически по всем элементам формы, связанным с данными, 
// кроме указанных в МассивНесохраняемыхЭлементовФормы.
// Вызывается также при запуске РМ для приведения параметров в соответствие с возможными изменениями от релиза к релизу
//
Процедура СохранитьПараметры(СтруктураПараметров) Экспорт
	
	Если НЕ ККМЕстьДоп Тогда
		ККМСписокДоп.Очистить();
	КонецЕсли; 
	
	//------------------------------------------------------------
	Если ДействияПриОткрытииСмены.Найти("ОткрытиеСмены","Действие") = Неопределено Тогда
		ДействияПриОткрытииСмены.ЗаполнитьЗначения(0,"Когда");
		ОткрытиеСмены = Неопределено;
	Иначе
		ОткрытиеСмены = ДействияПриОткрытииСмены.Индекс(ДействияПриОткрытииСмены.Найти("ОткрытиеСмены","Действие"));
	КонецЕсли;
	
	Для н = 0 По ДействияПриОткрытииСмены.Количество()-1 Цикл
		ТекДействие = ДействияПриОткрытииСмены[н];
		Если ТекДействие.Действие = "Регламент" Тогда
			ТекДействие.Наименование = "Регламент: "+ТекДействие.ПараметрДействия;
		Иначе
			ТекДействие.Наименование = СписокДействийПриОткрытииЗакрытииСмены.НайтиПоЗначению(ТекДействие.Действие).Представление;
		КонецЕсли; 
		
		Если ОткрытиеСмены = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если н < ОткрытиеСмены Тогда
			ТекДействие.Когда = 0;  // до открытия
		ИначеЕсли н > ОткрытиеСмены Тогда
			ТекДействие.Когда = 1;  // после открытия
		Иначе
			ТекДействие.Когда = 2;  // открытие
		КонецЕсли;
		
	КонецЦикла; 
    	
	Если ДействияПриЗакрытииСмены.Найти("ЗакрытиеСмены","Действие") = Неопределено Тогда
		ДействияПриЗакрытииСмены.ЗаполнитьЗначения(0,"Когда");
		ЗакрытиеСмены = Неопределено;
	Иначе
		ЗакрытиеСмены = ДействияПриЗакрытииСмены.Индекс(ДействияПриЗакрытииСмены.Найти("ЗакрытиеСмены","Действие"));
	КонецЕсли;
	
	Для н = 0 По ДействияПриЗакрытииСмены.Количество()-1 Цикл
		ТекДействие = ДействияПриЗакрытииСмены[н];
		Если ТекДействие.Действие = "Регламент" Тогда
			ТекДействие.Наименование = "Регламент: "+ТекДействие.ПараметрДействия;
		Иначе
			ТекДействие.Наименование = СписокДействийПриОткрытииЗакрытииСмены.НайтиПоЗначению(ТекДействие.Действие).Представление;
		КонецЕсли; 
		
		Если ЗакрытиеСмены = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если н < ЗакрытиеСмены Тогда
			ДействияПриЗакрытииСмены[н].Когда = 0;  // до закрытия
		ИначеЕсли н > ЗакрытиеСмены Тогда
			ДействияПриЗакрытииСмены[н].Когда = 1;  // после закрытия
		Иначе
			ДействияПриЗакрытииСмены[н].Когда = 2;  // закрытие
		КонецЕсли;
		
	КонецЦикла; 
	
	//------------------------------------------------------------
	// запись значений настройки в структуру параметров
	Для каждого Элемент Из ЭлементыФормы Цикл
		
		Если НЕ ЗначениеЗаполнено(Элемент.Данные) Тогда
			Продолжить;
		ИначеЕсли МассивНесохраняемыхЭлементовФормы.Найти(Элемент) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураПараметров.Вставить(Элемент.Данные, Элемент.Значение);
		
	КонецЦикла; 
	Если Тип = Перечисления.ТипыРМ.СтанцияОплаты Или Тип = Перечисления.ТипыРМ.СтанцияОплатыКМ Или Тип = Перечисления.ТипыРМ.СтанцияОплатыМОКП Или Тип = Перечисления.ТипыРМ.СтанцияПовараМОКП Тогда
		Если ИнтерфейсРазмерОкна = 0 Или ИнтерфейсРазмерОкна = 3 Тогда
			ИнтерфейсТип = 9;
		Иначе
			ИнтерфейсТип = 8;
		КонецЕсли;

		СтруктураПараметров.Вставить("ИнтерфейсТип", ИнтерфейсТип);
		Если глПараметрыРМ <> Неопределено Тогда
			глПараметрыРМ.Вставить("ИмяСтиля", "СтанцияОплаты")
		КонецЕсли;
		СтруктураПараметров.Вставить("ИмяСтиля", "СтанцияОплаты")
	ИначеЕсли Тип = Перечисления.ТипыРМ.СтанцияСканирования Тогда
		Если ИнтерфейсРазмерОкна = 0 Или ИнтерфейсРазмерОкна = 3 Тогда
			ИнтерфейсТип = 9;
		Иначе
			ИнтерфейсТип = 8;
		КонецЕсли;

		СтруктураПараметров.Вставить("ИнтерфейсТип", ИнтерфейсТип);
		
		Если глПараметрыРМ <> Неопределено Тогда
			глПараметрыРМ.Вставить("ИмяСтиля", "СтанцияОплаты")
		КонецЕсли;
		
	ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.ТипыРМ.Автокасса") Тогда 
		
		СтруктураПараметров.Вставить("ИнтерфейсТип", 9);
		Если глПараметрыРМ <> Неопределено Тогда
			глПараметрыРМ.Вставить("ИмяСтиля", "СтанцияОплаты")
		КонецЕсли;

	КонецЕсли;
	
	//------------------------------------------------------------
	// нестандартные значения
	НевидимыеКолонкиЗаказа = Новый Массив;
	Для каждого КолонкаЗаказа Из ЗаказСписокКолонок Цикл
		Если НЕ КолонкаЗаказа.Пометка Тогда
			НевидимыеКолонкиЗаказа.Добавить(КолонкаЗаказа.Значение);
		КонецЕсли; 
	КонецЦикла; 
	
	СтруктураПараметров.Вставить("НевидимыеКолонкиЗаказа", НевидимыеКолонкиЗаказа);
		
	СтруктураПараметров.Вставить("ЭтоCallЦентр", Ложь);
	СтруктураПараметров.Вставить("МестоПроизводстваТаблица", МестоПроизводстваТаблица);
	
	//ТипТТ
	СтруктураПараметров.Вставить("ТипТТ", Неопределено);
	Попытка // на случай различия в конфигурациях
		СтруктураПараметров.ТипТТ = СтруктураПараметров.Фирма.ТипТТ;
	Исключение
	КонецПопытки;

КонецПроцедуры

// Проверка корректности параметров РМ
//
Функция ПроверкаПараметров(ВыводПредупреждений=Истина) Экспорт
	
	Если НЕ ПроверкаОсновныхРеквизитов() Тогда
		ТекущийЭлемент = ЭлементыФормы.Наименование;
		Возврат Ложь;
	КонецЕсли;
	
	Если Тип = Перечисления.ТипыРМ.СтанцияОплаты Тогда
		Возврат Истина;
	КонецЕсли;
	

	// исключение некоррекного сочетания параметров
	Если ИнтерфейсТип=1 Тогда
		ДоставкаЕсть = Ложь;
		ЛимитныеКарты = Ложь;
	КонецЕсли; 
	
	Если Тип <> Перечисления.ТипыРМ.ПустаяСсылка() Тогда
		
		СписокКЭП.Очистить();
		
		
		
		//ВесыЕсть			= Ложь;
		СпецКВЕсть			= Ложь;
		НаливайкаЕсть		= Ложь;
		//ПечатьОтчетов		= Ложь;
		ЗапретВводаПароляСотрудник = Ложь;
	КонецЕсли;
	
	//------------------------------------------------------------
	Если НЕ ЗначениеЗаполнено(МестоРеализации) Тогда
		Предупреждение("Не указано место реализации!",5);
		ТекущийЭлемент = ЭлементыФормы.МестоРеализации;
		Возврат Ложь;
	КонецЕсли;
	
		
	Если глВерсия>1 И Тип = Перечисления.ТипыРМ.Производство Тогда
		//Если НЕ ЗначениеЗаполнено(МестоПроизводстваСписок) Тогда
		//	Предупреждение("Не указано место производства!",5);
		//	ТекущийЭлемент = ЭлементыФормы.МестоПроизводстваСписок;
		//	Возврат Ложь;
		//КонецЕсли;
		//Если МестоПроизводстваТаблица.Количество() = 0 Тогда
		//	Предупреждение("Не указано место производства!",5);
		//	ТекущийЭлемент = ЭлементыФормы.МестоПроизводстваТаблица;
		//	Возврат Ложь;
		//КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НастройкиМонитораМарокСписок) Тогда
			Предупреждение("Не указаны настройки монитора марок!",5);
			ТекущийЭлемент = ЭлементыФормы.НастройкиМонитораМарокСписок;
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
		
	//------------------------------------------------------------
	Если ПользовательВходБезАвторизации И НЕ ЗначениеЗаполнено(ПользовательПоУмолчанию) Тогда
		Предупреждение("Не указан пользователь по умолчанию!",5);
		ТекущийЭлемент = ЭлементыФормы.ПользовательПоУмолчанию;
		Возврат Ложь;
	КонецЕсли;
	
	Если БлокировкаАвто И НЕ ЗначениеЗаполнено(БлокировкаАвтоВремя) Тогда
		Предупреждение("Не указано время автоблокировки!",5);
		ТекущийЭлемент = ЭлементыФормы.БлокировкаАвтоВремя;
		Возврат Ложь;
	КонецЕсли;
	
	//------------------------------------------------------------
	Если ККМЕсть Тогда
		Если НЕ ЗначениеЗаполнено(ККМ) Тогда
			Предупреждение("Не выбрана основная ККМ!",5);
			ТекущийЭлемент = ЭлементыФормы.ККМ;
			Возврат Ложь;
		КонецЕсли;
		
		Если ЕстьГруппыОплаты И 
			ККМГруппыОплаты.Найти(Справочники.ТорговоеОборудование.ПустаяСсылка(), "ККМ" ) <> Неопределено Тогда
			
			Предупреждение("ККМ должна быть указана для всех групп оплаты!",5);
			ТекущийЭлемент = ЭлементыФормы.ККМГруппыОплаты;
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли;
	
	Если глВерсия=3 И ПлатежнаяСистемаЕсть И НЕ ЗначениеЗаполнено(ПлатежнаяСистема) Тогда
		Предупреждение("Не указана платежная система!",5);
		ТекущийЭлемент = ЭлементыФормы.ПлатежнаяСистема;
		Возврат Ложь;
	КонецЕсли;
	
	//------------------------------------------------------------
	Если ДПЕсть И НЕ ЗначениеЗаполнено(ДП) Тогда
		Предупреждение("Не выбран дисплей покупателя!",5);
		ТекущийЭлемент = ЭлементыФормы.ДП;
		Возврат Ложь;
	КонецЕсли;
	
	Если ИнфоДисплейЕсть И НЕ ЗначениеЗаполнено(ИнфоДисплей) Тогда
		Предупреждение("Не выбран информационный дисплей!",5);
		ТекущийЭлемент = ЭлементыФормы.ИнфоДисплей;
		Возврат Ложь;
	КонецЕсли;
	
	Если ВесыЕсть И НЕ ЗначениеЗаполнено(Весы) Тогда
		Предупреждение("Не выбраны весы!",5);
		ТекущийЭлемент = ЭлементыФормы.Весы;
		Возврат Ложь;
	КонецЕсли;
	
	Если СпецКВЕсть И НЕ ЗначениеЗаполнено(СпецКВ) Тогда
		Предупреждение("Не выбрана спец.клавиатура!",5);
		ТекущийЭлемент = ЭлементыФормы.СпецКВ;
		Возврат Ложь;
	КонецЕсли;
	
	//Если ПараметрыСеанса.РаспределенныйРежим И 
	//	ГруппыПечати.Строки.Найти(Справочники.ТорговоеОборудование.ПустаяСсылка(), "Принтер" ) <> Неопределено Тогда
	//	
	//	Предупреждение("В распределенной базе привязка принтеров к группам печати в настройке РМ обязательна!",5);
	//	ТекущийЭлемент = ЭлементыФормы.ГруппыПечати;
	//	Возврат Ложь;
	//КонецЕсли; 
	//
	//Если НаливайкаЕсть И НЕ ЗначениеЗаполнено(Наливайка) Тогда
	//	Предупреждение("Не выбрана система розлива!",5);
	//	ТекущийЭлемент = ЭлементыФормы.Наливайка;
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Если глВерсия=3 И РегистрацияСобытийВидеоЕсть И НЕ ЗначениеЗаполнено(РегистрацияСобытийВидеонаблюдение) Тогда
	//	Предупреждение("Не выбрана система видеонаблюдения!",5);
	//	ТекущийЭлемент = ЭлементыФормы.РегистрацияСобытийВидеонаблюдение;
	//	Возврат Ложь;
	//КонецЕсли;

	////------------------------------------------------------------
	//Если НЕ (ЗаказЗапросПосадки ИЛИ ЗначениеЗаполнено(ЗаказМестоПоУмолчанию)) И 
	//	 НЕ (глВерсия=3 И ДоставкаЕсть И ДоставкаРежимИспользования=0) Тогда
	//	Предупреждение("Не указано посадочное место по умолчанию!",5);
	//	ТекущийЭлемент = ЭлементыФормы.ЗаказМестоПоУмолчанию;
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаказМенюОсновное) Тогда
		Предупреждение("Не указано основное меню!",5);
		ТекущийЭлемент = ЭлементыФормы.ЗаказМенюОсновное;
		Возврат Ложь;
	КонецЕсли;
	
	//------------------------------------------------------------
	//Если ККМЕсть И НЕ ЗначениеЗаполнено(ОплатаОсновнойВариант) Тогда
	//	Предупреждение("Не указан основной вариант оплаты!",5);
	//	ТекущийЭлемент = ЭлементыФормы.ОплатаОсновнойВариант;
	//	Возврат Ложь;
	//КонецЕсли;
	
	//------------------------------------------------------------
	//Если ПечатьСчета Тогда
	//	Если НЕ ЗначениеЗаполнено(ПечатьСчетаПринтер) Тогда
	//		Предупреждение("Не указан принтер счетов!",5);
	//		ТекущийЭлемент = ЭлементыФормы.ПечатьСчетаПринтер;
	//		Возврат Ложь;
	//	КонецЕсли;
	//	Если глВерсия>1 И Константы.ДопЯзыки.Получить() И ПечатьСчетаДопЯзыки=2 И НЕ ЗначениеЗаполнено(ПечатьСчетаЯзык) Тогда
	//		Предупреждение("Не указан язык печати счетов!",5);
	//		ТекущийЭлемент = ЭлементыФормы.ПечатьСчетаЯзык;
	//		Возврат Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
	//------------------------------------------------------------
	//Если ПечатьОтчетов И НЕ ЗначениеЗаполнено(ПечатьОтчетовПринтер) Тогда
	//	Предупреждение("Не указан принтер отчетов!",5);
	//	ТекущийЭлемент = ЭлементыФормы.ПечатьОтчетовПринтер;
	//	Возврат Ложь;
	//КонецЕсли;
	
	//------------------------------------------------------------
	//Если глВерсия>1 И БроньПредоплатаРежимВозврата=1 И НЕ ЗначениеЗаполнено(БроньПредоплатаТовар) Тогда
	//	Предупреждение("Не выбран товар!",5);
	//	ТекущийЭлемент = ЭлементыФормы.БроньПредоплатаТовар;
	//	Возврат Ложь;
	//ИначеЕсли глВерсия>1 И БроньПредоплатаРежимВозврата=2 И НЕ ЗначениеЗаполнено(БроньПредоплатаНаценка) Тогда
	//	Предупреждение("Не выбрана наценка!",5);
	//	ТекущийЭлемент = ЭлементыФормы.БроньПредоплатаНаценка;
	//	Возврат Ложь;
	//КонецЕсли;

	//------------------------------------------------------------
	//Если ВнешняяОбработка И НЕ (ЗначениеЗаполнено(ВнешняяОбработкаНазвание) И ЗначениеЗаполнено(ВнешняяОбработкаФайл)) Тогда
	//	Предупреждение("Не указаны название или файл внешней обработки!",5);
	//	ТекущийЭлемент = ЭлементыФормы.ВнешняяОбработкаНазвание;
	//	Возврат Ложь;
	//КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Заполняет список выбора элемента формы РазмерОкна
//
Процедура ЗаполнитьСписокВыбораРазмеровОкна()
	
	СписокВыбора = ЭлементыФормы.ИнтерфейсРазмерОкна.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ИнтерфейсТип=0 Тогда
		СписокВыбора.Добавить(0, "Во весь экран");
		Если Тип = Перечисления.ТипыРМ.ПустаяСсылка() Тогда
			СписокВыбора.Добавить(2, "800х600");
			//СписокВыбора.Добавить(3, "1024х768");
		КонецЕсли; 
		
	ИначеЕсли ИнтерфейсТип=1 Тогда
		СписокВыбора.Добавить(0, "Авто");
		СписокВыбора.Добавить(1, "240х320");
		СписокВыбора.Добавить(2, "480х640");
	ИначеЕсли ИнтерфейсТип>=8 Тогда
		СписокВыбора.Добавить(0, "Во весь экран");
		СписокВыбора.Добавить(2, "800х600");
		СписокВыбора.Добавить(3, "1024х768");
	КонецЕсли;
	
	Если СписокВыбора.НайтиПоЗначению(ИнтерфейсРазмерОкна) = Неопределено Тогда
		ИнтерфейсРазмерОкна = СписокВыбора[0].Значение;
	Иначе
		ИнтерфейсРазмерОкна = ЭлементыФормы.ИнтерфейсРазмерОкна.Значение;	// чтобы значение в форме обновилось после заполнения списка
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьТипаРМ()
	
	СписокТиповРМ = ЭлементыФормы.Тип.СписокВыбора;
	СписокТиповРМ.Очистить();
	СписокТиповРМ.Добавить(Перечисления.ТипыРМ.ПустаяСсылка());
	СписокТиповРМ.Добавить(Перечисления.ТипыРМ.СтанцияОплаты); 
	СписокТиповРМ.Добавить(Перечисления.ТипыРМ.СтанцияОплатыКМ, "Станция оплаты КМ");
	СписокТиповРМ.Добавить(Перечисления.ТипыРМ.СтанцияОплатыМОКП);
	СписокТиповРМ.Добавить(Перечисления.ТипыРМ.СтанцияПовараМОКП);
	СписокТиповРМ.Добавить(Перечисления.ТипыРМ.Хостес);
	СписокТиповРМ.Добавить(Перечисления.ТипыРМ.КассовоеМестоРесторана);
	СписокТиповРМ.Добавить(Перечисления.ТипыРМ.Производство);
	СписокТиповРМ.Добавить(Перечисления.ТипыРМ.Автокасса);
	СписокТиповРМ.Добавить(Перечисления.ТипыРМ.СтанцияСканирования);	
	Если СписокТиповРМ.Количество() < Перечисления.ТипыРМ.Количество() Тогда
		СписокРМ.Отбор.Тип.Использование	= Истина;
		СписокРМ.Отбор.Тип.ВидСравнения 	= ВидСравнения.ВСписке;
		СписокРМ.Отбор.Тип.Значение			= СписокТиповРМ;
	Иначе
		СписокРМ.Отбор.Тип.Использование = Ложь;
	КонецЕсли;	
	
	ЭлементыФормы.СписокРМ.Колонки.Тип.Видимость = СписокТиповРМ.Количество()<>1;
	ЭлементыФормы.Тип.Доступность				 = СписокТиповРМ.Количество()<>1;
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ЗаполнитьДеревоСтраниц();
	
	УстановитьДоступностьТипаРМ();
	
	ЭлементыФормы.ДоставкаСписокЗаказовОформление.СоздатьКолонки();
	ЭлементыФормы.КолЦентрСписокЗаказовОформление.СоздатьКолонки();
	//ЭлементыФормы.ПроизводствоСписокБлюдОформление.СоздатьКолонки();
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.СписокРМ;
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	УстановитьДоступностьТипаРМ();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если СправочникОбъект.Ссылка.Пустая() Тогда
		// пустой список РМ
		ЭлементыФормы.КнопкаСписокРМЗапустить.Видимость = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыСохранить	.Доступность = Ложь;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК			.Доступность = Ложь;
		Возврат;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыСохранить	.Доступность = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОсновныеДействияФормыОК			.Доступность = Истина;
	КонецЕсли; 
	
	ЭлементыФормы.КнопкаСписокРМЗапустить.Видимость = Истина;
	
	ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.ТекущаяСтраница;
	СписокСтраниц	= ЭлементыФормы.ПанельНастроек.Страницы;
	
	Если ТекущаяСтраница = СписокСтраниц.Наименование Тогда
		
		ЭлементыФормы.ПанельТипРМ.ТекущаяСтраница = ЭлементыФормы.ПанельТипРМ.Страницы.Трактиръ;		
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.ПараметрыЭкрана Тогда
		
		ЭлементыФормы.ИнтерфейсТип1.Видимость = (Тип = Перечисления.ТипыРМ.ПустаяСсылка());
		
		ЭлементыФормы.НадписьПользователь	.Доступность	= ПользовательВходБезАвторизации;
		ЭлементыФормы.ПользовательПоУмолчанию.Доступность	= ПользовательВходБезАвторизации;
		
		ЭлементыФормы.БлокировкаАвтоВремя	.Видимость = БлокировкаАвто;
		ЭлементыФормы.НадписьАвтоблокировка1.Видимость = БлокировкаАвто;
		ЭлементыФормы.НадписьАвтоблокировка2.Видимость = БлокировкаАвто;
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.КассовоеМесто Тогда
		ЭлементыФормы.НадписьККМ					.Доступность = ККМЕсть;
		ЭлементыФормы.ККМ							.Доступность = ККМЕсть;
		ЭлементыФормы.ККМЕстьДоп					.Доступность = ККМЕсть;
		ЭлементыФормы.НадписьСписокДопККМ			.Доступность = ККМЕсть И ККМЕстьДоп;
		ЭлементыФормы.ККМСписокДоп					.Доступность = ККМЕсть И ККМЕстьДоп;
		ЭлементыФормы.КоманднаяПанельСписокДопККМ	.Доступность = ККМЕсть И ККМЕстьДоп;
		ЭлементыФормы.ККМГруппыОплаты				.Видимость = ККМЕсть И ЕстьГруппыОплаты;
		ЭлементыФормы.НадписьГруппыОплаты			.Видимость = ККМЕсть И ЕстьГруппыОплаты;
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.ПлатежнаяСистема Тогда
		ЭлементыФормы.НадписьПлатежнаяСистема		.Доступность = ПлатежнаяСистемаЕсть;
		ЭлементыФормы.ПлатежнаяСистема				.Доступность = ПлатежнаяСистемаЕсть;
		ЭлементыФормы.НадписьНомерТерминала			.Доступность = ПлатежнаяСистемаЕсть;
		ЭлементыФормы.ПлатежнаяСистемаНомерТерминала.Доступность = ПлатежнаяСистемаЕсть;
		ЭлементыФормы.НадписьПринтерСлипов			.Доступность = ПлатежнаяСистемаЕсть;
		ЭлементыФормы.ПлатежнаяСистемаПринтерСлипов	.Доступность = ПлатежнаяСистемаЕсть;
		ЭлементыФормы.НадписьКолвоКопийСлипа		.Доступность = ПлатежнаяСистемаЕсть;
		ЭлементыФормы.ПлатежнаяСистемаКолвоКопийСлипа.Доступность = ПлатежнаяСистемаЕсть;
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.ДП Тогда
		ЭлементыФормы.НадписьДП					.Доступность = ДПЕсть;
		ЭлементыФормы.НадписьДПТекстОжидание	.Доступность = ДПЕсть;
		ЭлементыФормы.НадписьДПТекстПриВыходе	.Доступность = ДПЕсть;
		ЭлементыФормы.ДП						.Доступность = ДПЕсть;
		ЭлементыФормы.ДПТекстОжидание			.Доступность = ДПЕсть;
		ЭлементыФормы.ДПТекстПриВыходе			.Доступность = ДПЕсть;
		
		ЭлементыФормы.НадписьИД					.Доступность = ИнфоДисплейЕсть;
		ЭлементыФормы.ИнфоДисплей				.Доступность = ИнфоДисплейЕсть;
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.Весы Тогда
		ЭлементыФормы.НадписьВесы	.Доступность		= ВесыЕсть;
		ЭлементыФормы.Весы			.Доступность		= ВесыЕсть;
		ЭлементыФормы.ВесыЗапретРучногоВвода.Доступность= ВесыЕсть;
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.СУ Тогда
		ЭлементыФормы.НадписьСпецКВ	.Доступность	= СпецКВЕсть;
		ЭлементыФормы.СпецКВ		.Доступность	= СпецКВЕсть;
		
		Флаг = ЗначениеЗаполнено(СписокСУ);
		ЭлементыФормы.ЗапретВводаПароляСотрудник	.Видимость	= Флаг;
		
		Если Тип = Перечисления.ТипыРМ.Производство Тогда
			ЭлементыФормы.ЗапретВводаПароляКлиент		.Видимость	= Ложь;
			ЭлементыФормы.ЗапретРучногоОткрытияЗаказов	.Видимость	= Ложь;
		Иначе
			ЭлементыФормы.ЗапретВводаПароляКлиент		.Видимость	= Флаг;
			ЭлементыФормы.ЗапретРучногоОткрытияЗаказов	.Видимость	= Флаг;
		КонецЕсли;
								
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.Заказ Тогда
		Если глВерсия=3 Тогда
			ЭлементыФормы.ЗаказЗапросПосадки.Доступность = НЕ ЛимитныеКарты;
		КонецЕсли; 
		ЭлементыФормы.НадписьПосадочноеМесто				.Доступность = НЕ ЗаказЗапросПосадки;
		ЭлементыФормы.ЗаказМестоПоУмолчанию					.Доступность = НЕ ЗаказЗапросПосадки;
		ЭлементыФормы.ЗаказЗапросПосадкиПередПечатьюМарок	.Доступность = НЕ ЗаказЗапросПосадки;
		
		Если ЗаказЗапросПосадки И ЗаказЗапросПосадкиПередПечатьюМарок Тогда
			ЗаказЗапросПосадкиПередПечатьюМарок	= Ложь;
		КонецЕсли; 
		
		ФлагПодтверждения = глВерсия>1 И Константы.РаботаСПодтверждениямиПозицийЗаказа.Получить();
		ЭлементыФормы.ЗаказИспользоватьКурсы.Видимость			= ФлагПодтверждения;
		
		ЭлементыФормы.ЗаказИспользоватьРекомендации.Видимость	= глВерсия > 1;
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.ВидЗаказа Тогда
		Если глВерсия=3 Тогда
			ЭлементыФормы.ЗаказЗапросПосадки.Доступность = НЕ ЛимитныеКарты;
		КонецЕсли; 
		ФлагПодтверждения = глВерсия>1 И Константы.РаботаСПодтверждениямиПозицийЗаказа.Получить();
		ЭлементыФормы.ЗаказВыделятьДозаказы.Видимость	= ФлагПодтверждения;
		Если ФлагПодтверждения Тогда
			ЭлементыФормы.ЗаказВыделятьДозаказыЦветЧет	.Доступность = ЗаказВыделятьДозаказы;
			ЭлементыФормы.ЗаказВыделятьДозаказыЦветНечет.Доступность = ЗаказВыделятьДозаказы;
		Иначе
			ЭлементыФормы.ЗаказВыделятьДозаказыЦветЧет	.Видимость = Ложь;
			ЭлементыФормы.ЗаказВыделятьДозаказыЦветНечет.Видимость= Ложь;
			ЭлементыФормы.НадписьЗаказВыделятьДозаказы	.Видимость = Ложь;
			ЭлементыФормы.НадписьЗаказВыделятьДозаказы1	.Видимость= Ложь;
		КонецЕсли
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.ИдентификацияКлиента Тогда
		ЭлементыФормы.ЗаказКлиентЗапретПустого.Доступность = ЗаказКлиентЗапросПриВводеНового;
		Если НЕ ЗаказКлиентЗапросПриВводеНового И ЗаказКлиентЗапретПустого Тогда
			ЗаказКлиентЗапретПустого = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.Оплата Тогда
		Если глВерсия=3 Тогда
			ЭлементыФормы.ОплатаАвтоНовый.Доступность = НЕ ЛимитныеКарты;
		КонецЕсли; 
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.ОткрытиеСмены Тогда
        ЭлементыФормы.РежимПодбораСотрудниковВСмену     .Доступность = НеОткрыватьДиалогОткрытиеСмены;
		ЭлементыФормы.РежимПодбораСотрудниковВСмену1    .Доступность = НеОткрыватьДиалогОткрытиеСмены;
		
	ИначеЕсли ТекущаяСтраница = СписокСтраниц.Прочее Тогда
		ЭлементыФормы.НадписьВнешняяОбработкаНазвание	.Доступность = ВнешняяОбработка;
		ЭлементыФормы.ВнешняяОбработкаНазвание			.Доступность = ВнешняяОбработка;
		ЭлементыФормы.НадписьВнешняяОбработкаФайл		.Доступность = ВнешняяОбработка;
		ЭлементыФормы.ВнешняяОбработкаФайл				.Доступность = ВнешняяОбработка;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииДанных()
	
	ВосстановитьПараметры();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если НЕ ПроверкаПараметров() Тогда
		ЭлементыФормы.ДеревоСтраниц.ТекущаяСтрока = ДеревоСтраниц.Строки.Найти(ЭлементыФормы.ПанельНастроек.ТекущаяСтраница.Имя, "Имя", Истина);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СохранитьПараметры(СтруктураПараметров);
	
	ПараметрыРМ = ЗначениеВСтрокуВнутр(СтруктураПараметров);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	//глФормаНастройкиРМ = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СпискаРМ

Процедура СписокРМПриАктивизацииСтроки(Элемент)
	
	ТекущееРМ = Элемент.ТекущаяСтрока;
	Если ТекущееРМ = СправочникОбъект.Ссылка Тогда
		Возврат;
	КонецЕсли; 
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Сохранить изменения в """+СправочникОбъект.Ссылка.Наименование+"""?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да И НЕ ЗаписатьВФорме() ИЛИ Ответ = КодВозвратаДиалога.Отмена Тогда
			// возвращаемся на строку в которой были изменения
			Элемент.ТекущаяСтрока = СправочникОбъект.Ссылка;
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Если ТекущееРМ = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	БылТип = Тип;
	Если Не Элемент.ТекущаяСтрока.Этогруппа Тогда
		
		Если НЕ Элемент.ТекущаяСтрока.Пустая() Тогда
			Попытка
				СправочникОбъект = Элемент.ТекущаяСтрока.ПолучитьОбъект();	
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ТекущееРМ.Тип = Перечисления.ТипыРМ.СтанцияОплаты Тогда
			ИнтерфейсТип = 9;
		КонецЕсли;
		
		Если Тип <> БылТип ИЛИ ДеревоСтраниц.Строки.Количество()=0 Тогда
			ЗаполнитьДеревоСтраниц();
		КонецЕсли;
		
		// чтобы обработалось возможное изменение параметров
		ДеревоСтраницПриАктивизацииСтроки(ЭлементыФормы.ДеревоСтраниц);
	КонецЕсли;
	Модифицированность = Ложь;
КонецПроцедуры

Процедура ЗапуститьРМ() Экспорт
	
	СправочникОбъект.Разблокировать();
	РазблокироватьДанныеДляРедактирования(ТекущееРМ);
	//СправочникОбъект = Неопределено;
	Если ЗначениеЗаполнено(ТекущееРМ) Тогда
		// на время запуска надо отключить
		глОтключитьОбработчикОжидания("глОбработкаОчередиСобытий");
		
		ИнтерфейсРМ.ЗапуститьРабочееМесто(ТекущееРМ);
	КонецЕсли; 

КонецПроцедуры

Процедура КнопкаСписокРМЗапуститьНажатие()
	ТекущееРМ = ЭлементыФормы.СписокРМ.ТекущаяСтрока;
	Если ТекущееРМ.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	Если Модифицированность Тогда
		Ответ = Вопрос("Сохранить изменения в """+СправочникОбъект.Ссылка.Наименование+"""?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да И НЕ ЗаписатьВФорме() ИЛИ Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	глПараметрыРМ = ЗначениеИзСтрокиВнутр(ТекущееРМ.ПараметрыРМ);
	Если РаботаСокнами = Неопределено Или РаботаСокнами = Null Тогда
		РаботаСокнами = Обработки.РаботаСокнами.Создать();
	КонецЕсли;
	ПодключитьОбработчикОжидания("ЗапуститьРМ",0.1,1);	
КонецПроцедуры

Процедура СписокРМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = Истина;
	
	Если Копирование И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	НовоеРМ = Справочники.РабочиеМеста.СоздатьЭлемент();
	НовоеРМ.ПрофильВхода = "задайте профиль входа...";
	ЗаказКлиентЗапросПриВводеНового = Истина;
	
	Если Копирование Тогда
		НовоеРМ.Наименование	= Элемент.ТекущаяСтрока.Наименование;
		НовоеРМ.Тип				= Элемент.ТекущаяСтрока.Тип;
		НовоеРМ.МестоРеализации	= Элемент.ТекущаяСтрока.МестоРеализации;
		// < КС_ВДВ ------------------------------------------------------------ 
		НовоеРМ.Станция			= Элемент.ТекущаяСтрока.Станция;
		// КС_ВДВ > ------------------------------------------------------------ 
		НовоеРМ.ПараметрыРМ		= Элемент.ТекущаяСтрока.ПараметрыРМ;
	Иначе
		НовоеРМ.Наименование	= "Новое РМ";
		НовоеРМ.Тип				= Перечисления.ТипыРМ.ПустаяСсылка();
		НовоеРМ.МестоРеализации = Константы.ОсновноеМестоРеализации.Получить();
	КонецЕсли;
	
	НовоеРМ.Записать();
	
	Элемент.ТекущаяСтрока = НовоеРМ.Ссылка;
	ЭлементыФормы.ДеревоСтраниц.ТекущаяСтрока = ДеревоСтраниц.Строки[0];
	ТекущийЭлемент = ЭлементыФормы.Наименование;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ТипПриИзменении(Элемент)
	
	ТипИнтерфейсаПриИзменении(Элемент);
	ЗаполнитьДеревоСтраниц();
	
		
	ЗаполнитьСписокВыбораРазмеровОкна();
	
КонецПроцедуры

Процедура ТипОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ДеревоСтраницПриАктивизацииСтроки(Элемент)
	
	ЭлементыФормы.ПанельНастроек.Страницы[ЭлементыФормы.ПанельНастроек.ТекущаяСтраница.Имя].Видимость = Ложь;
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущаяСтрока.Имя = "Пустая" Тогда
		ПереключитьСтраницу(1);
		Возврат;
	КонецЕсли; 
	
	Если НЕ ККМЕсть И Найти("Оплата,ПлатежнаяСистема,ОткрытиеСмены,ЗакрытиеСмены",ТекущаяСтрока.Имя) Тогда
		ИмяСтраницы = "Недоступная";
		ЭлементыФормы.НадписьНедоступнаяСтраница.Заголовок = "Этот раздел актуален только для кассового рабочего места.";
		
	ИначеЕсли (ТекущаяСтрока.Имя="ПечатьСчетаШапкаПодвал" ИЛИ ТекущаяСтрока.Имя="ПечатьСчетаДополнительно")
		      И НЕ ПечатьСчета Тогда
		ИмяСтраницы = "Недоступная";
		ЭлементыФормы.НадписьНедоступнаяСтраница.Заголовок = "Этот раздел актуален только при установленной печати счета.";
		
	ИначеЕсли (ТекущаяСтрока.Имя="ИдентификацияКлиента" ИЛИ ТекущаяСтрока.Имя="Заказ" ИЛИ ТекущаяСтрока.Имя="ЛимитныеКарты")
		      И глВерсия=3 И ДоставкаЕсть И ДоставкаРежимИспользования=0 Тогда
		ИмяСтраницы = "Недоступная";
		ЭлементыФормы.НадписьНедоступнаяСтраница.Заголовок = "Этот раздел не актуален для доставки.";
		
	ИначеЕсли (ТекущаяСтрока.Имя="Доставка" ИЛИ ТекущаяСтрока.Имя="ЛимитныеКарты") И ИнтерфейсТип=1 Тогда
		ИмяСтраницы = "Недоступная";
		ЭлементыФормы.НадписьНедоступнаяСтраница.Заголовок = "Этот раздел не актуален для выбранного интерфейса.";
		
	Иначе
		ИмяСтраницы = ТекущаяСтрока.Имя;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Родитель) Тогда
		ЭлементыФормы.НадписьТекущаяСтраница.Заголовок = " "+ТекущаяСтрока.Родитель.Заголовок+" \ "+ТекущаяСтрока.Заголовок;
	Иначе
		ЭлементыФормы.НадписьТекущаяСтраница.Заголовок = " "+ТекущаяСтрока.Заголовок;
	КонецЕсли; 
	
	ТекСтраницаПанелиНастроек = ЭлементыФормы.ПанельНастроек.Страницы[ИмяСтраницы];
	ТекСтраницаПанелиНастроек.Видимость = Истина;
	//ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ЭлементыФормы.ПанельНастроек.Страницы[ИмяСтраницы];
	ЭлементыФормы.ПанельНастроек.ТекущаяСтраница = ТекСтраницаПанелиНастроек;
	
	ИндексСтраницы = МассивСтраниц.Найти( ТекущаяСтрока );
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.СтраницаВперед.Доступность = ИндексСтраницы <> МассивСтраниц.ВГраница();
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.СтраницаНазад.Доступность = ИндексСтраницы <> 0;
	
КонецПроцедуры

Процедура ДеревоСтраницПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Картинка) Тогда
		ДанныеСтроки.Картинка = БиблиотекаКартинок.СправочникГруппа;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСтраницаНазад(Кнопка)
	ПереключитьСтраницу(-1);
КонецПроцедуры

Процедура ОсновныеДействияФормыСтраницаВперед(Кнопка)
	ПереключитьСтраницу(1);
КонецПроцедуры

Процедура ПрофильВходаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Форма = ПолучитьОбщуюФорму("ВыборПрофиля");
	Форма.ПрофильВхода = ПрофильВхода;
	
	Если Форма.ОткрытьМодально() = "ОК" Тогда
		ПрофильВхода = Форма.ПрофильВхода;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТипИнтерфейсаПриИзменении(Элемент)
	
	Если Тип = Перечисления.ТипыРМ.СтанцияОплаты Тогда
		Если ИнтерфейсРазмерОкна = 0 Или ИнтерфейсРазмерОкна = 3 Тогда
			ИнтерфейсТип = 9;
		Иначе
			ИнтерфейсТип = 8;
		КонецЕсли;
	ИначеЕсли Тип <> Перечисления.ТипыРМ.ПустаяСсылка() Тогда
		ИнтерфейсТип = 0;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораРазмеровОкна();
	
	Если ЗаказМенюВид = 1 Тогда
		//ЗаказМенюОсновное = Справочники.ТорговоеОборудование.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСписокПланЗалаПодбор(Кнопка)
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("ПланЗала");
	//тоОтметитьИзСпискаТО(СписокВидов, ПланЗалаСписок, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура КоманднаяПанельСписокПланЗалаОчистить(Кнопка)
	
	ПланЗалаСписок.Очистить();
	
КонецПроцедуры

Процедура КоманднаяПанельСписокПланЗалаВверх(Кнопка)
	
	ИнтерфейсАдмина.СдвинутьСтрокуСписка(ПланЗалаСписок, ЭлементыФормы.ПланЗалаСписок.ТекущаяСтрока, -1);
	
КонецПроцедуры

Процедура КоманднаяПанельСписокПланЗалаВниз(Кнопка)
	
	ИнтерфейсАдмина.СдвинутьСтрокуСписка(ПланЗалаСписок, ЭлементыФормы.ПланЗалаСписок.ТекущаяСтрока, 1);
	
КонецПроцедуры

Процедура ККМНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("АО");
	СписокВидов.Добавить("ФР");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура ГруппыОплатыККМНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("АО");
	СписокВидов.Добавить("ФР");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура КоманднаяПанельСписокДопККМПодбор(Кнопка)
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("АО");
	СписокВидов.Добавить("ФР");
	тоОтметитьИзСпискаТО(СписокВидов, ККМСписокДоп, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура КоманднаяПанельСписокДопККМОчистить(Кнопка)
	
	ККМСписокДоп.Очистить();
	
КонецПроцедуры

Процедура КоманднаяПанельСписокСУПодбор(Кнопка)
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("СУ");
	тоОтметитьИзСпискаТО(СписокВидов, СписокСУ, ИнформационнаяБаза);
	
	Если НЕ ЗначениеЗаполнено(СписокСУ) Тогда
		ЗапретВводаПароляСотрудник	= Ложь;
		ЗапретВводаПароляКлиент		= Ложь;
		ЗапретРучногоОткрытияЗаказов= Ложь;
	КонецЕсли; 
	
	ОбновлениеОтображения();	// само не срабатывает
	
КонецПроцедуры

Процедура КоманднаяПанельСписокСУОчистить(Кнопка)
	
	Если ЭлементыФормы.СписокСУ.ТекущаяСтрока = Неопределено Тогда
		СписокСУ.Очистить();
	Иначе
		СписокСУ.Удалить(ЭлементыФормы.СписокСУ.ТекущаяСтрока);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("ДП");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура ИнфоДисплейНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("ИнфоДисплей");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры


Процедура ВесыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("ЭЛВЕСЫ");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура СпецКВНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("СпецКВ");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура НаливайкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("Наливайка");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура КоманднаяПанельЗаказСписокКолонокУстановитьФлажки(Кнопка)
	
	ЗаказСписокКолонок.ЗаполнитьПометки(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельЗаказСписокКолонокСнятьФлажки(Кнопка)
	
	ЗаказСписокКолонок.ЗаполнитьПометки(Ложь);
	
КонецПроцедуры

Процедура ЗаказМенюВидПриИзменении(Элемент)
	//ЗаказМенюОсновное = Неопределено;
КонецПроцедуры

Процедура ЗаказМенюОсновноеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить(?(ЗаказМенюВид = 1, "ЭкранМеню", "СписокМеню") + ?(ИнтерфейсТип=1, "КПК", "") );
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура ЗаказМенюОсновноеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ЗаказМенюОсновноеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаНастройки = Обработки.ПодборТоваров.ПолучитьФорму("Настройка");
	ФормаНастройки.Открыть();
	Если ЗначениеЗаполнено(ЗаказМенюОсновное) Тогда
		ФормаНастройки.ТекущаяНастройка = ЗаказМенюОсновное;
		ФормаНастройки.ЗагрузитьПараметрыНастройки();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПечатьСчетаПринтерНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("ПРН");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура ПечатьОтчетовПринтерНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("ПРН");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура ВнешняяОбработкаФайлНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(,,"Внешняя обработка (*.epf)|*.epf");
	
	Если Диалог.Выбрать() Тогда
		Элемент.Значение = Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаказСписокКолонокПриИзмененииФлажка(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельСкидкиПорядокСдвинутьВверх(Кнопка)
	
	ИнтерфейсАдмина.СдвинутьСтрокуСписка(СкидкиПорядок, ЭлементыФормы.СкидкиПорядок.ТекущаяСтрока, -1);
	
КонецПроцедуры

Процедура КоманднаяПанельСкидкиПорядокСдвинутьВниз(Кнопка)
	
	ИнтерфейсАдмина.СдвинутьСтрокуСписка(СкидкиПорядок, ЭлементыФормы.СкидкиПорядок.ТекущаяСтрока, 1);
	
КонецПроцедуры

Процедура СкидкаНаЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтерфейсАдмина.ВыборСкидкиБонуса(Элемент, Ложь);
	
КонецПроцедуры

Процедура НадписьПодтверждениеГруппыПечатиНажатие(Элемент)
	
	Справочники.ГруппыПечати.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ОповещенияЗвукИмяФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(,,"Звук (*.wav)|*.wav");
	
	Если Диалог.Выбрать() Тогда
		Элемент.Значение = Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСписокСУОткрытьСписок(Кнопка)
	
	ОткрытьЗначение(ЭлементыФормы.СписокСУ.ТекущаяСтрока.Значение);
	
КонецПроцедуры

Процедура КоманднаяПанельСписокДопККМОткрытьСписок(Кнопка)
	
	Справочники.ТорговоеОборудование.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура СпецКВОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаНастройки = Обработки.УправлениеСпецКлавиатурой.ПолучитьФорму();
	ФормаНастройки.Открыть();
	Если ЗначениеЗаполнено(СпецКВ) Тогда
		ФормаНастройки.ТекущаяНастройка = СпецКВ;
		ФормаНастройки.ЗагрузитьПараметрыНастройки();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСписокПланЗалаОткрытьСписок(Кнопка)
	
	 
	
КонецПроцедуры

Процедура КоманднаяПанельСписокКЭППодбор(Кнопка)
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("КЭП");
	//тоОтметитьИзСпискаТО(СписокВидов, СписокКЭП, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура КоманднаяПанельСписокКЭПОчистить(Кнопка)
	
	СписокКЭП.Очистить();
	
КонецПроцедуры

Процедура КоманднаяПанельСписокКЭПОткрытьСписок(Кнопка)
	
	Справочники.ТорговоеОборудование.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ВидеонаблюдениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("Видео");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура ПлатежнаяСистемаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("ПС");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура ПлатежнаяСистемаПринтерСлиповНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("ПРН");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаМониторМарокДобавить(Кнопка)

	СтандартнаяОбработка = Ложь;
	
	//Если НастройкиМонитораМарокСписок.Количество() = 0 Тогда
	//	Предупреждение("Нет доступных вариантов настроек!", 7);
	//	ТекущийЭлемент = ЭлементыФормы.НастройкиМонитораМарокСписок;
	//	Возврат;
	//КонецЕсли;	
	
	СписокВыбора = Новый СписокЗначений;
	
	УжеВыбраны = МестоПроизводстваТаблица.ВыгрузитьКолонку("МестоПроизводства");
	
	Запрос = Новый Запрос("
		//|ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПечати 
		//|ГДЕ НЕ ПометкаУдаления И ЕстьМонитор
		//|УПОРЯДОЧИТЬ ПО Наименование
		|ВЫБРАТЬ
		|	ГруппыПечати.Ссылка
		|ИЗ
		|	Справочник.ГруппыПечати КАК ГруппыПечати
		|ГДЕ
		|	НЕ ГруппыПечати.ПометкаУдаления
		|	И ГруппыПечати.ЕстьМонитор
		|	И НЕ ГруппыПечати.Ссылка В ИЕРАРХИИ (&УжеВыбраны)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ГруппыПечати.Наименование
		|");
		
	Запрос.УстановитьПараметр("УжеВыбраны", УжеВыбраны);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если СписокВыбора.Количество() = 0 Тогда
		Предупреждение("Нет ни одной группы печати с типом ""Монитор""");
		Возврат;
	КонецЕсли; 
	
	
	Если НЕ СписокВыбора.ОтметитьЭлементы() Тогда
		Возврат;
	КонецЕсли;	
	
	//МестоПроизводстваСписок.Очистить();
	
	Для каждого Элемент Из СписокВыбора Цикл
		Если Элемент.Пометка Тогда
			//МестоПроизводстваСписок.Добавить(Элемент.Значение);
			НоваяСтрокаТаблицы = МестоПроизводстваТаблица.Добавить();
			НоваяСтрокаТаблицы.МестоПроизводства = Элемент.Значение;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаМониторМарокОчистить(Кнопка)
	
	МестоПроизводстваТаблица.Очистить();
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаМониторМарокВверх(Кнопка)
	
	//ИнтерфейсАдмина.СдвинутьСтрокуСписка(МестоПроизводстваСписок, ЭлементыФормы.МестоПроизводстваСписок.ТекущаяСтрока, -1);
	ИнтерфейсАдмина.СдвинутьСтрокуСписка(МестоПроизводстваТаблица, ЭлементыФормы.МестоПроизводстваТаблица.ТекущаяСтрока, -1);
	
	//МестоПроизводстваТаблица.Сдвинуть(ЭлементыФормы.МестоПроизводстваТаблица.ТекущаяСтрока, -1);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаМониторМарокВниз(Кнопка)
	
	//ИнтерфейсАдмина.СдвинутьСтрокуСписка(МестоПроизводстваСписок, ЭлементыФормы.МестоПроизводстваСписок.ТекущаяСтрока, 1);
	ИнтерфейсАдмина.СдвинутьСтрокуСписка(МестоПроизводстваТаблица, ЭлементыФормы.МестоПроизводстваТаблица.ТекущаяСтрока, 1);
	
	//МестоПроизводстваТаблица.Сдвинуть(ЭлементыФормы.МестоПроизводстваТаблица.ТекущаяСтрока, 1);
	
КонецПроцедуры

Процедура КоманднаяПанельСписокНастроекМониторМарокПодбор(Кнопка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнфБаза		= ИнформационнаяБаза;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("МониторМарок");	
	
	Запрос = Новый Запрос("
			|ВЫБРАТЬ Ссылка, Наименование ИЗ Справочник.ТорговоеОборудование
			|ГДЕ КодВида В (&СписокВидов) И НЕ ПометкаУдаления
			|"+?(ИнфБаза=Неопределено, "", "И ИнформационнаяБаза=&ИнфБаза")+"
			|УПОРЯДОЧИТЬ ПО Наименование
			|");
	
	Запрос.УстановитьПараметр("СписокВидов", СписокВидов);
	Запрос.УстановитьПараметр("ИнфБаза", ИнфБаза);
	
	СписокВыбора	= Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка,,НастройкиМонитораМарокСписок.НайтиПоЗначению(Выборка.Ссылка)<>Неопределено);
	КонецЦикла; 	
	
	Если СписокВыбора.Количество() = 0 Тогда
		Предупреждение("В справочнике ""Торговое оборудование"" нет ни одной настройки ""Монитор марок""!");
		Возврат;
	КонецЕсли; 
	
	Если НЕ СписокВыбора.ОтметитьЭлементы() Тогда
		Возврат;
	КонецЕсли;	
	
	НастройкиМонитораМарокСписок.Очистить();
	
	Для каждого Элемент Из СписокВыбора Цикл
		Если Элемент.Пометка Тогда
			НастройкиМонитораМарокСписок.Добавить(Элемент.Значение);
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

Процедура КоманднаяПанельСписокНастроекМониторМарокОчистить(Кнопка)
	
	НастройкиМонитораМарокСписок.Очистить();

КонецПроцедуры

Процедура КоманднаяПанельСписокНастроекМониторМарокВверх(Кнопка)
	
	ИнтерфейсАдмина.СдвинутьСтрокуСписка(НастройкиМонитораМарокСписок, ЭлементыФормы.НастройкиМонитораМарокСписок.ТекущаяСтрока, -1);

КонецПроцедуры

Процедура КоманднаяПанельСписокНастроекМониторМарокВниз(Кнопка)
	
	ИнтерфейсАдмина.СдвинутьСтрокуСписка(НастройкиМонитораМарокСписок, ЭлементыФормы.НастройкиМонитораМарокСписок.ТекущаяСтрока, 1);
	
КонецПроцедуры

Процедура КоманднаяПанельСписокНастроекМониторМарокОткрытьСписок(Кнопка)
	
	ФормаНастройки = Обработки.МониторМарок.ПолучитьФорму("Настройка");
	ФормаНастройки.Открыть();
	Если ЗначениеЗаполнено(НастройкиМонитораМарокСписок) Тогда
		Если ЭлементыФормы.НастройкиМонитораМарокСписок.ТекущаяСтрока = Неопределено Тогда
			ЭлементыФормы.НастройкиМонитораМарокСписок.ТекущаяСтрока = НастройкиМонитораМарокСписок[0];
		КонецЕсли;	
		ФормаНастройки.ТекущаяНастройка = ЭлементыФормы.НастройкиМонитораМарокСписок.ТекущаяСтрока.Значение;
		ФормаНастройки.ЗагрузитьПараметрыНастройки();
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Группы печати

Процедура МестоПроизводстваНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ Ссылка ИЗ Справочник.ГруппыПечати 
		|ГДЕ НЕ ПометкаУдаления И ЕстьМонитор
		|УПОРЯДОЧИТЬ ПО Наименование
		|");
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если СписокВыбора.Количество() = 0 Тогда
		Предупреждение("Нет ни одной группы печати с типом ""Монитор""");
		Возврат;
	КонецЕсли; 
	
	ВыбЭлемент = ВыбратьИзСписка(СписокВыбора);
	Если ВыбЭлемент<>Неопределено Тогда
		Элемент.Значение = ВыбЭлемент.Значение;
		Модифицированность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ГруппыПечатиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОформлениеСтроки.Ячейки.Группа.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Группа.ИндексКартинки = ДанныеСтроки.Уровень();
	
	Если ДанныеСтроки.Уровень() = 0 Тогда
		ОформлениеСтроки.Ячейки.Принтер	.ОтображатьКартинку = Ложь;
		ОформлениеСтроки.Ячейки.Тип		.ОтображатьКартинку = Ложь;
		
		ОформлениеСтроки.Ячейки.ПроверкаСвязи.ОтображатьФлажок	= Истина;
		ОформлениеСтроки.Ячейки.ПроверкаСвязи.Флажок			= ДанныеСтроки.ПроверкаСвязи;
	Иначе
		ОформлениеСтроки.Ячейки.Принтер	.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.Принтер	.ИндексКартинки = 1;
		ОформлениеСтроки.Ячейки.Тип		.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.Тип		.ИндексКартинки = 1;
		
		ОформлениеСтроки.Ячейки.ПроверкаСвязи.ОтображатьФлажок	= Ложь;
	КонецЕсли; 
		
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Принтер) Тогда
		ОформлениеСтроки.Ячейки.Принтер.Текст = "Авто";
		ОформлениеСтроки.Ячейки.Тип.Текст = "";
	Иначе
		Если ДанныеСтроки.Уровень() = 0 Тогда
			ОформлениеСтроки.Ячейки.Тип.Текст = "Основной";
		ИначеЕсли ДанныеСтроки.Копия Тогда
			ОформлениеСтроки.Ячейки.Тип.Текст = "Печатать копию";
		Иначе
			ОформлениеСтроки.Ячейки.Тип.Текст = "Запасной";
		КонецЕсли; 
	КонецЕсли; 
	
	ОформлениеСтроки.Ячейки.ПроверкаСвязи.ТолькоПросмотр	= Истина;
	ОформлениеСтроки.Ячейки.ПроверкаСвязи.ОтображатьТекст	= Ложь;
	
КонецПроцедуры

Процедура ГруппыПечатиПриАктивизацииСтроки(Элемент)
	
	ГруппыПечатиДоступностьКнопок();
	
КонецПроцедуры

Процедура КоманднаяПанельГруппыПечатиДобавить(Кнопка)
	
	ГруппыПечатиДобавитьПринтер();
	
КонецПроцедуры

Процедура КоманднаяПанельГруппыПечатиУдалить(Кнопка)
	
	ГруппыПечатиУдалитьПринтер();
	
КонецПроцедуры

Процедура КоманднаяПанельГруппыПечатиАвто(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ГруппыПечати.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ТекСтрока.Родитель <> Неопределено Тогда
		ТекСтрока = ТекСтрока.Родитель;
	КонецЕсли; 
	
	ТекСтрока.Принтер = Неопределено;
	ТекСтрока.Строки.Очистить();
	
	Модифицированность = Истина;
	
	ГруппыПечатиДоступностьКнопок();
	
КонецПроцедуры

Процедура КоманднаяПанельГруппыПечатиВверх(Кнопка)
	
	ГруппыПечатиСдвинутьПринтер(-1);
	
КонецПроцедуры

Процедура КоманднаяПанельГруппыПечатиВниз(Кнопка)
	
	ГруппыПечатиСдвинутьПринтер(1);
	
КонецПроцедуры

Процедура ГруппыПечатиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Отказ = Истина;
	ГруппыПечатиДобавитьПринтер();
	
КонецПроцедуры

Процедура ГруппыПечатиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ГруппыПечатиУдалитьПринтер();
	
КонецПроцедуры

Процедура ГруппыПечатиДобавитьПринтер()

	ТекСтрока = ЭлементыФормы.ГруппыПечати.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаГП = ?(ТекСтрока.Родитель = Неопределено, ТекСтрока, ТекСтрока.Родитель);
	Если НЕ ЗначениеЗаполнено(СтрокаГП.Принтер) Тогда
		Возврат;
	КонецЕсли; 
	
	НоваяСтрока = СтрокаГП.Строки.Добавить();
	НоваяСтрока.Группа = СтрокаГП.Группа;
	
	ЭлементыФормы.ГруппыПечати.ТекущаяСтрока = НоваяСтрока;
	ЭлементыФормы.ГруппыПечати.ТекущаяКолонка = ЭлементыФормы.ГруппыПечати.Колонки.Принтер;
	WshShell.SendKeys("{Enter}");

	ГруппыПечатиДоступностьКнопок();
	
КонецПроцедуры

Процедура ГруппыПечатиУдалитьПринтер()

	ТекСтрока = ЭлементыФормы.ГруппыПечати.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТекСтрока.Уровень() = 0 Тогда
		Если ТекСтрока.Строки.Количество()>0 Тогда
			ПерваяСтрока = ТекСтрока.Строки[0];
			ЗаполнитьЗначенияСвойств(ТекСтрока, ПерваяСтрока);
			ТекСтрока.Строки.Удалить(ПерваяСтрока);
		КонецЕсли;
	Иначе
		ТекСтрока.Родитель.Строки.Удалить(ТекСтрока);
	КонецЕсли; 

	Модифицированность = Истина;
	
	ГруппыПечатиДоступностьКнопок();
	
КонецПроцедуры
 
Процедура ГруппыПечатиСдвинутьПринтер(Сдвиг)

	ТекСтрока = ЭлементыФормы.ГруппыПечати.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрокаГП = ?(ТекСтрока.Родитель = Неопределено, ТекСтрока, ТекСтрока.Родитель);
	Если СтрокаГП.Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли; 
	
	ПервыйДопПринтер	= СтрокаГП.Строки[0];
	ПоследнийДопПринтер = СтрокаГП.Строки[СтрокаГП.Строки.Количество()-1];
	
	Если ТекСтрока = СтрокаГП И Сдвиг=1 Тогда
		ГруппыПечатиПоменятьЗначения(ТекСтрока, ПервыйДопПринтер);
		
	ИначеЕсли ТекСтрока = СтрокаГП И Сдвиг=-1 Тогда
		Возврат;
		
	ИначеЕсли ТекСтрока = ПервыйДопПринтер И Сдвиг = -1 Тогда
		ГруппыПечатиПоменятьЗначения(ТекСтрока, СтрокаГП);
		
	ИначеЕсли ТекСтрока = ПоследнийДопПринтер И Сдвиг = 1 Тогда
		Возврат;
		
	Иначе
		СтрокаГП.Строки.Сдвинуть(ТекСтрока, Сдвиг);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ГруппыПечатиПоменятьЗначения(Строка1, Строка2)

	ПромСтруктураСвойств = Новый Структура("Принтер, Копия");
	
	ЗаполнитьЗначенияСвойств(ПромСтруктураСвойств, Строка1);
	ЗаполнитьЗначенияСвойств(Строка1, Строка2, "Принтер, Копия");
	ЗаполнитьЗначенияСвойств(Строка2, ПромСтруктураСвойств);
	
	ЭлементыФормы.ГруппыПечати.ТекущаяСтрока = Строка2;
	
КонецПроцедуры
 
Процедура ГруппыПечатиПринтерНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидов = Новый СписокЗначений;
	СписокВидов.Добавить("АО");
	СписокВидов.Добавить("ПРН");
	тоВыбратьИзСпискаТО(СписокВидов, ЭтаФорма, Элемент, ИнформационнаяБаза);
	
КонецПроцедуры

Процедура ГруппыПечатиПринтерОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ГруппыПечатиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Группа" Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяСтрока.Группа.ПолучитьФорму().Открыть();
		
	ИначеЕсли Колонка.Имя = "Тип" И ВыбраннаяСтрока.Уровень()>0 Тогда
		ВыбраннаяСтрока.Копия = НЕ ВыбраннаяСтрока.Копия;
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппыПечатиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекСтрока = ЭлементыФормы.ГруппыПечати.ТекущаяСтрока;
	Если ТекСтрока.Уровень() > 0 И НЕ ЗначениеЗаполнено(ТекСтрока.Принтер) Тогда
		ТекСтрока.Родитель.Строки.Удалить(ТекСтрока);
	КонецЕсли;
	
	ГруппыПечатиДоступностьКнопок();
	
КонецПроцедуры

Процедура ГруппыПечатиПриИзмененииФлажка(Элемент, Колонка)
	
	Элемент.ТекущаяСтрока.ПроверкаСвязи = Не Элемент.ТекущаяСтрока.ПроверкаСвязи;
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ГруппыПечатиДоступностьКнопок()

	ТекСтрока = ЭлементыФормы.ГруппыПечати.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельГруппыПечати.Кнопки.Добавить.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельГруппыПечати.Кнопки.Удалить.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельГруппыПечати.Кнопки.Авто	.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельГруппыПечати.Кнопки.Вверх	.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельГруппыПечати.Кнопки.Вниз	.Доступность = Ложь;
		Возврат;
	КонецЕсли; 
	
	СтрокаГП = ?(ТекСтрока.Родитель = Неопределено, ТекСтрока, ТекСтрока.Родитель);
	ФлагАвто = НЕ ЗначениеЗаполнено(СтрокаГП.Принтер);
	ЕстьДоп  = СтрокаГП.Строки.Количество()>0;
	
	ЭлементыФормы.КоманднаяПанельГруппыПечати.Кнопки.Добавить.Доступность = НЕ ФлагАвто;
	ЭлементыФормы.КоманднаяПанельГруппыПечати.Кнопки.Удалить.Доступность = ЕстьДоп;
	ЭлементыФормы.КоманднаяПанельГруппыПечати.Кнопки.Авто	.Доступность = НЕ ФлагАвто;
	ЭлементыФормы.КоманднаяПанельГруппыПечати.Кнопки.Вверх	.Доступность = ЕстьДоп;
	ЭлементыФормы.КоманднаяПанельГруппыПечати.Кнопки.Вниз	.Доступность = ЕстьДоп;

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Открытие/закрытие смены

Процедура ДействияПриОткрытииЗакрытииСменыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	НаимДействия = "";
	Если ДанныеСтроки.Действие = "Регламент" Тогда
		НаимДействия = "Регламент: "+ДанныеСтроки.ПараметрДействия;
	Иначе
		ТекДействие = СписокДействийПриОткрытииЗакрытииСмены.НайтиПоЗначению(ДанныеСтроки.Действие);
		Если ТекДействие<>Неопределено Тогда
			НаимДействия = ТекДействие.Представление;
		КонецЕсли; 
	КонецЕсли; 
	ОформлениеСтроки.Ячейки.Действие.Текст = НаимДействия;
	
	ЯчейкаЗапрос = ОформлениеСтроки.Ячейки.Запрос;
	ЯчейкаЗапрос.ОтображатьТекст	= Ложь;
	ЯчейкаЗапрос.ОтображатьКартинку	= Истина;
	ЯчейкаЗапрос.ИндексКартинки		= ?(ДанныеСтроки.Запрос, 0, 1);
	
КонецПроцедуры

Процедура ДействияПриОткрытииЗакрытииСменыДействиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "Регламент" Тогда
		Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(,,"Внешняя обработка (*.epf)|*.epf");
		Если Диалог.Выбрать() Тогда
			ТекущийЭлемент.ТекущаяСтрока.ПараметрДействия = Диалог.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияПриОткрытииЗакрытииСменыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.Действие) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Печать счета

Процедура ПечатьСчетаТестНажатие(Элемент)
	
	ТаблицаЗадания = Новый ТаблицаЗначений;
	ТаблицаЗадания.Колонки.Добавить("Данные");
	ТаблицаЗадания.Колонки.Добавить("ТипДанных");
	ТаблицаЗадания.Колонки.Добавить("Параметры");
	
	ОбработкаПечати = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПечатьЗаказа");
	//Если ПечатьСчетаЕстьШапка Тогда
		ОбработкаПечати.ДобавитьШапкуПодвалСчета(ТаблицаЗадания, ПечатьСчетаТаблицаШапки);
	//КонецЕсли; 
	
	Задание = ТаблицаЗадания.Добавить();
	Задание.Данные    = "СЧЕТ N 000001";
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "ДвойнаяШирина,Центр,ПереводСтроки";
	
	Задание = ТаблицаЗадания.Добавить();
	Задание.Данные    = "СтрЧерта";;
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Лево,ПереводСтроки";
	
	Задание = ТаблицаЗадания.Добавить();
	Задание.Данные    = "содержание счета";
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Центр,ПереводСтроки";
	
	Задание = ТаблицаЗадания.Добавить();
	Задание.Данные    = "СтрЧерта";
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Лево,ПереводСтроки";
	
	Задание = ТаблицаЗадания.Добавить();
	Задание.Данные    = "ИТОГО К ОПЛАТЕ    = 654,00";
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Жирный,Право,ПереводСтроки";
	
	Если Константы.ПечатьШКНаСчетах.Получить() И ПечатьСчетаОкончательныйПечатьШК Тогда
		ШтрихКод = СформироватьШК( Строка(Константы.ПрефиксШКсчета.Получить()) + "0000010000" );
		Задание = ТаблицаЗадания.Добавить();
		Задание.Данные    = ШтрихКод;
		Задание.ТипДанных = "ШтрихКод";
		Задание.Параметры = "ВысотаШК10,EAN13,ЕстьКС,Центр,ПереводСтроки";
	КонецЕсли;
	
	//Если ПечатьСчетаЕстьПодвал Тогда
		ОбработкаПечати.ДобавитьШапкуПодвалСчета(ТаблицаЗадания, ПечатьСчетаТаблицаПодвала);
	//КонецЕсли;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ТаблицаЗадания"	,ТаблицаЗадания);
	ПараметрыПечати.Вставить("КолвоКопий"		,1);
	ПараметрыПечати.Вставить("ФоноваяПечать"	,Ложь);
	ПараметрыПечати.Вставить("Кассир"			,"Кассир 1");	// это для СПАРКа и МУЛЬТИСОФТа
	ПараметрыПечати.Вставить("Пароль"			,"1");			// нужен для Феликс-3СК станция ПД
	
	Результат = ПечатьСчетаПринтер.ПолучитьОбъект().ВыполнитьДействие("Печать", ПараметрыПечати);
	
	Если Результат.Ошибка Тогда
		Если НЕ ПустаяСтрока(Результат.Описание) Тогда
			Предупреждение(Результат.Описание + Символы.ПС + Результат.Подробно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПечатьСчетаПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Выравнивание) Тогда
		ДанныеСтроки.Выравнивание = "Центр";
	КонецЕсли; 
	
	ЯчейкаДанные = ОформлениеСтроки.Ячейки.Данные;
	ЯчейкаДанные.Шрифт = Новый Шрифт(ЯчейкаДанные.Шрифт, , ?(ДанныеСтроки.ДвойнаяШирина И ДанныеСтроки.ДвойнаяВысота, 14, ?(ДанныеСтроки.ДвойнаяШирина ИЛИ ДанныеСтроки.ДвойнаяВысота, 12, 8 )), 
															ДанныеСтроки.Жирный, ДанныеСтроки.Курсив, ДанныеСтроки.Подчеркнутый);
	
	ЯчейкаДанные.Выравнивание = ГоризонтальноеПоложение[ДанныеСтроки.Выравнивание];
	
	Если ДанныеСтроки.Тип = "Картинка" Тогда
		ЯчейкаДанные.Текст = "Картинка из файла: "+ДанныеСтроки.Данные;
	ИначеЕсли ДанныеСтроки.Тип = "КартинкаИзБуфера" Тогда
		ЯчейкаДанные.Текст = "Картинка из буфера принтера: "+ДанныеСтроки.Данные;
	ИначеЕсли ДанныеСтроки.Тип = "QRКод" Тогда
		ЯчейкаДанные.Текст = "QR-Код: "+ДанныеСтроки.Данные;
	КонецЕсли; 
	
КонецПроцедуры
 
Процедура ПечатьСчетаУстановитьАтрибутШапкиПодвала(ШапкаПодвал, КнопкаАтрибута)
	
	Для каждого ТекСтрока Из ШапкаПодвал.ВыделенныеСтроки Цикл
		Если Лев(КнопкаАтрибута.Имя,12) = "Выравнивание" Тогда
			ТекСтрока.Выравнивание = ?(КнопкаАтрибута.Пометка, Сред(КнопкаАтрибута.Имя,13), "" );
		Иначе
			ТекСтрока[КнопкаАтрибута.Имя] = КнопкаАтрибута.Пометка;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура ПечатьСчетаОпределитьПараметрыВыделенныхСтрок(ВыделенныеСтроки, КоманднаяПанельКнопки)
	
	ВсеЖирный		 = ВыделенныеСтроки.Количество()>0;
	ВсеКурсив		 = ВсеЖирный;
	ВсеПодчеркнутый  = ВсеЖирный;
	ВсеДвойнаяШирина = ВсеЖирный;
	ВсеДвойнаяВысота = ВсеЖирный;
	ВсеЛево			 = ВсеЖирный;
	ВсеЦентр		 = ВсеЖирный;
	ВсеПраво		 = ВсеЖирный;
	
	Для каждого ТекСтрока Из ВыделенныеСтроки Цикл
		ВсеЖирный		 = ВсеЖирный		И ТекСтрока.Жирный;
		ВсеКурсив		 = ВсеКурсив		И ТекСтрока.Курсив;
		ВсеПодчеркнутый  = ВсеПодчеркнутый	И ТекСтрока.Подчеркнутый;
		ВсеДвойнаяШирина = ВсеДвойнаяШирина	И ТекСтрока.ДвойнаяШирина;
		ВсеДвойнаяВысота = ВсеДвойнаяВысота	И ТекСтрока.ДвойнаяВысота;
		ВсеЛево			 = ВсеЛево			И ТекСтрока.Выравнивание = "Лево";
		ВсеЦентр		 = ВсеЦентр			И ТекСтрока.Выравнивание = "Центр";
		ВсеПраво		 = ВсеПраво			И ТекСтрока.Выравнивание = "Право";
	КонецЦикла; 
	
	КоманднаяПанельКнопки.Жирный		.Пометка = ВсеЖирный;
	КоманднаяПанельКнопки.Курсив		.Пометка = ВсеКурсив;
	КоманднаяПанельКнопки.Подчеркнутый	.Пометка = ВсеПодчеркнутый;
	КоманднаяПанельКнопки.ДвойнаяШирина	.Пометка = ВсеДвойнаяШирина;
	КоманднаяПанельКнопки.ДвойнаяВысота	.Пометка = ВсеДвойнаяВысота;
	
	КоманднаяПанельКнопки.ВыравниваниеЛево	.Пометка = ВсеЛево;
	КоманднаяПанельКнопки.ВыравниваниеЦентр	.Пометка = ВсеЦентр;
	КоманднаяПанельКнопки.ВыравниваниеПраво	.Пометка = ВсеПраво;
	
КонецПроцедуры

Процедура ПечатьСчетаУстановитьКартинку(ТекущаяСтрока)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаВводКартинки = Обработки.ВводКартинки.ПолучитьФорму();
	ОбработкаВводКартинки.Картинка				= ТекущаяСтрока.Данные;
	ОбработкаВводКартинки.НомерКартинки			= ТекущаяСтрока.Данные;
	ОбработкаВводКартинки.Тип					= ТекущаяСтрока.Тип;
	ОбработкаВводКартинки.КоличествоТочекСтроки	= ТекущаяСтрока.РЕЖИМ_ПЕЧАТИ;
	ДанныеКартинки = ОбработкаВводКартинки.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(ДанныеКартинки) Тогда
		ТекущаяСтрока.Тип			= ДанныеКартинки.Тип;
		ТекущаяСтрока.Данные		= ДанныеКартинки.Картинка;
		ТекущаяСтрока.РЕЖИМ_ПЕЧАТИ	= ДанныеКартинки.КоличествоТочек;
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ПечатьСчетаУстановитQRКод(ТекущаяСтрока)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаQRКод = Обработки.ВводQRКода.ПолучитьФорму();
	ОбработкаQRКод.QRКод = ТекущаяСтрока.Данные;
	QRКод = ОбработкаQRКод.ОткрытьМодально();
	
	Если ЗначениеЗаполнено(QRКод) Тогда
		ТекущаяСтрока.Тип = "QRКод";
		ТекущаяСтрока.Данные = QRКод;
	КонецЕсли;

КонецПроцедуры

Процедура ПечатьСчетаЯзыкНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтерфейсАдмина.ВыбратьИзСпискаЯзыков(ЭтаФорма, Элемент);
	
КонецПроцедуры

// Шапка

Процедура ПечатьСчетаТаблицаШапкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПечатьСчетаПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ПечатьСчетаТаблицаШапкиПриАктивизацииСтроки(Элемент)
	
	ПечатьСчетаОпределитьПараметрыВыделенныхСтрок(ЭлементыФормы.ПечатьСчетаТаблицаШапки.ВыделенныеСтроки, ЭлементыФормы.КоманднаяПанельШапкаСчета.Кнопки);
	
КонецПроцедуры

Процедура КоманднаяПанельШапкаСчетаЖирный(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаШапки, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельШапкаСчетаКурсив(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаШапки, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельШапкаСчетаПодчеркнутый(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаШапки, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельШапкаСчетаДвойнаяШирина(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаШапки, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельШапкаСчетаДвойнаяВысота(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаШапки, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельШапкаСчетаВыравниваниеЛево(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаШапки, Кнопка);
	// чтобы установились другие кнопки выравнивания
	ПечатьСчетаОпределитьПараметрыВыделенныхСтрок(ЭлементыФормы.ПечатьСчетаТаблицаШапки.ВыделенныеСтроки, ЭлементыФормы.КоманднаяПанельШапкаСчета.Кнопки);
	
КонецПроцедуры

Процедура КоманднаяПанельШапкаСчетаВыравниваниеЦентр(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаШапки, Кнопка);
	// чтобы установились другие кнопки выравнивания
	ПечатьСчетаОпределитьПараметрыВыделенныхСтрок(ЭлементыФормы.ПечатьСчетаТаблицаШапки.ВыделенныеСтроки, ЭлементыФормы.КоманднаяПанельШапкаСчета.Кнопки);
	
КонецПроцедуры

Процедура КоманднаяПанельШапкаСчетаВыравниваниеПраво(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаШапки, Кнопка);
	// чтобы установились другие кнопки выравнивания
	ПечатьСчетаОпределитьПараметрыВыделенныхСтрок(ЭлементыФормы.ПечатьСчетаТаблицаШапки.ВыделенныеСтроки, ЭлементыФормы.КоманднаяПанельШапкаСчета.Кнопки);
	
КонецПроцедуры
 
Процедура КоманднаяПанельШапкаСчетаКартинка(Кнопка)
	
	ПечатьСчетаУстановитьКартинку(ЭлементыФормы.ПечатьСчетаТаблицаШапки.ТекущаяСтрока);
	
КонецПроцедуры

Процедура КоманднаяПанельШапкаСчетаQRКод(Кнопка)
	
	ПечатьСчетаУстановитQRКод(ЭлементыФормы.ПечатьСчетаТаблицаШапки.ТекущаяСтрока);
	
КонецПроцедуры

// Подвал

Процедура ПечатьСчетаТаблицаПодвалаПриАктивизацииСтроки(Элемент)
	
	ПечатьСчетаОпределитьПараметрыВыделенныхСтрок(ЭлементыФормы.ПечатьСчетаТаблицаПодвала.ВыделенныеСтроки, ЭлементыФормы.КоманднаяПанельПодвалСчета.Кнопки);
	
КонецПроцедуры

Процедура ПечатьСчетаТаблицаПодвалаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПечатьСчетаПриВыводеСтроки(ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура КоманднаяПанельПодвалСчетаЖирный(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаПодвала, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельПодвалСчетаКурсив(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаПодвала, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельПодвалСчетаПодчеркнутый(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаПодвала, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельПодвалСчетаДвойнаяШирина(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаПодвала, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельПодвалСчетаДвойнаяВысота(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаПодвала, Кнопка);
	
КонецПроцедуры

Процедура КоманднаяПанельПодвалСчетаВыравниваниеЛево(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаПодвала, Кнопка);
	// чтобы установились другие кнопки выравнивания
	ПечатьСчетаОпределитьПараметрыВыделенныхСтрок(ЭлементыФормы.ПечатьСчетаТаблицаПодвала.ВыделенныеСтроки, ЭлементыФормы.КоманднаяПанельПодвалСчета.Кнопки);
	
КонецПроцедуры

Процедура КоманднаяПанельПодвалСчетаВыравниваниеЦентр(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаПодвала, Кнопка);
	// чтобы установились другие кнопки выравнивания
	ПечатьСчетаОпределитьПараметрыВыделенныхСтрок(ЭлементыФормы.ПечатьСчетаТаблицаПодвала.ВыделенныеСтроки, ЭлементыФормы.КоманднаяПанельПодвалСчета.Кнопки);
	
КонецПроцедуры

Процедура КоманднаяПанельПодвалСчетаВыравниваниеПраво(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПечатьСчетаУстановитьАтрибутШапкиПодвала(ЭлементыФормы.ПечатьСчетаТаблицаПодвала, Кнопка);
	// чтобы установились другие кнопки выравнивания
	ПечатьСчетаОпределитьПараметрыВыделенныхСтрок(ЭлементыФормы.ПечатьСчетаТаблицаПодвала.ВыделенныеСтроки, ЭлементыФормы.КоманднаяПанельПодвалСчета.Кнопки);
	
КонецПроцедуры

Процедура КоманднаяПанельПодвалСчетаКартинка(Кнопка)
	
	ПечатьСчетаУстановитьКартинку(ЭлементыФормы.ПечатьСчетаТаблицаПодвала.ТекущаяСтрока);
	
КонецПроцедуры

Процедура КоманднаяПанельПодвалСчетаQRКод(Кнопка)
	
	ПечатьСчетаУстановитQRКод(ЭлементыФормы.ПечатьСчетаТаблицаПодвала.ТекущаяСтрока);
	
КонецПроцедуры

// Конец печать счета

Процедура ДоставкаСписокЗаказовОформлениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.ЦветТекста = ДанныеСтроки.Цвет;
	ОформлениеСтроки.Шрифт= ДанныеСтроки.Шрифт;
	
КонецПроцедуры

//Процедура ПроизводствоСписокБлюдОформлениеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
//	
//	ОформлениеСтроки.Ячейки.Цвет.ЦветФона = ДанныеСтроки.Цвет;
//	//ОформлениеСтроки.Шрифт= ДанныеСтроки.Шрифт;
//	
//КонецПроцедуры


Процедура БроньРабочееВремяНачНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИнтерфейсАдмина.ВыбратьВремяИзСписка(ЭтаФорма, Элемент);
КонецПроцедуры

Процедура БроньРабочееВремяКонНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИнтерфейсАдмина.ВыбратьВремяИзСписка(ЭтаФорма, Элемент);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Бронирование

Процедура БроньПредоплатаВариантОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВариантов = Новый СписокЗначений;
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ВариантыОплаты 
							|ГДЕ НЕ ПометкаУдаления И Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Безнал)
							|");
							
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВариантов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если СписокВариантов.Количество() = 0 Тогда
		Предупреждение("Нет ни одного варианта оплаты с типом ""Безнал""");
		Возврат;
	КонецЕсли; 
	
	ВыбВариант = ВыбратьИзСписка(СписокВариантов, Элемент);
	Если ВыбВариант <> Неопределено Тогда
		Элемент.Значение = ВыбВариант.Значение;
	КонецЕсли; 
	
КонецПроцедуры

Процедура БроньПредоплатаВариантОплатыОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура МестоПроизводстваТаблицаМестоПроизводстваНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Возврат;
	//СписокВыбора = Новый СписокЗначений;
	//
	//УжеВыбраны = МестоПроизводстваТаблица.ВыгрузитьКолонку("МестоПроизводства");
	//
	//Запрос = Новый Запрос("
	//	|ВЫБРАТЬ
	//	|	ГруппыПечати.Ссылка
	//	|ИЗ
	//	|	Справочник.ГруппыПечати КАК ГруппыПечати
	//	|ГДЕ
	//	|	НЕ ГруппыПечати.ПометкаУдаления
	//	|	И ГруппыПечати.ЕстьМонитор
	//	|	И НЕ ГруппыПечати.Ссылка В ИЕРАРХИИ (&УжеВыбраны)
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	ГруппыПечати.Наименование
	//	|");
	//	
	//Запрос.УстановитьПараметр("УжеВыбраны", УжеВыбраны);
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	СписокВыбора.Добавить(Выборка.Ссылка);
	//КонецЦикла;
	//
	//
	//ВыбЗнач = ВыбратьИзМеню(СписокВыбора);
	//Если ВыбЗнач = Неопределено Тогда
	//	Возврат;
	//КонецЕсли; 

	//Элемент.Значение = ВыбЗнач.Значение;
	//
	//Модифицированность = Истина;

КонецПроцедуры

Процедура МестоПроизводстваТаблицаВариантНастройкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если НастройкиМонитораМарокСписок.Количество() = 0 Тогда
		Предупреждение("Нет доступных вариантов настроек!", 7);
		ТекущийЭлемент = ЭлементыФормы.НастройкиМонитораМарокСписок;
		Возврат;
	КонецЕсли;	
	
	ВыбЗнач = ВыбратьИзМеню(НастройкиМонитораМарокСписок);
	Если ВыбЗнач = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	Элемент.Значение = ВыбЗнач.Значение;
	
	Модифицированность = Истина;
	
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура МестоПроизводстваТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура СписокРМВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	КнопкаСписокРМЗапуститьНажатие();
КонецПроцедуры

Процедура СписокСУПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура СписокСУВыбор(Элемент, ЭлементСписка)
	ОткрытьЗначение(ЭлементСписка.Значение);
КонецПроцедуры

Процедура ИнфоДисплей_РазрешитьАвторизациюГостяВБлокировкеПриИзменении(Элемент)
	ЭлементыФормы.ИнфоДисплей_ИнтервалСбросаЗаказаВБлокировке.Доступность = ИнфоДисплей_РазрешитьАвторизациюГостяВБлокировке;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

ИнициализацияПараметровНастройки();
	
СписокРМ.Отбор.ПометкаУдаления.Установить(Ложь);
Если НЕ глРежимКиоск И РаботаСокнами = Неопределено Тогда
	РаботаСокнами = Обработки.РаботаСокнами.Создать();
КонецЕсли;
