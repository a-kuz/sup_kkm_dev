
////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Ищет, есть ли ссылка на карту у других клиентов.
//
// Параметры:
//  Карта - строка - карта, которую необходимо проверить.
//  Отказ - признак отказа в записи элемент справочника. 
//
Процедура ЕстьСсылкиНаКарту(Карта, Отказ) Экспорт
	//	
	//	Если Не ЗначениеЗаполнено(Карта) Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Запрос = Новый Запрос;
	//	
	//	Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	ТабКартДругихКлиентов.Ссылка КАК Клиент
	//	|ИЗ
	//	|	Справочник.Клиенты.Карты КАК ТабКартДругихКлиентов
	//	|ГДЕ
	//	|	ТабКартДругихКлиентов.Ссылка <> &Ссылка
	//	|	И ТабКартДругихКлиентов.НомерКарты = &НомерКарты";
	//	
	//	Запрос.УстановитьПараметр("Ссылка"    , Ссылка);
	//	Запрос.УстановитьПараметр("НомерКарты", Карта);
	//	
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	
	//	Пока Выборка.Следующий() Цикл
	//		
	//		Сообщить("Карта №" + Карта + " уже используется клиентом " + Выборка.Клиент + "!", СтатусСообщения.Важное);		
	//		Отказ = Истина;
	//		
	//	КонецЦикла;
	//	
КонецПроцедуры

///////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ОТЧЕТОВ

#Если Клиент Тогда

// Возвращает доступные отчеты в зависимости от версии.
//
// Параметры:
//  Нет.
//
// Вовращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати.
//  
Функция ПолучитьСписокОтчетов() Экспорт
	
	СписокОтчетов = Новый СписокЗначений;
	СписокОтчетов.Добавить("ВзаиморасчетыПоБезналОплате", 	"Взаиморасчеты по безнал оплате");
	СписокОтчетов.Добавить("ДавностьПосещений",				"Давность посещений");
	СписокОтчетов.Добавить("ДлительностьПосещений",			"Длительность посещений");
	СписокОтчетов.Добавить("НачисленияПоКартам",			"Начисления по картам");
	СписокОтчетов.Добавить("ОтчетПоВыручке",				"Отчет по выручке");
	СписокОтчетов.Добавить("ПокупкиКлиентов",				"Покупки клиентов");
	Если глВерсия>1 Тогда
		СписокОтчетов.Добавить("БонусыКлиентов","Бонусы клиентов");
		Если глВерсия>2 Тогда
			СписокОтчетов.Добавить("ОборотыПоКлиентам",				"Обороты по клиентам");
		КонецЕсли; 
	КонецЕсли;

	ЗаполнитьСписокОбработок(СписокОтчетов, Перечисления.ВидыОбработок.ВнешнийОтчет, "Справочник.Клиенты", Истина, Ложь);
	Возврат СписокОтчетов;
	
КонецФункции

// Строит отчет с предопределенными группировками.
//
Процедура СформироватьОтчет(ТипОтчета, ОбъектОтчета) Экспорт 
	
	Если ОбъектОтчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отчет = Отчеты[ТипОтчета].Создать();
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Отчет.ДатаС = ДобавитьМесяц(ТекущаяДата(), -1);
	Отчет.ДатаПо  = КонецДня(ТекущаяДата());
	Отчет.Период = ПредставлениеПериода(Отчет.ДатаС,Отчет.ДатаПо);
	
	// установим группировки НашаНоменклатура и НашаХарактеристика
	ТаблицаГруппировокСтроки = ФормированиеОтчетов.ПолучитьПустуюТаблицуНастроекОтчета("Группировки");
	
	НоваяСтрока = ТаблицаГруппировокСтроки.Добавить();
	НоваяСтрока.Поле           = "Клиент";
	НоваяСтрока.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
	
	// заполним отборы
	ТаблицаОтборов = ФормированиеОтчетов.ПолучитьПустуюТаблицуНастроекОтчета("Отбор");
	
	НоваяСтрока = ТаблицаОтборов.Добавить();
	НоваяСтрока.Поле         = "Клиент";
	Если ОбъектОтчета.ЭтоГруппа Тогда
		НоваяСтрока.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	Иначе
		НоваяСтрока.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	НоваяСтрока.Значение     = ОбъектОтчета.Ссылка;
	
	ФормированиеОтчетов.СформироватьОтчетПоПараметрам(Отчет, ТаблицаГруппировокСтроки, , ТаблицаОтборов);
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
//ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

// Обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		Сообщить("Не заполнено наименование!",СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипОграниченияВариантовОплат) Тогда 
		ТипОграниченияВариантовОплат = Перечисления.ТипыОграниченийПоСписку.Нет;
	КонецЕсли;
	
	// пометим подчиненные элементы
	Если ПометкаУдаления <> Ссылка.ПометкаУдаления Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	КонтактнаяИнформация.Ссылка,
		|	КонтактнаяИнформация.Объект
		|ИЗ
		|	Справочник.КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", Ссылка);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
		НачатьТранзакцию();
		Для Каждого СтрокаТаблицы Из ТаблицаЗапроса Цикл
			ОбъектИнф = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			ОбъектИнф.ПометкаУдаления = ПометкаУдаления;
			Попытка
				ОбъектИнф.Записать();
			Исключение
				ОтменитьТранзакцию();
			КонецПопытки;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

