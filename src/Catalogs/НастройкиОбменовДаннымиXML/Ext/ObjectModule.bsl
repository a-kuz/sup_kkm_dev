//Перем мРегламентноеЗадание Экспорт; // Текущее регламентное задание.

#Если Клиент Тогда

Функция ВыбратьКаталогВДиалоге(ТекущийКаталог, Заголовок, РежимВыбора, Фильтр, ИмяФайлаБезРасширения = "") Экспорт
	
	Длг = Новый ДиалогВыбораФайла(РежимВыбора);
	
	Длг.Каталог 	= ТекущийКаталог;
	Длг.Заголовок 	= Заголовок;
	Длг.Фильтр 		= Фильтр;
	
	Если РежимВыбора = РежимДиалогаВыбораФайла.Сохранение Тогда
		
		Длг.ПроверятьСуществованиеФайла = Ложь;
		Длг.ПолноеИмяФайла = ИмяФайлаБезРасширения;
		Длг.Расширение = Прав(Фильтр, 3);
		
	КонецЕсли;
	
	Если Длг.Выбрать() Тогда
		
		Если РежимВыбора=РежимДиалогаВыбораФайла.Открытие Тогда
			
			Возврат Длг.ПолноеИмяФайла;
			
		ИначеЕсли  РежимВыбора=РежимДиалогаВыбораФайла.Сохранение Тогда
			
			Возврат Длг.ПолноеИмяФайла;
			
		Иначе
			
			Возврат Длг.Каталог;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТекущийКаталог;
		
	КонецЕсли;
	
КонецФункции

Процедура ОткрытьКаталог(Каталог) Экспорт
	
	Если ПустаяСтрока(Каталог) Тогда
		
		Предупреждение("Файл или каталог не выбран!");
		Возврат;
		
	КонецЕсли;
	
	ВходящийФайл = Новый Файл(Каталог);
	
	Если НЕ ВходящийФайл.Существует() Тогда
		
		Предупреждение("Файл или каталог не существует!");
		Возврат;
		
	КонецЕсли;
	
	ЗапуститьПриложение(СокрЛП(Каталог));
	
КонецПроцедуры

Процедура ОткрытьОбработкуУниверсальныйОбменДаннымиXML() Экспорт
	
	ЭлементОбменДанными = ЭтотОбъект;

	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";
	
	Если ЭлементОбменДанными.ВидОбменаСтрокой = "Произвольный" Тогда
		МакетПравилОбмена              = ЭлементОбменДанными.ХранилищеПравилВыгрузки.Получить();
	Иначе
		ИмяМакета = ЭлементОбменДанными.ВидОбменаСтрокой;
		Если Метаданные.Справочники.НастройкиОбменовДаннымиXML.Макеты.Найти(ИмяМакета) = Неопределено Тогда
			Сообщить("Нет макета для вида обмена: " + ЭлементОбменДанными.ВидОбменаСтрокой);
			Возврат;
		КонецЕсли;
		МакетПравилОбмена              = Справочники.НастройкиОбменовДаннымиXML.ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Если НЕ ТипЗнч(МакетПравилОбмена) = Тип("ДвоичныеДанные")
		И НЕ ТипЗнч(МакетПравилОбмена) = Тип("ТекстовыйДокумент") Тогда
		Возврат;
	КонецЕсли;
	
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	Источник = ИмяВременногоФайлаПравилОбмена;

	Если НЕ ЭлементОбменДанными.НепосредственноеЧтениеВИБПриемнике
		И ПустаяСтрока(ЭлементОбменДанными.ПутьКФайлуДанныхВыгрузки) Тогда
		Сообщить("Путь к файлу данных не указан");
		Возврат;
	КонецЕсли;
	
	Обработка = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	ФормаОбработки = Обработка.ПолучитьФорму();
	
	ФормаОбработки.Открыть();
	
	Обработка.РежимОбмена			= "Выгрузка";
	ФормаОбработки.ЭлементыФормы.ДействияФормы.Кнопки.Выполнить.Текст = "Выгрузить данные";
	ФормаОбработки.ЭлементыФормы.ГлавнаяПанельФормы.ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ГлавнаяПанельФормы.Страницы.Выгрузка;
	
	Обработка.ИмяФайлаПравилОбмена	= Источник;
	
	Если НЕ ЭлементОбменДанными.НепосредственноеЧтениеВИБПриемнике Тогда
		Если ЭлементОбменДанными.ДобавлятьДатуВремяКИмениФайлаПриВыгрузке Тогда
			Обработка.ИмяФайлаОбмена		= АвтообменДанными.ОбменДаннымиДобавитьКИмениФайлаДату(ЭлементОбменДанными.ПутьКФайлуДанныхВыгрузки);
		Иначе
			Обработка.ИмяФайлаОбмена		= ЭлементОбменДанными.ПутьКФайлуДанныхВыгрузки;
		КонецЕсли;
	КонецЕсли;
	
	Обработка.ЗагрузитьПравилаОбмена();
	
	ЗаполняемыеСвойства = "АрхивироватьФайл, АутентификацияWindowsИнформационнойБазыДляПодключения,
	|ВерсияПлатформыИнформационнойБазыДляПодключения, ИмяИнформационнойБазыНаСервереДляПодключения,
	|ИмяСервераИнформационнойБазыДляПодключения, КаталогИнформационнойБазыДляПодключения,
	|НепосредственноеЧтениеВИБПриемнике, ПарольДляРаспаковкиФайлаОбмена, ПарольДляСжатияФайлаОбмена,
	|ПарольИнформационнойБазыДляПодключения, ПользовательИнформационнойБазыДляПодключения,
	|ТипИнформационнойБазыДляПодключения";
	ЗаполнитьЗначенияСвойств(Обработка, ЭлементОбменДанными, ЗаполняемыеСвойства);
	
	// Заполнение даты начала выгрузки
	мДатаНачала = НачалоМесяца(ТекущаяДата());
	Если ЭлементОбменДанными.ПериодичностьВыгрузки = 1 Тогда
		мДатаНачала = НачалоДня(ТекущаяДата());
	ИначеЕсли ЭлементОбменДанными.ПериодичностьВыгрузки = 2 Тогда
		мДатаНачала = НачалоНедели(ТекущаяДата());
	ИначеЕсли ЭлементОбменДанными.ПериодичностьВыгрузки = 3 Тогда
		мДатаНачала = НачалоДня(ТекущаяДата() - 7 * 24 * 60 * 60);
	ИначеЕсли ЭлементОбменДанными.ПериодичностьВыгрузки = 4 Тогда
		мДатаНачала = НачалоМесяца(ТекущаяДата());
	ИначеЕсли ЭлементОбменДанными.ПериодичностьВыгрузки = 5 Тогда
		мДатаНачала = НачалоДня(ДобавитьМесяц(ТекущаяДата(), -1));
	КонецЕсли;
	Обработка.ДатаНачала			= мДатаНачала;

	// Заполнение даты окончания выгрузки
	Обработка.ДатаОкончания			= КонецДня(ТекущаяДата());
	
	Обработка.ИмяФайлаПравилОбмена	= Источник;
	
	Если Обработка.НепосредственноеЧтениеВИБПриемнике Тогда
		ФормаОбработки.ЭлементыФормы.ПанельПараметрыВыгрузки.ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельПараметрыВыгрузки.Страницы.ВыгрузкаВИБПриемник;
	Иначе
		ФормаОбработки.ЭлементыФормы.ПанельПараметрыВыгрузки.ТекущаяСтраница = ФормаОбработки.ЭлементыФормы.ПанельПараметрыВыгрузки.Страницы.ВыгрузкаВФайл;
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

Функция ВыполнитьПодключениеКИБПриемнику() Экспорт
	
	РезультатПодключения = Неопределено;
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ФайловыйРежим", ТипИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("АутентификацияWindows", АутентификацияWindowsИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("КаталогИБ", КаталогИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяСервера", ИмяСервераИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяИБНаСервере", ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Вставить("Пользователь", ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("Пароль", ПарольИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ВерсияПлатформы", ВерсияПлатформыИнформационнойБазыДляПодключения);
	
	ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения);
	
	Если ОбъектПодключения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		РезультатПодключения = ОбъектПодключения.Обработки.УниверсальныйОбменДаннымиXML.Создать();
	Исключение
		#Если Клиент тогда
		Сообщить("При попытке создания обработки УниверсальныйОбменДаннымиXML произошла ошибка:" + ОписаниеОшибки(), СтатусСообщения.Важное);
		#КонецЕсли
		РезультатПодключения = Неопределено;
	КонецПопытки;
	
	Если РезультатПодключения <> Неопределено Тогда
		
		//РезультатПодключения.ИспользоватьТранзакции = ИспользоватьТранзакции;	
		//РезультатПодключения.КоличествоОбъектовНаТранзакцию = КоличествоОбъектовНаТранзакцию;
		//
		//РезультатПодключения.ФлагРежимОтладки = ФлагРежимОтладки;
		//
		//РезультатПодключения.ИмяФайлаПротоколаОбмена = ПолучитьИмяПротоколаДляВторойИнформационнойБазыComСоединения();
		//						
		//РезультатПодключения.ДописыватьДанныеВПротоколОбмена = ДописыватьДанныеВПротоколОбмена;
		//РезультатПодключения.ВыводВПротоколИнформационныхСообщений = ВыводВПротоколИнформационныхСообщений;
		
		РезультатПодключения.РежимОбмена = "Загрузка";
		
	КонецЕсли;
	
	Возврат РезультатПодключения;
	
КонецФункции

Функция ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения = "", СтрокаСообщенияОбОшибке = "") Экспорт
	
	НаличиеОшибок = Ложь;
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задан каталог информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя сервера 1С:Предприятия информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя информационной базы-приемника на сервере 1С:Предприятия";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
		
	КонецЕсли;
	
	Возврат НЕ НаличиеОшибок;	
	
КонецФункции

Функция ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке = "")
	
	Перем СтрокаПодключения;
	
	ПараметровДостаточно = ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке);
	
	Если Не ПараметровДостаточно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	//"V8" или "V81"
	ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		
		#Если Клиент Тогда
		Состояние("Идет процесс соединения ...");
		#КонецЕсли
	
		ОбъектПодключения = ОбъектПодключения +".COMConnector";
		ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
		ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
					
		#Если Клиент Тогда
		Состояние("Соединение установлено");
		#КонецЕсли		
			
	Исключение
		
		СтрокаСообщенияОбОшибке = "При попытке соединения с COM-сервером произошла следующая ошибка:" + Символы.ПС 
						+ ОписаниеОшибки();
		#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
		    Состояние("Соединение установить не удалось");
			Состояние();
		#КонецЕсли
							
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

//// Процедура ищет регламентное задание.
////
//// Параметры:
////  Нет.
////
//// Возвращаемое значение:
////  Найденное регламентное задание. Если регламентное задание не найдено, то Неопределено.
////
//Функция НайтиРегламентноеЗаданиеПоНастройке() Экспорт
//	
//	Попытка
//		
//		Если НЕ ПустаяСтрока(РегламентноеЗадание) Тогда
//			
//			УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(РегламентноеЗадание);
//			ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
//			
//		Иначе
//			
//			ТекущееРегламентноеЗадание = Неопределено;
//			
//		КонецЕсли;
//		
//	Исключение
//		
//		ТекущееРегламентноеЗадание = Неопределено;
//		
//	КонецПопытки;
//	
//	Возврат ТекущееРегламентноеЗадание;
//	
//КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Обработчик события "ПередЗаписью" элемента справочника.
//
Процедура ПередЗаписью(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ВидОбменаСтрокой) Тогда
		Сообщить("Запись элемента справочника ""Обмены данными XML"": Не заполнен вид обмена.", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПланОбмена = АвтообменДанными.ЕстьПланОбменаДляНастройкиОбмена(ВидОбменаСтрокой);
	
	Если ПериодичностьВыгрузки = 6
		И НЕ ЕстьПланОбмена Тогда
		СообщитьОбОшибке("Для вида обмена """ + ВидОбменаСтрокойПредставление + """ не предусмотрена выгрузка измененных объектов.", Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПериодичностьВыгрузки = 6
		И НЕ ЗначениеЗаполнено(УзелИнформационнойБазы) Тогда
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//// работа с регламентными заданиями
	//Если мРегламентноеЗадание = Неопределено Тогда
	//	
	//	мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
	//		
	//КонецЕсли;
	
КонецПроцедуры


