////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

Перем одТипСтрока;                // Тип("Строка")
Перем одТипБулево;                // Тип("Булево")
Перем одТипЧисло;                 // Тип("Число")
Перем одТипДата;                  // Тип("Дата")
Перем одТипХранилищеЗначения;     // Тип("ХранилищеЗначения")
Перем одТипДвоичныеДанные;        // Тип("ДвоичныеДанные")
Перем одТипВидДвиженияНакопления; // Тип("ВидДвиженияНакопления")
Перем одТипУдалениеОбъекта;       // Тип("УдалениеОбъекта")
Перем одТипВидСчета;			  // Тип("ВидСчета")
Перем одТипТип;			  		  // Тип("Тип")
Перем одТипСоответствие;		  // Тип("Соответствие")

Перем одТипУзлаXML_КонецЭлемента  Экспорт;
Перем одТипУзлаXML_НачалоЭлемента Экспорт;
Перем одТипУзлаXML_Текст          Экспорт;

Перем ЗначениеПустаяДата Экспорт;

// Создает и устанавливает реквизиты диалога выбора фала.
//
// Параметры
//  МножественныйВыбор – Булево, признак множественного выбора.
//  НачальныйКаталог – Строка, содержащая начальный каталог выбора файла.
//
// Возвращаемое значение:
//   ДиалогВыбораФайлов – созданный диалог.
//
Функция диПолучитьДиалогВыбораФайлов(МножественныйВыбор, НачальныйКаталог = "") Экспорт
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Каталог = НачальныйКаталог;
	Диалог.Заголовок = "Выберите файл правил обмена...";
	Диалог.Фильтр = "Документ XML (*.xml)|*.xml|";
	Диалог.ПредварительныйПросмотр = Истина;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.МножественныйВыбор = МножественныйВыбор;
	
	Возврат Диалог;
	
КонецФункции // диПолучитьДиалогВыбораФайлов()

// ЗагрузитьПравилаОбмена(Кнопка)
//
Процедура ЗагрузитьПравилаОбмена(Кнопка)
	
	Диалог = диПолучитьДиалогВыбораФайлов(Ложь);
	
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	ХранилищеПравилВыгрузки = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла), Новый СжатиеДанных);
	
	ПрочитатьПравилаОбмена();
	
КонецПроцедуры

Процедура КнопкаСохранитьПравилаВФайлНажатие(Элемент)
		
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.Фильтр = "Правила выгрузки(*.xml)|*.xml|Все файлы (*.*)|*.*";
		
	Если ДиалогСохраненияФайла.Выбрать() Тогда
		
		ПутьСохраненияОбработки = ДиалогСохраненияФайла.ВыбранныеФайлы[0];

		Если НЕ ВидОбменаСтрокой = "Произвольный" Тогда
			ДанныеДляЗаписи = ПолучитьМакет(ВидОбменаСтрокой);
		Иначе
			ДанныеДляЗаписи = ХранилищеПравилВыгрузки.Получить();
		КонецЕсли;
		
		Попытка
			ДанныеДляЗаписи.Записать(ПутьСохраненияОбработки);
		Исключение
			Сообщить("Ошибка записи правил выгрузки!", СтатусСообщения.Важное);
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// УстановитьДоступность()
//
Процедура УстановитьДоступность()
	
	ЭлементыФормы.КнопкаЗагрузитьПравилаИзФайла.Доступность = СокрЛП(ВидОбменаСтрокой) = "Произвольный";
	ЭлементыФормы.НадписьПарольНаЗапись.Доступность = АрхивироватьФайл;
	ЭлементыФормы.ПарольДляСжатияФайлаОбмена.Доступность = АрхивироватьФайл;
	
	//ЭлементыФормы.ПанельПараметрыАвтообмена.Доступность = Автообмен;
	
	// Определим, есть ли для выбранного вида обмена доступный план обмена
	ЕстьПланОбмена = АвтообменДанными.ЕстьПланОбменаДляНастройкиОбмена(ВидОбменаСтрокой);
	ЭлементыФормы.УзелИнформационнойБазы.Доступность = ПериодичностьВыгрузки = 6 И ЕстьПланОбмена;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УстановитьДоступность();
	
	//Установить видимость реквизитов формы
	УстановитьВидимость();
	
	//мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
	//УстановитьТекстНадписиРегламентнойНастройки();
	
	ЗаполнитьСписокВыбораВидовОбмена();
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораВидовОбмена()

	СписокВыбора = Новый СписокЗначений;
	Для каждого ТекущийМакет Из ЭтотОбъект.Метаданные().Макеты Цикл
		
		//Если глВерсия > 1 Тогда
		//	// Добавляем все макеты не lite
		//	Если Найти(ТекущийМакет.Имя, "Lite") = 0 Тогда
		//		СписокВыбора.Добавить(ТекущийМакет.Имя, ТекущийМакет.Синоним);
		//	КонецЕсли;
		//Иначе
		//	// Добавляем все макеты lite и макеты в единственном числе
		//	Если Найти(ТекущийМакет.Имя, "Lite") > 0 Тогда
		//		СписокВыбора.Добавить(ТекущийМакет.Имя, ТекущийМакет.Синоним);
		//	Иначе
		//		СтрокаИмяМакета = ТекущийМакет.Имя + "Lite";
		//		Если ЭтотОбъект.Метаданные().Макеты.Найти(СтрокаИмяМакета) = Неопределено Тогда
		//			СписокВыбора.Добавить(ТекущийМакет.Имя, ТекущийМакет.Синоним);
		//		КонецЕсли;
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		Если глВерсия = 1 Тогда
			
			// Добавляем все макеты lite и макеты в единственном числе
			Если Найти(ТекущийМакет.Имя, "Lite") > 0 Тогда
				СписокВыбора.Добавить(ТекущийМакет.Имя, ТекущийМакет.Синоним);
			Иначе
				СтрокаИмяМакетаLite		= ТекущийМакет.Имя + "Lite";
				СтрокаИмяМакетаBusiness	= ТекущийМакет.Имя + "Business";
				Если Найти(ТекущийМакет.Имя, "Business") = 0  
					И ЭтотОбъект.Метаданные().Макеты.Найти(СтрокаИмяМакетаLite) = Неопределено Тогда
					СписокВыбора.Добавить(ТекущийМакет.Имя, ТекущийМакет.Синоним);
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли глВерсия = 2 Тогда
			
			// Добавляем все макеты Business и макеты в единственном числе
			Если Найти(ТекущийМакет.Имя, "Business") > 0 Тогда
				СписокВыбора.Добавить(ТекущийМакет.Имя, ТекущийМакет.Синоним);
			Иначе
				СтрокаИмяМакетаLite		= ТекущийМакет.Имя + "Lite";
				СтрокаИмяМакетаBusiness	= ТекущийМакет.Имя + "Business";
				Если Найти(ТекущийМакет.Имя, "Lite") = 0 
					И ЭтотОбъект.Метаданные().Макеты.Найти(СтрокаИмяМакетаBusiness) = Неопределено Тогда
					СписокВыбора.Добавить(ТекущийМакет.Имя, ТекущийМакет.Синоним);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			// Добавляем все макеты не lite и Business
			Если Найти(ТекущийМакет.Имя, "Lite") = 0 И Найти(ТекущийМакет.Имя, "Business") = 0 Тогда
				СписокВыбора.Добавить(ТекущийМакет.Имя, ТекущийМакет.Синоним);
			КонецЕсли;
		КонецЕсли;

		
		//КонецЕсли; 
		//СписокВыбора.Добавить(ТекущийМакет.Имя, ТекущийМакет.Синоним);
	КонецЦикла;
	СписокВыбора.Добавить("Произвольный", "Произвольный");
    ЭлементыФормы.ВидОбмена.СписокВыбора = СписокВыбора;
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	ВыгрузкаДанныхВФайлОбменаПриИзменении(Неопределено);
	ТипИнформационнойБазыДляПодключенияПриИзменении(Неопределено);
	АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Неопределено);
	
	ЭлементыФормы.НадписьПримерИзмененияИмениФайла.Видимость = ДобавлятьДатуВремяКИмениФайлаПриВыгрузке;
	Если ДобавлятьДатуВремяКИмениФайлаПриВыгрузке Тогда
		ДополненноеИмяФайла = АвтообменДанными.ОбменДаннымиДобавитьКИмениФайлаДату(ПутьКФайлуДанныхВыгрузки);
		ЭлементыФормы.НадписьПримерИзмененияИмениФайла.Заголовок = ДополненноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ИЗМЕНЕННЫЕ ОПЕРАТОРЫ ОБРАБОТКИ УНИВЕРСАЛЬНЫЙ ОБМЕН ДАННЫМИ

// Инициализирует реквизиты обработки и модульные переменные
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияРеквизитовИМодульныхПеременных()
	
	// Типы
	
	одТипСтрока                = Тип("Строка");
	одТипБулево                = Тип("Булево");
	одТипЧисло                 = Тип("Число");
	одТипДата                  = Тип("Дата");
	одТипХранилищеЗначения     = Тип("ХранилищеЗначения");
	одТипДвоичныеДанные        = Тип("ДвоичныеДанные");
	одТипВидДвиженияНакопления = Тип("ВидДвиженияНакопления");
	одТипУдалениеОбъекта       = Тип("УдалениеОбъекта");
	одТипВидСчета			   = Тип("ВидСчета");
	одТипТип                   = Тип("Тип");
	одТипСоответствие          = Тип("Соответствие");
	
	ЗначениеПустаяДата		   = Дата('00010101');
	
	// Типы узлов xml
	
	одТипУзлаXML_КонецЭлемента  = ТипУзлаXML.КонецЭлемента;
	одТипУзлаXML_НачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	одТипУзлаXML_Текст          = ТипУзлаXML.Текст;
	
КонецПроцедуры // ИнициализацияРеквизитовИМодульныхПеременных()

// Осуществляет загрузку правил обмена в соответствии с форматом
//
// Параметры:
//  Источник        - Объект, из которого осуществляется загрузка правил обмена;
//  ТипИсточника    - Строка, указывающая тип источника: "XMLФайл", "ЧтениеXML", "Строка"
// 
Процедура ПрочитатьПравилаОбмена(ТипИсточника="XMLФайл") Экспорт
	
	ИмяВременногоФайлаПравилОбмена = "";
	КонфигурацияИсточник = "";
	РелизИсточник = "";
	КонфигурацияПриёмник = "";
	РелизПриемник = "";
	ДатаИзменения = Дата(1,1,1);
	
	ЭлементОбменДанными = ЭтотОбъект;

	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";
	
	Если ЭлементОбменДанными.ВидОбменаСтрокой = "Произвольный" Тогда
		МакетПравилОбмена              = ЭлементОбменДанными.ХранилищеПравилВыгрузки.Получить();
	Иначе
		ИмяМакета = ЭлементОбменДанными.ВидОбменаСтрокой;
		Если Метаданные.Справочники.НастройкиОбменовДаннымиXML.Макеты.Найти(ИмяМакета) = Неопределено Тогда
			Сообщить("Нет макета для вида обмена: " + ЭлементОбменДанными.ВидОбменаСтрокой);
			Возврат;
		КонецЕсли;
		МакетПравилОбмена              = Справочники.НастройкиОбменовДаннымиXML.ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Если НЕ ТипЗнч(МакетПравилОбмена) = Тип("ДвоичныеДанные")
		И НЕ ТипЗнч(МакетПравилОбмена) = Тип("ТекстовыйДокумент") Тогда
		Возврат;
	КонецЕсли;
	
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	Источник = ИмяВременногоФайлаПравилОбмена;

	Если ТипИсточника="XMLФайл" Тогда
		
		Файл = Новый Файл(Источник);
		Если Не Файл.Существует() Тогда
			//ЗаписатьВПротоколВыполнения(3);
			Возврат; 
		КонецЕсли;
		
		ПравилаОбмена = Новый ЧтениеXML();
		ПравилаОбмена.ОткрытьФайл(Источник);
		ПравилаОбмена.Прочитать();
		
	КонецЕсли; 
	
	Если Не ((ПравилаОбмена.ЛокальноеИмя = "ПравилаОбмена") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_НачалоЭлемента)) Тогда
		Возврат;
	КонецЕсли;
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		// Реквизиты конвертации
		Если ИмяУзла = "Наименование" Тогда
			Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ДатаВремяСоздания" Тогда
			ДатаИзменения = одЗначениеЭлемента(ПравилаОбмена, одТипДата);
			
		ИначеЕсли ИмяУзла = "Источник" Тогда
			РелизИсточник = ПравилаОбмена.ПолучитьАтрибут("ВерсияКонфигурации");
			КонфигурацияИсточник = ПравилаОбмена.ПолучитьАтрибут("СинонимКонфигурации");
			одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			РелизПриемник = ПравилаОбмена.ПолучитьАтрибут("ВерсияКонфигурации");
			КонфигурацияПриёмник = ПравилаОбмена.ПолучитьАтрибут("СинонимКонфигурации");
			одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Описание" Тогда
			Значение = "[РелизИсточникНачало]1.6.14.4[РелизИсточникОкончание]" + Символы.ПС
			+ "[РелизПриемникНачало]1.6.14.4[РелизПриемникОкончание]";
			
		ИначеЕсли (ИмяУзла = "ПравилаОбмена") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			ПравилаОбмена.Закрыть();
			Прервать;
			
		Иначе
			одПропустить(ПравилаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	// Удаляем временный файл правил
	Если Не ПустаяСтрока(ИмяВременногоФайлаПравилОбмена) Тогда
		Попытка
			УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
		Исключение 
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьПравилаОбмена()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя) Экспорт
	
	СтрЗначение = Объект.ПолучитьАтрибут(Имя);
	Если Не ПустаяСтрока(СтрЗначение) Тогда
		Возврат XMLЗначение(Тип, СокрП(СтрЗначение));		
	ИначеЕсли      Тип = одТипСтрока Тогда
		Возврат ""; 
	ИначеЕсли Тип = одТипБулево Тогда
		Возврат Ложь;
	ИначеЕсли Тип = одТипЧисло Тогда
		Возврат 0;
	ИначеЕсли Тип = одТипДата Тогда
		Возврат ЗначениеПустаяДата;
	КонецЕсли; 
	
КонецФункции // одАтрибут() 

// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя = "") Экспорт
	
	КолвоВложений = 0; // количество одноименных вложений
	
	Если Имя = "" Тогда
		
		Имя = Объект.ЛокальноеИмя;
		
	КонецЕсли; 
	
	Пока Объект.Прочитать() Цикл
		
		Если Объект.ЛокальноеИмя <> Имя Тогда
			Продолжить;
		КонецЕсли;
		
		ТипУзла = Объект.ТипУзла;
		
		Если ТипУзла = одТипУзлаXML_КонецЭлемента Тогда
			
			Если КолвоВложений = 0 Тогда
				
				Прервать;
				
			Иначе
				
				КолвоВложений = КолвоВложений - 1;
				
			КонецЕсли;
			
		ИначеЕсли ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
			
			КолвоВложений = КолвоВложений + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // одПропустить() 

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществлется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству = "", ОбрезатьСтрокуСправа = Истина) Экспорт
	
	Значение = "";
	Имя      = Объект.ЛокальноеИмя;
	
	Пока Объект.Прочитать() Цикл
		
		ТипУзла = Объект.ТипУзла;
		
		Если ТипУзла = одТипУзлаXML_Текст Тогда
			
			Значение = Объект.Значение;
			
			Если ОбрезатьСтрокуСправа Тогда
				
				Значение = СокрП(Значение);
				
			КонецЕсли;
			
		ИначеЕсли (Объект.ЛокальноеИмя = Имя) И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Если (Тип = одТипСтрока) ИЛИ (Тип = одТипБулево) ИЛИ (Тип = одТипЧисло) ИЛИ (Тип = одТипДата) 
		ИЛИ (Тип = одТипХранилищеЗначения) ИЛИ (Тип = одТипВидДвиженияНакопления) 
		ИЛИ (Тип = одТипВидСчета) Тогда
		
		Возврат XMLЗначение(Тип, Значение);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли; 
	
КонецФункции // одЗначениеЭлемента() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВыгрузкаЗагрузкаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

Процедура ПутьКФайлуДанныхВыгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПолноеИмяФайла = ВыбратьКаталогВДиалоге(Элемент.Значение, "Укажите файл данных.", РежимДиалогаВыбораФайла.Открытие, "Документ XML (*.xml)|*.xml|");
	Если ПолноеИмяФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураИмениФайла = Новый Файл(ПолноеИмяФайла);
	
	ИмяКаталогаДанныхЗагрузки = СтруктураИмениФайла.Путь;
	ИмяФайлаДанныхЗагрузки = СтруктураИмениФайла.Имя;
	
КонецПроцедуры

Процедура ПутьКФайлуДанныхВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение("explorer " + ИмяКаталогаДанныхЗагрузки + ИмяФайлаДанныхЗагрузки);
	
КонецПроцедуры

Процедура ИмяКаталогаДанныхЗагрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Каталог = ВыбратьКаталогВДиалоге(Элемент.Значение, "Укажите каталог, где находятся файлы для загрузки.", РежимДиалогаВыбораФайла.ВыборКаталога, "");
	Если Каталог = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяКаталогаДанныхЗагрузки = Каталог;
	
КонецПроцедуры

Процедура ИмяКаталогаДанныхЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Элемент.Значение);
	
КонецПроцедуры

Процедура ПутьКФайлуФлагуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = ВыбратьКаталогВДиалоге(Элемент.Значение, "Укажите файл флаг.", РежимДиалогаВыбораФайла.Открытие,);
	
КонецПроцедуры

Процедура ПутьКФайлуФлагуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКаталог(Элемент.Значение);
	
КонецПроцедуры

Процедура ЗапроситьОбмен(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ПутьКФайлуФлагу) Тогда
		Сообщить("Не заполнен путь к файлу флагу");
		Возврат;
	КонецЕсли;
	
	ФайлОбмена = Новый ЗаписьТекста;
	ФайлОбмена.Открыть(ПутьКФайлуФлагу, КодировкаТекста.UTF8);
	ФайлОбмена.Закрыть();
	
КонецПроцедуры

Процедура ОткрытьОбработкуВыгрузкиНажатие(Элемент)
	
	Если ЭтаФорма.Модифицированность() Тогда
		Попытка
			ЗаписатьВФорме()
		Исключение
			Возврат;                
		КонецПопытки; 
	КонецЕсли;
	
	ОткрытьОбработкуУниверсальныйОбменДаннымиXML();

КонецПроцедуры

Процедура ВыполнитьВыгрузкуНажатие(Элемент)

	Если ЭтаФорма.Модифицированность() Тогда
		Попытка
			ЗаписатьВФорме()
		Исключение
			Возврат;                
		КонецПопытки; 
	КонецЕсли;
	
	АвтообменДанными.ВыгрузитьДанныеXML(Ссылка);

КонецПроцедуры

Процедура ВыполнитьЗагрузкуНажатие(Элемент)
	
	Если ЭтаФорма.Модифицированность() Тогда
		Попытка
			ЗаписатьВФорме()
		Исключение
			Возврат;                
		КонецПопытки; 
	КонецЕсли;
	
	АвтообменДанными.ЗагрузитьДанныеXML(Ссылка, Истина);
	
КонецПроцедуры

Процедура ВидОбменаПриИзменении(Элемент)
	
	ВидОбменаСтрокой = Элемент.Значение;
	ВидОбменаСтрокойПредставление = Элемент.СписокВыбора.НайтиПоЗначению(Элемент.Значение).Представление;
	
	Если ВидОбменаСтрокой = "Произвольный" Тогда
		ХранилищеПравилВыгрузки = Неопределено;
	КонецЕсли;
	
	УстановитьДоступность();
	ПрочитатьПравилаОбмена();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ УНИВЕРСАЛЬНОЙ ОБРАБОТКИ

Процедура ВыгрузкаДанныхВФайлОбменаПриИзменении(Элемент)
	
	Если НепосредственноеЧтениеВИБПриемнике Тогда
		ЭлементыФормы.ПанельПараметрыВыгрузки.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыВыгрузки.Страницы.ВыгрузкаВИБПриемник;
	Иначе
		ЭлементыФормы.ПанельПараметрыВыгрузки.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыВыгрузки.Страницы.ВыгрузкаВФайл;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	Если ТипИнформационнойБазыДляПодключения Тогда
		ЭлементыФормы.ПанельПодключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельПодключениеИБПриемник.Страницы.ПодключениеФайловаяИБ;
	Иначе
		ЭлементыФормы.ПанельПодключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельПодключениеИБПриемник.Страницы.ПодключениеСервернаяИБ;
	КонецЕсли;	
	
КонецПроцедуры

Процедура АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьПользовательДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПользовательИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.НадписьПароль.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПарольИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	
КонецПроцедуры

Процедура ТестПодключенияНажатие(Элемент)
	
	РезультатПодключения = ВыполнитьПодключениеКИБПриемнику();
	
	Если РезультатПодключения <> Неопределено Тогда
		
		Предупреждение("Подключение к информационной базе приемнику произошло успешно.");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораФайла.Заголовок						=	"Выбор каталога информационной базы";
	ДиалогВыбораФайла.Каталог				=	Элемент.Значение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Элемент.Значение = ДиалогВыбораФайла.Каталог;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

Процедура ВерсияПлатформыИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		
		ВерсияПлатформыИнформационнойБазыДляПодключения = "V8";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяФайлаДанныхПриИзменении(Элемент)
	
	Файл = Новый Файл(ПутьКФайлуДанныхВыгрузки);
	АрхивироватьФайл = (ВРЕГ(Файл.Расширение) = ВРЕГ(".zip"));
	
КонецПроцедуры

// Обработчик события ПриИзменении флажка АрхивироватьФайл
//
Процедура АрхивироватьФайлПриИзменении(Элемент)

	Если АрхивироватьФайл Тогда
		ПутьКФайлуДанныхВыгрузки = СтрЗаменить(ПутьКФайлуДанныхВыгрузки, ".xml", ".zip");
	Иначе
		ПутьКФайлуДанныхВыгрузки = СтрЗаменить(ПутьКФайлуДанныхВыгрузки, ".zip", ".xml");
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры


// Открывает диалог выбора файла
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует
// 
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь, Знач РасширениеПоУмолчанию = "xml", 
	АрхивироватьФайлДанных = Истина, ВыборФайлаПравил = Ложь, РежимОбмена = "Выгрузка")
	
	ДиалогВыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	Если РасширениеПоУмолчанию = "txt" Тогда
		
		ДиалогВыбораФайла.Фильтр						=	"Файл протокола обмена (*.txt)|*.txt";
		ДиалогВыбораФайла.Расширение					=	"txt";
		
	ИначеЕсли РежимОбмена = "Выгрузка" Тогда
		
		Если АрхивироватьФайлДанных Тогда
			
			ДиалогВыбораФайла.Фильтр						=	"Архивный файл данных (*.zip)|*.zip";
			ДиалогВыбораФайла.Расширение					=	"zip";
			
		ИначеЕсли ВыборФайлаПравил Тогда
			
			ДиалогВыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip";
			ДиалогВыбораФайла.Расширение					=	"xml";	
			
		Иначе
			
			ДиалогВыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml";
			ДиалогВыбораФайла.Расширение					=	"xml";
			
		КонецЕсли; 
		
	Иначе
		
		ДиалогВыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip";
		ДиалогВыбораФайла.Расширение					=	"xml";
		
	КонецЕсли;
	
	ДиалогВыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогВыбораФайла.ИндексФильтра					=	0;
	ДиалогВыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораФайла.ПолноеИмяФайла;
		
		//Если Элемент = ЭлементыФормы.ИмяФайлаПравил Тогда 
		//	ИмяФайлаПравилПриИзменении(Элемент);
			
		//ИначеЕсли Элемент = ЭлементыФормы.ИмяФайлаОбмена Тогда 
		//	ИмяФайлаОбменаПриИзменении(Элемент);
			
		//Иначе
		Если Элемент = ЭлементыФормы.ИмяФайлаДанных Тогда 
			ИмяФайлаДанныхПриИзменении(Элемент);	
	
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента ИмяФайлаОбмена.
//
Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, , , АрхивироватьФайл);
	
КонецПроцедуры

// Открывает файл обмена во внешнем приложении
//
// Параметры:
//  
// 
Процедура ОткрытьВПриложении(Элемент, СтандартнаяОбработка)

	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры // ОткрытьВПриложении() 

Процедура ДобавлятьДатуВремяКИмениФайлаПриВыгрузкеПриИзменении(Элемент)

	УстановитьВидимость();
	
КонецПроцедуры

////Процедура-обработчик события Нажатие элемента формы НадписьНастройкаРегламентногоЗадания.
////
//Процедура КнопкаНастройкаРегламентногоЗаданияНажатие(Элемент)
//	
//	Если мРегламентноеЗадание = Неопределено Тогда
//		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
//	КонецЕсли;
//	
//	Диалог = ПолучитьОбщуюФорму("ДиалогРегламентногоЗадания");
//	Диалог.РегламентноеЗадание = мРегламентноеЗадание;
//	Диалог.Наименование = Наименование;
//	Диалог.МетаданныеВыбор = "ЗаданиеОбменДаннымиXML";
//	
//	Если Диалог.ОткрытьМодально() <> Истина Тогда
//		
//		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
//				
//	Иначе
//		
//		Модифицированность = Истина;
//		мРегламентноеЗадание = Диалог.РегламентноеЗадание;
//				
//	КонецЕсли;	
//	
//	Если мРегламентноеЗадание <> Неопределено Тогда
//		РегламентноеЗадание = Строка(мРегламентноеЗадание.УникальныйИдентификатор);
//	КонецЕсли;
//	
//	УстановитьТекстНадписиРегламентнойНастройки();
//	
//КонецПроцедуры

////Процедура устанавливает текст надписи регламентированного задания.
////
//Процедура УстановитьТекстНадписиРегламентнойНастройки()
//	
//	РасписаниеАктивно = Ложь;
//	
//	Если мРегламентноеЗадание = Неопределено Тогда
//		ТекстРасписания = "<Расписание не задано>";
//	Иначе
//		Если мРегламентноеЗадание.Использование Тогда
//			ПрефиксРасписания = "Расписание: ";
//			РасписаниеАктивно = Истина;
//		Иначе
//			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
//		КонецЕсли;
//		
//		ТекстРасписания = ПрефиксРасписания + Строка(мРегламентноеЗадание.Расписание);
//	КонецЕсли;
//			
//	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Заголовок = ТекстРасписания;
//	
//	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Шрифт = ?(РасписаниеАктивно, Новый Шрифт(,,Истина), Новый Шрифт());
//	
//КонецПроцедуры

//Процедура АвтообменПриИзменении(Элемент)
//	
//	УстановитьДоступность();
//	
//КонецПроцедуры

Процедура ПослеЗаписи()
	
	//УстановитьТекстНадписиРегламентнойНастройки();
	
КонецПроцедуры

Процедура ПолеВыбораПериодичностьВыгрузкиДнейПриИзменении(Элемент)
	
	Если ПериодичностьВыгрузки = 6 Тогда
		ЕстьПланОбмена = АвтообменДанными.ЕстьПланОбменаДляНастройкиОбмена(ВидОбменаСтрокой);
		Если НЕ ЕстьПланОбмена Тогда
			СообщитьОбОшибке("Для вида обмена """ + ВидОбменаСтрокойПредставление + """ не предусмотрена выгрузка измененных объектов.");
			ПериодичностьВыгрузки = 1;
		КонецЕсли;
	КонецЕсли;
	УстановитьДоступность();
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ИнициализацияРеквизитовИМодульныхПеременных();
