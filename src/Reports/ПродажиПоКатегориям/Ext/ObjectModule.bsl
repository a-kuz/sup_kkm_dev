#Если Клиент Тогда
	Перем ВидНастройки Экспорт;                        // Вид настройки
	Перем ИнформацияРасшифровки Экспорт;               // информация расшифроки отчета.
	Перем Задание;
	Перем ШиринаКолонок;
	Перем ЗаголовокНастройка;
	Перем НастройкиОтчетаНаМоментФормирования Экспорт; // настройка при формировании отчета.
	
// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
// Вызывается каждый раз при обращении к объекту обработки.
// Здесь надо прописать сброс переменных в начальные значения
// Реквизиты и табличные части уже сброшены
	Процедура УстановкаНачальныхЗначений() Экспорт
		
	КонецПроцедуры
	
	
	// Устанавливает параметры
	//
	Процедура УстановкаПараметров()
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаС");
		Параметр.Значение = ДатаС;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаПо");
		Параметр.Значение = ДатаПо;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("МассивСмен");
		Параметр.Значение = МассивСмен;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПоЗаказам");
		Параметр.Значение = ПоЗаказам;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрДата");
		
		Параметр.Использование = Истина;
		Если МассивСмен = Неопределено Тогда
			ПараметрДата = Истина;	
		Иначе
			ПараметрДата = Ложь;	
		КонецЕсли;	
		Параметр.Значение = ПараметрДата;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СУММА(ЗаказТовары.Количество) КАК Количество,
		|	СУММА(ЗаказТовары.СуммаРеализации) КАК СуммаРеализации
		|ИЗ
		|	Документ.Заказ.Товары КАК ЗаказТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		|		ПО ЗаказТовары.Ссылка = ЗаказДопИнф.Заказ
		|ГДЕ
		|	ЗаказТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА &ПараметрДата
		|				ТОГДА ЗаказТовары.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		|			ИНАЧЕ ЗаказТовары.Ссылка.Смена В (&МассивСмен)
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ПоЗаказам = 1
		|				ТОГДА ЗаказДопИнф.ПротоколРасчетов <> ЗНАЧЕНИЕ(Документ.ПротоколРасчетов.ПустаяСсылка)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ");
		
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МассивСмен", МассивСмен);
		Запрос.УстановитьПараметр("ПоЗаказам", ПоЗаказам);
		Запрос.УстановитьПараметр("ПараметрДата", ПараметрДата);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() = 0 Тогда
			Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КолВсего");
			Параметр.Значение = 1;
			Параметр.Использование = Истина;
			
			Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СуммаВсего");
			Параметр.Значение = 1;
			Параметр.Использование = Истина;
			
		Иначе	
			Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КолВсего");
			Параметр.Значение = Результат[0].Количество;
			Параметр.Использование = Истина;
			
			Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СуммаВсего");
			Параметр.Значение = Результат[0].СуммаРеализации;
			Параметр.Использование = Истина;
		КонецЕсли;
		
		
	КонецПроцедуры
	
	// Выводит отчет в табличный документ.
	//
	// Параметры:
	//  ТабличныйДокумент - табличный документ, в который выводится отчет.
	//
	Процедура СформироватьОтчет(ТабличныйДокумент = "", НаПринтер = Ложь, Параметр = 0, ЭлементыФормы = "") Экспорт
		Если НаПринтер Тогда
			
			Смена = ИнтерфейсРМ.ТекущаяСмена();
			
			Если НЕ ЗначениеЗаполнено(Смена) Тогда
				Текст1="Смена не открыта!";
				Текст2="Для формирования отчета нет данных...";
				ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
				Возврат;
			КонецЕсли;
			
			ПечататьНаПринтере(Смена);
			Возврат;
		КонецЕсли;	
		
		Если НЕ КраткийВидНастройки Тогда
			ЗаголовокНастройка = СтрПолучитьСтроку(КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение,1);
			Заголовок = ЗаголовокНастройка + Символы.ПС + Период;
			
			КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = Заголовок;
			
			УстановкаПараметров();	
			ФормированиеОтчетов.отчСформироватьОтчет(ЭтотОбъект, ТабличныйДокумент,,,ЭлементыФормы);
			КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = ЗаголовокНастройка;
			
			НастройкиОтчетаНаМоментФормирования = ПолучитьТекущиеНастройки();
			
			Возврат;
		КонецЕсли;
		
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		Если ПоказыватьДиаграмму И ПараметрВыводаДиаграммы = 0 Тогда
			СформироватьДиаграмму();
		КонецЕсли;
		
		
		Если ПоЗаказам = 0 Тогда
			Заголовок = "РЕАЛИЗАЦИЯ ПО КАТЕГОРИЯМ БЛЮД" + Символы.ПС + Период;
		Иначе
			Заголовок = "ВЫРУЧКА ПО КАТЕГОРИЯМ БЛЮД" + Символы.ПС + Период;
		КонецЕсли;
		
		КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = Заголовок;
		
		КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = Заголовок;
		
		// добавим поле группировки
		ГруппировкаРодитель = КомпоновщикНастроек.Настройки;
		
		Если ГруппироватьПоПериоду Тогда
			ГруппировкаПоПериоду = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки                = ГруппировкаПоПериоду.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ВидПериода);
			
			// Добавим колонку дня недели рядом с датой
			Если ВидПериода = "День" Тогда
				
				ПолеГруппировки                = ГруппировкаПоПериоду.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование  = Истина;
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("ДниНедели");
				
			КонецЕсли;
			НовоеВыбранноеПоле = ГруппировкаПоПериоду.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			
			ГруппировкаРодитель = ГруппировкаПоПериоду;	 
		КонецЕсли;
		
		Если ДопГруппировка Тогда
			ГруппирокаПоРасходу = ГруппировкаРодитель.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки                = ГруппирокаПоРасходу.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ВариантФормирования);
			
			НовоеВыбранноеПоле = ГруппирокаПоРасходу.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			
			ГруппировкаРодитель = ГруппирокаПоРасходу;	 
			
		КонецЕсли;
		
		ГруппировкаПоКатегории = ГруппировкаРодитель.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ПолеГруппировки                = ГруппировкаПоКатегории.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		Если БезГрупп Тогда
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		Иначе
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		КонецЕсли;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Категория"); 
		НовоеВыбранноеПоле = ГруппировкаПоКатегории.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных")); 
		
		УстановкаПараметров();
		
		Если ПоказыватьДиаграмму И ПараметрВыводаДиаграммы = 1 Тогда
			СформироватьДиаграмму();
		КонецЕсли;
		
		ФормированиеОтчетов.отчСформироватьОтчет(ЭтотОбъект, ТабличныйДокумент,,,ЭлементыФормы);	
		
		НастройкиОтчетаНаМоментФормирования = ПолучитьТекущиеНастройки();
	КонецПроцедуры
	
	// Формирует диаграмму.
	//
	Процедура СформироватьДиаграмму() Экспорт
		Диаграмма = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
		ВыбранноеПоле = Диаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Заголовок = "Сумма";
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Сумма");
		
		Серия = Диаграмма.Серии.Добавить();
		Серия.Использование = Истина;
		Поле = Серия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(?(ГруппироватьПоПериоду,ВидПериода, ?(ДопГруппировка, ВариантФормирования, "Категория")));
		Поле.Использование = Истина;
		Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		НовоеВыбранноеПоле = Серия.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		Параметр = Диаграмма.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
		Параметр.Значение = ТипДиаграммы;
		Параметр.Использование = Истина;
		
		Параметр2 = Диаграмма.ПараметрыВывода.Элементы.Найти("TitleOutput");
		Параметр2.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
		Параметр2.Использование = Ложь;
		
		Параметр4 = Параметр.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.РасположениеЛегенды");
		Параметр4.Значение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Низ;
		Параметр4.Использование = Истина;
		
	КонецПроцедуры	
	
	// Получает текущие настройки.
	//
	// Параметры:
	//	ИсключитьДату - флаг исключения даты.
	//
	// Возвращаемое значение:
	//	Структура настроек.
	//
	Функция ПолучитьТекущиеНастройки(ИсключитьДату = Ложь) Экспорт
		
		СтруктураНастроек = Новый Структура;
		
		СтруктураНастроек.Вставить("КраткийВидНастройки"       , КраткийВидНастройки);
		СтруктураНастроек.Вставить("НастройкиКомпоновкиДанных" , КомпоновщикНастроек.ПолучитьНастройки());
		
		Возврат СтруктураНастроек;
		
	КонецФункции
	
	// Загружает настройки.
	//
	// Параметры:
	//	Настройки - структура настроек.
	//
	Процедура ЗагрузитьНастройки(Настройки) Экспорт
		
		КраткийВидНастройки  = Настройки.КраткийВидНастройки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки.НастройкиКомпоновкиДанных);
		
	КонецПроцедуры
	
	// Печать отчета из Рабочего места.
	//
	Процедура ПечататьНаПринтере(Смена) 
		
		МестоРеализации = глПараметрыРМ.МестоРеализации;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗаказТовары.Товар.Категория КАК Категория,
		                      |	СУММА(ЗаказТовары.Количество) КАК Количество,
		                      |	СУММА(ЗаказТовары.Сумма) КАК ВаловаяВыручка,
		                      |	СУММА(ЗаказТовары.СуммаРеализации) КАК ЧистаяВыручка,
		                      |	СУММА(ВЫБОР
		                      |			КОГДА ЗаказТовары.Сумма - ЗаказТовары.СуммаРеализации > 0
		                      |				ТОГДА ЗаказТовары.СуммаРеализации - ЗаказТовары.Сумма
		                      |			ИНАЧЕ 0
		                      |		КОНЕЦ) КАК Скидка,
		                      |	СУММА(ВЫБОР
		                      |			КОГДА ЗаказТовары.Сумма - ЗаказТовары.СуммаРеализации < 0
		                      |				ТОГДА ЗаказТовары.СуммаРеализации - ЗаказТовары.Сумма
		                      |			ИНАЧЕ 0
		                      |		КОНЕЦ) КАК Наценка
		                      |ИЗ
		                      |	Документ.Заказ.Товары КАК ЗаказТовары
		                      |ГДЕ
		                      |	ЗаказТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		                      |	И ЗаказТовары.Ссылка.Смена = &Смена
		                      |	И ЗаказТовары.Ссылка.МестоРеализации = &МестоРеализации
							  |	И (ЗаказТовары.Количество <> 0
							  |			ИЛИ ЗаказТовары.Сумма <> 0
							  |			ИЛИ ЗаказТовары.СуммаРеализации <> 0)
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ЗаказТовары.Товар.Категория");
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("Смена", Смена);
		РезультатЗапроса = Запрос.Выполнить();
		
		Заголовок1 = "ПРОДАЖИ БЛЮД ПО КАТЕГОРИЯМ";
		Заголовок2 = "";
		
		ДлинаСтроки = ИнтерфейсРМ.ПРНДлинаСтроки(глПараметрыРМ.ПечатьОтчетовПринтер);
		ШиринаКолонок = Новый СписокЗначений;
		Если ДлинаСтроки=32 Тогда
			Шапка="            Кол/Сумм      Процент";
			ШиринаКолонок.Добавить(10);
			ШиринаКолонок.Добавить(11);
			ШиринаКолонок.Добавить(11);  		
		ИначеЕсли ДлинаСтроки=36 Тогда
			Шапка="                Кол/Сумм     Процент"; 
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(12);
		ИначеЕсли ДлинаСтроки=40 Тогда
			Шапка="                    Кол/Сумм     Процент";
			ШиринаКолонок.Добавить(16);
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(12);
		ИначеЕсли ДлинаСтроки=42 Тогда
			Шапка="                      Кол/Сумм     Процент";
			ШиринаКолонок.Добавить(18);
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(12);
		ИначеЕсли ДлинаСтроки=44 Тогда
			Шапка="                        Кол/Сумм     Процент";
			ШиринаКолонок.Добавить(20);
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(12);
		Иначе //Если ДлинаСтроки=48 Тогда
			Шапка="                            Кол/Сумм     Процент";
			ШиринаКолонок.Добавить(24);
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(12);
		КонецЕсли;
		
		Задание = Новый ТаблицаЗначений;
		Задание.Колонки.Добавить("Данные");
		Задание.Колонки.Добавить("ТипДанных");
		Задание.Колонки.Добавить("Параметры");
		
		Выгрузка = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выгрузка.Строки.Сортировать("Категория");
		
		Для Каждого Строка Из Выгрузка.Строки Цикл
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = Врег(Строка.Категория);
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
			
			СформироватьСтроку("Количество"     , Строка.Количество, ?(Выгрузка.Строки.Итог("Количество") = 0, "-", Строка.Количество*100/Выгрузка.Строки.Итог("Количество")), Ложь);
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = "";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "ПереводСтроки";
			
			СформироватьСтроку("Валовая выручка", Строка.ВаловаяВыручка, ,	Ложь);
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = "";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "ПереводСтроки";
			
			СформироватьСтроку("Скидка/наценка" , Строка.Скидка + Строка.Наценка, ,	Ложь);
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = "";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "ПереводСтроки";
			
			СформироватьСтроку("Чистая выручка" , Строка.ЧистаяВыручка, ?(Выгрузка.Строки.Итог("ЧистаяВыручка") = 0, "-", Строка.ЧистаяВыручка*100/Выгрузка.Строки.Итог("ЧистаяВыручка")),	Ложь);
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = "";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "ПереводСтроки";
		КонецЦикла;	
		
		// итоговые суммы
		НоваяСтрока = Задание.Добавить(); 
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Центр,ПереводСтроки";
		
		СформироватьСтроку("ВСЕГО(кол.,сум.)):",	Выгрузка.Строки.Итог("Количество"),Выгрузка.Строки.Итог("ЧистаяВыручка"),Истина);
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "ПереводСтроки";
		
		СформироватьСтроку("Скидки/наценки",	Выгрузка.Строки.Итог("Скидка"), Выгрузка.Строки.Итог("Наценка"),Истина);    		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "ПереводСтроки";
		
		НоваяСтрока = Задание.Добавить(); 
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Центр,ПереводСтроки";
		
		
		ФормированиеОтчетов.ПечатьОтчетаРМ(Задание, Заголовок1, Заголовок2, Шапка);
		
	КонецПроцедуры
	
	// Формирование строки отчета на принтер.
	//
	Процедура СформироватьСтроку(Стр, Число1="", Число2="", Выделение) Экспорт
		
		Выделение=?(Выделение,"Жирный","НеЖирный");
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСправа(Стр, ШиринаКолонок[0].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число1,"ЧЦ="+ШиринаКолонок[1].Значение +"; ЧДЦ=2; ЧН=0,00")), ШиринаКолонок[1].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число2,"ЧЦ="+ШиринаКолонок[2].Значение +"; ЧДЦ=2; ЧН=0,00")), ШиринаКолонок[2].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
	КонецПроцедуры
	
	
#КонецЕсли
