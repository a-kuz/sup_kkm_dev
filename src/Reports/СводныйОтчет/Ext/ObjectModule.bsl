#Если Клиент Тогда
	
	Перем КоличествоСтрок Экспорт;   // Количество строк
	Перем ШиринаКолонок;
	Перем Задание;
	Перем ИнформацияРасшифровки Экспорт;               // информация расшифроки отчета.

	
	// Формирует отчет
	//
	Процедура СформироватьОтчет(Таб = "",  СРабочегоМеста = Ложь, НаПринтер = "")  Экспорт
		
		Макет = ПолучитьМакет("Макет");
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		Если ЗначениеЗаполнено(МестоРеализации) Тогда
			ОбластьЗаголовок.Параметры.МестоРеализации = МестоРеализации; 		
		КонецЕсли; 
		ОбластьЗаголовок.Параметры.Период = Период; 		
		
		Таб.Очистить();
		КоличествоСтрок = 0;
		Таб.Вывести(ОбластьЗаголовок);
		
		Пр = СформироватьСводныйОтчет(Макет,Таб);
		
		Таб.ВерхнийКолонтитул.Выводить = Истина;
		Таб.ВерхнийКолонтитул.ТекстСправа = "Страница [&НомерСтраницы] из [&СтраницВсего]";
		
		Таб.НижнийКолонтитул.Выводить = Истина;
		Таб.НижнийКолонтитул.ТекстСправа = ""+ТекущаяДата()+"  Пользователь: "+ПараметрыСеанса.ТекущийПользователь;
		
	КонецПроцедуры	
	
	Функция СформироватьСводныйОтчет(Макет,Таб);
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	NULL КАК КолВозвратов,
		                      |	0 КАК СуммаВозврата,
		                      |	ЕСТЬNULL(ЗаказДопИнф.Заказ.ИтоговаяСумма, 0) КАК СуммаЗаказов,
		                      |	ЗаказДопИнф.Заказ.КоличествоПосетителей КАК ЗаказГостей,
		                      |	ЗаказДопИнф.Заказ.Ссылка КАК ОткрытоЗаказов,
		                      |	0 КАК ВыручкаСумма,
		                      |	NULL КАК КолЗакрытых,
		                      |	0 КАК ВыручкаГостей,
		                      |	NULL КАК ОткрытоСейчас,
		                      |	NULL КАК ОткрытоСейчасСумма,
		                      |	NULL КАК ЗанятоМест,
		                      |	NULL КАК КолЗанятыхВСмене,
		                      |	NULL КАК Удалений,
		                      |	ЕСТЬNULL(ЗаказДопИнф.Заказ.ИтоговаяСумма, 0) КАК СуммаРеализации,
		                      |	РАЗНОСТЬДАТ(ЗаказДопИнф.Заказ.Дата, ЕСТЬNULL(ЗаказДопИнф.ПротоколРасчетов.Дата, &ДатаПо), МИНУТА) КАК РазностьВМинутах
		                      |ИЗ
		                      |	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф "+?(глВерсия = 3, "
							  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоставкаДопИнф.СрезПоследних(, ) КАК ДоставкаДопИнф
							  |		ПО ЗаказДопИнф.Заказ = ДоставкаДопИнф.Заказ","") + "
		                      |ГДЕ
		                      |	ЗаказДопИнф.Статус <> &Статус
		                      |	И ЗаказДопИнф.Заказ.ПометкаУдаления = ЛОЖЬ
		                      |	И ЗаказДопИнф.Заказ.МестоРеализации = &МестоРеализации
		                      |	И ЗаказДопИнф.Заказ.Дата МЕЖДУ &ДатаС И &ДатаПо "+?(глВерсия = 3, "
 							  |	И (НЕ ЗаказДопИнф.Заказ.Доставка
							  |			ИЛИ ЗаказДопИнф.Заказ.Доставка
							  |				И ДоставкаДопИнф.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Открыт))","") + "
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	Возврат.Ссылка,
		                      |	Возврат.Сумма,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	0,
		                      |	NULL,
		                      |	0,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	0,
		                      |	0
		                      |ИЗ
		                      |	Документ.Возврат КАК Возврат
		                      |ГДЕ
		                      |	Возврат.ПометкаУдаления = ЛОЖЬ
		                      |	И Возврат.МестоРеализации = &МестоРеализации
		                      |	И Возврат.Дата МЕЖДУ &ДатаС И &ДатаПо
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	NULL,
		                      |	0,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	ЕСТЬNULL(ЗаказДопИнф.ПротоколРасчетов.ИтогСуммаФакт, 0),
		                      |	ЗаказДопИнф.ПротоколРасчетов.Ссылка,
		                      |	ЕСТЬNULL(ЗаказДопИнф.ПротоколРасчетов.Заказ.КоличествоПосетителей, 0),
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	0,
		                      |	0
		                      |ИЗ
		                      |	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		                      |ГДЕ
		                      |	ЗаказДопИнф.ПротоколРасчетов.ПометкаУдаления = ЛОЖЬ
							  //|	И ЗаказДопИнф.ПротоколРасчетов.Неучетный = ЛОЖЬ
 		                      |	И ЗаказДопИнф.ПротоколРасчетов.Дата МЕЖДУ &ДатаС И &ДатаПо
		                      |	И ЗаказДопИнф.ПротоколРасчетов.МестоРеализации = &МестоРеализации
		                      |	И ЗаказДопИнф.ПротоколРасчетов.ИтогСуммаФакт <> 0
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	NULL,
		                      |	0,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	0,
		                      |	NULL,
		                      |	0,
		                      |	ЗаказДопИнф.Заказ.Ссылка,
		                      |	ЗаказДопИнф.Заказ.ИтоговаяСумма,
		                      |	ЗаказДопИнф.Заказ.ПосадочноеМесто,
		                      |	ЗаказДопИнф.Заказ.Автор,
		                      |	NULL,
		                      |	0,
		                      |	0
		                      |ИЗ
		                      |	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		                      |ГДЕ
		                      |	ЗаказДопИнф.Заказ.МестоРеализации = &МестоРеализации
		                      |	И ЗаказДопИнф.Заказ.Дата < &ДатаПо
		                      |	И ЗаказДопИнф.Статус = &СтатусОткрыт
		                      |	И ЗаказДопИнф.Заказ.ПометкаУдаления = ЛОЖЬ
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	NULL,
		                      |	0,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	0,
		                      |	NULL,
		                      |	0,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	NULL,
		                      |	Удаление.Ссылка,
		                      |	0,
		                      |	0
		                      |ИЗ
		                      |	Документ.Удаление КАК Удаление
		                      |ГДЕ
		                      |	Удаление.ПометкаУдаления = ЛОЖЬ
		                      |	И Удаление.Дата МЕЖДУ &ДатаС И &ДатаПо
		                      |	И Удаление.МестоРеализации = &МестоРеализации
		                      |ИТОГИ
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КолВозвратов),
		                      |	СУММА(СуммаВозврата),
		                      |	СУММА(СуммаЗаказов),
		                      |	СУММА(ЗаказГостей),
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОткрытоЗаказов),
		                      |	СУММА(ВыручкаСумма),
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КолЗакрытых),
		                      |	СУММА(ВыручкаГостей),
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОткрытоСейчас),
		                      |	СУММА(ОткрытоСейчасСумма),
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗанятоМест),
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КолЗанятыхВСмене),
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Удалений),
		                      |	СУММА(СуммаРеализации),
		                      |	СУММА(РазностьВМинутах)
		                      |ПО
		                      |	ОБЩИЕ");
		
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаказа.Удален);
		Запрос.УстановитьПараметр("СтатусОткрыт", Перечисления.СтатусыЗаказа.Открыт);
        		
		Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыгрузкаОфицианты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		// посадочные места
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ПосадочныеМеста.Ссылка КАК КолвоМестВсего
		                      |ИЗ
		                      |	Справочник.ПосадочныеМеста КАК ПосадочныеМеста
		                      |ГДЕ
		                      |	ПосадочныеМеста.ПометкаУдаления = ЛОЖЬ
		                      |	И ПосадочныеМеста.ЭтоГруппа = ЛОЖЬ
		                      |	И (ПосадочныеМеста.МестоРеализации = ЗНАЧЕНИЕ(Справочник.МестаРеализации.ПустаяСсылка)
		                      |			ИЛИ ПосадочныеМеста.МестоРеализации = &МестоРеализации)
		                      |ИТОГИ
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КолвоМестВсего)
		                      |ПО
		                      |	ОБЩИЕ");
		
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		
		ВыгрузкаПМ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыгрузкаПМРасш = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой); 
		ВыгрузкаПМРасш.Свернуть("КолвоМестВсего");
		
    	ОбластьОсновное      = Макет.ПолучитьОбласть("Основное");
		ОбластьРейтинг       = Макет.ПолучитьОбласть("СтрРейтинг");
		ОбластьРейтингТовары = Макет.ПолучитьОбласть("СтрРейтингТовары");
		ОбластьОфицианты     = Макет.ПолучитьОбласть("официанты");
		ОбластьМеста         = Макет.ПолучитьОбласть("РейтингМеста");
		
		Для Каждого Стр из ВыгрузкаПМ.Строки Цикл
			КолвоМестВсего = Стр.КолвоМестВсего;
		КонецЦикла;
		
		// официанты
		// права тех, кто принимал заказы за указанный период
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СотрудникиПраваДоступа.НаборПрав
		                      |ИЗ
		                      |	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники.ПраваДоступа КАК СотрудникиПраваДоступа
		                      |		ПО ЗаказДопИнф.Заказ.Автор.Ссылка = СотрудникиПраваДоступа.Ссылка.Ссылка
		                      |ГДЕ
		                      |	ЗаказДопИнф.Статус <> &СтатусУдален
		                      |	И ЗаказДопИнф.Заказ.ПометкаУдаления = ЛОЖЬ
		                      |	И ЗаказДопИнф.Заказ.Дата МЕЖДУ &ДатаС И &ДатаПо
		                      |	И ЗаказДопИнф.Заказ.МестоРеализации = &МестоРеализации
		                      |	И СотрудникиПраваДоступа.МестоРеализации = &МестоРеализации
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	СотрудникиПраваДоступа.НаборПрав");
		
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("СтатусУдален", Перечисления.СтатусыЗаказа.Удален);
		
		//Таблица значений с наборами прав тех, кто принимал заказы
		ВыгрузкаПраваДоступа = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		МассивПрав = ВыгрузкаПраваДоступа.ВыгрузитьКолонку("НаборПрав");
		
		// таблица тех, кто мог приниматься заказы
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ОткрытиеСменыСоставСмены.Сотрудник КАК Сотрудник
		                      |ИЗ
		                      |	Документ.ОткрытиеСмены.СоставСмены КАК ОткрытиеСменыСоставСмены
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Сотрудники.ПраваДоступа КАК СотрудникиПраваДоступа
		                      |		ПО ОткрытиеСменыСоставСмены.Сотрудник.Ссылка = СотрудникиПраваДоступа.Ссылка.Ссылка
		                      |ГДЕ
		                      |	СотрудникиПраваДоступа.НаборПрав В(&НаборПрав)
		                      |
		                      |СГРУППИРОВАТЬ ПО
		                      |	ОткрытиеСменыСоставСмены.Сотрудник
		                      |ИТОГИ
		                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Сотрудник)
		                      |ПО
		                      |	ОБЩИЕ");
		
		Запрос.УстановитьПараметр("НаборПрав",МассивПрав);
		
		ВсеОфицианты = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		КолВсехОфициантов = ?(ЗначениеЗаполнено(ВсеОфицианты),ВсеОфицианты[0].Сотрудник,0);
		
		// скидки по закрытым заказам
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗаказСкидки.Сумма КАК Сумма,
		                      |	ЗаказСкидки.Ссылка КАК Заказ
		                      |ИЗ
		                      |	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ.Скидки КАК ЗаказСкидки
		                      |		ПО ЗаказДопИнф.Заказ.Ссылка = ЗаказСкидки.Ссылка.Ссылка
		                      |ГДЕ
		                      |	ЗаказДопИнф.ПротоколРасчетов.Дата МЕЖДУ &ДатаС И &ДатаПо
		                      |	И ЗаказДопИнф.ПротоколРасчетов.ПометкаУдаления = ЛОЖЬ
		                      |	И ЗаказДопИнф.ПротоколРасчетов.МестоРеализации = &МестоРеализации
		                      |	И ЗаказДопИнф.Статус <> &СтатусУдален
		                      |ИТОГИ
		                      |	СУММА(Сумма)
		                      |ПО
		                      |	ОБЩИЕ");
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("СтатусУдален", Перечисления.СтатусыЗаказа.Удален);
        		
		Скидки = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		СуммаСкидок = ?(ЗначениеЗаполнено(Скидки),Скидки[0].Сумма,0);
		
		// для расшифровки
		РасшСкидки = Скидки.Скопировать(,"Заказ");
		РасшСкидки.Свернуть("Заказ");
				
		// Начисления\Удержания созданные в рабочем месте
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	Начисление.Сумма КАК Сумма,
		                      |	Начисление.Ссылка КАК Начисление
		                      |ИЗ
		                      |	Документ.НачислениеБезнал КАК Начисление
		                      |ГДЕ
		                      |	Начисление.Дата МЕЖДУ &ДатаС И &ДатаПо
		                      |	И Начисление.ПометкаУдаления = ЛОЖЬ
		                      |	И Начисление.Смена.МестоРеализации = &МестоРеализации
		                      |ИТОГИ
		                      |	СУММА(Сумма)
		                      |ПО
		                      |	ОБЩИЕ");
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
        		
		Начисления = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		СуммаНачислений = ?(ЗначениеЗаполнено(Начисления),Начисления[0].Сумма,0);
		
		// для расшифровки
		РасшНачисленияУдержания = Начисления.Скопировать(,"Начисление");
		РасшНачисленияУдержания.Свернуть("Начисление");
		
		// себестоимость по открытым заказам
		 	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗаказТовары.Ссылка КАК Заказ,
		                      |	ЗаказТовары.Товар КАК Товар,
		                      |	ЗаказТовары.Количество КАК Количество,
		                      |	ЗаказТовары.Ссылка.Дата КАК Период
		                      |ИЗ
		                      |	Документ.Заказ.Товары КАК ЗаказТовары"+?(глВерсия = 3, "
							  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоставкаДопИнф.СрезПоследних(, ) КАК ДоставкаДопИнф
							  |		ПО ЗаказТовары.Ссылка = ДоставкаДопИнф.Заказ","") + "
		                      |ГДЕ
		                      |	ЗаказТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		                      |	И ЗаказТовары.Ссылка.МестоРеализации = &МестоРеализации
		                      |	И (ЗаказТовары.Количество <> 0
		                      |			ИЛИ ЗаказТовары.СуммаРеализации <> 0
		                      |			ИЛИ ЗаказТовары.Сумма <> 0)
		                      |	И ЗаказТовары.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо"+?(глВерсия = 3, "
							  |	И (НЕ ЗаказТовары.Ссылка.Доставка
							  |			ИЛИ ЗаказТовары.Ссылка.Доставка
							  |				И ДоставкаДопИнф.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Открыт))","") + "
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	ВозвратТовары.Ссылка.Заказ,
		                      |	ВозвратТовары.Товар,
		                      |	-ВозвратТовары.Количество,
		                      |	ВозвратТовары.Ссылка.Дата
		                      |ИЗ
		                      |	Документ.Возврат.Товары КАК ВозвратТовары
		                      |ГДЕ
		                      |	ВозвратТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		                      |	И ВозвратТовары.Ссылка.МестоРеализации = &МестоРеализации
		                      |	И ВозвратТовары.Ссылка.Причина.Списание = ИСТИНА
		                      |	И ВозвратТовары.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	Удаление.Заказ,
		                      |	Удаление.Товар,
		                      |	Удаление.Количество,
		                      |	Удаление.Дата
		                      |ИЗ
		                      |	Документ.Удаление КАК Удаление
		                      |ГДЕ
		                      |	Удаление.ПометкаУдаления = ЛОЖЬ
		                      |	И Удаление.МестоРеализации = &МестоРеализации
		                      |	И Удаление.Причина.Списание = ИСТИНА
		                      |	И Удаление.Дата МЕЖДУ &ДатаС И &ДатаПо
		                      |ИТОГИ
		                      |	СУММА(Количество)
		                      |ПО
		                      |	Товар");
							  
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		
		ТабСебестоимость=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ТабСебест2 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ТабСебест2.Строки.Сортировать("Количество Убыв");
		
		ТабСебестоимость.Свернуть("Товар,Заказ,Период","Количество");
		
		ТабСебестоимость.Колонки.Добавить("Себестоимость");
		Для Каждого Строка Из ТабСебестоимость Цикл
			Если ЗначениеЗаполнено(Строка.Заказ) Тогда
				Строка.Себестоимость = ФормированиеОтчетов.ПолучитьСебестоимость(Строка.Товар,Строка.Период)*Строка.Количество;
			КонецЕсли;
		КонецЦикла;
		
		Себестоимость = ТабСебестоимость.Итог("Себестоимость");
		// для расшифровки по заказам
		ТабСебестоимость.Свернуть("Заказ");
		
		Если Выгрузка.Строки.Количество()=0 Тогда
			МассивОткрытоЗаказов = Новый Массив;
			МассивЗакрытоЗаказов = Новый Массив;
			МассивОткрытоСейчасЗаказов = Новый Массив;
			МассивУдаленоЗаказов = Новый Массив;
			МассивВозвраты = Новый Массив;
		Иначе
			
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("КолЗакрытых",Null);
			ПараметрыОтбора.Вставить("ОткрытоСейчас",Null);
			ПараметрыОтбора.Вставить("Удалений",Null);
			ПараметрыОтбора.Вставить("КолВозвратов",Null);
			
			МассивОткрытоЗаказов = Выгрузка.Строки[0].Строки.НайтиСтроки(ПараметрыОтбора);
			
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("ОткрытоЗаказов",Null);
			ПараметрыОтбора.Вставить("ОткрытоСейчас",Null);
			ПараметрыОтбора.Вставить("Удалений",Null);
			ПараметрыОтбора.Вставить("КолВозвратов",Null);
			
			МассивЗакрытоЗаказов = Выгрузка.Строки[0].Строки.НайтиСтроки(ПараметрыОтбора);
			
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("ОткрытоЗаказов",Null);
			ПараметрыОтбора.Вставить("КолЗакрытых",Null);
			ПараметрыОтбора.Вставить("Удалений",Null);
			ПараметрыОтбора.Вставить("КолВозвратов",Null);
			
			МассивОткрытоСейчасЗаказов = Выгрузка.Строки[0].Строки.НайтиСтроки(ПараметрыОтбора);
			
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("ОткрытоЗаказов",Null);
			ПараметрыОтбора.Вставить("КолЗакрытых",Null);
			ПараметрыОтбора.Вставить("ОткрытоСейчас",Null);
			ПараметрыОтбора.Вставить("КолВозвратов",Null);
			
			МассивУдаленоЗаказов = Выгрузка.Строки[0].Строки.НайтиСтроки(ПараметрыОтбора);
			
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("ОткрытоЗаказов",Null);
			ПараметрыОтбора.Вставить("КолЗакрытых",Null);
			ПараметрыОтбора.Вставить("ОткрытоСейчас",Null);
			ПараметрыОтбора.Вставить("Удалений",Null);
			
			МассивВозвраты = Выгрузка.Строки[0].Строки.НайтиСтроки(ПараметрыОтбора);
			
		КонецЕсли;
		// свободные официанты для расшифровки
		ВыгрузкаМеста = ВыгрузкаОфицианты.Скопировать();
		ВыгрузкаОфицианты.Свернуть("КолЗанятыхВСмене");
		Для Каждого  ЗанятыйОфициант Из ВыгрузкаОфицианты Цикл
			Если ТипЗнч(ЗанятыйОфициант.КолЗанятыхВСмене) = Тип("СправочникСсылка.Сотрудники") Тогда
				СотрудникСтр = ВсеОфицианты.Найти(ЗанятыйОфициант.КолЗанятыхВСмене,"Сотрудник");
				Если СотрудникСтр <> Неопределено  Тогда
					ВсеОфицианты.Удалить(СотрудникСтр);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// свободные места для расшифровки
		ВыгрузкаМеста.Свернуть("ЗанятоМест");
		Для Каждого  ЗанятоеМесто Из ВыгрузкаМеста Цикл
			Если ТипЗнч(ЗанятоеМесто.ЗанятоМест) = Тип("СправочникСсылка.ПосадочныеМеста") Тогда
				МестоСтр = ВыгрузкаПМРасш.Найти(ЗанятоеМесто.ЗанятоМест,"КолвоМестВсего");
				Если МестоСтр <> Неопределено  Тогда
					ВыгрузкаПМРасш.Удалить(МестоСтр);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Выгрузка.Строки.Количество() = 0 Тогда
			ОбластьОсновное.Параметры.КолвоЗаказов = 0;
			ОбластьОсновное.Параметры.СуммаОткрытых = 0;
			ОбластьОсновное.Параметры.ОсновнаяВалюта = Константы.ОсновнаяВалюта.Получить();
			ОбластьОсновное.Параметры.СвободныхМест =0;
			ОбластьОсновное.Параметры.ТекущаяЗагрузкаЗала = 0; 
			ОбластьОсновное.Параметры.Возвраты = 0;
			ОбластьОсновное.Параметры.Выручка = 0;
			ОбластьОсновное.Параметры.СвободныхОфициантов = 0;
			ОбластьОсновное.Параметры.ТекущаяЗагрузкаСотрудников = 0;
			ОбластьОсновное.Параметры.КолПосетителей = 0;
			ОбластьОсновное.Параметры.КолОткрЗаСмену = 0;
			ОбластьОсновное.Параметры.КолОплаченныхЗаСмену = 0;
			ОбластьОсновное.Параметры.Удаления = 0;
			ОбластьОсновное.Параметры.Скидки = 0;
			ОбластьОсновное.Параметры.НачисленияУдержания = 0;
			ОбластьОсновное.Параметры.СуммаРеализации = 0;
			ОбластьОсновное.Параметры.Себестоимость = 0;
			ОбластьОсновное.Параметры.Прибыль = 0;
			ОбластьОсновное.Параметры.ПроцентДоходности = 0; 
			ОбластьОсновное.Параметры.СредняяВыручкаНаЧек = 0;
			ОбластьОсновное.Параметры.СредняяВыручкаНаГостя = 0;
			ОбластьОсновное.Параметры.СреднееВремяОбслуживания = "0 мин.";
			ОбластьОсновное.Параметры.СредняяЗагрузкаЗала = 0; 
			ОбластьОсновное.Параметры.СредняяЗанятостьСотрудников = 0;
		Иначе
			Для Каждого Строка Из Выгрузка.Строки Цикл
				ОбластьОсновное.Параметры.КолвоЗаказов = Строка.ОткрытоСейчас;
				ОбластьОсновное.Параметры.СуммаОткрытых = Строка.ОткрытоСейчасСумма;
				ОбластьОсновное.Параметры.ОсновнаяВалюта = Константы.ОсновнаяВалюта.Получить();
				//ОбластьОсновное.Параметры.СвободныхМест = КолвоМестВсего - Строка.ЗанятоМест;
				ОбластьОсновное.Параметры.СвободныхМест = ВыгрузкаПМРасш.Количество()-1;
				ОбластьОсновное.Параметры.ТекущаяЗагрузкаЗала = ?(КолвоМестВсего=0,0,Строка.ЗанятоМест*100/КолвоМестВсего); 
				ОбластьОсновное.Параметры.Возвраты = Строка.СуммаВозврата;
				ОбластьОсновное.Параметры.Выручка = Строка.ВыручкаСумма;
				ОбластьОсновное.Параметры.СвободныхОфициантов = ?((КолВсехОфициантов - Строка.КолЗанятыхВСмене)<0,0,КолВсехОфициантов - Строка.КолЗанятыхВСмене);
				ОбластьОсновное.Параметры.ТекущаяЗагрузкаСотрудников = ?(КолВсехОфициантов=0,0,Строка.КолЗанятыхВСмене*100/КолВсехОфициантов);
				ОбластьОсновное.Параметры.КолПосетителей = Строка.ВыручкаГостей;
				ОбластьОсновное.Параметры.КолОткрЗаСмену = Строка.ОткрытоЗаказов;
				ОбластьОсновное.Параметры.КолОплаченныхЗаСмену = Строка.КолЗакрытых;
				ОбластьОсновное.Параметры.Удаления = Строка.Удалений;
				ОбластьОсновное.Параметры.Скидки = СуммаСкидок;
				ОбластьОсновное.Параметры.НачисленияУдержания = СуммаНачислений;
				ОбластьОсновное.Параметры.СуммаРеализации = Строка.СуммаРеализации;
				ОбластьОсновное.Параметры.Себестоимость = Себестоимость;
				ОбластьОсновное.Параметры.Прибыль = Строка.СуммаРеализации - Себестоимость;
				ОбластьОсновное.Параметры.ПроцентДоходности = ?(Себестоимость=0,0,(100*(Строка.СуммаРеализации-Себестоимость))/Себестоимость); 
				ОбластьОсновное.Параметры.СредняяВыручкаНаЧек = ?(Строка.КолЗакрытых = 0,0,Строка.ВыручкаСумма/Строка.КолЗакрытых);
				ОбластьОсновное.Параметры.СредняяВыручкаНаГостя = ?(Строка.ВыручкаГостей = 0,0,Строка.ВыручкаСумма/Строка.ВыручкаГостей);
				СреднееВремяОбслуживания = ?(Строка.ОткрытоЗаказов = 0,0,Строка.РазностьВМинутах/Строка.ОткрытоЗаказов);
				СтрСреднееВремяОбслуживания =""+Цел(СреднееВремяОбслуживания/60)+"ч."+Окр(СреднееВремяОбслуживания-(Цел(СреднееВремяОбслуживания/60)*60))+"мин.";
				ОбластьОсновное.Параметры.СреднееВремяОбслуживания = СтрСреднееВремяОбслуживания;
				СрЗагрузкаЗала = ?(КолвоМестВсего*(ДатаПо-ДатаС)*60=0,0,Строка.РазностьВМинутах*100/(КолвоМестВсего*(ДатаПо-ДатаС)*60));
				ОбластьОсновное.Параметры.СредняяЗагрузкаЗала = СрЗагрузкаЗала; 
				ЗагрузкаСотрудников = ?(КолВсехОфициантов*(ДатаПо-ДатаС)*60=0,0,Строка.РазностьВМинутах*100/(КолВсехОфициантов*(ДатаПо-ДатаС)*60));
				ОбластьОсновное.Параметры.СредняяЗанятостьСотрудников = ЗагрузкаСотрудников;
				// расшифровки
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",ТабСебестоимость);
				СтруктураРасшифровки.Вставить("Область","Себестоимость");
				ОбластьОсновное.Параметры.РасшСебестоимость = СтруктураРасшифровки;
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",МассивОткрытоЗаказов);
				СтруктураРасшифровки.Вставить("Область","КолОткрЗаСмену");
				ОбластьОсновное.Параметры.РасшКолОткрЗаСмену = СтруктураРасшифровки;
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",МассивЗакрытоЗаказов);
				СтруктураРасшифровки.Вставить("Область","КолЗакрЗаСмену");
				ОбластьОсновное.Параметры.РасшКолОплаченныхЗаСмену = СтруктураРасшифровки;
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",МассивОткрытоСейчасЗаказов);
				СтруктураРасшифровки.Вставить("Область","КолвоЗаказов");
				ОбластьОсновное.Параметры.РасшКолвоЗаказов = СтруктураРасшифровки;
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",МассивУдаленоЗаказов);
				СтруктураРасшифровки.Вставить("Область","КолУдалений");
				ОбластьОсновное.Параметры.РасшУдаления = СтруктураРасшифровки;
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",МассивВозвраты);
				СтруктураРасшифровки.Вставить("Область","Возвраты");
				ОбластьОсновное.Параметры.РасшВозвраты = СтруктураРасшифровки;
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",РасшСкидки);
				СтруктураРасшифровки.Вставить("Область","Скидки");
				ОбластьОсновное.Параметры.РасшСкидки = СтруктураРасшифровки;
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",РасшНачисленияУдержания);
				СтруктураРасшифровки.Вставить("Область","Начисление");
				ОбластьОсновное.Параметры.РасшНачисленияУдержания = СтруктураРасшифровки;
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",ВсеОфицианты);
				СтруктураРасшифровки.Вставить("Область","ОфициантСвободных");
				ОбластьОсновное.Параметры.РасшСвободныхОфициантов = СтруктураРасшифровки;
				
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",ВыгрузкаПМРасш);
				СтруктураРасшифровки.Вставить("Область","МестоСвободных");
				ОбластьОсновное.Параметры.РасшСвободныхМест = СтруктураРасшифровки;
				
			КонецЦикла;
		КонецЕсли;
		Таб.Вывести(ОбластьОсновное);

		СтрНомер = 1;
		Для Каждого Стр Из ТабСебест2.Строки Цикл
			Если СтрНомер>3 Тогда 
				Прервать;
			КонецЕсли;
			ОбластьРейтингТовары.Параметры.Номер = ""+СтрНомер+".";
			ОбластьРейтингТовары.Параметры.Стр = Стр.Товар;
			ОбластьРейтингТовары.Параметры.КолвоРейтинг = Стр.Количество;
			ОбластьРейтингТовары.Параметры.ЕдИзм = ?(глВерсия=3 И Стр.Товар.Тип = Перечисления.ТипыТоваров.Тариф," "+Стр.Товар.Тариф.ВремяЦены+""," "+Стр.Товар.ЕдиницаИзмерения+"");
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Данные",Стр.Строки);
			СтруктураРасшифровки.Вставить("Область","Рейтинг");
			ОбластьРейтинг.Параметры.РасшКолвоРейтинг = СтруктураРасшифровки;
			ОбластьРейтингТовары.Параметры.РасшКолвоРейтинг = СтруктураРасшифровки;
			
			Таб.Вывести(ОбластьРейтингТовары);
			СтрНомер = СтрНомер+1;
		КонецЦикла;
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ЗаказДопИнф.Заказ.Автор КАК Официант,
		                      |	ЗаказДопИнф.Заказ.ПосадочноеМесто КАК Место,
		                      |	1 КАК Счетчик,
		                      |	ЗаказДопИнф.Заказ КАК Заказ
		                      |ИЗ
		                      |	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф "+?(глВерсия = 3, "
							  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоставкаДопИнф.СрезПоследних(, ) КАК ДоставкаДопИнф
							  |		ПО ЗаказДопИнф.Заказ = ДоставкаДопИнф.Заказ","") + "
		                      |ГДЕ
		                      |	ЗаказДопИнф.Заказ.Дата МЕЖДУ &ДатаС И &ДатаПо
		                      |	И ЗаказДопИнф.Заказ.ПометкаУдаления = ЛОЖЬ
		                      |	И ЗаказДопИнф.Заказ.МестоРеализации = &МестоРеализации
		                      |	И ЗаказДопИнф.Статус <> &Статус "+?(глВерсия = 3, "
							  |	И (НЕ ЗаказДопИнф.Заказ.Доставка
							  |			ИЛИ ЗаказДопИнф.Заказ.Доставка
							  |				И ДоставкаДопИнф.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Открыт))","") + "
		                      |ИТОГИ
		                      |	СУММА(Счетчик)
		                      |ПО
		                      |	Рейтинг");
		
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаказа.Удален);
		
		ТекстОфициант = СтрЗаменить(Запрос.Текст,"Рейтинг","Официант");
		ТекстМеста    = СтрЗаменить(Запрос.Текст,"Рейтинг","Место");
		// Официанты
		Запрос.Текст = ТекстОфициант;
		Рейтинг = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Рейтинг.Строки.Сортировать("Счетчик Убыв");
		        
		Таб.Вывести(ОбластьОфицианты);
		СтрНомер = 1;
		Для Каждого Стр Из Рейтинг.Строки Цикл
			Если СтрНомер>3 Тогда 
				Прервать;
			КонецЕсли;
			ОбластьРейтинг.Параметры.Номер = ""+СтрНомер+".";
			ОбластьРейтинг.Параметры.Стр = Стр.Официант;
			ОбластьРейтинг.Параметры.КолвоРейтинг = Стр.Счетчик;
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Данные",Стр.Строки);
			СтруктураРасшифровки.Вставить("Область","Рейтинг");
			ОбластьРейтинг.Параметры.РасшКолвоРейтинг = СтруктураРасшифровки;
			Таб.Вывести(ОбластьРейтинг);
			СтрНомер = СтрНомер+1;
		КонецЦикла;
		
		// Места
		Запрос.Текст = ТекстМеста;
		Рейтинг = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Рейтинг.Строки.Сортировать("Счетчик Убыв");

		Таб.Вывести(ОбластьМеста);
		
		СтрНомер = 1;
		Для Каждого Стр Из Рейтинг.Строки Цикл
			Если СтрНомер>3 Тогда 
				Прервать;
			КонецЕсли;
			ОбластьРейтинг.Параметры.Номер = ""+СтрНомер+".";
			ОбластьРейтинг.Параметры.Стр = НаимПосадочногоМеста(Стр.Место);
			ОбластьРейтинг.Параметры.КолвоРейтинг = Стр.Счетчик;
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Данные",Стр.Строки);
			СтруктураРасшифровки.Вставить("Область","Рейтинг");
			ОбластьРейтинг.Параметры.РасшКолвоРейтинг = СтруктураРасшифровки;

			Таб.Вывести(ОбластьРейтинг);
			СтрНомер = СтрНомер+1;
		КонецЦикла;
        	
	КонецФункции
		
	// Формирует строку отчета
	//
	Процедура СформироватьСтроку(Стр, Число1="", Число2="", Число3, Выделение) Экспорт
		
		Выделение=?(Выделение,"Жирный","НеЖирный");
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСправа(Стр, ШиринаКолонок[0].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число1,"ЧЦ="+ШиринаКолонок[1].Значение + "; ЧН=0")), ШиринаКолонок[1].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число2,"ЧЦ="+ШиринаКолонок[2].Значение + "; ЧН=0")), ШиринаКолонок[2].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число3,"ЧЦ="+ШиринаКолонок[3].Значение +"; ЧДЦ=2; ЧН=0,00")), ШиринаКолонок[3].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",ПереводСтроки";
		
	КонецПроцедуры
	
#КонецЕсли