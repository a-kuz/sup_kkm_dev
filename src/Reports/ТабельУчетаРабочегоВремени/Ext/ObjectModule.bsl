
#Если Клиент Тогда
	
	Перем ИнформацияРасшифровки Экспорт;               // информация расшифроки отчета.
	Перем ЗапросИсх Экспорт;                           // исходный запрос
	Перем ШиринаКолонок;
	Перем Задание; 
	Перем ЗаголовокНастройка;
	Перем НастройкиОтчетаНаМоментФормирования Экспорт; // настройка при формировании отчета.
	
	// Устанавливает параметры
	//
	Процедура УстановитьПараметры()
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаС");
		Параметр.Значение = ДатаС;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаПо");
		Параметр.Значение = ДатаПо;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("МассивСмен");
		
		Параметр.Значение = МассивСмен;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрДата");
		
		Параметр.Использование = Истина;
		Если МассивСмен = Неопределено Тогда
			Параметр.Значение = Истина;	
		Иначе
			Параметр.Значение = Ложь;	
		КонецЕсли;	
		
		
	КонецПроцедуры
	

	// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
	//
	// Параметры
	//  ТабДокумент        – Табличный документ
	//  ВыводимыеОбласти   – Массив из проверяемых таблиц или табличный документ
	//  РезультатПриОшибке - Какой возвращать результат при возникновении ошибки
	//
	// Возвращаемое значение:
	//   Булево   – умещаются или нет переданные документы
	//
	Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина)

		Попытка
			Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
		Исключение
			Возврат РезультатПриОшибке;
		КонецПопытки;

	КонецФункции // ПроверитьВыводТабличногоДокумента()
	
	// Выводит отчет в табличный документ.
	//
	// Параметры:
	//  ТабличныйДокумент - табличный документ, в который выводится отчет.
	//
	Процедура СформироватьОтчет(ТабДокумент, НаПринтер = Ложь, ВарФормирования = 0, ЭлементыФормы = "") Экспорт

		Если НЕ ЗначениеЗаполнено(Фирма) Тогда
			Сообщить("Для формирования отчета необходимо указать фирму.");
			Возврат;
		КонецЕсли; 
		
		ТабДокумент.Очистить();
		
		Макет = ПолучитьМакет("Т13");
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьМакетаШапка.Параметры.ИмяОрганизации	= Фирма;
		ОбластьМакетаШапка.Параметры.ДатаНач	 	= ДатаС;
		ОбластьМакетаШапка.Параметры.ДатаКон	 	= ДатаПо;
		ОбластьМакетаШапка.Параметры.ДатаЗаполнения = ТекущаяДата();
		ТабДокумент.Вывести(ОбластьМакетаШапка);
		
		ОбластьДанныхКолонтитул = Макет.ПолучитьОбласть("Колонтитул");
		ТабДокумент.Вывести(ОбластьДанныхКолонтитул); 	
				
		ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		
		НомерСтроки = 0;
		
		ВыборкаДанныхФактическойВыработки = СформироватьТаблицуДанныхФактическойВыработки();
		ВсегоСтрок = ВыборкаДанныхФактическойВыработки.Количество();
		
		Пока ВыборкаДанныхФактическойВыработки.Следующий() Цикл
			
			ИтогоРабочихЧасовПоСтроке = 0;
			ИтогоРабочихДнейПоСтроке = 0;
			
			Если НЕ ЗначениеЗаполнено(ВыборкаДанныхФактическойВыработки.Сотрудник) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			СчЯвок = 0;
			
			ОбластьМакетаСтрока.Параметры.НомерПП = НомерСтроки;
			ОбластьМакетаСтрока.Параметры.Работник = ВыборкаДанныхФактическойВыработки.Сотрудник;
			ДолжностьУказана = Ложь;
			ОбластьМакетаСтрока.Параметры.ТабельныйНомер = ВыборкаДанныхФактическойВыработки.Сотрудник.Код;
			
			ВсегоДнейВМесяце = День(КонецМесяца(ДатаС));
			
			ВыборкаПоДатам = ВыборкаДанныхФактическойВыработки.Выбрать();
			
			Пока ВыборкаПоДатам.Следующий() Цикл
				
				НадоЗаполнитьДень = Истина;
				
				Если НЕ ДолжностьУказана Тогда
					ОбластьМакетаСтрока.Параметры.Работник = Строка(ВыборкаПоДатам.Сотрудник)+", " + Строка(ВыборкаПоДатам.Должность);
					ОбластьМакетаСтрока.Параметры.ФизЛицо = ВыборкаПоДатам.Сотрудник;
					ДолжностьУказана = Истина;
				КонецЕсли; 
				
				ВидВремени = ВыборкаПоДатам.ВИдВремени;
				Часов = ВыборкаПоДатам.Длительность;
				Счетчик = День(ВыборкаПоДатам.ДатаКалендаря);
				Если ЗначениеЗаполнено(ВидВремени) Тогда
					
					Если ВидВремени = Справочники.УР_ВидыИспользованияРабочегоВремени.Явка Тогда
						
						Если НадоЗаполнитьДень Тогда
							ИтогоРабочихДнейПоСтроке = ИтогоРабочихДнейПоСтроке + 1;
							НадоЗаполнитьДень	= Ложь;
						КонецЕсли;
						
						ИтогоРабочихЧасовПоСтроке = ИтогоРабочихЧасовПоСтроке + Часов;
						
					ИначеЕсли ВидВремени <> Справочники.УР_ВидыИспользованияРабочегоВремени.Выходной
						И ВидВремени <> Справочники.УР_ВидыИспользованияРабочегоВремени.Отпуск Тогда
						
						//СчНеявок = СчНеявок + 1;
						//ОбластьМакетаСтрока.Параметры["НеявкаКод" + Строка(СчНеявок)] = ВидВремени;
						//КоличествоЧасов = Часов;
						//Если КоличествоЧасов <> "0" Тогда
						//	ОбластьМакетаСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = Формат(Элемент.Значение) + "(" + КоличествоЧасов + ")";
						//Иначе
						//	ОбластьМакетаСтрока.Параметры["НеявкаДниЧасы" + Строка(СчНеявок)] = Формат(Элемент.Значение);
						//КонецЕсли;
						
					КонецЕсли;

					ТекстВидВремени = ВидВремени;
					ТекстЧасов		= ?(Часов = 0, "", "" + Часов + "");
					
				КонецЕсли; 
				
				ОбластьМакетаСтрока.Параметры["Символ"+Счетчик] = ТекстВидВремени;
				ОбластьМакетаСтрока.Параметры["ДополнительноеЗначение"+Счетчик] = ТекстЧасов;
				
				Если Счетчик < 15 Тогда
					ОбластьМакетаСтрока.Параметры.ДниПерваяПоловина = ИтогоРабочихДнейПоСтроке;
					ОбластьМакетаСтрока.Параметры.ЧасыПерваяПоловина = ИтогоРабочихЧасовПоСтроке;
				//ИначеЕсли Счетчик = ВсегоДнейВМесяце Тогда
				Иначе
					ОбластьМакетаСтрока.Параметры.ДниВтораяПоловина = ИтогоРабочихДнейПоСтроке - ?(ОбластьМакетаСтрока.Параметры.ДниПерваяПоловина <> Неопределено, ОбластьМакетаСтрока.Параметры.ДниПерваяПоловина, 0);
					ОбластьМакетаСтрока.Параметры.ЧасыВтораяПоловина = ИтогоРабочихЧасовПоСтроке - ?(ОбластьМакетаСтрока.Параметры.ЧасыПерваяПоловина <> Неопределено, ОбластьМакетаСтрока.Параметры.ЧасыПерваяПоловина, 0);
				КонецЕсли;
				
				ОбластьМакетаСтрока.Параметры.ДниЗаМесяц = ИтогоРабочихДнейПоСтроке;
				ОбластьМакетаСтрока.Параметры.ЧасыЗаМесяц = ИтогоРабочихЧасовПоСтроке;
				
			КонецЦикла;
			
			// Проверим, уместится ли строка на странице или надо открывать новую страницу
			Если Не ПроверитьВыводТабличногоДокумента(ТабДокумент, ОбластьМакетаСтрока) Тогда
				ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДокумент.Вывести(ОбластьДанныхКолонтитул);
			КонецЕсли;
			
			ТабДокумент.Вывести(ОбластьМакетаСтрока);
			
			Для Счетчик=1 ПО ВсегоДнейВМесяце Цикл
				ОбластьМакетаСтрока.Параметры["Символ"+Счетчик] = "";
				ОбластьМакетаСтрока.Параметры["ДополнительноеЗначение"+Счетчик] = "";
			КонецЦикла;
			ОбластьМакетаСтрока.Параметры.ДниПерваяПоловина = 0;
			ОбластьМакетаСтрока.Параметры.ЧасыПерваяПоловина = 0;
			ОбластьМакетаСтрока.Параметры.ДниВтораяПоловина = 0;
			ОбластьМакетаСтрока.Параметры.ЧасыВтораяПоловина = 0;
			
			ОбластьМакетаСтрока.Параметры.ДниЗаМесяц = 0;
			ОбластьМакетаСтрока.Параметры.ЧасыЗаМесяц = 0;
				
		КонецЦикла;
			
		ТабДокумент.Вывести(ОбластьМакетаПодвал);
		
	КонецПроцедуры
	
	// Формирует диаграмму.
	//
	Процедура СформироватьДиаграмму() Экспорт
		Диаграмма = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
		ВыбранноеПоле = Диаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Заголовок = "Сумма";
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Сумма");
		
		Серия = Диаграмма.Серии.Добавить();
		Серия.Использование = Истина;
		Поле = Серия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(?(ГруппироватьПоПериоду,ВидПериода, ?(ДопГруппировка,ВариантФормирования, "ВариантОплаты")));
		Поле.Использование = Истина;
		Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		НовоеВыбранноеПоле = Серия.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		Параметр = Диаграмма.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
		Параметр.Значение = ТипДиаграммы;
		Параметр.Использование = Истина;
		
		Параметр2 = Диаграмма.ПараметрыВывода.Элементы.Найти("TitleOutput");
		Параметр2.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
		Параметр2.Использование = Ложь;
		
		Параметр4 = Параметр.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.РасположениеЛегенды");
		Параметр4.Значение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Низ;
		Параметр4.Использование = Истина;
		
	КонецПроцедуры	
	
	// Получает текущие настройки.
	//
	// Параметры:
	//	ИсключитьДату - флаг исключения даты.
	//
	// Возвращаемое значение:
	//	Структура настроек.
	//
	Функция ПолучитьТекущиеНастройки(ИсключитьДату = Ложь) Экспорт
		
		СтруктураНастроек = Новый Структура;
		
		СтруктураНастроек.Вставить("КраткийВидНастройки"       , КраткийВидНастройки);
		СтруктураНастроек.Вставить("НастройкиКомпоновкиДанных" , КомпоновщикНастроек.ПолучитьНастройки());
		
		Возврат СтруктураНастроек;
		
	КонецФункции
	
	// Загружает настройки.
	//
	// Параметры:
	//	Настройки - структура настроек.
	//
	Процедура ЗагрузитьНастройки(Настройки) Экспорт
		
		КраткийВидНастройки  = Настройки.КраткийВидНастройки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки.НастройкиКомпоновкиДанных);
		
	КонецПроцедуры
			
	// Печать отчета из Рабочего места.
	//
	Процедура ПечататьНаПринтере(Смена) 
		
		МестоРеализации = глПараметрыРМ.МестоРеализации;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	НачислениеБезнал.Ссылка КАК Начисление,
		|	НачислениеБезнал.Сумма КАК Сумма,
		|	НачислениеБезнал.ККМ КАК ККМ,
		|	НачислениеБезнал.ВариантОплаты
		|ИЗ
		|	Документ.НачислениеБезнал КАК НачислениеБезнал
		|ГДЕ
		|	НачислениеБезнал.ПометкаУдаления = ЛОЖЬ
		|	И НачислениеБезнал.Дата МЕЖДУ &ДатаС И &ДатаПо
		|   И НачислениеБезнал.Смена.МестоРеализации = &МестоРеализации
		|ИТОГИ
		|	СУММА(Сумма)
		|ПО
		|	ККМ";	               
		
		ТекстЗапроса = ТекстЗапроса;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("ДатаС", Смена.Дата);
		Запрос.УстановитьПараметр("ДатаПо", ТекущаяДата());
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.ВариантыОплаты.ПустаяСсылка());
		РезультатЗапроса = Запрос.Выполнить();
		
		Заголовок1 = "НАЧИСЛЕНИЯ ПО КАРТАМ";
		Заголовок2 = "";
		
		ДлинаСтроки = ИнтерфейсРМ.ПРНДлинаСтроки(глПараметрыРМ.ПечатьОтчетовПринтер);
		ШиринаКолонок = Новый СписокЗначений;    
		Шапка = "";
		
		Если ДлинаСтроки=32 Тогда
			ШиринаКолонок.Добавить(20);
			ШиринаКолонок.Добавить(12);
		ИначеЕсли ДлинаСтроки=36 Тогда
			ШиринаКолонок.Добавить(24);
			ШиринаКолонок.Добавить(12);
		ИначеЕсли ДлинаСтроки=40 Тогда
			ШиринаКолонок.Добавить(28);
			ШиринаКолонок.Добавить(12);
		ИначеЕсли ДлинаСтроки=42 Тогда
			ШиринаКолонок.Добавить(30);
			ШиринаКолонок.Добавить(12);	
		ИначеЕсли ДлинаСтроки=44 Тогда
			ШиринаКолонок.Добавить(32);
			ШиринаКолонок.Добавить(12);
		Иначе //Если ДлинаСтроки=48 Тогда
			ШиринаКолонок.Добавить(36);
			ШиринаКолонок.Добавить(12);
		КонецЕсли;
		
		Задание = Новый ТаблицаЗначений;
		Задание.Колонки.Добавить("Данные");
		Задание.Колонки.Добавить("ТипДанных");
		Задание.Колонки.Добавить("Параметры");
		
		Выгрузка = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого Строка Из Выгрузка.Строки Цикл
			НоваяСтрока = Задание.Добавить(); 
			НоваяСтрока.Данные    = "ККМ: "+ Строка.ККМ;
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Лево,Жирный,ПереводСтроки";
			Для Каждого Документ Из Строка.Строки Цикл
				НоваяСтрока = Задание.Добавить(); 
				НоваяСтрока.Данные    = "" + Документ.Начисление.Дата + " Док №" + Документ.Начисление.Номер;
				НоваяСтрока.ТипДанных = "Строка";
				НоваяСтрока.Параметры = "ПереводСтроки";
				СформироватьСтроку(Документ.Начисление.ВариантОплаты.Наименование, Документ.Сумма, Ложь);
			КонецЦикла;
		КонецЦикла;
		
		НоваяСтрока = Задание.Добавить(); 
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Центр,ПереводСтроки";
		
		СформироватьСтроку("ИТОГО:", Выгрузка.Строки.Итог("Сумма"), Ложь);
		
		НоваяСтрока = Задание.Добавить(); 
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Центр,ПереводСтроки";
		
		ФормированиеОтчетов.ПечатьОтчетаРМ(Задание, Заголовок1, Заголовок2, Шапка);
		
	КонецПроцедуры
	
	// Формирование строки отчета на принтер.
	//
	Процедура СформироватьСтроку(Стр, Сумма, Выделение)
		
		Выделение=?(Выделение,"Жирный","НеЖирный");
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСправа(Стр, ШиринаКолонок[0].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Формат(Сумма,"ЧЦ="+ШиринаКолонок[1].Значение +"; ЧДЦ=2; ЧН=0,00"), ШиринаКолонок[1].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",ПереводСтроки";
		
		
	КонецПроцедуры
	
	Функция СформироватьТаблицуДанныхФактическойВыработки()
		
		ЗапросТЧ = Новый Запрос;
		ЗапросТЧ.УстановитьПараметр("ДатаС", ДатаС);
		ЗапросТЧ.УстановитьПараметр("ДатаПо", ДатаПо);
		ЗапросТЧ.УстановитьПараметр("Фирма", Фирма);
		
		Если глВерсия = 3 Тогда
			// Текст запросса для ПРЕМИУМА
			
			ТекстЗапроса 	=			
			"ВЫБРАТЬ
			|	0 КАК Цифра
			|ПОМЕСТИТЬ ВТ_ТаблицаЦифр
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	1
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	2
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	3
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	4
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	5
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	6
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	7
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	8
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	9
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(&ДатаС, ДЕНЬ, ТаблицаЦифрЕдиницы.Цифра + ТаблицаЦифрДесятки.Цифра * 10) КАК ДатаКалендаря
			|ПОМЕСТИТЬ ВТ_Календарь
			|ИЗ
			|	ВТ_ТаблицаЦифр КАК ТаблицаЦифрЕдиницы,
			|	ВТ_ТаблицаЦифр КАК ТаблицаЦифрДесятки
			|ГДЕ
			|	ДОБАВИТЬКДАТЕ(&ДатаС, ДЕНЬ, ТаблицаЦифрЕдиницы.Цифра + ТаблицаЦифрДесятки.Цифра * 10) <= &ДатаПо
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ_ТаблицаЦифр
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	УР_ДанныеПоТрудоустройствуСотрудниковСрезПоследних.Период,
			|	УР_ДанныеПоТрудоустройствуСотрудниковСрезПоследних.Фирма,
			|	УР_ДанныеПоТрудоустройствуСотрудниковСрезПоследних.Сотрудник,
			|	УР_ДанныеПоТрудоустройствуСотрудниковСрезПоследних.Должность,
			|	УР_ДанныеПоТрудоустройствуСотрудниковСрезПоследних.ГрафикРаботы,
			|	УР_ДанныеПоТрудоустройствуСотрудниковСрезПоследних.КоличествоСтавок,
			|	""Срез последних"" КАК ИсточникДанных
			|ПОМЕСТИТЬ ВТ_Трудоустройство
			|ИЗ
			|	РегистрСведений.УР_ДанныеПоТрудоустройствуСотрудников.СрезПоследних(&ДатаС, ) КАК УР_ДанныеПоТрудоустройствуСотрудниковСрезПоследних
			|ГДЕ
			|	УР_ДанныеПоТрудоустройствуСотрудниковСрезПоследних.КоличествоСтавок > 0
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	УР_ДанныеПоТрудоустройствуСотрудников.Период,
			|	УР_ДанныеПоТрудоустройствуСотрудников.Фирма,
			|	УР_ДанныеПоТрудоустройствуСотрудников.Сотрудник,
			|	УР_ДанныеПоТрудоустройствуСотрудников.Должность,
			|	УР_ДанныеПоТрудоустройствуСотрудников.ГрафикРаботы,
			|	УР_ДанныеПоТрудоустройствуСотрудников.КоличествоСтавок,
			|	""Изменение за период""
			|ИЗ
			|	РегистрСведений.УР_ДанныеПоТрудоустройствуСотрудников КАК УР_ДанныеПоТрудоустройствуСотрудников
			|ГДЕ
			|	УР_ДанныеПоТрудоустройствуСотрудников.Период > &ДатаС
			|	И УР_ДанныеПоТрудоустройствуСотрудников.Период <= &ДатаПо
			|	И (УР_ДанныеПоТрудоустройствуСотрудников.КоличествоСтавок > 0
			|			ИЛИ (УР_ДанныеПоТрудоустройствуСотрудников.Регистратор.ВидПриказа = ЗНАЧЕНИЕ(перечисление.УР_ВидыОперацийПриказОКадровомИзменении.Увольнение)
			|				ИЛИ УР_ДанныеПоТрудоустройствуСотрудников.Регистратор.ВидПриказа = ЗНАЧЕНИЕ(перечисление.УР_ВидыОперацийПриказОКадровомИзменении.КадровоеПеремещение)))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.ДатаКалендаря КАК ДатаКалендаря,
			|	Трудоустойство.ГрафикРаботы,
			|	Трудоустойство.Период,
			|	Трудоустойство.Сотрудник,
			|	Трудоустойство.Должность,
			|	Трудоустойство.Фирма,
			|	Трудоустойство.КоличествоСтавок
			|ПОМЕСТИТЬ ВТ_ТрудоустройствоПоДням
			|ИЗ
			|	(ВЫБРАТЬ
			|		Т2.ДатаКалендаря КАК ДатаКалендаря,
			|		МАКСИМУМ(Т1.Период) КАК Период,
			|		Т1.Фирма КАК Фирма,
			|		Т1.Сотрудник КАК Сотрудник,
			|		Т1.Должность КАК Должность
			|	ИЗ
			|		ВТ_Календарь КАК Т2
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Трудоустройство КАК Т1
			|			ПО Т2.ДатаКалендаря >= Т1.Период
			|	ГДЕ
			|		Т2.ДатаКалендаря >= &ДатаС
			|		И Т2.ДатаКалендаря <= &ДатаПо
			|	
			|	СГРУППИРОВАТЬ ПО
			|		Т2.ДатаКалендаря,
			|		Т1.Фирма,
			|		Т1.Сотрудник,
			|		Т1.Должность) КАК ВложенныйЗапрос
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Трудоустройство КАК Трудоустойство
			|		ПО ВложенныйЗапрос.Период = Трудоустойство.Период
			|			И ВложенныйЗапрос.Фирма = Трудоустойство.Фирма
			|			И ВложенныйЗапрос.Сотрудник = Трудоустойство.Сотрудник
			|			И ВложенныйЗапрос.Должность = Трудоустойство.Должность
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_Графики.Фирма,
			|	ВТ_Графики.Сотрудник,
			|	ВТ_Графики.Должность,
			|	ВТ_Графики.ДатаКалендаря,
			|	ЕСТЬNULL(ВТ_Графики.ГрафикРаботы, НЕОПРЕДЕЛЕНО) КАК ГрафикРаботы,
			|	ЕСТЬNULL(УР_ГрафикиРаботы.Смена, ЗНАЧЕНИЕ(Справочник.УР_Смены.ПустаяСсылка)) КАК Смена,
			|	ЕСТЬNULL(УР_ГрафикиРаботы.Длительность, 0) * ВТ_Графики.КоличествоСтавок КАК Длительность,
			|	УР_ГрафикиРаботы.ВремяНачала,
			|	УР_ГрафикиРаботы.ВремяОкончания
			|ПОМЕСТИТЬ ВТ_ГрафикДеньДлительность
			|ИЗ
			|	ВТ_ТрудоустройствоПоДням КАК ВТ_Графики
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УР_ГрафикиРаботы КАК УР_ГрафикиРаботы
			|		ПО ВТ_Графики.ДатаКалендаря = УР_ГрафикиРаботы.Дата
			|			И ВТ_Графики.ГрафикРаботы = УР_ГрафикиРаботы.ГрафикРаботы
			|ГДЕ
			|	ВТ_Графики.КоличествоСтавок <> 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ТрудоустройствоПоДням.Сотрудник КАК Сотрудник,
			|	ВТ_ТрудоустройствоПоДням.Должность КАК Должность,
			|	ВТ_ТрудоустройствоПоДням.ДатаКалендаря КАК ДатаКалендаря,
			|	ЕСТЬNULL(ВТ_ГрафикДеньДлительность.ГрафикРаботы, НЕОПРЕДЕЛЕНО) КАК ГрафикРаботы,
			|	ВТ_ТрудоустройствоПоДням.Фирма КАК Фирма,
			|	ВТ_ГрафикДеньДлительность.Длительность КАК Длительность,
			|	ЕСТЬNULL(ВТ_ГрафикДеньДлительность.Смена.ВидИспользованияРабочегоВремени, НЕОПРЕДЕЛЕНО) КАК ВидВремени,
			|	ВТ_ГрафикДеньДлительность.ВремяНачала КАК ВремяНачалаПлан,
			|	ВТ_ГрафикДеньДлительность.ВремяОкончания КАК ВремяОкончанияПлан
			|ПОМЕСТИТЬ ПлановыеДанные
			|ИЗ
			|	ВТ_ТрудоустройствоПоДням КАК ВТ_ТрудоустройствоПоДням
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ГрафикДеньДлительность КАК ВТ_ГрафикДеньДлительность
			|		ПО ВТ_ТрудоустройствоПоДням.ДатаКалендаря = ВТ_ГрафикДеньДлительность.ДатаКалендаря
			|			И ВТ_ТрудоустройствоПоДням.Фирма = ВТ_ГрафикДеньДлительность.Фирма
			|			И ВТ_ТрудоустройствоПоДням.Сотрудник = ВТ_ГрафикДеньДлительность.Сотрудник
			|			И ВТ_ТрудоустройствоПоДням.Должность = ВТ_ГрафикДеньДлительность.Должность
			|			И ВТ_ТрудоустройствоПоДням.ГрафикРаботы = ВТ_ГрафикДеньДлительность.ГрафикРаботы
			|ГДЕ
			|	ЕСТЬNULL(ВТ_ГрафикДеньДлительность.ГрафикРаботы, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
			|	И ВТ_ТрудоустройствоПоДням.Фирма = &Фирма
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НАЧАЛОПЕРИОДА(ДетальныйУчетВремени.Ссылка.Смена.Дата, ДЕНЬ) КАК РабочийДень,
			|	ДетальныйУчетВремени.Ссылка.Должность КАК Должность,
			|	ДетальныйУчетВремени.Ссылка.Сотрудник КАК Сотрудник,
			|	ДетальныйУчетВремени.Ссылка.Фирма КАК Фирма,
			|	СУММА(ЕСТЬNULL(РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ДетальныйУчетВремени.Длительность, ДЕНЬ), ДетальныйУчетВремени.Длительность, МИНУТА), 0)) КАК ОтработаноМинут,
			|	ДетальныйУчетВремени.ВидИспользованияРабочегоВремени КАК ВидВремени
			|ПОМЕСТИТЬ ФактическиеДанные
			|ИЗ
			|	Документ.ФактическаяВыработка.ДетальныйУчетВремени КАК ДетальныйУчетВремени
			|ГДЕ
			|	ДетальныйУчетВремени.Ссылка.ПометкаУдаления = ЛОЖЬ
			|	И ДетальныйУчетВремени.Ссылка.Смена.Дата МЕЖДУ &ДатаС И &ДатаПо
			|	И ДетальныйУчетВремени.Ссылка.Фирма = &Фирма
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(ДетальныйУчетВремени.Ссылка.Смена.Дата, ДЕНЬ),
			|	ДетальныйУчетВремени.Ссылка.Должность,
			|	ДетальныйУчетВремени.Ссылка.Сотрудник,
			|	ДетальныйУчетВремени.Ссылка.Фирма,
			|	ДетальныйУчетВремени.ВидИспользованияРабочегоВремени
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(НАЧАЛОПЕРИОДА(ФактическиеДанные.РабочийДень, ДЕНЬ), НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
			|			ТОГДА НАЧАЛОПЕРИОДА(ФактическиеДанные.РабочийДень, ДЕНЬ)
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПлановыеДанные.ДатаКалендаря, ДЕНЬ)
			|	КОНЕЦ КАК ДатаКалендаря,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ФактическиеДанные.Должность, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
			|			ТОГДА ФактическиеДанные.Должность
			|		ИНАЧЕ ПлановыеДанные.Должность
			|	КОНЕЦ КАК Должность,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ФактическиеДанные.Сотрудник, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
			|			ТОГДА ФактическиеДанные.Сотрудник
			|		ИНАЧЕ ПлановыеДанные.Сотрудник
			|	КОНЕЦ КАК Сотрудник,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ФактическиеДанные.Фирма, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
			|			ТОГДА ФактическиеДанные.Фирма
			|		ИНАЧЕ ПлановыеДанные.Фирма
			|	КОНЕЦ КАК Фирма,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ФактическиеДанные.ОтработаноМинут, 0) <> 0
			|			ТОГДА ВЫРАЗИТЬ(ФактическиеДанные.ОтработаноМинут / 60 КАК ЧИСЛО(3, 1))
			|		ИНАЧЕ ЕСТЬNULL(ПлановыеДанные.Длительность, 0)
			|	КОНЕЦ КАК Длительность,
			|	ВЫБОР
			|		КОГДА ЕСТЬNULL(ФактическиеДанные.ВидВремени, НЕОПРЕДЕЛЕНО) <> НЕОПРЕДЕЛЕНО
			|			ТОГДА ФактическиеДанные.ВидВремени
			|		ИНАЧЕ ПлановыеДанные.ВидВремени
			|	КОНЕЦ КАК ВидВремени
			|ИЗ
			|	ФактическиеДанные КАК ФактическиеДанные
			|		ПОЛНОЕ СОЕДИНЕНИЕ ПлановыеДанные КАК ПлановыеДанные
			|		ПО (ПлановыеДанные.ДатаКалендаря = ФактическиеДанные.РабочийДень)
			|			И (ПлановыеДанные.Сотрудник = ФактическиеДанные.Сотрудник)
			|УПОРЯДОЧИТЬ ПО
			|	ДатаКалендаря
			|ИТОГИ ПО
			|	Сотрудник";
		ИначеЕсли глВерсия = 2 Тогда
							 
			ТекстЗапроса = 	 
			"ВЫБРАТЬ
			|	ФактическаяВыработкаДетальныйУчетВремени.Ссылка.Сотрудник,
			|	ФактическаяВыработкаДетальныйУчетВремени.Ссылка.Должность,
			|	ФактическаяВыработкаДетальныйУчетВремени.Ссылка.Фирма,
			|	СУММА(ЕСТЬNULL(РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ФактическаяВыработкаДетальныйУчетВремени.Длительность, ДЕНЬ), ФактическаяВыработкаДетальныйУчетВремени.Длительность, ЧАС), 0)) КАК ДлительностьФакт,
			|	ФактическаяВыработкаДетальныйУчетВремени.ВидИспользованияРабочегоВремени,
			|	НАЧАЛОПЕРИОДА(ФактическаяВыработкаДетальныйУчетВремени.Ссылка.Смена.Дата, ДЕНЬ) КАК РабочийДень
			|ПОМЕСТИТЬ ВТ_ФактическиеДанные
			|ИЗ
			|	Документ.ФактическаяВыработка.ДетальныйУчетВремени КАК ФактическаяВыработкаДетальныйУчетВремени
			|ГДЕ
			|	НАЧАЛОПЕРИОДА(ФактическаяВыработкаДетальныйУчетВремени.Ссылка.Смена.Дата, ДЕНЬ) МЕЖДУ &ДатаС И &ДатаПо
			|	И ФактическаяВыработкаДетальныйУчетВремени.Ссылка.Фирма = &Фирма
			|
			|СГРУППИРОВАТЬ ПО
			|	НАЧАЛОПЕРИОДА(ФактическаяВыработкаДетальныйУчетВремени.Ссылка.Смена.Дата, ДЕНЬ),
			|	ФактическаяВыработкаДетальныйУчетВремени.Ссылка.Сотрудник,
			|	ФактическаяВыработкаДетальныйУчетВремени.Ссылка.Фирма,
			|	ФактическаяВыработкаДетальныйУчетВремени.Ссылка.Должность,
			|	ФактическаяВыработкаДетальныйУчетВремени.ВидИспользованияРабочегоВремени
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_ФактическиеДанные.Сотрудник КАК Сотрудник,
			|	ВТ_ФактическиеДанные.Должность КАК Должность,
			|	ВТ_ФактическиеДанные.ДлительностьФакт КАК Длительность,
			|	ВТ_ФактическиеДанные.ВидИспользованияРабочегоВремени КАК ВидВремени,
			|	ВТ_ФактическиеДанные.РабочийДень КАК ДатаКалендаря
			|ИЗ
			|	ВТ_ФактическиеДанные КАК ВТ_ФактическиеДанные
			|
			|УПОРЯДОЧИТЬ ПО
			|	ВТ_ФактическиеДанные.РабочийДень
			|ИТОГИ ПО
			|	Сотрудник";
			
		КонецЕсли;
		
		ЗапросТЧ.Текст = ТекстЗапроса;
		
		Возврат ЗапросТЧ.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецФункции;	
	
	
#КонецЕсли
