
#Если ТолстыйКлиентОбычноеПриложение Тогда
	Перем ВидНастройки Экспорт;                        // Вид настройки
	Перем ИнформацияРасшифровки Экспорт;               // информация расшифроки отчета.
	Перем ЗапросИсх Экспорт;                           // исходный запрос
	Перем ШиринаКолонок;
	Перем Задание; 
	Перем ЗаголовокНастройка;
	Перем НастройкиОтчетаНаМоментФормирования Экспорт; // настройка при формировании отчета.
	
// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
// Вызывается каждый раз при обращении к объекту обработки.
// Здесь надо прописать сброс переменных в начальные значения
// Реквизиты и табличные части уже сброшены
	Процедура УстановкаНачальныхЗначений() Экспорт
		
	КонецПроцедуры
	
	// Устанавливает параметры
	//
	Процедура УстановитьПараметры()
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаС");
		Параметр.Значение = ДатаС;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаПо");
		Параметр.Значение = ДатаПо;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрДата");
		Параметр.Использование = Истина;
		
		Если МассивСмен = Неопределено Тогда
			Параметр.Значение = Истина;
		Иначе
			Параметр.Значение = Ложь;
		КонецЕсли; 
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("МассивСмен");
		Параметр.Значение = МассивСмен;
		Параметр.Использование = Истина;
		
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0];
		Параметр.Значение = ПолучитьКоэффициентНДС();
		Параметр.Использование = Истина;
		
	КонецПроцедуры
	
	// Выводит отчет в табличный документ.
	//
	// Параметры:
	//  ТабличныйДокумент - табличный документ, в который выводится отчет.
	//
	Процедура СформироватьОтчет(ТабличныйДокумент = "", НаПринтер = Ложь, ВарФормирования = 0, ЭлементыФормы = "") Экспорт
		
		Если НаПринтер Тогда
			Смена = ИнтерфейсРМ.ТекущаяСмена();
			
			Если НЕ ЗначениеЗаполнено(Смена) Тогда
				Текст1="Смена не открыта!";
				Текст2="Для формирования отчета нет данных...";
				ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
				Возврат;
			КонецЕсли;
			
			ВариантФормирования = ?(ВарФормирования=0, "Общий", ВарФормирования);
			
			ПечататьНаПринтере(Смена);
			Возврат;
		КонецЕсли;	
		
		Если КраткийВидНастройки = Ложь Тогда
			ЗаголовокНастройка = СтрПолучитьСтроку(КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение,1);
			Заголовок = ЗаголовокНастройка + Символы.ПС + Период;
			
			КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = Заголовок;
			УстановитьПараметры();	
			ФормированиеОтчетов.отчСформироватьОтчет(ЭтотОбъект, ТабличныйДокумент,,,ЭлементыФормы);
			КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = ЗаголовокНастройка;
			
			НастройкиОтчетаНаМоментФормирования = ПолучитьТекущиеНастройки();
			
			Возврат;
		КонецЕсли;
		
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		Если ПоказыватьДиаграмму И ПараметрВыводаДиаграммы = 0 Тогда
			СформироватьДиаграмму();
		КонецЕсли;
		
		Заголовок = "ОТЧЕТ ПО ВЫРУЧКЕ"
		+ Символы.ПС + Период;
		
		КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = Заголовок;
		
		// добавим поле группировки
		ГруппировкаТаблица = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		Родитель = ГруппировкаТаблица.Строки;
		Если ГруппироватьПоПериоду Тогда
			ГруппировкаПоПериоду = Родитель.Добавить();
			
			ПолеГруппировки                = ГруппировкаПоПериоду.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ВидПериода);
			
			// Добавим колонку дня недели рядом с датой
			Если ВидПериода = "День" Тогда
				
				ПолеГруппировки                = ГруппировкаПоПериоду.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование  = Истина;
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("ДниНедели");
				
			КонецЕсли;
			
			НовоеВыбранноеПоле = ГруппировкаПоПериоду.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			
			Родитель = ГруппировкаПоПериоду.Структура;	 
		КонецЕсли;
		
		Если ДопГруппировка Тогда
			ГруппирокаДоп = Родитель.Добавить();
			ПолеГруппировки                = ГруппирокаДоп.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ВариантФормирования);
			
			НовоеВыбранноеПоле = ГруппирокаДоп.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			
			Родитель = ГруппирокаДоп.Структура;	 
			
			Если ВариантФормирования = "Час"  Тогда
				Порядок = КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				Порядок.Использование = Истина;
				Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				Порядок.Поле =  Новый ПолеКомпоновкиДанных(ВариантФормирования);
			КонецЕсли;	
		КонецЕсли;
		
		Если РасшифровыватьПоДокументам Тогда
			ГруппировкаПоЗаказу = Родитель.Добавить();
			ПолеГруппировки                = ГруппировкаПоЗаказу.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Заказ"); 
			НовоеВыбранноеПоле = ГруппировкаПоЗаказу.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных")); 
			
		КонецЕсли;
		
		Если НЕ (ГруппироватьПоПериоду ИЛИ ДопГруппировка ИЛИ РасшифровыватьПоДокументам) Тогда
			ДетальныеЗаписи = Родитель.Добавить();
			ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		КонецЕсли;	
		
		Если ВыводитьКоличествоЗаказов Тогда
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Заголовок = "Колво заказов";
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("КоличествоЗаказов");
			
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Заголовок = "Средний чек";
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СреднийЧек");
		КонецЕсли;	
		
		Если ВыводитьКоличествоГостей Тогда
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Заголовок = "Колво гостей";
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("КоличествоПосетителей");
			
			ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Использование = Истина;
			ВыбранноеПоле.Заголовок = "Средний гость";
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СреднийПосетитель");
		КонецЕсли;	
		
		// Добавим вертикальные группировки
		ДетальныеЗаписи = ГруппировкаТаблица.Колонки.Добавить();
		НовоеВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		ГруппировкаВариантОплаты = ГруппировкаТаблица.Колонки.Добавить();
		ПолеГруппировки                = ГруппировкаВариантОплаты.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("ВариантОплаты");
		ВыбранноеПоле1 = ГруппировкаВариантОплаты.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле1.Использование = Истина;
		ВыбранноеПоле1.Заголовок = "Сумма";
		ВыбранноеПоле1.Поле = Новый ПолеКомпоновкиДанных("СуммаОплаты");
		
		ВыбранноеПоле3 = ГруппировкаВариантОплаты.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле3.Использование = Истина;
		ВыбранноеПоле3.Заголовок = "Возврат";
		ВыбранноеПоле3.Поле = Новый ПолеКомпоновкиДанных("СуммаВозврат");
		
		ВыбранноеПоле2 = ГруппировкаВариантОплаты.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле2.Использование = Истина;
		ВыбранноеПоле2.Заголовок = "По вариантам оплаты";
		ВыбранноеПоле2.Поле = Новый ПолеКомпоновкиДанных("ВариантОплаты");
		
		УстановитьПараметры();
		
		Если ПоказыватьДиаграмму И ПараметрВыводаДиаграммы = 1 Тогда
			СформироватьДиаграмму();
		КонецЕсли;
		
		ФормированиеОтчетов.отчСформироватьОтчет(ЭтотОбъект, ТабличныйДокумент,,,ЭлементыФормы);
		
		НастройкиОтчетаНаМоментФормирования = ПолучитьТекущиеНастройки();
	КонецПроцедуры
	
	// Получает текущие настройки.
	//
	// Параметры:
	//	ИсключитьДату - флаг исключения даты.
	//
	// Возвращаемое значение:
	//	Структура настроек.
	//
	Функция ПолучитьТекущиеНастройки(ИсключитьДату = Ложь) Экспорт
		
		СтруктураНастроек = Новый Структура;
		
		СтруктураНастроек.Вставить("КраткийВидНастройки"       , КраткийВидНастройки);
		СтруктураНастроек.Вставить("НастройкиКомпоновкиДанных" , КомпоновщикНастроек.ПолучитьНастройки());
		
		Возврат СтруктураНастроек;
		
	КонецФункции
	
	// Загружает настройки.
	//
	// Параметры:
	//	Настройки - структура настроек.
	//
	Процедура ЗагрузитьНастройки(Настройки) Экспорт
		
		КраткийВидНастройки  = Настройки.КраткийВидНастройки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки.НастройкиКомпоновкиДанных);
		
	КонецПроцедуры
	
	// Формирует диаграмму.
	//
	Процедура СформироватьДиаграмму() Экспорт
		Диаграмма = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
		ВыбранноеПоле = Диаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Заголовок = "Сумма оплаты";
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СуммаОплаты");
		
		Серия = Диаграмма.Серии.Добавить();
		Серия.Использование = Истина;
		Поле = Серия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(?(ГруппироватьПоПериоду,ВидПериода, ?(ДопГруппировка,ВариантФормирования, "ВариантОплаты")));
		Поле.Использование = Истина;
		Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		НовоеВыбранноеПоле = Серия.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		Параметр = Диаграмма.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
		Параметр.Значение = ТипДиаграммы;
		Параметр.Использование = Истина;
		
		Параметр2 = Диаграмма.ПараметрыВывода.Элементы.Найти("TitleOutput");
		Параметр2.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
		Параметр2.Использование = Ложь;
		
		Параметр4 = Параметр.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.РасположениеЛегенды");
		Параметр4.Значение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Низ;
		Параметр4.Использование = Истина;
		
	КонецПроцедуры	
	
	// Получает коэффициент НДС.
	//
	Функция ПолучитьКоэффициентНДС()
		
		СтавкаНДС = Константы.ОсновнаяСтавкаНДС.Получить();
		
		Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
			Возврат 20/100;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			Возврат 20/120;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
			Возврат 18/100;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
			Возврат 18/118;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
			Возврат 10/100;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			Возврат 10/110;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.БезНДС	ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Возврат 0;
		Иначе 
			Возврат 0;	
		КонецЕсли;  
		
	КонецФункции	
	
	// Печать отчета из Рабочего места.
	//
	Процедура ПечататьНаПринтере(Смена) 
		
		МестоРеализации = глПараметрыРМ.МестоРеализации;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ПротоколРасчетовПротокол.Ссылка.Автор КАК Кассир,
		|	ПротоколРасчетовПротокол.Ссылка.МестоРеализации КАК МестоРеализации,
		|	ПротоколРасчетовПротокол.Ссылка.ГруппаОплаты КАК ГруппаОплаты,
		|	ПротоколРасчетовПротокол.ВариантОплаты КАК ВариантОплаты,
		|	ЕСТЬNULL(ПротоколРасчетовПротокол.СуммаФакт, 0) КАК СуммаОплаты,
		|	0 КАК СуммаВозврат,
		|	ПротоколРасчетовПротокол.Ссылка.Заказ.Автор КАК Официант,
		|	ПротоколРасчетовПротокол.Ссылка.Заказ.ПосадочноеМесто КАК ПосадочноеМесто,
		|	ЧАС(ПротоколРасчетовПротокол.Ссылка.Дата) КАК час
		|ПОМЕСТИТЬ Протокол
		|ИЗ
		|	Документ.ПротоколРасчетов.Протокол КАК ПротоколРасчетовПротокол
		|ГДЕ
		|	ПротоколРасчетовПротокол.Ссылка.Неучетный = ЛОЖЬ
		|	И ПротоколРасчетовПротокол.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ПротоколРасчетовПротокол.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И ПротоколРасчетовПротокол.Ссылка.МестоРеализации = &МестоРеализации
		|	И (НЕ ПротоколРасчетовПротокол.ВариантОплаты = &ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВариантыОплаты.Ссылка КАК ВариантОплаты,
		|	Протокол.Кассир,
		|	Протокол.МестоРеализации,
		|	Протокол.ГруппаОплаты,
		|	ЕСТЬNULL(Протокол.СуммаОплаты, 0) КАК СуммаОплаты,
		|	ЕСТЬNULL(Протокол.СуммаВозврат, 0) КАК СуммаВозврат,
		|	Протокол.Официант,
		|	Протокол.ПосадочноеМесто,
		|	Протокол.час
		|ПОМЕСТИТЬ ПротоколПолный
		|ИЗ
		|	Протокол КАК Протокол
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВариантыОплаты КАК ВариантыОплаты
		|		ПО Протокол.ВариантОплаты = ВариантыОплаты.Ссылка
		|ГДЕ
		|	ВариантыОплаты.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Возврат.Автор КАК Кассир,
		|	Возврат.МестоРеализации КАК МестоРеализации,
		|	Возврат.ГруппаОплаты КАК ГруппаОплаты,
		|	Возврат.ВариантОплаты,
		|	0 КАК СуммаОплаты,
		|	ЕСТЬNULL(Возврат.Сумма, 0) КАК СуммаВозврат,
		|	Возврат.Заказ.Автор КАК Официант,
		|	Возврат.Заказ.ПосадочноеМесто КАК ПосадочноеМесто,
		|	ЧАС(Возврат.Дата) КАК час
		|ПОМЕСТИТЬ Возврат
		|ИЗ
		|	Документ.Возврат КАК Возврат
		|ГДЕ
		|	Возврат.ПометкаУдаления = ЛОЖЬ
		|	И Возврат.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И Возврат.МестоРеализации = &МестоРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВариантыОплаты.Ссылка КАК ВариантОплаты,
		|	Возврат.Кассир,
		|	Возврат.МестоРеализации,
		|	Возврат.ГруппаОплаты,
		|	ЕСТЬNULL(Возврат.СуммаОплаты, 0) КАК СуммаОплаты,
		|	ЕСТЬNULL(Возврат.СуммаВозврат, 0) КАК СуммаВозврат,
		|	Возврат.Официант,
		|	Возврат.ПосадочноеМесто,
		|	Возврат.час
		|ПОМЕСТИТЬ ВозвратПолный
		|ИЗ
		|	Возврат КАК Возврат
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.ВариантыОплаты КАК ВариантыОплаты
		|		ПО Возврат.ВариантОплаты = ВариантыОплаты.Ссылка
		|ГДЕ
		|	ВариантыОплаты.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПротоколПолный.ВариантОплаты КАК ВариантОплаты,
		|	ПротоколПолный.Кассир,
		|	ПротоколПолный.МестоРеализации,
		|	ПротоколПолный.ГруппаОплаты,
		|	ПротоколПолный.Официант,
		|	ПротоколПолный.ПосадочноеМесто,
		|	ПротоколПолный.час,
		|	ПротоколПолный.СуммаОплаты КАК СуммаОплаты,
		|	ПротоколПолный.СуммаВозврат КАК СуммаВозврат
		|ИЗ
		|	ПротоколПолный КАК ПротоколПолный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратПолный.ВариантОплаты,
		|	ВозвратПолный.Кассир,
		|	ВозвратПолный.МестоРеализации,
		|	ВозвратПолный.ГруппаОплаты,
		|	ВозвратПолный.Официант,
		|	ВозвратПолный.ПосадочноеМесто,
		|	ВозвратПолный.час,
		|	ВозвратПолный.СуммаОплаты,
		|	ВозвратПолный.СуммаВозврат
		|ИЗ
		|	ВозвратПолный КАК ВозвратПолный
		|ИТОГИ
		|	СУММА(СуммаОплаты),
		|	СУММА(СуммаВозврат)	
		|ПО
		|	";	               
		
		Если Не ВариантФормирования = "Общий" Тогда
			
			ТекстЗапроса = ТекстЗапроса +  ВариантФормирования + ", ВариантОплаты " ;
			
			Запрос1 = Новый Запрос;
			Запрос1.Текст = "ВЫБРАТЬ
			                |	ВариантыОплаты.Ссылка КАК Ссылка,
			                |	0 КАК СуммаОплаты,
			                |	0 КАК СуммаВозврат
			                |ИЗ
			                |	Справочник.ВариантыОплаты КАК ВариантыОплаты
			                |ГДЕ
			                |	ВариантыОплаты.ПометкаУдаления = ЛОЖЬ
			                |
			                |УПОРЯДОЧИТЬ ПО
			                |	Ссылка";
			СписокВариантовОплаты = Запрос1.Выполнить().Выгрузить();						
			
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + " ВариантОплаты ";
		КонецЕсли;
				
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("ДатаС", Смена.Дата);
		Запрос.УстановитьПараметр("ДатаПо", ТекущаяДата());
		КоэфНДС = ПолучитьКоэффициентНДС();
		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники.ВариантыОплаты.ПустаяСсылка());
		РезультатЗапроса = Запрос.Выполнить();
		
		Заголовок1 = "ОТЧЕТ ПО ВЫРУЧКЕ";
		Если ВариантФормирования = "Общий" Тогда 
			Заголовок2 = "Общая выручка"
		ИначеЕсли ВариантФормирования = "Официант" Тогда
			Заголовок2 = "по официантам"
		ИначеЕсли ВариантФормирования = "Кассир" Тогда
			Заголовок2 = "по кассирам"
		ИначеЕсли ВариантФормирования = "ГруппаОплаты" Тогда
			Заголовок2 = "По группам оплаты"	
		ИначеЕсли ВариантФормирования = "ПосадосноеМесто" Тогда
			Заголовок2 = "По посадочным местам"
		ИначеЕсли ВариантФормирования = "Час" Тогда
			Заголовок2 = "Почасовой отчет"	
		КонецЕсли;
		
		ДлинаСтроки = ИнтерфейсРМ.ПРНДлинаСтроки(глПараметрыРМ.ПечатьОтчетовПринтер);
		ШиринаКолонок = Новый СписокЗначений;
		Если ДлинаСтроки=32 Тогда
			Шапка="Вар.опл.   Сумма Возврат   Итого";
			ШиринаКолонок.Добавить(8);
			ШиринаКолонок.Добавить(8);
			ШиринаКолонок.Добавить(8);
			ШиринаКолонок.Добавить(8);
		ИначеЕсли ДлинаСтроки=36 Тогда
			Шапка="Вар.опл.    Сумма   Возврат    Итого";
			ШиринаКолонок.Добавить(9);
			ШиринаКолонок.Добавить(9);
			ШиринаКолонок.Добавить(9);
			ШиринаКолонок.Добавить(9);
		ИначеЕсли ДлинаСтроки=40 Тогда
			Шапка="Вар. оплаты      Сумма  Возврат    Итого";
			ШиринаКолонок.Добавить(10);
			ШиринаКолонок.Добавить(10);
			ШиринаКолонок.Добавить(10);
			ШиринаКолонок.Добавить(10);
		ИначеЕсли ДлинаСтроки=42 Тогда
			Шапка="Вар. оплаты        Сумма  Возврат    Итого";
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(10);
			ШиринаКолонок.Добавить(10);
			ШиринаКолонок.Добавить(10);   	
		ИначеЕсли ДлинаСтроки=44 Тогда
			Шапка="Вариант оплаты     Сумма   Возврат     Итого";
			ШиринаКолонок.Добавить(11);
			ШиринаКолонок.Добавить(11);
			ШиринаКолонок.Добавить(11);
			ШиринаКолонок.Добавить(11);
		Иначе //Если ДлинаСтроки=48 Тогда
			Шапка="Вариант оплаты         Сумма   Возврат     Итого";
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(12);
		КонецЕсли;
		
		Задание = Новый ТаблицаЗначений;
		Задание.Колонки.Добавить("Данные");
		Задание.Колонки.Добавить("ТипДанных");
		Задание.Колонки.Добавить("Параметры");
		
		Выгрузка = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Не ВариантФормирования = "Общий" Тогда
			Выгрузка.Строки.Сортировать(ВариантФормирования);
		Иначе
			Выгрузка.Строки.Сортировать("ВариантОплаты");
		КонецЕсли;
		
		Если ВариантФормирования = "Общий" Тогда   
			Для Каждого Строка Из Выгрузка.Строки Цикл
				СформироватьСтроку(Строка.ВариантОплаты.Наименование, Строка.СуммаОплаты, Строка.СуммаВозврат, Строка.СуммаОплаты - Строка.СуммаВозврат, Истина); 
			КонецЦикла;	
		ИначеЕсли  ВариантФормирования = "Час" Тогда
			Для Каждого Час из Перечисления.Часы Цикл
				Строка = Выгрузка.Строки.Найти(Перечисления.Часы.Индекс(час), "час");
				Если Строка = Неопределено Тогда
					Продолжить;
				Иначе
					НоваяСтрока = Задание.Добавить();
					НоваяСтрока.Данные    = Час;
					НоваяСтрока.ТипДанных = "Строка";
					НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
					
					Для Каждого ВариантОплаты Из СписокВариантовОплаты Цикл
						
						Отбор = Новый Структура;
						Отбор.Вставить("ВариантОплаты", ВариантОплаты.Ссылка);
						Строка1 = Строка.Строки.Найти(ВариантОплаты.Ссылка,"ВариантОплаты");
						Если Строка1 = Неопределено Тогда
							СформироватьСтроку(ВариантОплаты.Ссылка.Наименование, 0, 0, 0, Ложь);
						Иначе	
							СформироватьСтроку(ВариантОплаты.Ссылка.Наименование , Строка1.СуммаОплаты, Строка1.СуммаВозврат, Строка1.СуммаОплаты - Строка1.СуммаВозврат, Ложь);
							ВариантОплаты.СуммаОплаты = ВариантОплаты.СуммаОплаты + Строка1.СуммаОплаты;
							ВариантОплаты.СуммаВозврат = ВариантОплаты.СуммаВозврат + Строка1.СуммаВозврат;
						КонецЕсли;
					КонецЦикла;	
					СформироватьСтроку("ИТОГО:",Строка.СуммаОплаты, Строка.СуммаВозврат, Строка.СуммаОплаты - Строка.СуммаВозврат, Истина); 
					
					НоваяСтрока = Задание.Добавить();
					НоваяСтрока.Данные    = "СтрЧерта";
					НоваяСтрока.ТипДанных = "Строка";
					НоваяСтрока.Параметры = "ПереводСтроки";
					
				КонецЕсли;	
			КонецЦикла;	
			НоваяСтрока = Задание.Добавить(); 
			НоваяСтрока.Данные    = "ОБЩАЯ ВЫРУЧКА";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
			
			Для Каждого ВариантОплаты Из СписокВариантовОплаты Цикл
				СформироватьСтроку(ВариантОплаты.Ссылка.Наименование , ВариантОплаты.СуммаОплаты, ВариантОплаты.СуммаВозврат, ВариантОплаты.СуммаОплаты -  ВариантОплаты.СуммаВозврат, Истина);
			КонецЦикла;
			
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = "СтрЧерта";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "ПереводСтроки";  		
			
		Иначе	
			Для Каждого Строка Из Выгрузка.Строки Цикл
				Если  ТипЗнч(Строка[ВариантФормирования]) = Тип("Null") Тогда
					Продолжить;
			    КонецЕсли;
				
				НоваяСтрока = Задание.Добавить();
				Если ВариантФормирования = "ПосадочноеМесто" Тогда
					Если НЕ ЗначениеЗаполнено(Строка[ВариантФормирования]) И глВерсия = 3  Тогда
						НоваяСтрока.Данные = "Доставка";
					Иначе
						НоваяСтрока.Данные = Врег(Строка[ВариантФормирования]) + " " + Строка[ВариантФормирования].Код;
					КонецЕсли;
				Иначе
					НоваяСтрока.Данные = Врег(Строка[ВариантФормирования]);
				КонецЕсли;
				
				НоваяСтрока.ТипДанных = "Строка";
				НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
				Для Каждого ВариантОплаты Из СписокВариантовОплаты Цикл
					
					Отбор = Новый Структура;
					Отбор.Вставить("ВариантОплаты", ВариантОплаты.Ссылка);
					Строка1 = Строка.Строки.Найти(ВариантОплаты.Ссылка,"ВариантОплаты");
					Если Строка1 = Неопределено Тогда
						СформироватьСтроку(ВариантОплаты.Ссылка.Наименование, 0, 0, 0, Ложь);
					Иначе	
						СформироватьСтроку(ВариантОплаты.Ссылка.Наименование , Строка1.СуммаОплаты, Строка1.СуммаВозврат, Строка1.СуммаОплаты - Строка1.СуммаВозврат, Ложь);
						ВариантОплаты.СуммаОплаты = ВариантОплаты.СуммаОплаты + Строка1.СуммаОплаты;
						ВариантОплаты.СуммаВозврат = ВариантОплаты.СуммаВозврат + Строка1.СуммаВозврат;
					КонецЕсли;
				КонецЦикла;	
				СформироватьСтроку("ИТОГО:", Строка.СуммаОплаты, Строка.СуммаВозврат, Строка.СуммаОплаты - Строка.СуммаВозврат,Истина); 
				
				НоваяСтрока = Задание.Добавить();
				НоваяСтрока.Данные    = "СтрЧерта";
				НоваяСтрока.ТипДанных = "Строка";
				НоваяСтрока.Параметры = "ПереводСтроки";
			КонецЦикла;	
			НоваяСтрока = Задание.Добавить(); 
			НоваяСтрока.Данные    = "ОБЩАЯ ВЫРУЧКА";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
			
			Для Каждого ВариантОплаты Из СписокВариантовОплаты Цикл
				СформироватьСтроку(ВариантОплаты.Ссылка.Наименование , ВариантОплаты.СуммаОплаты, ВариантОплаты.СуммаВозврат, ВариантОплаты.СуммаОплаты - ВариантОплаты.СуммаВозврат, Истина);
			КонецЦикла;
			
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = "СтрЧерта";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "ПереводСтроки";  		
		КонецЕсли;	
		
		// итоговые суммы     	
		СформироватьСтроку("ВСЕГО:", Выгрузка.Строки.Итог("СуммаОплаты"), Выгрузка.Строки.Итог("СуммаВозврат"),  Выгрузка.Строки.Итог("СуммаОплаты") - Выгрузка.Строки.Итог("СуммаВозврат"),Истина);
		Если Не Константы.ОсновнаяСтавкаНДС.Получить() = Перечисления.СтавкиНДС.БезНДС Тогда
			
			СформироватьСтроку("В т.ч. НДС",,,(Выгрузка.Строки.Итог("СуммаОплаты") - Выгрузка.Строки.Итог("СуммаВозврат"))*КоэфНДС,Истина);
			
		КонецЕсли;
		
		НоваяСтрока = Задание.Добавить(); 
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Центр,ПереводСтроки";
		
		
		ФормированиеОтчетов.ПечатьОтчетаРМ(Задание, Заголовок1, Заголовок2, Шапка);
		
	КонецПроцедуры
	
	// Формирование строки отчета на принтер.
	//
	Процедура СформироватьСтроку(Стр, Сумма, СуммаВозврат, СуммаИтого, Выделение)
		
		Выделение=?(Выделение,"Жирный","НеЖирный");
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСправа(Стр, ШиринаКолонок[0].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Формат(Сумма,"ЧЦ="+ШиринаКолонок[1].Значение +"; ЧДЦ=2; ЧН=0,00"), ШиринаКолонок[1].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Формат(СуммаВозврат,"ЧЦ="+ШиринаКолонок[2].Значение +"; ЧДЦ=2; ЧН=0,00"), ШиринаКолонок[2].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Формат(СуммаИтого,"ЧЦ="+ШиринаКолонок[3].Значение +"; ЧДЦ=2; ЧН=0,00"), ШиринаКолонок[3].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",ПереводСтроки";
		
	КонецПроцедуры
	
	ЭтотОбъект.СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаясхемаКомпоновкиДанных");

#КонецЕсли
