#Если Клиент Тогда
	Перем ВидНастройки Экспорт;                        // Вид настройки
	Перем ИнформацияРасшифровки Экспорт;               // информация расшифроки отчета.
	Перем ЗапросИсх Экспорт;                           // исходный запрос
	Перем ШиринаКолонок;
	Перем Задание; 
	Перем ЗаголовокНастройка;
	Перем НастройкиОтчетаНаМоментФормирования Экспорт; // настройка при формировании отчета.
	
// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
// Вызывается каждый раз при обращении к объекту обработки.
// Здесь надо прописать сброс переменных в начальные значения
// Реквизиты и табличные части уже сброшены
	Процедура УстановкаНачальныхЗначений() Экспорт
		
	КонецПроцедуры

	
	// Устанавливает параметры
	//
	Процедура УстановитьПараметры()
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0];
		Параметр.Значение = РасчетПроцентов;
		Параметр.Использование = Истина;
		
		// отбор периода
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаС");
		Параметр.Значение = ДатаС;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаПо");
		Параметр.Значение = ДатаПо;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("МассивСмен");
		Параметр.Значение = МассивСмен;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрДата");
		
		Параметр.Использование = Истина;
		Если МассивСмен = Неопределено Тогда
			Параметр.Значение = Истина;	
		Иначе
			Параметр.Значение = Ложь;	
		КонецЕсли;	
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СРаспределением");
		Параметр.Значение = СРаспределением;
		Параметр.Использование = Истина;
		
	КонецПроцедуры
	
	// Выводит отчет в табличный документ.
	//
	// Параметры:
	//  ТабличныйДокумент - табличный документ, в который выводится отчет.
	//
	Процедура СформироватьОтчет(ТабличныйДокумент = "", НаПринтер = Ложь, Пар = "", ЭлементыФормы = "") Экспорт
		Если НаПринтер Тогда
			Смена = ИнтерфейсРМ.ТекущаяСмена();
			
			Если НЕ ЗначениеЗаполнено(Смена) Тогда
				Текст1="Смена не открыта!";
				Текст2="Для формирования отчета нет данных...";
				ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
				Возврат;
			КонецЕсли;
			
			ПечататьНаПринтере(Смена);
			Возврат;
		КонецЕсли;	
		
		Если НЕ КраткийВидНастройки Тогда
			ЗаголовокНастройка = СтрПолучитьСтроку(КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение,1);
			Заголовок = ЗаголовокНастройка + Символы.ПС + Период;
			
			КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = Заголовок;
			УстановитьПараметры();	
			ФормированиеОтчетов.отчСформироватьОтчет(ЭтотОбъект, ТабличныйДокумент,,,ЭлементыФормы);
			КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = ЗаголовокНастройка;
			
			НастройкиОтчетаНаМоментФормирования = ПолучитьТекущиеНастройки();
			
			Возврат;
		КонецЕсли;
		
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		Если ПоказыватьДиаграмму И ПараметрВыводаДиаграммы = 0 Тогда
			СформироватьДиаграмму();
		КонецЕсли;
		
		Заголовок = "ОТЧЕТ ПО СЕБЕСТОИМОСТИ БЛЮД " + Символы.ПС + Период;
		
		КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = Заголовок;
		
		// добавим поле группировки
		ГруппировкаРодитель = КомпоновщикНастроек.Настройки;
		
		Если ГруппироватьПоПериоду Тогда
			ГруппировкаПоПериоду = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки                = ГруппировкаПоПериоду.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ВидПериода);
			
			// Добавим колонку дня недели рядом с датой
			Если ВидПериода = "День" Тогда
				
				ПолеГруппировки                = ГруппировкаПоПериоду.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование  = Истина;
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("ДниНедели");
				
			КонецЕсли;
			
			НовоеВыбранноеПоле = ГруппировкаПоПериоду.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			
			ГруппировкаРодитель = ГруппировкаПоПериоду;	 
		КонецЕсли;
		
		
		ГруппирокаПоРасходу = ГруппировкаРодитель.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
		ПолеГруппировки                = ГруппирокаПоРасходу.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ВариантФормирования);
		
		НовоеВыбранноеПоле = ГруппирокаПоРасходу.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		ГруппировкаРодитель = ГруппирокаПоРасходу;	 
		
		Если Не ВариантГруппировкиБлюд = "Без расшифровки по блюдам" Тогда	
			ГруппировкаПоТовару = ГруппировкаРодитель.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных")); 
			
			ПолеГруппировки                = ГруппировкаПоТовару.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			Если ВариантГруппировкиБлюд = "Только блюда без групп" Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ИначеЕсли ВариантГруппировкиБлюд = "Только группы без блюд" Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
			ИначеЕсли ВариантГруппировкиБлюд = "Группы блюд и блюда" Тогда
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			КонецЕсли;
			
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Товар");
			
			НовоеВыбранноеПоле = ГруппировкаПоТовару.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));  
			ГруппировкаРодитель = ГруппировкаПоТовару;
		КонецЕсли;
		
		
		Если РасшифровыватьПоДокументам Тогда
			ГруппировкаПоЗаказу = ГруппировкаРодитель.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки                = ГруппировкаПоЗаказу.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Заказ"); 
			НовоеВыбранноеПоле = ГруппировкаПоЗаказу.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных")); 
			
		КонецЕсли;
		
		УстановитьПараметры();
		
		Для Порядок = 0 По 3 Цикл
			КомпоновщикНастроек.Настройки.Порядок.Элементы[Порядок].Использование = Ложь;
		КонецЦикла;
		
		КомпоновщикНастроек.Настройки.Порядок.Элементы[Сортировка].Использование = Истина;
		
		Если ПоказыватьДиаграмму И ПараметрВыводаДиаграммы = 1 Тогда
			СформироватьДиаграмму();
		КонецЕсли;
		
		ФормированиеОтчетов.отчСформироватьОтчет(ЭтотОбъект, ТабличныйДокумент,,,ЭлементыФормы);
		ТабличныйДокумент.ФиксацияСверху = ?(ЭтотОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество()=0,5,7);
		НастройкиОтчетаНаМоментФормирования = ПолучитьТекущиеНастройки();
	КонецПроцедуры
	
	// Формирует диаграмму.
	//
	Процедура СформироватьДиаграмму() Экспорт
		Диаграмма = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
		ВыбранноеПоле = Диаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Заголовок = "Сумма доход";
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("СуммаДоход");
		
		Серия = Диаграмма.Серии.Добавить();
		Серия.Использование = Истина;
		Поле = Серия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(?(ГруппироватьПоПериоду,ВидПериода, ВариантФормирования));
		Поле.Использование = Истина;
		Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		НовоеВыбранноеПоле = Серия.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		Параметр = Диаграмма.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
		Параметр.Значение = ТипДиаграммы;
		Параметр.Использование = Истина;
		
		Параметр2 = Диаграмма.ПараметрыВывода.Элементы.Найти("TitleOutput");
		Параметр2.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
		Параметр2.Использование = Ложь;
		
		Параметр4 = Параметр.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.РасположениеЛегенды");
		Параметр4.Значение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Низ;
		Параметр4.Использование = Истина;
		
	КонецПроцедуры	
	
	// Получает текущие настройки.
	//
	// Параметры:
	//	ИсключитьДату - флаг исключения даты.
	//
	// Возвращаемое значение:
	//	Структура настроек.
	//
	Функция ПолучитьТекущиеНастройки(ИсключитьДату = Ложь) Экспорт
		
		СтруктураНастроек = Новый Структура;
		
		СтруктураНастроек.Вставить("КраткийВидНастройки"       , КраткийВидНастройки);
		СтруктураНастроек.Вставить("НастройкиКомпоновкиДанных" , КомпоновщикНастроек.ПолучитьНастройки());
		
		Возврат СтруктураНастроек;
		
	КонецФункции
	
	// Загружает настройки.
	//
	// Параметры:
	//	Настройки - структура настроек.
	//
	Процедура ЗагрузитьНастройки(Настройки) Экспорт
		
		КраткийВидНастройки  = Настройки.КраткийВидНастройки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки.НастройкиКомпоновкиДанных);
		
	КонецПроцедуры
	
	// Печать отчета из Рабочего места.
	//
	Процедура ПечататьНаПринтере(Смена) 
		
		МестоРеализации = глПараметрыРМ.МестоРеализации;
		Заголовок1 = "ОТЧЕТ ПО СЕБЕСТОИМОСТИ";
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("ДатаС", Смена.Дата);
		Запрос.УстановитьПараметр("ДатаПо", ТекущаяДата());
		Запрос.УстановитьПараметр("Себестоимость", Справочники.ТипыЦен.Себестоимость);
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказТовары.Товар КАК Товар,
		|	ЕСТЬNULL(ЗаказТовары.Количество, 0) КАК КоличествоРеализовано,
		|	ЕСТЬNULL(ЗаказТовары.Сумма, 0) КАК СуммаРеализации,
		|	0 КАК КоличествоСписано,
		|	ЕСТЬNULL(ЗаказТовары.Количество, 0) КАК КоличествоПриготовлено,
		|	ЕСТЬNULL(ЦеныСрезПоследних.Цена, 0) * ЕСТЬNULL(ЗаказТовары.Количество, 0) КАК Себестоимость
		|ИЗ
		|	Документ.Заказ.Товары КАК ЗаказТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаС, ТипЦен = &Себестоимость) КАК ЦеныСрезПоследних
		|		ПО ЗаказТовары.Товар = ЦеныСрезПоследних.Номенклатура
		|ГДЕ
		|	ЗаказТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ЗаказТовары.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И ЗаказТовары.Ссылка.МестоРеализации = &МестоРеализации
		|	И (ЗаказТовары.Количество <> 0
		|			ИЛИ ЗаказТовары.Сумма <> 0
		|			ИЛИ ЗаказТовары.Количество <> 0
		|			ИЛИ ЦеныСрезПоследних.Цена * ЗаказТовары.Количество <> 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Удаление.Товар,
		|	0,
		|	0,
		|	Удаление.Количество,
		|	Удаление.Количество,
		|	0
		|ИЗ
		|	Документ.Удаление КАК Удаление
		|ГДЕ
		|	Удаление.ПометкаУдаления = ЛОЖЬ
		|	И Удаление.МестоРеализации = &МестоРеализации
		|	И Удаление.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И Удаление.Причина.Списание = ИСТИНА
		|ИТОГИ
		|	СУММА(КоличествоРеализовано),
		|	СУММА(СуммаРеализации),
		|	СУММА(КоличествоСписано),
		|	СУММА(КоличествоПриготовлено),
		|	СУММА(Себестоимость)
		|ПО
		|	Товар";
		
		ДлинаСтроки = ИнтерфейсРМ.ПРНДлинаСтроки(глПараметрыРМ.ПечатьОтчетовПринтер);
		ШиринаКолонок = Новый СписокЗначений;
		Если ДлинаСтроки=32 Тогда      
			Шапка="Кол-во      Сумма";
			ШиринаКолонок.Добавить(14);
			ШиринаКолонок.Добавить(7);
			ШиринаКолонок.Добавить(11);
		ИначеЕсли ДлинаСтроки=36 Тогда 
			Шапка="Кол-во          Сумма";
			ШиринаКолонок.Добавить(16);
			ШиринаКолонок.Добавить(8);
			ШиринаКолонок.Добавить(12);
		ИначеЕсли ДлинаСтроки=40 Тогда
			Шапка="Кол-во             Сумма";
			ШиринаКолонок.Добавить(18);
			ШиринаКолонок.Добавить(10);
			ШиринаКолонок.Добавить(12);
		ИначеЕсли ДлинаСтроки=42 Тогда
			Шапка="Кол-во               Сумма";
			ШиринаКолонок.Добавить(20);
			ШиринаКолонок.Добавить(10);
			ШиринаКолонок.Добавить(12);
		ИначеЕсли ДлинаСтроки=44 Тогда
			Шапка="Кол-во                 Сумма";
			ШиринаКолонок.Добавить(22);
			ШиринаКолонок.Добавить(10);
			ШиринаКолонок.Добавить(12);
		Иначе //Если ДлинаСтроки=48 Тогда  
			Шапка="Кол-во                    Сумма";
			ШиринаКолонок.Добавить(22);
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(14);
		КонецЕсли;
		
		Шапка=СтрДополнитьСлева(Шапка,ДлинаСтроки);
		
		Задание = Новый ТаблицаЗначений;
		Задание.Колонки.Добавить("Данные");
		Задание.Колонки.Добавить("ТипДанных");
		Задание.Колонки.Добавить("Параметры");
		
		РезультатЗапоса = Запрос.Выполнить();
		Выгрузка = РезультатЗапоса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выгрузка.Строки.Сортировать("Товар");
		
		Для Каждого Строка Из Выгрузка.Строки Цикл
			
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = Врег("" + Строка.Товар.Код + " " + Строка.Товар.Наименование);
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Жирный,ПереводСтроки";
			
			СформироватьСтроку("Приготовлено", Строка.КоличествоПриготовлено, Строка.Себестоимость, Ложь);
			СформироватьСтроку("Реализовано" , Строка.КоличествоРеализовано,  Строка.СуммаРеализации, Ложь);
			СформироватьСтроку("% наценки"   , ?(Строка.Себестоимость = 0, "-", Строка.СуммаРеализации*100/Строка.Себестоимость -100), ,Ложь);
			
			НоваяСтрока = Задание.Добавить(); 
			НоваяСтрока.Данные    = "СтрЧерта";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Центр,ПереводСтроки";
			
		КонецЦикла;
		СформироватьСтроку("ИТОГО:",,,Истина);
		СформироватьСтроку("Приготовлено", Выгрузка.Строки.Итог("КоличествоПриготовлено"), , Истина);
		СформироватьСтроку("Реализовано" , Выгрузка.Строки.Итог("КоличествоРеализовано"),Выгрузка.Строки.Итог("СуммаРеализации"),Истина); 
		СформироватьСтроку("% наценки"   ,  ?(Выгрузка.Строки.Итог("Себестоимость")=0, "-", Выгрузка.Строки.Итог("СуммаРеализации")*100/Выгрузка.Строки.Итог("Себестоимость") -100), ,Истина);
		
		
		НоваяСтрока = Задание.Добавить(); 
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Центр,ПереводСтроки";
		
		ФормированиеОтчетов.ПечатьОтчетаРМ(Задание, Заголовок1, "", Шапка);
		
	КонецПроцедуры
	
	// Формирование строки отчета на принтер.
	//
	Процедура СформироватьСтроку(Стр, Число1="", Число2="", Выделение)
		
		Выделение=?(Выделение,"Жирный","НеЖирный");
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСправа(Стр, ШиринаКолонок[0].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Формат(Число1,"ЧЦ="+ШиринаКолонок[1].Значение +"; ЧДЦ=2; ЧН=0,00"), ШиринаКолонок[1].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Формат(Число2,"ЧЦ="+ШиринаКолонок[1].Значение +"; ЧДЦ=2; ЧН=0,00"), ШиринаКолонок[2].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",ПереводСтроки";
		
	КонецПроцедуры
	
#КонецЕсли