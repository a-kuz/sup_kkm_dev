#Если Клиент Тогда
	
	Перем КоличествоСтрок Экспорт;   // Количество строк
	Перем ШиринаКолонок;
	Перем Задание;
	Перем ИнформацияРасшифровки Экспорт; // информация расшифроки отчета.
    Перем РабочееМесто;
	
// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
// Вызывается каждый раз при обращении к объекту обработки.
// Здесь надо прописать сброс переменных в начальные значения
// Реквизиты и табличные части уже сброшены
	Процедура УстановкаНачальныхЗначений() Экспорт
		
	КонецПроцедуры

	// Формирует отчет
	//
	Процедура СформироватьОтчет(Таб = "",  СРабочегоМеста = Ложь, НаПринтер = "")  Экспорт
		
		Если СРабочегоМеста Тогда
			РабочееМесто = Истина;
			Смена = ИнтерфейсРМ.ТекущаяСмена();
			МестоРеализации = глПараметрыРМ.МестоРеализации;
			СписокРазделов = глПараметрыРМ.ПечатьОтчетовСистемыйБалансРазделы;
			
			Если НЕ ЗначениеЗаполнено(Смена) Тогда
				Текст1="Смена не открыта!";
				Текст2="Для формирования отчета нет данных...";
				ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
				Возврат;
			КонецЕсли;
			ДатаС = Смена.Дата;
			ДатаПо = ТекущаяДата();
			
			Если НаПринтер = "" Тогда
				Форма = ПолучитьФорму("ФормаРМ");
				Таб = Форма.ЭлементыФормы.Результат;
				Макет = ПолучитьМакет("МакетРМ");
				ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
				ОбластьЗаголовок.Параметры.Дата = Формат(ТекущаяДата(),"ДЛФ=DDT");
			Иначе  			
				ПечататьНаПринтере();
				Возврат;
			КонецЕсли;				
		Иначе
			РабочееМесто = Ложь;
			Макет = ПолучитьМакет("Макет");
			ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
			Если ЗначениеЗаполнено(МестоРеализации) Тогда
				ОбластьЗаголовок.Параметры.МестоРеализации = МестоРеализации; 		
			КонецЕсли; 
			ОбластьЗаголовок.Параметры.Период = Период; 		
		КонецЕсли;
		
		Таб.Очистить();
		КоличествоСтрок = 0;
		Таб.Вывести(ОбластьЗаголовок);
		
		КолПометок = 0;
		Если СписокРазделов[0].Пометка Тогда
			Пр = СформироватьВыручка(Таб, Макет, НаПринтер);
			КолПометок = КолПометок+1;
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;	
		Если СписокРазделов[5].Пометка Тогда
			Пр = СформироватьНачисленияИУдержания(Таб, Макет, НаПринтер);
			КолПометок = КолПометок+1;
			КоличествоСтрок = КоличествоСтрок + 4;
		КонецЕсли;
		Если СписокРазделов[1].Пометка Тогда
			Пр = СформироватьУдаления(Таб, Макет, НаПринтер);
			КолПометок = КолПометок+1;
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
		Если СписокРазделов[2].Пометка Тогда
			Пр = СформироватьСредние(Таб, Макет, НаПринтер);
			КолПометок = КолПометок+1;
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
		Если СписокРазделов[3].Пометка Тогда
			Пр = СформироватьЗаказы(Таб, Макет, НаПринтер);
			КолПометок = КолПометок+1;
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
		Если СписокРазделов[4].Пометка Тогда
			Пр = СформироватьСкидки(Таб, Макет, НаПринтер);
			КолПометок = КолПометок+1;
			КоличествоСтрок = КоличествоСтрок + 3;
		КонецЕсли;
		//Если КолПометок = 6 Тогда
		//	КоличествоСтрок = КоличествоСтрок + 12;
		//ИначеЕсли КолПометок = 5 Тогда
		//	КоличествоСтрок = КоличествоСтрок + 6;
		//КонецЕсли;
				
		Если СРабочегоМеста Тогда
			Форма.Открыть();
		Иначе
			Таб.ВерхнийКолонтитул.Выводить = Истина;
			Таб.ВерхнийКолонтитул.ТекстСправа = "Страница [&НомерСтраницы] из [&СтраницВсего]";
			
			Таб.НижнийКолонтитул.Выводить = Истина;
			Таб.НижнийКолонтитул.ТекстСправа = ""+ТекущаяДата()+"  Пользователь: "+ПараметрыСеанса.ТекущийПользователь;
		КонецЕсли;   
	КонецПроцедуры	
	
	Функция СформироватьВыручка(Таб, Макет, НаПринтер) 
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ПротоколРасчетовПротокол.ВариантОплаты КАК ВариантОплаты,
		|	СУММА(ПротоколРасчетовПротокол.СуммаФакт) КАК Сумма,
		|	СУММА(0) КАК СуммаВозврат,
		|	СУММА(ПротоколРасчетовПротокол.СуммаФакт) КАК Итог,
		|	СУММА(0) КАК Чел,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПротоколРасчетовПротокол.Ссылка.Заказ) КАК Заказ,
		|	СУММА(0) КАК Ссылка
		|ИЗ
		|	Документ.ПротоколРасчетов.Протокол КАК ПротоколРасчетовПротокол
		|ГДЕ
		|	ПротоколРасчетовПротокол.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ПротоколРасчетовПротокол.Ссылка.Неучетный = ЛОЖЬ
		|	И ПротоколРасчетовПротокол.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И ПротоколРасчетовПротокол.Ссылка.МестоРеализации = &МестоРеализации
		|	И (НЕ ПротоколРасчетовПротокол.ВариантОплаты = &ПустойВариантОплаты)
		|	И ПротоколРасчетовПротокол.Ссылка.Заказ ССЫЛКА Документ.Заказ
		|
		|СГРУППИРОВАТЬ ПО
		|	ПротоколРасчетовПротокол.ВариантОплаты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Возврат.ВариантОплаты,
		|	СУММА(0),
		|	СУММА(Возврат.Сумма),
		|	СУММА(-Возврат.Сумма),
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0)
		|ИЗ
		|	Документ.Возврат КАК Возврат
		|ГДЕ
		|	Возврат.ПометкаУдаления = ЛОЖЬ
		|	И Возврат.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И Возврат.МестоРеализации = &МестоРеализации
		|
		|СГРУППИРОВАТЬ ПО
		|	Возврат.ВариантОплаты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПротоколРасчетовПротокол.ВариантОплаты,
		|	СУММА(0),
		|	СУММА(0),
		|	СУММА(0),
		|	МАКСИМУМ(Заказ.КоличествоПосетителей),
		|	СУММА(0),
		|	Заказ.Ссылка
		|ИЗ
		|	Документ.ПротоколРасчетов.Протокол КАК ПротоколРасчетовПротокол
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ КАК Заказ
		|		ПО ПротоколРасчетовПротокол.Ссылка.Заказ = Заказ.Ссылка
		|ГДЕ
		|	ПротоколРасчетовПротокол.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ПротоколРасчетовПротокол.Ссылка.Неучетный = ЛОЖЬ
		|	И ПротоколРасчетовПротокол.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И ПротоколРасчетовПротокол.Ссылка.МестоРеализации = &МестоРеализации
		|	И (НЕ ПротоколРасчетовПротокол.ВариантОплаты = &ПустойВариантОплаты)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПротоколРасчетовПротокол.ВариантОплаты,
		|	Заказ.Ссылка
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(СуммаВозврат),
		|	СУММА(Итог),
		|	СУММА(Чел),
		|	СУММА(Заказ)
		|ПО
		|	ВариантОплаты");
		
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("ПустойВариантОплаты", Справочники.ВариантыОплаты.ПустаяСсылка());
		Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ПротоколРасчетовПротокол.Ссылка.Заказ КАК Заказ
		|ПОМЕСТИТЬ Таб
		|ИЗ
		|	Документ.ПротоколРасчетов.Протокол КАК ПротоколРасчетовПротокол
		|ГДЕ
		|	ПротоколРасчетовПротокол.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ПротоколРасчетовПротокол.Ссылка.Неучетный = ЛОЖЬ
		|	И ПротоколРасчетовПротокол.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И ПротоколРасчетовПротокол.Ссылка.МестоРеализации = &МестоРеализации
		|	И (НЕ ПротоколРасчетовПротокол.ВариантОплаты = &ПустойВариантОплаты)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПротоколРасчетовПротокол.Ссылка.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таб.Заказ КАК Заказ,
		|	Таб.Заказ.КоличествоПосетителей КАК Чел
		|ИЗ
		|	Таб КАК Таб
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ),
		|	СУММА(Чел)
		|ПО
		|	ОБЩИЕ";
		
		Выгрузка2 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НаПринтер = 1 Тогда
			Возврат Выгрузка;
		КонецЕсли;
		
		КоэфНДС = ПолучитьКоэффициентНДС();
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка1");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка1");
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		
		Таб.Вывести(ОбластьШапка);
		
		Для Каждого Строка Из Выгрузка.Строки Цикл
			ОбластьСтрока.Параметры.Заполнить(Строка);
			Если НЕ РабочееМесто Тогда
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",Строка.Строки);
				СтруктураРасшифровки.Вставить("Область","ВыгрузкаСтрока");
				ОбластьСтрока.Параметры.СтрРасшифровка = СтруктураРасшифровки;
			КонецЕсли;
			Таб.Вывести(ОбластьСтрока);
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;	
		
		ОбластьИтого.Параметры.Чел = Выгрузка2.Строки.Итог("Чел");
		ОбластьИтого.Параметры.Заказ = Выгрузка2.Строки.Итог("Заказ");
		ОбластьИтого.Параметры.Сумма = Выгрузка.Строки.Итог("Сумма");
		ОбластьИтого.Параметры.СуммаВозврат = Выгрузка.Строки.Итог("СуммаВозврат");
		ОбластьИтого.Параметры.Итог = Выгрузка.Строки.Итог("Итог");   
		ОбластьИтого.Параметры.НДС = Выгрузка.Строки.Итог("Итог")* КоэфНДС;
		Если НЕ РабочееМесто Тогда
			СтруктураРасшифровки = Новый Структура;
			Если Выгрузка2.Строки.Количество() > 0 Тогда
				СтруктураРасшифровки.Вставить("Данные",Выгрузка2.Строки[0].Строки);
			Иначе
				СтруктураРасшифровки.Вставить("Данные",Новый ТаблицаЗначений);
			КонецЕсли;
			СтруктураРасшифровки.Вставить("Область","Выручка");
			ОбластьИтого.Параметры.СтрРасшифровка = СтруктураРасшифровки;
		КонецЕсли;
		Таб.Вывести(ОбластьИтого);
				
		Возврат Таб;
	КонецФункции	
	
	Функция ОбработкаВыборСмен()
		Форма = Обработки.ВыборСмен.Создать();
		Возврат Форма.ПолучитьФорму().ОткрытьМодально();
	КонецФункции
	
	
	Функция СформироватьУдаления(Таб, Макет, НаПринтер) 
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Удаление.Заказ КАК Заказ,
		|	Удаление.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Удаление КАК Удаление
		|ГДЕ
		|	Удаление.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И Удаление.ПометкаУдаления = ЛОЖЬ
		|	И Удаление.Заказ.МестоРеализации = &МестоРеализации
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
		|ПО
		|	ОБЩИЕ");
		Запрос.УстановитьПараметр("ДатаС",ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		
		Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если НаПринтер = 1 Тогда
			Возврат Выгрузка;
		КонецЕсли;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка2");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка2");
		
		Таб.Вывести(ОбластьШапка);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Область","Удаления");
		Если Выгрузка.Строки.Количество()>0 Тогда
			ОбластьСтрока.Параметры.Позиций	= Выгрузка.Строки[0].Ссылка;
			ОбластьСтрока.Параметры.Заказов	= Выгрузка.Строки[0].Заказ;
			ТаблицаЗаказов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			ТаблицаЗаказов.Свернуть("Заказ");
			СтруктураРасшифровки.Вставить("Данные",ТаблицаЗаказов);
		Иначе	
			ОбластьСтрока.Параметры.Позиций	= 0;
			ОбластьСтрока.Параметры.Заказов	= 0;
			СтруктураРасшифровки.Вставить("Данные",Новый ТаблицаЗначений);
		КонецЕсли;
		
		Если НЕ РабочееМесто Тогда
			ОбластьСтрока.Параметры.СтрРасшифровка = СтруктураРасшифровки;
		КонецЕсли;
		
		Таб.Вывести(ОбластьСтрока);
		КоличествоСтрок = КоличествоСтрок + 1;
		Возврат Таб;
	КонецФункции
	
	Функция  СформироватьСредние(Таб, Макет, НаПринтер) 
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	СУММА(ПротоколРасчетов.ИтогСуммаФакт) КАК СуммаИтог,
		|	МАКСИМУМ(ПротоколРасчетов.Заказ.КоличествоПосетителей) КАК Чел,
		|	ПротоколРасчетов.Заказ КАК Чек
		|ИЗ
		|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
		|ГДЕ
		|	ПротоколРасчетов.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И ПротоколРасчетов.ПометкаУдаления = ЛОЖЬ
		|	И ПротоколРасчетов.Неучетный = ЛОЖЬ
		|	И ПротоколРасчетов.МестоРеализации = &МестоРеализации
		|	И ПротоколРасчетов.ИтогСуммаФакт <> 0 
		|
		|СГРУППИРОВАТЬ ПО
		|	ПротоколРасчетов.Заказ
		|
		|ИТОГИ
		|	СУММА(СуммаИтог),
		|	СУММА(Чел),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Чек)
		|ПО
		|	ОБЩИЕ");
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если НаПринтер = 1  Тогда
			Возврат Выгрузка;
		КонецЕсли;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка3");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка3");
		Таб.Вывести(ОбластьШапка);
		
		ОбластьСтрока.Параметры.Показатель = "Средняя выручка на заказ";
		Если Выгрузка.Строки.Количество()>0 Тогда
			КолвоЗаказов = Выгрузка.Строки[0].Чек;
			ОбластьСтрока.Параметры.Количество = КолвоЗаказов;
			ОбластьСтрока.Параметры.Сумма = ?(КолвоЗаказов=0, 0, Выгрузка.Строки[0].СуммаИтог / КолвоЗаказов);
		Иначе
			ОбластьСтрока.Параметры.Количество = 0;
			ОбластьСтрока.Параметры.Сумма = 0;
		КонецЕсли;  	
		Таб.Вывести(ОбластьСтрока);
		КоличествоСтрок= КоличествоСтрок + 1;
		
		ОбластьСтрока.Параметры.Показатель = "Средняя выручка на гостя";
		Если Выгрузка.Строки.Количество()>0 Тогда
			КолвоГостей = Выгрузка.Строки[0].Чел;
			ОбластьСтрока.Параметры.Количество = КолвоГостей;
			ОбластьСтрока.Параметры.Сумма = ?(КолвоГостей=0, 0, Выгрузка.Строки[0].СуммаИтог / КолвоГостей);
		Иначе
			ОбластьСтрока.Параметры.Количество = 0;
			ОбластьСтрока.Параметры.Сумма = 0;
		КонецЕсли; 	
		Таб.Вывести(ОбластьСтрока);
		КоличествоСтрок = КоличествоСтрок + 1;
		
		Возврат Таб;
	КонецФункции
	
	Функция  СформироватьЗаказы(Таб, Макет, НаПринтер) 
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЗаказДопИнф.Заказ.Ссылка КАК ЗаказПеренесено,
		|	ЗаказДопИнф.Заказ.ИтогоСумма КАК СуммаПеренесено
		|ПОМЕСТИТЬ Перенесено
		|ИЗ
		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф"+?(глВерсия = 3, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоставкаДопИнф.СрезПоследних(, ) КАК ДоставкаДопИнф
		|		ПО ЗаказДопИнф.Заказ = ДоставкаДопИнф.Заказ","") + "
		|ГДЕ
		|	ЗаказДопИнф.Заказ.ПометкаУдаления = ЛОЖЬ
		|	И ЗаказДопИнф.ДатаОткрытия < &ДатаС
		|	И (ЗаказДопИнф.ДатаЗакрытия МЕЖДУ &ДатаС И &ДатаПо
		|			ИЛИ ЗаказДопИнф.ДатаЗакрытия = &ПустаяДата)
		|	И ЗаказДопИнф.Заказ.МестоРеализации = &МестоРеализации
		|	И ЗаказДопИнф.Статус <> &СтатусУдал"+?(глВерсия = 3, "
		|	И (НЕ ЗаказДопИнф.Заказ.Доставка
		|			ИЛИ ЗаказДопИнф.Заказ.Доставка
		|				И ДоставкаДопИнф.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Открыт))","") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказДопИнф.Заказ.Ссылка КАК ЗаказНачато,
		|	ЗаказДопИнф.Заказ.ИтогоСумма КАК СуммаНачато
		|ПОМЕСТИТЬ Начато
		|ИЗ
		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф"+?(глВерсия = 3, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоставкаДопИнф.СрезПоследних(, ) КАК ДоставкаДопИнф
		|		ПО ЗаказДопИнф.Заказ = ДоставкаДопИнф.Заказ","") + "
		|ГДЕ
		|	ЗаказДопИнф.Заказ.ПометкаУдаления = ЛОЖЬ
		|	И ЗаказДопИнф.Заказ.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И ЗаказДопИнф.Заказ.МестоРеализации = &МестоРеализации
		|	И ЗаказДопИнф.Статус <> &СтатусУдал"+?(глВерсия = 3, "
		|	И (НЕ ЗаказДопИнф.Заказ.Доставка
		|			ИЛИ ЗаказДопИнф.Заказ.Доставка
		|				И ДоставкаДопИнф.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Открыт))","") + "
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказДопИнф.Заказ.Ссылка КАК ЗаказОплачено,
		|	ЗаказДопИнф.Заказ.ИтогоСумма КАК СуммаОплачено
		|ПОМЕСТИТЬ Оплачено
		|ИЗ
		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		|ГДЕ
		|	ЗаказДопИнф.Заказ.ПометкаУдаления = ЛОЖЬ
		|	И ЗаказДопИнф.Статус = &Статус
		|	И ЗаказДопИнф.ДатаЗакрытия МЕЖДУ &ДатаС И &ДатаПо
		|	И ЗаказДопИнф.Заказ.МестоРеализации = &МестоРеализации
		|	И ЗаказДопИнф.Заказ.ИтогоСумма <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказДопИнф.Заказ.Ссылка КАК ЗаказНеОплачено,
		|	ЗаказДопИнф.Заказ.ИтогоСумма КАК СуммаНеОплачено
		|ПОМЕСТИТЬ НеОплачено
		|ИЗ
		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф"+?(глВерсия = 3, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоставкаДопИнф.СрезПоследних(, ) КАК ДоставкаДопИнф
		|		ПО ЗаказДопИнф.Заказ = ДоставкаДопИнф.Заказ","") + "
		|ГДЕ
		|	ЗаказДопИнф.Заказ.ПометкаУдаления = ЛОЖЬ
		|	И ЗаказДопИнф.Заказ.Дата < &ДатаПо
		|	И (ЗаказДопИнф.Статус = &СтатусОткр
		|       ИЛИ  ЗаказДопИнф.ДатаЗакрытия > &ДатаПо)
		|	И ЗаказДопИнф.Заказ.МестоРеализации = &МестоРеализации
		|	И ЗаказДопИнф.Статус <> &СтатусУдал"+?(глВерсия = 3, "
		|	И (НЕ ЗаказДопИнф.Заказ.Доставка
		|			ИЛИ ЗаказДопИнф.Заказ.Доставка
		|				И ДоставкаДопИнф.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Открыт))","") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Начато.ЗаказНачато КАК ЗаказНачато,
		|	ЕСТЬNULL(Начато.СуммаНачато, 0) КАК СуммаНачато,
		|	NULL КАК ЗаказПеренесено,
		|	0 КАК СуммаПеренесено,
		|	NULL КАК ЗаказОплачено,
		|	0 КАК СуммаОплачено,
		|	NULL КАК ЗаказНеОплачено,
		|	0 КАК СуммаНеОплачено
		|ИЗ
		|	Начато КАК Начато
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	0,
		|	Перенесено.ЗаказПеренесено,
		|	ЕСТЬNULL(Перенесено.СуммаПеренесено, 0),
		|	NULL,
		|	0,
		|	NULL,
		|	0
		|ИЗ
		|	Перенесено КАК Перенесено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	0,
		|	NULL,
		|	0,
		|	Оплачено.ЗаказОплачено,
		|	ЕСТЬNULL(Оплачено.СуммаОплачено, 0),
		|	NULL,
		|	0
		|ИЗ
		|	Оплачено КАК Оплачено
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	0,
		|	NULL,
		|	0,
		|	NULL,
		|	0,
		|	НеОплачено.ЗаказНеОплачено,
		|	ЕСТЬNULL(НеОплачено.СуммаНеОплачено, 0)
		|ИЗ
		|	НеОплачено КАК НеОплачено
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказНачато),
		|	СУММА(СуммаНачато),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказПеренесено),
		|	СУММА(СуммаПеренесено),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказОплачено),
		|	СУММА(СуммаОплачено),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаказНеОплачено),
		|	СУММА(СуммаНеОплачено)
		|ПО
		|	ОБЩИЕ");
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("ПустаяДата", '00010101');
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаказа.Закрыт);
		Запрос.УстановитьПараметр("СтатусОткр", Перечисления.СтатусыЗаказа.Открыт);
		Запрос.УстановитьПараметр("СтатусУдал", Перечисления.СтатусыЗаказа.Удален);
		
		Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НаПринтер = 1 Тогда
			Возврат Выгрузка;
		КонецЕсли;
		
		ОбластьШапка = 	Макет.ПолучитьОбласть("Шапка4");
		ОбластьСтрока = Макет.ПолучитьОбласть("Строка3");
		Таб.Вывести(ОбластьШапка);
		
		// перенесено
		ОбластьСтрока.Параметры.Показатель = "Перенесено";
		
		СтруктураРасшифровки = Новый Структура;
		Если Выгрузка.Строки.Количество() > 0 Тогда
			ОбластьСтрока.Параметры.Количество = Выгрузка.Строки[0].ЗаказПеренесено;
			ОбластьСтрока.Параметры.Сумма = Выгрузка.Строки[0].СуммаПеренесено;
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("ЗаказНачато",Null);
			ПараметрыОтбора.Вставить("ЗаказОплачено",Null);
         	ПараметрыОтбора.Вставить("ЗаказНеОплачено",Null);

			МассивЗаказовПеренесено = Выгрузка.Строки[0].Строки.НайтиСтроки(ПараметрыОтбора);
			Если НЕ РабочееМесто Тогда
				СтруктураРасшифровки.Вставить("Данные",МассивЗаказовПеренесено);
				СтруктураРасшифровки.Вставить("Область","ЗаказПеренесено");
				ОбластьСтрока.Параметры.СтрРасшифровка = СтруктураРасшифровки;
			КонецЕсли;
			
		Иначе
			ОбластьСтрока.Параметры.Количество = 0;
			ОбластьСтрока.Параметры.Сумма = 0;
			СтруктураРасшифровки.Вставить("Данные",Новый ТаблицаЗначений);

		КонецЕсли;
		Таб.Вывести(ОбластьСтрока);
		КоличествоСтрок = КоличествоСтрок + 1;
		
		// начато
		ОбластьСтрока.Параметры.Показатель = "Начато";
		СтруктураРасшифровки = Новый Структура;
		Если Выгрузка.Строки.Количество() > 0 Тогда
			ОбластьСтрока.Параметры.Количество = Выгрузка.Строки[0].ЗаказНачато;
			ОбластьСтрока.Параметры.Сумма = Выгрузка.Строки[0].СуммаНачато;
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("ЗаказПеренесено",Null);
			ПараметрыОтбора.Вставить("ЗаказОплачено",Null);
         	ПараметрыОтбора.Вставить("ЗаказНеОплачено",Null);

			МассивЗаказовПеренесено = Выгрузка.Строки[0].Строки.НайтиСтроки(ПараметрыОтбора);
			Если НЕ РабочееМесто Тогда
				СтруктураРасшифровки.Вставить("Данные",МассивЗаказовПеренесено);
				СтруктураРасшифровки.Вставить("Область","ЗаказНачато");
				ОбластьСтрока.Параметры.СтрРасшифровка = СтруктураРасшифровки;
			КонецЕсли;
		Иначе
			ОбластьСтрока.Параметры.Количество = 0;
			ОбластьСтрока.Параметры.Сумма = 0;
			СтруктураРасшифровки.Вставить("Данные",Новый ТаблицаЗначений);

		КонецЕсли;
		Таб.Вывести(ОбластьСтрока);
		КоличествоСтрок = КоличествоСтрок + 1;
		
		// оплачено
		ОбластьСтрока.Параметры.Показатель = "Оплачено";
		Если Выгрузка.Строки.Количество() > 0 Тогда
			ОбластьСтрока.Параметры.Количество = Выгрузка.Строки[0].ЗаказОплачено;
			ОбластьСтрока.Параметры.Сумма = Выгрузка.Строки[0].СуммаОплачено;
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("ЗаказНачато",Null);
			ПараметрыОтбора.Вставить("ЗаказПеренесено",Null);
         	ПараметрыОтбора.Вставить("ЗаказНеОплачено",Null);

			МассивЗаказовПеренесено = Выгрузка.Строки[0].Строки.НайтиСтроки(ПараметрыОтбора);
			Если НЕ РабочееМесто Тогда
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",МассивЗаказовПеренесено);
				СтруктураРасшифровки.Вставить("Область","ЗаказОплачено");
				ОбластьСтрока.Параметры.СтрРасшифровка = СтруктураРасшифровки;
			КонецЕсли;
		Иначе
			ОбластьСтрока.Параметры.Количество = 0;
			ОбластьСтрока.Параметры.Сумма = 0;
			СтруктураРасшифровки.Вставить("Данные",Новый ТаблицаЗначений);

		КонецЕсли;
		Таб.Вывести(ОбластьСтрока);
		КоличествоСтрок = КоличествоСтрок + 1;
		
		//не оплачено
		ОбластьСтрока.Параметры.Показатель = "Не оплачено";
		Если Выгрузка.Строки.Количество() > 0 Тогда
			ОбластьСтрока.Параметры.Количество = Выгрузка.Строки[0].ЗаказНеОплачено;
			ОбластьСтрока.Параметры.Сумма = Выгрузка.Строки[0].СуммаНеОплачено;
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("ЗаказНачато",Null);
			ПараметрыОтбора.Вставить("ЗаказОплачено",Null);
         	ПараметрыОтбора.Вставить("ЗаказПеренесено",Null);

			МассивЗаказовПеренесено = Выгрузка.Строки[0].Строки.НайтиСтроки(ПараметрыОтбора);
			Если НЕ РабочееМесто Тогда
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",МассивЗаказовПеренесено);
				СтруктураРасшифровки.Вставить("Область","ЗаказНеОплачено");
				ОбластьСтрока.Параметры.СтрРасшифровка = СтруктураРасшифровки;
			КонецЕсли;
		Иначе
			ОбластьСтрока.Параметры.Количество = 0;
			ОбластьСтрока.Параметры.Сумма = 0;
			СтруктураРасшифровки.Вставить("Данные",Новый ТаблицаЗначений);

		КонецЕсли;
		Таб.Вывести(ОбластьСтрока);
		КоличествоСтрок = КоличествоСтрок + 1;
		
	КонецФункции
	
	Функция  СформироватьНачисленияИУдержания(Таб, Макет, НаПринтер) 
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НачислениеБезнал.Сумма >= 0
		|			ТОГДА НачислениеБезнал.Сумма
		|	КОНЕЦ КАК СуммаНачисления,
		|	НачислениеБезнал.ВариантОплаты КАК ВариантОплаты,
		|	ВЫБОР
		|		КОГДА НачислениеБезнал.Сумма < 0
		|			ТОГДА НачислениеБезнал.Сумма
		|	КОНЕЦ КАК СуммаУдержания,
		|	НачислениеБезнал.Сумма КАК Итог
		|ИЗ
		|	Документ.НачислениеБезнал КАК НачислениеБезнал
		|ГДЕ
		|	НачислениеБезнал.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И НачислениеБезнал.ПометкаУдаления = ЛОЖЬ
		|	И НачислениеБезнал.Смена.МестоРеализации = &МестоРеализации
		|ИТОГИ
		|	СУММА(СуммаНачисления),
		|	СУММА(СуммаУдержания),
		|	СУММА(Итог)
		|ПО
		|	ВариантОплаты");
		
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		
		Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если НаПринтер = 1 Тогда
			Возврат Выгрузка;
		КонецЕсли;
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка6");
		Если НЕ РабочееМесто Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка8");
		Иначе
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка7");
		КонецЕсли;
		ОбластьИтого = Макет.ПолучитьОбласть("Итого1");
		
		Если Выгрузка.Строки.Количество() <> 0 Тогда
			Таб.Вывести(ОбластьШапка);
		КонецЕсли;
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Область","Удаления");
		Для Каждого Строка Из Выгрузка.Строки Цикл
			ОбластьСтрока.Параметры.Заполнить(Строка);
			Если НЕ РабочееМесто Тогда
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",Строка.ВариантОплаты);
				СтруктураРасшифровки.Вставить("Область","НачисленияПоКартам");
				ОбластьСтрока.Параметры.СтрРасшифровка = СтруктураРасшифровки;
			КонецЕсли;
			Таб.Вывести(ОбластьСтрока);
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЦикла;
		
		Если Выгрузка.Строки.Количество() Тогда
			ОбластьИтого.Параметры.СуммаНачисления = Выгрузка.Строки.Итог("СуммаНачисления");
			ОбластьИтого.Параметры.СуммаУдержания = Выгрузка.Строки.Итог("СуммаУдержания");
			ОбластьИтого.Параметры.Итог = Выгрузка.Строки.Итог("Итог");
			Таб.Вывести(ОбластьИтого);
		КонецЕсли;
		
		Возврат Таб;
		
	КонецФункции
	
	Функция  СформироватьСкидки(Таб, Макет, НаПринтер) 
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ВЫБОР
		                      |		КОГДА ЗаказСкидки.Сумма > 0
		                      |			ТОГДА ЗаказСкидки.Сумма
		                      |		ИНАЧЕ 0
		                      |	КОНЕЦ КАК Наценка,
		                      |	ВЫБОР
		                      |		КОГДА ЗаказСкидки.Сумма < 0
		                      |			ТОГДА ЗаказСкидки.Сумма
		                      |		ИНАЧЕ 0
		                      |	КОНЕЦ КАК Скидка,
		                      |	ВЫБОР
		                      |		КОГДА ЗаказСкидки.Сумма > 0
		                      |			ТОГДА 1
		                      |		ИНАЧЕ 0
		                      |	КОНЕЦ КАК КолНаценка,
		                      |	ВЫБОР
		                      |		КОГДА ЗаказСкидки.Сумма < 0
		                      |			ТОГДА 1
		                      |		ИНАЧЕ 0
		                      |	КОНЕЦ КАК КолСкидка,
		                      |	ЗаказСкидки.Тип КАК Тип,
		                      |	ЗаказСкидки.Ссылка
		                      |ИЗ
		                      |	Документ.Заказ.Скидки КАК ЗаказСкидки
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		                      |		ПО ЗаказСкидки.Ссылка = ЗаказДопИнф.Заказ
		                      |ГДЕ
		                      |	ЗаказДопИнф.ПротоколРасчетов.Дата МЕЖДУ &ДатаС И &ДатаПо
		                      |	И ЗаказДопИнф.ПротоколРасчетов.МестоРеализации = &МестоРеализации
		                      |ИТОГИ
		                      |	СУММА(Наценка),
		                      |	СУММА(Скидка),
		                      |	СУММА(КолНаценка),
		                      |	СУММА(КолСкидка)
		                      |ПО
		                      |	ОБЩИЕ,
		                      |	Тип");

			
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		
		Выгрузка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если НаПринтер = 1  Тогда
			Возврат Выгрузка;
		КонецЕсли;
		
		ОбластьШапка   = Макет.ПолучитьОбласть("Шапка5");
		ОбластьСтрока  = Макет.ПолучитьОбласть("Строка5");
		Если НЕ РабочееМесто Тогда
			ОбластьНаценка = Макет.ПолучитьОбласть("Строка7");
		КонецЕсли;
		ОбластьДоп = Макет.ПолучитьОбласть("Строка6");
		Таб.Вывести(ОбластьШапка);
		
		Если Выгрузка.Строки.Количество() > 0 Тогда
			// скидки
			ОбластьСтрока.Параметры.СуммаСкидки = Выгрузка.Строки[0].Скидка;
			ОбластьСтрока.Параметры.КолСкидки = Выгрузка.Строки[0].КолСкидка;
			//Расшифровки
			ТаблицаЗаказов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("Наценка",0);                        
			
			МассивЗаказов = ТаблицаЗаказов.НайтиСтроки(ПараметрыОтбора);
			Если НЕ РабочееМесто Тогда
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",МассивЗаказов);
				СтруктураРасшифровки.Вставить("Область","Скидки");
				ОбластьСтрока.Параметры.СтрРасшифровка = СтруктураРасшифровки;
			КонецЕсли;
			Таб.Вывести(ОбластьСтрока);
			КоличествоСтрок = КоличествоСтрок + 1;
			
			//наценки
			Если НЕ РабочееМесто Тогда
				ОбластьНаценка.Параметры.СуммаНаценки = Выгрузка.Строки[0].Наценка;
				ОбластьНаценка.Параметры.КолНаценки = Выгрузка.Строки[0].КолНаценка;
			КонецЕсли;
			//Расшифровки
			ПараметрыОтбора = Новый	Структура;
			ПараметрыОтбора.Вставить("Скидка",0);                        
			
			МассивЗаказов = ТаблицаЗаказов.НайтиСтроки(ПараметрыОтбора);
			Если НЕ РабочееМесто Тогда
				СтруктураРасшифровки = Новый Структура;
				СтруктураРасшифровки.Вставить("Данные",МассивЗаказов);
				СтруктураРасшифровки.Вставить("Область","Скидки");
				ОбластьНаценка.Параметры.СтрРасшифровка = СтруктураРасшифровки;
				Таб.Вывести(ОбластьНаценка);
			КонецЕсли;

			КоличествоСтрок = КоличествоСтрок + 1;
            			
			Для Каждого Элемент Из Выгрузка.Строки Цикл
				Если Не ЗначениеЗаполнено(Элемент.Тип) Тогда
					Продолжить;
				КонецЕсли;	
				ОбластьДоп.Параметры.ТипСкидки = Элемент.Тип;
				ОбластьДоп.Параметры.Количество = Элемент.КолСкидка + Элемент.КолНаценка;
				ОбластьДоп.Параметры.Сумма = Элемент.Скидка + Элемент.Наценка;
				//// расшифровки
				ПараметрыОтбора = Новый	Структура;
				ПараметрыОтбора.Вставить("Тип",Элемент.Тип);                        
				
				МассивЗаказов = ТаблицаЗаказов.НайтиСтроки(ПараметрыОтбора);
				Если НЕ РабочееМесто Тогда
					СтруктураРасшифровки = Новый Структура;
					СтруктураРасшифровки.Вставить("Данные",МассивЗаказов);
					СтруктураРасшифровки.Вставить("Область","Скидки");
					ОбластьДоп.Параметры.СтрРасшифровка = СтруктураРасшифровки;
				КонецЕсли;
				Таб.Вывести(ОбластьДоп);
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЦикла;	
		Иначе
			Таб.Вывести(ОбластьСтрока);
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
		
		Возврат Таб;	
	КонецФункции
	
	Функция ПолучитьКоэффициентНДС()
		
		СтавкаНДС = Константы.ОсновнаяСтавкаНДС.Получить();
		
		Если СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
			Возврат 20/100;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
			Возврат 20/120;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
			Возврат 18/100;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
			Возврат 18/118;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
			Возврат 10/100;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
			Возврат 10/110;	
		ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.БезНДС	ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
			Возврат 0;
		Иначе 
			Возврат 0;	
		КонецЕсли;  
		
	КонецФункции	
	
	Процедура ПечататьНаПринтере() 
		
		Заголовок1 = "СИСТЕМНЫЙ БАЛАНС";
		
		ДлинаСтроки = ИнтерфейсРМ.ПРНДлинаСтроки(глПараметрыРМ.ПечатьОтчетовПринтер);
		ШиринаКолонок = Новый СписокЗначений;
		Если ДлинаСтроки=32 Тогда
			Шапка="              Чел.Зак.  Сумма";
			ШапкаСкидки="                Кол-во  Сумма";
			ШапкаНачисленийУдержаний="                        Сумма";
			ШиринаКолонок.Добавить(14);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(12);		
		ИначеЕсли ДлинаСтроки=36 Тогда
			Шапка="                 Чел.Зак.  Сумма";
			ШапкаСкидки="                    Кол-во Сумма";
			ШапкаНачисленийУдержаний="                        Сумма";
			ШиринаКолонок.Добавить(15);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(15);	
		ИначеЕсли ДлинаСтроки=40 Тогда
			Шапка="                   Чел.Зак.       Сумма";
			ШапкаСкидки="                      Кол-во      Сумма";
			ШапкаНачисленийУдержаний="                                  Сумма";
			ШиринаКолонок.Добавить(19);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(15);	
		ИначеЕсли ДлинаСтроки=42 Тогда
			Шапка="                     Чел.Зак.       Сумма";
			ШапкаСкидки="                        Кол-во      Сумма";
			ШапкаНачисленийУдержаний="                                    Сумма";
			ШиринаКолонок.Добавить(21);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(15);		
		ИначеЕсли ДлинаСтроки=44 Тогда
			Шапка="                       Чел.Зак.    Сумма";
			ШапкаСкидки="                          Кол-во   Сумма";
			ШапкаНачисленийУдержаний="                                   Сумма";
			ШиринаКолонок.Добавить(23);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(15);	
		Иначе //Если ДлинаСтроки=48 Тогда
			Шапка="                          Чел.Зак.    Сумма";
			ШапкаСкидки="                             Кол-во   Сумма";
			ШапкаНачисленийУдержаний="                                      Сумма";
			ШиринаКолонок.Добавить(27);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(3);
			ШиринаКолонок.Добавить(15);	
		КонецЕсли;
		
		Задание = Новый ТаблицаЗначений;
		Задание.Колонки.Добавить("Данные");
		Задание.Колонки.Добавить("ТипДанных");
		Задание.Колонки.Добавить("Параметры");
		
		// ВЫРУЧКА
		Выгрузка = СформироватьВыручка(,, Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПротоколРасчетовПротокол.Ссылка.Заказ КАК Заказ
		|ПОМЕСТИТЬ Таб
		|ИЗ
		|	Документ.ПротоколРасчетов.Протокол КАК ПротоколРасчетовПротокол
		|ГДЕ
		|	ПротоколРасчетовПротокол.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ПротоколРасчетовПротокол.Ссылка.Неучетный = ЛОЖЬ
		|	И ПротоколРасчетовПротокол.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		|	И ПротоколРасчетовПротокол.Ссылка.МестоРеализации = &МестоРеализации
		|	И (НЕ ПротоколРасчетовПротокол.ВариантОплаты = &ПустойВариантОплаты)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПротоколРасчетовПротокол.Ссылка.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Таб.Заказ КАК Заказ,
		|	Таб.Заказ.КоличествоПосетителей КАК Чел
		|ИЗ
		|	Таб КАК Таб
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Заказ),
		|	СУММА(Чел)
		|ПО
		|	ОБЩИЕ";
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("ПустойВариантОплаты", Справочники.ВариантыОплаты.ПустаяСсылка());
		
		Выгрузка2 = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "ОПЛАТЫ";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
		
		Для Каждого Строка Из Выгрузка.Строки Цикл
			СформироватьСтроку(Строка.ВариантОплаты.Наименование, Строка.Чел, Строка.Заказ, Строка.Сумма, Ложь);
		КонецЦикла;	
		СформироватьСтроку("Возвраты",,,Выгрузка.Строки.Итог("СуммаВозврат"),Ложь);
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "ПереводСтроки";
		
		СформироватьСтроку("ИТОГО", Выгрузка2.Строки.Итог("Чел"), Выгрузка2.Строки.Итог("Заказ"), Выгрузка.Строки.Итог("Итог"), Истина);
		СформироватьСтроку("В т.ч. НДС",,,ПолучитьКоэффициентНДС()* Выгрузка.Строки.Итог("Итог"),Ложь);
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "ПереводСтроки";
		
		// УДАЛЕНИЯ
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "УДАЛЕНИЯ";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
		
		Выгрузка = СформироватьУдаления(,,Истина);
		
		Если Выгрузка.Строки.Количество()>0 Тогда
			Позиций	= Выгрузка.Строки[0].Ссылка;
			Заказов	= Выгрузка.Строки[0].Заказ;
		Иначе	
			Позиций	= 0;
			Заказов	= 0;
		КонецЕсли;
		
		СформироватьСтроку("Позиции",,Позиций,, Ложь);
		СформироватьСтроку("Заказы",,Заказов,, Ложь);
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "ПереводСтроки";
		
		// Средние
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "СРЕДНИЕ";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
		
		Выгрузка = СформироватьСредние(,,Истина);
		Если Выгрузка.Строки.Количество()>0 Тогда
			Чек = Выгрузка.Строки[0].Чек;
			Чел = Выгрузка.Строки[0].Чел;
			СредЧек = Выгрузка.Строки[0].СуммаИтог / Чек;
			СредЧел = Выгрузка.Строки[0].СуммаИтог / Чел;
		Иначе
			Чек = 0;
			Чел = 0;
			СредЧек = 0;
			СредЧел = 0;
		КонецЕсли;
		
		СформироватьСтроку("Выручка на чек", , Чек, СредЧек, Ложь);
		СформироватьСтроку("Выручка на гостя", , Чел, СредЧел, Ложь);
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "ПереводСтроки";
		
		// Заказы
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "ЗАКАЗЫ";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
		
		Выгрузка = СформироватьЗаказы(,,Истина);
		
		Если Выгрузка.Строки.Количество()>0 Тогда
			Перенесено 		= Выгрузка.Строки[0].ЗаказПеренесено;
			ПеренесеноСумма = Выгрузка.Строки[0].СуммаПеренесено;
			Начато 			= Выгрузка.Строки[0].ЗаказНачато;
			НачатоСумма 	= Выгрузка.Строки[0].СуммаНачато;
			Оплачено 		= Выгрузка.Строки[0].ЗаказОплачено;
			ОплаченоСумма 	= Выгрузка.Строки[0].СуммаОплачено;
			НеОплачено 		= Выгрузка.Строки[0].ЗаказНеОплачено;
			НеОплаченоСумма = Выгрузка.Строки[0].СуммаНеОплачено;
			
		Иначе
			Перенесено 		= 0;
			ПеренесеноСумма = 0;
			Начато 			= 0;
			НачатоСумма 	= 0;
			Оплачено 		= 0;
			ОплаченоСумма 	= 0;
			НеОплачено 		= 0;
			НеОплаченоСумма = 0;
		КонецЕсли;
		
		СформироватьСтроку("Перенесено",,Перенесено,ПеренесеноСумма, Ложь);
		СформироватьСтроку("Начато"    ,,Начато    ,НачатоСумма    , Ложь);
		СформироватьСтроку("Оплачено"  ,,Оплачено  ,ОплаченоСумма  , Ложь);
		СформироватьСтроку("Не оплачено",,НеОплачено,НеОплаченоСумма, Ложь);
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "ПереводСтроки";
		
		
		// Если в настройке РМ флаг у скидок не стоит то и на принтере их печатать не будем
		Если СписокРазделов[4].Пометка Тогда
			// Скидки
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = "СКИДКИ";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
			
			// шапка скидок
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = ШапкаСкидки;
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Лево,НеПереносить,ПереводСтроки";
			
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = "СтрЧерта";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Лево,НеПереносить,ПереводСтроки";
			
			Выгрузка = СформироватьСкидки(,,Истина);
			
			Для Каждого Строка Из Выгрузка.Строки Цикл
				Если Строка.тип <> NULL Тогда
					СформироватьСтроку(Строка(Строка.Тип), , ?(Строка.КолСкидка <> 0, Строка.КолСкидка, Строка.КолНаценка),
					?(Строка.КолСкидка <> 0, Строка.Скидка, Строка.Наценка), Ложь);
				КонецЕсли;
				
			КонецЦикла;
			
			// Если есть что отделитьот следующего раздела, отделим
			Если Выгрузка.Строки.Количество() > 0 Тогда
				// отчерк скидок
				НоваяСтрока = Задание.Добавить();
				НоваяСтрока.Данные    = "СтрЧерта";
				НоваяСтрока.ТипДанных = "Строка";
				НоваяСтрока.Параметры = "ПереводСтроки";
			КонецЕсли;
			
		КонецЕсли;
		
		// Если в настройке РМ флаг у начислений/удержаний не стоит то и на принтере их печатать не будем
		Если СписокРазделов[5].Пометка Тогда
			// Начисления и удержания
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = "НАЧИСЛЕНИЯ / УДЕРЖАНИЯ";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
			
			// шапка начислений/удержаний
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = ШапкаНачисленийУдержаний;
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Лево,НеПереносить,ПереводСтроки";
			
			НоваяСтрока = Задание.Добавить();
			НоваяСтрока.Данные    = "СтрЧерта";
			НоваяСтрока.ТипДанных = "Строка";
			НоваяСтрока.Параметры = "Лево,НеПереносить,ПереводСтроки";
			
			Выгрузка = СформироватьНачисленияИУдержания(,,Истина);
			
			Для Каждого Строка Из Выгрузка.Строки Цикл
				СформироватьСтроку(Строка.ВариантОплаты.Наименование, , , Строка.Итог, Ложь);
			КонецЦикла;
			СформироватьСтроку("ИТОГО", ,, Выгрузка.Строки.Итог("Итог"), Истина);
			
		КонецЕсли;
		
		ФормированиеОтчетов.ПечатьОтчетаРМ(Задание, Заголовок1, , Шапка);
		
	КонецПроцедуры
	
	// Формирует строку отчета
	//
	Процедура СформироватьСтроку(Стр, Число1="", Число2="", Число3, Выделение) Экспорт
		
		Выделение=?(Выделение,"Жирный","НеЖирный");
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСправа(Стр, ШиринаКолонок[0].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число1,"ЧЦ="+ШиринаКолонок[1].Значение + "; ЧН=0")), ШиринаКолонок[1].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число2,"ЧЦ="+ШиринаКолонок[2].Значение + "; ЧН=0")), ШиринаКолонок[2].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число3,"ЧЦ="+ШиринаКолонок[3].Значение +"; ЧДЦ=2; ЧН=0,00")), ШиринаКолонок[3].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",ПереводСтроки";
		
	КонецПроцедуры
	
#КонецЕсли