Перем ВидНастройки Экспорт;                        // Вид настройки
Перем ИнформацияРасшифровки Экспорт;               // информация расшифроки отчета.
Перем ЗапросИсх Экспорт;                           // исходный запрос
Перем Задание;
Перем ШиринаКолонок;
Перем ЗаголовокНастройка;
Перем НастройкиОтчетаНаМоментФормирования Экспорт; // настройка при формировании отчета.

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
// Вызывается каждый раз при обращении к объекту обработки.
// Здесь надо прописать сброс переменных в начальные значения
// Реквизиты и табличные части уже сброшены
Процедура УстановкаНачальныхЗначений() Экспорт
	
КонецПроцедуры
	
	// Устанавливает параметры
	//
	Процедура УстановитьПараметры()
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаС");
		Параметр.Значение = ДатаС;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДатаПо");
		Параметр.Значение = ДатаПо;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("МассивСмен");
		Параметр.Значение = МассивСмен;
		Параметр.Использование = Истина;
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ПараметрДата");
		
		Параметр.Использование = Истина;
		Если МассивСмен = Неопределено Тогда
			Параметр.Значение = Истина;	
		Иначе
			Параметр.Значение = Ложь;	
		КонецЕсли;	
		
		Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("СРаспределением");
		Параметр.Значение = СРаспределением;
		Параметр.Использование = Истина;
		
		
	КонецПроцедуры
	
	// Выводит отчет в табличный документ.
	//
	// Параметры:
	//  ТабличныйДокумент - табличный документ, в который выводится отчет.
	//
	Процедура СформироватьОтчет(ТабличныйДокумент = "", НаПринтер = Ложь, ВарФормирования = 0, ЭлементыФормы = "") Экспорт
		
		Если НаПринтер Тогда
			
			Смена = ИнтерфейсРМ.ТекущаяСмена();
			
			Если НЕ ЗначениеЗаполнено(Смена) Тогда
				Текст1="Смена не открыта!";
				Текст2="Для формирования отчета нет данных...";
				ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
				Возврат;
			КонецЕсли;
			
			ВариантФормирования = ?(ВарФормирования=0, "ОбщийРасход", ВарФормирования);
			
			ПечататьНаПринтере(Смена);
			Возврат;
		КонецЕсли;	
		
		Если НЕ КраткийВидНастройки Тогда
			ЗаголовокНастройка = СтрПолучитьСтроку(КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение,1);
			Заголовок = "Отчет по расходу" + Символы.ПС + Период;
			
			КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = Заголовок;
			УстановитьПараметры();	
			ФормированиеОтчетов.отчСформироватьОтчет(ЭтотОбъект, ТабличныйДокумент,,,ЭлементыФормы);
			КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = ЗаголовокНастройка;
			
			НастройкиОтчетаНаМоментФормирования = ПолучитьТекущиеНастройки();
			
			Возврат;
		КонецЕсли;
		
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		Если ПоказыватьДиаграмму И ПараметрВыводаДиаграммы = 0 Тогда
			СформироватьДиаграмму();
		КонецЕсли;
		
		Заголовок = "ОТЧЕТ ПО РАСХОДУ" + Символы.ПС + Период;
		
		КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок")).Значение = Заголовок;
		
		// добавим поле группировки
		ГруппировкаРодитель = КомпоновщикНастроек.Настройки;
		
		Если ГруппироватьПоПериоду Тогда
			ГруппировкаПоПериоду = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки                = ГруппировкаПоПериоду.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ВидПериода);
			
			// Добавим колонку дня недели рядом с датой
			Если ВидПериода = "День" Тогда
				
				ПолеГруппировки                = ГруппировкаПоПериоду.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировки.Использование  = Истина;
				ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
				ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("ДниНедели");
				
			КонецЕсли;
			НовоеВыбранноеПоле = ГруппировкаПоПериоду.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			
			ГруппировкаРодитель = ГруппировкаПоПериоду;	 
		КонецЕсли;
		
		Если Не ВариантФормирования = "ОбщийРасход" Тогда
			ГруппирокаПоРасходу = ГруппировкаРодитель.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			
			ПолеГруппировки                = ГруппирокаПоРасходу.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(ВариантФормирования);
			
			НовоеВыбранноеПоле = ГруппирокаПоРасходу.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			
			ГруппировкаРодитель = ГруппирокаПоРасходу;	 
			
		КонецЕсли;
		
		
		ГруппировкаПоТовару = ГруппировкаРодитель.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных")); 
		
		ПолеГруппировки                = ГруппировкаПоТовару.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		Если ВариантГруппировкиБлюд = "Только блюда без групп" Тогда
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		ИначеЕсли ВариантГруппировкиБлюд = "Только группы без блюд" Тогда
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
		ИначеЕсли ВариантГруппировкиБлюд = "Группы блюд и блюда" Тогда
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
		КонецЕсли;
		
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Товар");
		
		НовоеВыбранноеПоле = ГруппировкаПоТовару.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));  
		
		Если РасшифровыватьПоДокументам Тогда
			ГруппировкаПоЗаказу = ГруппировкаПоТовару.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ПолеГруппировки                = ГруппировкаПоЗаказу.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Использование  = Истина;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Заказ"); 
			НовоеВыбранноеПоле = ГруппировкаПоЗаказу.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных")); 
			
		КонецЕсли;
		
		ИмяПоляКомпоновкиДанныхПериод = Новый ПолеКомпоновкиДанных("Период");
		ИмяПоляКомпоновкиДанныхСмена = Новый ПолеКомпоновкиДанных("Смена");
		
		УстановитьПараметры();
		
		Для Каждого Порядок Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Порядок.Использование = Ложь;
		КонецЦикла;
		
		Для н=0 по 4 Цикл
			КомпоновщикНастроек.Настройки.Порядок.Элементы[н].Использование = Ложь;
		КонецЦикла;
		КомпоновщикНастроек.Настройки.Порядок.Элементы[Сортировка].Использование = Истина;
		
		Если ПоказыватьДиаграмму И ПараметрВыводаДиаграммы = 1 Тогда
			СформироватьДиаграмму();
		КонецЕсли;
		
		ФормированиеОтчетов.отчСформироватьОтчет(ЭтотОбъект, ТабличныйДокумент,,,ЭлементыФормы);
			
		МассивНаУдаление = Новый Массив;
		Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ЭлементОтбора.ЛевоеЗначение =ИмяПоляКомпоновкиДанныхПериод ИЛИ  
				ЭлементОтбора.ЛевоеЗначение =ИмяПоляКомпоновкиДанныхСмена Тогда
				
				МассивНаУдаление.Добавить(ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Элемент Из МассивНаУдаление Цикл
			КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(Элемент);
		КонецЦикла;	
		
		НастройкиОтчетаНаМоментФормирования = ПолучитьТекущиеНастройки();
	КонецПроцедуры
	
	// Формирует диаграмму.
	//
	Процедура СформироватьДиаграмму() Экспорт
		Диаграмма = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
		ВыбранноеПоле = Диаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Заголовок = "Количесиво (общий расход)";
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("КоличествоОбщийРасход");
		
		Серия = Диаграмма.Серии.Добавить();
		Серия.Использование = Истина;
		Поле = Серия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		Поле.Поле = Новый ПолеКомпоновкиДанных(?(ГруппироватьПоПериоду,ВидПериода, ?(ВариантФормирования ="ОбщийРасход", "Товар", ВариантФормирования) ));
		Поле.Использование = Истина;
		Поле.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		
		НовоеВыбранноеПоле = Серия.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		Параметр = Диаграмма.ПараметрыВывода.Элементы.Найти("ТипДиаграммы");
		Параметр.Значение = ТипДиаграммы;
		Параметр.Использование = Истина;
		
		Параметр2 = Диаграмма.ПараметрыВывода.Элементы.Найти("TitleOutput");
		Параметр2.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;
		Параметр2.Использование = Ложь;
		
		Параметр4 = Параметр.ЗначенияВложенныхПараметров.Найти("ТипДиаграммы.РасположениеЛегенды");
		Параметр4.Значение = РасположениеЛегендыДиаграммыКомпоновкиДанных.Низ;
		Параметр4.Использование = Истина;
		
	КонецПроцедуры	
	
	// Получает текущие настройки.
	//
	// Параметры:
	//	ИсключитьДату - флаг исключения даты.
	//
	// Возвращаемое значение:
	//	Структура настроек.
	//
	Функция ПолучитьТекущиеНастройки(ИсключитьДату = Ложь) Экспорт
		
		СтруктураНастроек = Новый Структура;
		
		СтруктураНастроек.Вставить("КраткийВидНастройки"       , КраткийВидНастройки);
		СтруктураНастроек.Вставить("НастройкиКомпоновкиДанных" , КомпоновщикНастроек.ПолучитьНастройки());
		
		Возврат СтруктураНастроек;
		
	КонецФункции
	
	// Загружает настройки.
	//
	// Параметры:
	//	Настройки - структура настроек.
	//
	Процедура ЗагрузитьНастройки(Настройки) Экспорт
		
		КраткийВидНастройки  = Настройки.КраткийВидНастройки;
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки.НастройкиКомпоновкиДанных);
		
	КонецПроцедуры
	
	// Печать отчета из Рабочего места.
	//
	Процедура ПечататьНаПринтере(Смена) 
		Текст1 = "ВЫБРАТЬ
		|	ЗаказТовары.Ссылка КАК Заказ,
		|	ЗаказТовары.Товар КАК Товар,
		|	0 КАК КоличествоСписать,
		|	0 КАК СуммаСписать,
		|	ЗаказТовары.Количество  КАК КоличествоОбщийРасход,
		|	ЗаказТовары.Цена КАК Цена,
		|	ЗаказТовары.Сумма КАК СуммаОбщийРасход,
		|	ЗаказТовары.Автор КАК АвторДозаказа,
		|	ЗаказТовары.Ссылка.Автор КАК Автор,
		|	ЗаказТовары.Ссылка.Смена,
		|	ЗаказТовары.Ссылка.МестоРеализации КАК МестоРеализации,
		|	ЗаказТовары.Ссылка.Клиент,
		|	ДЕНЬ(ЗаказТовары.Ссылка.Дата) КАК День,
		|	НЕДЕЛЯ(ЗаказТовары.Ссылка.Дата) КАК Неделя,
		|	МЕСЯЦ(ЗаказТовары.Ссылка.Дата) КАК Месяц,
		|	КВАРТАЛ(ЗаказТовары.Ссылка.Дата) КАК Квартал,
		|	ГОД(ЗаказТовары.Ссылка.Дата) КАК Год,
		|	ЗаказТовары.Ссылка.Дата КАК Период,
		|	ЗаказТовары.Товар.Категория КАК Категория,
		|	ЗаказТовары.Товар.ГруппаПечати КАК ГруппаПечати,
		|	0 КАК КоличествоВозврат,
		|	0 КАК СуммаВозврат,
		|	ЗаказТовары.Сумма КАК СуммаПродано,
		|	ЗаказТовары.Количество КАК КоличествоПродано
		|ИЗ
		|	Документ.Заказ.Товары КАК ЗаказТовары
		|ГДЕ
		|	ЗаказТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ЗаказТовары.Количество > 0
		|	И ВЫБОР
		|			КОГДА &ПараметрДата
		|				ТОГДА ЗаказТовары.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		|			ИНАЧЕ ЗаказТовары.Ссылка.Смена В (&МассивСмен)
		|		КОНЕЦ";
		
		
		Текст2 = "ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВозвратТовары.Ссылка,
		|	ВозвратТовары.Товар,
		|	0,
		|	0,
		|	-ВозвратТовары.Количество,
		|	ВозвратТовары.Сумма / ВозвратТовары.Количество,
		|	-ВозвратТовары.Сумма,
		|	ВозвратТовары.Ссылка.Автор,
		|	ВозвратТовары.Ссылка.Автор,
		|	ВозвратТовары.Ссылка.Смена,
		|	ВозвратТовары.Ссылка.МестоРеализации,
		|	ВозвратТовары.Ссылка.Заказ.Клиент,
		|	ДЕНЬ(ВозвратТовары.Ссылка.Дата),
		|	НЕДЕЛЯ(ВозвратТовары.Ссылка.Дата),
		|	МЕСЯЦ(ВозвратТовары.Ссылка.Дата),
		|	КВАРТАЛ(ВозвратТовары.Ссылка.Дата),
		|	ГОД(ВозвратТовары.Ссылка.Дата),
		|	ВозвратТовары.Ссылка.Дата,
		|	ВозвратТовары.Товар.Категория КАК Категория,
		|	ВозвратТовары.Товар.ГруппаПечати КАК ГруппаПечати,
		|	ВозвратТовары.Количество,
		|	ВозвратТовары.Сумма,
		|	0,
		|	0
		|ИЗ
		|	Документ.Возврат.Товары КАК ВозвратТовары
		|ГДЕ
		|	ВозвратТовары.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ВозвратТовары.Ссылка.Причина.Списание = ИСТИНА
		|	И ВЫБОР
		|			КОГДА &ПараметрДата
		|				ТОГДА ВозвратТовары.Ссылка.Дата МЕЖДУ &ДатаС И &ДатаПо
		|			ИНАЧЕ ВозвратТовары.Ссылка.Смена В (&МассивСмен)
		|		КОНЕЦ  ";
		
		Текст3 = "ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Удаление.Ссылка,
		|	Удаление.Товар,
		|	Удаление.Количество,
		|	Удаление.Сумма,
		|	Удаление.Количество,
		|	Удаление.Сумма / Удаление.Количество,
		|	Удаление.Сумма,
		|	Удаление.Автор,
		|	Удаление.Автор,
		|	Удаление.Смена,
		|	Удаление.МестоРеализации,
		|	Удаление.Заказ.Клиент,
		|	ДЕНЬ(Удаление.Дата),
		|	НЕДЕЛЯ(Удаление.Дата),
		|	МЕСЯЦ(Удаление.Дата),
		|	КВАРТАЛ(Удаление.Дата),
		|	ГОД(Удаление.Дата),
		|	Удаление.Дата,
		|	Удаление.Товар.Категория,
		|	Удаление.Товар.ГруппаПечати,
		|	0,
		|	0,
		|	0,
		|	0
		|ИЗ
		|	Документ.Удаление КАК Удаление
		|ГДЕ
		|	Удаление.Причина.Списание = ИСТИНА
		|	И Удаление.ПометкаУдаления = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА &ПараметрДата
		|				ТОГДА Удаление.Дата МЕЖДУ &ДатаС И &ДатаПо
		|			ИНАЧЕ Удаление.Смена В (&МассивСмен)
		|		КОНЕЦ ";
		
		МестоРеализации = глПараметрыРМ.МестоРеализации;
		
		Текст1 = Текст1 + " И ЗаказТовары.Ссылка.МестоРеализации = &МестоРеализации ";
		Текст2 = Текст2 + " И ВозвратТовары.Ссылка.МестоРеализации = &МестоРеализации ";
		Текст3 = Текст3 + " И Удаление.МестоРеализации = &МестоРеализации ";
		ТекстЗапроса = Текст1 + Текст2 + Текст3;
		
		Если Не ВариантФормирования = "ОбщийРасход" Тогда
			
			ТекстЗапроса = ТекстЗапроса + "ИТОГИ
			|СУММА(КоличествоОбщийРасход),
			|МАКСИМУМ(Цена),
			|СУММА(СуммаОбщийРасход)
			|ПО " + ВариантФормирования + ",
			|Товар";
			
		Иначе
			ТекстЗапроса = ТекстЗапроса + " ИТОГИ
			|СУММА(КоличествоОбщийРасход),
			|МАКСИМУМ(Цена),
			|СУММА(СуммаОбщийРасход)
			|ПО 		
			|Товар";
		КонецЕсли;
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
		Запрос.УстановитьПараметр("ПараметрДата", Истина);
		Запрос.УстановитьПараметр("ДатаС", Смена.Дата);
		Запрос.УстановитьПараметр("ДатаПо", ТекущаяДата());
		Запрос.УстановитьПараметр("МассивСмен", "");
		РезультатЗапроса = Запрос.Выполнить();
		
		Заголовок1 = "ОТЧЕТ ПО РАСХОДУ";
		Если ВариантФормирования = "ОбщийРасход" Тогда 
			Заголовок2 = "Общий расход"
		ИначеЕсли ВариантФормирования = "Категория" Тогда
			Заголовок2 = "по категориям"
		ИначеЕсли ВариантФормирования = "Автор" Тогда
			Заголовок2 = "по официантам"
		ИначеЕсли ВариантФормирования = "ГруппаПечати" Тогда
			Заголовок2 = "По группам печати"	
		КонецЕсли;
		
		ДлинаСтроки = ИнтерфейсРМ.ПРНДлинаСтроки(глПараметрыРМ.ПечатьОтчетовПринтер);
		ШиринаКолонок = Новый СписокЗначений;
		Если ДлинаСтроки=32 Тогда
			Шапка="Блюдо    Кол-во   Цена     Сумма";
			ШиринаКолонок.Добавить(8);
			ШиринаКолонок.Добавить(6);
			ШиринаКолонок.Добавить(8);
			ШиринаКолонок.Добавить(10);
		ИначеЕсли ДлинаСтроки=36 Тогда
			Шапка="Блюдо        Кол-во   Цена     Сумма";
			ШиринаКолонок.Добавить(12);
			ШиринаКолонок.Добавить(6);
			ШиринаКолонок.Добавить(8);
			ШиринаКолонок.Добавить(10);
		ИначеЕсли ДлинаСтроки=40 Тогда
			Шапка="Блюдо           Кол-во    Цена     Сумма";
			ШиринаКолонок.Добавить(16);
			ШиринаКолонок.Добавить(6);
			ШиринаКолонок.Добавить(8);
			ШиринаКолонок.Добавить(10);
		ИначеЕсли ДлинаСтроки=42 Тогда
			Шапка="Блюдо             Кол-во    Цена     Сумма";
			ШиринаКолонок.Добавить(18);
			ШиринаКолонок.Добавить(6);
			ШиринаКолонок.Добавить(8);
			ШиринаКолонок.Добавить(10);		
		ИначеЕсли ДлинаСтроки=44 Тогда
			Шапка="Блюдо              Кол-во      Цена       Сумма";
			ШиринаКолонок.Добавить(20);
			ШиринаКолонок.Добавить(6);
			ШиринаКолонок.Добавить(8);
			ШиринаКолонок.Добавить(10);
		Иначе //Если ДлинаСтроки=48 Тогда
			Шапка="Блюдо               Кол-во      Цена       Сумма";
			ШиринаКолонок.Добавить(20);
			ШиринаКолонок.Добавить(6);
			ШиринаКолонок.Добавить(10);
			ШиринаКолонок.Добавить(12);
		КонецЕсли;
		
		Задание = Новый ТаблицаЗначений;
		Задание.Колонки.Добавить("Данные");
		Задание.Колонки.Добавить("ТипДанных");
		Задание.Колонки.Добавить("Параметры");
		
		Выгрузка = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если Не ВариантФормирования = "ОбщийРасход" Тогда
			Выгрузка.Строки.Сортировать(ВариантФормирования);
		Иначе
			Выгрузка.Строки.Сортировать("Товар");
		КонецЕсли;
		
		Если ВариантФормирования = "ОбщийРасход" Тогда   
			Для Каждого Строка Из Выгрузка.Строки Цикл
				СформироватьСтроку(Строка.Товар.Наименование ,Строка.КоличествоОбщийРасход, Строка.Цена, Строка.СуммаОбщийРасход, Ложь);
			КонецЦикла;	
		Иначе
			Для Каждого Строка Из Выгрузка.Строки Цикл
				НоваяСтрока = Задание.Добавить();
				НоваяСтрока.Данные    = Врег(Строка[ВариантФормирования]);
				НоваяСтрока.ТипДанных = "Строка";
				НоваяСтрока.Параметры = "Жирный,Центр,ПереводСтроки";
				// сортировка по товару
				Строка.Строки.Сортировать("Товар");
				Для Каждого Строка2 Из Строка.Строки Цикл
					СформироватьСтроку(Строка2.Товар.Наименование ,Строка2.КоличествоОбщийРасход, Строка2.Цена, Строка2.СуммаОбщийРасход, Ложь);
				КонецЦикла;	
				НоваяСтрока = Задание.Добавить();
				НоваяСтрока.Данные    = "СтрЧерта";
				НоваяСтрока.ТипДанных = "Строка";
				НоваяСтрока.Параметры = "Центр,ПереводСтроки";
				
				СформироватьСтроку("ИТОГО:",   Строка.КоличествоОбщийРасход, ,Строка.СуммаОбщийРасход,	Истина); 
				
				НоваяСтрока = Задание.Добавить();
				НоваяСтрока.Данные    = "";
				НоваяСтрока.ТипДанных = "Строка";
				НоваяСтрока.Параметры = "ПереводСтроки";
			КонецЦикла;	
		КонецЕсли;	
		
		// итоговые суммы
		НоваяСтрока = Задание.Добавить(); 
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Центр,ПереводСтроки";
		
		СформироватьСтроку("ВСЕГО:",	Выгрузка.Строки.Итог("КоличествоОбщийРасход"), ,Выгрузка.Строки.Итог("СуммаОбщийРасход"),	Истина);
		
		НоваяСтрока = Задание.Добавить(); 
		НоваяСтрока.Данные    = "СтрЧерта";
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = "Центр,ПереводСтроки";
		
		
		ФормированиеОтчетов.ПечатьОтчетаРМ(Задание, Заголовок1, Заголовок2, Шапка);
		
	КонецПроцедуры
	
	// Формирование строки отчета на принтер.
	//
	Процедура СформироватьСтроку(Стр, Число1="", Число2="", Число3, Выделение) Экспорт
		
		Выделение=?(Выделение,"Жирный","НеЖирный");
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСправа(Стр, ШиринаКолонок[0].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число1,"ЧЦ="+ШиринаКолонок[1].Значение +"; ЧДЦ=2")), ШиринаКолонок[1].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число2,"ЧЦ="+ШиринаКолонок[2].Значение +"; ЧДЦ=2")), ШиринаКолонок[2].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",НеПереводСтроки";
		
		НоваяСтрока = Задание.Добавить();
		НоваяСтрока.Данные    = СтрДополнитьСлева(Строка(Формат(Число3,"ЧЦ="+ШиринаКолонок[3].Значение +"; ЧДЦ=2")), ШиринаКолонок[3].Значение);
		НоваяСтрока.ТипДанных = "Строка";
		НоваяСтрока.Параметры = Выделение+",ПереводСтроки";
		
	КонецПроцедуры
	
	ЭтотОбъект.СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаясхемаКомпоновкиДанных");
	
#КонецЕсли