
Процедура ВыполнитьОбновлениеПризнакаНаличия(ИмяСправочника, ФлагОшибки, Сообщать = Ложь) Экспорт
	ТекстЗапроса = ("ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.ЕстьВПродаже КАК ЕстьВПродаже,
	|	Товары.ЭтоГруппа КАК ЭтоГруппа,
	|	ДействующиеРасписанияСрезПоследних.Расписание КАК Расписание
	|ИЗ
	|	Справочник.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДействующиеРасписания.СрезПоследних(&ТекДата
	|		//, 
	|		//ИнформационнаяБазаГруппа В (&МассивГруппИБиИБ)
	|		) КАК ДействующиеРасписанияСрезПоследних
	|		ПО Товары.Ссылка = ДействующиеРасписанияСрезПоследних.Объект
	|ГДЕ
	|	НЕ Товары.ПометкаУдаления
	|	И Товары.ВариантНаличияВПродаже <> &Простой");
	Если Не Метаданные.Справочники[ИмяСправочника].Иерархический Или Метаданные.Справочники[ИмяСправочника].ИспользованиеПодчинения = Метаданные.СвойстваОбъектов.ИспользованиеПодчинения.Элементам Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары.ЭтоГруппа", "Ложь")
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Товары", ИмяСправочника);
	Запрос = Новый Запрос(ТекстЗапроса);
	//Запрос.УстановитьПараметр("МассивГруппИБиИБ", РегистрыСведений.СоставГруппИнформационныхБаз.МассивГруппИБиИБ(ПараметрыСеанса.ТекущаяИБ));
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаНаСервере());
	Запрос.УстановитьПараметр("Простой", Перечисления.ВариантыНаличияВПродаже.Простой);
	
	
	
	Рез = Запрос.Выполнить();
	КоличествоПозиций = Рез.Выгрузить().Количество();
	Выборка = Рез.Выбрать();
	Инд = 0;
	Пока Выборка.Следующий() Цикл
		
		Инд=Инд+1;
		Если Сообщать Тогда
			Структура = Новый Структура("Заголовок, Прогресс", ИмяСправочника, Инд/КоличествоПозиций*100);
			Сообщить(ЗначениеВСтрокуВнутр(Структура));
		КонецЕсли;
		ТекущееНаличиеВПродаже = ОпределитьНаличиеВпродаже(Выборка.Ссылка);
		Если Выборка.ЕстьВПродаже = ТекущееНаличиеВПродаже Или Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ЕстьВПродаже = ТекущееНаличиеВПродаже;
		Попытка
			СпрОбъект.ОбменДанными.Загрузка = Истина;
			СпрОбъект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
			ФлагОшибки = Истина;
		КонецПопытки;
				
	КонецЦикла;
	
КонецПроцедуры

// Проставляет ЕстьВПродаже в соответствии с текущим моментом времени
// Принудительно из Режима администратора или в интерфейсе администратора.
Процедура ОбновлениеПризнакаНаличияВПродаже(Сообщать = Ложь) Экспорт
	ФлагОшибки = Ложь;
	ВыполнитьОбновлениеПризнакаНаличия("Товары", ФлагОшибки, Сообщать);
	ВыполнитьОбновлениеПризнакаНаличия("Специфики", ФлагОшибки, Сообщать);	
	Если НЕ ФлагОшибки Тогда
		Константы.ДатаОбновленияПризнакаНаличияВПродаже.Установить(ТекущаяДата());
	КонецЕсли;
КонецПроцедуры


// ОпределитьНаличиеВпродаже
//
// Параметры:
//	Объект  - Строка,СправочникСсылка.Специфики,СправочникСсылка.КаталогиТоваров - объект, для которого определяется наличие в продаже
// 
// Возвращаемое значение:
//   Булево - объект доступен
//
Функция ОпределитьНаличиеВпродаже(пОбъект) Экспорт
	Если ТипЗнч(пОбъект) = Тип("СправочникСсылка.Товары") Тогда
		Объект = пОбъект;
	Иначе
		Объект = пОбъект;
	КонецЕсли;
	//:пОбъект = Справочники.Товары.ПустаяСсылка();
	
	
	//1. Проверяем расписание по ИБ
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ДействующиеРасписанияСрезПоследних.Расписание КАК Расписание
	|ИЗ
	|	РегистрСведений.ДействующиеРасписания.СрезПоследних(
	|			&ТекДата,
	|			Объект = &Объект
	|				И ИнформационнаяБазаГруппа = &ИБ) КАК ДействующиеРасписанияСрезПоследних");

	Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаНаСервере());
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("ИБ", ПараметрыСеанса.ТекущаяИБ);
	РЗ = Запрос.Выполнить();
	Если РЗ.Пустой() Тогда
		// нет расписания для текущей ИБ. Ищем по группам ИБ
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ДействующиеРасписанияСрезПоследних.Расписание КАК Расписание
		|ИЗ
		|	РегистрСведений.ДействующиеРасписания.СрезПоследних(&ТекДата, Объект = &Объект) КАК ДействующиеРасписанияСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставГруппИнформационныхБаз КАК СоставГруппИнформационныхБаз
		|		ПО ДействующиеРасписанияСрезПоследних.ИнформационнаяБазаГруппа = СоставГруппИнформационныхБаз.ИнформационнаяБаза
		|ГДЕ
		|	СоставГруппИнформационныхБаз.ИнформационнаяБаза = &ИБ");
		Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаНаСервере());
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.УстановитьПараметр("ИБ", ПараметрыСеанса.ТекущаяИБ);
		РЗ = Запрос.Выполнить();
		Если РЗ.Пустой() Тогда
			// нет расписания для групп ИБ. Ищем по всем ИБ
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ДействующиеРасписанияСрезПоследних.Расписание КАК Расписание
			|ИЗ
			|	РегистрСведений.ДействующиеРасписания.СрезПоследних(
			|			&ТекДата,
			|			Объект = &Объект
			|				И (ИнформационнаяБазаГруппа = НЕОПРЕДЕЛЕНО
			|					ИЛИ ИнформационнаяБазаГруппа = ЗНАЧЕНИЕ(Справочник.ГруппыИнформационныхБаз.ВсеИБ)
			|					ИЛИ ИнформационнаяБазаГруппа = ЗНАЧЕНИЕ(Справочник.ГруппыИнформационныхБаз.ПустаяСсылка))) КАК ДействующиеРасписанияСрезПоследних");
			Запрос.УстановитьПараметр("ТекДата", ТекущаяДатаНаСервере());
			Запрос.УстановитьПараметр("Объект", Объект);
			РЗ = Запрос.Выполнить();
			Если РЗ.Пустой() Тогда
				// нет расписания - значит объект есть в продаже (?) TODO
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Расписание = РЗ.Выгрузить()[0][0];
	Возврат РасписаниеДействует(Расписание);
КонецФункции

Функция РасписаниеДействует(Расписание) Экспорт
	Дата = ТекущаяДатаНаСервере();
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Расписание КАК Расписание
	|ПОМЕСТИТЬ Расписания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписания.Расписание КАК Расписание
	|ИЗ
	|	Расписания КАК Расписания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Расписания.ДниНедели КАК РасписанияДниНедели
	|		ПО Расписания.Расписание = РасписанияДниНедели.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Расписания.ПериодыАктивности КАК РасписанияПериодыАктивности
	|		ПО (РасписанияПериодыАктивности.Ссылка = Расписания.Расписание)
	|			И (РасписанияПериодыАктивности.ДеньНедели = РасписанияДниНедели.ДеньНедели
	|				ИЛИ РасписанияПериодыАктивности.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.ПустаяСсылка))
	|ГДЕ
	|	РасписанияДниНедели.ДеньНедели = &ДеньНедели
	|	И РасписанияДниНедели.Действует
	|	И &ТекущееВремя МЕЖДУ РасписанияПериодыАктивности.ВремяНач И РасписанияПериодыАктивности.ВремяКон");

	Запрос.УстановитьПараметр("Расписание", Расписание);
	Запрос.УстановитьПараметр("ДеньНедели", Перечисления.ДниНедели[ДеньНедели(Дата)-1]);	
	Запрос.УстановитьПараметр("ТекущееВремя", ВремяИзДаты(ТекущаяДата()));	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции



