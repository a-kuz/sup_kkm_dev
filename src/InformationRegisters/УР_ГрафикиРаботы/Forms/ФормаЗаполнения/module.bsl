Перем мДлинаСуток Экспорт; // Длина суток в секундах

// Обработчик нажатия на кнопку выбора периода
//
Процедура ВыбПериодНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	Если НастройкаПериода.Редактировать() Тогда
		НачПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода ГрафикРаботы.
//
Процедура ГрафикРаботыПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ВидОбработки.
//
Процедура ВидОбработкиПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

// Процедура устанавливает доступность элементов формы
//
Процедура УстановитьДоступность()
	
	ЭлементыФормы.ДатаОтсчета.Доступность = ГрафикРаботы.ТипГрафика = Перечисления.ТипыГрафиковРаботы.Сменный;
	ЭлементыФормы.ГрафикРаботы1.Доступность = ВидОбработки = 2;
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	УстановитьДоступность();
	
	Если НЕ ЗначениеЗаполнено(НачПериода) Тогда
		НачПериода = НачалоГода(ПолучитьРабочуюДату());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонПериода) Тогда
		КонПериода = КонецГода(ПолучитьРабочуюДату());
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия на кнопку Выполнить
//
Процедура ДействиеВыполнить(Кнопка)
	
	Заголовок = "Обработка графика работы";
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ГрафикРаботы) Тогда
		ТекстСообщения = "Не заполнен график работы.";
		СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачПериода) Тогда
		ТекстСообщения = "Заполните начало периода обработки.";
		СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонПериода) Тогда
		ТекстСообщения = "Заполните окончание периода обработки.";
		СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ВидОбработки = 1 Тогда
		
		АвтозаполнениеКалендаря(НачПериода, КонПериода, Отказ, Заголовок);
		
	ИначеЕсли ВидОбработки = 2 Тогда
		
		Если НЕ ЗначениеЗаполнено(ГрафикРаботы1) Тогда
			ТекстСообщения = "Не заполнен график работы, по шаблону которого должно происходить заполнение.";
			СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
			Возврат;
		КонецЕсли;
		
		АвтозаполнениеКалендаря(НачПериода, КонПериода, Отказ, Заголовок, ГрафикРаботы1);
		
	ИначеЕсли ВидОбработки = 3 Тогда
		
		НаборЗаписей = РегистрыСведений.УР_ГрафикиРаботы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГрафикРаботы.Установить(ГрафикРаботы);
		
		индДата = НачПериода;
		Пока индДата <= КонПериода Цикл
			НаборЗаписей.Отбор.Дата.Установить(индДата);
			НаборЗаписей.Записать();
			индДата = индДата + мДлинаСуток;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Сообщить("Обработка графика работы """ + ГрафикРаботы + """ успешно выполнена!");
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает соответствие День - Вид дня по производтсвенному календарю
//
Функция ПолучитьДниВПроизводственномКалендаре(ДатаНачалаИнтервала, ДатаОкончанияИнтервала) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаИнтервала", ДатаНачалаИнтервала);
	Запрос.УстановитьПараметр("ДатаОкончанияИнтервала", ДатаОкончанияИнтервала);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УР_ПроизводственныйКалендарь.ДатаКалендаря,
	|	УР_ПроизводственныйКалендарь.ВидДня
	|ИЗ
	|	РегистрСведений.УР_ПроизводственныйКалендарь КАК УР_ПроизводственныйКалендарь
	|ГДЕ
	|	УР_ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаНачалаИнтервала И &ДатаОкончанияИнтервала";
	
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеДней = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		СоответствиеДней.Вставить(Выборка.ДатаКалендаря,Выборка.ВидДня)
	КонецЦикла;
	
	Возврат СоответствиеДней;
	
КонецФункции

// заполняет календарь за определенный временной интервал
Процедура АвтозаполнениеКалендаря(ДатаНачалаИнтервала, ДатаОкончанияИнтервала, Отказ, Заголовок, ПоШаблонуИзГрафика = Неопределено) Экспорт
	
	ТекущийГод = НачалоГода(ДатаНачалаИнтервала);
	
	Если (ВидОбработки = 1 ИЛИ ВидОбработки = 2)
		И Год(ДатаНачалаИнтервала) <> Год(ДатаОкончанияИнтервала) Тогда
		ТекстСообщения = "График работ должен заполняться за период в рамках одного года!";
		СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	Если ДатаОкончанияИнтервала < ДатаОтсчета 
		И ГрафикРаботы.ТипГрафика = Перечисления.ТипыГрафиковРаботы.Сменный Тогда
		ТекстСообщения = "График работ не может быть заполнен на период, предшествующий указанной в нем дате отсчета!";
		СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	Если НЕ ПоШаблонуИзГрафика = Неопределено
		И НЕ ГрафикРаботы.ТипГрафика = ПоШаблонуИзГрафика.ТипГрафика Тогда
		ТекстСообщения = "Типы заполняемого графика работ, и графика работ, по шаблону которого происходит заполнение, должны совпадать!";
		СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.УР_ГрафикиРаботы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ГрафикРаботы.Установить(ГрафикРаботы);
	
	ДнейВИнтервале = (КонецДня(ДатаОкончанияИнтервала) - НачалоДня(ДатаНачалаИнтервала) + 1) / мДлинаСуток;
	
	Если УчитыватьВыходныеПоКалендарю Тогда
		Календарь = ПолучитьДниВПроизводственномКалендаре(ДатаНачалаИнтервала, ДатаОкончанияИнтервала); // это соответствие: дата - вид дня
		Если ДнейВИнтервале <> Календарь.Количество() Тогда
			Сообщить("Проверьте правильность заполнения производственного календаря на " + Формат(Год(ТекущийГод), "ЧГ=5") + " год", СтатусСообщения.Важное);
		КонецЕсли;
	КонецЕсли;
	
	// сначала очистим записи за указанный период
	индДата = ДатаНачалаИнтервала;
	Пока индДата <= ДатаОкончанияИнтервала Цикл
		НаборЗаписей.Отбор.Дата.Установить(индДата);
		НаборЗаписей.Записать();
		индДата = индДата + мДлинаСуток;
	КонецЦикла;
	
	НаборЗаписей.Отбор.Дата.Установить(, Ложь);
	НаборЗаписей.Прочитать();
	
	ЭтоПятидневка	= ГрафикРаботы.ТипГрафика = Перечисления.ТипыГрафиковРаботы.Пятидневка;
	ЭтоШестидневка	= ГрафикРаботы.ТипГрафика = Перечисления.ТипыГрафиковРаботы.Шестидневка;
	ЭтоСменныйГрафик= ГрафикРаботы.ТипГрафика = Перечисления.ТипыГрафиковРаботы.Сменный;
	
	ДатаНачалаЗаполнения = ДатаНачалаИнтервала;
	Если ПоШаблонуИзГрафика = Неопределено Тогда
		ШаблонГрафика = ГрафикРаботы.График;
	Иначе
		ШаблонГрафика = ПоШаблонуИзГрафика.График;
	КонецЕсли;
	
	Если ЭтоСменныйГрафик Тогда			
		
		КоличествоСтрокГрафика = ШаблонГрафика.Количество();
		
		ТекДата = Неопределено;
		
		// Определим первую строку графика, которая приходится на дату начала интервала
		Если ДатаОтсчета > ДатаНачалаЗаполнения Тогда
			ДатаНачалаЗаполнения = ДатаОтсчета;
		КонецЕсли;
		
		РазницаДней = (ДатаНачалаЗаполнения - ДатаОтсчета) / мДлинаСуток;
		СчСтрокГрафика = РазницаДней % КоличествоСтрокГрафика;
		
		индДата = ДатаНачалаЗаполнения;
		Пока индДата <= ДатаОкончанияИнтервала Цикл
			
			Если ПоШаблонуИзГрафика = Неопределено Тогда
				
			КонецЕсли;
			НайденнаяСтрока = ШаблонГрафика[СчСтрокГрафика];
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Дата = индДата;
			НоваяЗапись.ГрафикРаботы = ГрафикРаботы;
			НоваяЗапись.Смена = НайденнаяСтрока.Смена;
			НоваяЗапись.ВремяНачала = НайденнаяСтрока.ВремяНачала;
			НоваяЗапись.ВремяОкончания = НайденнаяСтрока.ВремяОкончания;
			НоваяЗапись.Длительность = (НайденнаяСтрока.Длительность - '00010101') / 3600;
			НоваяЗапись.НеоплачиваемоеВремя = (НайденнаяСтрока.НеоплачиваемоеВремя - '00010101') / 3600;
			
			индДата = индДата + мДлинаСуток;
			СчСтрокГрафика = СчСтрокГрафика + 1;
			СчСтрокГрафика = ?(КоличествоСтрокГрафика = СчСтрокГрафика, 0, СчСтрокГрафика);
		КонецЦикла;
		
	Иначе
		
		индДата = ДатаНачалаЗаполнения;
		Пока индДата <= ДатаОкончанияИнтервала Цикл
			
			ДеньНедели = ПолучитьДеньНедели(индДата);
			НайденнаяСтрока = ШаблонГрафика.Найти(ДеньНедели, "ДеньНедели");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				ЭтоВыходнойДеньКалендаря = Ложь;
				
				Если УчитыватьВыходныеПоКалендарю Тогда
					ВидДня = Календарь[индДата];
					ЭтоВыходнойДеньКалендаря = (ВидДня  = Перечисления.УР_ВидыДнейПроизводственногоКалендаря.Праздник
											ИЛИ ЭтоПятидневка И (ВидДня = Перечисления.УР_ВидыДнейПроизводственногоКалендаря.Суббота
											ИЛИ ВидДня = Перечисления.УР_ВидыДнейПроизводственногоКалендаря.Воскресенье)
											ИЛИ ЭтоШестидневка И ВидДня = Перечисления.УР_ВидыДнейПроизводственногоКалендаря.Воскресенье);
					
				КонецЕсли; 
				
				Если НЕ ЭтоВыходнойДеньКалендаря Тогда
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Дата				= индДата;
					НоваяЗапись.ГрафикРаботы		= ГрафикРаботы;
					НоваяЗапись.Смена				= НайденнаяСтрока.Смена;
					НоваяЗапись.ВремяНачала			= НайденнаяСтрока.ВремяНачала;
					НоваяЗапись.ВремяОкончания		= НайденнаяСтрока.ВремяОкончания;
					НоваяЗапись.Длительность		= (НайденнаяСтрока.Длительность - '00010101') / 3600;
					НоваяЗапись.НеоплачиваемоеВремя	= (НайденнаяСтрока.НеоплачиваемоеВремя - '00010101') / 3600;
				Иначе
					НоваяЗапись = НаборЗаписей.Добавить();
					НоваяЗапись.Дата			= индДата;
					НоваяЗапись.ГрафикРаботы	= ГрафикРаботы;
					НоваяЗапись.Смена			= ГрафикРаботы.СменаВыходной;
				КонецЕсли;
				
			КонецЕсли;
			
			индДата = индДата + мДлинаСуток;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Функция возвращает значение перечисления Дни недели, соответствующее передаваемой дате
//
Функция ПолучитьДеньНедели(ДатаДняНедели)
	
	НомерДняНедели = ДеньНедели(ДатаДняНедели);
	
	Если НомерДняНедели = 1 Тогда
		Возврат Перечисления.ДниНедели.Понедельник;
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат Перечисления.ДниНедели.Вторник;
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат Перечисления.ДниНедели.Среда;
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат Перечисления.ДниНедели.Четверг;
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат Перечисления.ДниНедели.Пятница;
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат Перечисления.ДниНедели.Суббота;
	Иначе
		Возврат Перечисления.ДниНедели.Воскресенье;
	КонецЕсли;
	
КонецФункции

мДлинаСуток = 86400; // в секундах

