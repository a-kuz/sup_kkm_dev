
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ ДЛЯ МЕХАНИЗМА ДОПОЛНИТЕЛЬНОЙ ИНФОРМАЦИИ

// Открывает переданный файл на диске с учетом типа файлов. Файлы, с которыми 
// может работать 1С:Предприятие открываются в 1С:Предприятии. Остальные файлы
// пытаются открыться зарегистрированным для них в системе приложением.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
Процедура ОткрытьФайлДополнительнойИнформации(ИмяКаталога, ИмяФайла)
	
	ПолноеИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, ИмяФайла);
	РасширениеФайла = Врег(РаботаСФайлами.ПолучитьРасширениеФайла(ИмяФайла));
	
	Если РасширениеФайла = "MXL" Тогда
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Прочитать(ПолноеИмяФайла);
		ТабличныйДокумент.Показать(ИмяФайла, Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4));
		
	ИначеЕсли РасширениеФайла = "TXT" Тогда
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
		ТекстовыйДокумент.Показать(ИмяФайла, Лев(ИмяФайла, СтрДлина(ИмяФайла) - 4));
		
	ИначеЕсли РасширениеФайла = "EPF" Тогда
		
		ВнешняяОбработка = ВнешниеОбработки.Создать(ПолноеИмяФайла);
		ВнешняяОбработка.ПолучитьФорму().Открыть();
		
	Иначе
		
		ЗапуститьПриложение(ПолноеИмяФайла);
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлДополнительнойИнформации()

// Формирует строку фильтра для диалога выбора картинки с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора картинки.
//
Функция ПолучитьФильтрИзображений() Экспорт
	
	Возврат "Все картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|" 
	+ "Формат bmp (*.bmp;*.dib;*.rle)|*.bmp;*.dib;*.rle|"
	+ "Формат jpeg (*.jpg;*.jpeg)|*.jpg;*.jpeg|"
	+ "Формат tiff (*.tif)|*.tif|"
	+ "Формат gif (*.gif)|*.gif|"
	+ "Формат png (*.png)|*.png|"
	+ "Формат icon (*.ico)|*.ico|"
	+ "Формат метафайл (*.wmf;*.emf)|*.wmf;*.emf|";
	
КонецФункции // ПолучитьФильтрИзображений()

// Сохраняет файл на диске.
//
// Параметры
//  Хранилище    – ХранилищеЗначения, которое содержит объект типа 
//                 ДвоичныеДанные с файлом для записи на диск.
//  ИмяФайла     – Строка, содержащая полное имя файла.
//  ТолькоЧтение – Булево, признак установки записываемому файлу атрибута ТолькоЧтение.
//  СпособПерезаписи – Строка. Параметр определяет способ перезаписи существующих
//                 файлов на диске. В зависимости от пришедшего параметра выдается или
//                 не выдается запрос на перезапись файлов. Может устанавливаться в теле
//                 функции, если это необходимо. Принимаемые значения:
//                 "" (пустая строка) - это означает, что диалог еще ни разу не задавался
//                 и при наличии существующего файла будет выдан диалог запроса перезаписи.
//                 ДА - предыдущий файл был перезаписан, но перезапись текущего надо 
//                 запросить снова
//                 НЕТ - предыдущий файл не был перезаписан, но перезапись текущего надо 
//                 запросить снова
//                 ДАДЛЯВСЕХ - предыдущий файл был перезаписан, и все последующие тоже 
//                 надо перезаписывать.
//                 НЕТДЛЯВСЕХ - предыдущий файл не был перезаписан, и все последующие тоже 
//                 не надо перезаписывать.
//
// Возвращаемое значение:
//   Булево – Истина, если каталог выбран, Ложь, если нет.
//
Функция СохранитьФайлНаДиске(Объект, ИмяФайла, ТолькоЧтение, СпособПерезаписи, ВопросОПерезаписи = Истина, ИмяСправочника = "ХранилищеДополнительнойИнформации")
	
	Попытка
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		КаталогНаДиске = Новый Файл(ФайлНаДиске.Путь);
		
		Если Не КаталогНаДиске.Существует() Тогда
			СоздатьКаталог(ФайлНаДиске.Путь);
		КонецЕсли;
		
		Если ФайлНаДиске.Существует() И ВопросОПерезаписи = Истина Тогда
			
			Если СпособПерезаписи = ""
				ИЛИ Врег(СпособПерезаписи) = "ДА"
				ИЛИ Врег(СпособПерезаписи) = "НЕТ" Тогда
				
				ФормаЗапросаПерезаписиФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаЗапросаПерезаписиФайлов");
				ФормаЗапросаПерезаписиФайлов.ТекстПредупреждения = 
				"На локальном диске уже существует файл:
				|" + ИмяФайла + "
				|Перезаписать имеющийся файл?";
				СпособПерезаписи = ФормаЗапросаПерезаписиФайлов.ОткрытьМодально();
				
				Если СпособПерезаписи = Неопределено
					ИЛИ Врег(СпособПерезаписи) = "НЕТ"
					ИЛИ Врег(СпособПерезаписи) = "НЕТДЛЯВСЕХ" Тогда
					Возврат Ложь;
				КонецЕсли;
				
			ИначеЕсли Врег(СпособПерезаписи) = "НЕТДЛЯВСЕХ" Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
			// Если существующему файлу установлено ТолькоЧтение, отменим эту установку.
			Если ФайлНаДиске.ПолучитьТолькоЧтение() Тогда
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		//Если это не внешние файлы 
		Если ТипЗнч(Объект) = Тип("Структура") И Объект.Свойство("НастройкиОтчета") Тогда
			
			ЗначениеВФайл(ИмяФайла, Объект.НастройкиОтчета);
			
		ИначеЕсли ПустаяСтрока(Объект.КаталогВнешнегоФайла) Тогда
			
			// Остались случаи когда:
			// - пользователь ответил Да или ДаДляВсех в текущем диалоге
			// - способ перезаписи уже пришел со значением ДаДляВсех		
			
			Если ТипЗнч(Объект.Хранилище) <> Тип("ДвоичныеДанные") Тогда
				ДвоичныеДанные = Объект.Хранилище.Получить();
			Иначе
				ДвоичныеДанные = Объект.Хранилище;
			КонецЕсли; 
			ДвоичныеДанные.Записать(ИмяФайла);			
			
		Иначе 
			// Создание внешнего файла в новом каталоге
			ПолноеИмяФайлаИсточника = РаботаСФайлами.ПолучитьИмяФайла(Объект.КаталогВнешнегоФайла,Объект.ИмяФайла);			
			ПолноеИмяФайлаПриемника = ИмяФайла; 
			
			// Создание файла в любом другом каталоге
			Если НЕ (ПолноеИмяФайлаИсточника = ПолноеИмяФайлаПриемника) Тогда 
				КопироватьФайл(ПолноеИмяФайлаИсточника,ПолноеИмяФайлаПриемника);
			КонецЕсли;			
			
		КонецЕсли;
		ФайлНаДиске.УстановитьТолькоЧтение(ТолькоЧтение);
		
	Исключение
		
		Предупреждение(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции // СохранитьФайлНаДиске()

// Проверяет возможность изменения расширения в имени файла. Выдает запрос пользователю
// на смену расширения.
//
// Параметры
//  ТекущееРасширение – Строка, содержащая текущее расширение файла, до изменения.
//  НовоеРасширение – Строка, содержащая новое расширение файла, после изменения.
//
// Возвращаемое значение:
//   Булево – Истина, если пользователь запретил изменение расширения, Ложь, если разрешил.
//
Функция НельзяИзменятьРасширение(ТекущееРасширение, НовоеРасширение) Экспорт
	
	Если Не ПустаяСтрока(ТекущееРасширение) И Не НовоеРасширение = ТекущееРасширение Тогда
		
		Ответ = Вопрос("Вы действительно хотите изменить расширение?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда      
			
			Возврат Ложь;
			
		Иначе
			
			Возврат Истина;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // НельзяИзменятьРасширение()

// Выбор файлов пользователем на диске и добавление их объекту.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//  ВидДанных    - ПеречислениеСсылка.ВидыДополнительнойИнформацииОбъектов содержащая вид
//                 дополнительной информации объекта.
//  ИмяСправочника - имя справочника, в котором создаются данные.
//
Процедура ДобавитьФайлы() Экспорт
	
	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Истина,,ПолучитьФильтрИзображений());
	
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ПолученноеИмяФайла Из Диалог.ВыбранныеФайлы Цикл
		
		ПолученныйФайл = Новый Файл(ПолученноеИмяФайла);
		Состояние("Добавляется файл: " + ПолученныйФайл.Имя);
		
		//НачатьТранзакцию();
		
		Отказ = Ложь;
		
		НовыйФайл = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
		НовыйФайл.Наименование = НовыйФайл.СформироватьНаименование(ПолученныйФайл.ПолноеИмя); 
		
		Попытка
			ВыбранноеФото = Новый Картинка(ПолученныйФайл.ПолноеИмя,Ложь);
			НовыйФайл.Хранилище = Новый ХранилищеЗначения(ВыбранноеФото, Новый СжатиеДанных());
			НовыйФайл.Записать();
		Исключение
			Предупреждение("Файл: " + ПолученныйФайл.ПолноеИмя + Символы.ПС + ОписаниеОшибки() + Символы.ПС + "Файл не добавлен.");
			Отказ = Истина;
		КонецПопытки;
		
		Если Отказ Тогда
			//ОтменитьТранзакцию();
		Иначе
			//ЗафиксироватьТранзакцию();
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьФайлы()

// Сохранение на диск отмеченных файлов объекта.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//  ВыделенныеСтроки - ВыделенныеСтроки табличного поля со справочником дополнительной
//                 информации.
//  ИмяКаталога    - имя каталога в котором происходит сохранение файлов.
//  ИмяСправочника - имя справочника, из которого извлекаются данные.
//
Процедура СохранитьФайлы(ОбъектФайла, ТекущийПользователь, ВыделенныеСтроки, ИмяКаталога = Неопределено, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСохраненияФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаСохраненияФайлов");
	ФормаСохраненияФайлов.ИмяКаталога    = ИмяКаталога;
	ФормаСохраненияФайлов.ТолькоЧтение   = Ложь;
	
	Если ИмяКаталога = Неопределено Тогда
		ИмяКаталога = РаботаСФайлами.ПолучитьИмяКаталога(ТекущийПользователь);
		ФормаСохраненияФайлов.ОткрытьКаталог = Истина;
	Иначе
		ФормаСохраненияФайлов.ОткрытьКаталог = Ложь;
	КонецЕсли; 
	
	СтруктураПараметров = ФормаСохраненияФайлов.ОткрытьМодально();
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСФайлами.ПроверитьСуществованиеКаталога(СтруктураПараметров.ИмяКаталога) Тогда
		Возврат;
	КонецЕсли;
	
	СпособПерезаписи = "";
	
	Для каждого СсылкаФайл из ВыделенныеСтроки Цикл
		
		Состояние("Сохраняется файл: " + СсылкаФайл.ИмяФайла);
		
		ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(СтруктураПараметров.ИмяКаталога, СсылкаФайл.ИмяФайла);
		СохранитьФайлНаДиске(СсылкаФайл, ИмяФайла, СтруктураПараметров.ТолькоЧтение, СпособПерезаписи);
		
		Если СпособПерезаписи = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если СтруктураПараметров.ОткрытьКаталог Тогда
		ЗапуститьПриложение(СтруктураПараметров.ИмяКаталога);
	КонецЕсли;
	
КонецПроцедуры // СохранитьФайлы()

// Открытие внешних файлов, указанных в ТП "ВнешниеФайлы" Справочника
// "ХранилищеДополнительнойИнформации".ФормаСпискаФайловИИзображений
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//  ВыделенныеСтроки - ВыделенныеСтроки табличного поля со справочником дополнительной
//                 информации.
//
Процедура ОткрытьВнешниеФайлы(ОбъектФайла, ВыделенныеСтроки = Неопределено) Экспорт
	
	Если ВыделенныеСтроки = Неопределено Тогда		
		
		ОткрытьФайлДополнительнойИнформации(ОбъектФайла.Ссылка.КаталогВнешнегоФайла,ОбъектФайла.ИмяФайла);
		
	Иначе		
		
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Для каждого СсылкаФайл из ВыделенныеСтроки Цикл
			
			ОткрытьФайлДополнительнойИнформации(СсылкаФайл.КаталогВнешнегоФайла, СсылкаФайл.ИмяФайла);
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

// Сохранение на диск отмеченных файлов объекта и их открытие.
//
// Параметры
//  ОбъектФайла  - Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//  ВыделенныеСтроки - ВыделенныеСтроки табличного поля со справочником дополнительной
//                 информации.
//  ВопросОПерезаписи - Истина - задавать вопрос о перезаписи, Ложь - вопроса не будет.
//
Процедура ОткрытьФайлы(ОбъектФайла, ТекущийПользователь, ВыделенныеСтроки = Неопределено, ВопросОПерезаписи = Истина) Экспорт
	
	Если ВыделенныеСтроки = Неопределено Тогда
		
		ИмяКаталога = РаботаСФайлами.ПолучитьИмяКаталога(ТекущийПользователь);
		ТолькоЧтение = Ложь;
		
		СпособПерезаписи = "";
		
		Состояние("Сохраняется файл: " + ОбъектФайла.ИмяФайла);
		
		ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, ОбъектФайла.ИмяФайла);
		СохранитьФайлНаДиске(ОбъектФайла, ИмяФайла, Ложь, СпособПерезаписи, ВопросОПерезаписи);
		
		Если СпособПерезаписи = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОткрытьФайлДополнительнойИнформации(ИмяКаталога, ОбъектФайла.ИмяФайла);
		
	Иначе
		
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяКаталога = РаботаСФайлами.ПолучитьИмяКаталога(ТекущийПользователь);
		ТолькоЧтение = Ложь;
		
		СпособПерезаписи = "";
		
		Для каждого СсылкаФайл из ВыделенныеСтроки Цикл
			
			Состояние("Сохраняется файл: " + СсылкаФайл.ИмяФайла);
			
			ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(ИмяКаталога, СсылкаФайл.ИмяФайла);
			СохранитьФайлНаДиске(СсылкаФайл, ИмяФайла, Ложь, СпособПерезаписи, ВопросОПерезаписи);
			
			Если СпособПерезаписи = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			ОткрытьФайлДополнительнойИнформации(ИмяКаталога, СсылкаФайл.ИмяФайла);
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры // ОткрытьФайлы()

// Получает индекс пиктограммы файла из коллекции пиктограмм в зависимости от расширения файла.
//
// Параметры
//  РасширениеФайла – Строка, содержащая расширение файла.
//
// Возвращаемое значение:
//   Число – индекс пиктограммы в коллекции.
//
Функция ПолучитьИндексПиктограммыФайла(РасширениеФайла) Экспорт
	
	РасширениеФайла = Врег(РасширениеФайла);
	
	Если Найти(",1CD,CF,CFU,DT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 1;
	ИначеЕсли "TXT" = РасширениеФайла Тогда
		Возврат 2;
	ИначеЕсли Найти(",BMP,DIB,RLE,JPG,JPEG,TIF,GIF,PNG,ICO,WMF,EMF,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 3;
	ИначеЕсли Найти(",HTM,HTML,MHT,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 4;
	ИначеЕсли "DOC" = РасширениеФайла Тогда
		Возврат 5;
	ИначеЕсли "XLS" = РасширениеФайла Тогда
		Возврат 6;
	ИначеЕсли "PPT" = РасширениеФайла Тогда
		Возврат 7;
	ИначеЕсли "MDB" = РасширениеФайла Тогда
		Возврат 8;
	ИначеЕсли Найти(",RAR,ZIP,ARJ,CAB,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 9;
	ИначеЕсли Найти(",EXE,COM,,", "," + РасширениеФайла + ",") > 0 Тогда
		Возврат 10;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьИндексПиктограммыФайла()

// Функция определяет, есть ли у объекта элементы в хранилище дополнительной информации
//
// Параметры
//  Объект         - СправочникСсылка, ДокументСсылка, объект для которого определяем наличие файлов.
//  ИмяСправочника - имя справочника, в котором содержится доп. информация.
//
// Возвращаемое значение:
//   Булево
//
Функция ЕстьДополнительнаяИнформация(Объект, ИмяСправочника = "ХранилищеДополнительнойИнформации")
	
	ЗначениеНайдено = Ложь;
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", Объект);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ХранилищеДополнительнойИнформации.Ссылка,
		|	ХранилищеДополнительнойИнформации.ЗначениеРазделенияДоступа,
		|	ХранилищеДополнительнойИнформации.Объект
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ХранилищеДополнительнойИнформации
		|ГДЕ
		|	ХранилищеДополнительнойИнформации.Объект = &Объект
		|";
		ЗначениеНайдено = НЕ Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат ЗначениеНайдено;
	
КонецФункции

// Изменяет картинку у кнопки открытия формы списка файлов и изображений.
//
// Параметры:
//  ОбъектФайла          - Ссылка на объект данных, для которого прикрепляются файлы.
//  КнопкаОткрытияФайлов - Кнопка тулбара, по нажатию которой открывается
//                         форма списка файлов и изображений.
//
Процедура ПолучитьКартинкуКнопкиОткрытияФайлов(ОбъектФайла, СписокКнопокОткрытияФайлов) Экспорт
	
	КартинкаКнопки = ?(ЕстьДополнительнаяИнформация(ОбъектФайла), БиблиотекаКартинок.ТолькоСкрепка, БиблиотекаКартинок.НевидимаяСкрепка);
	Для каждого КнопкаОткрытияФайлов Из СписокКнопокОткрытияФайлов Цикл
		КнопкаОткрытияФайлов.Значение.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		КнопкаОткрытияФайлов.Значение.Картинка    = КартинкаКнопки;
	КонецЦикла; 
	
КонецПроцедуры // ПолучитьКартинкуКнопкиОткрытияФайлов()

// Процедура открывает форму файлов и изображений по объекту отбора
//
// Параметры:
//  СтруктураДляСпискаИзображений - структура доп. информации для списка изображений.
//  СтруктураДляСпискаДополнительныхФайлов - структура доп. информации для дополнительных файлов.
//  СтруктураДляСпискаВнешнихФайлов - структура доп. информации для внешних файлов.
//  ОбязательныеОтборы - данные о дополнительных отборах.
//  ФормаВладелец      - форма-владелец.
//  ИмяСправочника     - имя справочника, в котором хранится доп. информация.
//
Процедура ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображений, СтруктураДляСпискаДополнительныхФайлов, СтруктураДляСпискаВнешнихФайлов, ОбязательныеОтборы, ФормаВладелец, ИмяСправочника = "ХранилищеДополнительнойИнформации") Экспорт
	
	ФормаФайлов = Справочники[ИмяСправочника].ПолучитьФорму("ФормаСпискаФайловИИзображений", ФормаВладелец);
	
	// Изображения
	Если СтруктураДляСпискаИзображений.Свойство("ОтборОбъектИспользование") Тогда
		ФормаФайлов.Изображения.Отбор.Объект.Использование = СтруктураДляСпискаИзображений.ОтборОбъектИспользование;
		ФормаФайлов.Изображения.Отбор.Объект.Значение      = СтруктураДляСпискаИзображений.ОтборОбъектЗначение;
	КонецЕсли;
	Если СтруктураДляСпискаИзображений.Свойство("ДоступностьОтбораОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность = СтруктураДляСпискаИзображений.ДоступностьОтбораОбъекта;
	КонецЕсли; 
	Если СтруктураДляСпискаИзображений.Свойство("ВидимостьКолонкиОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость = СтруктураДляСпискаИзображений.ВидимостьКолонкиОбъекта;
	КонецЕсли; 
	
	// Дополнительные файлы
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ОтборОбъектИспользование") Тогда
		ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектИспользование;
		ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение      = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектЗначение;
	КонецЕсли;
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ДоступностьОтбораОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = СтруктураДляСпискаДополнительныхФайлов.ДоступностьОтбораОбъекта;
	КонецЕсли; 
	Если СтруктураДляСпискаДополнительныхФайлов.Свойство("ВидимостьКолонкиОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость = СтруктураДляСпискаДополнительныхФайлов.ВидимостьКолонкиОбъекта;
	КонецЕсли; 
	
	// Внешние файлы
	Если СтруктураДляСпискаВнешнихФайлов.Свойство("ОтборОбъектИспользование") Тогда
		ФормаФайлов.ВнешнийФайл.Отбор.Объект.Использование = СтруктураДляСпискаВнешнихФайлов.ОтборОбъектИспользование;
		ФормаФайлов.ВнешнийФайл.Отбор.Объект.Значение      = СтруктураДляСпискаВнешнихФайлов.ОтборОбъектЗначение;
	КонецЕсли;
	Если СтруктураДляСпискаВнешнихФайлов.Свойство("ДоступностьОтбораОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.ВнешнийФайл.НастройкаОтбора.Объект.Доступность = СтруктураДляСпискаВнешнихФайлов.ДоступностьОтбораОбъекта;
	КонецЕсли; 
	Если СтруктураДляСпискаВнешнихФайлов.Свойство("ВидимостьКолонкиОбъекта") Тогда
		ФормаФайлов.ЭлементыФормы.ВнешнийФайл.Колонки.Объект.Видимость = СтруктураДляСпискаВнешнихФайлов.ВидимостьКолонкиОбъекта;
	КонецЕсли;   	
	
	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	Если СтруктураДляСпискаИзображений.Свойство("ОтборОбъектИспользование") И СтруктураДляСпискаИзображений.Свойство("ОтборОбъектИспользование") Тогда
		Если СтруктураДляСпискаИзображений.ОтборОбъектЗначение = СтруктураДляСпискаДополнительныхФайлов.ОтборОбъектЗначение Тогда
			ФормаФайлов.Заголовок = "Хранилище дополнительной информации (" + СокрЛП(Строка(СтруктураДляСпискаИзображений.ОтборОбъектЗначение)) + ")";
		КонецЕсли;
	КонецЕсли; 
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

// Открывает форму основного изображения объекта
//
// Параметры
//  ФормаВладелец       – Форма – определяет форму владельца открываемой формы.
//  ОсновноеИзображение – СправочникСсылка.ХранилищеДополнительнойИнформации – содержит 
//                        ссылку на основное изображение объекта.
//  ОбъектВладелец      - объект - владелец изображения.
//
Процедура ОткрытьФормуИзображения(ФормаВладелец, Изображение = Неопределено) Экспорт
	
	Если Изображение = Неопределено ИЛИ Изображение.Пустая() Тогда
		
		ФормаИзображения = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФормуВыбора(,ФормаВладелец); 
		ФормаИзображения.РежимВыбора = Истина;
		ФормаИзображения.Открыть();
		
	Иначе
		
		Список = Новый СписокЗначений;
		Список.Добавить("ИзменитьКартинку", "Изменить картинку",, БиблиотекаКартинок.ИзменитьЭлементСписка);
		Список.Добавить("Очистить",,, БиблиотекаКартинок.Очистить);
		Выбор = ФормаВладелец.ВыбратьИзМеню(Список, ФормаВладелец.ТекущийЭлемент);
		
		Если Выбор = Неопределено Тогда
			Возврат;
			
		ИначеЕсли Выбор.Значение = "ИзменитьКартинку" Тогда
			ФормаИзображения = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФормуВыбора(,ФормаВладелец); 
			ФормаИзображения.РежимВыбора = Истина;
			ФормаИзображения.ТекущаяСсылка = Изображение;
			ФормаИзображения.Открыть();	
			
		ИначеЕсли Выбор.Значение = "Очистить" Тогда
			Изображение = Справочники.ХранилищеДополнительнойИнформации.ПустаяСсылка();
			ФормаВладелец.ТекущийЭлемент.Картинка = Новый Картинка;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКартинкиПодгруппыСпецифик(ПодгруппаСпецифик) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодгруппаСпецифик", ПодгруппаСпецифик);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Специфики.Ссылка КАК Специфика
	|ПОМЕСТИТЬ втСпецифики
	|ИЗ
	|	Справочник.Специфики КАК Специфики
	|ГДЕ
	|	Специфики.Родитель = &ПодгруппаСпецифик
	|	И НЕ Специфики.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Картинки.ТипКартинки КАК ТипКартинки,
	|	Картинки.ХранилищеИзображения КАК ХранилищеИзображения
	|ПОМЕСТИТЬ втПоУмолчанию
	|ИЗ
	|	РегистрСведений.Картинки КАК Картинки
	|ГДЕ
	|	Картинки.Объект.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСпецифики.Специфика КАК Специфика,
	|	ЕСТЬNULL(Картинки.ХранилищеИзображения, втПоУмолчанию.ХранилищеИзображения) КАК КартинкаСпецифика
	|ПОМЕСТИТЬ втПодытог
	|ИЗ
	|	втСпецифики КАК втСпецифики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Картинки КАК Картинки
	|		ПО втСпецифики.Специфика = Картинки.Объект
	|			И (Картинки.ТипКартинки = ЗНАЧЕНИЕ(Справочник.ТипыКартинок.Специфика))
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоУмолчанию КАК втПоУмолчанию
	|		ПО (втПоУмолчанию.ТипКартинки = ЗНАЧЕНИЕ(Справочник.ТипыКартинок.Специфика))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПодытог.Специфика КАК Специфика,
	|	втПодытог.КартинкаСпецифика КАК КартинкаСпецифика,
	|	ЕСТЬNULL(Картинки.ХранилищеИзображения, втПоУмолчанию.ХранилищеИзображения) КАК КартинкаСпецификаБольшая
	|ИЗ
	|	втПодытог КАК втПодытог
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Картинки КАК Картинки
	|		ПО втПодытог.Специфика = Картинки.Объект
	|			И (Картинки.ТипКартинки = ЗНАЧЕНИЕ(Справочник.ТипыКартинок.СпецификаБольшая))
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоУмолчанию КАК втПоУмолчанию
	|		ПО (втПоУмолчанию.ТипКартинки = ЗНАЧЕНИЕ(Справочник.ТипыКартинок.СпецификаБольшая))";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

