

// Формирует отчет, созданный при использовании системы компоновки данных.
//
// Параметры:
//  ОтчетОбъект       - объект отчета.
//  ТабличныйДокумент - табличный документ, в который выводится отчет.
//  НомерГруппировкиДокументаДвижения - Если присутствует группировка по 
//  документу движения, то содержит номер этой группировки.
//
Процедура отчСформироватьОтчет(ОтчетОбъект, ТабличныйДокумент, НомерГруппировкиДокументДвижения = Неопределено, ВнешниеНаборыДанных = Неопределено,ЭлементыФормы = Неопределено) Экспорт
	
	ТабличныйДокумент.Очистить();
	
	Если ЕстьРеквизитОтчета("ПоказыватьДиаграмму", ОтчетОбъект.Метаданные()) Тогда
		ПоказыватьДиаграмму = ОтчетОбъект.ПоказыватьДиаграмму;
	Иначе
		ПоказыватьДиаграмму = Ложь;
	КонецЕсли; 
	
	//Макет = ОтчетОбъект.ПолучитьМакет("МакетОформленияКомпоновкиДанных");
	Макет = ПолучитьОбщийМакет("МакетОформленияКомпоновкиДанных");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, ОтчетОбъект.КомпоновщикНастроек.Настройки, ОтчетОбъект.ИнформацияРасшифровки, Макет);
	
	ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
 	ПроцессорКД.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборыДанных,ОтчетОбъект.ИнформацияРасшифровки, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;
	ПроцессорВывода.НачатьВывод();
	
	Если НомерГруппировкиДокументДвижения = Неопределено ИЛИ НомерГруппировкиДокументДвижения = 0 Тогда
		
		// Уберем фиксацию слева, если это некрасиво
		Если глВерсия > 1 Тогда
			Если ТипЗнч(ОтчетОбъект) = Тип("ОтчетОбъект.АнализВремениОбслуживания") Тогда
				ТаблицаЗафиксирована = Истина;
			Иначе
				ТаблицаЗафиксирована = Ложь;
			КонецЕсли;
		Иначе
			ТаблицаЗафиксирована = Ложь;
		КонецЕсли; 
		
		Пока Истина Цикл
			
			ОбработкаПрерыванияПользователя();
			
			СтрокаРезультата = ПроцессорКД.Следующий();
			
			Если СтрокаРезультата = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			Если НЕ ТаблицаЗафиксирована И НЕ ПоказыватьДиаграмму
				И СтрокаРезультата.ЗначенияПараметров.Количество() > 0  Тогда
				ТаблицаЗафиксирована = Истина;
				ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ВысотаТаблицы;
				ТабличныйДокумент.ФиксацияСлева  = 1;
			КонецЕсли;
			
			ПроцессорВывода.ВывестиЭлемент(СтрокаРезультата);
			
		КонецЦикла;
		
	Иначе
		
		ВывестиВТабличныйДокументСУчетомДокументаДвижения(ПроцессорВывода, ПроцессорКД, НомерГруппировкиДокументДвижения, ТабличныйДокумент);
		
	КонецЕсли;
	
	ПроцессорВывода.ЗакончитьВывод();
	
	ТабличныйДокумент.ВерхнийКолонтитул.Выводить = Истина;
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа = "Страница [&НомерСтраницы] из [&СтраницВсего]";
	
	ТабличныйДокумент.НижнийКолонтитул.Выводить = Истина;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа = ""+ТекущаяДата()+"  Пользователь: "+ПараметрыСеанса.ТекущийПользователь;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.АвтоМасштаб		 = Истина;
	
	Если ЗначениеЗаполнено(ЭлементыФормы) Тогда
		СгенерироватьКнопкиУправленияГруппировкой(ТабличныйДокумент,ЭлементыФормы);
	КонецЕсли;
	
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_"+ОтчетОбъект.Метаданные().Имя;

КонецПроцедуры

// Синхронизирует значения быстрого отбора с настройками компоновки данных.
//
// Параметры:
//  Объект      - объект, в котором производится синхронизация.
//  Индекс      - индекс быстрого отбора.
//  ФормаОтчета - форма отчета.
//  ИзменятьНастройки - Истина - происходит изменение в настройках компоновки данных 
//                               в соответствии с настройками быстрого отбора на форме,
//                      Ложь   - происходит изменение настроек быстрого отбора на форме 
//                               в соответствии с настройками компоновки данных.
//
Процедура СинхронизироватьБыстрыйОтборСНастройками(Объект, Индекс, ФормаОтчета, ИзменятьНастройки = Ложь) Экспорт
	
	МассивОдинаковыхОтборов = Новый Массив;
	
	ЭлементБыстрогоОтбора = Объект.МассивБыстрыхОтборов[Индекс - 1];
	
	Для Каждого ЭлементОтбора Из Объект.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		
		Если (ЭлементОтбора.Родитель <> Неопределено)ИЛИ(ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение = ЭлементБыстрогоОтбора.ЛевоеЗначение Тогда
			
			МассивОдинаковыхОтборов.Добавить(ЭлементОтбора);
			ИндексЭлементаОтбора = Объект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Индекс(ЭлементОтбора);
			
		КонецЕсли;
	КонецЦикла;
	
	ОформитьПоляОтбора(Индекс, ФормаОтчета);
	
	Если МассивОдинаковыхОтборов.Количество() = 0 Тогда
		
		Если ИзменятьНастройки Тогда
			НовыйЭлемент = Объект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ЛевоеЗначение = Объект.МассивБыстрыхОтборов[Индекс - 1].ЛевоеЗначение;
			ЭлементБыстрогоОтбора.Использование  = ?(ФормаОтчета.ЭлементыФормы["ФлажокИспользование"+Индекс].Значение = 1, Истина, Ложь);
			ЭлементБыстрогоОтбора.ПравоеЗначение = ФормаОтчета.ЭлементыФормы["ПолеВводаЗначение"+Индекс].Значение;
			ЭлементБыстрогоОтбора.ВидСравнения   = ФормаОтчета.ЭлементыФормы["ПолеВводаВидСравнения"+Индекс].Значение;
			НовыйЭлемент.Использование  = ЭлементБыстрогоОтбора.Использование;
			НовыйЭлемент.ПравоеЗначение = ЭлементБыстрогоОтбора.ПравоеЗначение;
			НовыйЭлемент.ВидСравнения   = ЭлементБыстрогоОтбора.ВидСравнения;
			
		Иначе
			// значение флажка - неопределено
			ПолеВводаВидСравнения = ФормаОтчета.ЭлементыФормы["ПолеВводаВидСравнения" + Индекс];
			ФормаОтчета.ЭлементыФормы["ФлажокИспользование"+Индекс].Значение = 2;
			ОформитьПоляОтбора(Индекс, ФормаОтчета, Истина);
			
			Если ПолеВводаВидСравнения.СписокВыбора.НайтиПоЗначению(ВидСравненияКомпоновкиДанных.Содержит) = Неопределено Тогда
				ПолеВводаВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Содержит, "Отбор введен вручную");
			КонецЕсли;

			ПолеВводаВидСравнения.Значение = ПолеВводаВидСравнения.СписокВыбора.НайтиПоЗначению(ВидСравненияКомпоновкиДанных.Содержит).Значение;
			
		КонецЕсли;
		
	ИначеЕсли МассивОдинаковыхОтборов.Количество() > 1 Тогда
		
		Если ИзменятьНастройки Тогда
			Для Каждого ЭлементОдинаковогоОтбора Из МассивОдинаковыхОтборов Цикл
				Объект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Удалить(ЭлементОдинаковогоОтбора);
			КонецЦикла;
			
			НовыйЭлемент = Объект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлемент.ЛевоеЗначение = Объект.МассивБыстрыхОтборов[Индекс - 1].ЛевоеЗначение;
			ЭлементБыстрогоОтбора.Использование  = ?(ФормаОтчета.ЭлементыФормы["ФлажокИспользование"+Индекс].Значение = 1, Истина, Ложь);
			ЭлементБыстрогоОтбора.ПравоеЗначение = ФормаОтчета.ЭлементыФормы["ПолеВводаЗначение"+Индекс].Значение;
			ЭлементБыстрогоОтбора.ВидСравнения   = ФормаОтчета.ЭлементыФормы["ПолеВводаВидСравнения"+Индекс].Значение;
			НовыйЭлемент.Использование  = ЭлементБыстрогоОтбора.Использование;
			НовыйЭлемент.ПравоеЗначение = ЭлементБыстрогоОтбора.ПравоеЗначение;
			НовыйЭлемент.ВидСравнения   = ЭлементБыстрогоОтбора.ВидСравнения;
			
		Иначе
			// значение флажка - неопределено
			ПолеВводаВидСравнения = ФормаОтчета.ЭлементыФормы["ПолеВводаВидСравнения" + Индекс];
			ФормаОтчета.ЭлементыФормы["ФлажокИспользование"+Индекс].Значение = 2;
			ОформитьПоляОтбора(Индекс, ФормаОтчета, Истина);
    			
			Если ПолеВводаВидСравнения.СписокВыбора.НайтиПоЗначению(ВидСравненияКомпоновкиДанных.Содержит) = Неопределено Тогда
				ПолеВводаВидСравнения.СписокВыбора.Добавить(ВидСравненияКомпоновкиДанных.Содержит, "Отбор введен вручную");
			КонецЕсли;

			ПолеВводаВидСравнения.Значение = ПолеВводаВидСравнения.СписокВыбора.НайтиПоЗначению(ВидСравненияКомпоновкиДанных.Содержит).Значение;
			
		КонецЕсли;
		
	Иначе		
		ЭлементОтбора = Объект.КомпоновщикНастроек.Настройки.Отбор.Элементы[ИндексЭлементаОтбора];
		Если ИзменятьНастройки Тогда
			ЭлементБыстрогоОтбора.Использование  = ?(ФормаОтчета.ЭлементыФормы["ФлажокИспользование"+Индекс].Значение = 1, Истина, Ложь);
			ЭлементБыстрогоОтбора.ПравоеЗначение = ФормаОтчета.ЭлементыФормы["ПолеВводаЗначение"+Индекс].Значение;
			ЭлементБыстрогоОтбора.ВидСравнения   = ФормаОтчета.ЭлементыФормы["ПолеВводаВидСравнения"+Индекс].Значение;
			ЭлементОтбора.Использование  = ЭлементБыстрогоОтбора.Использование;
			ЭлементОтбора.ПравоеЗначение = ЭлементБыстрогоОтбора.ПравоеЗначение;
			ЭлементОтбора.ВидСравнения   = ЭлементБыстрогоОтбора.ВидСравнения;
		Иначе
			ЭлементБыстрогоОтбора.Использование  = ЭлементОтбора.Использование;
			ЭлементБыстрогоОтбора.ПравоеЗначение = ЭлементОтбора.ПравоеЗначение;
			ЭлементБыстрогоОтбора.ВидСравнения   = ЭлементОтбора.ВидСравнения;
			ФормаОтчета.ЭлементыФормы["ФлажокИспользование"+Индекс].Значение = ?(ЭлементБыстрогоОтбора.Использование, 1, 0);
			ФормаОтчета.ЭлементыФормы["ПолеВводаВидСравнения"+Индекс].Значение = ЭлементБыстрогоОтбора.ВидСравнения;
			Если ((ЭлементБыстрогоОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке) ИЛИ
				 (ЭлементБыстрогоОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии))
				 И(ЭлементБыстрогоОтбора.ПравоеЗначение = Неопределено) Тогда
				ФормаОтчета.ЭлементыФормы["ПолеВводаЗначение"+Индекс].Значение.Очистить();
			Иначе
				ФормаОтчета.ЭлементыФормы["ПолеВводаЗначение"+Индекс].Значение = ЭлементБыстрогоОтбора.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Оформляет выбранный элемент на форме.
//
// Параметры:
//  Индекс    - индекс быстрого отбора.
//  Форма     - форма отчета.
//  Выделение - признак выделения жирным шрифтом.
//
Процедура ОформитьПоляОтбора(Индекс, Форма, Выделение = Ложь)
	
	Если Выделение Тогда
		Форма.ЭлементыФормы["ПолеВводаВидСравнения" + Индекс].Шрифт = Новый Шрифт(Форма.ЭлементыФормы["ПолеВводаВидСравнения" + Индекс].Шрифт,,,Истина);
	Иначе
		Форма.ЭлементыФормы["ПолеВводаВидСравнения" + Индекс].Шрифт = Новый Шрифт(Форма.ЭлементыФормы["ПолеВводаВидСравнения" + Индекс].Шрифт,,,Ложь);
	КонецЕсли;
	
КонецПроцедуры

// кнопки группировок
Процедура СгенерироватьКнопкиУправленияГруппировкой(ТабличныйДокумент,ЭлементыФормы) Экспорт
	НачалоВерх = ТабличныйДокумент.Верх + 3; // Привязка к верхнему левому углу ПоляТабличногоДокумента
    НачалоЛево = ТабличныйДокумент.Лево + 3; // Привязка к верхнему левому углу ПоляТабличногоДокумента

    ШагКнопок      = 13;
    ПрефиксИмениКн = "КнГр_";

    // Удалить старые кнопки
    Сч = 0;
    Пока Сч < ЭлементыФормы.Количество() Цикл
        ТекЭлемент = ЭлементыФормы.Получить(Сч);
        Если Найти(ТекЭлемент.Имя, ПрефиксИмениКн) > 0 Тогда
            ЭлементыФормы.Удалить(ТекЭлемент);
        Иначе
            Сч = Сч + 1;
        КонецЕсли;
    КонецЦикла;

    // Добавть новые кнопки по количеству группировок
    КоличествоГруппировок = ТабличныйДокумент.КоличествоУровнейГруппировокСтрок();
    Для Сч = 1 По КоличествоГруппировок Цикл
        НоваяКнопка = ЭлементыФормы.Добавить(Тип("Кнопка"), ПрефиксИмениКн + Сч);
        НоваяКнопка.Верх      = НачалоВерх;
        НоваяКнопка.Лево      = НачалоЛево + (ШагКнопок * (Сч - 1));
        НоваяКнопка.Высота    = 11;
        НоваяКнопка.Ширина    = 11;
        НоваяКнопка.Шрифт     = Новый Шрифт("Шрифт диалогов и меню", 6);
        НоваяКнопка.Заголовок = "" + Сч;
		Если Сч = 1 Тогда
			НоваяКнопка.Подсказка = "Показать группировки верхнего уровня";
		ИначеЕсли Сч = КоличествоГруппировок Тогда
			НоваяКнопка.Подсказка = "Показать все группировки";
		Иначе
			НоваяКнопка.Подсказка = "Показать группировки до уровня " + Сч;
		КонецЕсли; 
		
		Попытка
			НоваяКнопка.УстановитьДействие("Нажатие", Новый Действие("КоманднаяПанельФормыБыстрыеОтборы"));
		Исключение
		КонецПопытки; 
	КонецЦикла;

КонецПроцедуры //СгенерироватьКнопкиУправленияГруппировкой()

// Вызывется при нажатии кнопочек "1", "2" и т.д. (для сворачивания группировок)
Процедура УправлениеОтображениемЭлементовФормы(Форма, КнопкаИмя = Неопределено) Экспорт
	Уровень = Число(КнопкаИмя.Заголовок); // здесь записан нужный уровень
    Форма.ЭлементыФормы.Результат.ПоказатьУровеньГруппировокСтрок(Уровень - 1);
КонецПроцедуры

// Выводит отчет, выполняя обработку вывода группировки документа-движения.
//
// Параметры:
//  ПроцессорВывода - процессор вывода результата компоновки данных в табличный документ.
//  ПроцессорКД     - процессор компоновки данных.
//  НомерГруппировкиДокументаДвижения - число. Если присутствует группировка по документу движения, 
//  то содержит номер этой группировки.
//
Процедура ВывестиВТабличныйДокументСУчетомДокументаДвижения(ПроцессорВывода, ПроцессорКД, НомерГруппировкиДокументаДвижения, ТабличныйДокумент) 
	
	НомерГруппировкиСтрока = 0;
	
	Состояние = "";
	
	НеВыводитьСтроки = Ложь;
	НачатаНоваяСтрока = Ложь;
	
	ТаблицаЗафиксирована = Ложь;
	
	Пока Истина Цикл
		
		ОбработкаПрерыванияПользователя();
		
		СтрокаРезультата = ПроцессорКД.Следующий();
		
		Если СтрокаРезультата = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Расположение= СтрокаРезультата.РасположениеВложенныхЭлементов;
		ТипЭлемента = СтрокаРезультата.ТипЭлемента;
		
		Если Расположение = РасположениеВложенныхЭлементовРезультатаКомпоновкиДанных.Вертикально
			И ТипЭлемента = ТипЭлементаРезультатаКомпоновкиДанных.Начало Тогда
			
			Префикс = "Верт";
			
			Если Найти(Состояние, Префикс + Строка(НомерГруппировкиСтрока) + "Группировка, ") > 0
				И Найти(Состояние, Префикс + Строка(НомерГруппировкиСтрока) + "ВыводГруппировки, ") = 0 Тогда
				Состояние = Состояние + Префикс + Строка(НомерГруппировкиСтрока) + "ВыводГруппировки, ";
				
			ИначеЕсли Найти(Состояние, Префикс + "ВыводТаблицыОтчета, ") > 0 Тогда
				НомерГруппировкиСтрока = НомерГруппировкиСтрока + 1;
				Состояние = Состояние + Префикс + Строка(НомерГруппировкиСтрока) + "Группировка, ";
				
			ИначеЕсли Найти(Состояние, Префикс + "ВыводШапкиОтчета, ") > 0 Тогда
				Состояние = Состояние + Префикс + "ВыводТаблицыОтчета, ";
				
			ИначеЕсли Найти(Состояние, Префикс + "ВыводОтчета, ") > 0 Тогда
				Состояние = Состояние + Префикс + "ВыводШапкиОтчета, ";
				
			ИначеЕсли Состояние = "" Тогда
				Состояние = Состояние + Префикс + "ВыводОтчета, ";
				
			КонецЕсли;
			
		ИначеЕсли Расположение = РасположениеВложенныхЭлементовРезультатаКомпоновкиДанных.Вертикально
			И ТипЭлемента = ТипЭлементаРезультатаКомпоновкиДанных.Конец Тогда
			
			Префикс = "Верт";
			
			Если Найти(Состояние, Префикс + Строка(НомерГруппировкиСтрока) + "ВыводГруппировки, ") > 0 Тогда
				Состояние = СтрЗаменить(Состояние, Префикс + Строка(НомерГруппировкиСтрока) + "ВыводГруппировки, ", "");
				
			ИначеЕсли Найти(Состояние, Префикс + Строка(НомерГруппировкиСтрока) + "Группировка, ") > 0 Тогда
				Состояние = СтрЗаменить(Состояние, Префикс + Строка(НомерГруппировкиСтрока) + "Группировка, ", "");
				НомерГруппировкиСтрока = НомерГруппировкиСтрока - 1;
				
			ИначеЕсли Найти(Состояние, Префикс + "ВыводТаблицыОтчета, ") > 0 Тогда
				Состояние = СтрЗаменить(Состояние, Префикс + "ВыводТаблицыОтчета, ", "");
				
			ИначеЕсли Найти(Состояние, Префикс + "ВыводШапкиОтчета, ") > 0 Тогда
				Состояние = СтрЗаменить(Состояние, Префикс + "ВыводШапкиОтчета, ", "");
				
			ИначеЕсли Найти(Состояние, Префикс + "ВыводОтчета, ") > 0 Тогда
				Состояние = "";
				
			КонецЕсли;
			
			Если НомерГруппировкиДокументаДвижения = НомерГруппировкиСтрока 
				И НомерГруппировкиДокументаДвижения <> 0 Тогда
				
				НеВыводитьСтроки = Ложь;
				НачатаНоваяСтрока = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Расположение = РасположениеВложенныхЭлементовРезультатаКомпоновкиДанных.Горизонтально
			И ТипЭлемента = ТипЭлементаРезультатаКомпоновкиДанных.НачалоИКонец Тогда
			
			ВсеПараметрыЗаполнены = Истина;
			
			Если НЕ НеВыводитьСтроки Тогда
				
				Если НомерГруппировкиДокументаДвижения = НомерГруппировкиСтрока
					И НомерГруппировкиДокументаДвижения <> 0 
					И НЕ НачатаНоваяСтрока Тогда
					
					Для Каждого ЗначениеПараметра Из СтрокаРезультата.ЗначенияПараметров Цикл
						
						Если (ТипЗнч(ЗначениеПараметра.Значение) = Тип("Строка")
							И ПустаяСтрока(ЗначениеПараметра.Значение))
							ИЛИ ЗначениеПараметра.Значение = NULL Тогда
							
							ВсеПараметрыЗаполнены = Ложь;
							Прервать;         							
						КонецЕсли;            						
					КонецЦикла; 
					
					НачатаНоваяСтрока = Истина;
					
				КонецЕсли;
				
			Иначе      				
				ВсеПараметрыЗаполнены = Ложь;				
			КонецЕсли;
			
			Если НомерГруппировкиДокументаДвижения = НомерГруппировкиСтрока 
				И НомерГруппировкиДокументаДвижения <> 0 
				И НЕ ВсеПараметрыЗаполнены Тогда
				
				НеВыводитьСтроки = Истина; 				
			КонецЕсли;
			
			Если НеВыводитьСтроки Тогда    				
				Продолжить;                				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ТаблицаЗафиксирована 
			И СтрокаРезультата.ЗначенияПараметров.Количество() > 0  Тогда
			ТаблицаЗафиксирована = Истина;
			ТабличныйДокумент.ФиксацияСверху = ТабличныйДокумент.ВысотаТаблицы;
			ТабличныйДокумент.ФиксацияСлева  = 1;
		КонецЕсли;
		
		ПроцессорВывода.ВывестиЭлемент(СтрокаРезультата);
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиВТабличныйДокументСУчетомДокументаДвижения()

// Заполняет табличные поля переменных и значений отборов.
//
// Параметры:
//  ОтчетОбъект     - объект отчета.
//  ФормаНастроек   - форма настроек отчета.
//  СтруктураДанных - структура содержит данные о полях краткого вида.
//
Процедура ЗаполнитьТабличныеПоляОтборовКраткогоВида(ОтчетОбъект, ФормаНастроек, СтруктураДанных) Экспорт
	
	СтруктураДанных.Вставить("ВидПоля", "ВидыОтбора");
	ЗаполнитьТабличноеПолеКраткогоВида(ОтчетОбъект, ФормаНастроек, СтруктураДанных);
	
КонецПроцедуры

// Заполняет табличное поле краткого вида.
//
Процедура ЗаполнитьТабличноеПолеКраткогоВида(ОтчетОбъект, ФормаНастроек, СтруктураДанныхДляЗаполнения, МассивДобавленныхПолей = Неопределено)
	
	Если СтруктураДанныхДляЗаполнения.Свойство("ВидПоля") Тогда
		ВидПоля = СтруктураДанныхДляЗаполнения.ВидПоля;
	Иначе
		Возврат;
	КонецЕсли;
	
	ТабличноеПоле = ФормаНастроек.ЭлементыФормы["ТабличноеПоле"+ВидПоля];
	ТабличноеПоле.Значение.Очистить();
	
	Если ВидПоля = "ВидыОтбора" Тогда
		
		Если СтруктураДанныхДляЗаполнения.Свойство("СоответствиеОтборов") Тогда
			СоответствиеОтборов = СтруктураДанныхДляЗаполнения.СоответствиеОтборов;
		Иначе
			Возврат;
		КонецЕсли;
		
		Для Каждого ЭлементОтбора Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			
			Если (ЭлементОтбора.Родитель <> Неопределено)ИЛИ(ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ЭлементОтбора.ЛевоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			НайденноеПоле = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ЭлементОтбора.ЛевоеЗначение);
			
			НоваяСтрока = ТабличноеПоле.Значение.Добавить();
			НоваяСтрока.Пометка = ЭлементОтбора.Использование;
			
			ВидОтбора = ?(ПустаяСтрока(НайденноеПоле.Заголовок), Строка(НайденноеПоле.Поле), НайденноеПоле.Заголовок);
			ВидОтбора = Прав(ВидОтбора, СтрДлина(ВидОтбора) - Найти(ВидОтбора, "."));
			
			НоваяСтрока.ВидОтбора = ВидОтбора;
			НоваяСтрока.ПолеКомпоновкиДанных = ЭлементОтбора.ЛевоеЗначение;
			Если (ЭлементОтбора.ПравоеЗначение = Неопределено
				ИЛИ ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Число"))
				И НЕ (Строка(ЭлементОтбора.ЛевоеЗначение) = "ДниНедели")
				И НЕ (Строка(ЭлементОтбора.ЛевоеЗначение) = "Час") Тогда
				
					НоваяСтрока.ЗначениеОтбора.ТипЗначения = НайденноеПоле.Тип;
				
				
			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") 
				И НЕ (Строка(ЭлементОтбора.ЛевоеЗначение) = "ДниНедели")
				И НЕ (Строка(ЭлементОтбора.ЛевоеЗначение) = "Час") Тогда
				НоваяСтрока.ЗначениеОтбора.ТипЗначения = Новый ОписаниеТипов(ЭлементОтбора.ПравоеЗначение.ТипЗначения);
				НоваяСтрока.ЗначениеОтбора.ЗагрузитьЗначения(ЭлементОтбора.ПравоеЗначение.ВыгрузитьЗначения());
			ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "ДниНедели" Тогда // для группировки по дням недели
				НоваяСтрока.ЗначениеОтбора = Новый СписокЗначений;
				ИнтерфейсАдмина.ЗаполнитьСписокДнейНедели(НоваяСтрока.ЗначениеОтбора, ОтчетОбъект.мЧислоКогдаВПродаже);
			ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "Час" Тогда // для группировки по Часам
				НоваяСтрока.ЗначениеОтбора = Новый СписокЗначений;
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("ПеречислениеСсылка.Часы"));
				НоваяСтрока.ЗначениеОтбора.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Число") Тогда
					НоваяСтрока.ЗначениеОтбора.Добавить(Перечисления.Часы.Получить(ЭлементОтбора.ПравоеЗначение));
				ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
					Для каждого Элемент Из ЭлементОтбора.ПравоеЗначение Цикл
						НоваяСтрока.ЗначениеОтбора.Добавить(Перечисления.Часы.Получить(Элемент.Значение));
					КонецЦикла;
				КонецЕсли;
			Иначе
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ЭлементОтбора.ПравоеЗначение));
				НоваяСтрока.ЗначениеОтбора.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
				НоваяСтрока.ЗначениеОтбора.ТипЗначения = Новый ОписаниеТипов(НайденноеПоле.Тип);
				Если (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно)
					И (ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)) Тогда
					НоваяСтрока.ЗначениеОтбора.Добавить(ЭлементОтбора.ПравоеЗначение);
				// В случае вида сравнения в группе добавим группу.	
				ИначеЕсли (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии)
					И (ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение))
					И (ЭлементОтбора.ПравоеЗначение.ЭтоГруппа) ТОгда
					НоваяСтрока.ЗначениеОтбора.Добавить(ЭлементОтбора.ПравоеЗначение);
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.ПодборЗначения = НоваяСтрока.ЗначениеОтбора.ТипЗначения.ПривестиЗначение();
			
			УправлениеАктуальностьюОтборов(ФормаНастроек);
			
		КонецЦикла;
		
		// заполним отборы, которые не вошли в уже существующие отборы.
		Для Каждого ТекущееСоответствие Из СоответствиеОтборов Цикл
			НайденноеПоле = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ТекущееСоответствие.Ключ);
			Если НайденноеПоле <> Неопределено Тогда
				Если ТабличноеПоле.Значение.Найти(ТекущееСоответствие.Ключ, "ПолеКомпоновкиДанных") = Неопределено Тогда
					НоваяСтрока = ТабличноеПоле.Значение.Добавить();
					НоваяСтрока.Пометка = Ложь;
					
					ВидОтбора = ?(ПустаяСтрока(НайденноеПоле.Заголовок), Строка(НайденноеПоле.Поле), НайденноеПоле.Заголовок);
					ВидОтбора = Прав(ВидОтбора, СтрДлина(ВидОтбора) - Найти(ВидОтбора, "."));
					
					НоваяСтрока.ВидОтбора = ВидОтбора;
					НоваяСтрока.ПолеКомпоновкиДанных = ТекущееСоответствие.Ключ;
					НоваяСтрока.ЗначениеОтбора.ТипЗначения = НайденноеПоле.Тип;
					НоваяСтрока.ПодборЗначения = НоваяСтрока.ЗначениеОтбора.ТипЗначения.ПривестиЗначение();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет добавление необходимых значений отбора из документа
//
// Параметры:
//  ФормаНастроек  - форма настроек отчета.
//  ЗначениеВыбора - значение, которое было выбрано при подборе.
//
Процедура ОбработкаВыбораЗначенияВКраткомВиде(ФормаНастроек, ЗначениеВыбора, ПодборИзДокумента) Экспорт
	
	ТаблицаЗначенийОтбора = ФормаНастроек.ЭлементыФормы["ТабличноеПолеЗначенияОтбора"].Значение;
	Значение = ?(ТипЗнч(ЗначениеВыбора) = Тип("Массив"), ЗначениеВыбора[0], ЗначениеВыбора);
	
	Если ПодборИзДокумента Тогда
		
		ТипВидаОтбора = ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].ТекущиеДанные.ЗначениеОтбора.ТипЗначения;
		
		Для Каждого ТабличнаяЧасть Из Значение.Метаданные().ТабличныеЧасти Цикл
			
			// поиск соответствующего реквизита табличной части
			НайденныйРеквизит = Неопределено;
			Для Каждого РеквизитТЧ Из ТабличнаяЧасть.Реквизиты Цикл
				
				Если ТипВидаОтбора.СодержитТип(РеквизитТЧ.Тип.Типы().Получить(0))Тогда
					НайденныйРеквизит = РеквизитТЧ;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НайденныйРеквизит = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// добавляем нужные строки, исключая дубли
			Для Каждого СтрокаТЧ Из Значение[ТабличнаяЧасть.Имя] Цикл
				
				Если ТаблицаЗначенийОтбора.Найти(СтрокаТЧ[НайденныйРеквизит.Имя], "ЗначенияОтбора") = Неопределено Тогда
					НоваяСтрока = ТаблицаЗначенийОтбора.Добавить();
					НоваяСтрока.ЗначенияОтбора = СтрокаТЧ[НайденныйРеквизит.Имя];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли (Лев(Строка(ТипЗнч(Значение)), 10) = "Справочник")
		ИЛИ (Лев(Строка(ТипЗнч(Значение)), 8) = "Документ") Тогда
		
		Если ТаблицаЗначенийОтбора.Найти(Значение, "ЗначенияОтбора") = Неопределено Тогда
			НоваяСтрока = ТаблицаЗначенийОтбора.Добавить();
			НоваяСтрока.ЗначенияОтбора = Значение;
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьЗначенияОтборов(ФормаНастроек);
	
КонецПроцедуры

// Управляет содержимым видов отбора.
//
// Параметры:
//  ФормаНастроек   - форма настроек отчета.
//  ИзменятьПометку - флаг, указывающий на изменение пометки в табличном поле ТабличноеПолеВидыОтбора.
//
Процедура ОбновитьЗначенияОтборов(ФормаНастроек, ИзменятьПометку = Истина) Экспорт
	
	ТекущиеДанные = ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.ЗначениеОтбора.ЗагрузитьЗначения(ФормаНастроек.ЭлементыФормы["ТабличноеПолеЗначенияОтбора"].Значение.ВыгрузитьКолонку("ЗначенияОтбора"));
		
		Если ИзменятьПометку Тогда
			ТекущиеДанные.Пометка = Истина;
			УправлениеАктуальностьюОтборов(ФормаНастроек);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Осуществляет подбор в таблицу значений отбора.
//
// Параметры:
//  ФормаНастроек      - форма настроек отчета.
//  МножественныйВыбор - флаг, указывающий на необходимость множественного выбора при подборе значений.
//  ПодборИзДокумента  - флаг, указывающий что подбор производится из документа.
//
Процедура ПодборЗначенийОтбора(ФормаНастроек, МножественныйВыбор = Ложь, ПодборИзДокумента = Ложь) Экспорт
	
	ФормаВыбора = Неопределено;
	
	ПриведенныйОбъект = ФормаНастроек.ЭлементыФормы["ТабличноеПолеЗначенияОтбора"].Значение.Колонки["ЗначенияОтбора"].ТипЗначения.ПривестиЗначение();
	МассивТипов = ФормаНастроек.ЭлементыФормы["ТабличноеПолеЗначенияОтбора"].Значение.Колонки["ЗначенияОтбора"].ТипЗначения.Типы();
	
	Если (МассивТипов.Количество() > 1)И(НЕ ПодборИзДокумента) Тогда
		
		СписокДокументов = Новый СписокЗначений;
		
		Для Каждого Документ Из Документы Цикл
			
			Если МассивТипов.Найти(ТипЗнч(Документ.ПустаяСсылка())) <> Неопределено Тогда
				ИмяДокумента = Документ.ПустаяСсылка().Метаданные().Синоним;
				СписокДокументов.Добавить(Документ, ИмяДокумента);
			КонецЕсли;
			
		КонецЦикла;
		
		ВыбранныйЭлемент = СписокДокументов.ВыбратьЭлемент("Выбор типа данных");
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПриведенныйОбъект = ВыбранныйЭлемент.Значение;
		
	ИначеЕсли ТипЗнч(ПриведенныйОбъект) = Тип("Число") Тогда
		// у типа булево нет метода Метаданные()
		Предупреждение("Подбор невозможен для данного вида отбора.");
		Возврат;
		
	ИначеЕсли (ПриведенныйОбъект <> Неопределено)
		И (ТипЗнч(ПриведенныйОбъект) <> Тип("Булево"))
		И (Метаданные.Документы.Найти(ПриведенныйОбъект.Метаданные().Имя) = Неопределено)
		И (Метаданные.Справочники.Найти(ПриведенныйОбъект.Метаданные().Имя) = Неопределено) Тогда
		// значения подбора могут быть только документы или справочники
		Предупреждение("Подбор из документа невозможен для данного вида отбора.");
		Возврат;
	ИначеЕсли ТипЗнч(ПриведенныйОбъект) = Тип("Булево") Тогда
		// у типа булево нет метода Метаданные()
		Предупреждение("Подбор невозможен для данного вида отбора.");
		Возврат;
		
	ИначеЕсли ТипЗнч(ПриведенныйОбъект) = Тип("Неопределено") Тогда
		// у типа булево нет метода Метаданные()
		Предупреждение("Подбор невозможен для данного вида отбора.");
		Возврат;
		
	КонецЕсли;

	Если ПодборИзДокумента Тогда
		
		// сформируем список документов конфигурации
		СписокДокументов = Новый СписокЗначений;
		
		Для Каждого Документ Из Документы Цикл
			ИмяДокумента = Документ.ПустаяСсылка().Метаданные().Синоним;
			СписокДокументов.Добавить(Документ, ИмяДокумента);
		КонецЦикла;
		
		ВыбранныйЭлемент = СписокДокументов.ВыбратьЭлемент("Выбор типа документа");
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ФормаВыбора = ВыбранныйЭлемент.Значение.ПолучитьФормуВыбора(, ФормаНастроек.ЭлементыФормы.ТабличноеПолеЗначенияОтбора);
		
	Иначе
		
		Если Метаданные.Справочники.Найти(ПриведенныйОбъект.Метаданные().Имя) <> Неопределено  Тогда
			
			ФормаВыбора = Справочники[ПриведенныйОбъект.Метаданные().Имя].ПолучитьФормуВыбора(,ФормаНастроек.ЭлементыФормы.ТабличноеПолеЗначенияОтбора);
			
		ИначеЕсли Метаданные.Документы.Найти(ПриведенныйОбъект.Метаданные().Имя) <> Неопределено Тогда
			
			ФормаВыбора = Документы[ПриведенныйОбъект.Метаданные().Имя].ПолучитьФормуВыбора(,ФормаНастроек.ЭлементыФормы.ТабличноеПолеЗначенияОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФормаВыбора <> Неопределено Тогда
		
		ФормаВыбора.ЗакрыватьПриВыборе = НЕ МножественныйВыбор;
			
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Управляет отображением отбора краткого вида.
//
// Параметры:
//  ФормаНастроек - форма настроек отчета.
//
Процедура УправлениеАктуальностьюОтборов(ФормаНастроек) Экспорт
	
	//Если ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].Значение.Найти(Истина, "Пометка") 
	// = Неопределено Тогда
	//	ФормаНастроек.ЭлементыФормы["ПанельНастроек"].Страницы["СтраницаКраткийВидОтбор"].КартинкаЗаголовка 
	// = Новый Картинка;
	//Иначе
	//	ФормаНастроек.ЭлементыФормы["ПанельНастроек"].Страницы["СтраницаКраткийВидОтбор"].КартинкаЗаголовка 
	// = БиблиотекаКартинок.ВосклицательныйЗнак13х13;
	//КонецЕсли;
	
КонецПроцедуры 

// Процедура вызывается при изменении вида отбора.
//
// Параметры:
//	ФормаНастроек - форма настроек отчета.
//
Процедура ПриВыбореВидаОтбора(ФормаНастроек) Экспорт
	
	СписокЗначенийОтбора = ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].ТекущиеДанные.ЗначениеОтбора;
	ЭУ = ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].Колонки.ПодборЗначения.ЭлементУправления;
	ЭУ.ОграничениеТипа = Новый ОписаниеТипов(СписокЗначенийОтбора.ТипЗначения);
	ЭУ.Значение = СписокЗначенийОтбора.ТипЗначения.ПривестиЗначение();
	
	ТабличноеПолеЗначенияОтбора = ФормаНастроек.ЭлементыФормы["ТабличноеПолеЗначенияОтбора"].Значение;
	ТабличноеПолеЗначенияОтбора.Очистить();
	ТабличноеПолеЗначенияОтбора.Колонки.Удалить("ЗначенияОтбора");
	ТабличноеПолеЗначенияОтбора.Колонки.Добавить("ЗначенияОтбора", Новый ОписаниеТипов(СписокЗначенийОтбора.ТипЗначения));
	ФормаНастроек.ЭлементыФормы["ТабличноеПолеЗначенияОтбора"].Колонки["ЗначенияОтбора"].ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(СписокЗначенийОтбора.ТипЗначения);
	
	Если НЕ ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].ТекущиеДанные.ВидОтбора = "Дни недели"
		И НЕ ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].ТекущиеДанные.ВидОтбора = "Час" Тогда
		Для Сч = 1 По СписокЗначенийОтбора.Количество() Цикл
			НоваяСтрока = ТабличноеПолеЗначенияОтбора.Добавить();
		КонецЦикла;
	ИначеЕсли ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].ТекущиеДанные.ВидОтбора = "Дни недели" Тогда 
		// отдельно заполнения для отбора по дням недели
		Для Сч = 1 По СписокЗначенийОтбора.Количество() Цикл
			Если СписокЗначенийОтбора[Сч-1].Пометка Тогда
				НоваяСтрока = ТабличноеПолеЗначенияОтбора.Добавить();
				НоваяСтрока.ЗначенияОтбора = СписокЗначенийОтбора[Сч-1];
			КонецЕсли;
		КонецЦикла;
		ЭУ.КартинкаКнопкиВыбора = БиблиотекаКартинок.КартинкаКнопкиВыбора;
		ЭУ.КнопкаОчистки = Ложь;
	ИначеЕсли ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].ТекущиеДанные.ВидОтбора = "Час" Тогда 
		// отдельно заполнения для отбора по часам
		Для Сч = 1 По СписокЗначенийОтбора.Количество() Цикл
			НоваяСтрока = ТабличноеПолеЗначенияОтбора.Добавить();
			НоваяСтрока.ЗначенияОтбора = СписокЗначенийОтбора[Сч-1];
		КонецЦикла;
		ЭУ.КартинкаКнопкиВыбора = БиблиотекаКартинок.КартинкаКнопкиВыбора;
		ЭУ.КнопкаОчистки = Ложь;
	КонецЕсли;
	
	Если НЕ ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].ТекущиеДанные.ВидОтбора = "Дни недели" Тогда
		ТабличноеПолеЗначенияОтбора.ЗагрузитьКолонку(СписокЗначенийОтбора.ВыгрузитьЗначения(), "ЗначенияОтбора");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет настройки компоновки данных по всем табличным полям краткого вида.
//
// Параметры:
//  ОтчетОбъект     - объект отчета.
//  ФормаНастроек   - форма настроек отчета.
//  СтруктураДанных - структура содержит данные о полях краткого вида.
//
Процедура ЗаполнитьНастройкиКомпоновкиДанныхПоПолямКраткогоВида(ОтчетОбъект, ФормаНастроек, СтруктураДанных) Экспорт
	
	//ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
	
	//СтруктураДанных.Вставить("ВидПоля", "Строки");
	//СтруктураДанных.Вставить("ТаблицаКомпоновкиДанных", Неопределено);
	//ЗаполнитьНастройкиКомпоновкиДанныхПоТабличномуПолюКраткогоВида(ОтчетОбъект, ФормаНастроек, СтруктураДанных);  	
	//
	//СтруктураДанных.Вставить("ВидПоля", "Колонки");
	//СтруктураДанных.Вставить("ТаблицаКомпоновкиДанных", ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура[0]);
	//ЗаполнитьНастройкиКомпоновкиДанныхПоТабличномуПолюКраткогоВида(ОтчетОбъект, ФормаНастроек, СтруктураДанных);
	
	СтруктураДанных.Вставить("ВидПоля", "ВидыОтбора");
	ЗаполнитьНастройкиКомпоновкиДанныхПоТабличномуПолюКраткогоВида(ОтчетОбъект, ФормаНастроек, СтруктураДанных);
	
	СтруктураДанных.Вставить("ВидПоля", "ВыбранныеПоля");
	ЗаполнитьНастройкиКомпоновкиДанныхПоТабличномуПолюКраткогоВида(ОтчетОбъект, ФормаНастроек, СтруктураДанных);
	
	// заполним настройки по полям, которые относятся к отдельно взятым отчетам.
	Если СтруктураДанных.Свойство("МассивДополнительныхНастроекОтчета") Тогда
		
		МассивДопНастроек = СтруктураДанных.МассивДополнительныхНастроекОтчета;
		
		Для Каждого ДопНастройка Из МассивДопНастроек Цикл
			ОтчетОбъект.ОбработкаСменыВидаНастроекОтчета(ДопНастройка, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет настройки компоновки данных по табличному полю краткого вида.
//
// Параметры:
//  ОтчетОбъект     - объект отчета.
//  ФормаНастроек   - форма настроек отчета.
//  СтруктураДанных - структура содержит данные о полях краткого вида.
//
Процедура ЗаполнитьНастройкиКомпоновкиДанныхПоТабличномуПолюКраткогоВида(ОтчетОбъект, ФормаНастроек, СтруктураДанных)
	
	Если СтруктураДанных.Свойство("ВидПоля") Тогда
		ВидПоля = СтруктураДанных.ВидПоля;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если (ВидПоля = "Строки")ИЛИ(ВидПоля = "Колонки") Тогда
		
		//Если СтруктураДанных.Свойство("ТаблицаКомпоновкиДанных") Тогда
		//	ТаблицаКомпоновкиДанных = СтруктураДанных.ТаблицаКомпоновкиДанных;
		//Иначе
		//	Возврат;
		//КонецЕсли;
		//
		//Если ТаблицаКомпоновкиДанных = Неопределено Тогда
		//	ТаблицаКомпоновкиДанных = ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
		//ИначеЕсли ТипЗнч(ТаблицаКомпоновкиДанных) = Тип("ТаблицаКомпоновкиДанных") Тогда
		//	// ничего не делаем.
		//Иначе
		//	Возврат;
		//КонецЕсли;
		//
		//Если ВидПоля = "Строки" Тогда
		//	РодительСтруктуры = ТаблицаКомпоновкиДанных.Строки;
		//Иначе
		//	РодительСтруктуры = ТаблицаКомпоновкиДанных.Колонки;
		//КонецЕсли;
		//
		//Для Каждого ЭлементТаблицыЗначений Из ФормаНастроек.ЭлементыФормы["ТабличноеПоле"+ВидПоля].Значение Цикл
		//	
		//	Если НЕ ЭлементТаблицыЗначений.Пометка Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	НоваяГруппировка = РодительСтруктуры.Добавить();
		//	
		//	Если ЭлементТаблицыЗначений.ПолеКомпоновкиГруппировки = Новый ПолеКомпоновкиДанных("Регистратор") Тогда
		//		НовоеПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		//		НовоеПолеГруппировки.Использование = Истина;
		//		НовоеПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		//		НовоеПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ПериодСекунда");
		//		
		//		НовоеВыбранноеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		//		НовоеВыбранноеПоле.Использование = Ложь;
		//		НовоеВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ПериодСекунда");
		//	КонецЕсли;
		//	
		//	// добавим поле группировки
		//	НовоеПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		//	НовоеПолеГруппировки.Использование = ЭлементТаблицыЗначений.Пометка;
		//	//НовоеПолеГруппировки.ТипГруппировки = ПолучитьТипГруппировки(ЭлементТаблицыЗначений.ТипГруппировки);
		//	НовоеПолеГруппировки.Поле = ЭлементТаблицыЗначений.ПолеКомпоновкиГруппировки;
		//	
		//	// добавим авто выбранное поле
		//	НовоеВыбранноеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		//	
		//	// добавим авто порядок
		//	НовоеПолеСортировки = НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		//	
		//	
		//	НоваяГруппировка.Использование = НовоеПолеГруппировки.Использование;
		//	
		//	РодительСтруктуры = НоваяГруппировка.Структура;
		//КонецЦикла;
		//
		//ФормаНастроек.ЭлементыФормы["Структура"].Развернуть(ТаблицаКомпоновкиДанных, Истина);
		
	ИначеЕсли ВидПоля = "ВидыОтбора" Тогда
		
		ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
		
		Для Каждого ВидОтбора Из ФормаНастроек.ЭлементыФормы["ТабличноеПолеВидыОтбора"].Значение Цикл
			НовыйЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.Использование= ВидОтбора.Пометка;
			НовыйЭлементОтбора.ЛевоеЗначение= ВидОтбора.ПолеКомпоновкиДанных;
			
			Если ВидОтбора.ВидОтбора = "Дни недели" Тогда
				СписокДней = Новый СписокЗначений;
				ПредставлениеДней = "";
				Для каждого день Из ВидОтбора.ЗначениеОтбора Цикл
					Если день.Пометка Тогда
						СписокДней.Добавить(ВидОтбора.ЗначениеОтбора.Индекс(День) + 1);
						ПредставлениеДней = ПредставлениеДней + День.Значение +"; ";
					КонецЕсли;
				КонецЦикла;
				Если СписокДней.Количество() = 0 Тогда
					НовыйЭлементОтбора.Использование = Ложь;
					НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлементОтбора.ПравоеЗначение = ВидОтбора.ЗначениеОтбора.ТипЗначения.ПривестиЗначение();
				ИначеЕсли СписокДней.Количество() = 1 Тогда
					НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлементОтбора.ПравоеЗначение = СписокДней[0].Значение;
					НовыйЭлементОтбора.Представление  = "День недели равно " + ПредставлениеДней;	
				Иначе
					НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
					НовыйЭлементОтбора.ПравоеЗначение = СписокДней;
					НовыйЭлементОтбора.Представление  = "День недели в списке: " + ПредставлениеДней;	
				КонецЕсли;
				Продолжить;
			ИначеЕсли ВидОтбора.ВидОтбора = "Час" Тогда
				СписокЧасов = Новый СписокЗначений;
				ПредставлениеЧасов = "";
				Для каждого Час Из ВидОтбора.ЗначениеОтбора Цикл
					СписокЧасов.Добавить(Число(Лев(Строка(Час),2)));
					ПредставлениеЧасов = ПредставлениеЧасов + Час.Значение +"; ";
				КонецЦикла;
				
 				Если СписокЧасов.Количество() = 0 Тогда
					НовыйЭлементОтбора.Использование = Ложь;
					НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлементОтбора.ПравоеЗначение = ВидОтбора.ЗначениеОтбора.ТипЗначения.ПривестиЗначение();
				ИначеЕсли СписокЧасов.Количество() = 1 Тогда
					НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлементОтбора.ПравоеЗначение = СписокЧасов[0].Значение;
					НовыйЭлементОтбора.Представление  = "Время в интервале: " + ПредставлениеЧасов;	
				Иначе
					НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
					НовыйЭлементОтбора.ПравоеЗначение = СписокЧасов;
					НовыйЭлементОтбора.Представление  = "Время в списке интервалов: " + ПредставлениеЧасов;	
				КонецЕсли;
				Продолжить;
 			КонецЕсли;
			
			Если ВидОтбора.ЗначениеОтбора.Количество() = 0 Тогда
				// Заплатка
				//Если ТипЗнч(ОтчетОбъект) = Тип("ОтчетОбъект.АнализСтруктурыМеню") 
				//	И НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КоличествоПродажа") Тогда
				//	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
				//Иначе
					НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				//КонецЕсли;
				
				НовыйЭлементОтбора.ПравоеЗначение = ВидОтбора.ЗначениеОтбора.ТипЗначения.ПривестиЗначение();
				
			ИначеЕсли ВидОтбора.ЗначениеОтбора.Количество() = 1 Тогда
				
				ЗначениеОтбора = ВидОтбора.ЗначениеОтбора[0].Значение;
				
				Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЗначениеОтбора))
					И (ЗначениеОтбора.ЭтоГруппа) Тогда
					НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
					НовыйЭлементОтбора.ПравоеЗначение = ВидОтбора.ЗначениеОтбора;
				ИначеЕсли ВидОтбора.ВидОтбора = "Количество посещений"
					И ТипЗнч(ОтчетОбъект) = Тип("ОтчетОбъект.ДавностьПосещений") Тогда
					НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					НовыйЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
				Иначе
					НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					НовыйЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
				КонецЕсли;
				
			Иначе 
				НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
				НовыйЭлементОтбора.ПравоеЗначение = ВидОтбора.ЗначениеОтбора;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ВидПоля = "ВыбранныеПоля" Тогда
		
		Если (НЕ СтруктураДанных.Свойство("СтруктураГруппВыбранныхПолей")) ИЛИ
			(НЕ СтруктураДанных.Свойство("СтруктураВыбранныхПолей")) Тогда
			Возврат;
		Иначе
			СтруктураГруппВыбранныхПолей = СтруктураДанных.СтруктураГруппВыбранныхПолей;
			СтруктураВыбранныхПолей      = СтруктураДанных.СтруктураВыбранныхПолей;
			Если СтруктураДанных.Свойство("СтруктураДополнительныхПолей") Тогда
				СтруктураДополнительныхПолей = СтруктураДанных.СтруктураДополнительныхПолей;
			Иначе
				СтруктураДополнительныхПолей = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ПоляВыбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы;
		ПоляВыбора.Очистить();
		
		Если СтруктураДополнительныхПолей <> Неопределено Тогда
			Для Каждого ДополнительноеПоле Из СтруктураДополнительныхПолей Цикл
				Поле = ПоляВыбора.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				Поле.Заголовок  = ДополнительноеПоле.Значение;
				Поле.Поле       = Новый ПолеКомпоновкиДанных(ДополнительноеПоле.Ключ);
				Поле.Использование = ФормаНастроек["ТабличноеПоле"+ВидПоля].Строки.Найти(Поле.Поле, "ТипДанных").Пометка;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого ВыбранноеПоле Из СтруктураВыбранныхПолей Цикл
			НеВыбранНиОдинРесурс = Истина;
			
			Группа = ПоляВыбора.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Группа.Заголовок = ВыбранноеПоле.Значение;
			Группа.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
			
			Для Каждого РесурсГруппы Из СтруктураГруппВыбранныхПолей Цикл
				
				Если ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(РесурсГруппы.Ключ + ВыбранноеПоле.Ключ)) <> Неопределено Тогда
					Поле = Группа.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					Поле.Заголовок = РесурсГруппы.Значение;
					ТипДанных = Новый ПолеКомпоновкиДанных(РесурсГруппы.Ключ + ВыбранноеПоле.Ключ);
					Поле.Поле = ТипДанных;
					Родитель = ФормаНастроек["ТабличноеПоле"+ВидПоля].Строки.Найти(РесурсГруппы.Ключ, "ТипДанных");
					Элемент = Родитель.Строки.Найти(ТипДанных, "ТипДанных");
					Поле.Использование = Элемент.Пометка;
					
					Если Поле.Использование Тогда
						НеВыбранНиОдинРесурс = Ложь;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Группа.Использование = ?(НеВыбранНиОдинРесурс, Ложь, Истина);		
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает себестоимость номенклатуры
//
Функция ПолучитьСебестоимость(Товар, Период) Экспорт
	СтруктураЦены = ЦенаТовара(Товар,Справочники.ТипыЦен.Себестоимость, Период);
	Возврат	ПересчетВалют(СтруктураЦены.Цена,СтруктураЦены.Валюта);                     
КонецФункции	

// Вывод отчетов на принтер из интерфейса рабочего места
//
Функция ПечатьОтчетаРМ(пТаблицаЗадания, пЗаг1, пЗаг2="", пШапка="", НаПринтер = Ложь) Экспорт
	
	ТаблицаЗадания = пТаблицаЗадания;	
	Заг1 = пЗаг1;
	Заг2 = пЗаг2;
	Шапка = пШапка;
	Индекс =0;	
	Для н = 1 По СтрЧислоСтрок(Заг1) Цикл
		ТекСтрока = СтрПолучитьСтроку(Заг1,н);
		Задание = ТаблицаЗадания.Вставить(Индекс); 
		Задание.Данные    =Врег(ТекСтрока);
		Задание.ТипДанных = "Строка";
		Задание.Параметры = "ДвойнаяВысота,ДвойнаяШирина,Центр,Переносить,ПереводСтроки"; 
		Индекс = Индекс+1;
	КонецЦикла;

	Индекс = Индекс - 1;
	
	Если ЗначениеЗаполнено(Заг2) Тогда
		Индекс = Индекс+1;
		Задание = ТаблицаЗадания.Вставить(Индекс);
		Задание.Данные    =Врег(Заг2);
		Задание.ТипДанных = "Строка";
		Задание.Параметры = "Центр,Переносить,ПереводСтроки";
	КонецЕсли;
	
	Индекс = Индекс+1;
	Задание = ТаблицаЗадания.Вставить(Индекс);
	Задание.Данные    ="СтрЧерта";
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Лево,НеПереносить,ПереводСтроки";
	
	Индекс = Индекс+1;
	Задание = ТаблицаЗадания.Вставить(Индекс);
	Задание.Данные    ="Место реализации: "+глПараметрыРМ.МестоРеализации;
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,НеПереносить,ПереводСтроки";
	
	Индекс = Индекс+1;
	Задание = ТаблицаЗадания.Вставить(Индекс);
	Задание.Данные    ="Дата печати: "+Формат(ТекущаяДата(),"ДЛФ=Д");
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,НеПереносить,ПереводСтроки";
	
	Индекс = Индекс+1;
	Задание = ТаблицаЗадания.Вставить(Индекс);
	Задание.Данные    ="Время печати: "+Формат(ТекущаяДата(),"ДЛФ=В");
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,НеПереносить,ПереводСтроки";
	
	Индекс = Индекс+1;
	Задание = ТаблицаЗадания.Вставить(Индекс);
	Задание.Данные    ="СтрЧерта";
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Лево,НеПереносить,ПереводСтроки";
	
	Если ЗначениеЗаполнено(Шапка) Тогда
		Индекс = Индекс+1;
		Задание = ТаблицаЗадания.Вставить(Индекс);
		Задание.Данные    =Шапка;
		Задание.ТипДанных = "Строка";
		Задание.Параметры = "Лево,НеПереносить,ПереводСтроки";
		
		Индекс = Индекс+1;
		Задание = ТаблицаЗадания.Вставить(Индекс);
		Задание.Данные    = "СтрЧерта";
		Задание.ТипДанных = "Строка";
		Задание.Параметры = "Лево,НеПереносить,ПереводСтроки";
	КонецЕсли;
	
	Если НаПринтер = Ложь Тогда
		ТекстОтчета = "";
		ПС = "";
		Для Каждого Т Из ТаблицаЗадания Цикл
			ТекстОтчета = ТекстОтчета + ПС + Т.Данные;	
			
			Если Не Найти(Т.Параметры,"НеПереводСтроки") Тогда
				ПС = Символы.ПС;
			Иначе
				ПС = "";
			КонецЕсли;

		КонецЦикла;
		ТекстОтчета = СтрЗаменить(ТекстОтчета, "СтрЧерта", "________________________________________");
		ФормаПечати = ПолучитьОбщуюФорму("ПечатьОтчетаРМ");
		ФормаПечати.Заг1 = пЗаг1;
		ФормаПечати.Заг2 = пЗаг2;
		ФормаПечати.ТаблицаЗадания = пТаблицаЗадания;
		ФормаПечати.Шапка = пШапка;
		ФормаПечати.Текст = ТекстОтчета; 
		ФормаПечати.Открыть();
		Возврат Истина;
	КонецЕсли;

	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ТаблицаЗадания", ТаблицаЗадания);
	
	Результат = глПараметрыРМ.ПечатьОтчетовПринтер.ПолучитьОбъект().ВыполнитьДействие("Печать", ПараметрыПечати);
	
	Если Результат.Ошибка Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Результат.Описание, Результат.Подробно, "","ОК","");
	КонецЕсли;
	
КонецФункции

// Вызов отчетов из режима Администратора интерфейса рабочего места
//
Процедура ПолучитьОтчетРМ( ИмяОтчета, ПараметрФормирования=0 ) Экспорт
	
	Если НЕ (ИмяОтчета="СистемныйБаланс" И ПараметрФормирования=0) Тогда	// не вывод системного баланса на экран
		
		Если НЕ глПараметрыРМ.ПечатьОтчетов Тогда
			Текст1="Нет доступа!";
			Текст2="На данном рабочем месте печать отчетов не разрешена...";
			ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2, "", "ОК", "");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		Отчет = ИнтерфейсРМ.ПолучитьОбъектОбработки( ИмяОтчета, ,Истина );
	Исключение
		ИнтерфейсРМ.БетаВерсия();
		Возврат;
	КонецПопытки;
	
	глОжидание.Начало("Формирование отчета",
						"Идет формирование отчета,
						|пожалуйста, подождите...");
	
	ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.РежимАдминаПечатьОтчета, глПользователь, ИмяОтчета);
	
	ТД = Новый ТабличныйДокумент;
	Отчет.СформироватьОтчет(ТД, Истина, ПараметрФормирования);
	
	
	глОжидание.Конец();
	
КонецПроцедуры

// Переводит секунды во время
//
Функция СекундыВоВремя(Секунды)Экспорт
	Если Не ЗначениеЗаполнено(Секунды) Тогда 
		Возврат "0:00:00"
	КонецЕсли;	
	
	Секунды = Окр(Секунды);
	Мин = Цел(Секунды/60);
	Сек = Секунды - Мин * 60;
	Час = Цел(Мин/60);
	Мин = Мин - Час*60;
	Если Сек < 10 Тогда Сек = "0" + Строка(Сек) КонецЕсли;
	Если Мин < 10 Тогда Мин = "0" + Строка(Мин) КонецЕсли;
	
	Время = Строка(Час) + ":" + Строка(Мин) + ":" + Строка(Сек);
	
	Возврат Время;
КонецФункции

Процедура ПередОткрытиемОтчета(Форма) Экспорт
	Если Форма.КлючУникальности = Неопределено Тогда
		Форма.КлючУникальности = Новый УникальныйИдентификатор();
	КонецЕсли;	
КонецПроцедуры

// Устанавливает настройки компоновки данных соответствующим полям быстрого отбора на форме.
//
// Параметры:
//	ФормаОтчета - форма, где находятся элементы быстрого отбора
//
Процедура УстановитьНастройкиВФормеОтчета(ФормаОтчета) Экспорт
	
	Для Каждого ЭлементФормы ИЗ ФормаОтчета.ЭлементыФормы Цикл
		                                  
		Если Лев(ЭлементФормы.Имя, 19) = "ФлажокИспользование" Тогда
			СинхронизироватьБыстрыйОтборСНастройками(ФормаОтчета.ЭтотОбъект, СтрЗаменить(ЭлементФормы.Имя, "ФлажокИспользование", ""), ФормаОтчета);
		КонецЕсли;
	КонецЦикла;		
		
КонецПроцедуры

// Добавляет отбор в набор отборов компоновщика или группы отборов
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	Возврат НовыйЭлемент;
	
КонецФункции

// Позволяет определить есть ли среди реквизитов шапки документа
// реквизит с переданным именем.
//
// Параметры: 
//  ИмяРеквизита - строковое имя искомого реквизита, 
//  МетаданныеДокумента - объект описания метаданных документа, среди реквизитов которого производится поиск.
//
// Возвращаемое значение:
//  Истина - нашли реквизит с таким именем, Ложь - не нашли.
//
Функция ЕстьРеквизитОтчета(ИмяРеквизита, МетаданныеДокумента) Экспорт
	
	Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // ЕстьРеквизитДокумента()

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНТЕРФЕЙСА ОТЧЕТОВ

// Связывает поля отбора на основной форме с данными, устанавливает представления, прячет лишние
Процедура отчОбработатьПоляОтбораНаОсновнойФормеУниверсальногоОтчета(ЭлементыФормы, ПостроительОтчета, СтруктураСвязиЭлементовСДанными = Неопределено, ПутьКПостроителю = "ОтчетОбъект") Экспорт
	
	// Структура для хранения связи э.у. с данными
	СтруктураСвязиЭлементовСДанными = Новый Структура;
	
	КоличествоОтборов = 0;
	Для Сч = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		ПолеОтбора = ПостроительОтчета.Отбор[Сч];
		
		Если НЕ (ПустаяСтрока(ПолеОтбора.Имя) ИЛИ ПолеОтбора.Имя = "Периодичность") Тогда
			
			КоличествоОтборов=КоличествоОтборов+1;
			
		КонецЕсли; 
	КонецЦикла;
	Если КоличествоОтборов>5 Тогда
		КоличествоОтборов = 5;
	КонецЕсли;
	
	Сч = 0;
	Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
		
		ПолеОтбора = ПостроительОтчета.Отбор[Инд];
		
		Если ПустаяСтрока(ПолеОтбора.Имя) ИЛИ ПолеОтбора.Имя = "Периодичность" Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Сч = Сч + 1;
		Если Сч>КоличествоОтборов Тогда
			прервать;
		КонецЕсли;
		Флажок = ЭлементыФормы["ФлажокНастройки"+Сч];
		
		ПолеВыбора = ЭлементыФормы["ПолеВидаСравнения"+Сч];
		
		//			ПолеВыбора.УстановитьДействие("ПриИзменении", ЭталонПолеВыбора.ПолучитьДействие("ПриИзменении"));
		
		ПолеВвода = ЭлементыФормы["ПолеНастройки"+Сч];
		
		//			ПолеВвода.УстановитьДействие("ПриИзменении", ЭталонПолеВвода.ПолучитьДействие("ПриИзменении"));
		
		ПолеВводаС = ЭлементыФормы["ПолеНастройкиС"+Сч];
		
		//			ПолеВводаС.УстановитьДействие("ПриИзменении", ЭталонПолеВводаС.ПолучитьДействие("ПриИзменении"));
		
		ПолеВводаПо = ЭлементыФормы["ПолеНастройкиПо"+Сч];;
		//			ПолеВводаПо.УстановитьДействие("ПриИзменении", ЭталонПолеВводаПо.ПолучитьДействие("ПриИзменении"));
		
		ТипОтбора = ПостроительОтчета.Отбор[ПолеОтбора.Имя].ТипЗначения;
		
		ПолеВыбора.СписокВыбора = отчПолучитьСписокВидовСравненияПоТипу(ТипОтбора);
		
		ЭлементыФормы["ФлажокНастройки"+Сч].Заголовок = ПолеОтбора.Представление;
		ЭлементыФормы["ФлажокНастройки"+Сч].Данные   = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Использование";
		ЭлементыФормы["ПолеВидаСравнения"+Сч].Данные = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ВидСравнения";
		ЭлементыФормы["ПолеНастройки"+Сч].Данные     = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Значение";
		ЭлементыФормы["ПолеНастройкиС"+Сч].Данные    = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеС";
		ЭлементыФормы["ПолеНастройкиПо"+Сч].Данные   = ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеПо";
		
		СтруктураСвязиЭлементовСДанными.Вставить("ФлажокНастройки"+Сч,   ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Использование");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеВидаСравнения"+Сч, ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ВидСравнения");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройки"+Сч,     ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".Значение");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройкиС"+Сч,    ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеС");
		СтруктураСвязиЭлементовСДанными.Вставить("ПолеНастройкиПо"+Сч,   ПутьКПостроителю+".ПостроительОтчета.Отбор."+ПолеОтбора.Имя+".ЗначениеПо");
		
		// Если только один тип, то тип выбирать не будем
		ЭлементыФормы["ПолеНастройки"+Сч].ВыбиратьТип   = НЕ (ТипОтбора.Типы().Количество()=1);
		ЭлементыФормы["ПолеНастройкиС"+Сч].ВыбиратьТип  = НЕ (ТипОтбора.Типы().Количество()=1);
		ЭлементыФормы["ПолеНастройкиПо"+Сч].ВыбиратьТип = НЕ (ТипОтбора.Типы().Количество()=1);
		
		Если ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.Интервал
			ИЛИ ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.ИнтервалВключаяГраницы 
			ИЛИ ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.ИнтервалВключаяНачало 
			ИЛИ ЭлементыФормы["ПолеВидаСравнения"+Сч].Значение = ВидСравнения.ИнтервалВключаяОкончание Тогда
			
			ЭлементыФормы["ПолеНастройки"+Сч].Видимость = Ложь;
			ЭлементыФормы["ПолеНастройкиС"+Сч].Видимость = Истина;
			ЭлементыФормы["ПолеНастройкиПо"+Сч].Видимость = Истина;
			
		Иначе
			
			ЭлементыФормы["ПолеНастройки"+Сч].Видимость = Истина;
			ЭлементыФормы["ПолеНастройкиС"+Сч].Видимость = Ложь;
			ЭлементыФормы["ПолеНастройкиПо"+Сч].Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Формирует список допустимых значений Вида Сравнения
//
// Параметры: 
//	ОпТипов - Описание Типов поля
//
// Возвращаемое значение: 
//	список значений, содержащий имена всех регистров остатков
//
Функция отчПолучитьСписокВидовСравненияПоТипу(ОпТипов) Экспорт
	
	ТаблицаДоступныхЗначений = Новый ТаблицаЗначений;
	ТаблицаДоступныхЗначений.Колонки.Добавить("ВидСравнения");
	ТаблицаДоступныхЗначений.Колонки.Добавить("ЧислоВида");
	
	Для каждого ТипОписания Из ОпТипов.Типы() Цикл
		
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Равно;
		НоваяСтрокаТаблицы.ЧислоВида = 1;
		
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеРавно;
		НоваяСтрокаТаблицы.ЧислоВида = 1;
		
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ВСписке;
		НоваяСтрокаТаблицы.ЧислоВида = 1;
		
		НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
		НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеВСписке;
		НоваяСтрокаТаблицы.ЧислоВида = 1;
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипОписания) И Метаданные.НайтиПоТипу(ТипОписания).Иерархический Тогда
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ВИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.НеВИерархии;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
		ИначеЕсли ТипОписания = Тип("Число")
			ИЛИ ТипОписания = Тип("Строка")
			ИЛИ ТипОписания = Тип("Дата") Тогда
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Больше;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.БольшеИлиРавно;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Меньше;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Интервал;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ИнтервалВключаяНачало;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.ИнтервалВключаяОкончание;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
			
		КонецЕсли;
		
		Если ТипОписания = Тип("Строка") Тогда
			НоваяСтрокаТаблицы = ТаблицаДоступныхЗначений.Добавить();
			НоваяСтрокаТаблицы.ВидСравнения = ВидСравнения.Содержит;
			НоваяСтрокаТаблицы.ЧислоВида = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДоступныхЗначений.Свернуть("ВидСравнения", "ЧислоВида");
	
	СписокВидовСравнения = Новый СписокЗначений;
	КолТипов = ОпТипов.Типы().Количество();
	
	Для каждого СтрокаТаблицы Из ТаблицаДоступныхЗначений Цикл
		Если СтрокаТаблицы.ЧислоВида = КолТипов Тогда
			СписокВидовСравнения.Добавить(СтрокаТаблицы.ВидСравнения);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат СписокВидовСравнения;
	
Конецфункции // отчПолучитьСписокРегистровОстатков()

// Процедура-обработчик изменения поля настройки
Процедура отчПолеНастройкиПриИзменении(Элемент, Отбор, СтруктураСвязиЭУсДанными=Неопределено) Экспорт
	
	Поз = Найти(Элемент.Имя, "ПолеНастройки");
	Если Поз>0 Тогда
		
		Если ТипЗнч(СтруктураСвязиЭУсДанными)= Тип("Структура") Тогда
			
			// Имяполя отбора найдем из пути к данным
			ПутьКДанным="";
			Если СтруктураСвязиЭУсДанными.Свойство(Элемент.Имя, ПутьКДанным) Тогда
				
				ПутьКДанным = Сред(ПутьКДанным, Найти(ПутьКДанным, "Отбор.")+СтрДлина("Отбор."));
				ИмяПоля = Лев(ПутьКДанным, Найти(ПутьКДанным, ".")-1);
				
			КонецЕсли;
		Иначе
			ИмяПоля = Сред(Элемент.Имя, СтрДлина("ПолеНастройки")+1);
		КонецЕсли;
		
		МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(Элемент.Значение));
		Если МетаданныеЗначения <> Неопределено Тогда
			Если Метаданные.Справочники.Найти(МетаданныеЗначения.Имя) <> Неопределено Тогда
				Если Элемент.Значение.ЭтоГруппа Тогда
					Отбор[ИмяПоля].ВидСравнения = ВидСравнения.ВИерархии;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Элемент.ТипЗначения.Типы().Количество() = 2 Тогда
				ПустойСписок = Новый СписокЗначений;
				Если Элемент.ТипЗначения.СодержитТип(Тип("СписокЗначений")) Тогда
					ТипНеСписок = ?(Элемент.ТипЗначения.Типы()[0] = Тип("СписокЗначений"), Элемент.ТипЗначения.Типы()[1], Элемент.ТипЗначения.Типы()[0]);
					
					Если НЕ ЗначениеЗаполнено(Элемент.Значение) или (ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") и Элемент.Значение.Количество() = 0) Тогда
						Если (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.ВСписке)
							Или (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.ВСпискеПоИерархии)
							Или (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.НеВСписке)
							Или (Отбор[ИмяПоля].ВидСравнения = ВидСравнения.НеВСпискеПоИерархии) Тогда
							МассивСТипом = Новый массив(1);
							
							МассивСТипом[0] = ТипНеСписок;
							
							ПустойСписок.ТипЗначения = Новый ОписаниеТипов(МассивСТипом);
							
							Элемент.Значение = ПустойСписок;
						Иначе
							Элемент.Значение = ПустоеЗначениеТипа(ТипНеСписок);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ (НЕ ЗначениеЗаполнено(Элемент.Значение) или (ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") и Элемент.Значение.Количество() = 0)) Тогда
			Отбор[ИмяПоля].Использование = Истина;
		Иначе 
			Отбор[ИмяПоля].Использование = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик изменения поля настройки С
Процедура отчПолеНастройкиСПриИзменении(Элемент, Отбор, СтруктураСвязиЭУсДанными=Неопределено) Экспорт
	
	Поз = Найти(Элемент.Имя, "ПолеНастройкиC");
	Если Поз>0 Тогда
		
		Если ТипЗнч(СтруктураСвязиЭУсДанными)= Тип("Структура") Тогда
			
			// Имяполя отбора найдем из пути к данным
			ПутьКДанным="";
			Если СтруктураСвязиЭУсДанными.Свойство(Элемент.Имя, ПутьКДанным) Тогда
				
				ПутьКДанным = Сред(ПутьКДанным, Найти(ПутьКДанным, "Отбор.")+СтрДлина("Отбор."));
				ИмяПоля = Лев(ПутьКДанным, Найти(ПутьКДанным, ".")-1);
				
			КонецЕсли;
		Иначе
			ИмяПоля = Сред(Элемент.Имя, СтрДлина("ПолеНастройкиC")+1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Отбор[ИмяПоля].Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик изменения поля настройки ПО
Процедура отчПолеНастройкиПоПриИзменении(Элемент, Отбор, СтруктураСвязиЭУсДанными=Неопределено) Экспорт
	
	Поз = Найти(Элемент.Имя, "ПолеНастройкиПо");
	Если Поз>0 Тогда
		
		Если ТипЗнч(СтруктураСвязиЭУсДанными)= Тип("Структура") Тогда
			
			// Имяполя отбора найдем из пути к данным
			ПутьКДанным="";
			Если СтруктураСвязиЭУсДанными.Свойство(Элемент.Имя, ПутьКДанным) Тогда
				
				ПутьКДанным = Сред(ПутьКДанным, Найти(ПутьКДанным, "Отбор.")+СтрДлина("Отбор."));
				ИмяПоля = Лев(ПутьКДанным, Найти(ПутьКДанным, ".")-1);
				
			КонецЕсли;
		Иначе
			ИмяПоля = Сред(Элемент.Имя, СтрДлина("ПолеНастройкиПо")+1);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			Отбор[ИмяПоля].Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик изменения поля вида сравнения
Процедура отчПолеВидаСравненияПриИзменении(Элемент, ЭлементыФормы) Экспорт
	
	ИмяОтбора = Сред(Элемент.Имя, Найти(Элемент.Имя, "ПолеВидаСравнения")+СтрДлина("ПолеВидаСравнения"));
	
	// Управление полями настройки в зависимости от вида сравнения
	Если Элемент.Значение = ВидСравнения.Интервал
		ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяГраницы 
		ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяНачало 
		ИЛИ Элемент.Значение = ВидСравнения.ИнтервалВключаяОкончание Тогда
		
		Если ЭлементыФормы.Найти("ПолеНастройки" + ИмяОтбора) <> НеОпределено Тогда
			ЭлементыФормы["ПолеНастройки"+ИмяОтбора].Видимость = Ложь;
		КонецЕсли;
		Если ЭлементыФормы.Найти("ПолеНастройкиС" + ИмяОтбора) <> НеОпределено Тогда
			ЭлементыФормы["ПолеНастройкиС"+ИмяОтбора].Видимость = Истина;
		КонецЕсли;
		Если ЭлементыФормы.Найти("ПолеНастройкиПо" + ИмяОтбора) <> НеОпределено Тогда
			ЭлементыФормы["ПолеНастройкиПо"+ИмяОтбора].Видимость = Истина;
		КонецЕсли;
		
	Иначе
		
		Если ЭлементыФормы.Найти("ПолеНастройки" + ИмяОтбора) <> НеОпределено Тогда
			ПолеНастройки = ЭлементыФормы["ПолеНастройки"+ИмяОтбора];
			ПолеНастройки.Видимость = Истина;
			Если Элемент.Значение = ВидСравнения.ВСписке
				ИЛИ Элемент.Значение = ВидСравнения.НеВСписке
				ИЛИ Элемент.Значение = ВидСравнения.ВСпискеПоИерархии
				ИЛИ Элемент.Значение = ВидСравнения.НеВСпискеПоИерархии Тогда
				ПолеНастройки.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
			Иначе
				ПолеНастройки.ОграничениеТипа = Новый ОписаниеТипов(ПолеНастройки.ТипЗначения,, "СписокЗначений");
			КонецЕсли;
		КонецЕсли;
		Если ЭлементыФормы.Найти("ПолеНастройкиС" + ИмяОтбора) <> НеОпределено Тогда
			ЭлементыФормы["ПолеНастройкиС"+ИмяОтбора].Видимость = Ложь;
		КонецЕсли;
		Если ЭлементыФормы.Найти("ПолеНастройкиПо" + ИмяОтбора) <> НеОпределено Тогда
			ЭлементыФормы["ПолеНастройкиПо"+ИмяОтбора].Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Преобразует количество минут в строку вида: 1д.20ч.45м.
//
Функция отчВремяСтрокой(Знач КолвоМинут) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КолвоМинут) Тогда
		Возврат "";
	КонецЕсли;
	
	КолвоМинут = Формат(КолвоМинут,"ЧДЦ=0");
	Стр="";
	
	кс=Цел(КолвоМинут/(24*60));
	Если кс>0 Тогда
		Стр=Стр+кс+"д.";
		КолвоМинут=КолвоМинут-кс*24*60;
	КонецЕсли;
	
	кч=Цел(КолвоМинут/60);
	Если кч>0 Тогда
		Стр=Стр+кч+"ч.";
		КолвоМинут=КолвоМинут-кч*60;
	КонецЕсли;
	
	Возврат Стр+КолвоМинут+"м.";
КонецФункции

// Процедура формирует список дней недели для отбора
//
Процедура отчЗаполнитьСписокДнейНеделиВОтборе(ЭлементыФормы, Элемент, мЧислоКогдаВПродаже) Экспорт

	ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораИзСписка");
	СписокДней = Новый СписокЗначений;
	
	ИнтерфейсАдмина.ЗаполнитьСписокДнейНедели(СписокДней, мЧислоКогдаВПродаже);

	ФормаВыбора.СписокРеквизитов = СписокДней;
	
	ФормаВыбора.ЗапретСдвига = Истина;
	
	ВозврЗначение = ФормаВыбора.ОткрытьМодально();
 	мЧислоКогдаВПродаже = ИнтерфейсАдмина.СписокПометокВЧисло(ВозврЗначение);
	Элемент.Значение = Новый СписокЗначений;
	Элемент.Значение = отчПолучитьСписокДнейСПометкой(ВозврЗначение);
	
	Если ТипЗнч(ВозврЗначение) = Тип("СписокЗначений") Тогда
		ЭлементыФормы.ТабличноеПолеВидыОтбора.ТекущиеДанные.ЗначениеОтбора = ВозврЗначение;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСписокДнейНеделиВОтборе(ЭлементыФормы, Элемент, мЧислоКогдаВПродаже)

// Возвращает только те дни недели, для которых установлены пометки
//
// Параметры
//  ВозврЗначение  - Список дней недели с установленными пометками
Функция отчПолучитьСписокДнейСПометкой(ВозврЗначение) Экспорт
	
	Значение = Новый СписокЗначений;
	Для Сч = 1 По ВозврЗначение.Количество() Цикл
		Если ВозврЗначение[Сч-1].Пометка Тогда
			Значение.Добавить(ВозврЗначение[Сч-1]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Значение;

КонецФункции // отчПолучитьСписокДнейСПометкой(ВозврЗначение)

// функция по текущему часу возвращает его представление в виде интервала
//
Функция ПолучитьПредставлениеЧаса(Час = Неопределено) Экспорт
	
	Если Час = Неопределено Тогда
		Час = Час(ТекущаяДата());
	КонецЕсли;
	
	Возврат Перечисления.Часы.Получить(Час);
	
КонецФункции

// функция по текущей дате возвращает имя дня недели
//
Функция ПолучитьИмяДняНедели(Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		НомерДняНедели = ДеньНедели(ТекущаяДата());
	Иначе
		НомерДняНедели = ДеньНедели(Дата);
	КонецЕсли;
	
	Если НомерДняНедели = 1 Тогда
		Возврат "Понедельник";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат "Вторник";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат "Среда";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат "Четверг";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат "Пятница";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат "Суббота";
	Иначе
		Возврат "Воскресенье";	
	КонецЕсли;
	
КонецФункции

// Отрабатывает нажатие на кнопку периода в форме отчета и в форме настройки отчета
//
// Параметры
//  ОтчетОбъект  - <ОтчетОбъект> - Передает объект отчета, в котором происходит нажатие на кнопку период
Процедура КнопкаПериодНажатие(ОтчетОбъект) Экспорт

	ФормаПодбораПериода = Обработки.ВыборПериода.ПолучитьФорму();;
	ФормаПодбораПериода.ДатаС = ОтчетОбъект.ДатаС;
	ФормаПодбораПериода.ДатаПо = ОтчетОбъект.ДатаПо;
	СтруктураПериода = ФормаПодбораПериода.ОткрытьМодально();
	Если Не СтруктураПериода = Неопределено Тогда
		ОтчетОбъект.Период = СтруктураПериода.ПредставлениеПериода;	
		ОтчетОбъект.ДатаС = СтруктураПериода.ДатаС;
		ОтчетОбъект.ДатаПо = СтруктураПериода.ДатаПо;
		Если ЕстьРеквизитОтчета("МассивСмен",ОтчетОбъект.Метаданные()) Тогда
			ОтчетОбъект.МассивСмен = Неопределено;
		КонецЕсли;
		Если ЕстьРеквизитОтчета("МестоРеализации",ОтчетОбъект.Метаданные()) Тогда
			Если НЕ (ТипЗнч(ОтчетОбъект) = Тип("ОтчетОбъект.СистемныйБаланс")
				ИЛИ ТипЗнч(ОтчетОбъект) = Тип("ОтчетОбъект.СводныйОтчет")) Тогда
				ОтчетОбъект.МестоРеализации = Неопределено;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры // КнопкаПериодНажатие()
 
// Отрабатывает нажатие на кнопку смена в форме отчета и в форме настройки отчета
//
// Параметры
//  ОтчетОбъект  - <ОтчетОбъект> - Передает объект отчета, в котором происходит нажатие на кнопку период
Процедура КнопкаСменаНажатие(ОтчетОбъект) Экспорт

	ОбработкаСмены = Обработки.ВыборСмен.Создать();
    Если НЕ ОтчетОбъект.МассивСмен = Неопределено Тогда
		ОбработкаСмены.МассивСмен = ОтчетОбъект.МассивСмен.Скопировать();
	КонецЕсли;
	СтруктураСмен = ОбработкаСмены.ПолучитьФорму("ФормаПодбораСмен").ОткрытьМодально();
	Если Не СтруктураСмен = Неопределено Тогда
		ОтчетОбъект.Период = СтруктураСмен.ПредставлениеСмен;
		ОтчетОбъект.МассивСмен = СтруктураСмен.МассивСмен;
		ОтчетОбъект.ДатаС = СтруктураСмен.ДатаС;
		ОтчетОбъект.ДатаПо = СтруктураСмен.ДатаПо;
		Если ЕстьРеквизитОтчета("МестоРеализации",ОтчетОбъект.Метаданные()) Тогда
			ОтчетОбъект.МестоРеализации = СтруктураСмен.МестоРеализации;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КнопкаСменаНажатие()

///////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ НАСТРОЙКАМИ В ОТЧЕТАХ

// Процедура открывает форму обработки "СохранениеЗначений" в виде для восстановления.
//
// Параметры:
//  ИмяОбъекта            - имя объекта, которое используется при сохранении настройки.
//  ОбрСохранениеЗначений - объект обработки "СохранениеЗначений".
//  ТабличнаяЧасть        - если заполнено, то табличная часть в которую восстанавливается значение.
//
Процедура ВосстановитьНастройкуОбр(ИмяОбъекта, Форма, ТабличнаяЧасть) Экспорт
	
	ОбрСохранениеЗначений = Обработки.СохранениеЗначений.Создать();
	ФормаВосстановлениеЗначений = ОбрСохранениеЗначений.ПолучитьФорму("Сохранить");
	ФормаВосстановлениеЗначений.ВладелецФормы = Форма;
	
	Если ИмяОбъекта <> "" Тогда
		ФормаВосстановлениеЗначений.ПередатьПараметрыСохранения(ИмяОбъекта, Неопределено, Ложь, Перечисления.ТипНастройкиПользователя.НастройкаОтчета, Неопределено);
	Иначе 
		ФормаВосстановлениеЗначений.ПередатьПараметрыСохранения(ИмяОбъекта, Неопределено, Ложь, Перечисления.ТипНастройкиПользователя.ТабличнаяЧасть, ТабличнаяЧасть);
	КонецЕсли;	
	
	ФормаВосстановлениеЗначений.ОткрытьМодально();
	
КонецПроцедуры
    
// Процедура восстанавливает значение реквизитов отчета.
//
// Параметры:
//  ИмяОбъекта            - имя объекта, которое используется при сохранении настройки.
//  ОбрСохранениеЗначений - объект обработки "СохранениеЗначений".
//  ТабличнаяЧасть        - если заполнено, то табличная часть в которую восстанавливается значение.
//
Процедура ВосстановитьНастройкуОтчета(ОтчетОбъект, ВосстанавливаемоеЗначение) Экспорт
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ВосстанавливаемоеЗначение.НастройкиКомпоновкиДанных);
	Для Каждого реквизит из ОтчетОбъект.Метаданные().Реквизиты Цикл
		Если ВосстанавливаемоеЗначение.Свойство(реквизит.Имя) Тогда
			Если реквизит.имя = "МассивСмен" тогда продолжить;КонецЕсли;
			ОтчетОбъект[реквизит.имя] = ВосстанавливаемоеЗначение[реквизит.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура открывает форму обработки "СохранениеЗначений" в виде для сохранения.
//
// Параметры:
//  ИмяОбъекта          - имя объекта, которое используется при сохранении настройки.
//  СтруктураСохранения - структура, содержащая значения для сохранения..
//
Процедура СохранитьНастройкуОбр(ИмяОбъекта,  СтруктураСохранения)Экспорт
	
	ОбрСохранениеЗначений = Обработки.СохранениеЗначений.Создать();
	ФормаСохранениеЗначений = ОбрСохранениеЗначений.ПолучитьФорму("Сохранить");
	ФормаСохранениеЗначений.ПередатьПараметрыСохранения(ИмяОбъекта, СтруктураСохранения, Истина,Перечисления.ТипНастройкиПользователя.НастройкаОтчета, Неопределено );
	ФормаСохранениеЗначений.ОткрытьМодально();
	
КонецПроцедуры

// Процедура восстанавливает значение реквизитов отчета.
//
// Параметры:
//  ИмяОбъекта            - имя объекта, которое используется при сохранении настройки.
//  ОбрСохранениеЗначений - объект обработки "СохранениеЗначений".
//  ТабличнаяЧасть        - если заполнено, то табличная часть в которую восстанавливается значение.
//
Процедура СохранитьНастройкуОтчета(ОтчетОбъект, ИмяОбъекта) Экспорт
	
	СтруктураСохранения = Новый Структура();
	
	СтруктураСохранения.Вставить("НастройкиКомпоновкиДанных" , ОтчетОбъект.КомпоновщикНастроек.Настройки);
	Для Каждого реквизит из ОтчетОбъект.Метаданные().Реквизиты Цикл
		Если реквизит.имя <> "ДатаС" И реквизит.имя <> "ДатаПо" И реквизит.имя <> "Период" И реквизит.имя <> "МассивСмен" Тогда
			СтруктураСохранения.Вставить(реквизит.имя, ОтчетОбъект[Реквизит.имя]);
		КонецЕсли;
	КонецЦикла;
	
	СохранитьНастройкуОбр(ИмяОбъекта, СтруктураСохранения);	
	
КонецПроцедуры

// Процедура восстанавливает значение настройки используемой при открытии.
//
// Параметры:
//  ИмяОбъекта              - имя объекта, которое используется при сохранении настройки.
//  ОбрСохранениеЗначений   - объект обработки "СохранениеЗначений".
//
// Возвращаемое значение: 
//  ОбрСохранениеЗначений.ВосстановитьЗначениеНастройкиПриОткрытии(ИмяОбъекта) - возвращает значение настройки,
//                                                                                 используемой при открытии. 
Функция ВосстановитьПриОткрытииОбр(ИмяОбъекта) Экспорт
	
	ОбрСохранениеЗначений = Обработки.СохранениеЗначений.Создать();
	ОбрСохранениеЗначений.ПередатьПараметрыСохранения(ИмяОбъекта, Неопределено, Неопределено, 
	                             Перечисления.ТипНастройкиПользователя.НастройкаОтчета, Неопределено);
	
	Возврат ОбрСохранениеЗначений.ВосстановитьЗначениеНастройкиПриОткрытии(ИмяОбъекта);
	
КонецФункции

// Получает пустую таблицу настроек отчета
//
// Параметры:
//  ТипНастройки - тип настройки, в зависимости от которой получается таблица.
//
// Возвращаемое значение:
//  Пустая таблица настроек.
//
Функция ПолучитьПустуюТаблицуНастроекОтчета(ТипНастройки) Экспорт
	
	ТаблицаНастроек = Новый ТаблицаЗначений;
	
	Если Найти(ТипНастройки, "Группировки") > 0 Тогда
		
		ТаблицаНастроек.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
		ТаблицаНастроек.Колонки.Добавить("ТипГруппировки");
		
	ИначеЕсли ТипНастройки = "Отбор" Тогда
		
		ТаблицаНастроек.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
		ТаблицаНастроек.Колонки.Добавить("ВидСравнения");
		ТаблицаНастроек.Колонки.Добавить("Значение");
		
	ИначеЕсли ТипНастройки = "ВыбранныеПоля" Тогда
		
		ТаблицаНастроек = Новый ДеревоЗначений;
		
		ТаблицаНастроек.Колонки.Добавить("Поле"      , Новый ОписаниеТипов("Строка"));
		ТаблицаНастроек.Колонки.Добавить("Заголовок" , Новый ОписаниеТипов("Строка"));
		
	ИначеЕсли ТипНастройки = "Сортировка" Тогда
		
		ТаблицаНастроек.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
		ТаблицаНастроек.Колонки.Добавить("ТипУпорядочивания");
		
	КонецЕсли;
	
	Возврат ТаблицаНастроек;
	
КонецФункции

// Заполняет группировки отчета по переданным параметрам.
//
// Параметры:
//  ОтчетОбъект                - объект отчета.
//  ТаблицаНастроекГруппировок - таблица значений настроек группировок строк.
//  ВидПоля                    - "Строки" или "Колонки" в зависимости от вида заполнения.
//
Процедура ЗаполнитьГруппировкиНастроекОтчета(ОтчетОбъект, ТаблицаНастроекГруппировок, ВидПоля)
	
	НастройкиОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	               
	Если НастройкиОтчета.Структура.Количество() > 0 Тогда
		ТаблицаКомпоновкиДанных = НастройкиОтчета.Структура[0];
		Если ТипЗнч(ТаблицаКомпоновкиДанных) <> Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ТаблицаКомпоновкиДанных = НастройкиОтчета.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	КонецЕсли;
		
	Если ВидПоля = "Строки" Тогда
		РодительСтруктуры = ТаблицаКомпоновкиДанных.Строки;
	Иначе
		РодительСтруктуры = ТаблицаКомпоновкиДанных.Колонки;
	КонецЕсли;

	Для Каждого ЭлементТаблицыЗначений Из ТаблицаНастроекГруппировок Цикл
		
		НоваяГруппировка = РодительСтруктуры.Добавить();
		
		ПолеКомпоновкиГруппировки = ?(ТипЗнч(ЭлементТаблицыЗначений.Поле) = Тип("Строка"), 
		                              Новый ПолеКомпоновкиДанных(ЭлементТаблицыЗначений.Поле),
		                              ЭлементТаблицыЗначений.Поле);
		
		Если ПолеКомпоновкиГруппировки = Новый ПолеКомпоновкиДанных("Регистратор") Тогда
			НовоеПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			НовоеПолеГруппировки.Использование = Истина;
			НовоеПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			НовоеПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ПериодСекунда");
			
			НовоеВыбранноеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовоеВыбранноеПоле.Использование = Ложь;
			НовоеВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("ПериодСекунда");
		КонецЕсли;
		
		// добавление полей группировок
		НовоеПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПолеГруппировки.Использование = Истина;
		ТипГруппировки = ?(ТипЗнч(ЭлементТаблицыЗначений.ТипГруппировки) = Тип("Строка"), 
		                   ПолучитьТипГруппировки(ЭлементТаблицыЗначений.ТипГруппировки),
		                   ЭлементТаблицыЗначений.ТипГруппировки);
		НовоеПолеГруппировки.ТипГруппировки = ТипГруппировки;
		НовоеПолеГруппировки.Поле = ПолеКомпоновкиГруппировки;
		
		// добавление авто выбранных полей
		НовоеВыбранноеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
		// добавление авто порядка
		НовоеПолеСортировки = НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		
		НоваяГруппировка.Использование = НовоеПолеГруппировки.Использование;
		
		РодительСтруктуры = НоваяГруппировка.Структура;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет отборы отчета по переданным параметрам.
//
// Параметры:
//  ОтчетОбъект            - объект отчета;
//  ТаблицаНастроекОтборов - таблица значений настроек группировок строк;
//
Процедура ЗаполнитьОтборыНастроекОтчета(ОтчетОбъект, ТаблицаНастроекОтборов)
	
	Настройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	
	Настройки.Отбор.Элементы.Очистить();
		
	Для Каждого СтрокаОтбора Из ТаблицаНастроекОтборов Цикл
		
		НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = ?(ТипЗнч(СтрокаОтбора.Поле) = Тип("Строка"), Новый ПолеКомпоновкиДанных(СтрокаОтбора.Поле), СтрокаОтбора.Поле);
		НовыйЭлементОтбора.ВидСравнения   = СтрокаОтбора.ВидСравнения;
		НовыйЭлементОтбора.ПравоеЗначение = СтрокаОтбора.Значение;
	
	КонецЦикла;
	
КонецПроцедуры

// Заполняет сортировку отчета по переданным параметрам.
//
// Параметры:
//  ОтчетОбъект            - объект отчета;
//  ТаблицаНастроекОтборов - таблица значений настроек группировок строк;
//
Процедура ЗаполнитьСортировкуПолейОтчета(ОтчетОбъект, ТаблицаНастроекСортировки)
	
	Настройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	
	Настройки.Порядок.Элементы.Очистить();
		
	Для Каждого СтрокаПорядка Из ТаблицаНастроекСортировки Цикл
		
		НовыйЭлементПорядка = Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		НовыйЭлементПорядка.Использование     = Истина;
		НовыйЭлементПорядка.Поле              = ?(ТипЗнч(СтрокаПорядка.Поле) = Тип("Строка"), Новый ПолеКомпоновкиДанных(СтрокаПорядка.Поле), СтрокаПорядка.Поле);
		НовыйЭлементПорядка.ТипУпорядочивания = СтрокаПорядка.ТипУпорядочивания;
	
	КонецЦикла;
	
КонецПроцедуры

// Заполняет строки группировок по переданным параметрам.
//
// Параметры:
//  ПоляВыбора                   - поля выбора настроек отчета
//  ДеревоНастроекВыбранныхПолей - таблица значений настроек группировок строк.
//
Процедура ЗаполнитьВыводимыеПоляНастроекОтчета(ПоляВыбора, ДеревоНастроекВыбранныхПолей)
	
	Для Каждого ВыбранноеПоле Из ДеревоНастроекВыбранныхПолей Цикл
		
		Если ВыбранноеПоле.Строки.Количество() > 0 Тогда
			// создание групп выбранных полей
			НоваяГруппа = ПоляВыбора.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			НоваяГруппа.Заголовок     = ВыбранноеПоле.Заголовок;
			НоваяГруппа.Расположение  = РасположениеПоляКомпоновкиДанных.Горизонтально;
			НоваяГруппа.Использование = Истина;
			
			ЗаполнитьВыводимыеПоляНастроекОтчета(НоваяГруппа.Элементы, ВыбранноеПоле.Строки); 
			
		Иначе
			// создание выбранных полей
			НовоеПоле = ПоляВыбора.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Заголовок     = ВыбранноеПоле.Заголовок;
			НовоеПоле.Поле          = ?(ТипЗнч(ВыбранноеПоле.Поле) = Тип("Строка"), Новый ПолеКомпоновкиДанных(ВыбранноеПоле.Поле), ВыбранноеПоле.Поле);
			НовоеПоле.Использование = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура строит отчет по переданным настройкам.
//
// Параметры:
//  ОтчетОбъект - объект отчета.
//  ТаблицаНастроекГруппировокСтроки  - таблица значений, содержащая группировки строк.
//  ТаблицаНастроекГруппировокКолонки - таблица значений, содержащая группировки колонок.
//  ТаблицаНастроекОтборов            - таблица значений, содержащая данные об отборах.
//  ДеревоНастроекВыбранныхПолей      - дерево выбранных полей компоновки данных.
//
Процедура СформироватьОтчетПоПараметрам(ОтчетОбъект, ТаблицаНастроекГруппировокСтроки = Неопределено, ТаблицаНастроекГруппировокКолонки = Неопределено, 
                                        ТаблицаНастроекОтборов = Неопределено, ТаблицаНастроекСортировки = Неопределено, ДеревоНастроекВыбранныхПолей = Неопределено) Экспорт
	
	Если ОтчетОбъект.Метаданные().ОсновнаяСхемаКомпоновкиДанных <> Неопределено Тогда
		// если отчет сделан с использованием схемы компоновки данных, то устанавливаются параметры
		
		Если ТаблицаНастроекГруппировокСтроки <> Неопределено ИЛИ ТаблицаНастроекГруппировокКолонки <> Неопределено Тогда
			// если есть хоть один параметр настройки структуры, то структура заполняется вручную.
			ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Очистить();
			
		КонецЕсли;
		
		// заполнение настроек отчета
		Если ТаблицаНастроекГруппировокСтроки <> Неопределено Тогда
			ЗаполнитьГруппировкиНастроекОтчета(ОтчетОбъект, ТаблицаНастроекГруппировокСтроки, "Строки");
		КонецЕсли;
		
		Если ТаблицаНастроекГруппировокКолонки <> Неопределено Тогда
			ЗаполнитьГруппировкиНастроекОтчета(ОтчетОбъект, ТаблицаНастроекГруппировокКолонки, "Колонки");
		КонецЕсли;
		
		Если ТаблицаНастроекОтборов <> Неопределено Тогда
			ЗаполнитьОтборыНастроекОтчета(ОтчетОбъект, ТаблицаНастроекОтборов);
		КонецЕсли;
		
		Если ТаблицаНастроекСортировки <> Неопределено Тогда
			ЗаполнитьСортировкуПолейОтчета(ОтчетОбъект, ТаблицаНастроекСортировки);
		КонецЕсли;
		
		Если ДеревоНастроекВыбранныхПолей <> Неопределено Тогда
			
			ПоляВыбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Выбор.Элементы;
	
			ПоляВыбора.Очистить();
	
			ЗаполнитьВыводимыеПоляНастроекОтчета(ПоляВыбора, ДеревоНастроекВыбранныхПолей.Строки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаОтчета = ОтчетОбъект.ПолучитьФорму();
	
	Если НЕ (глВерсия>1 И ТипЗнч(ОтчетОбъект) = Тип("ОтчетОбъект.АнализВремениОбслуживания")) Тогда
		ФормаОтчета.НастройкиПереданы = Истина;
	КонецЕсли;
	
	ФормаОтчета.Открыть();
	
	//Если НЕ ТипЗнч(ОтчетОбъект) = Тип("ОтчетОбъект.АнализСтруктурыМеню") Тогда
		Попытка
			ОтчетОбъект.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.Результат);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	//Иначе // Для анализа структуры меню необходимо передавать другой параметр
	//	Попытка
	//		ОтчетОбъект.СформироватьОтчет(ФормаОтчета);
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	
КонецПроцедуры

// Получает тип группировки для более понятного отображения
//
// Параметры:
//  ТипГруппировки - тип группировки, который надо преобразовать.
//  ВозвратТипаВВидеТекста - флаг определяющий возвращаемое значение.
//
// Возвращаемое значение:
//  ТипГруппировкиКомпоновкиДанных, Строка
//
Функция ПолучитьТипГруппировки(ТипГруппировки, ВозвратТипаВВидеТекста = Ложь)
	
	Если ВозвратТипаВВидеТекста Тогда
		Если ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия тогда
			Возврат "Группы и элементы";
		ИначеЕсли ТипГруппировки = ТипГруппировкиКомпоновкиДанных.ТолькоИерархия тогда
			Возврат "Только группы";
		ИначеЕсли ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы тогда
			Возврат "Только элементы";
		Иначе
			Возврат "Только элементы";
		КонецЕсли;
	Иначе
		Если ТипГруппировки = "Группы и элементы" тогда
			Возврат ТипГруппировкиКомпоновкиДанных.Иерархия;
		ИначеЕсли ТипГруппировки = "Только группы" тогда
			Возврат ТипГруппировкиКомпоновкиДанных.ТолькоИерархия;
		ИначеЕсли ТипГруппировки = "Только элементы" тогда
			Возврат ТипГруппировкиКомпоновкиДанных.Элементы;
		Иначе
			Возврат ТипГруппировкиКомпоновкиДанных.Элементы;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет расшифровку отчета при нажатии на лупу в форме отчета
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура РасшифровкаОтчетов(ОтчетОбъект, Расшифровка, НастройкиОтчетаНаМоментФормирования = Неопределено) Экспорт

	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ОтчетОбъект.ИнформацияРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать);
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
	Если глВерсия > 1 Тогда
		Если ТипЗнч(ОтчетОбъект) = Тип("ОтчетОбъект.АнализВремениОбслуживания") Тогда
			ДоступныеДействия.Удалить(1);
		КонецЕсли; 
	КонецЕсли; 
	
	Попытка
		ТекущаяНастройка = ОтчетОбъект.ПолучитьТекущиеНастройки();
		Если НастройкиОтчетаНаМоментФормирования <> Неопределено Тогда
			ОтчетОбъект.ЗагрузитьНастройки(НастройкиОтчетаНаМоментФормирования);
		КонецЕсли;
		ИзмененнаяНастройка = ОбработкаРасшифровки.Выполнить(Расшифровка,,ДоступныеДействия);
	Исключение
		Предупреждение("Ошибка выполнения отчета!");
	КонецПопытки;
	
	Если ИзмененнаяНастройка <> Неопределено Тогда
		
		НовОтчет = Отчеты[ОтчетОбъект.Метаданные().Имя].Создать();
		ФормаНовОтчета = НовОтчет.ПолучитьФорму("ФормаОтчета");
		НовОтчет.ДатаС = ОтчетОбъект.ДатаС;
		НовОтчет.ДатаПо = ОтчетОбъект.ДатаПо;
		НовОтчет.Период = ОтчетОбъект.Период;
		НовОтчет.МассивСмен = ОтчетОбъект.МассивСмен;
		ФормаНовОтчета.Открыть();
		НовОтчет.СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
		Если НастройкиОтчетаНаМоментФормирования <> Неопределено Тогда
			НовОтчет.ЗагрузитьНастройки(НастройкиОтчетаНаМоментФормирования);
		КонецЕсли;
		НовОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ИзмененнаяНастройка);
		
		Если НЕ (глВерсия>1 И ТипЗнч(ОтчетОбъект) = Тип("ОтчетОбъект.АнализВремениОбслуживания")
				) Тогда
			НовОтчет.КраткийВидНастройки = Ложь;
		КонецЕсли;
		НовОтчет.СформироватьОтчет(ФормаНовОтчета.ЭлементыФормы.Результат);
		
	КонецЕсли;
	
	ОтчетОбъект.ЗагрузитьНастройки(ТекущаяНастройка);

КонецПроцедуры // РасшифровкаОтчетов()
 
// Процедура используется для отчет ОтчетПоДнямНедели. Преобразует время в строку
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПреобразоватьДаты(ВремНачала, ВремяОкончания) Экспорт

   Возврат (Строка(ЛЕВ(ПРАВ(ВремНачала,8),5)) + Символы.ПС + Строка(ЛЕВ(ПРАВ(ВремяОкончания,8),5)));

КонецФункции // ПреобразоватьДаты()

// Преобразует количество минут в строку вида: 1д.20ч.45м.
//
Функция ВремяСтрокойДляОтчета(Знач КолвоМинут) Экспорт
	
	Стр="";
	
	кч=Цел(КолвоМинут/60);
	Если кч>0 Тогда
		ЧЦ = СтрДлина(Строка(кч));
		Стр=Стр+Формат(кч,"ЧЦ="+ЧЦ+"; ЧВН=")+":";
		КолвоМинут=КолвоМинут-кч*60;
	Иначе
		Стр=Стр+"00:" 
	КонецЕсли;
	
	Возврат Стр + Формат(КолвоМинут,"ЧЦ=2; ЧН=; ЧВН=") +":00";
КонецФункции

