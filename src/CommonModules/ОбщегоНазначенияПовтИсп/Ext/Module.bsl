Функция НайтиПоРеквизиту(ИмяТаблицы, ИмяРеквизита, ЗначениеРеквизита, ВключаяПомеченные = Ложь, Владелец = Неопределено, Родитель = Неопределено, УИД = Неопределено) Экспорт
	Запрос = Новый Запрос("Выбрать Ссылка ИЗ " + ИмяТаблицы + "
	|ГДЕ " + ИмяРеквизита + " = &ЗначениеРеквизита " + ?(ВключаяПомеченные, "И НЕ ПометкаУдаления","") + "
	|" + ?(Владелец = Неопределено, "", " И Владелец = &Владелец") + "
	|" + ?(Родитель = Неопределено, "", " И Родитель = &Родитель"));
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Рез = Запрос.Выполнить();
	Если Не Рез.Пустой() Тогда 
		Возврат Рез.Выгрузить()[0][0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция СтанцияТовара(Товар) Экспорт
	глПараметрыРМ=глПараметрыРМ;
	МЗ = РегистрыСведений.ПривязкаТоваровКстанциям.СоздатьМенеджерЗаписи();
	МЗ.ИнформационнаяБаза = ПараметрыСеанса.ТекущаяИБ;
	МЗ.КаталогТоваров = Товар.Владелец;
	МЗ.Прочитать();
	
	Станция = МЗ.Станция;
	Если Не ЗначениеЗаполнено(МЗ.Станция) Тогда
		Попытка
			Станция = глПараметрыРМ.Станция;	
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат Станция;
	
	
КонецФункции

Функция ФирмаПоТоваруПовтИсп(Товар, КлючУникальности = "") Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Товары.Владелец.Фирма КАК ВладелецФирма
	|ИЗ
	|	Справочник.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Товар");	
	Запрос.УстановитьПараметр("Товар", Товар);
	тзФирма = Запрос.Выполнить().Выгрузить(); 
	Если тзФирма.Количество() Тогда
		Фирма = тзФирма[0][0];
	Иначе
		глПараметрыРМ = глПараметрыРМ;
		Фирма = глПараметрыРМ.Фирма;
	КонецЕсли;
	Возврат ?(ЗначениеЗаполнено(Фирма), Фирма, глПараметрыРМ.Фирма);
КонецФункции

Функция СформироватьТаблицуПоиска(КлючУникальности = Неопределено) Экспорт
	глПараметрыРМ = глПараметрыРМ;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступностьКаталоговТоваров.КаталогТоваров КАК КаталогТоваров
	|ПОМЕСТИТЬ ДоступныеКаталоги
	|ИЗ
	|	РегистрСведений.ДоступностьКаталоговТоваров КАК ДоступностьКаталоговТоваров
	|ГДЕ
	|	(ДоступностьКаталоговТоваров.Станция = &Станция
	|			ИЛИ ДоступностьКаталоговТоваров.Станция = ЗНАЧЕНИЕ(Справочник.Станции.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Товар,
	|	Товары.КодСУП КАК КодСУП,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ШтрихКоды.ШтрихКод, 4, 3) = ""   ""
	|			ТОГДА ПОДСТРОКА(ШтрихКоды.ШтрихКод, 1, 3)
	|		ИНАЧЕ ПОДСТРОКА(ШтрихКоды.ШтрихКод, 1, 13)
	|	КОНЕЦ КАК ШтрихКод,
	|	ПОДСТРОКА(ШтрихКоды.ШтрихКод, 1, 13) КАК ШК,
	|	Товары.Наименование КАК Наименование,
	|	""                                                                              "" КАК Представление,
	|	999 КАК ПозицияСовпадения,
	|	ЦеныСрезПоследних.Цена КАК Цена
	|ИЗ
	|	ДоступныеКаталоги КАК ДоступныеКаталоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Товары КАК Товары
	|		ПО (Товары.Владелец = ДоступныеКаталоги.КаталогТоваров)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихКоды КАК ШтрихКоды
	|		ПО (ШтрихКоды.Товар = Товары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.Розничная)) КАК ЦеныСрезПоследних
	|		ПО (ЦеныСрезПоследних.Номенклатура = Товары.Номенклатура)
	|ГДЕ
	|	Товары.ЕстьВПродаже
	|	И НЕ Товары.ПометкаУдаления
	|	И НЕ ШтрихКоды.ПометкаУдаления
	|	И (Товары.фАлкоголь <> 1
	|			ИЛИ НЕ ШтрихКоды.Ссылка ЕСТЬ NULL)");
	Запрос.УстановитьПараметр("Станция", глПараметрыРМ.Станция); 
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаНаСервере()); 
	ТаблицаПоиска = Запрос.Выполнить().Выгрузить();	 
	Возврат ТаблицаПоиска;
КонецФункции

Функция СформироватьТаблицуПоискаСПЛУ(КлючУникальности = Неопределено) Экспорт
	глПараметрыРМ = глПараметрыРМ;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступностьКаталоговТоваров.КаталогТоваров КАК КаталогТоваров
	|ПОМЕСТИТЬ ДоступныеКаталоги
	|ИЗ
	|	РегистрСведений.ДоступностьКаталоговТоваров КАК ДоступностьКаталоговТоваров
	|ГДЕ
	|	(ДоступностьКаталоговТоваров.Станция = &Станция
	|			ИЛИ ДоступностьКаталоговТоваров.Станция = ЗНАЧЕНИЕ(Справочник.Станции.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Товар,
	|	Товары.КодСУП КАК КодСУП,
	|	Товары.PLU	Как PLU,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ШтрихКоды.ШтрихКод, 4, 3) = ""   ""
	|			ТОГДА ПОДСТРОКА(ШтрихКоды.ШтрихКод, 1, 3)
	|		ИНАЧЕ ПОДСТРОКА(ШтрихКоды.ШтрихКод, 1, 13)
	|	КОНЕЦ КАК ШтрихКод,
	|	ПОДСТРОКА(ШтрихКоды.ШтрихКод, 1, 13) КАК ШК,
	|	Товары.Наименование КАК Наименование,
	|	""                                                                              "" КАК Представление,
	|	999 КАК ПозицияСовпадения,
	|	ЦеныСрезПоследних.Цена КАК Цена
	|ИЗ
	|	ДоступныеКаталоги КАК ДоступныеКаталоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Товары КАК Товары
	|		ПО (Товары.Владелец = ДоступныеКаталоги.КаталогТоваров)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихКоды КАК ШтрихКоды
	|		ПО (ШтрихКоды.Товар = Товары.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ТипЦен = ЗНАЧЕНИЕ(Справочник.ТипыЦен.Розничная)) КАК ЦеныСрезПоследних
	|		ПО (ЦеныСрезПоследних.Номенклатура = Товары.Номенклатура)
	|ГДЕ
	|	Товары.ЕстьВПродаже
	|	И НЕ Товары.ПометкаУдаления
	|	И НЕ ШтрихКоды.ПометкаУдаления
	|	И (Товары.фАлкоголь <> 1
	|			ИЛИ НЕ ШтрихКоды.Ссылка ЕСТЬ NULL)
	|	и Товары.PLU <> """"");
	Запрос.УстановитьПараметр("Станция", глПараметрыРМ.Станция); 
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаНаСервере()); 
	ТаблицаПоиска = Запрос.Выполнить().Выгрузить();	 
	Возврат ТаблицаПоиска;
КонецФункции

Функция СформироватьТаблицуТоваровДляПриготовления(КлючУникальности = Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкаУслугПоПриготовлению.Товар_КодСУП КАК Товар_КодСУП,
	|	НастройкаУслугПоПриготовлению.Услуга КАК Услуга,
	|	НастройкаУслугПоПриготовлению.Кратность КАК Кратность,
	|	НастройкаУслугПоПриготовлению.Специфика КАК Специфика
	|ПОМЕСТИТЬ КодыСУП
	|ИЗ
	|	РегистрСведений.НастройкаУслугПоПриготовлению КАК НастройкаУслугПоПриготовлению
	|ГДЕ
	|	НастройкаУслугПоПриготовлению.Действует
	|	И НастройкаУслугПоПриготовлению.ИнформационнаяБаза = &ИнформационнаяБаза
	|	И НастройкаУслугПоПриготовлению.Услуга.ЕстьВПродаже
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка КАК Товар,
	|	КодыСУП.Услуга КАК Услуга,
	|	КодыСУП.Кратность КАК Кратность,
	|	КодыСУП.Специфика КАК Специфика
	|ИЗ
	|	КодыСУП КАК КодыСУП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Товары КАК Товары
	|		ПО КодыСУП.Товар_КодСУП = Товары.КодСУП
	|ГДЕ
	|	Товары.ЕстьВПродаже");
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ПараметрыСеанса.ТекущаяИБ);

	ТоварыДляПриготовления = Запрос.Выполнить().Выгрузить();
	Возврат ТоварыДляПриготовления;
КонецФункции

Функция ЗначениеСтавкиНДС(СтавкаНДС) Экспорт
	Результат = УбратьВсеБуквы(Строка(СтавкаНДС));	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Число(Результат);
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

Функция ПараметрыРМ(РабочееМесто) Экспорт
	Попытка
		Результат = ЗначениеИзСтрокиВнутр(РабочееМесто.ПараметрыРМ);
	Исключение
		Результат = Новый Структура;
	КонецПопытки;
	Возврат Результат;
КонецФункции

Функция ПолучитьПутьДляЛогирования() Экспорт
	Возврат Константы.ПутьДляЛогирования.Получить();
КонецФункции

Функция _DecToAny(Знач тЗначение,тОснование = 2) Экспорт
   тРезультат = "";
   //тОснование = 2;
   Пока тЗначение > 0 Цикл
      тРезультат = Сред("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", тЗначение%тОснование + 1, 1) + тРезультат;
      тЗначение = Цел(тЗначение/тОснование) ;
   КонецЦикла;
   Возврат ?(тОснование = 2,Прав("00000000" + тРезультат,8),тРезультат);
КонецФункции

Функция _AnyToDec(Знач тЗначение, тОснование) Экспорт
   тРезультат=0;
 
   тДлина = СтрДлина(тЗначение);
   Для тСимвол = 1 По СтрДлина(тЗначение) Цикл
      тМножитель = 1;
      Для тСчет = 1 По тДлина-тСимвол Цикл 
         тМножитель = тМножитель * тОснование;
      КонецЦикла;
 
      тРезультат=тРезультат + (Найти("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", Сред(тЗначение, тСимвол, 1))-1) * тМножитель;
   КонецЦикла;
 
   Возврат Окр(тРезультат);
КонецФункции

Функция _Asc(value) Экспорт
    value = Лев(value,1);
    Если value = """" Тогда return 34; КонецЕсли;

      sc = Новый COMОбъект("MSScriptControl.ScriptControl");
      sc.language="VBscript";
      Возврат sc.eval("Asc("""+value+""")");
КонецФункции

Функция Компьютер() Экспорт
	Возврат ИмяКомпьютера();
КонецФункции

// Массив фирм (из списка ККМ рабочего места)
//
// Параметры:
//  РабочееМесто  - СправочникСсылка.РабочиеМеста 
//
// Возвращаемое значение:
//   Массив   - массив элементов типа СправочникСсылка.Фирмы
//
Функция ФирмыРабочегоМеста(Знач РабочееМесто = Неопределено) Экспорт
	глРабочееМесто = глРабочееМесто;
	глПараметрыРМ = глПараметрыРМ;
	Если РабочееМесто = Неопределено Тогда
		РабочееМесто = глРабочееМесто;
		ПараметрыРМ = глПараметрыРМ;
	Иначе
		//:РабочееМесто = Справочники.РабочиеМеста.ПустаяСсылка();
		ПараметрыРМ = ЗначениеИзСтрокиВнутр(РабочееМесто.ПараметрыРМ);
	КонецЕсли;
	МассивККМ = Новый Массив; МассивФирм = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыРМ.ККМ) Тогда
		Фирма = ПараметрыРМ.ККМ.Фирма;
		Если ЗначениеЗаполнено(Фирма) Тогда
			МассивФирм.Добавить(Фирма);		
		КонецЕсли;             		
	КонецЕсли;	
	
	Если глПараметрыРМ.ККМЕстьДоп Тогда
		Если ПараметрыРМ.ККМСписокДоп.Количество() Тогда
			
			Для Каждого Т Из ПараметрыРМ.ККМСписокДоп Цикл
				ККМ = Т.Значение;
				Фирма = ККМ.Фирма;
				Если ЗначениеЗаполнено(Фирма) Тогда
					МассивФирм.Добавить(Фирма);		
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	Если Не МассивФирм.Количество() Тогда
		МассивФирм.Добавить(ПараметрыРМ.Фирма);
	КонецЕсли;	
	Возврат СвернутьМассив(МассивФирм);
КонецФункции

// Массив фирм ИБ
//
// Параметры:
//  ИнформационнаяБаза  - СправочникСсылка.ИнформационныеБазы 
//
// Возвращаемое значение:
//   Массив   - массив элементов типа СправочникСсылка.Фирмы
//
Функция ФирмыИнформационнойБазы(Знач ИнформационнаяБаза = Неопределено) Экспорт
	Если ИнформационнаяБаза = Неопределено Тогда
		ИнформационнаяБаза = ПараметрыСеанса.ТекущаяИБ;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Фирмы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Фирмы КАК Фирмы
	|ГДЕ
	|	Фирмы.ИнформационнаяБаза = &ИнформационнаяБаза
	|	И НЕ Фирмы.ПометкаУдаления");

	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
КонецФункции
