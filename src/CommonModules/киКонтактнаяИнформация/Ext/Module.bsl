#Если НЕ ТонкийКлиент Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция киОсновнойАдрес(Клиент) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	КонтактнаяИнформация.Ссылка
	                      |ИЗ
	                      |	Справочник.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |ГДЕ
	                      |	КонтактнаяИнформация.Объект = &Клиент
	                      |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
						  |");
						  
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Неопределено;
КонецФункции

Функция киОсновнойТелефон(Клиент) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	КонтактнаяИнформация.Ссылка
	                      |ИЗ
	                      |	Справочник.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |ГДЕ
	                      |	КонтактнаяИнформация.Объект = &Клиент
	                      |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
						  |");
						  
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Неопределено;
КонецФункции
 
// Функция возвращает представление адреса собранного из полей значений Поле1 - Поле10
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Строка
//
Функция киПолучитьПредставлениеАдреса(Запись) Экспорт

	ТекПредставление = "";

	Если СокрЛП(Запись.Поле1) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле1);
	КонецЕсли;

	Если СокрЛП(Запись.Поле2) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле2);
	КонецЕсли;

	Если СокрЛП(Запись.Поле3) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле3);
	КонецЕсли;

	Если СокрЛП(Запись.Поле4) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле4);
	КонецЕсли;

	Если СокрЛП(Запись.Поле5) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле5);
	КонецЕсли;

	Если СокрЛП(Запись.Поле6) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(Запись.Поле6);
	КонецЕсли;

	Если СокрЛП(Запись.Поле7) <> "" Тогда
		ТекПредставление = ТекПредставление + ", дом № " + СокрЛП(Запись.Поле7);
	КонецЕсли;

	Если СокрЛП(Запись.Поле8) <> "" Тогда
		ТекПредставление = ТекПредставление + ", корпус " + СокрЛП(Запись.Поле8);
	КонецЕсли;

	Если СокрЛП(Запись.Поле9) <> "" Тогда
		ТекПредставление = ТекПредставление + ", кв." + СокрЛП(Запись.Поле9);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

// Функция определяет вид объекта контактной информации
//
// Параметры
//  ОбъектСсылка - Ссылка на объект контактной информации
// Возвращаемые значения
//  Возвращается ссылка на перечисление ВидыОбъектовКонтактнойИнформации,
//  соответствующее параметру ОбъектСсылка
Функция киВидОбъектаКИ(ОбъектСсылка) Экспорт

	//Если ОбъектСсылка = Неопределено Тогда
	//	Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	//ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
	//	Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	//ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Сотрудники") Тогда
	//	Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Сотрудники;
	//ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Организации") Тогда
	//	Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	//ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
	//	Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПодразделенияКомпании;
	//ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ЮридическиеЛица") Тогда
	//	Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ЮридическиеЛица;
	//ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
	//	Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	//ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ПодразделенияКонтрагента") Тогда
	//	Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПодразделенияКонтрагента;
	//Иначе
	//	Возврат Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка();
	//КонецЕсли; 
	
	Возврат "";
КонецФункции // ВидОбъектаКИ()

// Функция вызывается при начале выбора объекта контактной информации
//
// Параметры
//  ФормаЗаписи - форма записи регистра сведений КонтактнаяИнформация
//  Элемент - элемент формы записи регистра сведений КонтактнаяИнформация,
//  значение которого выбирается.
//
// Возвращаемое значение:
//   Булево - продолжить стандартную операцию выбора или нет.
//
Функция киНачалоВыбораОбъектаКИ(ФормаЗаписи, Элемент, ТекущийПользователь) Экспорт

	Если Элемент.Значение <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	СписокТиповОбъектов = Новый СписокЗначений;

	МассивТипов = ?(Элемент.ОграничениеТипа.Типы().Количество()>0, Элемент.ОграничениеТипа.Типы(), Элемент.ТипЗначения.Типы());
	Для каждого Тип Из МассивТипов Цикл
		НовыйТип = Новый(Тип);
		СписокТиповОбъектов.Добавить(НовыйТип.Ссылка.Метаданные().Имя, НовыйТип.Ссылка.Метаданные().Синоним);
	КонецЦикла;

	Если СписокТиповОбъектов.Количество() = 1 Тогда
		ВыбранноеЗначениеСписка = СписокТиповОбъектов[0];
	Иначе
		ВыбранноеЗначениеСписка = ФормаЗаписи.ВыбратьИзСписка(СписокТиповОбъектов, Элемент);
	КонецЕсли;
	
	Если ВыбранноеЗначениеСписка = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Элемент.Значение = Справочники[ВыбранноеЗначениеСписка.Значение].ПустаяСсылка();
		Возврат Истина;
	КонецЕсли;

КонецФункции

// Процедура устанавливает запись контактной информации определенного типа и вида основной
// для объекта в пространстве одного типа.
//
// Параметры:
//  СтруктураПараметров - структура, параметры записи, для которой надо установить признак основной
//   Ключи:
//    Объект, СправочникСсылка, значение измерния Объект регистра сведений
//    Тип, ПеречислениеСсылка.ТипыКонтактнойИнформации
//    Вид, СправочникСсылка.ВидыКонтактнойИнформации
//
Процедура киУстановитьЗаписьОсновной(Ссылка) Экспорт

	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА РАБОТЫ С АДРЕСНЫМ КЛАССИФИКАТОРОМ

// Функция определяет является ли последнее слово в строке допустимым 
//  сокращением, и если является, то обрезает его из строки
//
// Параметры
//  СтрокаЭлемента - Строка в которой необходимо обрезать сокращение
// Возвращаемые значения
//  Обрезаную строку в случае, если есть сокращение и полученную строку в 
// обратном случае
Функция киОбрезатьСокращение(Знач СтрокаЭлемента) Экспорт

	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;

КонецФункции

// Функция по для переданной строки определят необходимость дополнить её
// сокращением
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которго необходимо составить список сокращений
// Возвращаемые значения
//  Возвращается Неопределено, если строку дополнять не нужно или список 
// значений с сокращениями в обратном случае
Функция киПолучитьСписокСокращений(Знач Название, Уровень) Экспорт

	Название = СокрЛП(Название);

	Если ПустаяСтрока(Название) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если киОбрезатьСокращение(Название) <> Название Тогда // было что обрезать
		Возврат Неопределено; // для строки не требуется допонение сокращением
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Уровень", Уровень);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Уровень = &Уровень";

	Выборка = Запрос.Выполнить().Выбрать();

	СписокСокращений = Новый СписокЗначений();

	Пока Выборка.Следующий() Цикл
		СписокСокращений.Добавить(Выборка.Ссылка.Сокращение);
	КонецЦикла;

	Если СписокСокращений.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СписокСокращений;
	КонецЕсли;

КонецФункции

// Функция формирует строку с названием адресного элемента,
// которое состоит из наименования и сокращения
//
// Параметры:
//  АдресныйЭлемент - элемент справочника Адресный классфикатор.
//
// Возвращаемое значение:
//  Название адресного элемента
//
Функция киПолучитьНазвание(АдресныйЭлемент) Экспорт

	Если АдресныйЭлемент.Код = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(АдресныйЭлемент.Наименование) + " " + СокрЛП(АдресныйЭлемент.Сокращение)
	КонецЕсли;

КонецФункции

// Функция формирует строку с полным названием адресного элемента,
// которое состоит из наименования и сокращения самого адресного
// элемента и его "родителей"
//
// Параметры:
//  КодЭлемента - Код адресного элемента.
//
// Возвращаемое значение:
//  Название адресного элемента и его родителей через запятую
//
Функция киПолучитьПолноеНазвание(Знач КодЭлемента) Экспорт

	КодРегиона = Цел(КодЭлемента / киМаскаРегиона());
	КодЭлемента = КодЭлемента % киМаскаРегиона();

	КодРайона = Цел(КодЭлемента / киМаскаРайона());
	КодЭлемента = КодЭлемента % киМаскаРайона();

	КодГорода = Цел(КодЭлемента / киМаскаГорода());
	КодЭлемента = КодЭлемента % киМаскаГорода();

	КодНаселенногоПункта = Цел(КодЭлемента / киМаскаНасПункта());
	КодЭлемента = КодЭлемента % киМаскаНасПункта();

	КодУлицы = Цел(КодЭлемента / киМаскаУлицы());
	КодЭлемента = КодЭлемента % киМаскаУлицы();

	КодДома = Цел(КодЭлемента / киМаскаДома());

	Название = "";
	НовыйКод = 0;

	Если КодРегиона > 0 Тогда
		НовыйКод = КодРегиона * киМаскаРегиона();
		Название = Название + ", " + киПолучитьНазвание(киПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
	КонецЕсли;

	Если КодРайона > 0 Тогда
		НовыйКод = НовыйКод + КодРайона * киМаскаРайона();
		Название = Название + ", " + киПолучитьНазвание(киПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
	КонецЕсли;

	Если КодГорода > 0 Тогда
		НовыйКод = НовыйКод + КодГорода * киМаскаГорода();
		Название = Название + ", " + киПолучитьНазвание(киПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
	КонецЕсли;

	Если КодНаселенногоПункта > 0 Тогда
		НовыйКод = НовыйКод + КодНаселенногоПункта * киМаскаНасПункта();
		Название = Название + ", " + киПолучитьНазвание(киПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
	КонецЕсли;

	Если КодУлицы > 0 Тогда
		НовыйКод = НовыйКод + КодУлицы * киМаскаУлицы();
		Название = Название + ", " + киПолучитьНазвание(киПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
	КонецЕсли;

	Если КодДома > 0 Тогда
		НовыйКод = НовыйКод + КодДома * киМаскаДома();
		Название = Название + ", " + киПолучитьНазвание(киПолучитьСтруктуруАдресногоЭлемента(НовыйКод));
	КонецЕсли;

	Если СтрДлина(Название) > 2 Тогда
		Название = Сред(Название, 3);
	КонецЕсли;

	Возврат Название;

КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция киПолучитьМаскуПоТипу(ТипАдресногоЭлемента) Экспорт

	Если ТипАдресногоЭлемента = 1 Тогда
		Возврат киМаскаРегиона();

	ИначеЕсли ТипАдресногоЭлемента = 2 Тогда
		Возврат киМаскаРайона();

	ИначеЕсли ТипАдресногоЭлемента = 3 Тогда
		Возврат киМаскаГорода();

	ИначеЕсли ТипАдресногоЭлемента = 4 Тогда
		Возврат киМаскаНасПункта();

	ИначеЕсли ТипАдресногоЭлемента = 5 Тогда
		Возврат киМаскаУлицы();

	ИначеЕсли ТипАдресногоЭлемента = 6 Тогда
		Возврат киМаскаДома();

	Иначе
		Возврат киМаскаКвартиры();

	КонецЕсли;

КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  ТипАдресногоЭлемента -  число - тип адресного элемента.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция киПолучитьТипАдресногоЭлемента(КодЭлемента) Экспорт
	
	Если КодЭлемента = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если КодЭлемента % киМаскаРегиона() < 100  Тогда // регион 21 ноль и АА
		Возврат 1;
		
	ИначеЕсли КодЭлемента % киМаскаРайона() < 100 Тогда // район 18 ноль и АА
		Возврат 2;
		
	ИначеЕсли КодЭлемента % киМаскаГорода() < 100 Тогда // город 15 ноль и АА
		Возврат 3;
		
	ИначеЕсли КодЭлемента % киМаскаНасПункта() < 100 Тогда // населнныйп ункт 12 ноль и АА
		Возврат 4;
		
	ИначеЕсли КодЭлемента % киМаскаУлицы() < 100 Тогда // улица 8 ноль и АА
		Возврат 5;
		
	ИначеЕсли КодЭлемента % киМаскаДома() < 100 Тогда // дом 4 ноль и АА
		Возврат 6;
		
	Иначе // квартира
		Возврат 7;
		
	КонецЕсли;
	
КонецФункции

Функция киПолучитьСтруктуруАдресногоЭлемента(КодЭлемента) Экспорт

	ТексЗапроса = "ВЫБРАТЬ
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.Наименование,
	              |	АдресныйКлассификатор.Сокращение,
	              |	АдресныйКлассификатор.Индекс,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	              |	АдресныйКлассификатор.КодРайонаВКоде,
	              |	АдресныйКлассификатор.КодГородаВКоде,
	              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
	              |	АдресныйКлассификатор.КодУлицыВКоде
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.Код = &КодЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("КодЭлемента", КодЭлемента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде",
		                         Выборка.Код,
		                         Выборка.Наименование,
		                         Выборка.Сокращение,
		                         Выборка.ТипАдресногоЭлемента,
		                         Выборка.Индекс,
		                         Выборка.КодРегионаВКоде,
		                         Выборка.КодРайонаВКоде,
		                         Выборка.КодГородаВКоде,
		                         Выборка.КодНаселенногоПунктаВКоде,
		                         Выборка.КодУлицыВКоде);

	Иначе 
		Возврат киПолучитьПустуюСтруктуруАдреса();
		
	КонецЕсли;
	
КонецФункции

// Функция ставит в соответствие типу адресного элемента маску,
// через которую выделяется его значимый код
//
// Параметры:
//  АдресныйЭлемент - элемент справочника "Адресный классификатор"
// для которого необходимо получить маску.
//
// Возвращаемое значение:
// Число - маска, при делении на которую выделяется значимый код
// адресного элемента
//
Функция киПолучитьМаску(АдресныйЭлемент) Экспорт

	Возврат киПолучитьМаскуПоТипу(АдресныйЭлемент.ТипАдресногоЭлемента);

КонецФункции

// Функция возвращает структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
// Параметры:
// Нет.
//
// Возвращаемое значение:
// Струтктура - структуру с набором полей как у записи регистра сведений
//  АдресныйКлассификатор с пустым набором значений
//
Функция киПолучитьПустуюСтруктуруАдреса() Экспорт
	
	Возврат Новый Структура("Код,Наименование,Сокращение,ТипАдресногоЭлемента,Индекс,КодРегионаВКоде,КодРайонаВКоде,КодГородаВКоде,КодНаселенногоПунктаВКоде,КодУлицыВКоде", 0, "", "", 0, "", 0, 0, 0, 0, 0);
	
КонецФункции

// Функция ищет требуемый адресный элемент по названию и типу 
// и возвращает первый найденный. В качестве дополнения может 
// быть задан элемент "родитель"
//
// Параметры:
//  НазваниеЭлемента - название адресного элемента ( с сокращением)
//  ТипЭлемента - тип искомого адресного элемента
//  ЭлементРодитель - элемент "родитель"
//
// Возвращаемое значение:
//  Найденный элемент справоника Адресный классификатор или пустая ссылка в случае неудачи
//
Функция киПолучитьАдресныйЭлемент(НазваниеЭлемента, ТипЭлемента, КодЭлементаРодителя = 0) Экспорт

	Если (СокрЛП(НазваниеЭлемента) = "") ИЛИ (ТипЭлемента = 0) Тогда
		Возврат киПолучитьПустуюСтруктуруАдреса();
	КонецЕсли;

	ТексЗапроса = "ВЫБРАТЬ
	              |	АдресныйКлассификатор.Код,
	              |	АдресныйКлассификатор.КодРегионаВКоде,
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента
	              |ИЗ
	              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	              |
	              |ГДЕ
	              |	АдресныйКлассификатор.Наименование = &Наименование И
	              |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента";
	
	Запрос = Новый Запрос(ТексЗапроса);
	Запрос.УстановитьПараметр("Наименование", НазваниеЭлемента);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", ТипЭлемента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если КодЭлементаРодителя > 0 Тогда // проверка на соответствие подчинению родителю
		МаскаРодителя = киПолучитьМаскуПоТипу(киПолучитьТипАдресногоЭлемента(КодЭлементаРодителя));
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Если КодЭлементаРодителя > 0 Тогда // проверка на соответствие подчинению родителю
			Если Цел(КодЭлементаРодителя / МаскаРодителя) <> Цел(Выборка.Код / МаскаРодителя) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Возврат киПолучитьСтруктуруАдресногоЭлемента(Выборка.Код);
		
	КонецЦикла;
	
	Возврат киПолучитьПустуюСтруктуруАдреса();
	
КонецФункции

// Функция определяет входимость числа в заданный диапазон
//  При этом диапазон задается как это описано в комментарии к функции ЧислоВИнтервале
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
// Возвращаемое значение:
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция киВходитВИнтервал(Знач Номер, Интервал) Экспорт

	Если ПустаяСтрока("" + Номер) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ киТолькоЧисло(Номер) Тогда
		Возврат СтрЗаменить("" + Номер, " ", "") = СтрЗаменить("" + Интервал, " ", "");
	КонецЕсли;

	Номер = Число(Номер);

	Если киТолькоЧисло(Интервал) Тогда
		Если Номер = Число(Интервал) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Если Найти(Интервал,"Ч") > 0 Тогда // диапазон четных чисел
		Интервал      = СтрЗаменить(Интервал, "Ч", "");
		Четность = 2;
		
	ИначеЕсли Найти(Интервал,"Н") > 0 Тогда // диапазон нечетных чисел
		Интервал      = СтрЗаменить(Интервал, "Н", "");
		Четность = 1;
		
	ИначеЕсли (Найти(Интервал, "-") = 0) И киТолькоЧисло(Интервал) Тогда 
		// интервал это дом представленный в виде строки
		Возврат Ложь;
		
	Иначе
		Четность=0;
		
	КонецЕсли;
	
	Интервал = СтрЗаменить(Интервал, ")", ""); // на всякий случай уберем скобки
	Интервал = СтрЗаменить(Интервал, "(", "");
	Позиция  = Найти(Интервал, "-");
	Попали = 0;
	
	Если Позиция <> 0 Тогда
		МинЗначение  = Число(Лев(Интервал, Позиция - 1));
		МаксЗначение = Число(Сред(Интервал, Позиция + 1));
		Если (Номер >= МинЗначение) И (Номер <= МаксЗначение) Тогда
			Попали = 1;
		КонецЕсли;
		
	Иначе
		Если киТолькоЧисло(Интервал) Тогда
			Если Номер = Число(Интервал) Тогда
				Попали = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если (Попали = 1) И (
	((Четность = 2) И (Номер % 2 = 0)) ИЛИ 
	((Четность = 1) И (Номер % 2 = 1)) ИЛИ 
	 (Четность = 0)) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ВходитВИнтервал()

// Функция определяет входимость:
//  1. Номера дома (представленного в виде строки)
//     где Номер дома, это строка вида:
//     <СтрокаДом> пример: 58А, 32/1, 50А/8
//
//  2. Номера дома и номера корпуса (строения), в виде строки:
//     <СтрокаДом>к<СтрокаКорпус>,   пример: 32к1   это дом 32 корпус 1, 
//     <СтрокаДом>/<СтрокаКорпус>,   пример: 32/1   это дом 32 корпус 1, 
//     <СтрокаДом>стр<СтрокаКорпус>, пример: 32стр1 это дом 32 корпус 1, 
//		
//  3. Числа (номера дома) в заданный интервал чисел
//     При этом интервал задается строкой вида:
//     <Диапазон>[,<Диапазон>]
//     где Диапазон, это строка вида:
//     [Ч/Н]<Число>[-<Число>]
//     Префикс Ч или Н диапазона обозначает четность и нечетность входящих в него чисел
//     Пример: в интервал Ч12-14,Н1-5,20-29 входят числа 1,3,5,12,14 и все с 20 по 29
//
// Параметры: 
//  Номер - (число, строка) номер дома с корпусом
//  Интервал - (строка), интервал чисел (домов)
//
//  Истина - если заданное число входит в диапазон,
//  Ложь   - если не входит
//
Функция киНомерДомаВИнтервале(Номер, Знач Интервал) Экспорт
	
	Пока НЕ ПустаяСтрока(Интервал) Цикл

		Позиция = Найти(Интервал, ",");
		Если Позиция = 0 Тогда
			Возврат киВходитВИнтервал(Номер, Интервал);
		Иначе
			Если киВходитВИнтервал(Номер, СокрЛП(Лев(Интервал, Позиция - 1))) Тогда
				Возврат Истина;
			Иначе
				Интервал = Сред(Интервал, Позиция + 1);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции // НомерДомаВИнтервале()

// Функция определяет индекс по переданным улице, дому и корпусу
//
// Параметры: 
//  Улица - элемент справочника адресный классификатор с требуемой улицей
//  НомерДома - номер дома, для которго необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция киПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса) Экспорт

	Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Уровень", 6);
    Запрос.УстановитьПараметр("НижнийКод", Цел(Улица.Код / 10000000000) * 10000000000);
    Запрос.УстановитьПараметр("ВерхнийКод", Цел(Улица.Код / 10000000000 + 1) * 10000000000);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Индекс
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &Уровень И
	|	АдресныйКлассификатор.Код МЕЖДУ &НижнийКод И &ВерхнийКод";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Интервал = Врег(СокрЛП(Выборка.Наименование));

		Если (киНомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "К", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
			Возврат Выборка.Индекс;

		ИначеЕсли (киНомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "/", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
			Возврат Выборка.Индекс;

		ИначеЕсли (киНомерДомаВИнтервале(СокрЛП(НомерДома) + ?(НЕ ПустаяСтрока(НомерКорпуса), "стр", "") + СокрЛП(НомерКорпуса), Интервал)) Тогда
			Возврат Выборка.Индекс;

		КонецЕсли;

	КонецЦикла;

	Возврат Улица.Индекс;

КонецФункции

// Функция определяет индекс по переданным региону, району, городу, населенному пункту,
// улице, дому и корпусу
//
// Параметры: 
//  НазваниеРегиона - название региона( с сокращением)
//  НазваниеРайона - название района( с сокращением)
//  НазваниеГорода - название города( с сокращением)
//  НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//  Улица - название улицы ( с сокращением)
//  НомерДома - номер дома, для которго необходимо получить индекс
//  НомерКорпуса - номер корпуса
//
// Возвращаемое значение:
//  Строка - шестизначный почтовый индекс
//
Функция киПолучитьИндекс(Знач НазваниеРегиона, Знач НазваниеРайона, Знач НазваниеГорода, Знач НазваниеНаселенногоПункта, Знач НазваниеУлицы, Знач НомерДома, Знач НомерКорпуса) Экспорт

	РодительИндекса = киПолучитьПустуюСтруктуруАдреса();
	Индекс = "";
	
	Регион = киПолучитьАдресныйЭлемент(киОбрезатьСокращение(НазваниеРегиона), 1);
	Если Регион.Код > 0 Тогда
        РодительИндекса = Регион;
		Если НЕ ПустаяСтрока(Регион.Индекс) Тогда
			Индекс = Регион.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Район = киПолучитьАдресныйЭлемент(киОбрезатьСокращение(НазваниеРайона), 2, РодительИндекса.Код);
	Если Район.Код > 0 Тогда
		РодительИндекса = Район;
		Если НЕ ПустаяСтрока(Район.Индекс) Тогда
			Индекс = Район.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Город = киПолучитьАдресныйЭлемент(киОбрезатьСокращение(НазваниеГорода), 3, РодительИндекса.Код);
	Если Город.Код > 0 Тогда
		РодительИндекса = Город;
		Если НЕ ПустаяСтрока(Город.Индекс) Тогда
			Индекс = Город.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	НаселенныйПункт = киПолучитьАдресныйЭлемент(киОбрезатьСокращение(НазваниеНаселенногоПункта), 4, РодительИндекса.Код);
	Если НаселенныйПункт.Код > 0 Тогда
		РодительИндекса = НаселенныйПункт;
		Если НЕ ПустаяСтрока(НаселенныйПункт.Индекс) Тогда
			Индекс = НаселенныйПункт.Индекс;
		КонецЕсли;
	КонецЕсли;
	
	Улица = киПолучитьАдресныйЭлемент(киОбрезатьСокращение(НазваниеУлицы), 5, РодительИндекса.Код);
	Если Улица.Код > 0 Тогда
		ИндексУлицы = киПолучитьИндексПоУлицеДомуКорпусу(Улица, НомерДома, НомерКорпуса);
		Если НЕ ПустаяСтрока(ИндексУлицы) Тогда
			Индекс = ИндексУлицы;
		КонецЕсли;
	КонецЕсли;

	Возврат Индекс;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С АДРЕСНЫМ КОДОМ

// Маска  СС РРР ГГГ ППП УУУУ ДДДД КККК АА
//
//        СС   - код региона
//        РРР  - код района
//        ГГГ  - код города
//        ППП  - код населенного пункта
//        УУУУ - код улицы
//        ДДДД - код дома
//        КККК - код квартиры
//        АА   - код актуальности

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция киМаскаРегиона() Экспорт
	Возврат 100000000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция киМаскаРайона() Экспорт
	Возврат 100000000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция киМаскаГорода() Экспорт
	Возврат 100000000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция киМаскаНасПункта() Экспорт
	Возврат 100000000000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция киМаскаУлицы() Экспорт
	Возврат 10000000000;
КонецФункции

// Функция проверяет содержит ли строка только число
// без лидирующих нулей.
// Применяется при вычислении почтового индекса для адреса.
//
// Параметры:
//  ИспытуемаяСтрока.
//
// Возвращаемое значение:
//  Истина - строка содержит только число
//  Ложь - строка содержит не только число
//
Функция киТолькоЧисло(ИспытуемаяСтрока)

	Попытка
		Временно = Число(ИспытуемаяСтрока);
	Исключение
		Возврат Ложь;
	КонецПопытки;

	Возврат Строка(Число(ИспытуемаяСтрока)) = ИспытуемаяСтрока;

КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция киМаскаДома() Экспорт
	Возврат 1000000;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция киМаскаКвартиры() Экспорт
	Возврат 100;
КонецФункции

// Функция возвращает маску  для определения номера элемента в структуре кода 
//
// Параметры: 
// Нет
//
// Возвращаемое значение:
//  Число - маска с единица в значимых разрядах и нулями в остальных
//
Функция киМаксимальныйКод() Экспорт
	Возврат 9999999999999999999999999;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ДРУГИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//  Функция формирует сведения об указанном ЮрФизЛице. К сведениям относятся -
// наименование, адрес, номер телефона, банковские реквизиты.
//
// Параметры: 
//  ЮрФизЛицо   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//  ДляФизЛицаТолькоИнициалы - Для физ. лица выводить только инициалы имени и отчества.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция киСведенияОЮрФизЛице(ЮрФизЛицо, ДатаПериода, ДляФизЛицаТолькоИнициалы = Истина) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, КодПоОКПО, ИНН, КПП, Телефоны, Факс, ЮридическийАдрес, Банк, БИК, КоррСчет, НомерСчета, АдресБанка");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если ЮрФизЛицо = Неопределено Тогда
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарЮрФизЛицо", ЮрФизЛицо);
	
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		Возврат Сведения;
	КонецЕсли;
	
	МетаданныеЮрФизЛица = ЮрФизЛицо.Метаданные();
	Если ЕстьРеквизитДокумента("ОсновнойБанковскийСчет", МетаданныеЮрФизЛица) Тогда
		// Выберем основные сведения о контрагентеЮрФизЛицо.ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая
		Если ЮрФизЛицо.ОсновнойБанковскийСчет.БанкДляРасчетов.Пустая() Тогда
			ИмяРеквизитаБанка = "Банк";
		Иначе
			ИмяРеквизитаБанка = "БанкДляРасчетов";
		КонецЕсли;
	Иначе
		ИмяРеквизитаБанка = "Банк";
	КонецЕсли;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Представление КАК Наименование,
	|	НаименованиеПолное КАК ПолноеНаименование,
	|	ИНН,
	|	КПП,
	|	КодПоОКПО КАК КодПоОКПО,
	|	ОсновнойБанковскийСчет.НомерСчета КАК НомерСчета,
	|	ОсновнойБанковскийСчет."+ИмяРеквизитаБанка+" КАК Банк,
	|	ОсновнойБанковскийСчет."+ИмяРеквизитаБанка+".Код      КАК БИК,
	|	ОсновнойБанковскийСчет."+ИмяРеквизитаБанка+".КоррСчет КАК КоррСчет,
	|	ОсновнойБанковскийСчет."+ИмяРеквизитаБанка+".Адрес    КАК АдресБанка
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК Организации
	|
	|ГДЕ
	|	Организации.Ссылка = &ПарЮрФизЛицо";
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.ЮридическиеЛица") Тогда
		Сведения.Вставить("КодПоОКПО", Данные.КодПоОКПО);
		Сведения.Вставить("КПП",       Данные.КПП);
	Иначе
		Сведения.Вставить("КодПоОКПО", "");
		Сведения.Вставить("КПП",       "");
	КонецЕсли;
	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);
	Сведения.Вставить("НаименованиеПолное", Данные.ПолноеНаименование);

	Если Данные <> Неопределено Тогда
		Сведения.Вставить("Представление",    Данные.Наименование);
		Сведения.Вставить("ИНН",              Данные.ИНН);
		Сведения.Вставить("Телефоны",         киПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо,"Телефон"));
		Сведения.Вставить("Факс",         	  киПолучитьТелефонИзКонтактнойИнформации(ЮрФизЛицо,"Факс"));
		Сведения.Вставить("EMail",	          киПолучитьАдресЭлектроннойПочтыИзКонтактнойИнформации(ЮрФизЛицо));
		Сведения.Вставить("НомерСчета",       Данные.НомерСчета);
		Сведения.Вставить("Банк",             Данные.Банк);
		Сведения.Вставить("БИК",              Данные.БИК);
		Сведения.Вставить("АдресБанка",       Данные.АдресБанка);
		Сведения.Вставить("КоррСчет",         Данные.КоррСчет);
		Сведения.Вставить("ЮридическийАдрес", киПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Юридический", Ложь));
		Сведения.Вставить("ФактическийАдрес", киПолучитьАдресИзКонтактнойИнформации(ЮрФизЛицо,"Фактический", Ложь));
		Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
				Сведения.ПолноеНаименование = Сведения.Представление;
				Сведения.НаименованиеПолное = Сведения.Представление;
		КонецЕсли;
	КонецЕсли;

	Возврат Сведения;

КонецФункции // киСведенияОЮрФизЛице()

//  Функция формирует сведения об указанном Контрагенте. К сведениям относятся -
// наименование, адрес, номер телефона.
//
// Параметры: 
//  Контрагент   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция киСведенияОКонтрагенте(Контрагент, ДатаПериода) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, ФактическийАдрес, Телефоны, Факс, EMail");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если Контрагент = Неопределено Тогда
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарКонтрагент", Контрагент);

	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяСправочника = "Контрагенты";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Представление КАК Наименование,
	|	ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагент
	|
	|ГДЕ
	|	Контрагент.Ссылка = &ПарКонтрагент";
	
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();
	Сведения.Вставить("ПолноеНаименование", Данные.ПолноеНаименование);
	Сведения.Вставить("Представление",    	Данные.Наименование);
	Сведения.Вставить("Телефоны",         	киПолучитьТелефонИзКонтактнойИнформации(Контрагент,"Телефон"));
	Сведения.Вставить("Факс",         		киПолучитьТелефонИзКонтактнойИнформации(Контрагент,"Факс"));
	Сведения.Вставить("EMail",	          	киПолучитьАдресЭлектроннойПочтыИзКонтактнойИнформации(Контрагент));
	Сведения.Вставить("ФактическийАдрес", 	киПолучитьАдресИзКонтактнойИнформации(Контрагент,"Фактический", Ложь));
	Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
	КонецЕсли;

	Возврат Сведения;

КонецФункции // киСведенияОЮрФизЛице()

//  Функция формирует сведения об указанной Организации. //
// Параметры: 
//  Контрагент   - организация или физическое лицо, о котором собираются сведения.
//  ДатаПериода - дата, на которую выбираются сведения о ЮрФизЛице.
//
// Возвращаемое значение:
//  Сведения - собранные сведения.
//
Функция киСведенияООрганизации(Организация, ДатаПериода) Экспорт

	Сведения = Новый Структура("Представление, ПолноеНаименование, ФактическийАдрес, Телефоны, Факс, EMail");
	Запрос   = Новый Запрос;
	Данные   = Неопределено;

	Если Организация = Неопределено Тогда
		Возврат Сведения;
	КонецЕсли;

	Запрос.УстановитьПараметр("ПарОрганизация", Организация);

	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		ИмяСправочника = "Организации";
	Иначе
		Возврат Сведения;
	КонецЕсли;

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Представление КАК Представление,
	|	Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организация
	|
	|ГДЕ
	|	Организация.Ссылка = &ПарОрганизация";
	
	Данные = Запрос.Выполнить().Выбрать();
	Данные.Следующий();
	Сведения.Вставить("ПолноеНаименование",	Данные.Наименование);
	Сведения.Вставить("Представление",    	Данные.Наименование);
	Сведения.Вставить("Телефоны",         	киПолучитьТелефонИзКонтактнойИнформации(Организация,"Телефон"));
	Сведения.Вставить("Факс",         		киПолучитьТелефонИзКонтактнойИнформации(Организация,"Факс"));
	Сведения.Вставить("EMail",	          	киПолучитьАдресЭлектроннойПочтыИзКонтактнойИнформации(Организация));
	Сведения.Вставить("ФактическийАдрес", 	киПолучитьАдресИзКонтактнойИнформации(Организация,"Фактический", Ложь));
	Если НЕ ЗначениеЗаполнено(Сведения.ПолноеНаименование) Тогда
			Сведения.ПолноеНаименование = Сведения.Представление;
	КонецЕсли;

	Возврат Сведения;

КонецФункции // киСведенияООрганизации()

// Функция находит актуальное значение адреса в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//  ТипАдреса - тип контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного адреса
//
Функция киПолучитьСсылкуНаКартуПоКонтактнойИнформации(Объект, ТипАдреса = Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ТипАдреса) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации"
		  ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Сотрудник Тогда
			Окончание = "Сотрудника";
		Иначе
			Окончание = "Контрагента";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Окончание = "КонтЛица";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
		Окончание = "Сотрудника";
	КонецЕсли;
	
	Попытка
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание].ПолучитьОбъект().Ссылка;
	Исключение
		Возврат "";
	КонецПопытки;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	КонтактнаяИнформация.Представление,
	               |	КонтактнаяИнформация.Комментарий,
	               |	КонтактнаяИнформация.Поле1,
	               |	КонтактнаяИнформация.Поле2,
	               |	КонтактнаяИнформация.Поле3,
	               |	КонтактнаяИнформация.Поле4,
	               |	КонтактнаяИнформация.Поле5,
	               |	КонтактнаяИнформация.Поле6,
	               |	КонтактнаяИнформация.Поле7,
	               |	КонтактнаяИнформация.Поле8,
	               |	КонтактнаяИнформация.Поле9,
	               |	КонтактнаяИнформация.Поле10
	               |ИЗ
	               |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	               |ГДЕ
	               |	КонтактнаяИнформация.Объект = &Объект
	               |	И КонтактнаяИнформация.Тип = &Тип
	               |	И КонтактнаяИнформация.Вид = &Вид";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		СписокГородов = Новый СписокЗначений();
		СписокГородов.Добавить("Москва", "1");
		СписокГородов.Добавить("Санкт-Петербург", "2");
		
		Выборка = РезультатЗапроса.Выгрузить()[0];
		Город = СокрЛП(СтрЗаменить(Выборка.Поле2, " г",""));
		Улица = СокрЛП(СтрЗаменить(Выборка.Поле6, " ул",""));
		Дом	  = СокрЛП(Выборка.Поле7);
		ПоискРегиона = СписокГородов.НайтиПоЗначению(Город);
		Если ПоискРегиона = Неопределено тогда
			Сообщить("Регион текущего объекта отобразить на карте невозможно");
			Возврат "";	
		Иначе
			Ссылка = "http://map.samtel.ru/?city="+ПоискРегиона.Представление +"&ad="+Улица+Дом;
			Возврат Ссылка;
		КонецЕсли;	
			КонецЕсли;
КонецФункции // киПолучитьСсылкуНаКартуПоКонтактнойИнформации()


Функция киПолучитьАдресИзКонтактнойИнформации(Объект, ТипАдреса = "", Комментарий = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(ТипАдреса) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипАдреса="Фактический" Тогда
		Начало = "Факт";
	ИначеЕсли ТипАдреса="Регистрации"
		  ИЛИ ТипАдреса="Юридический" Тогда
		Начало = "Юр";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Сотрудник Тогда
			Окончание = "Сотрудника";
		Иначе
			Окончание = "Контрагента";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Окончание = "КонтЛица";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ЮридическиеЛица") Тогда
		Окончание = "ЮрЛица";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
		Окончание = "Сотрудника";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПодразделенияКомпании") Тогда
		Окончание = "Подразделения";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.ПодразделенияКонтрагента") Тогда
		Окончание = "ПодразделенияКонтрагента";
	КонецЕсли;
	
	Попытка
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[Начало+"Адрес"+Окончание].ПолучитьОбъект().Ссылка;
	Исключение
		Возврат "";
	КонецПопытки;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("Вид"   , ВидАдреса);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Комментарий
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = РезультатЗапроса.Выгрузить()[0];
		ПредставлениеАдреса = СокрЛП(Выборка.Представление);
		Если НЕ ПустаяСтрока(Выборка.Комментарий) И Комментарий Тогда
			ПредставлениеАдреса = ПредставлениеАдреса + " (" + СокрЛП(Выборка.Комментарий) + ")";
		КонецЕсли;
		Возврат СокрЛП(ПредставлениеАдреса);
	КонецЕсли;

КонецФункции // ПолучитьАдресИзКонтактнойИнформации()

// Функция находит актуальное значение телефона в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция киПолучитьТелефонИзКонтактнойИнформации(Объект, ТипТелефона = "") Экспорт

	Если НЕ ЗначениеЗаполнено(ТипТелефона) Тогда
		Возврат "";
	КонецЕсли;

	Если ТипТелефона = "Телефон" Тогда
		Начало = "Телефон";
	ИначеЕсли ТипТелефона = "Факс" Тогда
		Начало = "Факс";
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Сотрудник Тогда
			Окончание = "Сотрудника";
		Иначе
			Окончание = "Контрагента";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		Окончание = "КонтЛица";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
		Окончание = "Сотрудника";
	КонецЕсли;

	Попытка
		ВидТелефона = Справочники.ВидыКонтактнойИнформации[Начало + Окончание].ПолучитьОбъект().Ссылка;
	Исключение
		Возврат "";
	КонецПопытки;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Комментарий
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = РезультатЗапроса.Выгрузить()[0];
		ПредставлениеТелефона = СокрЛП(Выборка.Представление);
		Если НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
			ПредставлениеТелефона = ПредставлениеТелефона + " (" + СокрЛП(Выборка.Комментарий) + ")";
		КонецЕсли;
		Возврат СокрЛП(ПредставлениеТелефона);
	КонецЕсли;

КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Функция находит актуальное значение адреса электронной почты в контакной информации.
//
// Параметры:
//  Объект - СправочникСсылка, объект контактной информации
//
// Возвращаемое значение
//  Строка - представление найденного телефона
//
Функция киПолучитьАдресЭлектроннойПочтыИзКонтактнойИнформации(Объект) Экспорт

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Организации") Тогда
		Окончание = "Организации";
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Объект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.Сотрудник Тогда
			Окончание = "Сотрудника";
		Иначе
			Окончание = "Контрагента";
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
		Окончание = "Сотрудника";
	КонецЕсли;

	Попытка
		ВидАдресаЭлектроннойПочты = Справочники.ВидыКонтактнойИнформации["Почта" + Окончание].ПолучитьОбъект().Ссылка;
	Исключение
		Возврат "";
	КонецПопытки;

	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.УстановитьПараметр("Вид"   , ВидАдресаЭлектроннойПочты);
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.Комментарий
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|	И
	|	КонтактнаяИнформация.Вид = &Вид
	|";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = РезультатЗапроса.Выгрузить()[0];
		ПредставлениеАдресаЭлПочты = СокрЛП(Выборка.Представление);
		Если НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
			ПредставлениеАдресаЭлПочты = ПредставлениеАдресаЭлПочты + " (" + СокрЛП(Выборка.Комментарий) + ")";
		КонецЕсли;
		Возврат СокрЛП(ПредставлениеАдресаЭлПочты);
	КонецЕсли;

КонецФункции // ПолучитьТелефонИзКонтактнойИнформации()

// Функция приводит телефонный номер к одному из указанных в настройке шаблонов
//
// Параметры
//  НомерТЛФ – строка, номер телефона, который надо преобразовывать
//
// Возвращаемое значение:
//   Приведенный номер – строка, номер, приведенный к одному из шаблонов
//
Функция киПривестиНомерТелефонаКШаблону(НомерТЛФ) Экспорт
	
	// пока без шаблонов
	Возврат НомерТЛФ;
	
	ТолькоЦифрыНомера = "";
	КоличествоЦифрНомера = 0;
	
	Для а=1 По СтрДлина(НомерТЛФ) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(НомерТЛФ,а,1)) > 0 Тогда
			КоличествоЦифрНомера = КоличествоЦифрНомера + 1;
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТЛФ,а,1);
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоЦифрНомера = 0 Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	СтруктураШаблонов = Константы.ШаблоныТелефонныхНомеров.Получить().Получить();
	Если ТипЗнч(СтруктураШаблонов) <> Тип("Соответствие") Тогда
		Возврат НомерТЛФ;
	КонецЕсли; 
	ПолученныйШаблон = СтруктураШаблонов.Получить(КоличествоЦифрНомера);
	
	Если ПолученныйШаблон = Неопределено Тогда
		Возврат НомерТЛФ;
	КонецЕсли;
	
	ПриведенныйНомер = "";
	НомерЦифры = 0;
	
	Для а=1 По СтрДлина(ПолученныйШаблон) Цикл
		Если Сред(ПолученныйШаблон,а,1) = "9" Тогда
			НомерЦифры = НомерЦифры + 1;
			ПриведенныйНомер = ПриведенныйНомер + Сред(ТолькоЦифрыНомера,НомерЦифры,1);
		Иначе
			ПриведенныйНомер = ПриведенныйНомер + Сред(ПолученныйШаблон,а,1);
		КонецЕсли;
	КонецЦикла; 

	Возврат ПриведенныйНомер;
	
КонецФункции // ПривестиКШаблону()

#Если Клиент Тогда
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ МЕХАНИЗМА ХРАНЕНИЯ КОНТАКНОЙ ИНФОРМАЦИИ

Функция киНомерКартинкиТипаКонтактнойИнформации(ТипКИ = Неопределено) Экспорт

	Если ТипКИ = Неопределено Тогда
		Возврат 0;
	ИначеЕсли ПустаяСтрока(Строка(ТипКИ)) Тогда
		Возврат 4;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат 3;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		Возврат 0;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		Возврат 2;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат 1;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Возврат 4;
	ИначеЕсли ТипКИ = Перечисления.ТипыКонтактнойИнформации.Аська Тогда
		Возврат 6;
	КонецЕсли;

КонецФункции // инНомерКартинкиТипаКонтактнойИнформации()

// Процедура открывает форму справочника ВидыКонтактнойИнформации для выбора.
//
// Параметры:
//  РеджимВыбора - булево, задает режим выбора для открываемой формы.
//  ВладелецФормы - задает владельца для открываемой формы.
//  ЗначениеОтбораПоТипу - задает значение отбора по типу конт.инф.
//  ЗначениеОтбораПоВидуОбъектаКИ - задает значение отбора по виду объекта конт.инф.
Процедура киОткрытьФормуВыбораВидаКИ(РежимВыбора, ВладелецФормы, ЗначениеОтбораПоТипу = Неопределено,
                                     ЗначениеОтбораПоВидуОбъектаКИ = Неопределено) Экспорт

	ВыбФорма = Справочники.ВидыКонтактнойИнформации.ПолучитьФорму("ФормаВыбора", ВладелецФормы);
	ВыбФорма.РежимВыбора = РежимВыбора;
	Если ЗначениеОтбораПоТипу <> Неопределено Тогда
		ВыбФорма.Отбор.Тип.Значение = ЗначениеОтбораПоТипу;
		ВыбФорма.Отбор.Тип.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Тип.Доступность = Ложь;
	КонецЕсли; 
	Если ЗначениеОтбораПоВидуОбъектаКИ <> Неопределено Тогда
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Значение = ЗначениеОтбораПоВидуОбъектаКИ;
		ВыбФорма.Отбор.ВидОбъектаКонтактнойИнформации.Использование = Истина;
		ВыбФорма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбъектаКонтактнойИнформации.Доступность = Ложь;
	КонецЕсли; 
	ВыбФорма.Открыть();
	
КонецПроцедуры

// Процедура выполняется при активизации строки табличного поля, в котором
// отображается контактная информация объектов в их формах, и управляет
// доступностью кнопки командной пенели установки значения по умолчанию.
//
// Параметры:
//  Элемент - ТабличноеПоле
//  КнопкаУстановитьОсновным - Кнопка командной панели
//
Процедура киКонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, КнопкаУстановитьОсновным) Экспорт

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		КнопкаУстановитьОсновным.Доступность = Ложь;
	ИначеЕсли Элемент.ТекущиеДанные.ЗначениеПоУмолчанию Тогда
		КнопкаУстановитьОсновным.Доступность = Ложь;
	Иначе
		КнопкаУстановитьОсновным.Доступность = НЕ (Элемент.ТекущиеДанные.Объект = Неопределено);
	КонецЕсли; 

КонецПроцедуры

// Процедура выполняется при выводе строки табличного поля, в котором
// отображается контактная информация объектов в их формах.
//
// Параметры:
//  Элемент - ТабличноеПоле
//  ОформлениеСтроки - Оформление строки табличного поля
//  ДанныеСтроки - данные строки табличного поля
//
Процедура киКонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт

	Если ДанныеСтроки.ЗначениеПоУмолчанию Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,, Истина);
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Вид.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Вид.ИндексКартинки = киНомерКартинкиТипаКонтактнойИнформации(ДанныеСтроки.Тип);

КонецПроцедуры

Процедура СкопироватьКонтактнуюИнформацию(Источник, Приемник) Экспорт
	
	Если Вопрос("Скопировать контактную информацию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейИсточник = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписейИсточник.Отбор.Объект.Значение		= Источник.Ссылка;
	НаборЗаписейИсточник.Отбор.Объект.Использование	= Истина;
	НаборЗаписейИсточник.Отбор.Тип.Значение			= Источник.Тип;
	НаборЗаписейИсточник.Отбор.Тип.Использование	= Истина;
	НаборЗаписейИсточник.Отбор.Вид.Значение			= Источник.Вид;
	НаборЗаписейИсточник.Отбор.Вид.Использование	= Истина;
	НаборЗаписейИсточник.Прочитать();
	
	ТЗ = НаборЗаписейИсточник.Выгрузить();
	ТЗ.ЗаполнитьЗначения(Приемник.Вид,		"Вид");
	ТЗ.ЗаполнитьЗначения(Приемник.Ссылка,	"Объект");
	ТЗ.ЗаполнитьЗначения(Приемник.Тип, 		"Тип");
	
	НаборЗаписейПриемник = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	НаборЗаписейПриемник.Отбор.Объект.Значение		= Приемник.Ссылка;
	НаборЗаписейПриемник.Отбор.Объект.Использование	= Истина;
	НаборЗаписейПриемник.Отбор.Тип.Значение			= Приемник.Тип;
	НаборЗаписейПриемник.Отбор.Тип.Использование	= Истина;
	НаборЗаписейПриемник.Отбор.Вид.Значение			= Приемник.Вид;
	НаборЗаписейПриемник.Отбор.Вид.Использование	= Истина;
	НаборЗаписейПриемник.Прочитать();
	НаборЗаписейПриемник.Загрузить(ТЗ);
	
	Попытка
		НаборЗаписейПриемник.Записать(Истина);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// СофтФон

// Оставляет в номере телефона только цифры, все остальные символы удаляются
Функция УбратьИзНомераТелефонаВсеБуквы(НомерТелефона) Экспорт
	ТолькоЦифрыНомера = "";
	Для а=1 По СтрДлина(НомерТелефона) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(НомерТелефона,а,1)) > 0 Тогда
			ТолькоЦифрыНомера = ТолькоЦифрыНомера + Сред(НомерТелефона,а,1);
		КонецЕсли;
	КонецЦикла;
	Возврат ТолькоЦифрыНомера;
КонецФункции

// Функция сначала убирает из номера телефона все не относящееся к цифрам, а
// затем обрезает значащее количество цифр справа телефонного номера,
// количество этих цифр задается в константе сф_КоличествоХранимыхЦифрТелефона
// возвращает число
Функция ПреобразоватьНомерДляСохранения(Знач НомерТелефона, ЧислоСимволов) Экспорт
	//Префикс = "1";
	НомерТелефона = УбратьИзНомераТелефонаВсеБуквы(СокрЛП(НомерТелефона));
	//Возврат ?(НЕ ЗначениеЗаполнено(НомерТелефона), 0, Число(Префикс + Прав(СокрЛП(НомерТелефона), ЧислоСимволов)));
	Возврат Прав(НомерТелефона, ЧислоСимволов);
КонецФункции

// Функция раскладывает номер телефона, по полям для записи в КИ объекта
//
// Параметры
//  
//  НомерТелефона - строка, номер телефона для преобразования
//
// Возвращаемое значение:
//   Список значений
//
Функция РазложитьТелефонПоПолям(НомерТелефона, КоличествоСимволовВнутреннегоНомера = Неопределено) Экспорт

	КодСтраны = "";
	НачалоКодаСтраны = Найти(НомерТелефона, "+");
	Если НачалоКодаСтраны > 0 Тогда
		Для а = (НачалоКодаСтраны + 1) По СтрДлина(НомерТелефона) Цикл
			Если Сред(НомерТелефона, а, 1) = " " Тогда
				Прервать;
			КонецЕсли; 
			КодСтраны = КодСтраны + Сред(НомерТелефона, а, 1);
		КонецЦикла; 
	КонецЕсли; 
	КодСтраны = СокрЛП(КодСтраны);

	КодГорода = "";
	Если СтрЧислоВхождений(НомерТелефона, "(") = 1 И СтрЧислоВхождений(НомерТелефона, ")") = 1 Тогда
		НачалоКодаГорода = Найти(НомерТелефона, "(");
		КонецКодаГорода = Найти(НомерТелефона, ")");
		Если КонецКодаГорода > НачалоКодаГорода Тогда
			КодГорода = Сред(НомерТелефона, (НачалоКодаГорода + 1), (КонецКодаГорода - НачалоКодаГорода - 1));
		КонецЕсли;
	КонецЕсли;
	КодГорода = СокрЛП(КодГорода);

	СамТелефон = НомерТелефона;
	Если НЕ ПустаяСтрока(КодСтраны) Тогда
		СамТелефон = СтрЗаменить(СамТелефон, ("+" + КодСтраны), "");
		СамТелефон = СокрЛП(СамТелефон);
	КонецЕсли; 
	Если НЕ ПустаяСтрока(КодГорода) Тогда
		СамТелефон = СтрЗаменить(СамТелефон, ("(" + КодГорода + ")"), "");
		СамТелефон = СокрЛП(СамТелефон);
	КонецЕсли;
	
	а = 1;
	Пока а <= СтрДлина(СамТелефон) Цикл
		Если (КодСимвола(Сред(СамТелефон, а, 1)) >= 48 И КодСимвола(Сред(СамТелефон, а, 1)) <= 57) ИЛИ КодСимвола(Сред(СамТелефон, а, 1)) = 32 Тогда
			а = а + 1;
			Продолжить;
		КонецЕсли;
		СамТелефон = Сред(СамТелефон, 1, (а - 1)) + Сред(СамТелефон, (а + 1));
	КонецЦикла; 

	Если НЕ ПустаяСтрока(КодСтраны) И Лев(СокрЛ(КодСтраны), 1) <> "+" Тогда
		КодСтраны = СокрЛП(КодСтраны);
		Пока Лев(КодСтраны, 1) = "0" Цикл
			КодСтраны = Сред(КодСтраны, 2);
		КонецЦикла;
		Если НЕ ПустаяСтрока(КодСтраны) Тогда
			КодСтраны = "+" + КодСтраны;
		КонецЕсли; 
	КонецЕсли; 
	
	// {{{ Универсальный СофтФон }}} НАЧАЛО Код встраивания в произвольную конфигурацию
	// Если в поле был набран номер равный количеству символов внутреннего номера,
	//  то заполним его как внутренний
	Внутренний = "";
	Если НЕ КоличествоСимволовВнутреннегоНомера = Неопределено 
		И ТипЗнч(КоличествоСимволовВнутреннегоНомера) = Тип("Число")
		И КоличествоСимволовВнутреннегоНомера > 0 Тогда
	
		СамТелефонТмп = СтрЗаменить(СокрЛП(СамТелефон), " ", "");
		Если СтрДлина(СамТелефонТмп) <= КоличествоСимволовВнутреннегоНомера Тогда
			СамТелефон = "";
			Внутренний = СамТелефонТмп;
		КонецЕсли;
	КонецЕсли;
 
	СтруктураПолейТелефона = Новый Структура("КодСтраны,КодГорода,СамТелефон,Внутренний", КодСтраны, КодГорода, киПривестиНомерТелефонаКШаблону(СамТелефон), Внутренний);
	// {{{ Универсальный СофтФон }}} КОНЕЦ 
	
	Возврат СтруктураПолейТелефона;

КонецФункции // ()

// Функция проверяет строку на наличие значимых символов
//
// Параметры
//  ВыбСтрока  – строка для проверки
// Возвращаемое значение:
//   Строка - пробел или пустое значение строки
//
Функция ПроверкаПустойСтроки(ВыбСтрока, ПризнакЗапятой=Истина)
	
	Если ПустаяСтрока(ВыбСтрока) Тогда
		Возврат "";
	Иначе
		Возврат ?(ПризнакЗапятой,",","")+" ";
	КонецЕсли; 
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// из РаботаСДиалогами

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция инЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт
	
	Если ФормаОбъекта.ЭтоНовый() Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
			ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		Иначе // Справочник
			ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		КонецЕсли; 
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли; 
	
КонецФункции // инЗаписатьНовыйОбъектВФорме()

#КонецЕсли