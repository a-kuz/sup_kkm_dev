
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ 

// Функция определяет дату последней модификации существующего файла на диске
// Параметры
//  ИмяФайла  – Строка, содержащая полный путь к файла на диске.
//
// Возвращаемое значение:
//   Дата – Дата последней модификации файла
//
Функция ПолучитьДатуФайла(Знач ИмяФайла) Экспорт
	
	Файл = Новый Файл(ИмяФайла);
	Возврат Файл.ПолучитьВремяИзменения();
	
КонецФункции

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка – полное имя файла с учетом каталога.
//
Функция ПолучитьИмяФайла(ИмяКаталога, ИмяФайла) Экспорт
	
	Возврат ?(ПустаяСтрока(ИмяКаталога), ИмяФайла, ИмяКаталога + ?(ПустаяСтрока(ИмяФайла), "", "\" + ИмяФайла) );
	
КонецФункции

// Функция возвращает часть строки после последнего встреченного символа в строке.
//
// Параметры:
// ИсходнаяСтрока - анализируемая строка.
// СимволПоиска   - символ, служащий границей отсекаемой строки.
//
// Возвращаемое значение:
//  Строка - часть строки.
//
Функция ПолучитьЧастьСтрокиОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Выделяет из полного пути к файлу его имя (набор символов после последней \).
//
// Параметры
//  ПутьКФайлу     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьИмяФайлаИзПолногоПути(Знач ПутьКФайлу) Экспорт
	
	ИмяФайла = ПолучитьЧастьСтрокиОтделеннойСимволом(ПутьКФайлу, "\");
	Возврат ИмяФайла;
	
КонецФункции

// функция возвращает список запрещенных символов в именах файлов
//
// Возвращаемое значение:
//   Список значений в котором хранится список всех запрещенных символов в именах файлов.
//
Функция ПолучитьСписокЗапрещенныхСимволовВИменахФайлов()
	
	СписокСимволов = Новый СписокЗначений();
	
	СписокСимволов.Добавить("\");
	СписокСимволов.Добавить("/");
	СписокСимволов.Добавить(":");
	СписокСимволов.Добавить("*");
	СписокСимволов.Добавить("&");
	СписокСимволов.Добавить("""");
	СписокСимволов.Добавить("<");
	СписокСимволов.Добавить(">");
	СписокСимволов.Добавить("|");
	
	Возврат СписокСимволов;
	
КонецФункции

// функция формирует имя файла выбрасывая из первоначально предложенного имени все
// запрещенные символы
//
// Параметры:
//  ИмяФайла – Строка, содержащая имя файла, без каталога.
//
// Возвращаемое значение:
//   Строка – имя файла, которое может быть использовано в файловой системе
//
Функция УдалитьЗапрещенныеСимволыИмени(Знач ИмяФайла) Экспорт
	
	ИтоговоеИмяФайла = СокрЛП(ИмяФайла);
	
	Если ПустаяСтрока(ИтоговоеИмяФайла) Тогда
		
		Возврат ИтоговоеИмяФайла;
		
	КонецЕсли;
	
	СписокСимволов = ПолучитьСписокЗапрещенныхСимволовВИменахФайлов();
	
	Для Каждого СтрокаЗапретногоСимвола  Из СписокСимволов Цикл
		
		ИтоговоеИмяФайла = СтрЗаменить(ИтоговоеИмяФайла,  СтрокаЗапретногоСимвола.Значение, "");			
		
	КонецЦикла;
	
	Возврат ИтоговоеИмяФайла;
	
КонецФункции // УдалитьЗапрещенныеСимволыИмени()

// Процедура полное имя файла разбивает на путь в файлу и имя самого файла
//
// Параметры
//  ПолноеИмяФайла  – Строка, содержащая полное имя файла на диске.
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
Процедура ПолучитьКаталогИИмяФайла(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла) Экспорт
	
	// находим последний с конца "\" все что до него - это путь, после - имя
	НомерПозиции = СтрДлина(ПолноеИмяФайла);
	Пока НомерПозиции <> 0 Цикл
		
		Если Сред(ПолноеИмяФайла, НомерПозиции, 1) = "\" Тогда
			
			ИмяКаталога = Сред(ПолноеИмяФайла, 1, НомерПозиции - 1);
			ИмяФайла = Сред(ПолноеИмяФайла, НомерПозиции + 1);
			Возврат;
			
		КонецЕсли;
		
		НомерПозиции = НомерПозиции - 1;
		
	КонецЦикла;
	
	// так и не нашли слешей, значит все- это имя файла
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
КонецПроцедуры

// Процедура меняет расширение имени переданного файла (сам файл не меняется, меняется только строка)
//
// Параметры
//  ИмяФайла  – Строка, содержащая полное имя файла на диске.
//  НовоеРасширениеФайла  – Строка, содержащая новое расширение файла.
//
Процедура УстановитьРасширениеФайла(ИмяФайла, Знач НовоеРасширениеФайла) Экспорт
	
	// к расширению точку добавляем
	Если Сред(НовоеРасширениеФайла, 1, 1) <> "." Тогда
		ЗначениеНовогоРасширения = "." + НовоеРасширениеФайла;	
	Иначе
		ЗначениеНовогоРасширения = НовоеРасширениеФайла;	
	КонецЕсли;
	// если не находим точку в текущем имени файла, то просто приписываем к нему новое расширение с конца
	ПозицияТочки = СтрДлина(ИмяФайла);
	Пока ПозицияТочки >= 1 Цикл
		
		Если Сред(ИмяФайла, ПозицияТочки, 1) = "." Тогда
			
			ИмяФайла = Сред(ИмяФайла, 1, ПозицияТочки - 1) + ЗначениеНовогоРасширения;
			Возврат; 
			
		КонецЕсли;
		
		ПозицияТочки = ПозицияТочки - 1;	
	КонецЦикла;
	
	// не нашли точку в имени файла
	ИмяФайла = ИмяФайла + ЗначениеНовогоРасширения;	
	
КонецПроцедуры

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьРасширениеФайла(ИмяФайла) Экспорт
	
	Расширение = ПолучитьЧастьСтрокиОтделеннойСимволом(ИмяФайла, ".");
	Возврат Расширение;
	
КонецФункции // ПолучитьРасширениеФайла()

// Формирует имя каталога для сохранения/чтения файлов. Для различных типов объектов возможны 
// различные алгоритмы определения каталога.
//
// Параметры
//  ОбъектФайла  – Ссылка на объект данных, для которого прикрепляются файлы.
//  ТекущийПользователь - Ссылка на справочник Пользователи, с текущим пользователем
//                 конфигурации.
//
// Возвращаемое значение:
//   Строка – каталог файлов для указанного объекта и пользователя.
//
Функция ПолучитьИмяКаталога(ТекущийПользователь) Экспорт
	
	// ЗАГЛУШКА
	// Получим рабочий каталог из свойств пользователя.
	//РабочийКаталог = ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнойКаталогФайлов");
	
	//// Если рабочий каталог не указан получим каталог временных файлов программы
	//Если ПустаяСтрока(РабочийКаталог) Тогда
	РабочийКаталог = КаталогВременныхФайлов();
	//КонецЕсли;
	
	// Так как при различных указаниях рабочего каталога возможно наличие или отсутствие
	// последнего слеша, приведем строку каталога к унифицированному виду - без слеша на конце.
	Если Прав(РабочийКаталог, 1) = "\" Тогда
		РабочийКаталог = Лев(РабочийКаталог, СтрДлина(РабочийКаталог) - 1);
	КонецЕсли;
	
	Возврат РабочийКаталог;
	
КонецФункции // ПолучитьИмяКаталога()

// Формирует строку фильтра для диалога выбора файла с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора файла.
//
Функция ПолучитьФильтрФайлов()
	
	Возврат "Все файлы (*.*)|*.*|"
	+ "Документ Microsoft Word (*.doc)|*.doc|"
	+ "Документ Microsoft Excell (*.xls)|*.xls|"
	+ "Документ Microsoft PowerPoint (*.ppt)|*.ppt|"
	+ "Документ Microsoft Visio (*.vsd)|*.vsd|"
	+ "Письмо электронной почты (*.msg)|*.msg|"
	+ "Картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|"
	+ "Текстовый документ (*.txt)|*.txt|"
	+ "Табличный документ (*.mxl)|*.mxl|";
	
КонецФункции // ПолучитьФильтрФайлов()

Функция ИзвлечьТекст(ПутьКфайлу, Кодировка = "windows-1251", Логировать = Ложь) Экспорт
	Попытка
		ЧТ = Новый ЧтениеТекста(ПутьКфайлу, Кодировка,,,Ложь);	
		Результат = ЧТ.Прочитать();
	Исключение
		ЗарегистрироватьСобытие("Ошибка извлечения текста", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;	
	ЧТ.Закрыть();
	Возврат Результат;
КонецФункции

#Если Клиент Тогда
	
	// Позволяет пользователю выбрать каталог на диске.
	//
	// Параметры
	//  ИмяКаталога  – Строка, содержащая начальный путь к каталогу на диске.
	//	ЗаголовокДиалога - Строка, содержащая заголовок диалога
	//
	// Возвращаемое значение:
	//   Булево – Истина, если каталог выбран, Ложь, если нет.
	//
	Функция ВыбратьКаталог(ИмяКаталога, Знач ЗаголовокДиалога = "Укажите каталог") Экспорт
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог.Заголовок = ЗаголовокДиалога;
		Диалог.МножественныйВыбор = Ложь;
		Диалог.Каталог = ИмяКаталога;
		
		Если Диалог.Выбрать() Тогда
			ИмяКаталога = Диалог.Каталог;
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецФункции // ВыбатьКаталог()
	
	// Создает и устанавливает реквизиты диалога выбора фала.
	//
	// Параметры
	//  МножественныйВыбор – Булево, признак множественного выбора.
	//  НачальныйКаталог – Строка, содержащая начальный каталог выбора файла.
	//
	// Возвращаемое значение:
	//   ДиалогВыбораФайлов – созданный диалог.
	//
	Функция ПолучитьДиалогВыбораФайлов(МножественныйВыбор=Ложь, НачальныйКаталог = "", ФильтрФайлов="") Экспорт
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.Каталог						= НачальныйКаталог;
		Диалог.Заголовок					= "Выберите файл...";
		Диалог.Фильтр						= ?(ФильтрФайлов="", ПолучитьФильтрФайлов(), ФильтрФайлов);
		Диалог.ПредварительныйПросмотр		= Истина;
		Диалог.ПроверятьСуществованиеФайла	= Истина;
		Диалог.МножественныйВыбор			= МножественныйВыбор;
		
		Возврат Диалог;
		
	КонецФункции
	
	// Проверяет наличие файла
	//
	// Параметры
	//  ИмяФайла	- имя файла, может быть вместе с каталогом, может быть пусто
	//  ИмяКаталога - имя каталога, может быть пусто
	//  ФлагМолча	- выдавать или нет сообщение об отсутствии файла
	//
	// Возвращаемое значение:
	//   Булево – Истина, если файл существует, Ложь, если файла нет.
	//
	Функция ПроверитьСуществованиеФайла(ИмяФайла, ИмяКаталога="", ФлагМолча=Ложь) Экспорт
		
		ФайлНаДиске = Новый Файл( ПолучитьИмяФайла(ИмяКаталога, ИмяФайла) );
		Если ФайлНаДиске.Существует() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ФлагМолча Тогда
			Предупреждение("Файл был удален или перемещен!",5);
		КонецЕсли;
		
		Возврат Ложь;
	КонецФункции
	
	// Проверяет наличие каталога на диске и предлагает создать, если каталога не существует.
	//
	// Параметры
	//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
	//
	// Возвращаемое значение:
	//   Булево – Истина, если каталог существует или создан, Ложь, если каталога нет.
	//
	Функция ПроверитьСуществованиеКаталога(ИмяКаталога, ФлагМолча=Ложь) Экспорт
		
		КаталогНаДиске = Новый Файл(ИмяКаталога);
		Если КаталогНаДиске.Существует() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ ФлагМолча Тогда
			Ответ = Вопрос("Указанный каталог не существует. Создать каталог?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СоздатьКаталог(ИмяКаталога);
		
		КаталогНаДиске = Новый Файл(ИмяКаталога);
		Возврат КаталогНаДиске.Существует();
	КонецФункции
	
#КонецЕсли