#Область ТочкаВхода

Функция ОтправитьЧекВЕГАИС(УТМ,ВходныеПараметры) Экспорт
	
	ТекстОшибки = "";
	
	ДанныеЗапроса = ПодготовитьДанные(ВходныеПараметры,ТекстОшибки);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Новый Структура("ОписаниеОшибки",ТекстОшибки);
	КонецЕсли;
	
	ДанныеВозврата = СформироватьHTTPЗапрос(УТМ,ДанныеЗапроса);
	//ис(ДанныеВозврата);
	
	Возврат ДанныеВозврата;
	
КонецФункции

#Конецобласти

#Область ДопФункции

Функция ПодготовитьДанные(ВходныеПараметры,ТекстОшибки)
	
	СтруктураЗапроса = Новый Структура;
	СтруктураЗапроса.Вставить("ТипЗапроса"  , "POST");
	СтруктураЗапроса.Вставить("АдресЗапроса", "");
	СтруктураЗапроса.Вставить("ТелоЗапроса" , "");
	СтруктураЗапроса.Вставить("ТекстXML"    , "");
	СтруктураЗапроса.Вставить("Заголовки"   , Новый Соответствие);
	
	Если ВходныеПараметры.Свойство("Шапка") Тогда
		ШапкаЧека = ВходныеПараметры.Шапка;
	Иначе
		ТекстОшибки = "Нет ""Шапки"" чека";
		Возврат Новый Структура;
	КонецЕсли;
	
	Если ВходныеПараметры.Свойство("СтрокиЧека") Тогда
		СтрокиЧека = ВходныеПараметры.СтрокиЧека;
	Иначе
		ТекстОшибки = "Нет Строк Чека";
		Возврат Новый Структура;
	КонецЕсли;
	
	
	ТекстXML = ТекстXMLВыгрузкиЧека(ШапкаЧека,СтрокиЧека,ТекстОшибки);
	
	Если не ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ВремГраница = СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	
	ТелоЗапроса = Новый ТекстовыйДокумент();
	ТелоЗапроса.ДобавитьСтроку("--" + ВремГраница);
	ТелоЗапроса.ДобавитьСтроку("Content-Disposition: form-data; name=""xml_file""");
	ТелоЗапроса.ДобавитьСтроку("Content-Type: text/xml; charset=utf-8");
	ТелоЗапроса.ДобавитьСтроку("");
	ТелоЗапроса.ДобавитьСтроку(ТекстXML);
	ТелоЗапроса.ДобавитьСтроку("--" + ВремГраница + "--");
	
	СтруктураЗапроса.АдресЗапроса = "/xml";
	СтруктураЗапроса.ТелоЗапроса  = ТелоЗапроса.ПолучитьТекст();
	СтруктураЗапроса.ТекстXML     = ТекстXML;
	
	СтруктураЗапроса.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + ВремГраница);
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция ТекстXMLВыгрузкиЧека(Шапка,СтрокиЧека,ТекстОшибки)
	
	ТекстОшибки = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Cheque");
	
	Если не Шапка.Свойство("ИНН") Тогда
		ТекстОшибки = "не задан ИНН";
		Возврат "";
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("inn", XMLСтрока(Шапка.ИНН));
	
	Если Шапка.Свойство("КПП") и ЗначениеЗаполнено(Шапка.КПП) Тогда
		ЗаписьXML.ЗаписатьАтрибут("kpp", XMLСтрока(Шапка.КПП));
	КонецЕсли;
	
	Если не Шапка.Свойство("АдресМагазина") Тогда
		ТекстОшибки = "не задан АдресМагазина";
		Возврат "";
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("address", XMLСтрока(Шапка.АдресМагазина));
	
	Если не Шапка.Свойство("НаименованиеМагазина") Тогда
		ТекстОшибки = "не задан НаименованиеМагазина";
		Возврат "";
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("name", XMLСтрока(Шапка.НаименованиеМагазина));
	
	Если не Шапка.Свойство("ЗаводскойНомерККМ") Тогда
		ТекстОшибки = "не задан ЗаводскойНомерККМ";
		Возврат "";
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("kassa", XMLСтрока(Шапка.ЗаводскойНомерККМ));
	
	Если не Шапка.Свойство("НомерСменыККМ") Тогда
		ТекстОшибки = "не задан НомерСменыККМ";
		Возврат "";
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("shift", XMLСтрока(Шапка.НомерСменыККМ));
	
	Если не Шапка.Свойство("НомерЧекаККМ") Тогда
		ТекстОшибки = "не задан НомерЧекаККМ";
		Возврат "";
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("number", XMLСтрока(Шапка.НомерЧекаККМ));
	
	Если не Шапка.Свойство("ДатаВремяЧека") Тогда
		ТекстОшибки = "не задан ДатаВремяЧека";
		Возврат "";
	КонецЕсли;
	ЗаписьXML.ЗаписатьАтрибут("datetime", XMLСтрока(Формат(Шапка.ДатаВремяЧека,"ДФ=ddMMyyHHmm")));
	
	КолСтрок = СтрокиЧека.Количество();
	
	Для Инд = 0 по КолСтрок - 1 Цикл
		СтрокаЧека = СтрокиЧека[инд];
		ЗаписьXML.ЗаписатьНачалоЭлемента("Bottle");
		ЗаписьXML.ЗаписатьАтрибут("price", XMLСтрока(Формат(СтрокаЧека.Цена,"ЧДЦ=2; ЧРД=.; ЧГ=0")));
		ЗаписьXML.ЗаписатьАтрибут("barcode", XMLСтрока(СтрокаЧека.ШтрихкодМарки));
		Если СтрокаЧека.Свойство("ШтрихкодТовара") и ЗначениеЗаполнено(СтрокаЧека.ШтрихкодТовара) Тогда
			ЗаписьXML.ЗаписатьАтрибут("ean", XMLСтрока(СтрокаЧека.ШтрихкодТовара));
		КонецЕсли;
		Если СтрокаЧека.Свойство("Объем") и ЗначениеЗаполнено(СтрокаЧека.Объем) Тогда
			ЗаписьXML.ЗаписатьАтрибут("volume", XMLСтрока(Формат(СтрокаЧека.Объем,"ЧДЦ=4; ЧРД=.; ЧГ=0")));
		КонецЕсли;
		ЗаписьXML.ЗаписатьКонецЭлемента();  // Строка
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Чек
	
	ТекстXML = ЗаписьXML.Закрыть();
	
	Возврат ТекстXML;
	
КонецФункции

Функция СформироватьHTTPЗапрос(УТМ,ДанныеЗапроса)
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("ОписаниеОшибки"      , "");
	
	HTTPЗапрос = Новый HTTPЗапрос(ДанныеЗапроса.АдресЗапроса, ДанныеЗапроса.Заголовки);
	
	Если НЕ ПустаяСтрока(ДанныеЗапроса.ТелоЗапроса) Тогда
		HTTPЗапрос.УстановитьТелоИзСтроки(ДанныеЗапроса.ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(СокрЛП(УТМ.АдресУТМ), УТМ.ПортУТМ,,,, 60);
		HTTPОтвет = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Исключение
		СтруктураОтвета.ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат СтруктураОтвета;
	КонецПопытки;
	
	СтруктураОтвета = ПрочитатьОтветМодуляЕГАИС(HTTPОтвет.КодСостояния, HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8));
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПрочитатьОтветМодуляЕГАИС(КодСостояния,ОтветМодуляЕГАИС)
	
	СтруктураОтвета = Новый Структура();
	СтруктураОтвета.Вставить("ОписаниеОшибки"      , "");
	СтруктураОтвета.Вставить("ОтветМодуляЕГАИС"    , ОтветМодуляЕГАИС);
	СтруктураОтвета.Вставить("ИдентификаторЗапроса", "");
	СтруктураОтвета.Вставить("Подпись"             , "");
	
	Если КодСостояния = 504 Тогда
		СтруктураОтвета.ОписаниеОшибки = "Нет связи с УТМ";
	Иначе
		Если КодСостояния <> 200 Тогда
			СтруктураОтвета.ОписаниеОшибки = "Сервер отклонил запрос:";
		КонецЕсли;
		
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(ОтветМодуляЕГАИС);
			
			ПостроительDOM = Новый ПостроительDOM;
			ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
			
			УзлыURL = ДокументDOM.ПолучитьЭлементыПоИмени("*");
			
			Для Каждого УзелURL Из УзлыURL Цикл
				Если УзелURL.ИмяУзла = "url" Тогда
					СтруктураОтвета.ИдентификаторЗапроса = УзелURL.ТекстовоеСодержимое;
				ИначеЕсли УзелURL.ИмяУзла = "sign" Тогда
					СтруктураОтвета.Подпись = УзелURL.ТекстовоеСодержимое;
				ИначеЕсли УзелURL.ИмяУзла = "error" Тогда
					СтруктураОтвета.ОписаниеОшибки = СтруктураОтвета.ОписаниеОшибки + Символы.ПС + УзелURL.ТекстовоеСодержимое;
				КонецЕсли;
			КонецЦикла;
			
			ЧтениеXML.Закрыть();
		Исключение
			СтруктураОтвета.ОписаниеОшибки = СтруктураОтвета.ОписаниеОшибки + Символы.ПС + ОтветМодуляЕГАИС;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти