#Если НЕ ТонкийКлиент Тогда
      	
////////////////////////////////////////////////////////////////////////
// КАРТЫ ДОСТУПА 

// Возвращает заказ, открытый на клиента с указанной картой доступа
Функция ЗаказПоКартеДоступа(КартаДоступа) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КартаДоступа", КартаДоступа);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОткрытыеЗаказыПоКартам.Заказ КАК Заказ
	|ПОМЕСТИТЬ т
	|ИЗ
	|	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|		ПО ОткрытыеЗаказыПоКартам.Заказ = ЗаказДопИнф.Заказ
	|ГДЕ
	|	ОткрытыеЗаказыПоКартам.КартаДоступа = &КартаДоступа
	|	И ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Марки.Заказ
	|ИЗ
	|	РегистрСведений.Марки КАК Марки
	|ГДЕ
	|	Марки.Заказ.КартаДоступа = &КартаДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Заказ
	|ИЗ
	|	т КАК т";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		//==========================================
		//запишем последнюю активность по бейджу
		НаборЗаписей = РегистрыСведений.ОткрытыеЗаказыПоКартам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КартаДоступа.Установить(КартаДоступа.Ссылка);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда 
			НоваяЗапись = НаборЗаписей[0];
			НоваяЗапись.ВремяПоследнейАктивности = ТекущаяДатаНаСервере();
			НоваяЗапись.МестоПоследнейАктивности = глРабочееМесто;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом( НаборЗаписей, "Объект.Записать(Истина)" );
		КонецЕсли;
		//==========================================
		Возврат Выборка.Заказ;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 

КонецФункции

// Возвращает массив карт доступа, привязанных к указанному заказу
Функция КартыДоступаПоЗаказу(Заказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОткрытыеЗаказыПоКартам.КартаДоступа
	|ИЗ
	|	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	|ГДЕ
	|	ОткрытыеЗаказыПоКартам.Заказ = &Заказ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Массив = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Массив.Добавить(Выборка.КартаДоступа);
	КонецЦикла; 

	Возврат Массив;
	
КонецФункции

// Привязывает заказ к указанной карте доступа
// В случае успеха возвращает пустую строку
Функция РегистрацияЗаказаПоКартеДоступа(КартаДоступа, Заказ) Экспорт

	Если Не ЗначениеЗаполнено(КартаДоступа) Тогда
		Возврат "Не указана карта!";
	КонецЕсли; 
	
	ЗаказПоКарте = ЗаказПоКартеДоступа(КартаДоступа);
	Если ЗаказПоКарте <> Неопределено Тогда
		Возврат "По указанной карте существует открытый заказ №" + УбратьВсеБуквы(ЗаказПоКарте.Номер) +" от "+ЗаказПоКарте.Дата+"!";
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.ОткрытыеЗаказыПоКартам.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.КартаДоступа.Установить(КартаДоступа);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.КартаДоступа = КартаДоступа;
	НоваяЗапись.Заказ = Заказ; 
	НоваяЗапись.ВремяПоследнейАктивности = ТекущаяДатаНаСервере();
	НоваяЗапись.МестоПоследнейАктивности = глРабочееМесто;

	ИнтерфейсРМ.ПопыткаДействияСОбъектом( НаборЗаписей, "Объект.Записать(Истина)" );
	
	Возврат "";
	
КонецФункции
 
// Отвязывает от карты доступа все заказы
// Возвращаемое значение:
//	Истина		- действие выполнено без ошибок
//  Ложь		- произошла ошибка и пользователь отказался от повторной попытки
Функция ОсвободитьКартуДоступа(КартаДоступа) Экспорт

	Если Не ЗначениеЗаполнено(КартаДоступа) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.ОткрытыеЗаказыПоКартам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.КартаДоступа.Установить(КартаДоступа);
	
	Возврат ИнтерфейсРМ.ПопыткаДействияСОбъектом( НаборЗаписей, "Объект.Записать()" );
	
КонецФункции

// Отвязывает карту доступа от указанного заказа
Функция ОсвободитьКартуДоступаОтЗаказа(Заказ) Экспорт

	Если Не ЗначениеЗаполнено(Заказ) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОткрытыеЗаказыПоКартам.КартаДоступа
	|ИЗ
	|	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	|ГДЕ
	|	ОткрытыеЗаказыПоКартам.Заказ = &Заказ";
	
	Выборка = Запрос.Выполнить().Выбрать();

    Пока Выборка.Следующий() Цикл
		Если НЕ ОсвободитьКартуДоступа(Выборка.КартаДоступа) Тогда
			Возврат Ложь;	
		КонецЕсли;
	КонецЦикла; 
	
	Выб = РегистрыСведений.ЗаказыПоКассирам.Выбрать();
	Пока Выб.Следующий() Цикл
		Если Выб.Заказ = Заказ Тогда
			Выб.ПолучитьМенеджерЗаписи().Удалить();
		КонецЕсли;
	КонецЦикла;
	
	глРабочееМесто = глРабочееМесто;
	ВсеРМ = ВсеРМ();
	Для Каждого РМ Из ВсеРМ Цикл
		Если РМ <> глРабочееМесто Тогда
			РегистрыСведений.ОбработкаСобытий.СоздатьЗапись(РМ , "",ТекущаяДатаНаСервере(), ПредопределенноеЗначение("Перечисление.ТипыСобытий.ТребованиеСбросаЗаказа"), "ГостьЗавершилПокупки", РМ);
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

Функция ВсеРМ() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РабочиеМеста.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.ИнформационнаяБаза = &ИнформационнаяБаза
	|	И РабочиеМеста.ПометкаУдаления = ЛОЖЬ"); 

	Запрос.УстановитьПараметр("ИнформационнаяБаза", ПараметрыСеанса.ТекущаяИБ);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции


////////////////////////////////////////////////////////////////////////
// ПЕЙДЖЕРЫ

// Возвращает массив пейджеров, выданных по указанному заказу, станции
Функция ВыданныеПейджеры(Заказ, Станция=Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ",   Заказ);
	Запрос.УстановитьПараметр("Станция", Станция);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыданныеПейджеры.Пейджер
	|ИЗ
	|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|ГДЕ
	|	ВыданныеПейджеры.Заказ = &Заказ"+
	?(Станция <> Неопределено, "
	|	И ВыданныеПейджеры.Станция = &Станция", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Массив = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Массив.Добавить(Выборка.Пейджер);
	КонецЦикла; 

	Возврат Массив;
	
КонецФункции

// Возвращает массив заказов, по которым числится пейджер
Функция ПолучитьЗаказыПоПейджеру(Пейджер, Станция=Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пейджер", Пейджер);
	Запрос.УстановитьПараметр("Станция", Станция);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыданныеПейджеры.Заказ
	|ИЗ
	|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|ГДЕ
	|	ВыданныеПейджеры.Пейджер = &Пейджер"+
	?(Станция <> Неопределено, "
	|	И ВыданныеПейджеры.Станция = &Станция", "");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Массив = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		Массив.Добавить(Выборка.Заказ);
	КонецЦикла; 

	Возврат Массив;
	
КонецФункции

// Возвращает таблицу пейджеров, выданных по указанному заказу
Функция ВыданныеПейджерыПодробно(Заказ) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ",   Заказ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыданныеПейджеры.Пейджер,
	|	ВыданныеПейджеры.Станция
	|ИЗ
	|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|ГДЕ
	|	ВыданныеПейджеры.Заказ = &Заказ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает дерево пейджеров, выданных по заказам
Функция ПолучитьПейджерыПоЗаказам(ОбъектОповещений, МассивЗаказов, Станция=Неопределено) Экспорт 

	ДеревоПейджеров = Новый ДеревоЗначений;
	
	Если МассивЗаказов.Количество() = 0 Тогда
		Возврат ДеревоПейджеров;
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.УстановитьПараметр("Станция", Станция);
	
	Если ОбъектОповещений = "НомерМарки" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыданныеПейджеры.Заказ КАК Заказ,
		|	ВыданныеПейджеры.Пейджер КАК Пейджер,
		|	ЕСТЬNULL(Марки.НомерМарки, 0) КАК НомерМарки,
		|	СУММА(ЕСТЬNULL(Марки.КоличествоОповещений, 0)) КАК КоличествоОповещений
		|ИЗ
		|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Марки КАК Марки
		|		ПО ВыданныеПейджеры.Заказ = Марки.Заказ
		|			И ВыданныеПейджеры.Станция = Марки.Станция
		|ГДЕ
		|	ВыданныеПейджеры.Заказ В(&Заказы)
		|"+?(ЗначениеЗаполнено(Станция), "		
		|	И ВыданныеПейджеры.Станция = &Станция", "") + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыданныеПейджеры.Заказ,
		|	ВыданныеПейджеры.Пейджер,
		|	ЕСТЬNULL(Марки.НомерМарки, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заказ,
		|	Пейджер
		|ИТОГИ ПО
		|	Заказ
		|АВТОУПОРЯДОЧИВАНИЕ";		

	Иначе // ОбъектОповещений = "Заказ"
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыданныеПейджеры.Заказ КАК Заказ,
		|	ВыданныеПейджеры.Пейджер КАК Пейджер,
		|	СУММА(ЕСТЬNULL(Марки.КоличествоОповещений, 0)) КАК КоличествоОповещений
		|ИЗ
		|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Марки КАК Марки
		|		ПО ВыданныеПейджеры.Заказ = Марки.Заказ
		|			И ВыданныеПейджеры.Станция = Марки.Станция
		|ГДЕ
		|	ВыданныеПейджеры.Заказ В(&Заказы)
		|"+?(ЗначениеЗаполнено(Станция), "
		|	И ВыданныеПейджеры.Станция = &Станция", "") + "		
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыданныеПейджеры.Заказ,
		|	ВыданныеПейджеры.Пейджер
		|
		|УПОРЯДОЧИТЬ ПО
		|	Заказ,
		|	Пейджер
		|ИТОГИ ПО
		|	Заказ
		|АВТОУПОРЯДОЧИВАНИЕ";
	КонецЕсли; 
	
	РезультатЗапрос = Запрос.Выполнить();
	
	Если РезультатЗапрос.Пустой() Тогда
		Возврат ДеревоПейджеров;
	КонецЕсли;
	
	ДеревоПейджеров = РезультатЗапрос.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ДеревоПейджеров;
	
КонецФункции 

// Возвращает Истина, если пейджер свободен (не выдан)
Функция ПейджерСвободен(Пейджер) Экспорт

	Если Не ЗначениеЗаполнено(Пейджер) Тогда
		Возврат Ложь;
	КонецЕсли; 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пейджер", Пейджер);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыданныеПейджеры.Заказ
	|ИЗ
	|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|ГДЕ
	|	ВыданныеПейджеры.Пейджер = &Пейджер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат НЕ Выборка.Следующий();
	
КонецФункции
 
// Регистрация выдачи пейджера по указанному заказу и станции
Функция РегистрацияВыдачиПейджера(Заказ, Станция, Пейджер) Экспорт

	Если Не ЗначениеЗаполнено(Пейджер) Тогда
		Возврат "Не указан пейджер!";
	КонецЕсли; 
	
	МассивВыданных = ВыданныеПейджеры(Заказ, Станция);
	
	Если МассивВыданных.Количество() > 0 Тогда
		Возврат "По заказу/станции уже был выдан другой пейджер!";
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.ВыданныеПейджеры.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Заказ.Установить(Заказ);
	НаборЗаписей.Отбор.Станция.Установить(Станция);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Заказ   = Заказ; 
	НоваяЗапись.Станция = Станция; 
	НоваяЗапись.Пейджер = Пейджер; 

	ИнтерфейсРМ.ПопыткаДействияСОбъектом( НаборЗаписей, "Объект.Записать(Истина)" );
	
	МЗ = РегистрыСведений.ИсторияВыдачиПейджеров.СоздатьМенеджерЗаписи();
	
	МЗ.Период = ТекущаяДатаНаСервере();
	МЗ.Заказ = Заказ;
	МЗ.Действие = "Выдача";
	МЗ.Пейджер = Пейджер;
	МЗ.РабочееМесто = глРабочееМесто;
	МЗ.Автор = глПользователь;
		
		
	
	ИнтерфейсРМ.ПопыткаДействияСОбъектом( МЗ, "Объект.Записать(Истина)" );
	
	Возврат "";
	
КонецФункции

// Освобождает пейджер, удаляя записи по нему из регистра выданный пейджеров.
// Возвращаемое значение:
//	Истина		- действие выполнено без ошибок
//  Ложь		- произошла ошибка и пользователь отказался от повторной попытки
Функция РегистрацияВозвратаПейджера(Пейджер)

	Если Не ЗначениеЗаполнено(Пейджер) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пейджер", Пейджер);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыданныеПейджеры.Заказ,
	|	ВыданныеПейджеры.Станция
	|ИЗ
	|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|ГДЕ
	|	ВыданныеПейджеры.Пейджер = &Пейджер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.ВыданныеПейджеры.СоздатьНаборЗаписей();
	
	БылиКУдалению = Ложь;
	ЕстьУспешныеУдаления = Ложь;
	
	Пока Выборка.Следующий() Цикл
		БылиКУдалению = Истина;
		
		НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ);
		НаборЗаписей.Отбор.Станция.Установить(Выборка.Станция);	
		
		Результат = ИнтерфейсРМ.ПопыткаДействияСОбъектом( НаборЗаписей, "Объект.Записать()" );
		
		ЕстьУспешныеУдаления = ЕстьУспешныеУдаления ИЛИ Результат;
		
		МЗ = РегистрыСведений.ИсторияВыдачиПейджеров.СоздатьМенеджерЗаписи();
		
		МЗ.Период = ТекущаяДатаНаСервере();
		МЗ.Заказ = Выборка.Заказ;
		МЗ.Действие = "Возврат";
		МЗ.Пейджер = Пейджер;
		МЗ.РабочееМесто = глРабочееМесто;
		МЗ.Автор = глПользователь;
		
		
		
		ИнтерфейсРМ.ПопыткаДействияСОбъектом( МЗ, "Объект.Записать(Истина)" );

	КонецЦикла;
	
	Возврат ?(БылиКУдалению, ЕстьУспешныеУдаления, Истина);
	
КонецФункции

// Возврат указанного пейджера (с проверкой невыданных марок)
//
// Если ИзЗаказа=Истина, то не будут контролироваться невыданные и неприготовленные позиции,
// т.к. заказ может быть не записан; т.е. в регистрах будут старые данные.
// Например, кассир может удалять из заказа невыданные позиции.
//
// Возвращаемое значение:
//  Структура
//	   Возвращен 		- Булево. Была выполнена регистрация возврата (удаление пейджера из регистра выданный пейджеров)
//     НевыданныеМарки	- Булево. Обнаружены невыданные марки по заказу и станции, которая выдала пейджер
Функция ВозвратПейджера(Пейджер, Станция=Неопределено, ИзЗаказа=Ложь)

	РезультатДействия = Новый Структура("Возвращен, ЕстьНевыданные, НеобработанныеЗаказы", Ложь, Ложь, Новый Массив);
	
	Если Не ЗначениеЗаполнено(Пейджер) Тогда
		Возврат РезультатДействия;
	КонецЕсли; 
	
	НеобработанныеЗаказы = РезультатДействия.НеобработанныеЗаказы;
	
	Если НЕ ИзЗаказа Тогда
		// проверки на неприготовленные и невыданные товары.
		
		Заказы = ПолучитьЗаказыПоПейджеру(Пейджер, Станция);
		
		Если Заказы.Количество() > 0 Тогда
			РезультатПроверки = ПолностьюОбработан("Заказ", Заказы, Станция);
			
			Если НЕ РезультатПроверки.ВсеОбработаны Тогда
				ОбработанныеЗаказы = РезультатПроверки.МассивОбработанных;
				
				Для К = 0 По Заказы.Количество() - 1 Цикл
					Если ОбработанныеЗаказы.Найти(Заказы[К]) = Неопределено Тогда
						НеобработанныеЗаказы.Добавить(Заказы[К]);	
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
		
		Если НеобработанныеЗаказы.Количество() > 0 Тогда
			Если ПоПейджеруЕстьМаркиКВыдаче(Пейджер, Станция) Тогда
				РезультатДействия.ЕстьНевыданные = Истина;	
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	Если РезультатДействия.ЕстьНевыданные Тогда
		Текст1="Есть марки к выдаче!";
		Текст2="По пейджеру № "+СокрЛП(Пейджер.Наименование)+" есть марки к выдаче!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");	
		
	ИначеЕсли НеобработанныеЗаказы.Количество() > 0 Тогда
		Текст1="Есть марки к приготовлению!";
		Текст2="По пейджеру № "+СокрЛП(Пейджер.Наименование)+" есть марки к приготовлению!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");	
		
	Иначе
		Текст1 = "Возврат пейджера.";
		Текст2 = "Клиент вернул пейджер № "+СокрЛП(Пейджер.Наименование)+" ?";
		
		Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "Да","","Esc=Нет")= "Да" Тогда
			РезультатДействия.Возвращен = РегистрацияВозвратаПейджера(Пейджер);
		КонецЕсли;	
	КонецЕсли; 
	
	Возврат РезультатДействия;
	
КонецФункции

// Возврат пейджера. Если заказ не указан, то сначала выполняется запрос карты клиента.
// Если указана Станция, то возврат идёт только по пейджерам, выданным на этой станции.
Функция ВыполнитьВозвратПейджера(Заказ=Неопределено, Станция=Неопределено, ИзЗаказа=Ложь) Экспорт

	РезультатДействия = Новый Структура("Возвращен, ЕстьНевыданные, НеобработанныеЗаказы", Ложь, Ложь, Новый Массив);
	
	Если Заказ <> Неопределено Тогда
		ВыбКартаДоступа = Заказ.КартаДоступа;
		ВыбКлиент       = Заказ.Клиент;	
	Иначе
		ВыбКартаДоступа = Неопределено;
		ВыбКлиент       = ИнтерфейсРМ.ИдентификацияКлиента( ,Истина, , ВыбКартаДоступа);	
	КонецЕсли; 
	
	Если ВыбКлиент = Неопределено Тогда
		Возврат РезультатДействия;
	КонецЕсли; 
	
	Если ВыбКартаДоступа = Неопределено Тогда
		Возврат РезультатДействия;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыданныеПейджеры.Пейджер
	|ИЗ
	|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|ГДЕ
	|	ВыданныеПейджеры.Заказ.Клиент = &Клиент
	|	И ВыданныеПейджеры.Заказ.КартаДоступа = &КартаДоступа
	|"+?(ЗначениеЗаполнено(Заказ), "
	|	И ВыданныеПейджеры.Заказ = &Заказ", "") + "
	|"+?(ЗначениеЗаполнено(Станция), "
	|	И ВыданныеПейджеры.Станция = &Станция", "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыданныеПейджеры.Пейджер";
	
	Запрос.УстановитьПараметр("Клиент", ВыбКлиент);
	Запрос.УстановитьПараметр("КартаДоступа", ВыбКартаДоступа);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Станция", Станция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивПейджеров = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивПейджеров.Добавить(Выборка.Пейджер);
	КонецЦикла;
	
	ДопФильтр = "";
	Если Станция <> Неопределено Тогда
		ДопФильтр = ДопФильтр + ?(ПустаяСтрока(ДопФильтр), "", " и ") + "станции "+Станция;
	КонецЕсли; 
	Если Заказ <> Неопределено Тогда
		ДопФильтр = ДопФильтр + ?(ПустаяСтрока(ДопФильтр), "", " и ") + "заказу";
	КонецЕсли; 
	Если НЕ ПустаяСтрока(ДопФильтр) Тогда
		ДопФильтр = "по "+ДопФильтр+" ";
	КонецЕсли; 
	
	Если МассивПейджеров.Количество()=0 Тогда
		Текст1="Нет невозвращенных!";
		Текст2="По карте клиента "+ДопФильтр+"нет невозвращенных пейджеров!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");	
		
	ИначеЕсли МассивПейджеров.Количество()=1 Тогда
		РезультатДействия = ВозвратПейджера( МассивПейджеров[0], Станция, ИзЗаказа );
		
	Иначе
		ВыбПейджер = ИнтерфейсРМ.ВыборИзСписка( МассивПейджеров, , , "Выбор пейджера", ""+ДопФильтр );
		Если ВыбПейджер <> Неопределено Тогда
			РезультатДействия = ВозвратПейджера( ВыбПейджер, Станция, ИзЗаказа );
		КонецЕсли; 
		
	КонецЕсли;
	
    Возврат РезультатДействия;
	
КонецФункции 

// МассивЗаказов должен содержать ссылки на заказы, по которым нет необработанных марок
Процедура ВозвратПейджеровПоЗаказам(МассивЗаказов, Станция, ВыводитьПредупреждение=Истина, Ответ="Да") Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыданныеПейджеры.Пейджер КАК Пейджер,
	|	ВыданныеПейджеры.Пейджер.Наименование КАК НомерПейджера
	|ИЗ
	|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|ГДЕ
	|	ВыданныеПейджеры.Заказ В(&Заказы)
	|	И ВыданныеПейджеры.Станция = &Станция
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыданныеПейджеры.Пейджер,
	|	ВыданныеПейджеры.Пейджер.Наименование";
	
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.УстановитьПараметр("Станция", Станция);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Текст1 = "Возврат пейджера.";
	
	Пока Выборка.Следующий() Цикл
		
		Текст2 = "Клиент должен сдать пейджер № "+СокрЛП(Выборка.НомерПейджера)+".
		|Клиент сдал пейджер?";
		Если ВыводитьПредупреждение Тогда
			
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "Да","","Esc=Нет")= "Да" Тогда
				РегистрацияВозвратаПейджера(Выборка.Пейджер);
			КонецЕсли;	
		ИначеЕсли НЕ ВыводитьПредупреждение и Ответ="Да" Тогда
			РегистрацияВозвратаПейджера(Выборка.Пейджер);
		КонецЕсли;		
	КонецЦикла; 

КонецПроцедуры

// Возвращает Истина, если для пейджера есть марки к выдаче.
Функция ПоПейджеруЕстьМаркиКВыдаче(Пейджер, Станция=Неопределено)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказТоварыДопИнф.Заказ КАК Заказ,
	|	ЗаказТоварыДопИнф.НомерМарки КАК НомерМарки
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|		ПО ЗаказТоварыДопИнф.Заказ = ВыданныеПейджеры.Заказ
	|			И ЗаказТоварыДопИнф.Станция = ВыданныеПейджеры.Станция
	|ГДЕ
	|	ВыданныеПейджеры.Пейджер = &Пейджер
	|"+?(ЗначениеЗаполнено(Станция), "
	|	И ЗаказТоварыДопИнф.Станция = &Станция", "") + "
	|	И ЗаказТоварыДопИнф.ВремяГотово > &ДатаГотово
	|	И ЗаказТоварыДопИнф.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Пейджер",	Пейджер);
	Запрос.УстановитьПараметр("Станция",	Станция);
	Запрос.УстановитьПараметр("Статус",		Перечисления.СтатусыПозицийЗаказа.Готово);
	Запрос.УстановитьПараметр("ДатаГотово",	ТекущаяДатаНаСервере()-60*60*12); // за последние 12 часов; как в мониторе марок
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции 

// Запрашивается номер пейджера и регистрируется повторный вызов клиента по пейджеру
Процедура ВыполнитьВызовПейджера(Станция) Экспорт

	НомерПейджера = ИнтерфейсРМ.ВводЧисла("Номер пейджера", "Число", 15, 0 );
	
	Если НомерПейджера = Неопределено Тогда
		Возврат;
	КонецЕсли; 	

	НомерПейджера = СокрЛП(СтрЗаменить(НомерПейджера, Символы.НПП, ""));
	
	Пейджер = Справочники.Пейджеры.НайтиПоНаименованию(НомерПейджера, Истина);
	
	Если Пейджер = Справочники.Пейджеры.ПустаяСсылка() Тогда
		Текст1="Ошибка в номере!";
		Текст2="Пейджер с № "+НомерПейджера+" не зарегистрирован!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");	
		Возврат;
	КонецЕсли;	
	
	Заказы = ПолучитьЗаказыПоПейджеру(Пейджер, Станция);
	
	Если Заказы.Количество() = 0 Тогда
		Текст1="Этот пейджер не выдан!";
		Текст2="Пейджер с № "+НомерПейджера+" не числится выданным на станции "+Станция+"!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");	
		Возврат;
	КонецЕсли; 
	
	Если НЕ ПоПейджеруЕстьМаркиКВыдаче(Пейджер, Станция) Тогда
		Текст1="Нет марок к выдаче!";
		Текст2="По пейджеру нет марок готовых к выдаче!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");	
	    Возврат;
	КонецЕсли; 
	
	Текст1 = "Вызов пейджера.";
	Текст2 = "Произведён вызов пейджера № "+НомерПейджера+" ?";
		
	Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "Да","","Esc=Нет")= "Да" Тогда
		РегистрацияПовторногоВызоваПейджера(Пейджер, Станция);
	КонецЕсли;	

КонецПроцедуры 


////////////////////////////////////////////////////////////////////////
// МАРКИ

// Выполняет регистрацию новых марок (тех, которых нет в регистре Марки).
//
// Возвращает флаг (Булево) наличия готовых к выдаче марок, в только что зарегистрированных марках.
// Это значение анализируется при возврате в монитор марок. Если есть марки к выдаче,
// то устанавливается режим "К Выдаче".
//
Функция РегистрацияНовыхМарок(Заказ, Станция) Экспорт 

	ЕстьМаркиКВыдаче = Ложь;
	
	// Выбираем все позиции со статусом "Заказано" и "Удалено".
	// Если марки с таким номеров нет в регистре "Марки", то создаем её.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.КодПодтверждения,
	|	ЗаказТоварыДопИнф.Статус,
	|	ЗаказТоварыДопИнф.НомерМарки КАК НомерМарки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЗаказТоварыДопИнф.Товар ССЫЛКА Справочник.Товары
	|				ТОГДА ЗаказТоварыДопИнф.Товар.ВремяПриготовления
	|			КОГДА ЗаказТоварыДопИнф.Товар ССЫЛКА Справочник.Специфики
	|				ТОГДА ЗаказТоварыДопИнф.Товар.ВремяПриготовления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВремяПриготовления
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.Заказ = &Заказ
	|	И ЗаказТоварыДопИнф.Станция = &Станция
	|	И ЗаказТоварыДопИнф.НомерМарки > 0
	|	И НЕ ЗаказТоварыДопИнф.НомерМарки В
	|				(ВЫБРАТЬ
	|					Марки.НомерМарки
	|				ИЗ
	|					РегистрСведений.Марки КАК Марки
	|				ГДЕ
	|					Марки.Заказ = &Заказ)
	|	И ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1)
	|	И ЗаказТоварыДопИнф.Статус В(&Статус)
	|	И (ЗаказТоварыДопИнф.Количество > 0
	|			ИЛИ ЗаказТоварыДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПозицийЗаказа.Удалено))
	//|	И ЗаказТоварыДопИнф.Товар ССЫЛКА Справочник.Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказТоварыДопИнф.КодПодтверждения,
	|	ЗаказТоварыДопИнф.Статус,
	|	ЗаказТоварыДопИнф.НомерМарки
	|ИТОГИ
	|	МАКСИМУМ(ВремяПриготовления)
	|ПО
	|	НомерМарки";

	СтатусыНовых = Новый Массив;
	СтатусыНовых.Добавить(Перечисления.СтатусыПозицийЗаказа.Заказано);
	СтатусыНовых.Добавить(Перечисления.СтатусыПозицийЗаказа.Дозаказ);
	СтатусыНовых.Добавить(Перечисления.СтатусыПозицийЗаказа.Удалено);
	
	Запрос.УстановитьПараметр("Статус"				, СтатусыНовых);
	Запрос.УстановитьПараметр("Заказ"				, Заказ);
	Запрос.УстановитьПараметр("Станция"				, Станция);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЕстьМаркиКВыдаче;
	КонецЕсли; 
	
	ТекВремя = ТекущаяДатаНаСервере();   
	НормативныйПериодПриготовленияСек	= Константы.НормативныйПериодПриготовленияСек.Получить();
	НормативныйПериодВыдачиБыстрыхСек 	= Константы.НормативныйПериодВыдачиБыстрыхСек.Получить();
	НормативноеВремяВыдачиБыстрых		= ТекВремя + НормативныйПериодВыдачиБыстрыхСек;
	
	МенеджерЗаписи = РегистрыСведений.Марки.СоздатьМенеджерЗаписи();
	
	ВыборкаМарки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМарки.Следующий() Цикл
	
		МенеджерЗаписи.Заказ				= Заказ;
		МенеджерЗаписи.НомерМарки			= ВыборкаМарки.НомерМарки;

		МенеджерЗаписи.Прочитать();
		
		Если НЕ МенеджерЗаписи.Выбран() Тогда
			
			ВремяПриготовленияСек = ВыборкаМарки.ВремяПриготовления*60;
			
			БыстраяМарка = (ВремяПриготовленияСек <= НормативныйПериодПриготовленияСек);
			
			МенеджерЗаписи.Заказ							= Заказ; 
			МенеджерЗаписи.НомерМарки						= ВыборкаМарки.НомерМарки; 
			МенеджерЗаписи.Станция							= Станция; 
			
			МенеджерЗаписи.НормативноеВремяПриготовления	= ТекВремя + ВремяПриготовленияСек; 	
			
			Если БыстраяМарка Тогда
				МенеджерЗаписи.КВыдаче 						= Истина;
				МенеджерЗаписи.НормативноеВремяВыдачи		= НормативноеВремяВыдачиБыстрых;
				МенеджерЗаписи.ПервоеНормативноеВремяВыдачи	= НормативноеВремяВыдачиБыстрых;
				МенеджерЗаписи.КоличествоОповещений			= 0; 
				МенеджерЗаписи.БыстраяМарка					= Истина;
			Иначе	
				МенеджерЗаписи.КВыдаче 						= Ложь;
			КонецЕсли; 
			
			ИнтерфейсРМ.ПопыткаДействияСОбъектом( МенеджерЗаписи, "Объект.Записать(Истина)" );
			
			Если БыстраяМарка Тогда
				// Для "быстрых" марок необходимо пометить позиции как готовые 	
				
				ЕстьМаркиКВыдаче = Истина;
				
				Выборка = ВыборкаМарки.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					Защита.ПодтверждениеГотовности(Выборка.КодПодтверждения, Выборка.Статус, Ложь);
				КонецЦикла; 
			КонецЕсли;	
		КонецЕсли;	
		
	КонецЦикла; 
	
	Возврат ЕстьМаркиКВыдаче;
	
КонецФункции 

// Проверяет, что по указанным кодам подтверждений марки полностью приготовлены.
// Сообщает об этом пользователю. Переводит марки в статус "к выдаче".
// Возвращает:
//	Булево. Истина, если появились марки к выдачи.
//
Функция ПереводМарокКВыдаче(СписокКодовПодтверждений, Станция, ВыводитьПредупреждение=Истина) Экспорт
	
	// 1) Сначала нужно определить номера марок, т.к. коды подтверждений могут быть для разных номеров марок.
	// Например, когда группировка марок в мониторе "по заказам" и нажали на кнопку в шапке марки => подтвердятся все марки по заказу.
	//
	// 2) Проверим, что все позиции по маркам готовы, т.е. НЕТ ПОЗИЦИЙ со статусом Заказано.
	// (Ещё могут быть позиции со статусом Удалено (с количеством > 0), но они не должны влиять на выдачу целиком приготовленной марки.)
	//
	// У неподтвержденных удаленных позици статус Удалено  и Количество = 0
	// У подтвержденных удаленных позици   статус Заказано и Количество = 0
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.НомерМарки,
	|	ЗаказТоварыДопИнф.Заказ,
	|	ЗаказТоварыДопИнф.Станция
	|ПОМЕСТИТЬ ВТМарки
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|		ПО ЗаказТоварыДопИнф.Заказ = ЗаказДопИнф.Заказ
	|ГДЕ
	|	ЗаказТоварыДопИнф.ВремяЗаказано > &ДатаНачала
	|	И ЗаказТоварыДопИнф.КодПодтверждения В(&КодПодтверждения)
	|	И ЗаказТоварыДопИнф.Станция = &Станция
	|	И ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказТоварыДопИнф.НомерМарки,
	|	ЗаказТоварыДопИнф.Заказ,
	|	ЗаказТоварыДопИнф.Станция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТМарки.НомерМарки,
	|	ВТМарки.Заказ,
	|	ВыданныеПейджеры.Пейджер
	|ИЗ
	|	ВТМарки КАК ВТМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказТоварыДопИнф.Заказ КАК Заказ,
	|			ЗаказТоварыДопИнф.НомерМарки КАК НомерМарки
	|		ИЗ
	|			РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|		ГДЕ
	|			ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1)
	|			И ЗаказТоварыДопИнф.ВремяЗаказано > &ДатаНачала
	|			И ЗаказТоварыДопИнф.Количество > 0
	|			И ЗаказТоварыДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПозицийЗаказа.Заказано)
	|			И ЗаказТоварыДопИнф.НомерМарки В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТМарки.НомерМарки
	|					ИЗ
	|						ВТМарки КАК ВТМарки)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказТоварыДопИнф.НомерМарки,
	|			ЗаказТоварыДопИнф.Заказ) КАК НеготовыеМарки
	|		ПО ВТМарки.Заказ = НеготовыеМарки.Заказ
	|			И ВТМарки.НомерМарки = НеготовыеМарки.НомерМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|		ПО ВТМарки.Заказ = ВыданныеПейджеры.Заказ
	|			И ВТМарки.Станция = ВыданныеПейджеры.Станция
	|ГДЕ
	|	НеготовыеМарки.НомерМарки ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ДатаНачала",			ТекущаяДатаНаСервере()-60*60*12); // за последние 12 часов
	Запрос.УстановитьПараметр("КодПодтверждения",	СписокКодовПодтверждений);
	Запрос.УстановитьПараметр("Станция",			Станция);
	
	тзМаркиКВыдаче = Запрос.Выполнить().Выгрузить();
	
	Если тзМаркиКВыдаче.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	тзПейджеры = тзМаркиКВыдаче.Скопировать( ,"Пейджер");	
	тзПейджеры.Свернуть("Пейджер", "");

	Если ВыводитьПредупреждение Тогда
		
		СтрПейджеры = "";
		Для Каждого Строка Из тзПейджеры Цикл
			Если ЗначениеЗаполнено(Строка.Пейджер) Тогда
				СтрПейджеры = СтрПейджеры + ?(ПустаяСтрока(СтрПейджеры), "", ", ") + СокрЛП(Строка.Пейджер.Наименование);
			КонецЕсли; 
		КонецЦикла; 
		
		Если НЕ ПустаяСтрока(СтрПейджеры) Тогда
			Текст1="Вызов пейджера";
			Текст2="Нажмите кнопку вызова пейджера № "+СтрПейджеры;
			ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
			
			// Регистрация вызова ниже; после перевода марок в статус "к выдаче"
		КонецЕсли; 
	КонецЕсли; 
	
	// Перевод марок в статус "к выдаче". В тзМаркиКВыдаче обычно будет только одна строка.
	ТекВремя = ТекущаяДатаНаСервере();
	
	НормативныйПериодВыдачиСек 	= Константы.НормативныйПериодВыдачиСек.Получить();
	НормативноеВремяВыдачи 		= ТекВремя + НормативныйПериодВыдачиСек; 
	
	МенеджерЗаписи = РегистрыСведений.Марки.СоздатьМенеджерЗаписи();
	
	Для каждого Строка Из тзМаркиКВыдаче Цикл
		
		МенеджерЗаписи.Заказ				= Строка.Заказ;
		МенеджерЗаписи.НомерМарки			= Строка.НомерМарки;

		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			// марка в регистре есть; устанавляваем для неё другой статус.
			
			Если НЕ МенеджерЗаписи.КВыдаче Тогда
				МенеджерЗаписи.КВыдаче						= Истина; 
				МенеджерЗаписи.КоличествоОповещений			= 1; 	
				МенеджерЗаписи.НормативноеВремяВыдачи		= НормативноеВремяВыдачи; 
				МенеджерЗаписи.ПервоеНормативноеВремяВыдачи	= НормативноеВремяВыдачи; 
				
				ИнтерфейсРМ.ПопыткаДействияСОбъектом( МенеджерЗаписи, "Объект.Записать(Истина)" );
				
				ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказВызовПейджера, Строка.Заказ, Строка.Пейджер, Строка.НомерМарки, 1);
			КонецЕсли; 
			
		Иначе
			// если марки почему-то нет в регистре, то создаем новую запись.
			
			МенеджерЗаписи.Заказ						= Строка.Заказ; 
			МенеджерЗаписи.НомерМарки					= Строка.НомерМарки; 
			МенеджерЗаписи.КВыдаче						= Истина; 
			МенеджерЗаписи.НормативноеВремяВыдачи		= НормативноеВремяВыдачи; 
			МенеджерЗаписи.ПервоеНормативноеВремяВыдачи	= НормативноеВремяВыдачи; 
			МенеджерЗаписи.КоличествоОповещений			= 1; 	
			МенеджерЗаписи.Станция						= Станция; 
			
			ИнтерфейсРМ.ПопыткаДействияСОбъектом( МенеджерЗаписи, "Объект.Записать(Истина)" );
			
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказВызовПейджера, Строка.Заказ, Строка.Пейджер, Строка.НомерМарки, 1);
		КонецЕсли;	
		
	КонецЦикла; 
	
	// Также нужно обработать просроченные марки : КоличествоОповещений + 1
	Для Каждого Строка Из тзПейджеры Цикл
		Если ЗначениеЗаполнено(Строка.Пейджер) Тогда // пейджера может и не быть (когда есть только одна "быстрая" марка)
			
			// Передаем в процедуру ТекВремя, чтобы случайно не увеличилось кол-во оповещений 
			// по только что изготовленным маркам. 
			// (Если текущее время увеличится хоть на 1 сек., то свежеизготовленные марки могут стать просроченными, 
			// если НормативныйПериодВыдачиСек, например, нулевой)
			РегистрацияПовторногоВызоваПейджера(Строка.Пейджер, Станция, ТекВремя); 
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

// Проверяет, что заказ или "нулевая" марка полностью обработаны, т.е. по ним нет позиций
// со статусом Дозаказ, Заказано, Готово.
// Параметры:
// 	ИмяПараметра 	- Строка; "Заказ" или "НомерМарки"
//	МассивЗначений	- Массив с заказыми или номареми марок.
//	Станция
// Возвращает:
// 	Структура	
//		Структура.ВсеОбработаны 		- Истина, если все товары + специфики были полностью обработаны.
//		Структура.МассивОбработанных 	- Массив обработанных объектов; часть объектов может быть полностью обработана, а другая часть - нет.
//
Функция ПолностьюОбработан(ИмяПараметра, МассивЗначений, Станция=Неопределено) Экспорт

	РезультатПроверки = Новый Структура("ВсеОбработаны, МассивОбработанных", Истина, Новый Массив);
	
	Если МассивЗначений.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли; 
	
	МассивОбработанных = РезультатПроверки.МассивОбработанных;
	
	Для К = 0 По МассивЗначений.Количество() - 1 Цикл
		МассивОбработанных.Добавить(МассивЗначений[К]);
	КонецЦикла; 
	
	// Проверим, что по указанным маркам НЕТ позиций заказа со статусом "Дозаказ", "Заказано" и "Готово".
	// Если результат запроса не пустой, значит, ещё есть позиции "в работе".
	
	// ЗаказТоварыДопИнф.Количество > 0 - чтобы не мешали подтвержденные удаленные строки
	// У специфик тоже Количество=0, но они должны выдаваться одновременно с товарами.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.НомерМарки КАК ИмяПараметра
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.ВремяЗаказано > &ДатаОтсчета
	|	И ЗаказТоварыДопИнф.НомерМарки В(&МассивЗначений)
	|	И ЗаказТоварыДопИнф.Количество > 0
	|	И ЗаказТоварыДопИнф.Статус В(&СтатусыВРаботе)
	|"+?(ЗначениеЗаполнено(Станция), "
	|	И ЗаказТоварыДопИнф.Станция = &Станция", "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказТоварыДопИнф.НомерМарки";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "НомерМарки", ИмяПараметра);
	
	СтатусыВРаботе = Новый Массив;
	СтатусыВРаботе.Добавить(Перечисления.СтатусыПозицийЗаказа.Дозаказ);
	СтатусыВРаботе.Добавить(Перечисления.СтатусыПозицийЗаказа.Заказано);
	СтатусыВРаботе.Добавить(Перечисления.СтатусыПозицийЗаказа.Готово);
	
	Запрос.УстановитьПараметр("МассивЗначений",	МассивЗначений);
	Запрос.УстановитьПараметр("Станция",		Станция);
	Запрос.УстановитьПараметр("СтатусыВРаботе",	СтатусыВРаботе);
	Запрос.УстановитьПараметр("ДатаОтсчета",	ТекущаяДатаНаСервере()-60*60*12); // за последние 12 часов
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат РезультатПроверки; // Все обработаны, т.к. нет строк со статусами "в работе"
	КонецЕсли; 
	
	РезультатПроверки.ВсеОбработаны = Ложь;
	
	// Удалим из МассивОбработанных необработанные учетные объекты
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Инд = МассивОбработанных.Найти(Выборка.ИмяПараметра);	
		
		Если Инд <> Неопределено Тогда
			МассивОбработанных.Удалить(Инд);	
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат РезультатПроверки;
	
КонецФункции

// Возвращает Истина, если для заказа есть марки к выдаче.
Функция ПоЗаказуЕстьМаркиКВыдаче(МассивЗаказов, Станция=Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказТоварыДопИнф.Заказ КАК Заказ,
	|	ЗаказТоварыДопИнф.НомерМарки КАК НомерМарки
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.Заказ В(&Заказы)
	|"+?(ЗначениеЗаполнено(Станция), "
	|	И ЗаказТоварыДопИнф.Станция = &Станция", "") + "
	|	И ЗаказТоварыДопИнф.ВремяГотово > &ДатаГотово
	|	И ЗаказТоварыДопИнф.Статус = &Статус";
	
	Запрос.УстановитьПараметр("Заказы",		МассивЗаказов);
	Запрос.УстановитьПараметр("Станция",	Станция);
	Запрос.УстановитьПараметр("Статус",		Перечисления.СтатусыПозицийЗаказа.Готово);
	Запрос.УстановитьПараметр("ДатаГотово",	ТекущаяДатаНаСервере()-60*60*12); // за последние 12 часов; как в мониторе марок
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

// Возвращает Истина, если для заказа есть марки
Функция ПоЗаказуЕстьМарки(МассивЗаказов, Станция=Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Марки.Заказ
	|ИЗ
	|	РегистрСведений.Марки КАК Марки
	|ГДЕ
	|	Марки.Заказ В(&Заказы)
	|	И (Марки.Станция = &Станция
	|			ИЛИ НЕОПРЕДЕЛЕНО = &Станция)";
	
	
	//"ВЫБРАТЬ ПЕРВЫЕ 1
	//|	ЗаказТоварыДопИнф.Заказ КАК Заказ,
	//|	ЗаказТоварыДопИнф.НомерМарки КАК НомерМарки
	//|ИЗ
	//|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	//|ГДЕ
	//|	ЗаказТоварыДопИнф.Заказ В(&Заказы)
	//|"+?(ЗначениеЗаполнено(Станция), "
	//|	И ЗаказТоварыДопИнф.Станция = &Станция", "") + "
	//|	И ЗаказТоварыДопИнф.ВремяЗаказано > &ДатаГотово";
	
	Запрос.УстановитьПараметр("Заказы",		МассивЗаказов);
	Запрос.УстановитьПараметр("Станция",	Станция);
	Запрос.УстановитьПараметр("ДатаГотово",	ТекущаяДатаНаСервере()-60*60*12); // за последние 12 часов; как в мониторе марок
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

// Выполняет отметку выдачи по списку кодов подтверждений.
// Возвращает:
// 	Структуру
// 		Структуру.Выдача	- Булево. Было ли хоть что-то выдано или нет.
// 		Структуру.Заказы	- Массив. Массив с заказами, по которым прошла выдача.
// 		Структуру.Марки		- Массив. Массив марок, по которым прошла выдача.
// 		Структуру.Марки0	- Массив. Массив "нулевых" (быстрых) марок, по которым прошла выдача.
//
//	Тот факт, что выдача прошла, совсем не означает, что заказы или марки полность закрыты!
//  Это нужно проверять отдельно. См. функцию ПолностьюОбработан
//
Функция ОтметитьВыдачу(СписокКодовПодтверждений) Экспорт

	МассивЗаказов = Новый Массив;
	МассивМарок   = Новый Массив;
	МассивМарок0  = Новый Массив;
	
	РезультатВыдачи = Новый Структура("Выдача, Заказы, Марки, Марки0", Ложь, МассивЗаказов, МассивМарок, МассивМарок0);
	
	Если СписокКодовПодтверждений.Количество() = 0 Тогда
		Возврат РезультатВыдачи;
	КонецЕсли; 
	
	// Для Защита.ПодтверждениеВыдачи нужны ИдСтроки, в т.ч. и для специфик!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.ИдСтроки,
	|	ЗаказТоварыДопИнф.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ЗаказТоварыДопИнф.Товар ССЫЛКА Справочник.Товары
	|			ТОГДА ЗаказТоварыДопИнф.Товар.ВремяПриготовления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВремяПриготовления,
	|	ЗаказТоварыДопИнф.НомерМарки КАК НомерМарки
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.КодПодтверждения В(&КодПодтверждения)
	|	И ЗаказТоварыДопИнф.ВремяГотово > &ДатаГотово
	|	И ЗаказТоварыДопИнф.Статус = &Статус
	|ИТОГИ
	|	МАКСИМУМ(ВремяПриготовления)
	|ПО
	|	Заказ,
	|	НомерМарки";
	
	Запрос.УстановитьПараметр("КодПодтверждения", СписокКодовПодтверждений);
	Запрос.УстановитьПараметр("Статус"			, Перечисления.СтатусыПозицийЗаказа.Готово);
	Запрос.УстановитьПараметр("ДатаГотово"		, ТекущаяДатаНаСервере()-60*60*12); // за последние 12 часов; как в мониторе марок
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат РезультатВыдачи;
	КонецЕсли; 

	НормативныйПериодПриготовленияСек	= Константы.НормативныйПериодПриготовленияСек.Получить();
	
	ВыборкаЗаказы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказы.Следующий() Цикл
		
		МассивЗаказов.Добавить(ВыборкаЗаказы.Заказ);
		
		ВыборкаМарки = ВыборкаЗаказы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМарки.Следующий() Цикл
			
			МассивМарок.Добавить(ВыборкаМарки.НомерМарки);	
			
			Если ВыборкаМарки.ВремяПриготовления*60 <= НормативныйПериодПриготовленияСек Тогда
				МассивМарок0.Добавить(ВыборкаМарки.НомерМарки);	
			КонецЕсли; 
			
			Выборка = ВыборкаМарки.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				// Подтверждение выдачи позиций
				//Защита.ПодтверждениеВыдачи(Выборка.ИдСтроки, Выборка.Заказ, Истина);
				Защита.ПодтверждениеВыдачи(Выборка.ИдСтроки, Выборка.Заказ); // убран третий параметр, чтобы не появлялись всплавающие окна
				
			КонецЦикла; 
	    КонецЦикла; 
	КонецЦикла; 
	
	РезультатВыдачи.Выдача = Истина;
	РезультатВыдачи.Заказы = МассивЗаказов;
	РезультатВыдачи.Марки  = МассивМарок;
	РезультатВыдачи.Марки0 = МассивМарок0;
	
	Возврат РезультатВыдачи; 
	
КонецФункции

// Снятие марок с учета, т.е. это удаление записей из регистра "Марки".
//
// Проверка на полную обработку заказов или марок должна быть проведена заранее.
// Здесь этот анализ не выполняется. Для этого нужно использовать функцию ПолностьюОбработан.
//
// Параметры:
// 	ИмяПараметра 	- Строка; "Заказ" или "НомерМарки".
//	МассивЗначений	- Массив с заказыми или номареми марок.
//	Станция
//
Функция СнятьМаркиСУчета(ИмяПараметра, МассивЗначений, Станция=Неопределено) Экспорт 
	
	РезультатВыполнения = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Марки.Заказ,
	|	Марки.НомерМарки
	|ИЗ
	|	РегистрСведений.Марки КАК Марки
	|ГДЕ
	|	Марки.Заказ В(&МассивЗначений)
	|"+?(ЗначениеЗаполнено(Станция), "
	|	И Марки.Станция = &Станция", "");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Марки.Заказ В", "Марки."+ИмяПараметра+" В");
	
	Запрос.УстановитьПараметр("МассивЗначений",	МассивЗначений);
	Запрос.УстановитьПараметр("Станция", 		Станция);
	
	РезультатЗапрос = Запрос.Выполнить();
	
	Если РезультатЗапрос.Пустой() Тогда
		Возврат РезультатВыполнения; 
	КонецЕсли; 
	
	МенеджерЗаписи = РегистрыСведений.Марки.СоздатьМенеджерЗаписи();
	
	Выборка = РезультатЗапрос.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		МенеджерЗаписи.Заказ		= Выборка.Заказ;
		МенеджерЗаписи.НомерМарки	= Выборка.НомерМарки;

		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			 Рез = ИнтерфейсРМ.ПопыткаДействияСОбъектом( МенеджерЗаписи, "Объект.Удалить()" );	
			 
			 РезультатВыполнения = РезультатВыполнения И Рез;
		КонецЕсли;	
	
	КонецЦикла; 
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Проверяет полностью ли обработана марка, которая указана в строке с ИДСтроки; 
// и снимает марку с учёта.
Процедура ОбработкаПриПолнойВыдачеМарки(ИДСтроки, Заказ) Экспорт 

	// По ИДСтроки заказа определим номер марки.
	// А затем проверим, полностью ли обработана данная марка.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.НомерМарки
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.Заказ = &Заказ
	|	И ЗаказТоварыДопИнф.ИдСтроки = &ИдСтроки";
	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("ИДСтроки", ИДСтроки);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		МассивМарок = Новый Массив;
		МассивМарок.Добавить(Выборка.НомерМарки);
		
		ПроверкаМарки = ПолностьюОбработан("НомерМарки", МассивМарок);
		
		Если ПроверкаМарки.МассивОбработанных.Количество() > 0 Тогда
			СнятьМаркиСУчета("НомерМарки", ПроверкаМарки.МассивОбработанных);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры
 
// Регистрация вызова пейджера:
// 1) + 1 к количеству оповещений только по просроченным маркам, готовым к выдаче
// 2) регистрация события "Вызов пейджера" для этих марок
//
Процедура РегистрацияПовторногоВызоваПейджера(Пейджер, Станция, ТекВремя=Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ТекВремя) Тогда
		ТекВремя = ТекущаяДатаНаСервере();
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыданныеПейджеры.Заказ,
	|	ВыданныеПейджеры.Станция
	|ПОМЕСТИТЬ ВТЗаказы
	|ИЗ
	|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|ГДЕ
	|	ВыданныеПейджеры.Пейджер = &Пейджер
	|	И ВыданныеПейджеры.Станция = &Станция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Марки.Заказ,
	|	Марки.НомерМарки,
	|	Марки.КоличествоОповещений
	|ИЗ
	|	ВТЗаказы КАК ВТЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Марки КАК Марки
	|		ПО ВТЗаказы.Заказ = Марки.Заказ
	|			И ВТЗаказы.Станция = Марки.Станция
	|ГДЕ
	|	Марки.КВыдаче
	|	И Марки.ПервоеНормативноеВремяВыдачи < &ТекВремя";

	Запрос.УстановитьПараметр("Пейджер",	Пейджер);
	Запрос.УстановитьПараметр("Станция",	Станция);
	Запрос.УстановитьПараметр("ТекВремя",	ТекВремя);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МенеджерЗаписи = РегистрыСведений.Марки.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи.Заказ		= Выборка.Заказ;
		МенеджерЗаписи.НомерМарки	= Выборка.НомерМарки;

		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.КоличествоОповещений	= Выборка.КоличествоОповещений + 1; 
			
			ИнтерфейсРМ.ПопыткаДействияСОбъектом( МенеджерЗаписи, "Объект.Записать(Истина)" );
			
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказВызовПейджера, Выборка.Заказ, Пейджер, Выборка.НомерМарки, Выборка.КоличествоОповещений + 1);
		КонецЕсли;	
	
	КонецЦикла; 
	
КонецПроцедуры

// Проверяет "Марки к выдаче" на просроченность по очередному времени выдачи. 
// Если такие есть, то выдает сообщение; 
// Обновляет НормативноеВремяВыдачи для просроченных марок.
//
Процедура ПроверкаПросроченныхМарокКВыдаче() Экспорт

	//Сообщить("ПроверкаПросроченныхМарокКВыдаче");
	
	ТекВремя = ТекущаяДатаНаСервере();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Марки.Заказ,
	|	Марки.НомерМарки,
	|	Марки.КоличествоОповещений,
	|	ВыданныеПейджеры.Пейджер,
	|	Марки.ПервоеНормативноеВремяВыдачи
	|ИЗ
	|	РегистрСведений.Марки КАК Марки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|		ПО Марки.Заказ = ВыданныеПейджеры.Заказ
	|			И Марки.Станция = ВыданныеПейджеры.Станция
	|ГДЕ
	|	Марки.КВыдаче
	|	И Марки.НормативноеВремяВыдачи < &ТекВремя
	|	И Марки.Станция = &Станция
	|	И Марки.НормативноеВремяВыдачи > &ОтсечкаСтарых";	

	Запрос.УстановитьПараметр("ТекВремя", ТекВремя);
	Запрос.УстановитьПараметр("Станция",  глРабочееМесто.Станция);
	Запрос.УстановитьПараметр("ОтсечкаСтарых",  ТекВремя-(12*60*60));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	Таймаут = Макс(0, глПараметрыРМ.ПроизводствоПериодОпросаКВыдаче - 1);
	Текст1="Просроченные к выдаче.";
	Текст2="Есть просроченные марки к выдаче. Необходимо выполнить повторное оповещение клиента.";
	
	Ответ = ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","", , ,Таймаут);
	
	Если Ответ <> "ОК" Тогда
		Возврат; // Таймаут; Ответ = Неопределено 
	КонецЕсли; 
	
	НормативныйПериодВыдачиСек			= Константы.НормативныйПериодВыдачиСек.Получить();
	НормативныйПериодВыдачиБыстрыхСек	= Константы.НормативныйПериодВыдачиБыстрыхСек.Получить();
	
	ТекВремя = ТекущаяДатаНаСервере();
	НормативноеВремяВыдачи			= ТекВремя + НормативныйПериодВыдачиСек; 
	НормативноеВремяВыдачиБыстрых	= ТекВремя + НормативныйПериодВыдачиБыстрыхСек; 
	
	МенеджерЗаписи = РегистрыСведений.Марки.СоздатьМенеджерЗаписи();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи.Заказ		= Выборка.Заказ;
		МенеджерЗаписи.НомерМарки	= Выборка.НомерМарки;

		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.НормативноеВремяВыдачи = ?(МенеджерЗаписи.БыстраяМарка, НормативноеВремяВыдачиБыстрых, НормативноеВремяВыдачи); 
			
			ИнтерфейсРМ.ПопыткаДействияСОбъектом( МенеджерЗаписи, "Объект.Записать(Истина)" );
			
			ВремяПросрочки = ВремяЧМС(ТекВремя - Выборка.ПервоеНормативноеВремяВыдачи);
			
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказПросроченаМаркаКВыдаче, Выборка.Заказ, Выборка.НомерМарки, ВремяПросрочки);
		КонецЕсли;	
	
	КонецЦикла; 
	
КонецПроцедуры

// Удаляет "зависшие" записи из регистра, если такие будут найдены.
// Старыми будут считаться марки, если с даты заказа прошло более 24-х часов.
// В обычном режиме записи удаляются после закрытия марки или заказа.
// Записи могут накапливаться из-за каких-нибудь ошибок или 
// если марки не выдались и заказ не закрыт.
// 
Процедура РегламентСнятьСтарыеМаркиСУчета() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Марки.Заказ
	|ИЗ
	|	РегистрСведений.Марки КАК Марки
	|ГДЕ
	|	Марки.Заказ.Дата < &Дата";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаНаСервере()-60*60*12); // за последние 24 часов (в мониторе марки выводятся за последние 12 часов).
	
	РезультатЗапрос = Запрос.Выполнить();
	
	Если РезультатЗапрос.Пустой() Тогда
		Возврат; 
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.Марки.СоздатьНаборЗаписей();
	
	Выборка = РезультатЗапрос.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ);
		Попытка
			НаборЗаписей.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ

Функция СпецификаИспользуется(Специфика, ТекДата) Экспорт

	Если НЕ ЗначениеЗаполнено(Специфика) Тогда
		Возврат Ложь; // не указана - нет в продаже
	КонецЕсли; 
	
	Если Специфика.ПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если Специфика.ЭтоГруппа Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если Специфика.ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.ПростойПоИБ ИЛИ
		 Специфика.ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.СложныйПоИБ Тогда		
		 
		 Возврат Истина; // этот случай здесь не рассмотрен - есть в продаже
		 
	ИначеЕсли Специфика.ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.Простой Тогда	
		
		Возврат Специфика.ЕстьВПродаже; 
		
	Иначе // Специфика.ВариантНаличияВПродаже = Перечисления.ВариантыНаличияВПродаже.Сложный
		
		КогдаВПродаже	= Специфика.КогдаВПродаже;
		Время1			= Специфика.КогдаВПродажеВремя1;
		Время2			= Специфика.КогдаВПродажеВремя2;
		
		ТекВремя = Дата(1,1,1,Час(ТекДата), Минута(ТекДата), 0);
		ТекДеньНедели = ДеньНедели(ТекДата);
		
		// ВРЕМЯ
		
		Если ЗначениеЗаполнено(Время1) И НЕ(Время1 <= ТекВремя) Тогда // с Время1 
			Возврат Ложь; 
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(Время2) И НЕ(ТекВремя <= Время2) Тогда // по Время2
			Возврат Ложь; 
		КонецЕсли; 
		
		// ДНИ НЕДЕЛИ
		
		Если КогдаВПродаже = 0 Тогда
			Возврат Ложь; // не отмечен ни один день
			
		Иначе
			КогдаВПродажеБин = Формат( Число10в2(КогдаВПродаже), "ЧВН=;ЧГ=;ЧЦ=7");	
			
			Если Сред(КогдаВПродажеБин, ТекДеньНедели, 1) <> "1" Тогда
				Возврат Ложь; // этот день недели не отмечен
			КонецЕсли; 
		КонецЕсли; 
		
		// НЕДЕЛИ
		
		// Сначала нужно определить, есть ли флаги у недель - проверяем как в общей форме НаличиеВПродаже
		ДатаПН = НачалоНедели(ТекДата);
		ФлагНаличиеПоНеделям = Ложь;
		
		Для Н = 1 По 10 Цикл
			Пометка = Специфика.КогдаВПродажеПоНеделям.Найти(ДатаПН, "ДатаПонедельника") <> Неопределено;
			ДатаПН = КонецНедели(ДатаПН) + 1;
			ФлагНаличиеПоНеделям = ФлагНаличиеПоНеделям ИЛИ Пометка;
		КонецЦикла;
		
		Если ФлагНаличиеПоНеделям Тогда
			ДатаПН = НачалоНедели(ТекДата);
			Если Специфика.КогдаВПродажеПоНеделям.Найти(ДатаПН, "ДатаПонедельника") = Неопределено Тогда
				Возврат Ложь; // в эту неделю не продается
			КонецЕсли;
		КонецЕсли; 
		
		// Все проверки пройдены
		Возврат Истина; 
	КонецЕсли; 
 	
КонецФункции 

// Возвращает истина, если РМ является станцией
Функция ЭтоРМСтанция() Экспорт
	Если глПараметрыРМ = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	Возврат (глПараметрыРМ.Тип = Перечисления.ТипыРМ.Производство ИЛИ глПараметрыРМ.Тип = Перечисления.ТипыРМ.СтанцияПовараМОКП) И ЗначениеЗаполнено(глРабочееМесто.Станция);
КонецФункции 

// Проверяет является ли специфика общей
Функция ОбщаяСпецифика(Специфика) Экспорт
	
	ОбщСпец = Константы.ГруппаОбщихСпецифик.Получить();
	
	Если НЕ ЗначениеЗаполнено(ОбщСпец) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Специфика) Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Если Специфика = ОбщСпец Тогда
		Возврат Истина;
	
	ИначеЕсли ОбщСпец.ЭтоГруппа Тогда
		Возврат Специфика.ПринадлежитЭлементу(ОбщСпец);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ОбщСпец.ГруппаСпецифик) Тогда
		Возврат Специфика.ПринадлежитЭлементу(ОбщСпец.ГруппаСпецифик);
		
	Иначе	
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции 

Функция ПолучитьНовыйНомерМарки(ГруппаПечати = Неопределено) Экспорт
	
	
	НомерМарки = РегистрыСведений.ГруппыПечатиДопИнф.Получить(Новый Структура("ГруппаПечати",ГруппаПечати)).НомерМарки;
	НомерМарки = НомерМарки + 1;
	
	ДопИнф = РегистрыСведений.ГруппыПечатиДопИнф.СоздатьМенеджерЗаписи();
	ДопИнф.ГруппаПечати = ГруппаПечати;
	ДопИнф.НомерМарки	= НомерМарки;
	Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДопИнф, "Объект.Записать()" ) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Возврат НомерМарки;
	
	
КонецФункции

// Проверяет наличие возможности действия пользователя, т.е. не по отношению к конкретному объекту, а вообще.
// Возвращает Ложь, если значение права доступа = Нет.
// Возвращает Истина, если значение права доступа = Да или Только в своих.
//
// *** Скопировано с ИнтерфейсРМ.ПроверкаПраваДоступа ***
//
Функция НаличиеПраваДоступа(ПравоДоступа, Пользователь=Неопределено, Заказ_Доставка=Ложь, СтатусДоставки=Неопределено) Экспорт 

	// Если Доставка то нужно получить другие права по соответствию
	Если Заказ_Доставка Тогда
		ПравоДоступа = Справочники.НаборыПравДоступа.ПолучитьСоответствующееПраво(ПравоДоступа);
	КонецЕсли;

	Если ТипЗнч(ПравоДоступа) = Тип("Строка") Тогда
		ПравоДоступа = ПланыВидовХарактеристик.ПраваДоступа[ПравоДоступа];
	КонецЕсли; 
	
	Если Пользователь=Неопределено Тогда
		Пользователь = глПользователь;
	КонецЕсли;
	
	СтрокаТЧ = Пользователь.ПраваДоступа.Найти(глПараметрыРМ.МестоРеализации, "МестоРеализации");
	
	Если СтрокаТЧ = Неопределено Тогда
		ЗначениеПрава = Ложь;
		
	Иначе
		НаборПрав = СтрокаТЧ.НаборПрав;
		
		Если НаборПрав.ПолныйДоступ Тогда
			Возврат Истина;
		КонецЕсли;
		
		Отбор = Новый Структура("НаборПрав,ПравоДоступа,Статус", НаборПрав, ПравоДоступа, СтатусДоставки);
		
		ЗначениеПрава = РегистрыСведений.ПраваДоступа.Получить(Отбор).Значение;
		
		Если ТипЗнч(ЗначениеПрава) <> Тип("Булево") Тогда
			// права в заказе
			Если ЗначениеПрава = Перечисления.ТипыПравДоступаВЗаказе.Нет ИЛИ ЗначениеПрава = Неопределено Тогда
				ЗначениеПрава = Ложь;
				
			ИначеЕсли ЗначениеПрава = Перечисления.ТипыПравДоступаВЗаказе.Свои Тогда
				ЗначениеПрава = Истина;
				//Если Пользователь = АвторЗаказа ИЛИ АвторЗаказа = Неопределено Тогда
				//	ЗначениеПрава = Истина;
				//ИначеЕсли Пользователь.Бригадир Тогда
				//	ЗначениеПрава = Пользователь.Бригада.Сотрудники.Найти(АвторЗаказа, "Сотрудник") <> Неопределено;
				//Иначе
				//	ЗначениеПрава = Ложь;
				//КонецЕсли;
				
			Иначе
				ЗначениеПрава = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеПрава;
	
КонецФункции  

// Выполняет идентификацию клиента и возвращает его заказ.
// Возвращает:
//	Неопределено - если заказ не найден
//	Ссылку на заказ, если он найден
Функция НайтиЗаказКлиента() Экспорт

	ВыбЗаказ = Неопределено;
	
	ВыбКартаДоступа = Неопределено;
	
	ИнтерфейсРМ.ВыводНаИнфоДисплей("Приглашение", Неопределено, Неопределено, Неопределено, Неопределено);
	ВыбКлиент = ИнтерфейсРМ.ИдентификацияКлиента( ,Истина, , ВыбКартаДоступа);
	ИнтерфейсРМ.ВыводНаИнфоДисплей("Реклама", Неопределено, Неопределено, Неопределено, Неопределено);
	
	Если ВыбКлиент = Неопределено Тогда
		Возврат ВыбЗаказ;
	КонецЕсли; 
	
	Если ВыбКартаДоступа = Неопределено Тогда
		Возврат ВыбЗаказ;
	КонецЕсли; 
	
	МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( Неопределено, ВыбКлиент, ВыбКартаДоступа );
	
	Если МассивЗаказов.Количество()=0 Тогда

		Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ВводНовыхЗаказов", Ложь) Тогда //нет 
			Текст1="Заказ не найден";
			Текст2="Пожалуйста, обратитесь к менеджеру 
			|для замены карты гостя";

			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"ОК","","");	
		Иначе
			//Z+
			
			Текст1="Заказ не найден!";
			Текст2="По карте клиента заказ не найден!
			|
			|Создать заказ?";
			Ответ=ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"Да","","Esc=Нет");	
			Если Ответ="Да" Тогда
				ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("Заказ");
				ОбработкаЗаказ.Доставка = глДоставкаОсновнойРежим;
				Сделано = ОбработкаЗаказ.СоздатьНовый(ВыбКлиент,Ложь,Ложь);
				Если Сделано Тогда
					ВыбЗаказ=Неопределено;
					//МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( Неопределено, ВыбКлиент, ВыбКартаДоступа );
					//Если МассивЗаказов.Количество()=1 Тогда
					//	ВыбЗаказ = МассивЗаказов[0];
					//Иначе
					//	ВыбЗаказ = ИнтерфейсРМ.ВыборИзСписка( МассивЗаказов );
					//КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			//Z-
		КонецЕсли;
		
	ИначеЕсли МассивЗаказов.Количество()=1 Тогда
		ВыбЗаказ = МассивЗаказов[0];
		
	Иначе
		ВыбЗаказ = ИнтерфейсРМ.ВыборИзСписка( МассивЗаказов );
		
	КонецЕсли;
	
	Возврат ВыбЗаказ;
	
КонецФункции

//*****************************************************************************
Функция ВремяЧМС(Знач КолвоСекунд) Экспорт
	
	ОтрицательныйТаймер = КолвоСекунд < 0;
	Если ОтрицательныйТаймер Тогда
		КолвоСекунд = 0 -КолвоСекунд;
	КонецЕсли;
	
	КолвоЧасов = Цел(КолвоСекунд/(60*60));
	КолвоСекунд = КолвоСекунд - КолвоЧасов*60*60;
	
	КолвоМинут = Цел(КолвоСекунд/60);
	КолвоСекунд = КолвоСекунд - КолвоМинут*60;
	
	Стр = ?(ОтрицательныйТаймер, "-", "") + ?(КолвоЧасов=0, "", Формат(КолвоЧасов,"")+":") + Формат(КолвоМинут,"ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(КолвоСекунд,"ЧЦ=2; ЧН=00; ЧВН=");
	
	Возврат Стр;
КонецФункции

//*****************************************************************************
// Форма слова во множественном числе с числительным
// Слово1  - форма слова в ед числе      ("шкаф")
// Слово2  - форма слова для числит 2-4  ("шкафа")
// Слово3  - форма слова для числит 5-10 ("шкафов")
// _Чсл    - числительное
// ФормаМЧ("шкаф","шкафа","шкафов",_Чсл)
Функция ФормаМЧ(Слово1,Слово2,Слово3,_Чсл) Экспорт
	// остаток
	Ост = _Чсл-Цел(_Чсл/10)*10;
	Если (_Чсл >10) И (_Чсл<20) Тогда
		Форма = 3;
	ИначеЕсли Ост=1 Тогда
		Форма = 1;
	ИначеЕсли (Ост>1) И (Ост<5) Тогда
		Форма = 2;
	Иначе
		Форма = 3;
	КонецЕсли;
	Если Форма=1 Тогда
		Возврат Слово1;
	ИначеЕсли Форма=2 Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;
КонецФункции // ФормаМЧ

//================================================================================
Функция Число10в16(число10) экспорт
	Перем цифры; 
	Перем результат;
	Перем База;
	цифры = "0123456789abcdef";
	база = Число(число10);
	
	результат = "";
	
	пока база<>0 цикл
		результат = сред(цифры,база%16+1,1) + результат;
		база = цел(база/16);
	КонецЦикла;
	
	Если СтрДлина(Результат)/2 <> цел(СтрДлина(Результат)/2) тогда
		Результат ="0" + Результат;
	КонецЕсли;
	
	возврат результат;
КонецФункции

//================================================================================
Функция Число16в10(число16) экспорт 
	Перем цифры; 	
	Перем результат;
	Перем База;
	цифры = "0123456789abcdef";
    Результат = 0;
	
	база = сокрлп(число16);
	всего= стрдлина(число16);
	для ном = 1 по всего цикл
		Результат = Результат + (Найти(цифры,сред(база,ном,1))-1)*pow(16,всего-ном);
	конеццикла;
	возврат результат;
КонецФункции

#КонецЕсли

#Если ТолстыйКлиентУправляемоеПриложение Тогда
	
Функция ТекущаяДатаНаСервере()
	Возврат ТекущаяДатаСеанса();	
КонецФункции
      	
#КонецЕсли