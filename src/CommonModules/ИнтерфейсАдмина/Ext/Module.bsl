#Если НЕ ТонкийКлиент Тогда
      	
// Вызывается из меню интерфейса Админа
//
Процедура ОткрытьНастройкуРМ(ИмяРаздела=Неопределено) Экспорт
	
	Если глФормаНастройкиРМ = Неопределено Тогда
		глФормаНастройкиРМ = Справочники.РабочиеМеста.ПолучитьФорму("НастройкаРМ");
	КонецЕсли; 
	глФормаНастройкиРМ.Открыть();
	
	Если ИмяРаздела <> Неопределено Тогда
		глФормаНастройкиРМ.ПерейтиВРаздел(ИмяРаздела);
	КонецЕсли; 
	
КонецПроцедуры

// Производит выбор и установку периода в стандартном диалоге
//
// Параметры:
//	Дата1	- начало периода
//	Дата2	- конец периода
//
Процедура ВыборПериода(Дата1,Дата2) Экспорт
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.УстановитьПериод(Дата1, Дата2);
	
	Если НастройкаПериода.Редактировать() Тогда
		
		Дата1 = НастройкаПериода.ПолучитьДатуНачала();
		Дата2 = НастройкаПериода.ПолучитьДатуОкончания();
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение списка пометок в формах справочников
// производится в соответствии с наличием элементов в табличной части
//
// Параметры:
//  СписокПометок	- список значений с пометками
//  ТабЧасть		- табличная часть справочника
//	ИмяРеквизита	- имя реквизита таб.части с ссылками на справочник всех значений
//
Процедура ЗаполнитьСписокПометокПоТабЧасти(СписокПометок,ТабЧасть,ИмяРеквизита) Экспорт
	
	МД = Метаданные.НайтиПоТипу(Метаданные.НайтиПоТипу(ТипЗнч(ТабЧасть)).Реквизиты[ИмяРеквизита].Тип.Типы()[0]);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник."+МД.Имя+" ГДЕ НЕ ПометкаУдаления "+ ?(МД.Иерархический," И НЕ ЭтоГруппа", "")+" УПОРЯДОЧИТЬ ПО Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПометок.Добавить(Выборка.Ссылка, , ТабЧасть.Найти(Выборка.Ссылка,ИмяРеквизита) <> Неопределено );
	КонецЦикла; 
	
КонецПроцедуры

// Заполнение таб.части справочников по списку пометок
//
// Параметры:
//  СписокПометок	- список значений с пометками
//  ТабЧасть		- табличная часть справочника
//	ИмяРеквизита	- имя реквизита таб.части с ссылками на справочник всех значений
//
Процедура ЗаполнитьТабЧастьПоСпискуПометок(СписокПометок,ТабЧасть,ИмяРеквизита) Экспорт
	
	ТабЧасть.Очистить();
	
	Для каждого ЭлементСписка Из СписокПометок Цикл
		
		Если ЭлементСписка.Пометка Тогда
			ТабЧасть.Добавить()[ИмяРеквизита] = ЭлементСписка.Значение;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Обработка выбора карты доступа в формах 
//
// Параметры:
//  ВыбКарта  				- ссылка на выбранную карту
//	ТекКарта				- текущая карта в форме
//	Привязка				- ссылка на объект-привязку
//
Функция ОбработкаВыбораКартыДоступа(ВыбКарта, ТекКарта, Привязка) Экспорт
	
	Если Привязка.Пустая() Тогда
		Предупреждение("Элемент должен быть записан!",5);
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(ВыбКарта) = Тип("Строка") Тогда
		_Идентификатор = Сред(ВыбКарта,15);
		ВыбКарта = Справочники.КартыДоступа.НайтиПоРеквизиту("Идентификатор", _Идентификатор);
	КонецЕсли; 
	
	Если ВыбКарта.Пустая() Тогда
		Предупреждение("Ошибка идентификации!
		|Карта доступа не распознана!",5);
		Возврат Ложь;
		
	ИначеЕсли ВыбКарта.Блокировка Тогда
		Предупреждение("Карта заблокирована!
		|"+ВыбКарта.Комментарий,5);
		Возврат Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(ВыбКарта.Привязка) И ВыбКарта.Привязка<>Привязка Тогда
		Если Вопрос("Эта карта уже привязана к "+ВыбКарта.Привязка.Метаданные().Синоним+":"+ВыбКарта.Привязка+"
			|Вы хотите ее переопределить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			
			Возврат Ложь;
		КонецЕсли;                   
		
	КонецЕсли;
	
	Попытка
	
		
		Если НЕ ТекКарта.Пустая() Тогда
			КартаОбъект = ТекКарта.ПолучитьОбъект();
			КартаОбъект.Привязка = 0;
			КартаОбъект.Записать();
		КонецЕсли; 
		
		КартаОбъект = ВыбКарта.ПолучитьОбъект();
		КартаОбъект.Привязка = Привязка;
		КартаОбъект.Записать();
		
		
		
	Исключение
		
		Предупреждение(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки; 
	
	Возврат Истина;
КонецФункции

// Обработка очистки карты доступа в формах
//
Функция ОбработкаОчисткиКартыДоступа(КартаДоступа) Экспорт
	
	Если Не ЗначениеЗаполнено(КартаДоступа) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КартаОбъект = КартаДоступа.ПолучитьОбъект();
	КартаОбъект.Привязка = 0;
	Попытка 
		КартаОбъект.Записать();
	Исключение
		Предупреждение("Не удалось очистить привязку карты доступа!");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Проставление пометок в списке в соответствии с двоичным представлением десятичного числа
//
Процедура ЧислоВСписокПометок(Список, Число10) Экспорт
	
	Размерность=Список.Количество();
	
	СтрЧисло2 = Формат( Число10в2(Число10), "ЧВН=;ЧГ=;ЧЦ="+Размерность);
	
	Для н=1 По Размерность Цикл
		Список[н-1].Пометка = Сред(СтрЧисло2,н,1)="1";
	КонецЦикла;
	
КонецПроцедуры

// Возвращает десятичное число, соответствующее двоичному представлению пометок в списке
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция СписокПометокВЧисло(Список) Экспорт
	
	Размерность=Список.Количество();
	
	Число10=0;
	
	Для н=1 По Размерность Цикл
		
		Если Список[н-1].Пометка Тогда
			Число10 = Число10 + Pow(2,Размерность-н);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Число10;
	
КонецФункции

// Заполняет пустой список колонок для печати в счете и проставляет в нем пометки
// в соответствии со вторым параметром
Процедура ЗаполнитьСписокЧтоПечататьВСчете(Список, ЧислоПометки=0) Экспорт
	
	Список.Добавить("№ строки");
	Список.Добавить("Наименование");
	Список.Добавить("Ед.измерения");
	Список.Добавить("Количество");
	Список.Добавить("Цена");
	Список.Добавить("Сумма"); 
	Список.Добавить("Скидка/наценка");
	Список.Добавить("С учетом скидки");
	Список.Добавить("Выход в граммах");
	
	Если ЧислоПометки<>0 Тогда
		ЧислоВСписокПометок(Список, ЧислоПометки);
	КонецЕсли; 
	
КонецПроцедуры

// Заполняет пустой список значениями дней недели и проставляет в нем пометки
// в соответствии со вторым параметром
Процедура ЗаполнитьСписокДнейНедели(Список, ЧислоПометки=0) Экспорт
	
	Список.Очистить();
	Список.Добавить("Понедельник");
	Список.Добавить("Вторник");
	Список.Добавить("Среда");
	Список.Добавить("Четверг");
	Список.Добавить("Пятница");
	Список.Добавить("Суббота");
	Список.Добавить("Воскресенье");
	
	Если ЧислоПометки<>0 Тогда
		ЧислоВСписокПометок(Список, ЧислоПометки);
	КонецЕсли; 
	
КонецПроцедуры

// Сдвигает строку списка значений в указанном направлении
//
Процедура СдвинутьСтрокуСписка(Список, Строка, Направление) Экспорт
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИндексСтроки = Список.Индекс( Строка ) + Направление;
	Если ИндексСтроки < 0 ИЛИ ИндексСтроки > Список.Количество()-1 Тогда
		Возврат;
	КонецЕсли;
	
	Список.Сдвинуть(Строка, Направление);
	
КонецПроцедуры

// Открытие формы выбора спр. Скидки с отбором по признаку "Бонусная"
//
Процедура ВыборСкидкиБонуса(ЭлементВледелец, ВыборБонусов) Экспорт
	
	ФормаВыбора = Справочники.Скидки.ПолучитьФормуВыбора( , ЭлементВледелец );
	
	Если глВерсия>1 Тогда
		ФормаВыбора.Отбор.Бонусная.Установить(ВыборБонусов);
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Бонусная.Доступность = Ложь;
		ФормаВыбора.ПараметрВыборГруппИЭлементов = ?(глВерсия=2, ИспользованиеГруппИЭлементов.Элементы, ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	КонецЕсли; 
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// вызывается из обработчиков событий "НачалоВыбора" реквизитов типа "Время"
//
Процедура ВыбратьВремяИзСписка(Форма, ЭлементФормы, КонецДиапазона=Ложь) Экспорт
	
	СписокВремени = Новый СписокЗначений;
	Для ЧЧ=1 По 23 Цикл
		Время = Дата(1,1,1,ЧЧ,0,0);
		СписокВремени.Добавить(Время, Формат(Время,"ДФ=ЧЧ:мм") );
	КонецЦикла;
	
	ВыбЭлемент = Форма.ВыбратьИзСписка(СписокВремени);
	
	Если ВыбЭлемент<>Неопределено Тогда
		ЭлементФормы.Значение = ВыбЭлемент.Значение;
		Если КонецДиапазона Тогда
			ЭлементФормы.Значение = ЭлементФормы.Значение - 1;
		КонецЕсли;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполнение наименований на дополнительных  языках
//
Процедура ЗаполнитьДопНаименования(ЭлементСправочника,ТаблицаДопНаименования) Экспорт
	
	Если глВерсия=1 ИЛИ НЕ Константы.ДопЯзыки.Получить() Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭлементСправочника", ЭлементСправочника);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Языки.Ссылка КАК Язык,
	|	ВложенныйЗапрос.ЯзыкСсылка,
	|	ВложенныйЗапрос.Перевод КАК Наименование
	|ИЗ
	|	Справочник.Языки КАК Языки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПереводСправочников.Язык.Ссылка КАК ЯзыкСсылка,
	|			ПереводСправочников.Наименование КАК Перевод
	|		ИЗ
	|			РегистрСведений.ДопНаименования КАК ПереводСправочников
	|		ГДЕ
	|			ПереводСправочников.СправочникСсылка = &ЭлементСправочника) КАК ВложенныйЗапрос
	|		ПО Языки.Ссылка = ВложенныйЗапрос.ЯзыкСсылка
	|ГДЕ
	|	Языки.ПометкаУдаления = Ложь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицаДопНаименования              = ТаблицаДопНаименования.Добавить();
		СтрокаТаблицаДопНаименования.Язык	      = Выборка.Язык;
		СтрокаТаблицаДопНаименования.Наименование = Выборка.Наименование;
		
	КонецЦикла; 
	
КонецПроцедуры

// Запись наименований на дополнительных языках
//
Процедура ЗаписатьДопНаименования(ЭлементСправочника,ТаблицаДопНаименования) Экспорт 
	
	Если глВерсия=1 ИЛИ НЕ Константы.ДопЯзыки.Получить() Тогда
		Возврат;
	КонецЕсли; 
	
	НаборЗаписей = РегистрыСведений.Допнаименования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СправочникСсылка.Установить(ЭлементСправочника);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();  
	Для Каждого СтрокаТаблицыДопНаим Из ТаблицаДопНаименования Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыДопНаим.Наименование) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Язык = СтрокаТаблицыДопНаим.Язык;
			НоваяЗапись.СправочникСсылка = ЭлементСправочника;
			НоваяЗапись.Наименование = СтрокаТаблицыДопНаим.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция  ВыбратьИзСпискаЯзыков(Форма=Неопределено, ЭлементФормы=Неопределено)  Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Языки.Ссылка,
	|	Языки.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Языки КАК Языки
	|ГДЕ
	|	Языки.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	
	СписокЯзыков = Новый СписокЗначений;				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЯзыков.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла; 
	
	Если Форма=Неопределено Тогда
		СписокЯзыков.Вставить(0,"Основной");
		Возврат СписокЯзыков.ВыбратьЭлемент();
	КонецЕсли; 
	
	ВыбЭлемент = Форма.ВыбратьИзСписка(СписокЯзыков);
	Если ВыбЭлемент<>Неопределено Тогда
		ЭлементФормы.Значение = ВыбЭлемент.Значение;
		Форма.Модифицированность = Истина;
	КонецЕсли; 
	
	Возврат ВыбЭлемент;
КонецФункции

Функция  ВыбратьИзСпискаТиповЦен(Форма=Неопределено, ЭлементФормы=Неопределено)  Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТипыЦен.Ссылка,
	|	ТипыЦен.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ТипыЦен КАК ТипыЦен
	|ГДЕ
	|	ТипыЦен.ПометкаУдаления = ЛОЖЬ
	|	И ТипыЦен.Ссылка <> ЗНАЧЕНИЕ(Справочник.ТипыЦен.Себестоимость)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	
	СписокТиповЦен = Новый СписокЗначений;				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Чтобы не открывать форму выборка, вставим проверку
	Если Выборка.Количество() = 1 Тогда 
		Возврат Справочники.ТипыЦен.Розничная;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		СписокТиповЦен.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла; 
	
	Если Форма=Неопределено Тогда
		//СписокТиповЦен.Вставить(0, Справочники.ТипыЦен.Розничная, Справочники.ТипыЦен.Розничная.Наименование);
		ВыбЭлемент = СписокТиповЦен.ВыбратьЭлемент();
		Возврат ?(ВыбЭлемент <> Неопределено, ВыбЭлемент.Значение, Неопределено);
	КонецЕсли; 
	
	ВыбЭлемент = Форма.ВыбратьИзСписка(СписокТиповЦен);
	Если ВыбЭлемент<>Неопределено Тогда
		ЭлементФормы.Значение = ВыбЭлемент.Значение;
		Форма.Модифицированность = Истина;
	КонецЕсли; 
	
	Возврат ВыбЭлемент.Значение;
КонецФункции

// Проставляет в спр.Товары реквизит ЕстьВПродаже в соответствии с текущим моментом времени
// В фоновом режиме вызывается перед открытием меню из заказа.
// Принудительно из Режима администратора или в интерфейсе администратора.
Процедура ОбновлениеПризнакаНаличияВПродаже(ФоновыйРежим=Ложь) Экспорт
	
	
	ПолноеОбновление = НЕ( ФоновыйРежим И НачалоДня(ТекущаяДата()) = Константы.ДатаОбновленияПризнакаНаличияВПродаже.Получить() );
	
	Если ПолноеОбновление Тогда
		
		ОткрытьФормуМодально("РегистрСведений.ДействующиеРасписания.Форма.ФормаОбновленияНаличияВПродаже");
		Возврат;
		
		Если ЗначениеЗаполнено(глРабочееМесто) Тогда
			глОжидание.Начало("Пожалуйста, подождите...", "Выполняется обновление признака наличия товаров в продаже.");
		Иначе
			Состояние("Выполняется обновление признака наличия товаров в продаже...");
		КонецЕсли;
		
		//НачатьТранзакцию();
		
		ФлагОшибки = Ложь;
		ВыполнитьОбновлениеПризнакаНаличия("Товары", ФлагОшибки);
		Если глВерсия > 1 Тогда
			ВыполнитьОбновлениеПризнакаНаличия("Специфики", ФлагОшибки);
		КонецЕсли; 
		
		Если НЕ ФлагОшибки Тогда
			Константы.ДатаОбновленияПризнакаНаличияВПродаже.Установить(ТекущаяДата());
		КонецЕсли;
		
		//ЗафиксироватьТранзакцию();   
		
		Если ЗначениеЗаполнено(глРабочееМесто) Тогда
			глОжидание.Конец();
		Иначе
			Предупреждение("Обновление завершено!");
		КонецЕсли;
		
		глТаблицаНаличияПоВремени = Неопределено;
		
	Иначе
		
		Попытка
			ФЗ = ФоновыеЗадания.Выполнить("ВыполнениеРегламентныхЗаданий.ВыполнитьОбновлениеПризнакаНаличияВпродаже",,"ВыполнитьОбновлениеПризнакаНаличияВпродаже","ВыполнитьОбновлениеПризнакаНаличияВпродаже");
			ФоновоеЗадание = ФЗ.УникальныйИдентификатор;
		Исключение
		КонецПопытки;

		Возврат;

		// обновление позиций с установленным ограничением по времени
		Если глТаблицаНаличияПоВремени = Неопределено Тогда
			
			глТаблицаНаличияПоВремени = Новый ТаблицаЗначений;
			глТаблицаНаличияПоВремени.Колонки.Добавить("Товар");
			глТаблицаНаличияПоВремени.Колонки.Добавить("Время");
			
			Запрос = Новый Запрос();
			Запрос.Текст = "
			|ВЫБРАТЬ 
			|	Ссылка КАК Товар,
			|	КогдаВПродажеВремя1,
			|	КогдаВПродажеВремя2
			|ИЗ 
			|	Справочник.Товары
			|ГДЕ
			|	НЕ ПометкаУдаления И НЕ ЭтоГруппа И
			|	КогдаВПродаже <> 0 И
			|	( КогдаВПродажеВремя1<>ДАТАВРЕМЯ(1,1,1) ИЛИ
			|	  КогдаВПродажеВремя2<>ДАТАВРЕМЯ(1,1,1) )
			|
			|";
			
			Если глВерсия > 1 Тогда
				Запрос.Текст = Запрос.Текст + "
				|ОБЪЕДИНИТЬ
				|
				|ВЫБРАТЬ 
				|	Ссылка,
				|	КогдаВПродажеВремя1,
				|	КогдаВПродажеВремя2
				|ИЗ 
				|	Справочник.Специфики
				|ГДЕ
				|	НЕ ПометкаУдаления И НЕ ЭтоГруппа И
				|	КогдаВПродаже <> 0 И
				|	( КогдаВПродажеВремя1<>ДАТАВРЕМЯ(1,1,1) ИЛИ
				|	  КогдаВПродажеВремя2<>ДАТАВРЕМЯ(1,1,1) )
				|
				|";
			КонецЕсли;
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтрокаВремени = глТаблицаНаличияПоВремени.Добавить();
				СтрокаВремени.Товар	= Выборка.Товар;
				СтрокаВремени.Время	= Выборка.КогдаВПродажеВремя1;
				
				СтрокаВремени = глТаблицаНаличияПоВремени.Добавить();
				СтрокаВремени.Товар	= Выборка.Товар;
				СтрокаВремени.Время	= Выборка.КогдаВПродажеВремя2;
				
			КонецЦикла;
			
			глТаблицаНаличияПоВремени.Сортировать("Время");
		КонецЕсли;
		
		ТекВремя = ВремяИзДаты(ТекущаяДата());
		Пока глТаблицаНаличияПоВремени.Количество()<>0 Цикл
			
			Если глТаблицаНаличияПоВремени[0].Время > ТекВремя Тогда
				Прервать;
			КонецЕсли;
			
			Товар = глТаблицаНаличияПоВремени[0].Товар;
			
			ТекущееНаличиеВПродаже = ОпределитьТекущееНаличиеВПродаже(Товар);
			Если Товар.ЕстьВПродаже <> ТекущееНаличиеВПродаже Тогда
				
				СпрОбъект = Товар.ПолучитьОбъект();
				СпрОбъект.ЕстьВПродаже = ТекущееНаличиеВПродаже;
				
				ИнтерфейсРМ.ПопыткаДействияСОбъектом( СпрОбъект, "Объект.Записать()" );
			КонецЕсли;
			
			глТаблицаНаличияПоВремени.Удалить(0);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры



Процедура ВыполнитьОбновлениеПризнакаНаличия(ИмяСправочника, ФлагОшибки)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка, ЕстьВПродаже
	|ИЗ Справочник."+ИмяСправочника+"
	|ГДЕ НЕ ЭтоГруппа И НЕ ПометкаУдаления
	|ДЛЯ ИЗМЕНЕНИЯ");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекущееНаличиеВПродаже = ОпределитьТекущееНаличиеВПродаже(Выборка.Ссылка);
		Если Выборка.ЕстьВПродаже = ТекущееНаличиеВПродаже Тогда
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.ЕстьВПродаже = ТекущееНаличиеВПродаже;
		
		Если ЗначениеЗаполнено(глРабочееМесто) Тогда
			Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( СпрОбъект, "Объект.Записать()" ) Тогда
				ФлагОшибки = Истина;
			КонецЕсли; 
		Иначе
			Попытка
				СпрОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
				ФлагОшибки = Истина;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Описание процедуры
//
// Параметры:
//	Параметр1	- описание параметра
//
Функция ИнфБазаВыбратьИзСписка(Форма=Неопределено, ЭлементФормы=Неопределено) Экспорт
	
	СписокТО = Новый СписокЗначений;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка, Наименование ИЗ Справочник.ИнформационныеБазы
	|ГДЕ НЕ ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО Наименование
	|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокТО.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла; 
	
	Возврат СписокТО.ВыбратьЭлемент();
КонецФункции

// Проверка что цвет указан как абсолютное значение, а не элемент стиля
//
Процедура ПроверитьЦветНаАбсолютный(ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ВыбранноеЗначение.Вид <> ВидЦвета.Абсолютный Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Для выбора цвета из предопределенных коллекций сделайте следующее:
		|
		|1. Выберите нужный цвет 
		|2. Под списком для выбора цвета измените любое значение на единицу 
		|3. Нажмите ""ОК""");
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает тип цен по умолчанию для текущей ИБ
// 
Функция ПолучитьОсновнойТипЦен() Экспорт
	Возврат Справочники.ТипыЦен.Розничная;	
КонецФункции

///////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕЧАТИ ПЕЧАТНЫХ ФОРМ

// Процедура заполняет список печатных форм в ПодменюПечати в форме документа.
//
// Параметры:
//  Объект  - объект, из которого получается список печатных форм.
//  Подменю - элемент формы для заполнения списком печатных форм.
//
Процедура ЗаполнитьПодменюВыбораПечатныхФорм(Объект, Подменю) Экспорт
	
	Попытка
		СписокМакетов = Объект.ПолучитьСписокПечатныхФорм();
		УстановитьПодменюВыбораПечатнойФормы(Подменю,
		СписокМакетов,
		Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));		
	Исключение
	КонецПопытки;

	
КонецПроцедуры

// Заполняет список пунктов подменю выбора печатных форм значениями переданного соответствия.
// Всем кнопкам назначается одно переданное действие.
//
// Параметры:
//  ЭлементМеню            - кнопка командной панели формы, соответствующая подменю выбора печатных форм, 
//                           которое надо заполнить, 
//  СоответствиеМакетов    - соответствие, содержащее список макетов печатных форм 
//                           объекта для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбора  - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораПечатнойФормы(ЭлементМеню, СписокМакетов, ОбъектОбработкиВыбора) Экспорт
	
	Если ТипЗнч(СписокМакетов) = Тип("СписокЗначений") Тогда
		
		Для Каждого СтрокаМакетаВСписке Из СписокМакетов Цикл
			
			Если СтрокаМакетаВСписке.Значение = Неопределено Тогда
				ЭлементМеню.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			Иначе			
				Если ТипЗнч(СтрокаМакетаВСписке.Значение) = Тип("Строка") Тогда
					ЭлементМеню.Кнопки.Добавить(СтрокаМакетаВСписке.Значение, ТипКнопкиКоманднойПанели.Действие, 
					СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
				Иначе
					ЭлементМеню.Кнопки.Добавить("ВнешняяПечатнаяФорма_" + СтрокаМакетаВСписке.Значение.Код, ТипКнопкиКоманднойПанели.Действие, 
					СтрокаМакетаВСписке.Представление, ОбъектОбработкиВыбора); 
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПодменюВыбораПечатнойФормы()

// Создет список печатных форм в "ПодменюПечати".
//
// Параметры:
//  Форма - Форма списка документов.
//  ДокументСписок - объект документ-списка.
//
Процедура СоздатьСписокПечатныхФорм(Форма = Неопределено, ДокументСписок = Неопределено , ЭлементФормыСписка = Неопределено, КоманднаяПанель = Неопределено) Экспорт
	
	Если КоманднаяПанель <> Неопределено Тогда
		ПанельКоманд = КоманднаяПанель;
	Иначе
		ПанельКоманд = Форма.ЭлементыФормы.ДействияФормы;
	КонецЕсли;
	
	Если ПанельКоманд.Кнопки.ПодменюПечати.Кнопки.Количество() = 0 Тогда	
		Попытка
			Если ЭлементФормыСписка <> Неопределено Тогда
				ДокументОбъект = ЭлементФормыСписка.ТекущаяСтрока.Документ.Ссылка.ПолучитьОбъект();
			ИначеЕсли Найти(ТипЗнч(ДокументСписок), "Справочник") > 0 Тогда
				ДокументОбъект = Форма.ЭлементыФормы.СправочникСписок.ТекущаяСтрока.Ссылка.ПолучитьОбъект();				
			Иначе
				ДокументОбъект = Форма.ЭлементыФормы.ДокументСписок.ТекущаяСтрока.Ссылка.ПолучитьОбъект();
			КонецЕсли;	
			
			//ДокументОбъект = ФормаСписка.ТекущаяСтрока.Ссылка.ПолучитьОбъект();
			СписокМакетов = ДокументОбъект.ПолучитьСписокПечатныхФорм();
			УстановитьПодменюВыбораПечатнойФормы(ПанельКоманд.Кнопки.ПодменюПечати,
			СписокМакетов,
			Новый Действие("ДействияФормыДействиеВыбратьПечатнуюФормы"));
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры //СоздатьСписокПечатныхФорм()

// Вызывает процедуру Печать() из модуля документа и передает в неё название макета.
//
// Параметры:
//  Форма - форма списка документов.
//  Кнопка - элемент формы.
//
Процедура ВыбратьПечатнуюФорму(Форма, Кнопка, Список="ДокументСписок",ОбъектСсылка=Неопределено)  Экспорт
	
	Если ОбъектСсылка = Неопределено Тогда
		ТекДанные = Форма.ЭлементыФормы[Список].ТекущиеДанные;
		Если ТекДанные=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Объект = ТекДанные.Ссылка.ПолучитьОбъект();
	Иначе
		Объект = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	СписокМакетов = Объект.ПолучитьСписокПечатныхФорм();
	
	СтрокаМакетаВСписке = СписокМакетов.НайтиПоЗначению(Кнопка.Имя);
	Если СтрокаМакетаВСписке <> Неопределено Тогда
		Объект.Печать(СтрокаМакетаВСписке.Значение);
		
	Иначе
		СсылкаНаПечатнуюФорму = Справочники.ВнешниеОбработки.НайтиПоКоду(СтрЗаменить(Кнопка.Имя, "ВнешняяПечатнаяФорма_", ""));
		
		Если СсылкаНаПечатнуюФорму <> Неопределено Тогда
			Объект.Печать(СсылкаНаПечатнуюФорму);
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

// процедуры и функции для организации печати документов
// в справочнике ПечатныеФормы есть предопределенные элементы.
// каждому виду документа соответствует группа, её имя соответствует имени справочника или документа.
// в группе созданы элементы соответствующие всем предопределенным печатным формам
// соответсвие имен элементов и имени макетов в документе. 
// прописано в процедуре СправочникПолучитьИмяМакетаПечатнойФормы()
//
// в модуле справоника написана процедура
// "Печать_ИмяПроцедурыПечати(Макет,НаПринтер);" 
// в процедуре СправочникПолучитьИмяПроцедурыПечатнойФормы(ПечатнаяФорма) 
// прописано соответствие имен процедур именам печатных форм
//
// чтобы добавить новый документ в конфигурацию с печатными формами надо:
// 1. создать группу в справочнике с именем соответствующем имени справоника или документа.
// 2. создать макет в документе или справонике с подходящим именем.
// 3. создать в группе справочника предопределенный элемент с подходящим именем.
// 4. написать процедуру печати в модуле документа (справочника) с подходящем именем
// 5. прописать соответсвие имени предопределенного элемента с именем макета
//   в процедуре СправочникПолучитьИмяМакетаПечатнойФормы(ПечатнаяФорма)
// 6. прописать соответсвие имени предопределенного элемента с именем процедуры печати
//   в процедуре СправочникПолучитьИмяПроцедурыПечатнойФормы(ПечатнаяФорма)
// 7. если печатная форма по умолчанию зависит от условий, то надо написать это условие
//   в функции ПечатнаяФормаПоУмолчанию(СправочникОбъект)
// 8. Список предлагаеммых печатных форм формируется в модуле общей формы "ФормаВыбораПечатныхФорм"
//   в её процедуре ПриОткрытии() можно написать условие.


// Функция возвращает имя макета для печатной формы
// Параметры: ПечатнаяФорма - элемнт справочника "ПечатныеФормыДокументов"
// Возвращаемое значение: Строка содержащая имя макета
Функция СправочникПолучитьИмяМакетаПечатнойФормы(ПечатнаяФорма) Экспорт
	// для предопределенных форм возвращаем имя макета печатной формы
	//Если ПечатнаяФорма=Справочники.ПечатныеФормы.ТОРГ12_Услуги Тогда
	//	Возврат "ТОРГ12";
	//Иначе
	Возврат Справочники.ПечатныеФормы.ПолучитьИмяПредопределенного(ПечатнаяФорма.Ссылка);
	//КонецЕсли;
КонецФункции

// Функция возвращает имя процедуры для печати
// Параметры: ПечатнаяФорма - элемнт справочника "ПечатныеФормыДокументов"
// Возвращаемое значение: Строка содержащая строку вызова печати
Функция СправочникПолучитьИмяПроцедурыПечатнойФормы(ПечатнаяФорма)Экспорт
	// для предопределенных форм возвращаем имя процедуры с параметрами
	// процедура должна быть определена в модуле документа (справочника)
	Если ПечатнаяФорма=Справочники.ПечатныеФормы.ПростоеМеню Тогда
		Возврат "ПечатьМеню(""ПростоеМеню"");";
	ИначеЕсли глВерсия>1 И ПечатнаяФорма=Справочники.ПечатныеФормы.МенюСПереводом Тогда
		Возврат "ПечатьМеню(""МенюСПереводом"");";
	ИначеЕсли глВерсия>1 И ПечатнаяФорма=Справочники.ПечатныеФормы.МенюСоСпецификами Тогда
		Возврат "ПечатьМеню(""МенюСоСпецификами"");";
	ИначеЕсли ПечатнаяФорма=Справочники.ПечатныеФормы.МенюСоШтрихКодами Тогда
		Возврат "ПечатьМеню(""МенюСоШтрихКодами"");";
	ИначеЕсли ПечатнаяФорма=Справочники.ПечатныеФормы.МенюСПоказателями Тогда
		Возврат "ПечатьМеню(""МенюСПоказателями"");";          
	Иначе
		Возврат "Печать_"+Справочники.ПечатныеФормы.ПолучитьИмяПредопределенного(ПечатнаяФорма.Ссылка)+"(Макет,НаПринтер);";
	КонецЕсли;
КонецФункции

// Функция возвращает печатную форму по умолчанию для заданного документа (справочника)
// Параметры: ДокументОбъект
// Возвращаемый параметр: Элемент справочника ПечатныеФормыДокументов
Функция ПечатнаяФормаПоУмолчанию(СправочникОбъект) Экспорт
	ПечатнаяФормаПоУмолчанию=Неопределено;
	СправочникОбъектИмя=СправочникОбъект.Метаданные().Имя;
	ГруппаПечатныхФорм=Справочники.ПечатныеФормы["Справочник"+СправочникОбъектИмя];
	Если НЕ ГруппаПечатныхФорм.ПечатнаяФормаПоУмолчанию.Пустая() Тогда
		ПечатнаяФормаПоУмолчанию=ГруппаПечатныхФорм.ПечатнаяФормаПоУмолчанию;
	Иначе
		Если ТипЗнч(СправочникОбъект) = Тип("СправочникСсылка.Товары") Тогда
			ПечатнаяФормаПоУмолчанию=Справочники.ПечатныеФормы.ПростоеМеню;
			ГруппаПечатныхФорм.ПолучитьОбъект().ПечатнаяФормаПоУмолчанию = ПечатнаяФормаПоУмолчанию;
			ГруппаПечатныхФорм.ПолучитьОбъект().Записать();
		Иначе
			Попытка
				ПечатнаяФормаПоУмолчанию=Справочники.ПечатныеФормы[СправочникОбъектИмя];
			Исключение // ***** 
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПечатнаяФормаПоУмолчанию;
КонецФункции

// Функция проверяет можно ли печатать указанную печатную форму для заданного документа
// Параметры:
//  ПФ - Элемент справочника ПечатныеФормыДокументов, печатная форма, которую надо печатать
//  ДокументОбъект - ссылка на объект документа
// Возвращаемое значение: Истина - печать запрещена, ложь - печать разрешена
Функция ЗапретПечати(ПФ,СправочникОбъект) Экспорт
	Возврат Ложь;
КонецФункции

// Функция выполняется перед печатью всех документов (справочников), возвращает инициированный табличный документ
// Если необходимо выводит Штрих-код в шапке печатной формы
// Параметры:
//  ДокументОбъект - Ссылка на объект документа
//  Макет - макет печатной формы
//  Имя - Имя печатной формы
//  ПечатьШП - Булево, если истина, то будет выведен штрих-код в шапке печатной формы
// Возвращаемое значение: Табличный документ
Функция ИнициализироватьТабДокумент(СправочникОбъект,Макет,Имя,ПечатьШК)Экспорт
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_"+СправочникОбъект.Метаданные().Имя+"_"+Имя;
	ТабДокумент.ТолькоПросмотр=Истина;
	Возврат ТабДокумент;
КонецФункции

// Процедура вызывается для вывода печатной формы на экран или сразу на принтер
// Параметры: 
//  ТабДокумент - Табличный документ
//  НаПринтер - Булево, если истина то надо печать без просмотра сразу на принтер
//  Заголовок - заголовок печатной формы
Процедура ВывестиТабДокумент(ТабДокумент,НаПринтер,Заголовок) Экспорт;
	ТабДокумент.АвтоМасштаб=Истина;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	Если НаПринтер Тогда
		ТабДокумент.Напечатать();
	Иначе
		ТабДокумент.Показать(Заголовок);
	КонецЕсли;
КонецПроцедуры

Процедура СформироватьМенюПечать(СправочникОбъект,Форма,Действие) Экспорт 
	// закрытая процедура
	
	ПечатнаяФормаПоУмолчанию=ПечатнаяФормаПоУмолчанию(СправочникОбъект);
	Форма.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПечатьПоУмолчанию.Текст=ПечатнаяФормаПоУмолчанию.Наименование;
	
КонецПроцедуры

Функция ПолучитьМакетПроцедуруПечатнойФормы(СправочникОбъект,ПечатнаяФорма) Экспорт
	//сообщать
	
	//возвращаем структура с полями "Макет" - хранилище с макетом, "Процедура" - текст процедуры
	//или Неопределено если не нашли или не задано ничего
	МетаданныеСправочника=СправочникОбъект.Метаданные();
	ГруппаПечатныхФорм=Справочники.ПечатныеФормы["Справочник"+МетаданныеСправочника.Имя];
	Если ПечатнаяФорма=Неопределено Тогда
		ПечатнаяФорма=ПечатнаяФормаПоУмолчанию(СправочникОбъект);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПечатнаяФорма) Тогда
		Сообщить("Не удалось получить печатную форму для справочника "+МетаданныеСправочника.Имя+".");
		Возврат Неопределено;
	КонецЕсли;
	СтрокаПФ=НайтиДанныеПечатнойФормы(СправочникОбъект,ПечатнаяФорма);
	Если СтрокаПФ=Неопределено И НЕ ПечатнаяФорма.Предопределенный Тогда
		Сообщить("Не удалось получить макет и процедуру печати для справочника "+МетаданныеСправочника.Имя+". ПФ:"+ПечатнаяФорма.Наименование);
		Возврат Неопределено;
	КонецЕсли;
	Если СтрокаПФ=Неопределено Тогда 
		//это предопределенная, можем использовать предопределенный макет
		ИмяМакета=СправочникПолучитьИмяМакетаПечатнойФормы(ПечатнаяФорма);
		Макет=СправочникОбъект.ПолучитьМакет(ИмяМакета);
		ТекстПроцедуры=СправочникПолучитьИмяПроцедурыПечатнойФормы(ПечатнаяФорма);
	Иначе
		Если ЗначениеЗаполнено(СтрокаПФ.Макет.Получить()) Тогда
			ИмяФайла=КаталогВременныхФайлов()+"$$$MXL.mxl";
			ДвоичныеДанные = СтрокаПФ.Макет.Получить();
			Попытка
				ДвоичныеДанные.Записать(ИмяФайла);
				Макет=Новый ТабличныйДокумент;
				Макет.Прочитать(ИмяФайла);
			Исключение
				Сообщить("Не удалось сохранить файл """+ИмяФайла+""" !", СтатусСообщения.Важное);
				Возврат Неопределено;
			КонецПопытки;
		ИначеЕсли ПечатнаяФорма.Предопределенный Тогда
			ИмяМакета=СправочникПолучитьИмяМакетаПечатнойФормы(ПечатнаяФорма);
			Макет=СправочникОбъект.ПолучитьМакет(ИмяМакета);
		Иначе
			Сообщить("Не удалось получить макет для печати справочника "+МетаданныеСправочника.Имя+". ПФ:"+ПечатнаяФорма.Наименование);
			Возврат Неопределено;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПФ.Процедура) Тогда
			ТекстПроцедуры=СтрокаПФ.Процедура;
		ИначеЕсли ПечатнаяФорма.Предопределенный Тогда
			ТекстПроцедуры=СправочникПолучитьИмяПроцедурыПечатнойФормы(ПечатнаяФорма);
		Иначе
			Сообщить("Не удалось получить процедуру для печати справочника "+МетаданныеСправочника.Имя+". ПФ:"+ПечатнаяФорма.Наименование);
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Структура=новый Структура;
	Структура.Вставить("Макет",Макет);
	Структура.Вставить("Процедура",ТекстПроцедуры);
	Возврат Структура;
КонецФункции

Функция НайтиДанныеПечатнойФормы(СправочникОбъект,ПечатнаяФорма) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПечатныеФормыПодключенныеФормы.Процедура,
	|	ПечатныеФормыПодключенныеФормы.Макет
	|ИЗ
	|	Справочник.ПечатныеФормы.ПодключенныеФормы КАК ПечатныеФормыПодключенныеФормы
	|ГДЕ
	|	ПечатныеФормыПодключенныеФормы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ПечатнаяФорма);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

///////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ФОРМИРОВАНИЯ ОТЧЕТОВ

// Процедура заполняет список отчетов в ПодменюОтчеты в формах справочников и документов.
//
// Параметры:
//  Объект  - объект, из которого получается список печатных форм.
//  Подменю - элемент формы для заполнения списком печатных форм.
//
Процедура ЗаполнитьПодменюВыбораОтчетов(Объект, Подменю) Экспорт
	
	Попытка
		СписокОтчетов = Объект.ПолучитьСписокОтчетов();
	УстановитьПодменюВыбораПечатнойФормы(Подменю,
	СписокОтчетов,
	Новый Действие("ДействияФормыДействиеВыбратьОтчет"));	
	Исключение
	КонецПопытки;
	
	
КонецПроцедуры

// Заполняет список пунктов подменю выбора отчетов значениями переданного соответствия.
// Всем кнопкам назначается одно переданное действие.
//
// Параметры:
//  ЭлементМеню            - кнопка командной панели формы, соответствующая подменю выбора печатных форм, 
//                           которое надо заполнить, 
//  СписокОтчетов		   - соответствие, содержащее список макетов печатных форм 
//                           объекта для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбора  - действие, которое надо выполнить при выборе любого пункта подменю.
//
Процедура УстановитьПодменюВыбораОтчетов(ЭлементМеню, СписокОтчетов, ОбъектОбработкиВыбора) Экспорт
	
	Если ТипЗнч(СписокОтчетов) = Тип("СписокЗначений") Тогда
		
		Для Каждого СтрокаОтчетаВСписке Из СписокОтчетов Цикл
			
			Если СтрокаОтчетаВСписке.Значение = Неопределено Тогда
				ЭлементМеню.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			Иначе			
				Если ТипЗнч(СтрокаОтчетаВСписке.Значение) = Тип("Строка") Тогда
					ЭлементМеню.Кнопки.Добавить(СтрокаОтчетаВСписке.Значение, ТипКнопкиКоманднойПанели.Действие, 
					СтрокаОтчетаВСписке.Представление, ОбъектОбработкиВыбора); 
				Иначе
					ЭлементМеню.Кнопки.Добавить("ВнешняяПечатнаяФорма_" + СтрокаОтчетаВСписке.Значение.Код, ТипКнопкиКоманднойПанели.Действие, 
					СтрокаОтчетаВСписке.Представление, ОбъектОбработкиВыбора); 
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьПодменюВыбораПечатнойФормы()

// Создет список печатных форм в ПодменюОтчеты.
//
// Параметры:
//  Форма - Форма списка документов.
//  ДокументСписок - объект документ-списка.
//
Процедура СоздатьСписокОтчетов(Форма = Неопределено, ДокументСписок = Неопределено , ЭлементФормыСписка = Неопределено, КоманднаяПанель = Неопределено) Экспорт
	
	Если КоманднаяПанель <> Неопределено Тогда
		ПанельКоманд = КоманднаяПанель;
	Иначе
		ПанельКоманд = Форма.ЭлементыФормы.ДействияФормы;
	КонецЕсли;
	
	Если ПанельКоманд.Кнопки.ПодменюОтчеты.Кнопки.Количество() = 0 Тогда	
		Попытка
			Если ЭлементФормыСписка <> Неопределено Тогда
				ДокументОбъект = ЭлементФормыСписка.ТекущаяСтрока.Документ.Ссылка.ПолучитьОбъект();
			ИначеЕсли Найти(ТипЗнч(ДокументСписок), "Справочник") > 0 Тогда
				Объект = Форма.ЭлементыФормы.СправочникСписок.ТекущаяСтрока.Ссылка.ПолучитьОбъект();				
			Иначе
				Объект = Форма.ЭлементыФормы.ДокументСписок.ТекущаяСтрока.Ссылка.ПолучитьОбъект();
			КонецЕсли;	
			
			//ДокументОбъект = ФормаСписка.ТекущаяСтрока.Ссылка.ПолучитьОбъект();
			СписокОтчетов = Объект.ПолучитьСписокОтчетов();
			УстановитьПодменюВыбораПечатнойФормы(ПанельКоманд.Кнопки.ПодменюОтчеты,
			СписокОтчетов,
			Новый Действие("ДействияФормыДействиеВыбратьОтчет"));
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры //СоздатьСписокОтчетов()

// Вызывает процедуру Печать() из модуля документа и передает в неё название макета.
//
// Параметры:
//  Форма - форма списка документов.
//  Кнопка - элемент формы.
//
Процедура ВыбратьОтчет(Форма, Кнопка, Список="ДокументСписок",ОбъектСсылка=Неопределено)  Экспорт
	
	Если ОбъектСсылка = Неопределено Тогда
		ТекДанные = Форма.ЭлементыФормы[Список].ТекущиеДанные;
		Если ТекДанные=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Объект = ТекДанные.Ссылка.ПолучитьОбъект();
	Иначе
		Объект = ОбъектСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	СписокОтчетов = Объект.ПолучитьСписокОтчетов();
	
	СтрокаОтчетаВСписке = СписокОтчетов.НайтиПоЗначению(Кнопка.Имя);
	Если СтрокаОтчетаВСписке <> Неопределено Тогда
		Объект.СформироватьОтчет(СтрокаОтчетаВСписке.Значение, Объект);
	КонецЕсли;		
	
КонецПроцедуры

///////////////////////////////////////////////////////
// ИЗ ХЭДА

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент           - ТабличныйДокумент, макет на печать,
//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок             - Заголовок окна табличного документа
//  ИмяПринтера           - имя принтера, на котором происходит печать.
//
Процедура НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", Автор = Неопределено, ИмяПринтера = Неопределено, ВыводитьКолонтитулы = Истина) Экспорт
	
	Если ПечДокумент = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	// Получить необходимое количество копий
	Если КоличествоЭкземпляров < 1 Тогда
		ПечДокумент.КоличествоЭкземпляров = 1;
	Иначе
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;
	
	Если ИмяПринтера <> Неопределено Тогда
		ПечДокумент.ИмяПринтера = ИмяПринтера;
	КонецЕсли;
	
	Если НЕ ПечДокумент.АвтоМасштаб
		И ЗначениеНеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
		ПечДокумент.АвтоМасштаб = Истина;
	КонецЕсли;
	
	Если ВыводитьКолонтитулы Тогда
		
		ПечДокумент.НижнийКолонтитул.Выводить     = Истина;
		ПечДокумент.НижнийКолонтитул.ТекстВЦентре = "[&НомерСтраницы]/[&СтраницВсего]";
		ПечДокумент.НижнийКолонтитул.Шрифт        = Новый Шрифт(ПечДокумент.НижнийКолонтитул.Шрифт,,6,,Истина);
		ПечДокумент.ВерхнийКолонтитул.Выводить    = Истина;
		ПечДокумент.ВерхнийКолонтитул.НачальнаяСтраница = 2;
		ПечДокумент.РазмерКолонтитулаСверху  = 5;
		ПечДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
		ПечДокумент.ВерхнийКолонтитул.ТекстВЦентре = Заголовок;
		ПечДокумент.ВерхнийКолонтитул.Шрифт = Новый Шрифт(ПечДокумент.НижнийКолонтитул.Шрифт,,6);
		
	КонецЕсли;
	
	Если НаПринтер Тогда
		
		ПечДокумент.Напечатать();
		
	Иначе
		
		// Отобразить печатный документ на экране
		ПечДокумент.ОтображатьЗаголовки           = Ложь;                                                            
		ПечДокумент.ОтображатьСетку               = Ложь;
		ПечДокумент.Защита                        = Истина;	//НЕ ПолучитьПравоПользователяПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ОтключитьЗащитуПечатныхФорм");
		ПечДокумент.ТолькоПросмотр                = Истина;                     		
		ПечДокумент.Показать(Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьДокумент()

// Функция спрашивает пользователя записать ли объект, или нет.
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия.
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция ЗаписатьОбъектВФорме(ФормаОбъекта) Экспорт
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
		ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
	Иначе // Справочник
		ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
	КонецЕсли; 
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	Иначе
		Попытка
			Возврат ФормаОбъекта.ЗаписатьВФорме();
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции // ЗаписатьОбъектВФорме()

///////////////////////////////////////////////////////
// Видеонаблюдение

// Открывает монитор соответствующго видеонаблюдения
//
Процедура ОткрытьМониторВидеонаблюдения() Экспорт
	
	ОткрытьМониторВидеонаблюденияСПараметрами();
	
КонецПроцедуры

// Открывает монитор соответствующго видеонаблюдения
//
Процедура ОткрытьМониторВидеонаблюденияСПараметрами(ТекущийМонитор = Неопределено, ТекущаяКамера = Неопределено, ДатаАрхива = Неопределено) Экспорт
	
	Если ТекущийМонитор = Неопределено Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТорговоеОборудование.Ссылка,
		|	ТорговоеОборудование.Наименование,
		|	ТорговоеОборудование.КодВида,
		|	ТорговоеОборудование.КодМодели
		|ИЗ
		|	Справочник.ТорговоеОборудование КАК ТорговоеОборудование
		|ГДЕ
		|	НЕ ТорговоеОборудование.ПометкаУдаления
		|	И НЕ ТорговоеОборудование.ЭтоГруппа
		|	И ТорговоеОборудование.ИнформационнаяБаза = &ИнформационнаяБаза
		|	И ТорговоеОборудование.КодВида = ""ВИДЕО""");
		
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ПараметрыСеанса.ТекущаяИБ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		КоличествоМониторов = Выборка.Количество();
		
		Если КоличествоМониторов=0 Тогда
			Предупреждение("Нет доступных мониторов видеонаблюдения!", 10, "Нет доступных мониторов");
			Возврат;
		КонецЕсли;
		
		Если КоличествоМониторов=1 Тогда
			Выборка.Следующий();
			ТекущийМонитор = Выборка.Ссылка;
		Иначе
			СписокМониторов = Новый СписокЗначений;
			Пока Выборка.Следующий() Цикл
				СписокМониторов.Добавить(Выборка.Ссылка, Выборка.Наименование);
			КонецЦикла;
			ТекущийМонитор = СписокМониторов.ВыбратьЭлемент("Монитор просмотра?");
			Если ТекущийМонитор = Неопределено Тогда
				Возврат;
			Иначе
				ТекущийМонитор	= ТекущийМонитор.Значение;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыМонитора = Новый Структура;
	ПараметрыМонитора.Вставить("Камера"		, ТекущаяКамера);
	ПараметрыМонитора.Вставить("ДатаАрхива"	, ДатаАрхива);	

	Парам=Новый Структура;
	Парам.Вставить("Событие"     ,ПараметрыМонитора);
	
	Результат = ТекущийМонитор.ПолучитьОбъект().ВыполнитьДействие("ПросмотрСобытий", Парам);
	
	Если Результат.Ошибка Тогда
		Предупреждение("Ошибка: "+Результат.Подробно, 15, Результат.Описание);
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли