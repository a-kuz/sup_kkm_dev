
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ДополнительныеДанныеЗаказа

// Функция возвращает структуру данных лояльности по заказу и заполняет их из Источника, если он указан
// Параметры:
//			-	ТипДанных - число с типом данных (1 - данные гостя, 2 - ЛУЧ, 3 - результат расчета CALC
//			-	Источник - структура с данными (ответ сервиса GUEST)
Функция СтруктураДанныхЛояльностиПоЗаказу(ТипДанных="INFO", Источник=Неопределено, Ошибка=Ложь, ТекстОшибки="") Экспорт
	
	Если ТипДанных = "INFO" Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу_INFO(Источник, Ошибка, ТекстОшибки);
	ИначеЕсли ТипДанных = "ACTIONS" Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу_ACTIONS(Источник, Ошибка, ТекстОшибки);
	ИначеЕсли ТипДанных = "CALC" Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу_CALC(Источник, Ошибка, ТекстОшибки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

// Данные Гостя
// 			-	Источник - ответ от сервиса GUEST, тип запроса INFO
Функция СтруктураДанныхЛояльностиПоЗаказу_INFO(Источник, Ошибка, ТекстОшибки)
	
	// Версия 3.0.1	
	Результат = Новый Структура;
	Результат.Вставить("Пустой"					,Истина);
	Результат.Вставить("Ошибка"					,Ошибка);
	Результат.Вставить("ТекстОшибки"			,ТекстОшибки);
	Результат.Вставить("РезультатПроверки"		,Ложь);
	Результат.Вставить("ТекстРезультатаПроверки","");
	Результат.Вставить("ИсходныйНомерКарты"		,"");
	Результат.Вставить("НомерКарты"				,"");
	Результат.Вставить("МастерКарта"			,"");
	Результат.Вставить("Баланс"					,0);
	Результат.Вставить("ФИО"					,"");
	Результат.Вставить("ДатаРождения"			,Дата(1,1,1));
	Результат.Вставить("НомерТелефона"			,"");
	Результат.Вставить("ЭлектроннаяПочта"		,"");
	
	// Если в процедуру передан Источник типа "Структура", то заполняем из него
	Если Источник=Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.РезультатПроверки = (Источник.err=0);
	Результат.ТекстРезультатаПроверки = Источник.err_msg;
	Результат.ИсходныйНомерКарты = Источник.guest.card_number_in;
	Результат.НомерКарты = Источник.guest.card_number;
	Результат.МастерКарта = Источник.guest.master_card;
	Результат.Баланс = Источник.guest.balance;
	Результат.ФИО = Источник.guest.fio;
	Результат.ДатаРождения = Источник.guest.birthday;
	Результат.НомерТелефона = Источник.guest.phone_number;
	Результат.ЭлектроннаяПочта = Источник.guest.email;
	Результат.Пустой = Ложь;
	
	Возврат Результат;
	
КонецФункции

// Данные по Акциям
// 			-	Источник - ответ от сервиса GUEST, тип запроса ACTIONS
Функция СтруктураДанныхЛояльностиПоЗаказу_ACTIONS(Источник, Ошибка, ТекстОшибки)
	
	// Версия 3.0.2	
	Результат = Новый Структура;
	Результат.Вставить("Пустой"			,Истина);
	Результат.Вставить("Ошибка"			,Ошибка);
	Результат.Вставить("ТекстОшибки"	,ТекстОшибки);
	Результат.Вставить("ЛУЧ"			,Новый Массив);
	Результат.Вставить("Купоны"			,Новый Массив);
	Результат.Вставить("КупоныВыданные"	,Новый Массив);
		
	// Если в процедуру передан Источник не типа "Структура", то возвращаем пустой результат
	Если ТипЗнч(Источник) <> Тип("Структура") Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Данные о ЛУЧе гостя
	Для каждого ТекущаяСтрока Из Источник.guest.luch Цикл
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("КодТовара", ТекущаяСтрока.product_code);
		НоваяСтрока.Вставить("МестоРеализации", ТекущаяСтрока.sale_place);
		НоваяСтрока.Вставить("Коэффициент", ТекущаяСтрока.k);
		
		Результат.ЛУЧ.Добавить(НоваяСтрока);		
	КонецЦикла;
	
	// Данные о купонах, которые гость может получить
	Для каждого ТекущаяСтрока Из Источник.guest.coupons_in Цикл
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("Ошибка", ТекущаяСтрока.err);
		НоваяСтрока.Вставить("ТекстОшибки", ТекущаяСтрока.err_msg);
		НоваяСтрока.Вставить("Тип", ТекущаяСтрока.type);
		НоваяСтрока.Вставить("Наименование", ТекущаяСтрока.name);
		НоваяСтрока.Вставить("Код", ТекущаяСтрока.code);
		НоваяСтрока.Вставить("Автодобавление", ТекущаяСтрока.auto_insert);
		НоваяСтрока.Вставить("Статус", ТекущаяСтрока.status);
		НоваяСтрока.Вставить("МестоРеализации", ТекущаяСтрока.sale_place);
		НоваяСтрока.Вставить("ИнфоГостя", ЛояльностьКлиентСервер.МассивВСтроку(ТекущаяСтрока.guest_info, Символы.ПС));
		НоваяСтрока.Вставить("ИнфоСтанции", ЛояльностьКлиентСервер.МассивВСтроку(ТекущаяСтрока.station_info, Символы.ПС));
				
		Результат.КупоныВыданные.Добавить(НоваяСтрока);		
	КонецЦикла;	
	
	// Данные о купонах, которые гость может применить
	//Для каждого ТекущаяСтрока Из Источник.guest.coupons_out Цикл
	//	НоваяСтрока = Новый Структура;
	//	НоваяСтрока.Вставить("Тип", ТекущаяСтрока.type);
	//	НоваяСтрока.Вставить("МестоРеализации", ТекущаяСтрока.sale_place);
	//	НоваяСтрока.Вставить("ИнфоГостя", Новый Массив);
	//	НоваяСтрока.Вставить("ИнфоСтанции", Новый Массив);
	//	
	//	Для каждого ТекущаяСтрокаИнфо Из ТекущаяСтрока.guest_info Цикл
	//		НоваяСтрока.ИнфоГостя.Добавить(ТекущаяСтрокаИнфо);
	//	КонецЦикла;
	//	
	//	Для каждого ТекущаяСтрокаИнфо Из ТекущаяСтрока.station_info Цикл
	//		НоваяСтрока.ИнфоСтанции.Добавить(ТекущаяСтрокаИнфо);
	//	КонецЦикла;
	//	
	//	Результат.Купоны.Добавить(НоваяСтрока);		
	//КонецЦикла;
	
	Результат.Пустой = Ложь;
	Результат.Ошибка = (Источник.err<>0);
	Результат.ТекстОшибки = Источник.err_msg;	
	
	Возврат Результат;
	
КонецФункции

// Данные по результатам расчета SALE
// 			-	Источник - ответ от сервиса CHECK, тип запроса PRESALE
Функция СтруктураДанныхЛояльностиПоЗаказу_SALE(Источник, ТипЛояльности, Ошибка, ТекстОшибки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Пустой"			,Истина);
	Результат.Вставить("Ошибка"			,Ошибка);
	Результат.Вставить("ТекстОшибки"	,ТекстОшибки);
	Результат.Вставить("КГЛНачислено"	,0);
	Результат.Вставить("КГЛСписано"		,0);
	Результат.Вставить("СоставЗаказа"	,Новый Массив);
			
	Если ТипЛояльности = 2 Тогда
		КГЛБИнфо = Источник.s_kgl_info;
		ТаблицаТовары = Источник.order_str_s;
	Иначе
		КГЛБИнфо = Источник.n_kgl_info;
		ТаблицаТовары = Источник.order_str_n;
	КонецЕсли;
	
	// Данные о результатах расчета
	Для каждого ТекущаяСтрока Из ТаблицаТовары Цикл
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("ИДСтроки"				, ТекущаяСтрока.str_no);
		НоваяСтрока.Вставить("Специфика"			, ?(ТекущаяСтрока.str_type="S",1,0));
		НоваяСтрока.Вставить("ИДСтрокиТовара"		, ?(ТекущаяСтрока.str_type="S",ТекущаяСтрока.str_t_no,""));
		НоваяСтрока.Вставить("СтатусЛояльности"		, ТекущаяСтрока.loyality_status);
		НоваяСтрока.Вставить("СтатусАкции"			, ТекущаяСтрока.action_status);
		НоваяСтрока.Вставить("ДопСтатусАкции"		, ТекущаяСтрока.action_status_d);
		НоваяСтрока.Вставить("ГруппаАкции"			, ТекущаяСтрока.action_group);
		НоваяСтрока.Вставить("КГЛНачислено"			, ТекущаяСтрока.kgl_add);
		НоваяСтрока.Вставить("КГЛСписано"			, ?(ТипЛояльности=2,ТекущаяСтрока.kgl_rem,0));
		НоваяСтрока.Вставить("Проект"				, ТекущаяСтрока.sale_place_prj);
						
		Результат.СоставЗаказа.Добавить(НоваяСтрока);		
	КонецЦикла;
	
	ИтогиМ = Новый Структура("КГЛНачислено, КГЛСписано, КГЛЗаТовар, КГЛЗаСумму, КГЛЗаСерт", 0, 0, 0, 0, 0);
	ИтогиО = Новый Структура("КГЛНачислено, КГЛСписано, КГЛЗаТовар, КГЛЗаСумму, КГЛЗаСерт", 0, 0, 0, 0, 0);
	ИтогиКП = Новый Структура("КГЛНачислено, КГЛСписано, КГЛЗаТовар, КГЛЗаСумму, КГЛЗаСерт", 0, 0, 0, 0, 0);
	Результат.Вставить("ИтогиМ", ИтогиМ);
	Результат.Вставить("ИтогиО", ИтогиО);
	Результат.Вставить("ИтогиКП", ИтогиКП);
	
	// Данные по строчкам товаров
	Для каждого ТекущаяСтрока Из КГЛБИнфо.kgl_str Цикл
		Если ТекущаяСтрока.sale_place_prj = 1 Тогда
			//ИтогиО.КГЛСписано = ИтогиО.КГЛСписано + ТекущаяСтрока.kgl_rem;
			ИтогиО.КГЛНачислено = ИтогиО.КГЛНачислено + ТекущаяСтрока.kgl_add;
			Если ТекущаяСтрока.action_status < 9 Тогда
				ИтогиО.КГЛЗаТовар = ИтогиО.КГЛЗаТовар + ТекущаяСтрока.kgl_add;
			Иначе
				ИтогиО.КГЛЗаСерт = ИтогиО.КГЛЗаСерт + ТекущаяСтрока.kgl_add;
			КонецЕсли;
		ИначеЕсли ТекущаяСтрока.sale_place_prj = 2 Тогда
			//ИтогиМ.КГЛСписано = ИтогиО.КГЛСписано + ТекущаяСтрока.kgl_rem;
			ИтогиМ.КГЛНачислено = ИтогиМ.КГЛНачислено + ТекущаяСтрока.kgl_add;
			Если ТекущаяСтрока.action_status < 9 Тогда
				ИтогиМ.КГЛЗаТовар = ИтогиМ.КГЛЗаТовар + ТекущаяСтрока.kgl_add;
			Иначе
				ИтогиМ.КГЛЗаСерт = ИтогиМ.КГЛЗаСерт + ТекущаяСтрока.kgl_add;
			КонецЕсли;
		ИначеЕсли ТекущаяСтрока.sale_place_prj = 3 Тогда
			//ИтогиКП.КГЛСписано = ИтогиО.КГЛСписано + ТекущаяСтрока.kgl_rem;
			ИтогиКП.КГЛНачислено = ИтогиКП.КГЛНачислено + ТекущаяСтрока.kgl_add;
			Если ТекущаяСтрока.action_status < 9 Тогда
				ИтогиКП.КГЛЗаТовар = ИтогиКП.КГЛЗаТовар + ТекущаяСтрока.kgl_add;
			Иначе
				ИтогиКП.КГЛЗаСерт = ИтогиКП.КГЛЗаСерт + ТекущаяСтрока.kgl_add;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// Данные по суммам акций
	Для каждого ТекущаяСтрока Из КГЛБИнфо.kgl_total Цикл
		Если ТекущаяСтрока.sale_place_prj = 1 Тогда
			ИтогиО.КГЛНачислено = ИтогиО.КГЛНачислено + ТекущаяСтрока.kgl_add;
			ИтогиО.КГЛЗаСумму = ИтогиО.КГЛЗаСумму + ТекущаяСтрока.kgl_add;
		ИначеЕсли ТекущаяСтрока.sale_place_prj = 2 Тогда
			ИтогиМ.КГЛНачислено = ИтогиМ.КГЛНачислено + ТекущаяСтрока.kgl_add;
			ИтогиМ.КГЛЗаСумму = ИтогиМ.КГЛЗаСумму + ТекущаяСтрока.kgl_add;
		ИначеЕсли ТекущаяСтрока.sale_place_prj = 3 Тогда
			ИтогиКП.КГЛНачислено = ИтогиКП.КГЛНачислено + ТекущаяСтрока.kgl_add;
			ИтогиКП.КГЛЗаСумму = ИтогиКП.КГЛЗаСумму + ТекущаяСтрока.kgl_add;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	//КГЛНачислено = 0;
	//КГЛСписано = 0;
	//Для каждого ТекущаяСтрока Из КГЛБИнфо.kgl_str Цикл
	//	НоваяСтрока = Новый Структура;
	//	НоваяСтрока.Вставить("ГруппаАкции"	, ТекущаяСтрока.action_status);//action_group);
	//	НоваяСтрока.Вставить("КГЛНачислено"	, ТекущаяСтрока.kgl_add);
	//	НоваяСтрока.Вставить("КГЛСписано"	, ?(ТипЛояльности=2,ТекущаяСтрока.kgl_rem,0));
	//	Результат.СоставЗаказа.Добавить(НоваяСтрока);
	//	
	//	КГЛНачислено = КГЛНачислено + ТекущаяСтрока.kgl_add;
	//	КГЛСписано = КГЛСписано + ?(ТипЛояльности=2,ТекущаяСтрока.kgl_rem,0);
	//КонецЦикла;
	
	Результат.Пустой = Ложь;
		
	Возврат Результат;
	
КонецФункции

// Данные Предварительного расчета заказа
// 			-	Источник - ответ от сервиса GUEST, тип запроса ACTIONS
Функция СтруктураДанныхЛояльностиПоЗаказу_CALC(Источник, Ошибка, ТекстОшибки)
	
	Результат = Новый Структура;
	Результат.Вставить("Пустой"			,Истина);
	Результат.Вставить("Ошибка"			,Ошибка);
	Результат.Вставить("ТекстОшибки"	,ТекстОшибки);
	Результат.Вставить("КГЛНачислено"	,0);
	Результат.Вставить("КГЛСписано"		,0);
	ИтогиМ = Новый Структура("КГЛНачислено, КГЛСписано, КГЛЗаТовар, КГЛЗаСумму, КГЛЗаСерт", 0, 0, 0, 0, 0);
	ИтогиО = Новый Структура("КГЛНачислено, КГЛСписано, КГЛЗаТовар, КГЛЗаСумму, КГЛЗаСерт", 0, 0, 0, 0, 0);
	ИтогиКП = Новый Структура("КГЛНачислено, КГЛСписано, КГЛЗаТовар, КГЛЗаСумму, КГЛЗаСерт", 0, 0, 0, 0, 0);
	Результат.Вставить("ИтогиМ"			,ИтогиМ);
	Результат.Вставить("ИтогиО"			,ИтогиО);
	Результат.Вставить("ИтогиКП"		,ИтогиКП);
	Результат.Вставить("СоставЗаказа"	,Новый Массив);
	Результат.Вставить("Купоны"	,Новый Массив);
				
	// Если в процедуру передан Источник не типа "Структура", то возвращаем пустой результат
	Если Источник = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.КГЛНачислено = Источник.order.n_kgl_add;
	
	// Данные о результатах расчета
	Для каждого ТекущаяСтрока Из Источник.order.order_str Цикл
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("ИДСтроки"				, ТекущаяСтрока.str_no);
		НоваяСтрока.Вставить("Специфика"			, ?(ТекущаяСтрока.str_type="S",1,0));
		НоваяСтрока.Вставить("ИДСтрокиТовара"		, ?(ТекущаяСтрока.str_type="S",ТекущаяСтрока.str_t_no,""));
		НоваяСтрока.Вставить("СтатусЛояльности"		, ТекущаяСтрока.loyality_status);
		НоваяСтрока.Вставить("СтатусАкции"			, ТекущаяСтрока.action_status);
		НоваяСтрока.Вставить("ДопСтатусАкции"		, ТекущаяСтрока.action_status_d);
		НоваяСтрока.Вставить("ГруппаАкции"			, ТекущаяСтрока.action_group);
		НоваяСтрока.Вставить("ЦенаФакт"				, ТекущаяСтрока.price_fact);
		НоваяСтрока.Вставить("СуммаФакт"			, ТекущаяСтрока.strsum_fact);
		НоваяСтрока.Вставить("КГЛНачислено"			, ТекущаяСтрока.kgl_add);
		НоваяСтрока.Вставить("КГЛСписано"			, 0); // CALC не считает списание
		НоваяСтрока.Вставить("Проект"				, ТекущаяСтрока.sale_place_prj);
						
		Результат.СоставЗаказа.Добавить(НоваяСтрока);		
	КонецЦикла;
	
	КГЛБИнфо = Источник.order.n_kgl_info;
	
	// Данные по строчкам товаров
	Для каждого ТекущаяСтрока Из КГЛБИнфо.kgl_str Цикл
		Если ТекущаяСтрока.sale_place_prj = 1 Тогда
			ИтогиО.КГЛНачислено = ИтогиО.КГЛНачислено + ТекущаяСтрока.kgl_add;
			Если ТекущаяСтрока.action_status < 9 Тогда
				ИтогиО.КГЛЗаТовар = ИтогиО.КГЛЗаТовар + ТекущаяСтрока.kgl_add;
			Иначе
				ИтогиО.КГЛЗаСерт = ИтогиО.КГЛЗаСерт + ТекущаяСтрока.kgl_add;
			КонецЕсли;
		ИначеЕсли ТекущаяСтрока.sale_place_prj = 2 Тогда
			ИтогиМ.КГЛНачислено = ИтогиМ.КГЛНачислено + ТекущаяСтрока.kgl_add;
			Если ТекущаяСтрока.action_status < 9 Тогда
				ИтогиМ.КГЛЗаТовар = ИтогиМ.КГЛЗаТовар + ТекущаяСтрока.kgl_add;
			Иначе
				ИтогиМ.КГЛЗаСерт = ИтогиМ.КГЛЗаСерт + ТекущаяСтрока.kgl_add;
			КонецЕсли;
		ИначеЕсли ТекущаяСтрока.sale_place_prj = 3 Тогда
			ИтогиКП.КГЛНачислено = ИтогиКП.КГЛНачислено + ТекущаяСтрока.kgl_add;
			Если ТекущаяСтрока.action_status < 9 Тогда
				ИтогиКП.КГЛЗаТовар = ИтогиКП.КГЛЗаТовар + ТекущаяСтрока.kgl_add;
			Иначе
				ИтогиКП.КГЛЗаСерт = ИтогиКП.КГЛЗаСерт + ТекущаяСтрока.kgl_add;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	// Данные по суммам акций
	Для каждого ТекущаяСтрока Из КГЛБИнфо.kgl_total Цикл
		Если ТекущаяСтрока.sale_place_prj = 1 Тогда
			ИтогиО.КГЛНачислено = ИтогиО.КГЛНачислено + ТекущаяСтрока.kgl_add;
			ИтогиО.КГЛЗаСумму = ИтогиО.КГЛЗаСумму + ТекущаяСтрока.kgl_add;
		ИначеЕсли ТекущаяСтрока.sale_place_prj = 2 Тогда
			ИтогиМ.КГЛНачислено = ИтогиМ.КГЛНачислено + ТекущаяСтрока.kgl_add;
			ИтогиМ.КГЛЗаСумму = ИтогиМ.КГЛЗаСумму + ТекущаяСтрока.kgl_add;
		ИначеЕсли ТекущаяСтрока.sale_place_prj = 3 Тогда
			ИтогиКП.КГЛНачислено = ИтогиКП.КГЛНачислено + ТекущаяСтрока.kgl_add;
			ИтогиКП.КГЛЗаСумму = ИтогиКП.КГЛЗаСумму + ТекущаяСтрока.kgl_add;
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекущаяСтрока Из Источник.coupon_in Цикл
		НоваяСтрока = Новый Структура("Код, ИнфоГостя, ИнфоСтанции, Статус");
		НоваяСтрока.Код = ТекущаяСтрока.code;
		НоваяСтрока.Статус = ?(ТекущаяСтрока.status=0,1,ТекущаяСтрока.status); // Статус у купона, добавленного в заказ не может быть 0
		НоваяСтрока.ИнфоГостя = СтрЗаменить(ТекущаяСтрока.guest_info,"\n", Символы.ПС);
		НоваяСтрока.ИнфоСтанции = СтрЗаменить(ТекущаяСтрока.station_info,"\n", Символы.ПС);
		Результат.Купоны.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Результат.Пустой = Ложь;
	Результат.Ошибка = (Источник.err<>0);
	Результат.ТекстОшибки = Источник.err_msg;
	
	Возврат Результат;
	
КонецФункции

// Функция отправляет запрос сервису Лояльности для проверки карты и получения данных Гостя
//
// Параметры:
// 	НомерКарты  - Строка - проверяемый номер
//
// Возвращаемое значение:
//  Структура	
//		- НомерКарты	- Строка - преобразованный номер карты. Пустая строка, если ошибка
//	 	- Ошибка		- Булево
//		- ТекстОшибки	- Строка - описание ошибки
Функция ПолучитьДанныеГостя(НомерКарты, Тест=Ложь) Экспорт
	
	Если ПустаяСтрока(НомерКарты) Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("INFO");
	КонецЕсли;
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("request", "INFO");
	ДанныеЗапроса.Вставить("protocol_version", 3);
	ДанныеЗапроса.Вставить("region", ПолучитьТекущийРегионСтрокой());
	ДанныеЗапроса.Вставить("tt", 1); //!!! Неплохо бы брать из настроек базы через повт. исп.
	ДанныеЗапроса.Вставить("station_type", 0);
	ДанныеЗапроса.Вставить("debug", 0);
	ДанныеЗапроса.Вставить("password", ПарольСервиса_Чеки());
	ДанныеЗапроса.Вставить("guest", Новый Структура);
	ДанныеЗапроса.guest.Вставить("card_number", НомерКарты);
	
	ЗапросJSON = СформироватьJSON_Новый(ДанныеЗапроса);
	
	ОтветJSON = ОтправитьЗапросСервисуОбработкиКартыГостя(ЗапросJSON, "GET", Тест);
	Если ОтветJSON.Ошибка Тогда
		// При ошибке сервиса возвращаем пустую структуру, в регистр не пишем
		Возврат СтруктураДанныхЛояльностиПоЗаказу("INFO",, Истина, ОтветJSON.Ответ);
	КонецЕсли;
	ДанныеОтвета = РазборJSON(ОтветJSON.Ответ);
	Если ДанныеОтвета=Неопределено Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("INFO",, Истина, ОтветJSON.Ответ);
	КонецЕсли;
	Если ДанныеОтвета.err<0 Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("INFO",, Истина, ДанныеОтвета.err_msg);
	КонецЕсли;
		
	Возврат СтруктураДанныхЛояльностиПоЗаказу("INFO", ДанныеОтвета);
	
КонецФункции

// Функция отправляет запрос сервису Лояльности для получения акций Гостя (ЛУЧ, купоны)
//
// Параметры:
// 	НомерКарты  - Строка - проверяемый номер
//
// Возвращаемое значение:
//  Структура	
//		- НомерКарты	- Строка - преобразованный номер карты. Пустая строка, если ошибка
//	 	- Ошибка		- Булево
//		- ТекстОшибки	- Строка - описание ошибки
Функция ПолучитьАкцииГостя(НомерКарты, Тест=Ложь) Экспорт
	
	Если Не ПроверитьКорректностьНомераКарты(НомерКарты) Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS",,Истина, "Некорректный номер карты");
	КонецЕсли;
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("request", "ACTIONS");
	ДанныеЗапроса.Вставить("protocol_version", 3);
	ДанныеЗапроса.Вставить("region", ПолучитьТекущийРегионСтрокой());
	ДанныеЗапроса.Вставить("tt", 1);
	ДанныеЗапроса.Вставить("station_type", 0);
	ДанныеЗапроса.Вставить("debug", 0);
	ДанныеЗапроса.Вставить("password", ПарольСервиса_Чеки());
	ДанныеЗапроса.Вставить("guest", Новый Структура);
	ДанныеЗапроса.guest.Вставить("card_number", НомерКарты);
	
	ЗапросJSON = СформироватьJSON_Новый(ДанныеЗапроса);
	
	ОтветJSON = ОтправитьЗапросСервисуОбработкиКартыГостя(ЗапросJSON, "GET", Тест);
	Если ОтветJSON.Ошибка Тогда
		ЗаписьЖурналаРегистрации("Лояльность.Сервисы", УровеньЖурналаРегистрации.Ошибка,,,"ACTIONS: "+ОтветJSON.Ответ);
		// При ошибке сервиса возвращаем пустую структуру, в регистр не пишем
		Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS",, Истина, ОтветJSON.Ответ);
	КонецЕсли;
	ДанныеОтвета = РазборJSON(ОтветJSON.Ответ);
	Если ДанныеОтвета=Неопределено Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS",, Истина, ОтветJSON.Ответ);
	КонецЕсли;
	Если ДанныеОтвета.err<>0 Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS",, Истина, ДанныеОтвета.err_msg);
	КонецЕсли;
	
	Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS", ДанныеОтвета);
	
КонецФункции

// Функция отправляет запрос сервису Лояльности для получения акций Гостя (ЛУЧ, купоны)
//
// Параметры:
// 	НомерКарты  - Строка - проверяемый номер
//
// Возвращаемое значение:
//  Структура	
//		- НомерКарты	- Строка - преобразованный номер карты. Пустая строка, если ошибка
//	 	- Ошибка		- Булево
//		- ТекстОшибки	- Строка - описание ошибки
Функция ПолучитьАкцииГостяПоЗаказу(ЗаказОбъект, Тест=Ложь) Экспорт
	
	Если ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS");
	КонецЕсли;
	
	Если Не ПроверитьКорректностьНомераКарты(ЗаказОбъект.НомерКартыЛояльности) Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS",, Истина, "Некорректный номер карты");
	КонецЕсли;
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("request", "ACTIONS");
	ДанныеЗапроса.Вставить("protocol_version", 3);
	ДанныеЗапроса.Вставить("region", ПолучитьТекущийРегионСтрокой());
	ДанныеЗапроса.Вставить("tt", 1);
	ДанныеЗапроса.Вставить("station_type", 0);
	ДанныеЗапроса.Вставить("debug", 0);
	ДанныеЗапроса.Вставить("password", ПарольСервиса_Чеки());
	ДанныеЗапроса.Вставить("guest", Новый Структура);
	ДанныеЗапроса.guest.Вставить("card_number", ЗаказОбъект.НомерКартыЛояльности);
	ДанныеЗапроса.guest.Вставить("coupon_in", Новый Массив);
	Для каждого ТекущийКупон Из ЗаказОбъект.Купоны Цикл
		НовыйКупон = Новый Структура;
		НовыйКупон.Вставить("type", ТекущийКупон.ТипКупона);
		НовыйКупон.Вставить("code", ТекущийКупон.Купон);
		НовыйКупон.Вставить("name", ТекущийКупон.Наименование);
		НовыйКупон.Вставить("status", ТекущийКупон.СтатусКупона);
		ДанныеЗапроса.guest.coupon_in.Добавить(НовыйКупон);
	КонецЦикла;	
	
	ЗапросJSON = СформироватьJSON_Новый(ДанныеЗапроса);
	
	ОтветJSON = ОтправитьЗапросСервисуОбработкиКартыГостя(ЗапросJSON, "GET", Тест);
	Если ОтветJSON.Ошибка Тогда
		// При ошибке сервиса возвращаем пустую структуру, в регистр не пишем
		Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS",, Истина);
	КонецЕсли;
	ДанныеОтвета = РазборJSON(ОтветJSON.Ответ);
	Если ДанныеОтвета=Неопределено Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS",, Истина);
	КонецЕсли;
	Если ДанныеОтвета.err<>0 Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS",, Истина, ДанныеОтвета.err_msg);
	КонецЕсли;
	
	Возврат СтруктураДанныхЛояльностиПоЗаказу("ACTIONS", ДанныеОтвета);
	
КонецФункции

// Функция отправляет запрос сервису Лояльности для получения предварительного расчета заказа
//
// Параметры:
// 	НомерКарты  - Строка - проверяемый номер
//
// Возвращаемое значение:
//  Структура	
//		- НомерКарты	- Строка - преобразованный номер карты. Пустая строка, если ошибка
//	 	- Ошибка		- Булево
//		- ТекстОшибки	- Строка - описание ошибки
Функция ПредварительныйРасчетЗаказа(ЗаказОбъект, Тест = Ложь) Экспорт
	
 	ДанныеЗапроса = СформироватьJSONДляПредварительногоРасчетаЗаказа_Протокол4(ЗаказОбъект);
	
	Если ДанныеЗапроса.Ошибка Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("CALC",, Истина);
	КонецЕсли;
	
	ОтветJSON = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков(ДанныеЗапроса.ТекстЗапроса, "ORDER", Тест);
	Если ОтветJSON.Ошибка Тогда
		// При ошибке сервиса возвращаем пустую структуру, в регистр не пишем
		Возврат СтруктураДанныхЛояльностиПоЗаказу("CALC",, Истина);
	КонецЕсли;
	ДанныеОтвета = РазборJSON(ОтветJSON.Ответ);
	Если ДанныеОтвета=Неопределено Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("CALC",, Истина);
	КонецЕсли;
	Если ДанныеОтвета.err<>0 Тогда
		Возврат СтруктураДанныхЛояльностиПоЗаказу("CALC",, Истина, ДанныеОтвета.err_msg);
	КонецЕсли;
	
	Возврат СтруктураДанныхЛояльностиПоЗаказу("CALC", ДанныеОтвета);
	
КонецФункции

Процедура ЗаполнитьЗаказПоДаннымАкцийГостя(ЗаказОбъект, ДанныеАкций) Экспорт
	
 	Если ДанныеАкций.Пустой Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущийКупон Из ДанныеАкций.КупоныВыданные Цикл
		Если ТекущийКупон.Автодобавление <> 1 Тогда
			Продолжить;
		КонецЕсли;
		Если ЗаказОбъект.Купоны.Найти(ТекущийКупон.Код, "Купон") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовыйКупон = ЗаказОбъект.Купоны.Добавить();
		НовыйКупон.Купон = ТекущийКупон.Код;
		НовыйКупон.Наименование = ТекущийКупон.Наименование;
		НовыйКупон.ТипКупона = ТекущийКупон.Тип;
		НовыйКупон.СтатусКупона= ТекущийКупон.Статус;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбщегоНазначения

Функция ОтладкаВключена() Экспорт
	Возврат ЛояльностьКлиентСерверПовтИсп.ОтладкаВключена();
КонецФункции

Функция ТекущаяВерсияЛояльности() Экспорт
	
	//Возврат "3.0.1";
	Возврат "2.0.1";
	
КонецФункции

Функция ТекущаяВерсияЛояльностиЧислом() Экспорт
	
	//Возврат 301;
	Возврат 201;
	
КонецФункции

Функция ТекущаяВерсияПротокола() Экспорт
	
	//Возврат 3;
	Возврат 2;
	
КонецФункции

Функция ВерсияПротоколаИзВерсииЛояльности(Знач Версия="") Экспорт
	Если Не ЗначениеЗаполнено(Версия) Тогда
		Возврат 3;
	КонецЕсли;
	
	Если ТипЗнч(Версия) = Тип("Строка") Тогда
		Поиск = СтрНайти(Версия, ".");
		Если Поиск>0 Тогда
			Версия = Лев(Версия, Поиск-1);
		КонецЕсли;
		
		Попытка
			ВерсияПротокола = Число(Версия);
		Исключение
			ВерсияПротокола = ТекущаяВерсияПротокола();
		КонецПопытки;
	ИначеЕсли ТипЗнч(Версия) = Тип("Число") Тогда
		Если Версия<1000 Тогда
			ВерсияПротокола = Цел(Версия/100);
		Иначе
			ВерсияПротокола = Цел(Версия/1000);
		КонецЕсли;
		Если ВерсияПротокола = 0 Тогда
			ВерсияПротокола = ТекущаяВерсияПротокола();
		КонецЕсли;
	Иначе
		ВерсияПротокола = ТекущаяВерсияПротокола();
	КонецЕсли;
	
	Возврат ВерсияПротокола;
КонецФункции

Функция ВерсияЛояльности(Тест=Ложь) Экспорт
	
	Возврат ЛояльностьКлиентСерверПовтИсп.ВерсияЛояльности(Тест);
	
КонецФункции

Функция ПолучитьТекущийРегион() Экспорт
	Возврат ЛояльностьКлиентСерверПовтИсп.ПолучитьТекущийРегион();
КонецФункции

Функция ПолучитьТекущийРегионСтрокой() Экспорт
	Возврат Строка(ЛояльностьКлиентСерверПовтИсп.ПолучитьТекущийРегион());
КонецФункции

Функция ТестовыйРежим(РабочееМесто=Неопределено) Экспорт
	Возврат ЛояльностьКлиентСерверПовтИсп.ТестовыйРежим(РабочееМесто);
КонецФункции

Функция ОпределитьРегионПоНомеруКарты(НомерКарты) Экспорт
	Если Лев(НомерКарты, 2) = "52" Тогда
		Возврат "52";
	ИначеЕсли Лев(НомерКарты, 2) = "77" ИЛИ Лев(НомерКарты, 2) = "99" ИЛИ Лев(НомерКарты, 2) = "90" ИЛИ Лев(НомерКарты, 2) = "97" Тогда
		Возврат "77";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Функция проверяет корректность номера карты КеГеЛьБУМ на соответствие шаблонам
Функция ПроверитьКорректностьНомераКарты(Знач НомерКарты) Экспорт
	Если ПустаяСтрока(НомерКарты) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НомерКарты = ОставитьТолькоЦифры(НомерКарты);
	
	НужнаПроверкаСоответствияРегиону = Ложь;
	Если Лев(НомерКарты, 2) = "26" Тогда // Это карта из мобильного приложения
		// Проверка карты из мобильного приложения
		Если СтрДлина(НомерКарты) <> 18 Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли Лев(НомерКарты, 2) = "89" Тогда // Это карта по мобильному телефону
		// Проверка карты по мобильному телефону
		Если СтрДлина(НомерКарты) <> 11 Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли Лев(НомерКарты, 2) = "27" Тогда // Это защищенная карта с токеном
		Если СтрДлина(НомерКарты) <> 22 Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли Лев(НомерКарты, 2) = "25" Тогда // Это QR новой пластиковой карты
		Если СтрДлина(НомерКарты) <> 12 Тогда
			Возврат Ложь;
		КонецЕсли;
		НомерКарты = Сред(НомерКарты,3);
		НужнаПроверкаСоответствияРегиону = Истина;
	Иначе // Обычная пластиковая карта
		Если СтрДлина(НомерКарты) <> 10 Тогда
			Возврат Ложь;
		КонецЕсли;
		НужнаПроверкаСоответствияРегиону = Истина;
	КонецЕсли;
	
	// Проверка соответствия карты и региона
	Если НужнаПроверкаСоответствияРегиону Тогда
		Если ОпределитьРегионПоНомеруКарты(НомерКарты) <> ПолучитьТекущийРегионСтрокой() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;	
КонецФункции

Процедура Логирование(Уровень, Место, Текст) Экспорт
	УровеньЛогирования = 0;
	
	ПутьДляЛогирования = "";
	ИмяФайла = "";
	Попытка
		Если УровеньЛогирования <= Уровень Тогда
			
			ПутьДляЛогирования = РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ПараметрыСеанса.ТекущаяИБ, "ПутьДляЛогирования");//Константы.ПутьДляЛогирования.Получить();
			Если ПутьДляЛогирования = Неопределено Тогда
				ПутьДляЛогирования = ОбщегоНазначенияПовтИсп.ПолучитьПутьДляЛогирования();
			КонецЕсли;
			
#Если Сервер Тогда 
			ПутьДляЛогирования = "c:\log\";
#КонецЕсли
			
			// создадим каталог, если он не существует
			Файл = Новый Файл(ПутьДляЛогирования);
		    Если  Файл.Существует() Тогда
			    СоздатьКаталог(ПутьДляЛогирования);   
		    КонецЕсли;
			
			Если ТипЗнч(Текст) <> Тип("Строка") Тогда
				Текст = ПреобразоватьВJSON(Текст);
			КонецЕсли;
			
			// создадим каталог, если он не существует
			Каталог = Формат(ТекущаяДата(),"ДФ=yyyyMMdd");
			ПутьДляЛогирования = ПутьДляЛогирования + "\" + Каталог;
			Файл = Новый Файл(ПутьДляЛогирования);
			Если не Файл.Существует() Тогда
				СоздатьКаталог(ПутьДляЛогирования);
			КонецЕсли;
			
			ИмяФайла = ПутьДляЛогирования + "\lol" + Каталог + ".log";
			
			ЗаписьТекста = Новый ЗаписьТекста(ИмяФайла,,,Истина);
			ЗаписьТекста.ЗаписатьСтроку("" + ТекущаяДата() + ";" + Место + ";" + Текст);
			ЗаписьТекста.Закрыть();
			
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка записи лога Лояльности", УровеньЖурналаРегистрации.Предупреждение,,,"ПутьДляЛогирования="+ПутьДляЛогирования+", ИмяФайла="+ИмяФайла+", ОписаниеОшибки="+ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьХеш(ИсходнаяСтрока) Экспорт
	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);
	Хеш.Добавить(ИсходнаяСтрока);
	Возврат Нрег(СтрЗаменить(Строка(Хеш.ХешСумма)," ", ""));
КонецФункции

&НаКлиенте
Процедура ПочиститьЛОГи(ГлубинаХранения = 30) Экспорт

	ПутьДляЛогирования = ОбщегоНазначенияПовтИсп.ПолучитьПутьДляЛогирования();
	
	ФайлыЛогов = НайтиФайлы(ПутьДляЛогирования, "lol*.log", Истина);
	Для Каждого Файл ИЗ ФайлыЛогов Цикл
		Файл.НачатьПолучениеВремениИзменения(Новый ОписаниеОповещения("УдалениеФайлаЛогов", ЛояльностьКлиентСервер, Новый Структура("ПолноеИмяФайла, ГлубинаХранения",Файл.ПолноеИмя,ГлубинаХранения)));
		
		//ВремяИзменения = Файл.ПолучитьВремяИзменения();
		//Если (ТекущаяДата()-ВремяИзменения)/24/60/60 > Дней Тогда
		//	Попытка
		//		УдалитьФайлы(Файл.ПолноеИмя);
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
// дополнительные параметры:
//	ПолноеИмяФайла
//	ГлубинаХранения - в днях
Процедура УдалениеФайлаЛогов(ВремяИзменения, ДополнительныеПараметры) Экспорт
	ПолноеИмяФайла = "";
	ГлубинаХранения = 30;
	ДополнительныеПараметры.Свойство("ГлубинаХранения"	, ГлубинаХранения);
	ДополнительныеПараметры.Свойство("ПолноеИмяФайла"	, ПолноеИмяФайла);
	
	Если НЕ ПустаяСтрока(ПолноеИмяФайла) Тогда
		Если (ТекущаяДата()-ВремяИзменения)/24/60/60 > ГлубинаХранения Тогда
			Попытка
				УдалитьФайлы(ПолноеИмяФайла);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область РаботаСТипамиДанных

Функция МассивВСтроку(ИсходныйМассив, РазделительСтрок=Неопределено) Экспорт
	Если РазделительСтрок=Неопределено Тогда
		РазделительСтрок = Символы.ПС;
	КонецЕсли;
	Результат = "";
	Для каждого ТекущаяСтрока Из ИсходныйМассив Цикл
		Результат = Результат + ?(ПустаяСтрока(Результат),"",Символы.ПС);
		Результат = Результат + ТекущаяСтрока;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Функция делает полную копию переданной структуры
Функция КопияСтруктуры(Структура, ФильтрКлючей = "") Экспорт
	Если ПустаяСтрока(ФильтрКлючей) Тогда
		Результат = Новый Структура;
		Для каждого Строка Из Структура Цикл
			Если ТипЗнч(Строка.Значение) = Тип("Структура") Тогда
				ТекущееЗначение = КопияСтруктуры(Строка.Значение);
			ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Массив") Тогда
				ТекущееЗначение = КопияМассива(Строка.Значение);
			Иначе				
				ТекущееЗначение = Строка.Значение;
			КонецЕсли;
			Результат.Вставить(Строка.Ключ, ТекущееЗначение);
		КонецЦикла;
	Иначе
		МассивКлючей = РазложитьСтрокуВМассивПодстрок(ФильтрКлючей, ",", Истина);
		
		Результат = Новый Структура;
		Для каждого Строка Из Структура Цикл
			Если МассивКлючей.Найти(Строка.Ключ) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(Строка.Значение) = Тип("Структура") Тогда
				ТекущееЗначение = КопияСтруктуры(Строка.Значение);
			ИначеЕсли ТипЗнч(Строка.Значение) = Тип("Массив") Тогда
				ТекущееЗначение = КопияМассива(Строка.Значение);
			Иначе				
				ТекущееЗначение = Строка.Значение;
			КонецЕсли;
			Результат.Вставить(Строка.Ключ, ТекущееЗначение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция КопияМассива(ИсходныйМассив) Экспорт
	Результат = Новый Массив();
	Для каждого ТекущаяСтрока Из ИсходныйМассив Цикл
		Если ТипЗнч(ТекущаяСтрока) = Тип("Структура") Тогда
			Результат.Добавить(КопияСтруктуры(ТекущаяСтрока));
		Иначе
			Результат.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция НайтиСтрокуВМассивеСтруктур(ИсходныйМассив, ИмяПоля, ЗначениеПоля) Экспорт
	Для каждого ТекущаяСтрока Из ИсходныйМассив Цикл
		Если ТипЗнч(ТекущаяСтрока) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
				
		Если ТекущаяСтрока[ИмяПоля] = ЗначениеПоля Тогда
			Возврат ТекущаяСтрока;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция НайтиСтрокиВМассивеСтруктур(ИсходныйМассив, СтруктураОтбора) Экспорт
	Результат = Новый Массив;
	Для каждого ТекущаяСтрока Из ИсходныйМассив Цикл
		Если ТипЗнч(ТекущаяСтрока) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		СоответствуетОтбору = Истина;
		Для каждого ТекущийОтбор Из СтруктураОтбора Цикл
			Если ТекущаяСтрока[ТекущийОтбор.Ключ] <> ТекущийОтбор.Значение Тогда
				СоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СоответствуетОтбору Тогда
			Результат.Добавить(ТекущаяСтрока);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые
//  строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
// Примечание:
//  В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
//  рекомендуется использовать функцию платформы СтрРазделить.
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция ОставитьТолькоЦифры(Знач стрЧисло) Экспорт
	ТолькоЦифры = "";
	Для а=1 По СтрДлина(стрЧисло) Цикл
		Если СтрЧислоВхождений("1234567890",Сред(стрЧисло,а,1)) > 0 Тогда
			ТолькоЦифры = ТолькоЦифры + Сред(стрЧисло,а,1);
		КонецЕсли;
	КонецЦикла;
	Попытка
		Число = Число(ТолькоЦифры);
		ТолькоЦифры = Формат(Число, "ЧГ=0");
		
	Исключение
		ТолькоЦифры = "0";
	КонецПопытки;
	Возврат ТолькоЦифры;
КонецФункции



#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПолучениеДанных

Функция ПолучитьМассивОплаты(ДокументСсылка) Экспорт
	МассивОплаты = Новый Массив;
		
	// 1. ищем протокол оплаты
	
	// (А) - в регистре
	//Если		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Заказ") Тогда
	//	РегистрДопИнф = РегистрыСведений.ЗаказДопИнф.Получить(Новый Структура("Заказ",ДокументСсылка));
	//ИначеЕсли	ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Возврат") Тогда
	//	РегистрДопИнф = РегистрыСведений.ВозвратДопИнф.Получить(Новый Структура("Возврат",ДокументСсылка));
	//Иначе 
	//	Возврат МассивОплаты;
	//КонецЕсли;
	//	
	//ДокументПротоколРасчетов = РегистрДопИнф.ПротоколРасчетов;
	//
	//Если ДокументПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка() Тогда
	//	Возврат МассивОплаты;
	//КонецЕсли;
	
	// (Б) - непосредственно документ
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколРасчетов.Ссылка
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|ГДЕ
	|	ПротоколРасчетов.Заказ = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколРасчетов.Дата УБЫВ";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ВыборкаПротокол = Запрос.Выполнить().Выбрать();
	Если ВыборкаПротокол.Следующий() Тогда
		ДокументПротоколРасчетов = ВыборкаПротокол.Ссылка;
	Иначе
		Возврат МассивОплаты;
	КонецЕсли;
	
	// 2. получаем информацию из протокола оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВариантОплаты			КАК ВариантОплаты
	|,	СУММА(	ВЫБОР
	|				КОГДА Действие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОплате.Взнос)
	|				ТОГДА СуммаФакт
	|				ИНАЧЕ 0
	|			КОНЕЦ)			КАК Приход
	|,	СУММА(	ВЫБОР
	|				КОГДА Действие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОплате.Сдача)
	|				ТОГДА СуммаФакт
	|				ИНАЧЕ 0
	|			КОНЕЦ)			КАК Расход
	|ИЗ
	|	Документ.ПротоколРасчетов.Протокол
	|ГДЕ
	|	Ссылка = &ПротоколРасчетов
	|СГРУППИРОВАТЬ ПО
	|	ВариантОплаты
	|ИМЕЮЩИЕ
	|	СУММА(	ВЫБОР
	|				КОГДА Действие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОплате.Взнос)
	|				ТОГДА СуммаФакт
	|				ИНАЧЕ 0
	|			КОНЕЦ)
	|	+
	|	СУММА(	ВЫБОР
	|				КОГДА Действие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОплате.Сдача)
	|				ТОГДА СуммаФакт
	|				ИНАЧЕ 0
	|			КОНЕЦ) > 0
	|";
	Запрос.УстановитьПараметр("ПротоколРасчетов", ДокументПротоколРасчетов);
	ТаблицаОплаты = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрОпл ИЗ ТаблицаОплаты Цикл
		Если		СтрОпл.ВариантОплаты = Справочники.ВариантыОплаты.Наличные Тогда
			ТипОплаты = 1;
		ИначеЕсли	СтрОпл.ВариантОплаты = Справочники.ВариантыОплаты.Карта Тогда
			ТипОплаты = 2;
		ИначеЕсли	СтрОпл.ВариантОплаты = Справочники.ВариантыОплаты.Безнал Тогда
			ТипОплаты = 2; //!!! Верный ли тип оплаты?
		Иначе
			ТипОплаты = 0;
		КонецЕсли;
	
		Money_sum_in	= 0;
		Money_sum_out	= 0;
		
		Если		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Заказ") Тогда
			Money_sum_in	= СтрОпл.Приход;
			Money_sum_out	= СтрОпл.Расход;
		ИначеЕсли	ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Возврат") Тогда
			// протокол расчетов инвертирован
			Money_sum_in	= СтрОпл.Расход;
			Money_sum_out	= СтрОпл.Приход;
		КонецЕсли;
		
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Pay_type"		, ТипОплаты);
		СтрокаОплаты.Вставить("Money_sum_in"	, Money_sum_in);
		СтрокаОплаты.Вставить("Money_sum_out"	, Money_sum_out);
		
		МассивОплаты.Добавить(СтрокаОплаты);
		
	КонецЦикла;
	
	Возврат МассивОплаты;
КонецФункции

// ТипРМ - ПеречислениеСсылка.ТипыРМ
Функция ПолучитьКодСтанцииПоТипуРабочегоМеста(ТипРМ)
	
	Если ТипРМ = ПредопределенноеЗначение("Перечисление.ТипыРМ.СтанцияОплаты") Тогда
		Возврат 1;
	ИначеЕсли ТипРМ = ПредопределенноеЗначение("Перечисление.ТипыРМ.Автокасса") Тогда
		Возврат 2;
	ИначеЕсли ТипРМ = ПредопределенноеЗначение("Перечисление.ТипыРМ.КассовоеМестоРесторана") Тогда
		Возврат 3;
	ИначеЕсли ТипРМ = ПредопределенноеЗначение("Перечисление.ТипыРМ.Производство") Тогда
		Возврат 4;
	ИначеЕсли ТипРМ = ПредопределенноеЗначение("Перечисление.ТипыРМ.Хостес") Тогда
		Возврат 5;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция ПолучитьКодМестаРеализации(МестоРеализации) Экспорт
	
	Если МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Отдохни") Тогда
		Возврат 1;
	ИначеЕсли МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Мяснов") Тогда
		Возврат 2;
	ИначеЕсли МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		Возврат 3;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПолучитьКодККМИзПараметровРМ() Экспорт
	ККМКодСУП = "";
	
	Если глПараметрыРМ <> Неопределено Тогда
		Если глПараметрыРМ.ККМ.КодСУП <> "" ТОгда
			ККМКодСУП = глПараметрыРМ.ККМ.КодСУП;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ККМКодСУП;
КонецФункции

Функция ПроверитьКартуЛояльностиПоНомеру_Новый(ЗаказОбъект, НомерКарты) Экспорт
	
	//// Проверка номера карты по маске
	//Если НЕ ЛояльностьКлиентСервер.ПроверитьКорректностьНомераКарты(НомерКарты) Тогда
	//	//??? Выводить сообщение об ошибке
	//	Возврат Ложь;
	//КонецЕсли;
	//	//РезультатПроверки = ЛояльностьКлиентСервер.ПроверитьКартуЛояльностиПоНомеру(НомерКартыЛояльности, 1);
	//	//Если РезультатПроверки.ЭтоКартаЛояльности Тогда
	//// Получаем данные гостя по номеру карты
	//Тест = ЛояльностьКлиентСервер.ТестовыйРежим(глРабочееМесто);
	//ДанныеГостя = ЛояльностьКлиентСервер.ПолучитьДанныеГостя(НомерКартыЛояльности, Тест);
	//Если ДанныеГостя.Ошибка ИЛИ ДанныеГостя.Пустой Тогда
	//	// Не смогли получить данные гостя - записываем в заказ номер карты без проверки
	//	ЗаказОбъект.НомерКартыЛояльности = НомерКартыЛояльности;
	//	Возврат Истина;
	//КонецЕсли;
	//
	//Если ПустаяСтрока(ДанныеГостя.НомерКарты) Тогда
	//
	//
	
	
	//СтруктураОтвета = Новый Структура;
	//СтруктураОтвета.Вставить("ЭтоКартаЛояльности"	, Ложь);
	//СтруктураОтвета.Вставить("НомерКарты"			, НомерКарты);
	//
	//Если ВидПроверки = 0 Тогда
	//	Префикс = Лев(НомерКарты, 2);

	//	Шаблон = Справочники.ШаблоныШК.НайтиПоКоду(Префикс);

	//	Если НЕ Шаблон.Пустая() И НЕ Шаблон.ПометкаУдаления И Шаблон.Тип = Справочники.ТипыШаблоновШК.КартаЛояльности Тогда
	//		СтруктураОтвета.Вставить("ЭтоКартаЛояльности"	, Истина);
	//	КонецЕсли;
	//	
	//ИначеЕсли ВидПроверки = 1 Тогда
	//	
	//	ТекстОшибки1 = "";	ТекстОшибки2 = "";
	//	РезультатПроверки = ИнтерфейсРМ.ПроверитьИдентификаторПоШаблонам(НомерКарты, ТекстОшибки1, ТекстОшибки2);
	//	
	//	Если ПустаяСтрока(ТекстОшибки1) Тогда
	//		Если РезультатПроверки.Тип = Справочники.ТипыШаблоновШК.КартаЛояльности Тогда
	//			СтруктураОтвета.Вставить("ЭтоКартаЛояльности"	, Истина);
	//			СтруктураОтвета.Вставить("НомерКарты"			, РезультатПроверки.Значение);
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//Если СтруктураОтвета.ЭтоКартаЛояльности Тогда
	//	Если НЕ ПроверитьКорректностьНомераКарты(НомерКарты) Тогда
	//		СтруктураОтвета.ЭтоКартаЛояльности = Ложь;
	//	КонецЕсли;
	//КонецЕсли;

	//Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Функция ПроверитьКартуЛояльностиПоНомеру(НомерКарты, ВидПроверки = 0) ЭКСПОРТ
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ЭтоКартаЛояльности"	, Ложь);
	СтруктураОтвета.Вставить("НомерКарты"			, НомерКарты);
	
	Если ВидПроверки = 0 Тогда
		Префикс = Лев(НомерКарты, 2);

		Шаблон = Справочники.ШаблоныШК.НайтиПоКоду(Префикс);

		Если НЕ Шаблон.Пустая() И НЕ Шаблон.ПометкаУдаления И Шаблон.Тип = Справочники.ТипыШаблоновШК.КартаЛояльности Тогда
			СтруктураОтвета.Вставить("ЭтоКартаЛояльности"	, Истина);
		КонецЕсли;
		
	ИначеЕсли ВидПроверки = 1 Тогда
		
		ТекстОшибки1 = "";	ТекстОшибки2 = "";
		РезультатПроверки = ИнтерфейсРМ.ПроверитьИдентификаторПоШаблонам(НомерКарты, ТекстОшибки1, ТекстОшибки2);
		
		Если ПустаяСтрока(ТекстОшибки1) Тогда
			Если РезультатПроверки.Тип = Справочники.ТипыШаблоновШК.КартаЛояльности Тогда
				СтруктураОтвета.Вставить("ЭтоКартаЛояльности"	, Истина);
				СтруктураОтвета.Вставить("НомерКарты"			, РезультатПроверки.Значение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураОтвета.ЭтоКартаЛояльности Тогда
		Если НЕ ПроверитьКорректностьНомераКарты(НомерКарты) Тогда
			СтруктураОтвета.ЭтоКартаЛояльности = Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

// Процедура осуществляет процедуры открытия заказа в лояльности
Процедура ОткрытьЗаказ(ЗаказОбъект, Тест) Экспорт
	
	Отладка = ЛояльностьКлиентСервер.ОтладкаВключена();
	Если Отладка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "начало (заказ="+ЗаказОбъект.Номер+")");
	КонецЕсли;

	Если ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияЛояльности = ЛояльностьКлиентСервер.ВерсияЛояльности(Тест);
 	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	Если ВерсияПротокола<4 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONДляОткрытияЗаказа_Протокол4(ЗаказОбъект);
	Если ПараметрыЗапроса.Ошибка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
		Возврат;
	КонецЕсли;
	
	ОтправкаУспешна = Ложь;
	
	Попытка
		Если Отладка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "отправка запроса (текст="+ПараметрыЗапроса.ТекстЗапроса+")");
		КонецЕсли;
		
		ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
		ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
	Исключение
	КонецПопытки;
	
	Если НЕ ОтправкаУспешна Тогда
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "ошибка отправки (ответ: "+ОписаниеОшибки+")");
	КонецЕсли;
	
	ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
	Если Отладка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "распарсен ответ:"+ОтветСервера.Ответ);
	КонецЕсли;
	
	Если ОтправкаУспешна И ДанныеОтвета.err <> 0 Тогда
		ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "в ответе ошибка:"+ДанныеОтвета.err_msg);
	КонецЕсли;	
	
	Лояльность.ОбновитьАкцииГостяПоНомеруКарты(ЗаказОбъект.НомерКартыЛояльности, ЗаказОбъект.Ссылка, Тест);
	ДанныеЛояльности = ЛояльностьКлиентСервер.ПолучитьАкцииГостяПоЗаказу(ЗаказОбъект, Тест);
	ЛояльностьКлиентСервер.Логирование(1, "акции", ЛояльностьКлиентСервер.СформироватьJSON(ДанныеЛояльности));
	ЛояльностьКлиентСервер.ЗаполнитьЗаказПоДаннымАкцийГостя(ЗаказОбъект, ДанныеЛояльности);
	
//#Если Клиент Тогда
//	ПараметрыЗадания = Новый Массив;
//	ПараметрыЗадания.Добавить(ЗаказОбъект.НомерКартыЛояльности);
//	ПараметрыЗадания.Добавить(ЗаказОбъект.Ссылка);
//	ПараметрыЗадания.Добавить(Тест);
//	ФоновыеЗадания.Выполнить("Лояльность.ОбновитьДанныеГостяПоНомеруКарты", ПараметрыЗадания, Строка(Новый УникальныйИдентификатор()), "Обновление данных гостя");
//	//ФоновыеЗадания.Выполнить("Лояльность.ОбновитьАкцииГостяПоНомеруКарты", ПараметрыЗадания, Строка(Новый УникальныйИдентификатор()), "Обновление данных гостя");
//#Иначе
//	Лояльность.ОбновитьДанныеГостяПоНомеруКарты(ЗаказОбъект.НомерКартыЛояльности, ЗаказОбъект.Ссылка, Тест);
//#КонецЕсли
	
	//Если ЗаказОбъект.Товары.Количество()>0 Тогда
	//	ПараметрыЗадания = Новый Массив;
	//	ПараметрыЗадания.Добавить(ЗаказОбъект.НомерКартыЛояльности);
	//	ПараметрыЗадания.Добавить(Тест);
	//	ФоновыеЗадания.Выполнить("Лояльность.ОбновитьПредварительныйРасчетЗаказа", ПараметрыЗадания, Строка(Новый УникальныйИдентификатор()), "Обновление данных гостя");
	//КонецЕсли;
	
КонецПроцедуры

// Функция выполняет проверку карту лояльности и изменяет заказ и дополнительные данные лояльности
// Возвращает структуру: ошибка, текст ошибки
Функция ИзменитьКартуЛояльностиПоЗаказу(ЗаказОбъект, НомерКартыЛояльности) Экспорт
	
	ЛояльностьКлиентСервер.Логирование(1, "изменение карты", "начало (заказ="+ЗаказОбъект.Номер+")");
	ЛояльностьКлиентСервер.Логирование(1, "изменение карты", "карта в заказе="+ЗаказОбъект.НомерКартыЛояльности+"); новая карта="+НомерКартыЛояльности);
	
	Результат = Новый Структура("Ошибка, ТекстОшибки, ПовторныйВвод", Ложь, "", Ложь);
	
#Если Клиент Тогда
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(глРабочееМесто);
#Иначе
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим();
#КонецЕсли

	// На всякий случай проверяем признаки оплаты по заказу
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Товары Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументОплаты) Тогда
			Результат.Ошибка = Истина;
			Результат.ТекстОшибки = "По оплаченному заказу невозможно изменить карту КеГеЛьБУМ";
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;

	Если Не ПустаяСтрока(НомерКартыЛояльности) Тогда
		ДанныеГостя = ПолучитьДанныеГостя(НомерКартыЛояльности, Тест);
		Если ДанныеГостя.Пустой Тогда
			// Структура данных не заполнилась по каким-то причинам
			// Вставляем номер карты в заказ как есть
			ЗаказОбъект.НомерКартыЛояльности = НомерКартыЛояльности;
			ЛояльностьКлиентСервер.Логирование(1, "изменение карты", "не удалось получить данные гостя");
		ИначеЕсли ДанныеГостя.Ошибка Тогда
			// Ошибка сервиса КГЛБ
			// Вставляем номер карты в заказ как есть
			ЗаказОбъект.НомерКартыЛояльности = НомерКартыЛояльности;
			ЛояльностьКлиентСервер.Логирование(1, "изменение карты", "не удалось получить данные гостя: "+ДанныеГостя.ТекстОшибки);
			//ЗаписьЖурналаРегистрации("Лояльность.Получение данных КГЛБ", УровеньЖурналаРегистрации.Ошибка,,,ДанныеГостя.ТекстОшибки);
		Иначе
			Если НЕ ДанныеГостя.РезультатПроверки Тогда
				Результат.Ошибка = Истина;
				Результат.ТекстОшибки = ДанныеГостя.ТекстРезультатаПроверки;
				Результат.ПовторныйВвод = Истина;
				ЛояльностьКлиентСервер.Логирование(1, "изменение карты", "карта не прошла проверку: "+ДанныеГостя.ТекстРезультатаПроверки);
				//??? Сбрасывать ли номер карты в заказе
				//ЗаказОбъект.НомерКартыЛояльности = "";
			Иначе
				// Вставляем расшифрованный номер карты
				ЗаказОбъект.НомерКартыЛояльности = ДанныеГостя.НомерКарты;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ДанныеГостя = СтруктураДанныхЛояльностиПоЗаказу("INFO");
		ЗаказОбъект.НомерКартыЛояльности = НомерКартыЛояльности;
		ЛояльностьКлиентСервер.Логирование(1, "изменение карты", "карта не заполнена");
	КонецЕсли;
	
	// Удаляем данные лояльности по заказу
	Лояльность.СброситьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка);
	
	// Удалить купоны из заказа
	ЗаказОбъект.Купоны.Очистить();
	
	// Чистим статусы в строках заказа (на всякий случай)
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Товары Цикл
		ТекущаяСтрока.ЛояльностьСтатус = 0;
		ТекущаяСтрока.ЛояльностьСтатусАкции = 0;
		ТекущаяСтрока.ЛояльностьДопСтатусАкции = "";
		ТекущаяСтрока.ЛояльностьГруппаАкции = 0;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
		Лояльность.ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "INFO", ДанныеГостя);
		ОткрытьЗаказ(ЗаказОбъект, Тест);		
	КонецЕсли;
	
	ЛояльностьКлиентСервер.Логирование(1, "изменение карты", "конец (заказ="+ЗаказОбъект.Номер+")");
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Сервисы

Функция ПарольСервиса_Чеки() Экспорт
	Возврат "TDX76wRRj0JCozpmPhZ20htaE3e78P77C42lk2Zn2rsUV4arSjP283LvTYak002Z";
КонецФункции

Функция ОтправитьЗапросСервисуОбработкиКартыГостя(СтрокаJSON, ИмяКоманды, Тест = Ложь) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	ПараметрыСервиса = Лояльность.ПолучитьПараметрыСервисаКеГеЛьБУМ(Тест);
	Если ПараметрыСервиса = Неопределено Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "Не определены параметры сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если ПустаяСтрока(ПараметрыСервиса.АдресСервиса) ИЛИ ПустаяСтрока(ИмяКоманды) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "Не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ИнтернетПрокси = Неопределено;
	Если ПараметрыСервиса.ИспользоватьПрокси Тогда
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Установить("http", ПараметрыСервиса.ПроксиСервер, ПараметрыСервиса.ПроксиПорт);
		ИнтернетПрокси.Пользователь	= ПараметрыСервиса.ПроксиПользователь;
		ИнтернетПрокси.Пароль		= ПараметрыСервиса.ПроксиПароль;
	КонецЕсли;
		
	Попытка
		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Определение = Новый WSОпределения(ПараметрыСервиса.АдресСервиса,,,ИнтернетПрокси, ПараметрыСервиса.Таймаут);
		
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОстатокТаймаута = ПараметрыСервиса.Таймаут - (ОкончаниеВыполнения - НачалоВыполнения)/1000;
		Если ОстатокТаймаута < 1 Тогда
			ВызватьИсключение "Истекло время ожидания (таймаут="+ПараметрыСервиса.Таймаут+")";
		КонецЕсли;
		Если ПараметрыСервиса.Таймаут <> Окр(ОстатокТаймаута,0) Тогда
			ПараметрыСервиса.Таймаут = Окр(ОстатокТаймаута,0)+1;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "Guest", "GuestSoap", ИнтернетПрокси, ПараметрыСервиса.Таймаут);
		
		ИмяКоманды = НРег(ИмяКоманды);
		Если НРег(ИмяКоманды) = "get" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.get(СтрокаJSON));
		ИначеЕсли НРег(ИмяКоманды) = "set" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.set(СтрокаJSON));
		КонецЕсли;
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции


Функция ОтправитьКартуГостяНаОбработку(СтрокаJSON, ИмяКоманды, РежимОтправки = 0, Тест = Ложь) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	//ТекущийСервисРасчетаЧека	= ПолучитьПараметрыСервиса(РежимОтправки, Тест);
	
	//АдресСервиса	= ТекущийСервисРасчетаЧека.АдресСервиса;
	Если Тест Тогда
		АдресСервиса = "http://10.1.0.197/loyality_service/ws/guest?wsdl";
	Иначе
		АдресСервиса = "http://p77sp.msk.local:89/check_v3/ws/guest?wsdl";
	КонецЕсли;
	//ИмяКоманды		= ТекущийСервисРасчетаЧека.ИмяКоманды;
	Таймаут			= 10;
	
	Если ПустаяСтрока(АдресСервиса) ИЛИ ПустаяСтрока(ИмяКоманды) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ИнтернетПрокси = Неопределено;
	//Если ТекущийСервисРасчетаЧека.ИспользоватьПрокси Тогда
	//	ИнтернетПрокси = Новый ИнтернетПрокси;
	//	ИнтернетПрокси.Установить("http", ТекущийСервисРасчетаЧека.ПроксиСервер, ТекущийСервисРасчетаЧека.ПроксиПорт);
	//	ИнтернетПрокси.Пользователь	= ТекущийСервисРасчетаЧека.ПроксиПользователь;
	//	ИнтернетПрокси.Пароль		= ТекущийСервисРасчетаЧека.ПроксиПароль;
	//КонецЕсли;
		
	Попытка

		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Определение = Новый WSОпределения(АдресСервиса,,,ИнтернетПрокси, Таймаут);
		
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОстатокТаймаута = Таймаут - (ОкончаниеВыполнения - НачалоВыполнения)/1000;
		Если ОстатокТаймаута < 1 Тогда
			ВызватьИсключение "Истекло время ожидания (таймаут="+Таймаут+")";
		КонецЕсли;
		Если Таймаут <> Окр(ОстатокТаймаута,0) Тогда
			Таймаут = Окр(ОстатокТаймаута,0)+1;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "Guest", "GuestSoap", ИнтернетПрокси, Таймаут);
		
		ИмяКоманды = НРег(ИмяКоманды);
		Если ИмяКоманды = "get" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.get(СтрокаJSON));
		ИначеЕсли ИмяКоманды = "set" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.set(СтрокаJSON));
		КонецЕсли;
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции


Функция СформироватьJSONПоЗаказу(ТипЗапроса="PRESALE", ЗаказОбъект, ТипЗаказаЛояльность=0, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	// Возвращаем только актуальную структуру JSON
	Возврат СформироватьJSONПоЗаказу_Протокол3(ТипЗапроса, ЗаказОбъект, ТипЗаказаЛояльность, СтруктураАСКов, РежимСПУЛ);
		
КонецФункции

Функция СформироватьJSONПоЗаказу_Протокол3(ТипЗапроса="PRESALE", ЗаказОбъект, ТипЗаказаЛояльность=0, ДанныеЛояльностиПоЗаказу=Неопределено, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	Если ЗаказОбъект.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		Возврат СформироватьJSONПоЗаказу_КП_Протокол3(ТипЗапроса, ЗаказОбъект, ТипЗаказаЛояльность, , СтруктураАСКов, РежимСПУЛ);
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
	Иначе
#Если Клиент Тогда
		ККМ = ПолучитьКодККМИзПараметровРМ();
#Иначе
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
#КонецЕсли
	КонецЕсли;

	//###
	НомерСмены = ЗаказОбъект.НомерСмены;
	//Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
	//	НомерСмены = Число(Формат(ЗаказОбъект.Дата, "ДФ=ddHH"));
	//КонецЕсли;
	НомерЧека = ЗаказОбъект.НомерЧека;
	//Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
	//	//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
	//	НомерЧека = Число(Прав(СокрЛП(ЗаказОбъект.Номер),3));
	//КонецЕсли;
	//Если ПустаяСтрока(ККМ) Тогда
	//	ККМ = "337";
	//КонецЕсли;
	//###
	
	Если НомерЧека = 0 ИЛИ НомерСмены = 0 ИЛИ ККМ = "" Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ);
	КонецЕсли;
	
#Если Сервер Тогда
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "INFO");
	КонецЕсли;		
#КонецЕсли
		
	НомерКарты = ЗаказОбъект.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", ТипЗапроса);
	Запрос.Вставить("protocol_version", 3);
	Если ЗначениеЗаполнено(ЗаказОбъект.РабочееМесто) И ЗначениеЗаполнено(ЗаказОбъект.РабочееМесто.Станция) Тогда
		Запрос.Вставить("station_type", ПолучитьКодСтанцииПоТипуРабочегоМеста(ЗаказОбъект.РабочееМесто.Тип));
	Иначе
		Запрос.Вставить("station_type", 0);
	КонецЕсли;
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ПарольСервиса_Чеки());
	
	Заказ = Запрос.order;
	Если ТипЗапроса = "SALE" Тогда
		Заказ.Вставить("order_type"	, ТипЗаказаЛояльность);
	КонецЕсли;
	Запрос.Вставить("status", ЗаказОбъект.ОбработанСистемойЛояльности);
	
	ТТ = НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	Заказ.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	Заказ.Вставить("order_date", ЗаказОбъект.Дата);
	Заказ.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	
	Заказ.Вставить("card_number"	, НомерКарты);
	Заказ.Вставить("master_card"	, "");	
	Заказ.Вставить("order_str", Новый Массив);
	
	СтрокиЗаказа = Заказ.order_str;
	
	ТипЧислоЦелое = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0));
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3));
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
	ТипДата = Новый ОписаниеТипов("Дата");
	ТипТовар = Новый ОписаниеТипов("СправочникСсылка.Товары");
	ТипСпецифики = Новый ОписаниеТипов("СправочникСсылка.Специфики");
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("НомерСтрокиТовара", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("ИдСтроки", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("СтатусОплаты", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("Товар", ТипТовар);
	ТаблицаТовары.Колонки.Добавить("Количество", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("Цена", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("ПДФ", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("ШК", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("ВремяДобавления", ТипДата);
	
	ТаблицаСпецифики = Новый ТаблицаЗначений;
	ТаблицаСпецифики.Колонки.Добавить("НомерСтрокиСпецифики", ТипЧислоЦелое);
	ТаблицаСпецифики.Колонки.Добавить("НомерСтрокиТовара", ТипЧислоЦелое);
	ТаблицаСпецифики.Колонки.Добавить("ИдСтроки", ТипСтрока);
	ТаблицаСпецифики.Колонки.Добавить("Специфика", ТипСпецифики);
	ТаблицаСпецифики.Колонки.Добавить("Количество", ТипЧисло);
	ТаблицаСпецифики.Колонки.Добавить("Цена", ТипЧисло);
	
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Товары Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Попытка
			НоваяСтрока.СтатусОплаты = ТекущаяСтрока.СтатусОплаты;
		Исключение
			НоваяСтрока.СтатусОплаты = -1;
		КонецПопытки;
		НоваяСтрока.НомерСтрокиТовара = ТекущаяСтрока.НомерСтроки;
	КонецЦикла;
	
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Специфики Цикл
		НоваяСтрока = ТаблицаСпецифики.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерСтрокиСпецифики = ТекущаяСтрока.НомерСтроки;
	КонецЦикла;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтрокиТовара КАК НомерСтроки,
	|	ТаблицаТоваров.ИдСтроки КАК ИдСтроки,
	|	ТаблицаТоваров.СтатусОплаты КАК СтатусОплаты,
	|	ТаблицаТоваров.Товар КАК Товар,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.ПДФ КАК ПДФ,
	|	ТаблицаТоваров.ШК КАК ШК,
	|	ТаблицаТоваров.ВремяДобавления КАК ВремяДобавления
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСпецифики.НомерСтрокиСпецифики КАК НомерСтроки,
	|	ТаблицаСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
	|	ТаблицаСпецифики.ИдСтроки КАК ИдСтроки,
	|	ТаблицаСпецифики.Специфика КАК Специфика,
	|	ТаблицаСпецифики.Количество КАК Количество,
	|	ТаблицаСпецифики.Цена КАК Цена
	|ПОМЕСТИТЬ ТаблицаСпецифики
	|ИЗ
	|	&ТаблицаСпецифики КАК ТаблицаСпецифики";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаСпецифики", ТаблицаСпецифики);
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Влож.НомерСтроки КАК НомерСтроки,
	|	Влож.ИдСтроки КАК ИдСтроки,
	|	Влож.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	Влож.СтатусОплаты КАК СтатусОплаты,
	|	Влож.Код КАК Код,
	|	Влож.Количество КАК Количество,
	|	Влож.Цена КАК Цена,
	|	Влож.Сумма КАК Сумма,
	|	Влож.Наименование КАК Наименование,
	|	Влож.Товар КАК Товар,
	|	Влож.Специфика КАК Специфика,
	|	Влож.НомерСтрокиСпец КАК НомерСтрокиСпец,
	|	Влож.ПДФ КАК ПДФ,
	|	Влож.ШК КАК ШК,
	|	Влож.ВремяДобавления КАК ВремяДобавления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|		ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|		ЗаказТовары.СтатусОплаты КАК СтатусОплаты,
	|		NULL КАК ИдСтрокиТовара,
	|		ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|		ЗаказТовары.Количество КАК Количество,
	|		ЗаказТовары.Цена КАК Цена,
	|		ЗаказТовары.Цена * ЗаказТовары.Количество КАК Сумма,
	|		ЗаказТовары.Товар.Наименование КАК Наименование,
	|		ЗаказТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	|		ЗаказТовары.ПДФ КАК ПДФ,
	|		ЗаказТовары.ШК КАК ШК,
	|		ЗаказТовары.ВремяДобавления КАК ВремяДобавления
	|	ИЗ
	|		ТаблицаТоваров КАК ЗаказТовары
	|	ГДЕ
	|		ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказСпецифики.НомерСтрокиТовара,
	|		ЗаказСпецифики.ИдСтроки,
	|		ЗаказТовары.СтатусОплаты КАК СтатусОплаты,
	|		ЗаказТовары.ИдСтроки,
	|		ЗаказСпецифики.Специфика.Номенклатура.КодСУП,
	|		ЗаказТовары.Количество,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Специфика.Наименование,
	|		NULL,
	|		1,
	|		ЗаказСпецифики.НомерСтроки,
	|		"""",
	|		"""",
	|		ЗаказТовары.ВремяДобавления
	|	ИЗ
	|		ТаблицаСпецифики КАК ЗаказСпецифики
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ЗаказТовары
	|			ПО ЗаказСпецифики.НомерСтрокиТовара = ЗаказТовары.НомерСтроки
	|	ГДЕ
	|		НЕ ЗаказСпецифики.Специфика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Влож
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказОбъект.Ссылка);
	ВыборПоНомеру = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ТаблицаТоваров;
	|УНИЧТОЖИТЬ ТаблицаСпецифики;";
	Запрос.Выполнить();
	
	
	СтрокиЗаказа = Новый Массив;
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
	Иначе
	#Если Клиент Тогда
		ККМ = ЛояльностьКлиентСервер.ПолучитьКодККМИзПараметровРМ();
	#Иначе
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
	#КонецЕсли
	КонецЕсли;

	Попытка //!!! Станция из перечисления
		Станция = Число(ЗаказОбъект.РабочееМесто.Станция.Код);
	Исключение
		Станция = 0;
	КонецПопытки;
	
	//###
	// ГОВНОКОД!!! Без него не прожить!!	
	НомерСмены = ЗаказОбъект.НомерСмены;
	Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
		НомерСмены = Число(Формат(ЗаказОбъект.Дата, "ДФ=ddHH"));
	КонецЕсли;
	НомерЧека = ЗаказОбъект.НомерЧека;
	Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
		//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
		НомерЧека = Число(Прав(СокрЛП(ЗаказОбъект.Номер),3));
	КонецЕсли;
	Если ПустаяСтрока(ККМ) Тогда
		ККМ = "337";
	КонецЕсли;
	//###
	
	Если НомерЧека = 0 ИЛИ НомерСмены = 0 ИЛИ ККМ = "" Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ);
	КонецЕсли;
	
	Пока ВыборПоНомеру.Следующий() Цикл
		Если ВыборПоНомеру.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = ВыборПоНомеру.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("kkm"				, ККМ);
			СтрокаЧека.Вставить("check_num"			, НомерЧека);
			СтрокаЧека.Вставить("shift"				, НомерСмены);
			СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
			
			СтрокаЧека.Вставить("pay_status"		, Выборка.СтатусОплаты);
		
			СтрокаЧека.Вставить("loyality_status"	, 0);//СтрТов.ЛояльностьСтатус);
			СтрокаЧека.Вставить("action_status"		, 0);//СтрТов.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.Цена);
			СтрокаЧека.Вставить("strsum"			, Выборка.Сумма);
			СтрокаЧека.Вставить("strsum_fact"		, Выборка.Сумма);
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", ТипЗапроса);
	Запрос.Вставить("protocol_version", 3);
	Запрос.Вставить("station_type", Станция);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	Если ТипЗапроса = "SALE" Тогда
		ДанныеЗаказа.Вставить("order_type"	, ТипЗаказаЛояльность);
	КонецЕсли;
	Запрос.Вставить("status", 0);//Заказ.ОбработанСистемойЛояльности); // В КП нет локального сервиса!!!
	
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ДанныеЗаказа.Вставить("order_date", ЗаказОбъект.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	
#Если Сервер Тогда
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "INFO");
	КонецЕсли;		
#КонецЕсли
		
	НомерКарты = ЗаказОбъект.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str", СтрокиЗаказа);
	
	Если ТипЗапроса = "SALE" Тогда
		МассивОплаты = ЛояльностьКлиентСервер.ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
		ДанныеЗаказа.Вставить("pay"			, МассивОплаты);
	КонецЕсли;
	
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	// Таблица чека
	НомерСтроки = 1;
	Для Каждого СтрТов ИЗ ЗаказОбъект.Товары Цикл
		Если СтрТов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЧека = Новый Структура;
		СтрокаЧека.Вставить("str_type"			, "T");
		СтрокаЧека.Вставить("str_no"			, СтрТов.ИдСтроки);
	
		СтрокаЧека.Вставить("kkm"				, ККМ);
		СтрокаЧека.Вставить("check_num"			, НомерЧека);
		СтрокаЧека.Вставить("shift"				, НомерСмены);
		СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
		
		Попытка
			СтрокаЧека.Вставить("pay_status"	, СтрТов.СтатусОплаты);
		Исключение
			СтрокаЧека.Вставить("pay_status"	, -1);
		КонецПопытки;
		СтрокаЧека.Вставить("pay_status"		, ?(ЗначениеЗаполнено(СтрТов.ДокументОплаты),1,-1));
	
		СтрокаЧека.Вставить("loyality_status"	, СтрТов.ЛояльностьСтатус);
		СтрокаЧека.Вставить("action_status"		, СтрТов.ЛояльностьСтатусАкции);
		СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
		СтрокаЧека.Вставить("product_EAN"		, СтрТов.ШК);
		СтрокаЧека.Вставить("product_code"		, СтрТов.Товар.КодСУП);
		СтрокаЧека.Вставить("product_name"		, СтрТов.Товар.Наименование);
		СтрокаЧека.Вставить("quantity"			, СтрТов.Количество);
		СтрокаЧека.Вставить("price"				, СтрТов.Цена);
		СтрокаЧека.Вставить("price_fact"		, СтрТов.ЦенаРеализации);
		СтрокаЧека.Вставить("strsum"			, СтрТов.Сумма);
		СтрокаЧека.Вставить("strsum_fact"		, СтрТов.СуммаРеализации);
		СтрокаЧека.Вставить("pdf"				, СтрТов.ПДФ);
		СтрокаЧека.Вставить("str_date"			, СтрТов.ВремяДобавления);
		
		СтрокиЗаказа.Добавить(СтрокаЧека);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	//Для Каждого СтрКуп ИЗ ЗаказОбъект.Купоны Цикл
	//	СтрокаКупонов = Новый Структура;
	//	СтрокаКупонов.Вставить("coupon_code", СтрКуп.Купон);
	//	СтрокаКупонов.Вставить("coupon_txt", "");
	//	Купоны.Добавить(СтрокаКупонов);
	//КонецЦикла;
	//Если ЗаказОбъект.Купоны.Количество() = 0 Тогда
	//	Купоны = Неопределено;
	//КонецЕсли;
	//Чек.Вставить("chek_coupon"		, Купоны);
	//
	//Чек.Вставить("coupon_out"		, Неопределено);
	
	Если ТипЗапроса = "SALE" Тогда
		МассивОплаты = ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
		Заказ.Вставить("pay"			, МассивОплаты);
	КонецЕсли;
	
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;
КонецФункции

Функция СформироватьJSONПоЗаказу_Протокол4_УДАЛИТЬ(ТипЗапроса="PRESALE", ЗаказОбъект, ТипЗаказаЛояльность=0, ДанныеЛояльностиПоЗаказу=Неопределено, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	Если ЗаказОбъект.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		Возврат СформироватьJSONПоЗаказу_КП_Протокол3(ТипЗапроса, ЗаказОбъект, ТипЗаказаЛояльность, , СтруктураАСКов, РежимСПУЛ);
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
#Если Сервер Тогда
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "INFO");
	КонецЕсли;		
#КонецЕсли
		
	НомерКарты = ЗаказОбъект.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	ТипЧислоЦелое = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0));
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3));
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
	ТипДата = Новый ОписаниеТипов("Дата");
	ТипТовар = Новый ОписаниеТипов("СправочникСсылка.Товары");
	ТипСпецифики = Новый ОписаниеТипов("СправочникСсылка.Специфики");
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("НомерСтрокиТовара", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("ИдСтроки", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("СтатусОплаты", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("МестоРеализации", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("Товар", ТипТовар);
	ТаблицаТовары.Колонки.Добавить("Количество", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("Цена", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("ПДФ", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("ШК", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("ВремяДобавления", ТипДата);
	
	ТаблицаСпецифики = Новый ТаблицаЗначений;
	ТаблицаСпецифики.Колонки.Добавить("НомерСтрокиСпецифики", ТипЧислоЦелое);
	ТаблицаСпецифики.Колонки.Добавить("НомерСтрокиТовара", ТипЧислоЦелое);
	ТаблицаСпецифики.Колонки.Добавить("ИдСтроки", ТипСтрока);
	ТаблицаСпецифики.Колонки.Добавить("Специфика", ТипСпецифики);
	ТаблицаСпецифики.Колонки.Добавить("Количество", ТипЧисло);
	ТаблицаСпецифики.Колонки.Добавить("Цена", ТипЧисло);
	
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Товары Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Попытка
			НоваяСтрока.СтатусОплаты = ТекущаяСтрока.СтатусОплаты;
		Исключение
			НоваяСтрока.СтатусОплаты = -1;
		КонецПопытки;
		НоваяСтрока.НомерСтрокиТовара = ТекущаяСтрока.НомерСтроки;
		НоваяСтрока.МестоРеализации = ТекущаяСтрока.Фирма.КодТТ;
	КонецЦикла;
	
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Специфики Цикл
		НоваяСтрока = ТаблицаСпецифики.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерСтрокиСпецифики = ТекущаяСтрока.НомерСтроки;
	КонецЦикла;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтрокиТовара КАК НомерСтроки,
	|	ТаблицаТоваров.ИдСтроки КАК ИдСтроки,
	|	ТаблицаТоваров.СтатусОплаты КАК СтатусОплаты,
	|	ТаблицаТоваров.МестоРеализации КАК МестоРеализации,
	|	ТаблицаТоваров.Товар КАК Товар,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.ПДФ КАК ПДФ,
	|	ТаблицаТоваров.ШК КАК ШК,
	|	ТаблицаТоваров.ВремяДобавления КАК ВремяДобавления
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСпецифики.НомерСтрокиСпецифики КАК НомерСтроки,
	|	ТаблицаСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
	|	ТаблицаСпецифики.ИдСтроки КАК ИдСтроки,
	|	ТаблицаСпецифики.Специфика КАК Специфика,
	|	ТаблицаСпецифики.Количество КАК Количество,
	|	ТаблицаСпецифики.Цена КАК Цена
	|ПОМЕСТИТЬ ТаблицаСпецифики
	|ИЗ
	|	&ТаблицаСпецифики КАК ТаблицаСпецифики";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаСпецифики", ТаблицаСпецифики);
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Влож.НомерСтроки КАК НомерСтроки,
	|	Влож.ИдСтроки КАК ИдСтроки,
	|	Влож.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	Влож.МестоРеализации КАК МестоРеализации,
	|	Влож.СтатусОплаты КАК СтатусОплаты,
	|	Влож.Код КАК Код,
	|	Влож.Количество КАК Количество,
	|	Влож.Цена КАК Цена,
	|	Влож.Сумма КАК Сумма,
	|	Влож.Наименование КАК Наименование,
	|	Влож.Товар КАК Товар,
	|	Влож.Специфика КАК Специфика,
	|	Влож.НомерСтрокиСпец КАК НомерСтрокиСпец,
	|	Влож.ПДФ КАК ПДФ,
	|	Влож.ШК КАК ШК,
	|	Влож.ВремяДобавления КАК ВремяДобавления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|		ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|		ЗаказТовары.МестоРеализации КАК МестоРеализации,
	|		ЗаказТовары.СтатусОплаты КАК СтатусОплаты,
	|		NULL КАК ИдСтрокиТовара,
	|		ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|		ЗаказТовары.Количество КАК Количество,
	|		ЗаказТовары.Цена КАК Цена,
	|		ЗаказТовары.Цена * ЗаказТовары.Количество КАК Сумма,
	|		ЗаказТовары.Товар.Наименование КАК Наименование,
	|		ЗаказТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	|		ЗаказТовары.ПДФ КАК ПДФ,
	|		ЗаказТовары.ШК КАК ШК,
	|		ЗаказТовары.ВремяДобавления КАК ВремяДобавления
	|	ИЗ
	|		ТаблицаТоваров КАК ЗаказТовары
	|	ГДЕ
	|		ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказСпецифики.НомерСтрокиТовара,
	|		ЗаказСпецифики.ИдСтроки,
	|		ЗаказТовары.МестоРеализации КАК МестоРеализации,
	|		ЗаказТовары.СтатусОплаты КАК СтатусОплаты,
	|		ЗаказТовары.ИдСтроки,
	|		ЗаказСпецифики.Специфика.Номенклатура.КодСУП,
	|		ЗаказТовары.Количество,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Специфика.Наименование,
	|		NULL,
	|		1,
	|		ЗаказСпецифики.НомерСтроки,
	|		"""",
	|		"""",
	|		ЗаказТовары.ВремяДобавления
	|	ИЗ
	|		ТаблицаСпецифики КАК ЗаказСпецифики
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ЗаказТовары
	|			ПО ЗаказСпецифики.НомерСтрокиТовара = ЗаказТовары.НомерСтроки
	|	ГДЕ
	|		НЕ ЗаказСпецифики.Специфика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Влож
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказОбъект.Ссылка);
	ВыборПоНомеру = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ТаблицаТоваров;
	|УНИЧТОЖИТЬ ТаблицаСпецифики;";
	Запрос.Выполнить();
	
	
	СтрокиЗаказа = Новый Массив;

	Попытка //!!! Станция из перечисления
		Станция = Число(ЗаказОбъект.РабочееМесто.Станция.Код);
	Исключение
		Станция = 0;
	КонецПопытки;
	
	Пока ВыборПоНомеру.Следующий() Цикл
		Если ВыборПоНомеру.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = ВыборПоНомеру.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
			
			СтрокаЧека.Вставить("sale_place"		, Выборка.МестоРеализации);
			СтрокаЧека.Вставить("pay_status"		, Выборка.СтатусОплаты);
		
			СтрокаЧека.Вставить("loyality_status"	, 0);
			СтрокаЧека.Вставить("action_status"		, 0);
			СтрокаЧека.Вставить("action_status_d"	, "");
			СтрокаЧека.Вставить("action_group"		, 0);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.Цена);
			СтрокаЧека.Вставить("strsum"			, Выборка.Сумма);
			СтрокаЧека.Вставить("strsum_fact"		, Выборка.Сумма);
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", ТипЗапроса);
	Запрос.Вставить("protocol_version", 4);
	Запрос.Вставить("station_type", Станция);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	//Если ТипЗапроса = "SALE" Тогда
	//	ДанныеЗаказа.Вставить("order_type"	, ТипЗаказаЛояльность);
	//КонецЕсли;
	Если Не ПустаяСтрока(ЗаказОбъект.ИдентификаторЛояльности) Тогда
		ДанныеЗаказа.Вставить("request_id", ЗаказОбъект.ИдентификаторЛояльности);
	КонецЕсли;
	Запрос.Вставить("status", 0);//Заказ.ОбработанСистемойЛояльности); // В КП нет локального сервиса!!!
	
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ДанныеЗаказа.Вставить("order_date", ЗаказОбъект.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	
#Если Сервер Тогда
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "INFO");
	КонецЕсли;		
#КонецЕсли
		
	НомерКарты = ЗаказОбъект.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str", СтрокиЗаказа);
	
	Если ТипЗапроса = "SALE" Тогда
		МассивОплаты = ЛояльностьКлиентСервер.ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
		ДанныеЗаказа.Вставить("pay"			, МассивОплаты);
	КонецЕсли;
	
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции

Функция СформироватьJSONПоЗаказу_КП_Протокол3(ТипЗапроса="PRESALE", ЗаказОбъект, ТипЗаказаЛояльность=0, ДанныеЛояльностиПоЗаказу=Неопределено, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	ЗапросТЧ = Новый Запрос;
	ЗапросТЧ.Текст = 
	"ВЫБРАТЬ
	|	Влож.НомерСтроки КАК НомерСтроки,
	|	Влож.ИдСтроки КАК ИдСтроки,
	|	Влож.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	Влож.Код КАК Код,
	|	Влож.Количество КАК Количество,
	|	Влож.Цена КАК Цена,
	|	Влож.Сумма КАК Сумма,
	|	Влож.Наименование КАК Наименование,
	|	Влож.Товар КАК Товар,
	|	Влож.Специфика КАК Специфика,
	|	Влож.НомерСтрокиСпец КАК НомерСтрокиСпец,
	|	Влож.ПДФ КАК ПДФ,
	|	Влож.ШК КАК ШК,
	|	Влож.ВремяДобавления КАК ВремяДобавления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|		ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|		NULL КАК ИдСтрокиТовара,
	|		ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|		ЗаказТовары.Количество КАК Количество,
	|		ЗаказТовары.Цена КАК Цена,
	|		ЗаказТовары.Цена * ЗаказТовары.Количество КАК Сумма,
	|		ЗаказТовары.Товар.Наименование КАК Наименование,
	|		ЗаказТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	|		ЗаказТовары.ПДФ КАК ПДФ,
	|		ЗаказТовары.ШК КАК ШК,
	|		ЗаказТовары.ВремяДобавления КАК ВремяДобавления
	|	ИЗ
	|		Документ.Заказ.Товары КАК ЗаказТовары
	|	ГДЕ
	|		ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ЗаказТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказСпецифики.НомерСтрокиТовара,
	|		ЗаказСпецифики.ИдСтроки,
	|		ЗаказТовары.ИдСтроки КАК ИдСтрокиТовара,
	|		ЗаказСпецифики.Специфика.Номенклатура.КодСУП,
	|		ЗаказТовары.Количество,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Специфика.Наименование,
	|		NULL,
	|		1,
	|		ЗаказСпецифики.НомерСтроки,
	|		"""",
	|		"""",
	|		ЗаказТовары.ВремяДобавления
	|	ИЗ
	|		Документ.Заказ.Специфики КАК ЗаказСпецифики
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ.Товары КАК ЗаказТовары
	|			ПО ЗаказСпецифики.Ссылка = ЗаказТовары.Ссылка
	|				И ЗаказСпецифики.НомерСтрокиТовара = ЗаказТовары.НомерСтроки
	|	ГДЕ
	|		ЗаказСпецифики.Ссылка = &Ссылка
	|		И НЕ ЗаказСпецифики.Специфика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Влож
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки";
	
	ЗапросТЧ.УстановитьПараметр("Ссылка", ЗаказОбъект.Ссылка);
	ВыборПоНомеру = ЗапросТЧ.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокиЗаказа = Новый Массив;
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
	Иначе
	#Если Клиент Тогда
		ККМ = ЛояльностьКлиентСервер.ПолучитьКодККМИзПараметровРМ();
	#Иначе
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
	#КонецЕсли
	КонецЕсли;

	Попытка //!!! Станция из перечисления
		Станция = Число(ЗаказОбъект.РабочееМесто.Станция.Код);
	Исключение
		Станция = 0;
	КонецПопытки;
	
	//###
	// ГОВНОКОД!!! Без него не прожить!!	
	НомерСмены = ЗаказОбъект.НомерСмены;
	//Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
	//	НомерСмены = Число(Формат(ЗаказОбъект.Дата, "ДФ=ddHH"));
	//КонецЕсли;
	НомерЧека = ЗаказОбъект.НомерЧека;
	//Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
	//	//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
	//	НомерЧека = Число(Прав(СокрЛП(ЗаказОбъект.Номер),3));
	//КонецЕсли;
	//Если ПустаяСтрока(ККМ) Тогда
	//	ККМ = "2668";
	//КонецЕсли;
	//###
	
	Если НомерЧека = 0 ИЛИ НомерСмены = 0 ИЛИ ККМ = "" Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ);
	КонецЕсли;
	
	Пока ВыборПоНомеру.Следующий() Цикл
		Если ВыборПоНомеру.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = ВыборПоНомеру.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("kkm"				, ККМ);
			СтрокаЧека.Вставить("check_num"			, НомерЧека);
			СтрокаЧека.Вставить("shift"				, НомерСмены);
			СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
			
			СтрокаЧека.Вставить("pay_status"		, -1);
		
			СтрокаЧека.Вставить("loyality_status"	, 0);//СтрТов.ЛояльностьСтатус);
			СтрокаЧека.Вставить("action_status"		, 0);//СтрТов.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.Цена);
			СтрокаЧека.Вставить("strsum"			, Выборка.Сумма);
			СтрокаЧека.Вставить("strsum_fact"		, Выборка.Сумма);
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", ТипЗапроса);
	Запрос.Вставить("protocol_version", 3);
	Запрос.Вставить("station_type", Станция);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	Если ТипЗапроса = "SALE" Тогда
		ДанныеЗаказа.Вставить("order_type"	, ТипЗаказаЛояльность);
	КонецЕсли;
	Запрос.Вставить("status", 0);//Заказ.ОбработанСистемойЛояльности); // В КП нет локального сервиса!!!
	
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ДанныеЗаказа.Вставить("order_date", ЗаказОбъект.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	
#Если Сервер Тогда
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "INFO");
	КонецЕсли;		
#КонецЕсли
		
	НомерКарты = ЗаказОбъект.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str", СтрокиЗаказа);
	
	Если ТипЗапроса = "SALE" Тогда
		МассивОплаты = ЛояльностьКлиентСервер.ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
		ДанныеЗаказа.Вставить("pay"			, МассивОплаты);
	КонецЕсли;
	
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;
КонецФункции

Функция СформироватьJSONПоЗаказу_Протокол2(ТипЗапроса = "SALE", ЗаказОбъект, ТипЧекаЛояльность, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь, Тест = Ложь) Экспорт

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Результат = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Результат.Вставить("protocol_version", 2);
	
	//Чек.Вставить("debug"	, 1);
	Чек.Вставить("request"	, ТипЗапроса);
	Чек.Вставить("status"	, ЗаказОбъект.ОбработанСистемойЛояльности);
	Чек.Вставить("order"	, СокрЛП(ЗаказОбъект.Номер));
	
	ТТ = НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	Чек.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
	Иначе
#Если Клиент Тогда
		ККМ = ПолучитьКодККМИзПараметровРМ();
#Иначе
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
#КонецЕсли
	КонецЕсли;

	НомерСмены = ЗаказОбъект.НомерСмены;
	НомерЧека = ЗаказОбъект.НомерЧека;
	Если Тест Тогда
		Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
			НомерСмены = Число(Формат(ЗаказОбъект.Дата, "ДФ=ddHH"));
		КонецЕсли;	
		Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
			НомерЧека = Число(Прав(СокрЛП(ЗаказОбъект.Номер),3));
		КонецЕсли;
		Если ПустаяСтрока(ККМ) Тогда
			ККМ = "337";
		КонецЕсли;
	КонецЕсли;
	
	Чек.Вставить("kkm"			, ККМ);
	Чек.Вставить("chek_num"		, НомерЧека);
	Чек.Вставить("shift"		, НомерСмены);
	
	Если НомерЧека = 0 ИЛИ НомерСмены = 0 ИЛИ ККМ = "" Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ);
	КонецЕсли;	
		
	Чек.Вставить("chek_type"	, ТипЧекаЛояльность);
	ДатаВремяЧека = ПолучитьДатуВремяЧека(ЗаказОбъект);
	Чек.Вставить("chek_date"	, Формат(ДатаВремяЧека, "ДФ=dd/MM/yyyy"));
	Чек.Вставить("chek_time"	, Формат(ДатаВремяЧека, "ДФ=HH:mm"));
	Чек.Вставить("mol"			, ЗаказОбъект.Автор.КодДоступа);
	Чек.Вставить("card_number"	, ЗаказОбъект.НомерКартыЛояльности);
	Чек.Вставить("master_card"	, "");
	
	// Таблица чека
	НомерСтроки = 1;
	Для Каждого СтрТов ИЗ ЗаказОбъект.Товары Цикл
		Если СтрТов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЧека = Новый Структура;
		
		СтрокаЧека.Вставить("pozNo"				, СтрТов.ИдСтроки);//НомерСтроки
		СтрокаЧека.Вставить("strType"			, "T");
		СтрокаЧека.Вставить("loyality_status"	, СтрТов.ЛояльностьСтатус);
		СтрокаЧека.Вставить("action_status"		, СтрТов.ЛояльностьСтатусАкции);
		СтрокаЧека.Вставить("action_statusD"	, СтрТов.ЛояльностьДопСтатусАкции);
		СтрокаЧека.Вставить("product_EAN"		, СтрТов.ШК);
		СтрокаЧека.Вставить("product_code"		, СтрТов.Товар.КодСУП);
		СтрокаЧека.Вставить("product_name"		, СтрТов.Товар.Наименование);
		СтрокаЧека.Вставить("quantity"			, СтрТов.Количество);
		СтрокаЧека.Вставить("price"				, СтрТов.Цена);
		СтрокаЧека.Вставить("price_fact"		, СтрТов.ЦенаРеализации);
		СтрокаЧека.Вставить("strsum"			, СтрТов.Сумма);
		СтрокаЧека.Вставить("strsum_fact"		, СтрТов.СуммаРеализации);
		СтрокаЧека.Вставить("PDF"				, СтрТов.ПДФ);
		
		Таблица.Добавить(СтрокаЧека);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Чек.Вставить("chek_str"		, Таблица);
	
	Для Каждого СтрКуп ИЗ ЗаказОбъект.Купоны Цикл
		СтрокаКупонов = Новый Структура;
		СтрокаКупонов.Вставить("coupon_code", СтрКуп.Купон);
		СтрокаКупонов.Вставить("coupon_txt", "");
		Купоны.Добавить(СтрокаКупонов);
	КонецЦикла;
	Если ЗаказОбъект.Купоны.Количество() = 0 Тогда
		Купоны = Неопределено;
	КонецЕсли;
	Чек.Вставить("chek_coupon"		, Купоны);
	
	Чек.Вставить("coupon_out"		, Неопределено);
	
	Если ТипЧекаЛояльность = 0 Тогда
		МассивОплаты = Неопределено;
	Иначе
		МассивОплаты = ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
	КонецЕсли;
	Чек.Вставить("pay"			, МассивОплаты);
	
	Результат.Вставить("chek"	, Чек);
	
	Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
		СтруктураАСКов = Неопределено;
	КонецЕсли;
	Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, СформироватьJSON(Результат));
	
	Возврат СтруктураОтвета;
КонецФункции


Функция СформироватьJSONДляРасчетаЗаказа_Протокол4(ЗаказОбъект, ДанныеЛояльностиПоЗаказу=Неопределено, СтруктураАСКов = Неопределено) Экспорт
	
	Если ЗаказОбъект.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		Возврат СформироватьJSONПоЗаказу_КП_Протокол3("PRESALE", ЗаказОбъект, 0, , СтруктураАСКов, Ложь);
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	ТипЧислоЦелое = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0));
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3));
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
	ТипДата = Новый ОписаниеТипов("Дата");
	ТипТовар = Новый ОписаниеТипов("СправочникСсылка.Товары");
	ТипСпецифики = Новый ОписаниеТипов("СправочникСсылка.Специфики");
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("НомерСтрокиТовара", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("ИдСтроки", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("СтатусОплаты", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("МестоРеализации", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("Товар", ТипТовар);
	ТаблицаТовары.Колонки.Добавить("Количество", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("Цена", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("ПДФ", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("ШК", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("ВремяДобавления", ТипДата);
	
	ТаблицаСпецифики = Новый ТаблицаЗначений;
	ТаблицаСпецифики.Колонки.Добавить("НомерСтрокиСпецифики", ТипЧислоЦелое);
	ТаблицаСпецифики.Колонки.Добавить("НомерСтрокиТовара", ТипЧислоЦелое);
	ТаблицаСпецифики.Колонки.Добавить("ИдСтроки", ТипСтрока);
	ТаблицаСпецифики.Колонки.Добавить("Специфика", ТипСпецифики);
	ТаблицаСпецифики.Колонки.Добавить("Количество", ТипЧисло);
	ТаблицаСпецифики.Колонки.Добавить("Цена", ТипЧисло);
	
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Товары Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		Попытка
			НоваяСтрока.СтатусОплаты = ТекущаяСтрока.СтатусОплаты;
		Исключение
			НоваяСтрока.СтатусОплаты = -1;
		КонецПопытки;
		НоваяСтрока.НомерСтрокиТовара = ТекущаяСтрока.НомерСтроки;
		НоваяСтрока.МестоРеализации = ТекущаяСтрока.Фирма.КодТТ;
	КонецЦикла;
	
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Специфики Цикл
		НоваяСтрока = ТаблицаСпецифики.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерСтрокиСпецифики = ТекущаяСтрока.НомерСтроки;
	КонецЦикла;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтрокиТовара КАК НомерСтроки,
	|	ТаблицаТоваров.ИдСтроки КАК ИдСтроки,
	|	ТаблицаТоваров.СтатусОплаты КАК СтатусОплаты,
	|	ТаблицаТоваров.МестоРеализации КАК МестоРеализации,
	|	ТаблицаТоваров.Товар КАК Товар,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.Цена КАК Цена,
	|	ТаблицаТоваров.ПДФ КАК ПДФ,
	|	ТаблицаТоваров.ШК КАК ШК,
	|	ТаблицаТоваров.ВремяДобавления КАК ВремяДобавления
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСпецифики.НомерСтрокиСпецифики КАК НомерСтроки,
	|	ТаблицаСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
	|	ТаблицаСпецифики.ИдСтроки КАК ИдСтроки,
	|	ТаблицаСпецифики.Специфика КАК Специфика,
	|	ТаблицаСпецифики.Количество КАК Количество,
	|	ТаблицаСпецифики.Цена КАК Цена
	|ПОМЕСТИТЬ ТаблицаСпецифики
	|ИЗ
	|	&ТаблицаСпецифики КАК ТаблицаСпецифики";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаСпецифики", ТаблицаСпецифики);
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Влож.НомерСтроки КАК НомерСтроки,
	|	Влож.ИдСтроки КАК ИдСтроки,
	|	Влож.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	Влож.МестоРеализации КАК МестоРеализации,
	|	Влож.СтатусОплаты КАК СтатусОплаты,
	|	Влож.Код КАК Код,
	|	Влож.Количество КАК Количество,
	|	Влож.Цена КАК Цена,
	|	Влож.Сумма КАК Сумма,
	|	Влож.Наименование КАК Наименование,
	|	Влож.Товар КАК Товар,
	|	Влож.Специфика КАК Специфика,
	|	Влож.НомерСтрокиСпец КАК НомерСтрокиСпец,
	|	Влож.ПДФ КАК ПДФ,
	|	Влож.ШК КАК ШК,
	|	Влож.ВремяДобавления КАК ВремяДобавления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|		ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|		ЗаказТовары.МестоРеализации КАК МестоРеализации,
	|		ЗаказТовары.СтатусОплаты КАК СтатусОплаты,
	|		NULL КАК ИдСтрокиТовара,
	|		ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|		ЗаказТовары.Количество КАК Количество,
	|		ЗаказТовары.Цена КАК Цена,
	|		ЗаказТовары.Цена * ЗаказТовары.Количество КАК Сумма,
	|		ЗаказТовары.Товар.Наименование КАК Наименование,
	|		ЗаказТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	|		ЗаказТовары.ПДФ КАК ПДФ,
	|		ЗаказТовары.ШК КАК ШК,
	|		ЗаказТовары.ВремяДобавления КАК ВремяДобавления
	|	ИЗ
	|		ТаблицаТоваров КАК ЗаказТовары
	|	ГДЕ
	|		ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказСпецифики.НомерСтрокиТовара,
	|		ЗаказСпецифики.ИдСтроки,
	|		ЗаказТовары.МестоРеализации КАК МестоРеализации,
	|		ЗаказТовары.СтатусОплаты КАК СтатусОплаты,
	|		ЗаказТовары.ИдСтроки,
	|		ЗаказСпецифики.Специфика.Номенклатура.КодСУП,
	|		ЗаказТовары.Количество,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Специфика.Наименование,
	|		NULL,
	|		1,
	|		ЗаказСпецифики.НомерСтроки,
	|		"""",
	|		"""",
	|		ЗаказТовары.ВремяДобавления
	|	ИЗ
	|		ТаблицаСпецифики КАК ЗаказСпецифики
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ЗаказТовары
	|			ПО ЗаказСпецифики.НомерСтрокиТовара = ЗаказТовары.НомерСтроки
	|	ГДЕ
	|		НЕ ЗаказСпецифики.Специфика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Влож
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказОбъект.Ссылка);
	ВыборПоНомеру = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ТаблицаТоваров;
	|УНИЧТОЖИТЬ ТаблицаСпецифики;";
	Запрос.Выполнить();
	
	
	СтрокиЗаказа = Новый Массив;

	Попытка //!!! Станция из перечисления
		Станция = Число(ЗаказОбъект.РабочееМесто.Станция.Код);
	Исключение
		Станция = 0;
	КонецПопытки;
	
	Пока ВыборПоНомеру.Следующий() Цикл
		Если ВыборПоНомеру.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = ВыборПоНомеру.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
			
			СтрокаЧека.Вставить("sale_place"		, Выборка.МестоРеализации);
			СтрокаЧека.Вставить("pay_status"		, Выборка.СтатусОплаты);
		
			СтрокаЧека.Вставить("loyality_status"	, 0);
			СтрокаЧека.Вставить("action_status"		, 0);
			СтрокаЧека.Вставить("action_status_d"	, "");
			СтрокаЧека.Вставить("action_group"		, 0);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.Цена);
			СтрокаЧека.Вставить("strsum"			, Выборка.Сумма);
			СтрокаЧека.Вставить("strsum_fact"		, Выборка.Сумма);
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "PRESALE");
	Запрос.Вставить("protocol_version", 4);
	Запрос.Вставить("station_type", Станция);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	Если Не ПустаяСтрока(ЗаказОбъект.ИдентификаторЛояльности) Тогда
		ДанныеЗаказа.Вставить("request_id", ЗаказОбъект.ИдентификаторЛояльности);
	КонецЕсли;
	Запрос.Вставить("status", 0);//Заказ.ОбработанСистемойЛояльности); // В КП нет локального сервиса!!!
	
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ДанныеЗаказа.Вставить("order_date", ЗаказОбъект.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	
#Если Сервер Тогда
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "INFO");
	КонецЕсли;		
#КонецЕсли
		
	НомерКарты = ЗаказОбъект.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str", СтрокиЗаказа);
	
	Для Каждого ТекущийКупон ИЗ ЗаказОбъект.Купоны Цикл
		СтрокаКупонов = Новый Структура;
		СтрокаКупонов.Вставить("code", ТекущийКупон.Купон);
		СтрокаКупонов.Вставить("type", ТекущийКупон.ТипКупона);
		СтрокаКупонов.Вставить("status", ТекущийКупон.СтатусКупона);
		Купоны.Добавить(СтрокаКупонов);
	КонецЦикла;
	
	Запрос.Вставить("coupon_in", Купоны);
	//Чек.Вставить("coupon_out", Неопределено);
	
	Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
		СтруктураАСКов = Неопределено;
	КонецЕсли;
	Запрос.Вставить("ask", СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции

// Формирование JSON по объекту заказа или структуре
Функция СформироватьJSONДляПредварительногоРасчетаЗаказа_Протокол4(ЗаказОбъект) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	ТипЧислоЦелое = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0));
	ТипЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,3));
	ТипСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(150));
	ТипДата = Новый ОписаниеТипов("Дата");
	ТипТовар = Новый ОписаниеТипов("СправочникСсылка.Товары");
	ТипСпецифики = Новый ОписаниеТипов("СправочникСсылка.Специфики");
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("НомерСтрокиТовара", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("ИдСтроки", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("СтатусОплаты", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("МестоРеализации", ТипЧислоЦелое);
	ТаблицаТовары.Колонки.Добавить("Товар", ТипТовар);
	ТаблицаТовары.Колонки.Добавить("Количество", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("Цена", ТипЧисло);
	//ТаблицаТовары.Колонки.Добавить("ПДФ", ТипСтрока);
	//ТаблицаТовары.Колонки.Добавить("ШК", ТипСтрока);
	//ТаблицаТовары.Колонки.Добавить("ВремяДобавления", ТипДата);
	ТаблицаТовары.Колонки.Добавить("ЛояльностьСтатус", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("ЛояльностьСтатусАкции", ТипЧисло);
	ТаблицаТовары.Колонки.Добавить("ЛояльностьДопСтатусАкции", ТипСтрока);
	ТаблицаТовары.Колонки.Добавить("ЛояльностьГруппаАкции", ТипЧисло);
	
	ТаблицаСпецифики = Новый ТаблицаЗначений;
	ТаблицаСпецифики.Колонки.Добавить("НомерСтрокиСпецифики", ТипЧислоЦелое);
	ТаблицаСпецифики.Колонки.Добавить("НомерСтрокиТовара", ТипЧислоЦелое);
	ТаблицаСпецифики.Колонки.Добавить("ИдСтроки", ТипСтрока);
	ТаблицаСпецифики.Колонки.Добавить("Специфика", ТипСпецифики);
	ТаблицаСпецифики.Колонки.Добавить("Количество", ТипЧисло);
	ТаблицаСпецифики.Колонки.Добавить("Цена", ТипЧисло);
	ТаблицаСпецифики.Колонки.Добавить("ЛояльностьСтатус", ТипЧисло);
	ТаблицаСпецифики.Колонки.Добавить("ЛояльностьСтатусАкции", ТипЧисло);
	ТаблицаСпецифики.Колонки.Добавить("ЛояльностьДопСтатусАкции", ТипСтрока);
	ТаблицаСпецифики.Колонки.Добавить("ЛояльностьГруппаАкции", ТипЧисло);
	
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Товары Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерСтрокиТовара = ТекущаяСтрока.НомерСтроки;
		НоваяСтрока.МестоРеализации = ТекущаяСтрока.Фирма.КодТТ; //!!! Переписать на запрос
	КонецЦикла;
	
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Специфики Цикл
		НоваяСтрока = ТаблицаСпецифики.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		НоваяСтрока.НомерСтрокиСпецифики = ТекущаяСтрока.НомерСтроки;
	КонецЦикла;
	
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтрокиТовара КАК НомерСтроки,
	|	ТаблицаТоваров.ИдСтроки КАК ИдСтроки,
	|	ТаблицаТоваров.СтатусОплаты КАК СтатусОплаты,
	|	ТаблицаТоваров.МестоРеализации КАК МестоРеализации,
	|	ТаблицаТоваров.Товар КАК Товар,
	|	ТаблицаТоваров.Количество КАК Количество,
	|	ТаблицаТоваров.Цена КАК Цена,
	//|	ТаблицаТоваров.ПДФ КАК ПДФ,
	//|	ТаблицаТоваров.ШК КАК ШК,
	//|	ТаблицаТоваров.ВремяДобавления КАК ВремяДобавления,
	|	ТаблицаТоваров.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ТаблицаТоваров.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ТаблицаТоваров.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ТаблицаТоваров.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСпецифики.НомерСтрокиСпецифики КАК НомерСтроки,
	|	ТаблицаСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
	|	ТаблицаСпецифики.ИдСтроки КАК ИдСтроки,
	|	ТаблицаСпецифики.Специфика КАК Специфика,
	|	ТаблицаСпецифики.Количество КАК Количество,
	|	ТаблицаСпецифики.Цена КАК Цена,
	|	ТаблицаСпецифики.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ТаблицаСпецифики.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ТаблицаСпецифики.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ТаблицаСпецифики.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ПОМЕСТИТЬ ТаблицаСпецифики
	|ИЗ
	|	&ТаблицаСпецифики КАК ТаблицаСпецифики";
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТовары);
	Запрос.УстановитьПараметр("ТаблицаСпецифики", ТаблицаСпецифики);
	Запрос.Выполнить();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Влож.НомерСтроки КАК НомерСтроки,
	|	Влож.ИдСтроки КАК ИдСтроки,
	|	Влож.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	Влож.МестоРеализации КАК МестоРеализации,
	|	Влож.СтатусОплаты КАК СтатусОплаты,
	|	Влож.Код КАК Код,
	|	Влож.Количество КАК Количество,
	|	Влож.Цена КАК Цена,
	|	Влож.Сумма КАК Сумма,
	|	Влож.Наименование КАК Наименование,
	|	Влож.Товар КАК Товар,
	|	Влож.Специфика КАК Специфика,
	|	Влож.НомерСтрокиСпец КАК НомерСтрокиСпец,
	//|	Влож.ПДФ КАК ПДФ,
	//|	Влож.ШК КАК ШК,
	//|	Влож.ВремяДобавления КАК ВремяДобавления,
	|	Влож.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	Влож.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	Влож.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	Влож.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|		ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|		ЗаказТовары.МестоРеализации КАК МестоРеализации,
	|		ЗаказТовары.СтатусОплаты КАК СтатусОплаты,
	|		NULL КАК ИдСтрокиТовара,
	|		ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|		ЗаказТовары.Количество КАК Количество,
	|		ЗаказТовары.Цена КАК Цена,
	|		ЗаказТовары.Цена * ЗаказТовары.Количество КАК Сумма,
	|		ЗаказТовары.Товар.Наименование КАК Наименование,
	|		ЗаказТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	//|		ЗаказТовары.ПДФ КАК ПДФ,
	//|		ЗаказТовары.ШК КАК ШК,
	//|		ЗаказТовары.ВремяДобавления КАК ВремяДобавления,
	|		ЗаказТовары.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|		ЗаказТовары.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|		ЗаказТовары.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|		ЗаказТовары.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|	ИЗ
	|		ТаблицаТоваров КАК ЗаказТовары
	|	ГДЕ
	|		ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказСпецифики.НомерСтрокиТовара,
	|		ЗаказСпецифики.ИдСтроки,
	|		ЗаказТовары.МестоРеализации КАК МестоРеализации,
	|		ЗаказТовары.СтатусОплаты КАК СтатусОплаты,
	|		ЗаказТовары.ИдСтроки,
	|		ЗаказСпецифики.Специфика.Номенклатура.КодСУП,
	|		ЗаказТовары.Количество,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Специфика.Наименование,
	|		NULL,
	|		1,
	|		ЗаказСпецифики.НомерСтроки,
	//|		"""",
	//|		"""",
	//|		ЗаказТовары.ВремяДобавления,
	|		ЗаказСпецифики.ЛояльностьСтатус,
	|		ЗаказСпецифики.ЛояльностьСтатусАкции,
	|		ЗаказСпецифики.ЛояльностьДопСтатусАкции,
	|		ЗаказСпецифики.ЛояльностьГруппаАкции
	|	ИЗ
	|		ТаблицаСпецифики КАК ЗаказСпецифики
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТоваров КАК ЗаказТовары
	|			ПО ЗаказСпецифики.НомерСтрокиТовара = ЗаказТовары.НомерСтроки
	|	ГДЕ
	|		НЕ ЗаказСпецифики.Специфика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Влож
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ЗаказОбъект.Ссылка);
	ВыборПоНомеру = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Запрос.Текст =
	"УНИЧТОЖИТЬ ТаблицаТоваров;
	|УНИЧТОЖИТЬ ТаблицаСпецифики;";
	Запрос.Выполнить();
		
	СтрокиЗаказа = Новый Массив;

	Попытка //!!! Станция из перечисления
		Станция = Число(ЗаказОбъект.РабочееМесто.Станция.Код);
	Исключение
		Станция = 0;
	КонецПопытки;
	
	Пока ВыборПоНомеру.Следующий() Цикл
		Если ВыборПоНомеру.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = ВыборПоНомеру.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			//СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
			
			СтрокаЧека.Вставить("sale_place"		, Выборка.МестоРеализации);
			//СтрокаЧека.Вставить("pay_status"		, ?(Выборка.СтатусОплаты=1,1,0));
			
			Если Выборка.СтатусОплаты=1 Тогда
				СтрокаЧека.Вставить("loyality_status"	, Выборка.ЛояльностьСтатус);
				СтрокаЧека.Вставить("action_status"		, Выборка.ЛояльностьСтатусАкции);
				СтрокаЧека.Вставить("action_status_d"	, Выборка.ЛояльностьДопСтатусАкции);
				СтрокаЧека.Вставить("action_group"		, Выборка.ЛояльностьГруппаАкции);
			Иначе
				СтрокаЧека.Вставить("loyality_status"	, 0);
				СтрокаЧека.Вставить("action_status"		, 0);
				СтрокаЧека.Вставить("action_status_d"	, "");
				СтрокаЧека.Вставить("action_group"		, 0);
			КонецЕсли;
			//СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			//СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.Цена);
			СтрокаЧека.Вставить("strsum"			, Выборка.Сумма);
			СтрокаЧека.Вставить("strsum_fact"		, Выборка.Сумма);
			//СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			//СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "CALC");
	Запрос.Вставить("status", 0);
	Запрос.Вставить("protocol_version", 4);
	Запрос.Вставить("station_type", Станция);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
		
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ДанныеЗаказа.Вставить("order_date", ЗаказОбъект.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	
	ДанныеЗаказа.Вставить("card_number"	, ЗаказОбъект.НомерКартыЛояльности);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str", СтрокиЗаказа);
	
	Для Каждого ТекущийКупон ИЗ ЗаказОбъект.Купоны Цикл
		//!!! Фильтр на статус купона
		СтрокаКупонов = Новый Структура;
		СтрокаКупонов.Вставить("code", ТекущийКупон.Купон);
		СтрокаКупонов.Вставить("type", ТекущийКупон.ТипКупона);
		СтрокаКупонов.Вставить("status", ТекущийКупон.СтатусКупона);
		Купоны.Добавить(СтрокаКупонов);
	КонецЦикла;
		
	Запрос.Вставить("coupon_in", Купоны);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;


КонецФункции
	

// Формирование JSON по объекту заказа или структуре
Функция СформироватьJSONДляОткрытияЗаказа_Протокол4(ЗаказОбъект) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Попытка //!!! Станция из перечисления
		Станция = Число(ЗаказОбъект.РабочееМесто.Станция.Код);
	Исключение
		Станция = 0;
	КонецПопытки;
	
	Запрос = Новый Структура;
	
	Запрос.Вставить("request", "OPEN");
	Запрос.Вставить("protocol_version", 4);
	Запрос.Вставить("station_type", Станция);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
		
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ДанныеЗаказа.Вставить("order_date", ЗаказОбъект.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	ДанныеЗаказа.Вставить("card_number"	, ЗаказОбъект.НомерКартыЛояльности);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;


КонецФункции


Функция СформироватьJSONПоВозврату(ТипЗапроса="RETURN", ЗаказОбъект, ТипЗаказаЛояльность=0, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	Возврат СформироватьJSONПоВозврату_Протокол3(ТипЗапроса, ЗаказОбъект, ТипЗаказаЛояльность, СтруктураАСКов, РежимСПУЛ);
	
КонецФункции

Функция СформироватьJSONПоВозврату_Протокол2(ТипЗапроса = "RETURN", ВозвратОбъект, РежимСПУЛ = Ложь, Тест = Ложь) Экспорт

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Результат = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Результат.Вставить("protocol_version", 2);
	
	//Чек.Вставить("debug"	, 1);
	Чек.Вставить("request"	, ТипЗапроса);
	Чек.Вставить("status"	, ВозвратОбъект.ОбработанСистемойЛояльности);
	Чек.Вставить("order"	, СокрЛП(ВозвратОбъект.Номер));
	
	ТТ = НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	Чек.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		ККМ = ВозвратОбъект.ККМрабочегоМеста.КодСУП;
	Иначе
#Если Клиент Тогда 
		ККМ = ПолучитьКодККМИзПараметровРМ();
#Иначе
		ККМ = ВозвратОбъект.ККМрабочегоМеста.КодСУП;
#КонецЕсли
КонецЕсли;

	НомерСмены = ВозвратОбъект.НомерСмены;
	НомерЧека = ВозвратОбъект.НомерЧека;
	Если Тест Тогда
		Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
			НомерСмены = Число(Формат(ВозвратОбъект.Дата, "ДФ=ddHH"));
		КонецЕсли;	
		Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
			//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
			НомерЧека = Число(Прав(СокрЛП(ВозвратОбъект.Номер),3));
		КонецЕсли;
	КонецЕсли;
	
	Чек.Вставить("kkm"			, ККМ);
	Чек.Вставить("chek_num"		, НомерЧека);
	Чек.Вставить("shift"		, НомерСмены);
	
	Если НомерЧека = 0 ИЛИ НомерСмены = 0 ИЛИ ККМ = "" Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ);
	КонецЕсли;	
		
	Чек.Вставить("chek_type"	, 1);
	ДатаВремяЧека = ПолучитьДатуВремяЧека(ВозвратОбъект);
	Чек.Вставить("chek_date"	, Формат(ДатаВремяЧека, "ДФ=dd/MM/yyyy"));
	Чек.Вставить("chek_time"	, Формат(ДатаВремяЧека, "ДФ=HH:mm"));
	Чек.Вставить("mol"			, ВозвратОбъект.Автор.КодДоступа);
	Чек.Вставить("card_number"	, ВозвратОбъект.НомерКартыЛояльности);
	Чек.Вставить("master_card"	, "");
	
	// Таблица чека
	НомерСтроки = 1;
	Для Каждого СтрТов ИЗ ВозвратОбъект.Товары Цикл
		Если СтрТов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЧека = Новый Структура;
		
		СтрокаЧека.Вставить("pozNo"				, СтрТов.ИдСтроки);//НомерСтроки
		СтрокаЧека.Вставить("strType"			, "T");
		СтрокаЧека.Вставить("loyality_status"	, 0);
		СтрокаЧека.Вставить("action_status"		, 0);
		СтрокаЧека.Вставить("action_statusD"	, 0);
		СтрокаЧека.Вставить("product_EAN"		, СтрТов.ШК);
		СтрокаЧека.Вставить("product_code"		, СтрТов.Товар.КодСУП);
		СтрокаЧека.Вставить("product_name"		, СтрТов.Товар.Наименование);
		СтрокаЧека.Вставить("quantity"			, СтрТов.Количество);
		СтрокаЧека.Вставить("price"				, СтрТов.ЦенаРозничная);
		СтрокаЧека.Вставить("price_fact"		, СтрТов.Цена);
		СтрокаЧека.Вставить("strsum"			, СтрТов.СуммаРозничная);
		СтрокаЧека.Вставить("strsum_fact"		, СтрТов.Сумма);//Формат(СтрТов.Сумма, "ЧГ=0;ЧДЦ=2;ЧН=0;ЧРД=."));
		СтрокаЧека.Вставить("PDF"				, СтрТов.ПДФ);
		
		Таблица.Добавить(СтрокаЧека);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Чек.Вставить("chek_str"		, Таблица);
	
	Чек.Вставить("chek_coupon"		, Неопределено);
	Чек.Вставить("coupon_out"		, Неопределено);
	
	МассивОплаты = ПолучитьМассивОплаты(ВозвратОбъект.Ссылка);
	Чек.Вставить("pay"			, МассивОплаты);
	
	Результат.Вставить("chek"	, Чек);
	
	Результат.Вставить("ask"	, Неопределено);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, СформироватьJSON(Результат));
	
	Возврат СтруктураОтвета;
КонецФункции

Функция СформироватьJSONПоВозврату_Протокол3(ТипЗапроса="RETURN", ЗаказОбъект, ТипЗаказаЛояльность=0, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", ТипЗапроса);
	Запрос.Вставить("protocol_version", 3);
	Запрос.Вставить("station_type", 0);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ПарольСервиса_Чеки());
	
	Заказ = Запрос.order;
	Если ТипЗапроса = "SALE" Тогда
		Заказ.Вставить("order_type"	, ТипЗаказаЛояльность);
	КонецЕсли;
	Запрос.Вставить("status", ЗаказОбъект.ОбработанСистемойЛояльности);
	
	ТТ = НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	Заказ.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	Заказ.Вставить("order_date", ЗаказОбъект.Дата);
	Заказ.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	
	Заказ.Вставить("card_number"	, ЗаказОбъект.НомерКартыЛояльности);
	Заказ.Вставить("master_card"	, "");	
	Заказ.Вставить("order_str", Новый Массив);
	
	СтрокиЗаказа = Заказ.order_str;
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
	Иначе
#Если Клиент Тогда
		ККМ = ПолучитьКодККМИзПараметровРМ();
#Иначе
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
#КонецЕсли
	КонецЕсли;
	Если ПустаяСтрока(ККМ) Тогда
		ККМ = "0";
	КонецЕсли;

	//###
	НомерСмены = ЗаказОбъект.НомерСмены;
	Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
		НомерСмены = Число(Формат(ЗаказОбъект.Дата, "ДФ=ddHH"));
	КонецЕсли;
	НомерЧека = ЗаказОбъект.НомерЧека;
	Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
		//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
		НомерЧека = Число(Прав(СокрЛП(ЗаказОбъект.Номер),3));
	КонецЕсли;
	
	//###
	//Если ЗаказОбъект.НомерЧека = 0 ИЛИ ЗаказОбъект.НомерСмены = 0 ИЛИ ККМ = "" Тогда
	//	СтруктураОтвета.Вставить("Ошибка"		, Истина);
	//	СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+ЗаказОбъект.НомерЧека+",НомерСмены="+ЗаказОбъект.НомерСмены+",ККМ="+ККМ);
	//КонецЕсли;
	
	// Таблица чека
	НомерСтроки = 1;
	Для Каждого СтрТов ИЗ ЗаказОбъект.Товары Цикл
		Если СтрТов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЧека = Новый Структура;
		СтрокаЧека.Вставить("str_type"			, "T");
		СтрокаЧека.Вставить("str_no"			, СтрТов.ИдСтроки);
	
		СтрокаЧека.Вставить("kkm"				, ККМ);
		СтрокаЧека.Вставить("check_num"			, НомерЧека);
		СтрокаЧека.Вставить("shift"				, НомерСмены);
		СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
		
		СтрокаЧека.Вставить("pay_status"		, -1);
	
		СтрокаЧека.Вставить("loyality_status"	, 0);//СтрТов.ЛояльностьСтатус);
		СтрокаЧека.Вставить("action_status"		, 0);//СтрТов.ЛояльностьСтатусАкции);
		СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
		СтрокаЧека.Вставить("product_EAN"		, СтрТов.ШК);
		СтрокаЧека.Вставить("product_code"		, СтрТов.Товар.КодСУП);
		СтрокаЧека.Вставить("product_name"		, СтрТов.Товар.Наименование);
		СтрокаЧека.Вставить("quantity"			, СтрТов.Количество);
		СтрокаЧека.Вставить("price"				, СтрТов.Цена);
		СтрокаЧека.Вставить("price_fact"		, СтрТов.Цена);//СтрТов.ЦенаРеализации);
		СтрокаЧека.Вставить("strsum"			, СтрТов.Сумма);
		СтрокаЧека.Вставить("strsum_fact"		, СтрТов.Сумма);//СтрТов.СуммаРеализации);
		СтрокаЧека.Вставить("pdf"				, СтрТов.ПДФ);
		СтрокаЧека.Вставить("str_date"			, СтрТов.ВремяДобавления);
		
		СтрокиЗаказа.Добавить(СтрокаЧека);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	//Для Каждого СтрКуп ИЗ ЗаказОбъект.Купоны Цикл
	//	СтрокаКупонов = Новый Структура;
	//	СтрокаКупонов.Вставить("coupon_code", СтрКуп.Купон);
	//	СтрокаКупонов.Вставить("coupon_txt", "");
	//	Купоны.Добавить(СтрокаКупонов);
	//КонецЦикла;
	//Если ЗаказОбъект.Купоны.Количество() = 0 Тогда
	//	Купоны = Неопределено;
	//КонецЕсли;
	//Чек.Вставить("chek_coupon"		, Купоны);
	//
	//Чек.Вставить("coupon_out"		, Неопределено);
	
	Если ТипЗапроса = "SALE" Тогда
		МассивОплаты = ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
		Заказ.Вставить("pay"			, МассивОплаты);
	КонецЕсли;
	
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;
КонецФункции


Функция СформироватьJSONТестирования(Регион, Проект = 1, ККМ) Экспорт
// Регион 52/77
// Проект 1-МясновЪ/2-Отдохни

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Результат = Новый Структура;
	
	Чек		= Новый Структура;
	
	Результат.Вставить("protocol_version", 2);
	
	//Чек.Вставить("debug"	, 1);
	Чек.Вставить("request"	, "SALE");
	Чек.Вставить("status"	, 0);
	Чек.Вставить("order"	, "тест");
	
	ТТ = НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	Чек.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	Если ККМ = "" Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "ККМ="+ККМ);
	КонецЕсли;	
	
	Чек.Вставить("kkm"			, ККМ);
	Чек.Вставить("chek_num"		, 888);
	Чек.Вставить("shift"		, "888");
	
	Чек.Вставить("chek_type"	, 0);
	Чек.Вставить("chek_date"	, Формат(ТекущаяДата(), "ДФ=dd/MM/yyyy"));
	Чек.Вставить("chek_time"	, Формат(ТекущаяДата(), "ДФ=HH:mm"));
	Чек.Вставить("mol"			, "1");
	Чек.Вставить("card_number"	, Регион + "00000999");
	Чек.Вставить("master_card"	, "");
	
	// Таблица чека
		
	Таблица	= Новый Массив;
	
	СтрокаЧека = Новый Структура;
	
	СтрокаЧека.Вставить("pozNo"				, "тест_1");
	СтрокаЧека.Вставить("strType"			, "T");
	СтрокаЧека.Вставить("loyality_status"	, 0);
	СтрокаЧека.Вставить("action_status"		, 0);
	СтрокаЧека.Вставить("action_statusD"	, "");
	СтрокаЧека.Вставить("product_EAN"		, "");
	СтрокаЧека.Вставить("PDF"				, "");
	
	Если Проект = 1 Тогда
		Если Регион = "52" Тогда
			СтрокаЧека.Вставить("product_code"		, "03030020");
			СтрокаЧека.Вставить("product_name"		, "пельмени МЯСНОВЪ ПО-ЦАРСКИ вес. ДЭМКА");
		Иначе
			СтрокаЧека.Вставить("product_code"		, "03030008");
			СтрокаЧека.Вставить("product_name"		, "пельмени МЯСНОВЪ ПО-ЦАРСКИ вес. Завод МясновЪ");
		КонецЕсли;
		СтрокаЧека.Вставить("quantity"			, 5);
		СтрокаЧека.Вставить("price"				, 100);
		СтрокаЧека.Вставить("price_fact"		, 100);
		СтрокаЧека.Вставить("strsum"			, 500);
		СтрокаЧека.Вставить("strsum_fact"		, 500);
	Иначе
		Если Регион = "52" Тогда
			СтрокаЧека.Вставить("product_code"		, "19010283");
			СтрокаЧека.Вставить("product_name"		, "водка ОТДОХНИ 40% 1.0*6 Хлебная слеза");
		Иначе
			СтрокаЧека.Вставить("product_code"		, "19010037");
			СтрокаЧека.Вставить("product_name"		, "водка ОТДОХНИ 40% 1.0*6 Хлебная слеза");
		КонецЕсли;
		СтрокаЧека.Вставить("quantity"			, 1);
		СтрокаЧека.Вставить("price"				, 900);
		СтрокаЧека.Вставить("price_fact"		, 900);
		СтрокаЧека.Вставить("strsum"			, 900);
		СтрокаЧека.Вставить("strsum_fact"		, 900);
	КонецЕсли;
	
	Таблица.Добавить(СтрокаЧека);
	
	Чек.Вставить("chek_str"		, Таблица);
	
	Чек.Вставить("chek_coupon"	, Неопределено);
	Чек.Вставить("coupon_out"	, Неопределено);
	
	Чек.Вставить("pay"			, Неопределено);
	
	Результат.Вставить("chek"	, Чек);
	
	Результат.Вставить("ask"	, Неопределено);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, СформироватьJSON(Результат));
	
	Возврат СтруктураОтвета;
КонецФункции

Функция СформироватьJSONУдаленияЧека(ЗаказСсылка) Экспорт

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Результат = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Результат.Вставить("protocol_version", 2);
	
	//Чек.Вставить("debug"	, 1);
	Чек.Вставить("request"	, "DELETE");
	Чек.Вставить("status"	, 0);
	Чек.Вставить("order"	, СокрЛП(ЗаказСсылка.Номер));
	
	ТТ = НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	Чек.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	Чек.Вставить("kkm"		, ЗаказСсылка.ККМрабочегоМеста.КодСУП);
	Чек.Вставить("chek_num"	, ЗаказСсылка.НомерЧека);
	Чек.Вставить("shift"	, ЗаказСсылка.НомерСмены);
	
	Если ЗаказСсылка.НомерЧека = 0 ИЛИ ЗаказСсылка.НомерСмены = 0 Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+ЗаказСсылка.НомерЧека+",НомерСмены="+ЗаказСсылка.НомерСмены);
	КонецЕсли;	
		
	Чек.Вставить("chek_type"	, 0);
	
	ДатаВремяЧека = ПолучитьДатуВремяЧека(ЗаказСсылка);
	Чек.Вставить("chek_date"	, Формат(ДатаВремяЧека, "ДФ=dd/MM/yyyy"));
	Чек.Вставить("chek_time"	, Формат(ДатаВремяЧека, "ДФ=HH:mm"));
	Чек.Вставить("mol"			, ЗаказСсылка.Автор.КодДоступа);
	
	Результат.Вставить("chek"	, Чек);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, СформироватьJSON(Результат));
	
	Возврат СтруктураОтвета;
КонецФункции


Функция СформироватьИдентификаторЛояльности(ДанныеЧека, Регион) Экспорт
	Если		Регион = Справочники.Регионы.Р52 Тогда
		Ключ = 520000000000000000;
	ИначеЕсли	Регион = Справочники.Регионы.Р77 Тогда
		Ключ = 770000000000000000;
	Иначе
		Ключ = 10000000000000000;
	КонецЕсли;
	Касса = Число(ДанныеЧека.kkm);
	Смена = ДанныеЧека.shift;
	НомерЧека = ДанныеЧека.chek_num;
	
	Касса =  Касса * 1000000000000;
	Смена =  Смена * 100000000;
	НомерЧека = Ключ + НомерЧека*10000; 
	
	Код = Касса + Смена + НомерЧека;
	
	Возврат Код;
КонецФункции

Функция ПолучитьДатуВремяЧека(ДокументОбъект) Экспорт
	
	ДатаВремяЧека = ДокументОбъект.Дата;
	
	Если ДокументОбъект.Товары.Количество() > 0 Тогда
		ДатаВремяЧека = ДокументОбъект.Товары[0].ВремяДобавления;
	КонецЕсли;
	
	Возврат ДатаВремяЧека;
КонецФункции

Функция НомерТТ(Код) Экспорт
	НомерТТ = Число(Сред(Код, 3)); // вызовет исключение на неправильных кодах. Так и нужно
	стрНомерТТ = Формат(НомерТТ,"ЧГ=0");
	Возврат стрНомерТТ;
КонецФункции

Процедура ОбработатьУдалениеЧека(ЗаказСсылка) Экспорт
	
	Лояльность.ЗаписатьВСПУЛ(ЗаказСсылка);
	Лояльность.ЗапуститьОбработкуСПУЛаЛояльности();
	
КонецПроцедуры

Функция ПроверитьРаботуЛояльности(Регион, Проект, ККМ, ТестовыйРежим = Ложь) Экспорт 
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ЛояльностьРаботает"	, Ложь);
	СтруктураОтвета.Вставить("Текст"				, "");
	
	Логирование(1, "проверка", "начало");
	
	ПараметрыЗапроса = СформироватьJSONТестирования(Регион, Проект, ККМ);
	
	ОтправкаУспешна = Ложь;
	
	Попытка
		Логирование(1, "проверка", "отправка запроса (текст="+ПараметрыЗапроса.ТекстЗапроса+")");
		//ОтветСервера = Лояльность.ОтправитьЧекНаОбработку_Протокол2(ПараметрыЗапроса.ТекстЗапроса, 0, ТестовыйРежим);
		ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол2(ПараметрыЗапроса.ТекстЗапроса, "KKM_STATUS", ТестовыйРежим);
		ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
	Исключение
	КонецПопытки;
	
	Если НЕ ОтправкаУспешна Тогда
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		
		СтруктураОтвета.Вставить("Текст"				, "ошибка отправки (ответ: "+ОписаниеОшибки+")");
		Логирование(1, "проверка", СтруктураОтвета.Текст);
		Возврат СтруктураОтвета;
		
	Иначе	
		Логирование(1, "проверка", "получен ответ:"+ОтветСервера.Ответ);
		
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			СтруктураОтвета.Вставить("Текст"				, "ошибка отправки");
			Логирование(1, "проверка", СтруктураОтвета.Текст);
			Возврат СтруктураОтвета;
		КонецЕсли;
	КонецЕсли;
		
	Чек = Неопределено;
	
	// ПОЛУЧЕНИЕ ОТВЕТА
	ДанныеОтвета = РазборJSON_1С(ОтветСервера.Ответ);
	Логирование(1, "проверка", "распарсен ответ");
	ДанныеОтвета.Свойство("chek", Чек);

	Если Чек.err <> 0 Тогда
		СтруктураОтвета.Вставить("Текст"				, "в ответе ошибка");
		Логирование(1, "проверка", СтруктураОтвета.Текст);
		Возврат СтруктураОтвета;
	КонецЕсли;
	
	Если (Чек.chek_s_kgl_rem > 0) И (Чек.chek_n_kgl_add > 0) Тогда
		СтруктураОтвета.Вставить("ЛояльностьРаботает"	, Истина);
		Возврат СтруктураОтвета;
	Иначе
		СтруктураОтвета.Вставить("Текст"				, "chek_s_kgl_rem="+Чек.chek_s_kgl_rem+", chek_n_kgl_add="+Чек.chek_n_kgl_add);
		Логирование(1, "проверка", СтруктураОтвета.Текст);
		Возврат СтруктураОтвета;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область JSON

Функция РазборJSON_Строка(Знач ТекстJSON) Экспорт
	
	Результат = Новый Структура;
	//+++
	ТекстJSON = СтрЗаменить(ТекстJSON, "\""", "'"); 	// заменим последовательность \" на '
	ТекстJSON = СтрЗаменить(ТекстJSON, "&quot;", "'"); 	// заменим последовательность &quot; на '
	ТекстJSON = СтрЗаменить(ТекстJSON, Символы.ПС, "");
	//ТекстJSON = СтрЗаменить(ТекстJSON, Символы.ВК, "");
	//ТекстJSON = СтрЗаменить(ТекстJSON, Символы.Таб, "");
	//---
	//ТекстJSON = СтрЗаменить(ТекстJSON, """", ""); // а теперь удалим все кавычки
	
	//Результат = РазборJSON_1С(ТекстJSON);
	//Возврат Результат;
	

	Если Лев(ТекстJSON, 1) = "{" Тогда  // начало структуры

		ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, "Структура");

	ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда //начало массива

		МассивДанных = Новый Массив;
		ЗаполнитьДанныеИзОтветаJSON(МассивДанных, ТекстJSON, "Массив");
		Результат.Вставить("Значение", МассивДанных);

	КонецЕсли;

	Возврат Результат;

КонецФункции

Функция РазборJSON(Знач ТекстJSON) Экспорт
	
	Попытка
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(ТекстJSON);
		
		Возврат ПрочитатьJSON(ЧтениеJSON,,,,"РазборJSON_ВосстановлениеЗначения", ЛояльностьКлиентСервер);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура ЗаполнитьДанныеИзОтветаJSON(Результат, ТекстJSON, ТипДанных)

	ТекстJSON = СокрЛП(Сред(ТекстJSON, 2)); // удалим открывающий символ структуры(массива)
	НомерЗначения = 0;

	Пока ТекстJSON <> "" Цикл

		ПервыйСимвол = Лев(ТекстJSON, 1);

		Если ПервыйСимвол = "{" Тогда //вложенная структура

			Значение = Новый Структура;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");

			Если ТипДанных = "Структура" Тогда

				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;

			ИначеЕсли ТипДанных = "Массив" Тогда

				Результат.Добавить(Значение);

			КонецЕсли;

		ИначеЕсли ПервыйСимвол = "[" Тогда //вложенный массив

			Значение = Новый Массив;
			ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");

			Если ТипДанных = "Структура" Тогда

				Результат.Вставить("Значение" + ?(НомерЗначения = 0, "", НомерЗначения), Значение);
				НомерЗначения = НомерЗначения + 1;

			Иначе

				Результат.Добавить(Значение);

			КонецЕсли;

		ИначеЕсли ПервыйСимвол = "}" И ТипДанных = "Структура" Тогда //структура закончилась

			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));

			Если Лев(ТекстJSON, 1) = "," Тогда

				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));

			КонецЕсли;

			Возврат;

		ИначеЕсли ПервыйСимвол = "]" И ТипДанных = "Массив" Тогда //массив закончился

			ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));

			Если Лев(ТекстJSON, 1) = "," Тогда

				ТекстJSON = СокрЛП(Сред(ТекстJSON, 2));

			КонецЕсли;

			Возврат;

		Иначе

			Если ТипДанных = "Структура" Тогда

				Поз = Найти(ТекстJSON, ":");

				Если Поз = 0 Тогда

					Прервать;

				КонецЕсли;

				ИмяЗначения = СокрЛП(Лев(ТекстJSON, Поз - 1));
				ИмяЗначения = СтрЗаменить(ИмяЗначения, """", "");

				ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз+1));
				
				Если Лев(ТекстJSON, 1) = "{" Тогда //значение является структурой

					Значение = Новый Структура;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Структура");

				ИначеЕсли Лев(ТекстJSON, 1) = "[" Тогда //значение является массивом

					Значение = Новый Массив;
					ЗаполнитьДанныеИзОтветаJSON(Значение, ТекстJSON, "Массив");

				Иначе // обычное значение

					ПервыйКавычка = Ложь;
					ПредпоследнийКавычка = Ложь;
					Поз = 0;
					Для Сч = 1 По СтрДлина(ТекстJSON) Цикл
						Символ = Сред(ТекстJSON, Сч, 1);

						Если Символ = """" Тогда

							Если ПервыйКавычка Тогда

								ПредпоследнийКавычка = Истина;

							Иначе
								ПервыйКавычка = Истина;

							КонецЕсли;

						КонецЕсли;

						Если (Символ = "," И ((ПервыйКавычка И ПредпоследнийКавычка) Или (Не ПервыйКавычка И Не ПредпоследнийКавычка))) ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда

							Поз = Сч;

							Прервать;

						КонецЕсли;

					КонецЦикла;

					Если Поз = 0 Тогда

						Значение = ТекстJSON;
						ТекстJSON = "";

					Иначе

						Значение = Лев(ТекстJSON, Поз - 1);
						Если СокрЛП(НРег(Значение)) = "null" Тогда
							Значение =  Неопределено;
						ИначеЕсли СокрЛП(НРег(Значение)) = "false" Тогда
							Значение =  Ложь;
						ИначеЕсли СокрЛП(НРег(Значение)) = "true" Тогда
							Значение =  Истина;
						ИначеЕсли Лев(Значение,1) <> """" И Прав(Значение,1)<>"""" Тогда
							Попытка
								Значение = Число(Значение);
							Исключение
								Значение = СтрЗаменить(Значение, """", "");
								Значение = СтрЗаменить(Значение, "'", "");
							КонецПопытки;
						Иначе
							Значение = СокрЛП(Значение);
							
							Значение = СтрЗаменить(Значение, "'", "");
							Значение = СтрЗаменить(Значение, """", "");
							Значение = СтрЗаменить(Значение, "&#91;", "[");
							Значение = СтрЗаменить(Значение, "&#93;", "]");
							
							//Если ИмяЗначения<>"ID" И ИмяЗначения<>"ККМID" И ИмяЗначения<>"STR" Тогда
							//	Значение = СокрЛП(Значение);
							//КонецЕсли;							
							Если ВРег(Лев(ИмяЗначения, 4)) = "ДАТА" Тогда
								Значение = ДатаВремяСтрокойВДатуВремя(Значение);
							КонецЕсли;
						КонецЕсли;
						
						//ТекстJSON_Строка = Сред(ТекстJSON, Поз + 1);
						
						ТекстJSON = Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0));
						ТекстJSON = СокрЛП(ТекстJSON);
					КонецЕсли;

				КонецЕсли;

				Результат.Вставить(ИмяЗначения, Значение);

			ИначеЕсли ТипДанных = "Массив" Тогда //обычное значение

				Поз = 0;

				Для Сч = 1 По СтрДлина(ТекстJSON) Цикл

					Символ = Сред(ТекстJSON, Сч, 1);

					Если Символ = "," ИЛИ Символ = "]" ИЛИ Символ = "}" Тогда

						Поз = Сч;
						Прервать;

					КонецЕсли;

				КонецЦикла;

				Если Поз = 0 Тогда

					Значение = ТекстJSON;
					ТекстJSON = "";

				Иначе

					Значение = Лев(ТекстJSON, Поз - 1);
					Значение = СтрЗаменить(Значение, """", "");
					ТекстJSON = СокрЛП(Сред(ТекстJSON, Поз + ?(Сред(ТекстJSON, Поз, 1) = ",", 1, 0)));

				КонецЕсли;

				Попытка
					Значение = Число(Значение);
				Исключение
					Значение = СокрЛП(Значение);
				КонецПопытки;

				Результат.Добавить(Значение);

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция РазборJSON_1С(Знач ТекстJSON) Экспорт
	ЧтениеJSON = Новый ЧтениеJSON;
	// Либо открыть файл, из которого будет выполняться чтение, 
	// либо установить строку, из которой будет выполняться чтение.
	//ЧтениеJSON.ОткрытьФайл("ИмяФайла");
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);

	Возврат ПрочитатьJSON(ЧтениеJSON,,,,"РазборJSON_ВосстановлениеЗначения", ЛояльностьКлиентСервер);
КонецФункции

Функция РазборJSON_ВосстановлениеЗначения(Свойство, Значение, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Если Лев(Значение,2) = "\D" Тогда
			Попытка
				Возврат Дата(Сред(Значение, 3));
			Исключение
				Возврат Дата(1,1,1);
			КонецПопытки;
		КонецЕсли;
		
		Значение = СтрЗаменить(Значение, "&quot;", "'");
		Значение = СтрЗаменить(Значение, "&#91;", "[");
		Значение = СтрЗаменить(Значение, "&#93;", "]");
	КонецЕсли;
	Возврат Значение;
КонецФункции

Функция ДатаВремяСтрокойВДатуВремя(ДатаВремяСтрока) Экспорт
	Результат = Дата(1,1,1);
	Попытка
		МассивДатаВремя = РазложитьСтрокуВМассив(ДатаВремяСтрока, " ");
		ДатаСтрока = МассивДатаВремя[0];
		МассивПодстрокДата = РазложитьСтрокуВМассив(ДатаСтрока, "/");
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	Попытка
		ВремяСтрока = МассивДатаВремя[1];
		МассивПодстрокВремя = РазложитьСтрокуВМассив(ВремяСтрока, ":");
		
		Год = МассивПодстрокДата[2];
		Год = ?(СтрДлина(Год)=2, "20", "") + Год;
		Результат = Дата(Год, МассивПодстрокДата[1], МассивПодстрокДата[0], МассивПодстрокВремя[0], МассивПодстрокВремя[1], 0);
		Возврат Результат;
	Исключение		
	КонецПопытки;
	
	Попытка
		Год = МассивПодстрокДата[2];
		Год = ?(СтрДлина(Год)=2, "20", "") + Год;
		Результат = Дата(Год, МассивПодстрокДата[1], МассивПодстрокДата[0]);
		Возврат Результат;
	Исключение		
	КонецПопытки;
	
	Возврат Результат;
КонецФункции



Функция ПолучитьПараметрыФормированияJSON_Протокол2(ФорматДаты=Неопределено, ЭкранироватьДату=Ложь)
	ПараметрыФормирования = Новый Структура;
	Если ФорматДаты=Неопределено Тогда
		ФорматДаты = "dd/MM/yy HH:mm:ss";
	КонецЕсли;
	
	ПараметрыФормирования.Вставить("ФорматДаты", "ДФ='"+ФорматДаты+"'");
	ПараметрыФормирования.Вставить("ЭкранироватьДату", ЭкранироватьДату);
	
	Возврат ПараметрыФормирования;
КонецФункции

Функция ПолучитьПараметрыФормированияJSON_Протокол3(ФорматДаты=Неопределено, ЭкранироватьДату=Истина)
	ПараметрыФормирования = Новый Структура;
	Если ФорматДаты=Неопределено Тогда
		ФорматДаты = "yyyyMMddHHmmss";
	КонецЕсли;
	
	ПараметрыФормирования.Вставить("ФорматДаты", "ДФ='"+ФорматДаты+"'");
	ПараметрыФормирования.Вставить("ЭкранироватьДату", ЭкранироватьДату);
	
	Возврат ПараметрыФормирования;
КонецФункции

Функция СформироватьJSON(Данные, ПараметрыФормирования=Неопределено) Экспорт
	
	Если ПараметрыФормирования = Неопределено Тогда
		ПараметрыФормирования = ПолучитьПараметрыФормированияJSON_Протокол2();
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	//Если Отладка Тогда
	//	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	//Иначе
	//	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	//КонецЕсли;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	//ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеВJSON(ЗаписьJSON, Данные, ПараметрыФормирования);
	
	//ЗаписьJSON.ЗаписатьКонецОбъекта();
	СтрокаJSON = ЗаписьJSON.Закрыть();
		
	Возврат СтрокаJSON;
КонецФункции

Функция СформироватьJSON_Новый(Данные, ПараметрыФормирования=Неопределено) Экспорт
	
	Если ПараметрыФормирования = Неопределено Тогда
		ПараметрыФормирования = ПолучитьПараметрыФормированияJSON_Протокол3();
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	//Если Отладка Тогда
	//	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	//Иначе
	//	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	//КонецЕсли;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	//ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеВJSON(ЗаписьJSON, Данные, ПараметрыФормирования);
	
	//ЗаписьJSON.ЗаписатьКонецОбъекта();
	СтрокаJSON = ЗаписьJSON.Закрыть();
		
	Возврат СтрокаJSON;
КонецФункции

Функция ЗаписатьДанныеВJSON(ЗаписьJSON, Данные, ПараметрыФормирования)
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для каждого ТекущиеДанные Из Данные Цикл
			ЗаписьJSON.ЗаписатьИмяСвойства(ТекущиеДанные.Ключ);
			ЗаписатьДанныеВJSON(ЗаписьJSON, ТекущиеДанные.Значение, ПараметрыФормирования);
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для каждого ТекущиеДанные Из Данные Цикл
			ЗаписатьДанныеВJSON(ЗаписьJSON, ТекущиеДанные, ПараметрыФормирования);
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для каждого ТекущиеДанные Из Данные Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			Для каждого ТекущаяКолонка Из Данные.Колонки Цикл
				ЗаписьJSON.ЗаписатьИмяСвойства(ТекущаяКолонка.Имя);
				ЗаписатьДанныеВJSON(ЗаписьJSON, ТекущиеДанные[ТекущаяКолонка.Имя], ПараметрыФормирования);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
	Иначе
		Если Данные = NULL Тогда
			ЗаписьJSON.ЗаписатьЗначение(Неопределено);
		ИначеЕсли ТипЗнч(Данные) = Тип("Дата") Тогда
			ЗаписьJSON.ЗаписатьЗначение(?(ПараметрыФормирования.ЭкранироватьДату,"\D","") + Формат(Данные, ПараметрыФормирования.ФорматДаты));
		ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
			ДанныеКЗаписи = СтрЗаменить(Данные, "'", "&quot;");
			ДанныеКЗаписи = СтрЗаменить(ДанныеКЗаписи, "[", "&#91;");
			ДанныеКЗаписи = СтрЗаменить(ДанныеКЗаписи, "]", "&#93;");
				
			ЗаписьJSON.ЗаписатьЗначение(ДанныеКЗаписи);
		Иначе
			ЗаписьJSON.ЗаписатьЗначение(Данные);
		КонецЕсли;		
	КонецЕсли;
КонецФункции

Функция СформироватьJSONВСтроку(Данные, ПараметрыФормирования) Экспорт
	Если ПараметрыФормирования = Неопределено ТОгда
		ПараметрыФормирования = Новый Структура;
		ПараметрыФормирования.Вставить("ФорматДаты", "ДФ='dd/MM/yy HH:mm:ss'");
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	
	ЗаписатьДанныеВJSONВСтроку(ЗаписьJSON, Данные, ПараметрыФормирования);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
		
	Возврат СтрокаJSON;
КонецФункции

Функция ЗаписатьДанныеВJSONВСтроку(ЗаписьJSON, Данные, ПараметрыФормирования)
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для каждого ТекущиеДанные Из Данные Цикл
			ЗаписьJSON.ЗаписатьИмяСвойства(ТекущиеДанные.Ключ);
			ЗаписатьДанныеВJSONВСтроку(ЗаписьJSON, ТекущиеДанные.Значение, ПараметрыФормирования);
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для каждого ТекущиеДанные Из Данные Цикл
			ЗаписатьДанныеВJSONВСтроку(ЗаписьJSON, ТекущиеДанные, ПараметрыФормирования);
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для каждого ТекущиеДанные Из Данные Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			Для каждого ТекущаяКолонка Из Данные.Колонки Цикл
				ЗаписьJSON.ЗаписатьИмяСвойства(ТекущаяКолонка.Имя);
				ЗаписатьДанныеВJSONВСтроку(ЗаписьJSON, ТекущиеДанные[ТекущаяКолонка.Имя], ПараметрыФормирования);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
	Иначе
		Если Данные = NULL Тогда
			ЗаписьJSON.ЗаписатьЗначение(Неопределено);
		ИначеЕсли ТипЗнч(Данные) = Тип("Дата") Тогда
			ЗаписьJSON.ЗаписатьЗначение(Формат(Данные, ПараметрыФормирования.ФорматДаты));
		ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
			ДанныеКЗаписи = СтрЗаменить(Данные, "'", "&quot;");
			ЗаписьJSON.ЗаписатьЗначение(ДанныеКЗаписи);
		Иначе
			ЗаписьJSON.ЗаписатьЗначение(Данные);
		КонецЕсли;		
	КонецЕсли;
КонецФункции

Функция ПреобразоватьВJSON(ВхПараметры)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON,ВхПараметры);
	//СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,ВхПараметры,НазначениеТипаXML.Явное);
	ВыхСтрока = ЗаписьJSON.Закрыть();
	Возврат ВыхСтрока;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



















////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// !!! ВЕСЬ ЭТОТ ХЛАМ БУДЕТ УДАЛЕН !!!
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#Область ПолучениеДанных


Функция ПолучитьККМИзПротокола(ДокументСсылка) ЭКСПОРТ
	МассивОплаты = Новый Массив;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколРасчетов.Ссылка КАК Ссылка,
	|	ПротоколРасчетов.ККМ.КодСУП КАК ККМ
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|ГДЕ
	|	ПротоколРасчетов.Заказ = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколРасчетов.Дата УБЫВ";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ВыборкаПротокол = Запрос.Выполнить().Выбрать();
	Если ВыборкаПротокол.Следующий() Тогда
		Возврат ВыборкаПротокол.ККМ;
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПолучитьКодККМ(Ссылка) ЭКСПОРТ
	ККМКодСУП = "";
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Если ЗначениеЗаполнено(Ссылка.КассоваяСмена) Тогда
			ККМКодСУП = Ссылка.КассоваяСмена.Касса.КодСУП;
		КонецЕсли;
		// ???
		//Если ЗначениеЗаполнено(Ссылка.ККМрабочегоМеста) Тогда
		//	ККМКодСУП = Ссылка.ККМрабочегоМеста.КодСУП;
		//КонецЕсли;
	КонецЕсли;
	
	Возврат ККМКодСУП;
КонецФункции	




#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Сервисы


Функция СформироватьJSONПоЗаказу_УДАЛИТЬ(ТипЗапроса="PRESALE", ЗаказОбъект, ТипЗаказаЛояльность=0, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	Возврат СформироватьJSONПоЗаказу_Протокол3(ТипЗапроса, ЗаказОбъект, ТипЗаказаЛояльность, СтруктураАСКов, РежимСПУЛ);
		
КонецФункции

Функция СформироватьJSONПоЗаказу_Протокол3_УДАЛИТЬ(ТипЗапроса="PRESALE", ЗаказОбъект, ТипЗаказаЛояльность=0, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	Если ЗаказОбъект.МестоРеализации = Справочники.МестаРеализации.Ресторан Тогда
		Возврат СформироватьJSONПоЗаказу_КП_Протокол3(ТипЗапроса, ЗаказОбъект, ТипЗаказаЛояльность, , СтруктураАСКов, РежимСПУЛ);
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", ТипЗапроса);
	Запрос.Вставить("protocol_version", 3);
	Запрос.Вставить("station_type", 0);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ПарольСервиса_Чеки());
	
	Заказ = Запрос.order;
	Если ТипЗапроса = "SALE" Тогда
		Заказ.Вставить("order_type"	, ТипЗаказаЛояльность);
	КонецЕсли;
	Запрос.Вставить("status", ЗаказОбъект.ОбработанСистемойЛояльности);
	
	ТТ = НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	Заказ.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	Заказ.Вставить("order_date", ЗаказОбъект.Дата);
	Заказ.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	
	Заказ.Вставить("card_number"	, ЗаказОбъект.НомерКартыЛояльности);
	Заказ.Вставить("master_card"	, "");	
	Заказ.Вставить("order_str", Новый Массив);
	
	СтрокиЗаказа = Заказ.order_str;
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		Если ЗначениеЗаполнено(ЗаказОбъект.ККМрабочегоМеста) Тогда
			ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
		ИначеЕсли ЗначениеЗаполнено(ЗаказОбъект.КассоваяСмена) Тогда
			ККМ = ЗаказОбъект.КассоваяСмена.КассаНомер;
		КонецЕсли;		
	Иначе
#Если Клиент Тогда
		ККМ = ПолучитьКодККМИзПараметровРМ();
#Иначе
		Если ЗначениеЗаполнено(ЗаказОбъект.ККМрабочегоМеста) Тогда
			ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
		ИначеЕсли ЗначениеЗаполнено(ЗаказОбъект.КассоваяСмена) Тогда
			ККМ = ЗаказОбъект.КассоваяСмена.КассаНомер;
		КонецЕсли;
#КонецЕсли
	КонецЕсли;

#Если Сервер Тогда
	Если ТипЗапроса="SALE" Тогда
		ККМПротокола = ПолучитьККМИзПротокола(ЗаказОбъект.Ссылка);
		Если НЕ ПустаяСтрока(ККМПротокола) Тогда
			ККМ = ККМПротокола;
		КонецЕсли;
	КонецЕсли;	
#КонецЕсли

	Если ПустаяСтрока(ККМ) Тогда
		ККМ = "0";
	КонецЕсли;

	//###
	НомерСмены = ЗаказОбъект.НомерСмены;
	//Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
	//	НомерСмены = Число(Формат(ЗаказОбъект.Дата, "ДФ=ddHH"));
	//КонецЕсли;
	НомерЧека = ЗаказОбъект.НомерЧека;
	//Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
	//	//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
	//	НомерЧека = Число(Прав(СокрЛП(ЗаказОбъект.Номер),3));
	//КонецЕсли;
	//###
	
	Если НомерЧека = 0 ИЛИ НомерСмены = 0 ИЛИ ККМ = "" Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ);
	КонецЕсли;
	
	// Таблица чека
	НомерСтроки = 1;
	Для Каждого СтрТов ИЗ ЗаказОбъект.Товары Цикл
		Если СтрТов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЧека = Новый Структура;
		СтрокаЧека.Вставить("str_type"			, "T");
		СтрокаЧека.Вставить("str_no"			, СтрТов.ИдСтроки);
	
		СтрокаЧека.Вставить("kkm"				, ККМ);
		СтрокаЧека.Вставить("check_num"			, НомерЧека);
		СтрокаЧека.Вставить("shift"				, НомерСмены);
		СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
		
		Попытка
			СтрокаЧека.Вставить("pay_status"	, СтрТов.СтатусОплаты);
		Исключение
			СтрокаЧека.Вставить("pay_status"	, -1);
		КонецПопытки;
	
		СтрокаЧека.Вставить("loyality_status"	, СтрТов.ЛояльностьСтатус);
		СтрокаЧека.Вставить("action_status"		, СтрТов.ЛояльностьСтатусАкции);
		СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
		СтрокаЧека.Вставить("product_EAN"		, СтрТов.ШК);
		СтрокаЧека.Вставить("product_code"		, СтрТов.Товар.КодСУП);
		СтрокаЧека.Вставить("product_name"		, СтрТов.Товар.Наименование);
		СтрокаЧека.Вставить("quantity"			, СтрТов.Количество);
		СтрокаЧека.Вставить("price"				, СтрТов.Цена);
		СтрокаЧека.Вставить("price_fact"		, СтрТов.ЦенаРеализации);
		СтрокаЧека.Вставить("strsum"			, СтрТов.Сумма);
		СтрокаЧека.Вставить("strsum_fact"		, СтрТов.СуммаРеализации);
		СтрокаЧека.Вставить("pdf"				, СтрТов.ПДФ);
		СтрокаЧека.Вставить("str_date"			, СтрТов.ВремяДобавления);
		
		СтрокиЗаказа.Добавить(СтрокаЧека);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	//Для Каждого СтрКуп ИЗ ЗаказОбъект.Купоны Цикл
	//	СтрокаКупонов = Новый Структура;
	//	СтрокаКупонов.Вставить("coupon_code", СтрКуп.Купон);
	//	СтрокаКупонов.Вставить("coupon_txt", "");
	//	Купоны.Добавить(СтрокаКупонов);
	//КонецЦикла;
	//Если ЗаказОбъект.Купоны.Количество() = 0 Тогда
	//	Купоны = Неопределено;
	//КонецЕсли;
	//Чек.Вставить("chek_coupon"		, Купоны);
	//
	//Чек.Вставить("coupon_out"		, Неопределено);
	
	Если ТипЗапроса = "SALE" Тогда
		МассивОплаты = ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
		Заказ.Вставить("pay"			, МассивОплаты);
	КонецЕсли;
	
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, СформироватьJSON(Запрос));
	
	Возврат СтруктураОтвета;
КонецФункции

Функция СформироватьJSONПоЗаказу_КП_Протокол3_УДАЛИТЬ(ТипЗапроса="PRESALE", ЗаказОбъект, ТипЗаказаЛояльность=0, ДанныеЛояльностиПоЗаказу=Неопределено, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	ЗапросТЧ = Новый Запрос;
	ЗапросТЧ.Текст = 
	"ВЫБРАТЬ
	|	Влож.НомерСтроки КАК НомерСтроки,
	|	Влож.ИдСтроки КАК ИдСтроки,
	|	Влож.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	Влож.Код КАК Код,
	|	Влож.Количество КАК Количество,
	|	Влож.Цена КАК Цена,
	|	Влож.Сумма КАК Сумма,
	|	Влож.Наименование КАК Наименование,
	|	Влож.Товар КАК Товар,
	|	Влож.Специфика КАК Специфика,
	|	Влож.НомерСтрокиСпец КАК НомерСтрокиСпец,
	|	Влож.ПДФ КАК ПДФ,
	|	Влож.ШК КАК ШК,
	|	Влож.ВремяДобавления КАК ВремяДобавления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|		ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|		NULL КАК ИдСтрокиТовара,
	|		ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|		ЗаказТовары.Количество КАК Количество,
	|		ЗаказТовары.Цена КАК Цена,
	|		ЗаказТовары.Цена * ЗаказТовары.Количество КАК Сумма,
	|		ЗаказТовары.Товар.Наименование КАК Наименование,
	|		ЗаказТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	|		ЗаказТовары.ПДФ КАК ПДФ,
	|		ЗаказТовары.ШК КАК ШК,
	|		ЗаказТовары.ВремяДобавления КАК ВремяДобавления
	|	ИЗ
	|		Документ.Заказ.Товары КАК ЗаказТовары
	|	ГДЕ
	|		ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		И ЗаказТовары.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказСпецифики.НомерСтрокиТовара,
	|		ЗаказСпецифики.ИдСтроки,
	|		ЗаказТовары.ИдСтроки КАК ИдСтрокиТовара,
	|		ЗаказСпецифики.Специфика.Номенклатура.КодСУП,
	|		ЗаказТовары.Количество,
	|		ЗаказСпецифики.Цена,
	|		ЗаказСпецифики.Цена * ЗаказТовары.Количество,
	|		ЗаказСпецифики.Специфика.Наименование,
	|		NULL,
	|		1,
	|		ЗаказСпецифики.НомерСтроки,
	|		"""",
	|		"""",
	|		ЗаказТовары.ВремяДобавления
	|	ИЗ
	|		Документ.Заказ.Специфики КАК ЗаказСпецифики
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ.Товары КАК ЗаказТовары
	|			ПО ЗаказСпецифики.Ссылка = ЗаказТовары.Ссылка
	|				И ЗаказСпецифики.НомерСтрокиТовара = ЗаказТовары.НомерСтроки
	|	ГДЕ
	|		ЗаказСпецифики.Ссылка = &Ссылка
	|		И НЕ ЗаказСпецифики.Специфика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Влож
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки";
	
	ЗапросТЧ.УстановитьПараметр("Ссылка", ЗаказОбъект.Ссылка);
	ВыборПоНомеру = ЗапросТЧ.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокиЗаказа = Новый Массив;
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		Если ЗначениеЗаполнено(ЗаказОбъект.ККМрабочегоМеста) Тогда
			ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
		ИначеЕсли ЗначениеЗаполнено(ЗаказОбъект.КассоваяСмена) Тогда
			ККМ = ЗаказОбъект.КассоваяСмена.КассаНомер;
		КонецЕсли;
	Иначе
	#Если Клиент Тогда
		ККМ = ЛояльностьКлиентСервер.ПолучитьКодККМИзПараметровРМ();
	#Иначе
		Если ЗначениеЗаполнено(ЗаказОбъект.ККМрабочегоМеста) Тогда
			ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
		ИначеЕсли ЗначениеЗаполнено(ЗаказОбъект.КассоваяСмена) Тогда
			ККМ = ЗаказОбъект.КассоваяСмена.КассаНомер;
		КонецЕсли;
	#КонецЕсли
	КонецЕсли;

#Если Сервер Тогда
	Если ТипЗапроса="SALE" Тогда
		ККМПротокола = ПолучитьККМИзПротокола(ЗаказОбъект.Ссылка);
		Если НЕ ПустаяСтрока(ККМПротокола) Тогда
			ККМ = ККМПротокола;
		КонецЕсли;
	КонецЕсли;	
#КонецЕсли

	//###
	// ГОВНОКОД!!! Без него не прожить!!
	Попытка
		Станция = Число(ЗаказОбъект.РабочееМесто.Станция.Код);
	Исключение
		Станция = 0;
	КонецПопытки;
	
	НомерСмены = ЗаказОбъект.НомерСмены;
	//Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
	//	НомерСмены = Число(Формат(ЗаказОбъект.Дата, "ДФ=ddHH"));
	//КонецЕсли;
	НомерЧека = ЗаказОбъект.НомерЧека;
	//Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
	//	//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
	//	НомерЧека = Число(Прав(СокрЛП(ЗаказОбъект.Номер),3));
	//КонецЕсли;
	//Если ПустаяСтрока(ККМ) Тогда
	//	ККМ = "337";
	//КонецЕсли;
	//###
	
	Если НомерЧека = 0 ИЛИ НомерСмены = 0 ИЛИ ККМ = "" Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ);
	КонецЕсли;
	
	Пока ВыборПоНомеру.Следующий() Цикл
		Если ВыборПоНомеру.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = ВыборПоНомеру.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("kkm"				, ККМ);
			СтрокаЧека.Вставить("check_num"			, НомерЧека);
			СтрокаЧека.Вставить("shift"				, НомерСмены);
			СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
			
			СтрокаЧека.Вставить("pay_status"		, -1);
		
			СтрокаЧека.Вставить("loyality_status"	, 0);//СтрТов.ЛояльностьСтатус);
			СтрокаЧека.Вставить("action_status"		, 0);//СтрТов.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.Цена);
			СтрокаЧека.Вставить("strsum"			, Выборка.Сумма);
			СтрокаЧека.Вставить("strsum_fact"		, Выборка.Сумма);
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", ТипЗапроса);
	Запрос.Вставить("protocol_version", 3);
	Запрос.Вставить("station_type", Станция);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	Если ТипЗапроса = "SALE" Тогда
		ДанныеЗаказа.Вставить("order_type"	, ТипЗаказаЛояльность);
	КонецЕсли;
	Запрос.Вставить("status", 0);//Заказ.ОбработанСистемойЛояльности); // В КП нет локального сервиса!!!
	
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ДанныеЗаказа.Вставить("order_date", ЗаказОбъект.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	
#Если Сервер Тогда
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка);
	КонецЕсли;		
#КонецЕсли
		
	НомерКарты = ЗаказОбъект.НомерКартыЛояльности;
	Если Не ПустаяСтрока(НомерКарты) Тогда
		Если ДанныеЛояльностиПоЗаказу<>Неопределено И ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И ДанныеЛояльностиПоЗаказу.Свойство("НомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str", СтрокиЗаказа);
	
	Если ТипЗапроса = "SALE" Тогда
		МассивОплаты = ЛояльностьКлиентСервер.ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
		ДанныеЗаказа.Вставить("pay"			, МассивОплаты);
	КонецЕсли;
	
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON(Запрос));
	
	Возврат СтруктураОтвета;
КонецФункции

Функция СформироватьJSONПоЗаказу_КП_Протокол3_СтараяВерсия(ТипЗапроса="PRESALE", ЗаказОбъект, ТипЗаказаЛояльность=0, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь)
	
		ТипКолво = ПолучитьОписаниеТиповЧисла(10,0);
		ТипСумма = ПолучитьОписаниеТиповЧисла(12,2);
		
		ТаблицаПеревязки=Новый ТаблицаЗначений;	
		ТаблицаПеревязки.Колонки.Добавить("НомерСтроки",ТипКолво);
		ТаблицаПеревязки.Колонки.Добавить("НомерСтрокиСпец",ТипКолво);
		ТаблицаПеревязки.Колонки.Добавить("НПП",ТипКолво);
		ТаблицаПеревязки.Колонки.Добавить("Код",Новый ОписаниеТипов("Строка"));
		ТаблицаПеревязки.Колонки.Добавить("Количество",ТипКолво);
		ТаблицаПеревязки.Колонки.Добавить("Цена",ТипСумма);
		ТаблицаПеревязки.Колонки.Добавить("Сумма",ТипСумма);
		ТаблицаПеревязки.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка"));
		ТаблицаПеревязки.Колонки.Добавить("ИДСтроки",Новый ОписаниеТипов("Строка"));
		ТаблицаПеревязки.Колонки.Добавить("НоваяЦена",ТипСумма);
		ТаблицаПеревязки.Колонки.Добавить("НоваяСумма",ТипСумма);
		ТаблицаПеревязки.Колонки.Добавить("Специфика",ПолучитьОписаниеТиповЧисла(1,0));
		ТаблицаПеревязки.Колонки.Добавить("ПДФ",Новый ОписаниеТипов("Строка"));
		
		СтруктураОтвета = Новый Структура;
		СтруктураОтвета.Вставить("Ошибка"		, Ложь);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "");
		СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
		
		списокТоваровНаВынос = новый СписокЗначений;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказСпецифики.НомерСтрокиТовара как НомерСтроки
		|ИЗ
		|	Документ.Заказ.Специфики КАК ЗаказСпецифики
		|ГДЕ
		|	ЗаказСпецифики.Ссылка = &Ссылка
		|	И ЗаказСпецифики.Специфика.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", "На вынос");
		Запрос.УстановитьПараметр("Ссылка", ЗаказОбъект.Ссылка);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			// Вставить обработку выборки ВыборкаДетальныеЗаписи
			СписокТоваровНаВынос.Добавить(ВыборкаДетальныеЗаписи.НомерСтроки);
		КонецЦикла;
		
		ЗапросТЧ=Новый Запрос;
		ЗапросТЧ.Текст="ВЫБРАТЬ
		               |	Влож.НомерСтроки КАК НомерСтроки,
		               |	Влож.ИдСтроки КАК ИдСтроки,
		               |	Влож.Код КАК Код,
		               |	Влож.Количество КАК Количество,
		               |	Влож.Цена КАК Цена,
		               |	Влож.Сумма КАК Сумма,
		               |	Влож.Наименование КАК Наименование,
		               |	Влож.Товар КАК Товар,
		               |	Влож.Специфика КАК Специфика,
		               |	Влож.НомерСтрокиСпец КАК НомерСтрокиСпец,
		               |	Влож.ПДФ КАК ПДФ
		               |ИЗ
		               |	(ВЫБРАТЬ
		               |		ЗаказТовары.НомерСтроки КАК НомерСтроки,
		               |		ЗаказТовары.ИдСтроки КАК ИдСтроки,
		               |		ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
		               |		ЗаказТовары.Количество КАК Количество,
		               |		ЗаказТовары.Цена КАК Цена,
		               |		ЗаказТовары.Цена * ЗаказТовары.Количество КАК Сумма,
		               |		ЗаказТовары.Товар.Наименование КАК Наименование,
		               |		ЗаказТовары.Товар КАК Товар,
		               |		0 КАК Специфика,
		               |		NULL КАК НомерСтрокиСпец,
		               |		ЗаказТовары.ПДФ КАК ПДФ
		               |	ИЗ
		               |		Документ.Заказ.Товары КАК ЗаказТовары
		               |	ГДЕ
		               |		ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		               |		И ЗаказТовары.Ссылка = &Ссылка
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ЗаказСпецифики.НомерСтрокиТовара,
		               |		ЗаказСпецифики.ИдСтроки,
		               |		ЗаказСпецифики.Специфика.Номенклатура.КодСУП,
		               |		ЗаказТовары.Количество,
		               |		ЗаказСпецифики.Цена,
		               |		ЗаказСпецифики.Цена,
		               |		ЗаказСпецифики.Специфика.Наименование,
		               |		NULL,
		               |		1,
		               |		ЗаказСпецифики.НомерСтроки,
		               |		""""
		               |	ИЗ
		               |		Документ.Заказ.Специфики КАК ЗаказСпецифики
		               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ.Товары КАК ЗаказТовары
		               |			ПО ЗаказСпецифики.Ссылка = ЗаказТовары.Ссылка
		               |				И ЗаказСпецифики.НомерСтрокиТовара = ЗаказТовары.НомерСтроки
		               |	ГДЕ
		               |		ЗаказСпецифики.Ссылка = &Ссылка
		               |		И НЕ ЗаказСпецифики.Специфика.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Влож
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтроки,
		               |	Товар УБЫВ
		               |ИТОГИ
		               |	СУММА(Количество),
		               |	СУММА(Сумма),
		               |	МАКСИМУМ(Товар)
		               |ПО
		               |	НомерСтроки";
		
		ЗапросТЧ.УстановитьПараметр("Ссылка",ЗаказОбъект.Ссылка);
		ВыборПоНомеру=ЗапросТЧ.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		КК=0;
		ТаблицаПеревязки.Очистить(); //очищаем таблицу перевязки
		СтрокиЗаказа = Новый Массив;
		ККМ = "";
		Если РежимСПУЛ Тогда
			ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
		Иначе
	#Если Клиент Тогда
			ККМ = ЛояльностьКлиентСервер.ПолучитьКодККМИзПараметровРМ();
	#Иначе
			ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
	#КонецЕсли
		КонецЕсли;

		//###
		// ГОВНОКОД!!! Без него не прожить!!
		Попытка
			Станция = Число(ЗаказОбъект.РабочееМесто.Станция.Код);
		Исключение
			Станция = 0;
		КонецПопытки;
		НомерСмены = ЗаказОбъект.НомерСмены;
		Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
			НомерСмены = Число(Формат(ЗаказОбъект.Дата, "ДФ=ddHH"));
		КонецЕсли;
		НомерЧека = ЗаказОбъект.НомерЧека;
		Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
			//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
			НомерЧека = Число(Прав(СокрЛП(ЗаказОбъект.Номер),3));
		КонецЕсли;
		Если ПустаяСтрока(ККМ) Тогда
			ККМ = "337";
		КонецЕсли;
		//###
		
		Если НомерЧека = 0 ИЛИ НомерСмены = 0 ИЛИ ККМ = "" Тогда
			СтруктураОтвета.Вставить("Ошибка"		, Истина);
			СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ);
		КонецЕсли;
		
		Пока ВыборПоНомеру.Следующий() Цикл
			Если ВыборПоНомеру.Количество<=0 Тогда
				Продолжить;
			КонецЕсли;	
			Выборка=ВыборПоНомеру.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если списокТоваровНаВынос.НайтиПоЗначению(Выборка.НомерСтроки) = неопределено тогда
					//ищем наличие специфики - на вынос
					наВынос = 0;
				иначе
					наВынос = 1;
				КонецЕсли;
				//пКод = число(сред(Выборка.Код,2));
				
				Количество = Выборка.Количество;
				
				//Если Выборка.специфика = 1 и Выборка.Цена=0 Тогда
				//	Продолжить;
				//КонецЕсли;	
				
				Цена=Выборка.Цена;
				Сумма=Количество*Цена;
				КК=КК+1;
				//Текст.ДобавитьСтроку("T="+КК+","+пКод+",,"+?(Количество=0,1,Количество)+","+Цена+","+Сумма+","+Выборка.Наименование+","+НаВынос);
				СтрТП=ТаблицаПеревязки.Добавить();
				СтрТП.НомерСтроки=Выборка.НомерСтроки;
				СтрТП.НПП=КК;
				СтрТП.Код=Выборка.Код;
				СтрТП.Количество=Количество;
				СтрТП.Цена=Цена;
				СтрТП.Сумма=Сумма;
				СтрТП.Наименование=Выборка.Наименование;
				СтрТП.ИДСтроки=Выборка.ИДСтроки;
				СтрТП.Специфика=Выборка.Специфика;
				СтрТП.НомерСтрокиСпец=Выборка.НомерСтрокиСпец;
				СтрТП.ПДФ=Выборка.ПДФ;
				
				//СтрТов = Заказ.Товары.Найти(Выборка.ИДСтроки, "ИдСтроки");
				
				СтрокаЧека = Новый Структура;
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, КК);
			
				СтрокаЧека.Вставить("kkm"				, ККМ);
				СтрокаЧека.Вставить("check_num"			, НомерЧека);
				СтрокаЧека.Вставить("shift"				, НомерСмены);
				СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
				
				СтрокаЧека.Вставить("pay_status"		, -1);
			
				СтрокаЧека.Вставить("loyality_status"	, 0);//СтрТов.ЛояльностьСтатус);
				СтрокаЧека.Вставить("action_status"		, 0);//СтрТов.ЛояльностьСтатусАкции);
				СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
				СтрокаЧека.Вставить("product_EAN"		, "");//СтрТП.ШК);
				СтрокаЧека.Вставить("product_code"		, СтрТП.Код); //!!! Адовый говнокод
				СтрокаЧека.Вставить("product_name"		, СтрТП.Наименование);
				СтрокаЧека.Вставить("quantity"			, СтрТП.Количество);
				СтрокаЧека.Вставить("price"				, Цена);
				СтрокаЧека.Вставить("price_fact"		, Цена);
				СтрокаЧека.Вставить("strsum"			, Сумма);
				СтрокаЧека.Вставить("strsum_fact"		, Сумма);
				СтрокаЧека.Вставить("pdf"				, СтрТП.ПДФ);
				СтрокаЧека.Вставить("str_date"			, Дата(1,1,1));//СтрТов.ВремяДобавления);//###
				
				СтрокиЗаказа.Добавить(СтрокаЧека);
			КонецЦикла;
		КонецЦикла;		
		
		Запрос = Новый Структура;
		
		Чек		= Новый Структура;
		Купоны	= Новый Массив;
		Таблица	= Новый Массив;
		
		Запрос.Вставить("request", ТипЗапроса);
		Запрос.Вставить("protocol_version", 3);
		Запрос.Вставить("station_type", Станция);
		//Запрос.Вставить("debug", 1);
		//Запрос.Вставить("delay", 1000);
		Запрос.Вставить("order", Новый Структура);
		Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
		
		ДанныеЗаказа = Запрос.order;
		Если ТипЗапроса = "SALE" Тогда
			ДанныеЗаказа.Вставить("order_type"	, ТипЗаказаЛояльность);
		КонецЕсли;
		Запрос.Вставить("status", 0);//Заказ.ОбработанСистемойЛояльности); // В КП нет локального сервиса!!!
		
		ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
		ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
		
		ДанныеЗаказа.Вставить("order_date", ЗаказОбъект.Дата);
		ДанныеЗаказа.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
		
		ДанныеЗаказа.Вставить("card_number"	, ЗаказОбъект.НомерКартыЛояльности);
		ДанныеЗаказа.Вставить("master_card"	, "");	
		ДанныеЗаказа.Вставить("order_str", СтрокиЗаказа);
		
		//СтрокиЗаказа = Заказ.order_str;
		
		// Таблица чека
		//НомерСтроки = 1;
		//Для Каждого СтрТов ИЗ ЗаказОбъект.Товары Цикл
		//	Если СтрТов.Количество <= 0 Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	
		//	СтрокаЧека = Новый Структура;
		//	СтрокаЧека.Вставить("str_type"			, "T");
		//	СтрокаЧека.Вставить("poz_no"			, СтрТов.ИдСтроки);
		//
		//	СтрокаЧека.Вставить("kkm"			, ККМ);
		//	СтрокаЧека.Вставить("check_num"		, НомерЧека);
		//	СтрокаЧека.Вставить("shift"			, НомерСмены);
		//	СтрокаЧека.Вставить("mol"			, ЗаказОбъект.Автор.КодДоступа);
		//	
		//	СтрокаЧека.Вставить("pay_status"		, -1);
		//
		//	СтрокаЧека.Вставить("loyality_status"	, СтрТов.ЛояльностьСтатус);
		//	СтрокаЧека.Вставить("action_status"		, СтрТов.ЛояльностьСтатусАкции);
		//	СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
		//	СтрокаЧека.Вставить("product_EAN"		, СтрТов.ШК);
		//	СтрокаЧека.Вставить("product_code"		, СтрТов.Товар.КодСУП);
		//	СтрокаЧека.Вставить("product_name"		, СтрТов.Товар.Наименование);
		//	СтрокаЧека.Вставить("quantity"			, СтрТов.Количество);
		//	СтрокаЧека.Вставить("price"				, СтрТов.Цена);
		//	СтрокаЧека.Вставить("price_fact"		, СтрТов.ЦенаРеализации);
		//	СтрокаЧека.Вставить("strsum"			, СтрТов.Сумма);
		//	СтрокаЧека.Вставить("strsum_fact"		, СтрТов.СуммаРеализации);
		//	СтрокаЧека.Вставить("pdf"				, СтрТов.ПДФ);
		//	СтрокаЧека.Вставить("str_date"			, СтрТов.ВремяДобавления);
		//	
		//	СтрокиЗаказа.Добавить(СтрокаЧека);
		//	
		//	НомерСтроки = НомерСтроки + 1;
		//	
		//КонецЦикла;
		
		//Для Каждого СтрКуп ИЗ ЗаказОбъект.Купоны Цикл
		//	СтрокаКупонов = Новый Структура;
		//	СтрокаКупонов.Вставить("coupon_code", СтрКуп.Купон);
		//	СтрокаКупонов.Вставить("coupon_txt", "");
		//	Купоны.Добавить(СтрокаКупонов);
		//КонецЦикла;
		//Если ЗаказОбъект.Купоны.Количество() = 0 Тогда
		//	Купоны = Неопределено;
		//КонецЕсли;
		//Чек.Вставить("chek_coupon"		, Купоны);
		//
		//Чек.Вставить("coupon_out"		, Неопределено);
		
		Если ТипЗапроса = "SALE" Тогда
			МассивОплаты = ЛояльностьКлиентСервер.ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
			ДанныеЗаказа.Вставить("pay"			, МассивОплаты);
		КонецЕсли;
		
		//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
		//	СтруктураАСКов = Неопределено;
		//КонецЕсли;
		//Результат.Вставить("ask"	, СтруктураАСКов);
		
		СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON(Запрос));
		
		Возврат СтруктураОтвета;
	КонецФункции

Функция СформироватьJSONПоЗаказу_Протокол2_УДАЛИТЬ(ТипЗапроса = "SALE", ЗаказОбъект, ТипЧекаЛояльность, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Результат = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Результат.Вставить("protocol_version", 2);
	
	//Чек.Вставить("debug"	, 1);
	Чек.Вставить("request"	, ТипЗапроса);
	Чек.Вставить("status"	, ЗаказОбъект.ОбработанСистемойЛояльности);
	Чек.Вставить("order"	, СокрЛП(ЗаказОбъект.Номер));
	
	ТТ = НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	Чек.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
	Иначе
#Если Клиент Тогда
		ККМ = ПолучитьКодККМИзПараметровРМ();
#Иначе
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
#КонецЕсли
	КонецЕсли;
	
	Чек.Вставить("kkm"			, ККМ);
	Чек.Вставить("chek_num"		, ЗаказОбъект.НомерЧека);
	Чек.Вставить("shift"		, ЗаказОбъект.НомерСмены);
	
	Если ЗаказОбъект.НомерЧека = 0 ИЛИ ЗаказОбъект.НомерСмены = 0 ИЛИ ККМ = "" Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+ЗаказОбъект.НомерЧека+",НомерСмены="+ЗаказОбъект.НомерСмены+",ККМ="+ККМ);
	КонецЕсли;	
		
	Чек.Вставить("chek_type"	, ТипЧекаЛояльность);
	ДатаВремяЧека = ПолучитьДатуВремяЧека(ЗаказОбъект);
	Чек.Вставить("chek_date"	, Формат(ДатаВремяЧека, "ДФ=dd/MM/yyyy"));
	Чек.Вставить("chek_time"	, Формат(ДатаВремяЧека, "ДФ=HH:mm"));
	Чек.Вставить("mol"			, ЗаказОбъект.Автор.КодДоступа);
	Чек.Вставить("card_number"	, ЗаказОбъект.НомерКартыЛояльности);
	Чек.Вставить("master_card"	, "");
	
	// Таблица чека
	НомерСтроки = 1;
	Для Каждого СтрТов ИЗ ЗаказОбъект.Товары Цикл
		Если СтрТов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЧека = Новый Структура;
		
		СтрокаЧека.Вставить("pozNo"				, СтрТов.ИдСтроки);//НомерСтроки
		СтрокаЧека.Вставить("strType"			, "T");
		СтрокаЧека.Вставить("loyality_status"	, СтрТов.ЛояльностьСтатус);
		СтрокаЧека.Вставить("action_status"		, СтрТов.ЛояльностьСтатусАкции);
		СтрокаЧека.Вставить("action_statusD"	, СтрТов.ЛояльностьДопСтатусАкции);
		СтрокаЧека.Вставить("product_EAN"		, СтрТов.ШК);
		СтрокаЧека.Вставить("product_code"		, СтрТов.Товар.КодСУП);
		СтрокаЧека.Вставить("product_name"		, СтрТов.Товар.Наименование);
		СтрокаЧека.Вставить("quantity"			, СтрТов.Количество);
		СтрокаЧека.Вставить("price"				, СтрТов.Цена);
		СтрокаЧека.Вставить("price_fact"		, СтрТов.ЦенаРеализации);
		СтрокаЧека.Вставить("strsum"			, СтрТов.Сумма);
		СтрокаЧека.Вставить("strsum_fact"		, СтрТов.СуммаРеализации);
		СтрокаЧека.Вставить("PDF"				, СтрТов.ПДФ);
		
		Таблица.Добавить(СтрокаЧека);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Чек.Вставить("chek_str"		, Таблица);
	
	Для Каждого СтрКуп ИЗ ЗаказОбъект.Купоны Цикл
		СтрокаКупонов = Новый Структура;
		СтрокаКупонов.Вставить("coupon_code", СтрКуп.Купон);
		СтрокаКупонов.Вставить("coupon_txt", "");
		Купоны.Добавить(СтрокаКупонов);
	КонецЦикла;
	Если ЗаказОбъект.Купоны.Количество() = 0 Тогда
		Купоны = Неопределено;
	КонецЕсли;
	Чек.Вставить("chek_coupon"		, Купоны);
	
	Чек.Вставить("coupon_out"		, Неопределено);
	
	Если ТипЧекаЛояльность = 0 Тогда
		МассивОплаты = Неопределено;
	Иначе
		МассивОплаты = ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
	КонецЕсли;
	Чек.Вставить("pay"			, МассивОплаты);
	
	Результат.Вставить("chek"	, Чек);
	
	Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
		СтруктураАСКов = Неопределено;
	КонецЕсли;
	Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, СформироватьJSON(Результат));
	
	Возврат СтруктураОтвета;
КонецФункции


Функция СформироватьJSONПоВозврату_УДАЛИТЬ(ТипЗапроса="RETURN", ЗаказОбъект, ТипЗаказаЛояльность=0, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	Возврат СформироватьJSONПоВозврату_Протокол3_УДАЛИТЬ(ТипЗапроса, ЗаказОбъект, ТипЗаказаЛояльность, СтруктураАСКов, РежимСПУЛ);
	
КонецФункции

Функция СформироватьJSONПоВозврату_Протокол2_УДАЛИТЬ(ТипЗапроса = "RETURN", ВозвратОбъект, РежимСПУЛ = Ложь) Экспорт

	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Результат = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Результат.Вставить("protocol_version", 2);
	
	//Чек.Вставить("debug"	, 1);
	Чек.Вставить("request"	, ТипЗапроса);
	Чек.Вставить("status"	, ВозвратОбъект.ОбработанСистемойЛояльности);
	Чек.Вставить("order"	, СокрЛП(ВозвратОбъект.Номер));
	
	ТТ = НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	Чек.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		ККМ = ВозвратОбъект.ККМрабочегоМеста.КодСУП;
	Иначе
#Если Клиент Тогда 
		ККМ = ПолучитьКодККМИзПараметровРМ();
#Иначе
		ККМ = ВозвратОбъект.ККМрабочегоМеста.КодСУП;
#КонецЕсли
	КонецЕсли;
	
	Чек.Вставить("kkm"			, ККМ);
	Чек.Вставить("chek_num"		, ВозвратОбъект.НомерЧека);
	Чек.Вставить("shift"		, ВозвратОбъект.НомерСмены);
	
	Если ВозвратОбъект.НомерЧека = 0 ИЛИ ВозвратОбъект.НомерСмены = 0 ИЛИ ККМ = "" Тогда
		СтруктураОтвета.Вставить("Ошибка"		, Истина);
		СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+ВозвратОбъект.НомерЧека+",НомерСмены="+ВозвратОбъект.НомерСмены+",ККМ="+ККМ);
	КонецЕсли;	
		
	Чек.Вставить("chek_type"	, 1);
	ДатаВремяЧека = ПолучитьДатуВремяЧека(ВозвратОбъект);
	Чек.Вставить("chek_date"	, Формат(ДатаВремяЧека, "ДФ=dd/MM/yyyy"));
	Чек.Вставить("chek_time"	, Формат(ДатаВремяЧека, "ДФ=HH:mm"));
	Чек.Вставить("mol"			, ВозвратОбъект.Автор.КодДоступа);
	Чек.Вставить("card_number"	, ВозвратОбъект.НомерКартыЛояльности);
	Чек.Вставить("master_card"	, "");
	
	// Таблица чека
	НомерСтроки = 1;
	Для Каждого СтрТов ИЗ ВозвратОбъект.Товары Цикл
		Если СтрТов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЧека = Новый Структура;
		
		СтрокаЧека.Вставить("pozNo"				, СтрТов.ИдСтроки);//НомерСтроки
		СтрокаЧека.Вставить("strType"			, "T");
		СтрокаЧека.Вставить("loyality_status"	, 0);
		СтрокаЧека.Вставить("action_status"		, 0);
		СтрокаЧека.Вставить("action_statusD"	, 0);
		СтрокаЧека.Вставить("product_EAN"		, СтрТов.ШК);
		СтрокаЧека.Вставить("product_code"		, СтрТов.Товар.КодСУП);
		СтрокаЧека.Вставить("product_name"		, СтрТов.Товар.Наименование);
		СтрокаЧека.Вставить("quantity"			, СтрТов.Количество);
		СтрокаЧека.Вставить("price"				, СтрТов.ЦенаРозничная);
		СтрокаЧека.Вставить("price_fact"		, СтрТов.Цена);
		СтрокаЧека.Вставить("strsum"			, СтрТов.СуммаРозничная);
		СтрокаЧека.Вставить("strsum_fact"		, СтрТов.Сумма);//Формат(СтрТов.Сумма, "ЧГ=0;ЧДЦ=2;ЧН=0;ЧРД=."));
		СтрокаЧека.Вставить("PDF"				, СтрТов.ПДФ);
		
		Таблица.Добавить(СтрокаЧека);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Чек.Вставить("chek_str"		, Таблица);
	
	Чек.Вставить("chek_coupon"		, Неопределено);
	Чек.Вставить("coupon_out"		, Неопределено);
	
	МассивОплаты = ПолучитьМассивОплаты(ВозвратОбъект.Ссылка);
	Чек.Вставить("pay"			, МассивОплаты);
	
	Результат.Вставить("chek"	, Чек);
	
	Результат.Вставить("ask"	, Неопределено);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, СформироватьJSON(Результат));
	
	Возврат СтруктураОтвета;
КонецФункции

Функция СформироватьJSONПоВозврату_Протокол3_УДАЛИТЬ(ТипЗапроса="RETURN", ЗаказОбъект, ТипЗаказаЛояльность=0, СтруктураАСКов = Неопределено, РежимСПУЛ = Ложь) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", ТипЗапроса);
	Запрос.Вставить("protocol_version", 3);
	Запрос.Вставить("station_type", 0);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ПарольСервиса_Чеки());
	
	Заказ = Запрос.order;
	Если ТипЗапроса = "SALE" Тогда
		Заказ.Вставить("order_type"	, ТипЗаказаЛояльность);
	КонецЕсли;
	Запрос.Вставить("status", ЗаказОбъект.ОбработанСистемойЛояльности);
	
	ТТ = НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	Заказ.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	Заказ.Вставить("order_date", ЗаказОбъект.Дата);
	Заказ.Вставить("order_number", СокрЛП(ЗаказОбъект.Номер));
	
	Заказ.Вставить("card_number"	, ЗаказОбъект.НомерКартыЛояльности);
	Заказ.Вставить("master_card"	, "");	
	Заказ.Вставить("order_str", Новый Массив);
	
	СтрокиЗаказа = Заказ.order_str;
	
	ККМ = "";
	Если РежимСПУЛ Тогда
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
	Иначе
#Если Клиент Тогда
		ККМ = ПолучитьКодККМИзПараметровРМ();
#Иначе
		ККМ = ЗаказОбъект.ККМрабочегоМеста.КодСУП;
#КонецЕсли
	КонецЕсли;
	Если ПустаяСтрока(ККМ) Тогда
		ККМ = "0";
	КонецЕсли;

	//###
	НомерСмены = ЗаказОбъект.НомерСмены;
	Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
		НомерСмены = Число(Формат(ЗаказОбъект.Дата, "ДФ=ddHH"));
	КонецЕсли;
	НомерЧека = ЗаказОбъект.НомерЧека;
	Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
		//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
		НомерЧека = Число(Прав(СокрЛП(ЗаказОбъект.Номер),3));
	КонецЕсли;
	
	//###
	//Если ЗаказОбъект.НомерЧека = 0 ИЛИ ЗаказОбъект.НомерСмены = 0 ИЛИ ККМ = "" Тогда
	//	СтруктураОтвета.Вставить("Ошибка"		, Истина);
	//	СтруктураОтвета.Вставить("ТекстОшибки"	, "НомерЧека="+ЗаказОбъект.НомерЧека+",НомерСмены="+ЗаказОбъект.НомерСмены+",ККМ="+ККМ);
	//КонецЕсли;
	
	// Таблица чека
	НомерСтроки = 1;
	Для Каждого СтрТов ИЗ ЗаказОбъект.Товары Цикл
		Если СтрТов.Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЧека = Новый Структура;
		СтрокаЧека.Вставить("str_type"			, "T");
		СтрокаЧека.Вставить("str_no"			, СтрТов.ИдСтроки);
	
		СтрокаЧека.Вставить("kkm"				, ККМ);
		СтрокаЧека.Вставить("check_num"			, НомерЧека);
		СтрокаЧека.Вставить("shift"				, НомерСмены);
		СтрокаЧека.Вставить("mol"				, ЗаказОбъект.Автор.КодДоступа);
		
		СтрокаЧека.Вставить("pay_status"		, -1);
	
		СтрокаЧека.Вставить("loyality_status"	, 0);//СтрТов.ЛояльностьСтатус);
		СтрокаЧека.Вставить("action_status"		, 0);//СтрТов.ЛояльностьСтатусАкции);
		СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
		СтрокаЧека.Вставить("product_EAN"		, СтрТов.ШК);
		СтрокаЧека.Вставить("product_code"		, СтрТов.Товар.КодСУП);
		СтрокаЧека.Вставить("product_name"		, СтрТов.Товар.Наименование);
		СтрокаЧека.Вставить("quantity"			, СтрТов.Количество);
		СтрокаЧека.Вставить("price"				, СтрТов.Цена);
		СтрокаЧека.Вставить("price_fact"		, СтрТов.Цена);//СтрТов.ЦенаРеализации);
		СтрокаЧека.Вставить("strsum"			, СтрТов.Сумма);
		СтрокаЧека.Вставить("strsum_fact"		, СтрТов.Сумма);//СтрТов.СуммаРеализации);
		СтрокаЧека.Вставить("pdf"				, СтрТов.ПДФ);
		СтрокаЧека.Вставить("str_date"			, СтрТов.ВремяДобавления);
		
		СтрокиЗаказа.Добавить(СтрокаЧека);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	//Для Каждого СтрКуп ИЗ ЗаказОбъект.Купоны Цикл
	//	СтрокаКупонов = Новый Структура;
	//	СтрокаКупонов.Вставить("coupon_code", СтрКуп.Купон);
	//	СтрокаКупонов.Вставить("coupon_txt", "");
	//	Купоны.Добавить(СтрокаКупонов);
	//КонецЦикла;
	//Если ЗаказОбъект.Купоны.Количество() = 0 Тогда
	//	Купоны = Неопределено;
	//КонецЕсли;
	//Чек.Вставить("chek_coupon"		, Купоны);
	//
	//Чек.Вставить("coupon_out"		, Неопределено);
	
	Если ТипЗапроса = "SALE" Тогда
		МассивОплаты = ПолучитьМассивОплаты(ЗаказОбъект.Ссылка);
		Заказ.Вставить("pay"			, МассивОплаты);
	КонецЕсли;
	
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, СформироватьJSON(Запрос));
	
	Возврат СтруктураОтвета;
КонецФункции


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработкаЗаказаЛояльностью

Процедура ФинализацияЧека(ЗаказОбъект, РежимСПУЛ = Ложь, ЗаписьЛога = "") Экспорт
	
	Лояльность.ФинализацияЧека(ЗаказОбъект, , РежимСПУЛ, ЗаписьЛога);
	//### Остальное удалить
	//ФинализацияЧека_Протокол3(ТипЗапроса, ЗаказОбъект, РежимСПУЛ, ЗаписьЛога);
	
КонецПроцедуры

Процедура ОбработатьВозврат(ВозвратОбъект, РежимСПУЛ = Ложь, ЗаписьЛога = "") Экспорт
	
	Лояльность.ОбработатьВозврат(ВозвратОбъект, РежимСПУЛ, ЗаписьЛога);
	//### Остальное удалить
	//ОбработатьВозврат_Протокол3(ВозвратОбъект, РежимСПУЛ, ЗаписьЛога);

КонецПроцедуры

&НаСервере
Процедура УдалениеЧека(ЗаказСсылка) Экспорт
	
	Лояльность.УдалениеЧека(ЗаказСсылка);
	//### Остальное удалить
	Возврат;
	
	ЗаписьЛога = "";
	
	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"удаление;начало (заказ="+ЗаказСсылка.Номер;
	
	Регион = Лояльность.ПолучитьТекущийРегион();
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = СформироватьJSONУдаленияЧека(ЗаказСсылка);
		
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"удаление;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗаписьЖурналаРегистрации("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ЗаказСсылка, ЗаказСсылка,"ОписаниеОшибки=ошибка формирования JSON");
		
	Иначе
		// 1. в центральный сервис
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"удаление;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			ОтветСервера = Лояльность.ОтправитьЧекНаОбработку(ПараметрыЗапроса.ТекстЗапроса, 0, ЗаказСсылка.РабочееМесто.Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если НЕ ОтправкаУспешна Тогда
		// сервис недоступен или не смог обработать запрос
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ЗаказСсылка, ЗаказСсылка,"ОписаниеОшибки="+ОписаниеОшибки);
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"удаление;ошибка отправки (ответ="+ОписаниеОшибки+")";
		
	Иначе
		// Отправка успешна
		
		Лояльность.УдалитьИзСПУЛа(ЗаказСсылка);
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"удаление;получен ответ=" + ОтветСервера.Ответ;
		
	КонецЕсли;
	
	Логирование(1, "удаление", "результат:"+ЗаписьЛога);
	
КонецПроцедуры

#КонецОбласти

