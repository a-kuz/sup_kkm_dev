#Если НЕ ТонкийКлиент Тогда
      	
// Описание процедуры
//
// Параметры:
//	Параметр1	- описание параметра
//
Процедура БетаВерсия() Экспорт
	
	Текст1="Нет доступа!";
	Текст2="Извините, в текущем релизе функция недоступна...";
	ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
	
КонецПроцедуры

// Процедура запуска интерфейса рабочего места
//
// Параметры:
//	ТекущееРМ	- СправочникСсылка.РабочиеМеста, необязательный, если указано то запускается 
//					в режиме тестирования настроек этого РМ
//
Функция ЗапуститьРабочееМесто(ТекущееРМ=Неопределено) Экспорт
	Если ТекущееРМ=Неопределено Тогда
		Тест = Ложь;
		ПрофильВхода = НРег("\\"+ИмяКомпьютера()+"\"+ИмяПользователя());
		глРабочееМесто = ОбщегоНазначенияПовтИсп.НайтиПоРеквизиту("Справочник.РабочиеМеста", "ПрофильВхода", ПрофильВхода);
		МестоРеализации = глРабочееМесто.МестоРеализации;
	Иначе
		МестоРеализации = ТекущееРМ.МестоРеализации;
		Тест = Истина;
		глРабочееМесто = ТекущееРМ;
	КонецЕсли;
	//:глРабочееМесто = Справочники.РабочиеМеста.ПустаяСсылка();
	
	Лояльность_Версия = РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(глРабочееМесто.МестоРеализации, "Лояльность_Версия");
	Если ЗначениеЗаполнено(Лояльность_Версия) Тогда
		Лояльность.УстановитьПараметрСеанса_ВерсияЛояльности(Лояльность_Версия);	
	КонецЕсли;                                                                      
	
	Если Тест И глРабочееМесто.Тип = Перечисления.ТипыРМ.СтанцияОплатыКМ Тогда
		РаботаСокнами.ShowCaption(0,0);
	КонецЕсли;		
	ОбработкаСкрытия = Обработки.СкрытьМенюИПанели.Создать();
	ОбработкаСкрытия.ПродолжитьЗапускРабочегоМеста = Истина;
	ОбработкаСкрытия.Тест = Тест;
	ОбработкаСкрытия.ПолучитьФорму().Открыть();	
	// Через несколько секунд ОбработкаСкрытия вызовет ПродолжитьЗапускРабочегоМеста()
	Возврат Истина;	
	
КонецФункции

Функция ПродолжитьЗапускРабочегоМеста(Тестирование = Ложь) Экспорт	
	ТекущееРМ = глРабочееМесто;
	МестоРеализации = глРабочееМесто.МестоРеализации;	
	
	Если ТекущееРМ.Тип = Перечисления.ТипыРМ.СтанцияСканирования Тогда
		ГлавнаяФорма = обработки.ГлавнаяФормаСтанцияСканирования.Создать();
	ИначеЕсли ТекущееРМ.Тип = Перечисления.ТипыРМ.СтанцияОплатыКМ Тогда
		ГлавнаяФорма = Обработки.ГлавнаяФормаСтанцияОплатыКМ.Создать();
	ИначеЕсли ТекущееРМ.Тип = Перечисления.ТипыРМ.СтанцияОплатыМОКП Тогда
		ГлавнаяФорма = Обработки.ГлавнаяФормаСтанцияОплатыМОКП.Создать();
	ИначеЕсли ТекущееРМ.Тип = Перечисления.ТипыРМ.СтанцияПовараМОКП Тогда
		ГлавнаяФорма = Обработки.ГлавнаяФормаСтанцияПовараМОКП.Создать();
	ИначеЕсли МестоРеализации = Справочники.МестаРеализации.Ресторан Тогда
		ГлавнаяФорма = Обработки.ГлавнаяФормаРесторан.Создать();
	Иначе
		ГлавнаяФорма = Обработки.ГлавнаяФорма.Создать();
	КонецЕсли;

	Если НЕ ГлавнаяФорма.ИнициализацияРабочегоМеста(?(Тестирование, ТекущееРМ, Неопределено)) Тогда		
		Возврат Ложь;
	КонецЕсли;
	
	глОбработки = Новый Структура;
	глОбработки.Вставить("ГлавнаяФорма", ГлавнаяФорма);
	Если глПараметрыРМ.ЭтоCallЦентр Тогда
		ИмяФормы = "КолЦентр";
	ИначеЕсли глВерсия>1 И глПараметрыРМ.Тип = Перечисления.ТипыРМ.Производство Тогда
		ИмяФормы = "Производство";
	ИначеЕсли глВерсия>1 И глПараметрыРМ.ИнтерфейсТип=1 И ЗначениеЗаполнено(глПараметрыРМ.ПланЗалаСписок) Тогда
		ИмяФормы = "Форма1ПланЗала";
	ИначеЕсли глПараметрыРМ.Тип = Перечисления.ТипыРМ.СтанцияОплаты 
		или глПараметрыРМ.Тип = Перечисления.ТипыРМ.СтанцияСканирования  Тогда
		ПараметрыТО = ПараметрыТО;
		Если ЕстьAutoHotReader(глПараметрыРМ.СписокСУ, ПараметрыТО) Тогда
			ЭмуляторСканера = Обработки.ЭмуляторСканера.Создать();
			ЭмуляторСканера.Suffix = ПараметрыТО.Suffix;
			ЭмуляторСканера.Prefix = ПараметрыТО.Prefix;
			глОбработки.Вставить("ЭмуляторСканера", ЭмуляторСканера);
			ЭмуляторСканера.Инициализация();
			ЭмуляторСканера.Включить();
		КонецЕсли;
		Если ТекущееРМ = Неопределено Тогда
//			РаботаСокнами.ShowCaption(0,0);
		КонецЕсли;
		Если глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда // 800х600
			ИмяФормы = "Форма8";
		Иначе
			ИмяФормы = "Форма9";
		КонецЕсли;
	ИначеЕсли глПараметрыРМ.Тип = Перечисления.ТипыРМ.СтанцияОплатыКМ ИЛИ глПараметрыРМ.Тип = Перечисления.ТипыРМ.СтанцияОплатыМОКП ИЛИ глПараметрыРМ.Тип = Перечисления.ТипыРМ.СтанцияПовараМОКП Тогда
		глПараметрыРМ.ИнтерфейсТип = 9;
		ИмяФормы = "Форма9";
	Иначе
		ИмяФормы = "Форма" + глПараметрыРМ.ИнтерфейсТип;
	КонецЕсли;
	
	ГлавнаяФорма = ГлавнаяФорма.ПолучитьФорму(ИмяФормы);
	ГлавнаяФорма.Открыть();
	
	Если НЕ ГлавнаяФорма.Открыта() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГлавнаяФорма.ДействияПослеОткрытия();
	ПодключитьОбработчикОжидания("глОбработкаОчередиСобытий",10);	
	Возврат Истина;

КонецФункции

// Описание процедуры
//
// Параметры:
//	Параметр1	- описание параметра
//
Процедура ПриОткрытииОкна(Форма) Экспорт
	
	Если глСтекОкон = Неопределено Тогда
		глСтекОкон = Новый Массив;
	КонецЕсли; 
	ЭмуляторСканера = Неопределено;
	Если глОбработки.Свойство("ЭмуляторСканера",ЭмуляторСканера) Тогда
		глОбработки.ЭмуляторСканера.Выключить();
	КонецЕсли;
	
	// при открытии нового окна, текущее делаем недоступным,
	// таким образом, доступным всегда будет только верхнее
	Если глСтекОкон.Количество() > 0 И (Форма.СостояниеОкна <> ВариантСостоянияОкна.Свободное ИЛИ Форма.МодальныйРежим) Тогда
		
		Если глСтекОкон[0].hWnd = 0 Тогда
			// сюда можем попасть при программном открытии нескольких форм подряд (глУправлениеОкнами отработает только для последней формы)
			УстановитьУказательОкна(глСтекОкон[0]);
		КонецЕсли;		
				
	КонецЕсли; 
	
	глСтекОкон.Вставить(0, Новый Структура("Форма, Заголовок, hWnd", Форма, Форма.Заголовок, 0));
	
	глОтсечкаПростоя();
	
	ПодключитьОбработчикОжидания("глУправлениеОкнами", 0.1, Истина);
	
	Если глДопУправлениеФормами <> Неопределено Тогда
		глДопУправлениеФормами.ПриОткрытииОкна(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Убирает заголовок дочернего окна 
Процедура ОбрезкаОкна(Заголовок) Экспорт 
	Попытка
		//:РаботаСокнами = Обработки.РаботаСокнами.Создать();
		//AHK = РаботаСокнами.AHK(Ложь, "ОбрезкаОкна");
		
		////A.ahktextDll("Send {alt down}{shift down}{VK52}{alt up}{shift up} ; Alt+Shift+R");
	//	Скрипт = "
	//	|#NoTrayIcon
	//	|Sleep 300
	//	|Winget, hwnd, id, %Заголовок
	//	|if (!hwnd)
	//	|{ 
	//	|	WinGet, hwnd, id, ahk_class V8NewLocalFrameBaseWnd
	//	|}
	//	|
	//	|if (hwnd) {
	//	|	WinGetPos, X, Y, W, H, ahk_id %hwnd%
	//	|	sW := A_ScreenWidth
	//	|	sH := A_ScreenHeight
	//	|	if (X + W > sW)||(Y + H > sH) {
	//	|	;//	ToolTip % ""X="" . X . ""`n""
	//	|	;//			. ""W="" . W . ""`n""
	//	|	;//			. ""Y="" . Y . ""`n""
	//	|	;//			. ""H="" . H . ""`n""
	//	|	;//			. ""A_ScreenWidt=  "" . A_ScreenWidt   . ""`n""
	//	|	;//			. ""A_ScreenHeight="" . A_ScreenHeight . ""`n""
	//	|		;Send {alt down}{shift down}{VK52}{alt up}{shift up} ; Alt+Shift+R
	//	|		Sleep, 150
	//	|		nX := A_ScreenWidt/2 - W/2
	//	|		nY := A_ScreenHeight/2 - H/2
	//	|		WinMove, ahk_id %hwnd%, A_ScreenHeight, nX, nY
	//	|	}
	//	|}
	//	|";
	//	Скрипт = СтрЗаменить(Скрипт, "%Заголовок", Заголовок);
	//	Скрипт = СтрЗаменить(Скрипт, "%pid", Формат(РаботаСокнами.pid,"ЧГ=0"));
	//	AHK.ahktextDll(Скрипт);

	Исключение
	КонецПопытки;
	//Если глПараметрыРМ.ТениОкон ИЛИ глПараметрыРМ.ОбрезкаОкон Тогда
		
		Попытка
			Скрипт = "
			|#NoTrayIcon
			|SetWinDelay 10
			|Winget, hwnd, id, %Заголовок
			|
			|if (hwnd)
			|{ 
			|	
			|	WinGetPos, X, Y, W, H, ahk_id %hwnd%
			|	If (W>0)
			|	{
			|	WinSet, AlwaysOnTop, on, ahk_id %hwnd%
			|	
			|	cutLeft 	:= 0 ; 4
			|	cutRight 	:= 0 ; 4
			|	cutTop 		:= 0 ; 22
			|	cutBottom 	:= 0 ; 4
			|	;обрезка cutLeft 	:= 4
			|	;обрезка cutRight 	:= 4
			|	;обрезка cutTop 	:= 22
			|	;обрезка cutBottom 	:= 4
			|	nW := W - cutLeft - cutRight
			|	nH := H - cutTop  - cutBottom
			|	;обрезка WinSet, Region, %cutLeft%-%cutTop% W%nW% H%nH%, ahk_id %hwnd%
			|	X  := X + cutLeft
			|	Y  := Y + cutTop
			|	
			|	X_B2 := X + 15
			|	Y_B2 := Y + 20
			|	W_B2 := nW
			|	H_B2 := nH
			|	WS_EX_TRANSPARENT := 0x20
			|	WS_EX_LAYERED := 0x80000
			|	ExStyle := WS_EX_LAYERED|WS_EX_TRANSPARENT
			|	;тень WinGet, mainHwnd, id, ahk_pid %pid ahk_class V8TopLevelFrame
			|
			|	;тень Gui B2: +LastFound +Owner%mainHwnd% -Caption +HwndB2hwnd +ToolWindow +Disabled +E%ExStyle%
			|	;тень Gui B2: Color, 0
			|	;тень WinSet, Transparent, 60
			|	; ;тень WinSet, Bottom, , ahk_id %B2hwnd%
			|	;тень Gui B2: Show, NoActivate W%W_B2% H%H_b2% X%X_B2% Y%Y_B2%  ; NoActivate avoids deactivating the currently active window.
			|   ;тень WinActivate, ahk_id %hwnd%
			|   SetTimer, Hide, -100000
			|   Sleep 1000
			|	WinWaitNotActive, ahk_id %hwnd%
			|	WinSet, AlwaysOnTop, OFF, ahk_id %hwnd%
			|	;тень WinSet, AlwaysOnTop, OFF, ahk_id %B2hwnd%
			|}
			|}
			|
			|Hide:
			|	;тень Gui B2: Destroy
			|   ExitApp
			|return
			|
			|Hide()
			|{
			|	GoSub, Hide	
			|	
			|}
			|";
			Скрипт = СтрЗаменить(Скрипт, "%Заголовок", Заголовок);
			Скрипт = СтрЗаменить(Скрипт, "%pid", Формат(РаботаСокнами.pid,"ЧГ=0"));
			
			//Если глПараметрыРМ.ОбрезкаОкон Тогда
				Скрипт = СтрЗаменить(Скрипт, ";обрезка ","");
			//КонецЕсли;
			Если глПараметрыРМ.ТениОкон Тогда
				Скрипт = СтрЗаменить(Скрипт, ";тень ","");
			КонецЕсли;
			
			AHK = РаботаСокнами.AHK(Ложь, "ОбрезкаОкна");

			//AutohotkeyDll = РаботаСокнами.AHK();
			AHK.ahktextDll(Скрипт);
			//глСтекОкон[0].Вставить("А", AutohotkeyDll);
			
			
		Исключение
		КонецПопытки;
	//Иначе
	//	//РаботаСокнами.AOTon(Заголовок);
	//КонецЕсли;
	ПодключитьОбработчикОжидания("глУбратьЗаголовок",0.1,1);
КонецПроцедуры

// Описание процедуры
//
// Параметры:
//	Параметр1	- описание параметра
//
Процедура ПриЗакрытииОкна() Экспорт
	
	ЭмуляторСканера = Неопределено;
	А = А;
	глСтекОкон[0].Свойство("А", А);
	Если глОбработки = Неопределено Тогда
		глОбработки = Новый Структура;
	КонецЕсли;
	глОбработки.Свойство("ЭмуляторСканера",ЭмуляторСканера);
	
		
	

	// удаляем текущую форму
	глСтекОкон.Удалить(0);
	
	Если глСтекОкон.Количество() = 0 Тогда
		Если Не ЭмуляторСканера = Неопределено Тогда
			глОбработки.ЭмуляторСканера.Выключить();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если НЕ глФлагБлокировка Тогда
		глОтсечкаПростоя();
	КонецЕсли;
	
	Если глСтекОкон.Количество()=1 Тогда
		// возврат в главную форму
		//ГлавнаяФорма = глСтекОкон[0];
		ГлавнаяФорма = глСтекОкон[0].Форма;
		Если ГлавнаяФорма = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ЭмуляторСканера = Неопределено Тогда
			глОбработки.ЭмуляторСканера.Включить();
		КонецЕсли;
		Попытка
			
			
			Если глФлагБлокировка ИЛИ ГлавнаяФорма.ВыполнитьДействияПриВозврате Тогда
				ГлавнаяФорма.ДействияПриВозвратеВФорму();
				//ГлавнаяФорма.Обновить();	// не всегда обновляется надпись пользователь
			КонецЕсли;
			
		Исключение
		КонецПопытки;
		Если Не А = Неопределено Тогда
			Попытка
				А.ahkFunction("Hide");			
			Исключение
			КонецПопытки;		
		КонецЕсли;
				
		
	ИначеЕсли глФлагБлокировка Тогда
		// закрываем следующее окно по цепочке
		глСтекОкон[0].Форма.Закрыть();
		
	КонецЕсли;
	//РаботаСокнами.УбратьЗатемнение();
	//Если глСтекОкон.Количество() > 1 Тогда
	//	ПодключитьОбработчикОжидания("глЗатемнить",0.1,1);
	//КонецЕсли;
КонецПроцедуры

// Стандартный диалог вопросов и предупреждений для интерфейса рабочего места
//
// Параметры:
//	ЗаголовокФормы	- заголовок окна
//	Текст1			- короткое описание события (жирный текст в верхней части окна)
//	Текст2			- детальное описание события (мелкий текст ниже)
//	Кнопка1,2,3		- значения (заголовки) кнопок слева направо, если пусто, то кнопки не будет
//					  если в начале заголовка стоит "Esc=", то значение кнопки будет возвращено при
//					  закрытии окна по Esc или по крестику
//
//	Текст2ГоризонтальноеПоложение	- положение детального описания, по умолчанию по центру
//	РазрешитьВнешнееСобытие			- булево, разрешает обработку внешнего события в форме, по умолчанию ЛОЖЬ
//
// Возвращаемое значение:
//	Строка			- значение нажатой в форме кнопки, или кнопки "Esc="
//
Функция ВопросПредупреждение(ЗаголовокФормы, Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3, 
	Текст2ГоризонтальноеПоложение=Неопределено, РазрешитьВнешнееСобытие=Ложь, Таймаут=0,РазмерШрифта=0,ДанныеДляЖР = Неопределено, АктивнаяКнопка = Неопределено) Экспорт
	
	Перем ОтветПоEsc;
	
	// для совместимости некоторых процедур, предусмотрим вызов не из Рабочего места
	Если НЕ ЗначениеЗаполнено(глРабочееМесто) Тогда
		
		Если Кнопка1="" И Кнопка2="ОК" И Кнопка3="" Тогда
			Предупреждение(Текст1+Символы.ПС+Текст2, Таймаут, ЗаголовокФормы); 
			Возврат "ОК";
		КонецЕсли; 
		
		Возврат "ОК";
	КонецЕсли; 
	
	Если ПустаяСтрока(Кнопка1) И Не ПустаяСтрока(Кнопка3) И Не ПустаяСтрока(Кнопка2) Тогда
		Кнопка1 = Кнопка2;
		Кнопка2 = "";
	КонецЕсли;
	
	Если ПустаяСтрока(Кнопка3) И Не ПустаяСтрока(Кнопка1) Тогда
		Кнопка3 = Кнопка2;
		Кнопка2 = "";
	КонецЕсли;
	
	Если ПустаяСтрока(Текст1) И не ПустаяСтрока(ЗаголовокФормы) Тогда
		Текст1 = ЗаголовокФормы;
		ЗаголовокФормы = "";
	КонецЕсли;
	
	Если ПустаяСтрока(Текст2) И Не ПустаяСтрока(Текст1) И Не ПустаяСтрока(ЗаголовокФормы) Тогда
		Текст2 = Текст1;
		Текст1 = ЗаголовокФормы;		
		ЗаголовокФормы = "";
	КонецЕсли;
	
	Если ВРег(Кнопка2) = "ОК" Или СтрНайти(ЗаголовокФормы, "Ошибка") Тогда
		Если НЕ глРежимКиоск Тогда
			РаботаСокнами.PlayWav();
		КонецЕсли;
	КонецЕсли;
	
	
	обрВопросПредупреждение = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВопросПредупреждение");
	ВопросПредупреждение = обрВопросПредупреждение.Форма();
	Если ВопросПредупреждение = Неопределено Тогда
		ВопросПредупреждение = обрВопросПредупреждение.ПолучитьФорму( "Форма" + глПараметрыРМ.ИнтерфейсТип, , Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ВопросПредупреждение.Заголовок = ЗаголовокФормы;
	ВопросПредупреждение.РазрешитьВнешнееСобытие = РазрешитьВнешнееСобытие;
	
	ЭлементыФормы = ВопросПредупреждение.ЭлементыФормы;
	ЭлементыФормы.Текст1.Заголовок	= Текст1;
	ЭлементыФормы.Текст2.Заголовок	= Текст2;
	
	Если Текст2ГоризонтальноеПоложение<>Неопределено Тогда
		ЭлементыФормы.Текст2.ГоризонтальноеПоложение = Текст2ГоризонтальноеПоложение;
	КонецЕсли;
	//Z+
	Если РазмерШрифта<>0 Тогда
		НовыйШрифт = Новый Шрифт(ЭлементыФормы.Текст2.Шрифт,,РазмерШрифта);
		ЭлементыФормы.Текст2.Шрифт=НовыйШрифт;
	Иначе
		НовыйШрифт = Новый Шрифт(ЭлементыФормы.Текст2.Шрифт,,14);
		ЭлементыФормы.Текст2.Шрифт=НовыйШрифт;
	КонецЕсли;	
	//Z-
	
	Если АктивнаяКнопка = Неопределено Тогда
		АктивнаяКнопка = ?(ЗначениеЗаполнено(Кнопка1),Кнопка1, Кнопка2);
		АктивнаяКнопка = ?(ЗначениеЗаполнено(АктивнаяКнопка),АктивнаяКнопка, Кнопка3);
	Иначе
		ВопросПредупреждение.ТекущийЭлемент = ЭлементыФормы.НеактивнаяКнопкаДляФокуса;
	КонецЕсли;
	Для НомКнопки=1 По 3 Цикл
		
		ТекстКнопки = Вычислить("Кнопка"+НомКнопки);
		Если Лев(ТекстКнопки,4) = "Esc=" Тогда		// при нажатии на "Esc" вернется эта кнопка
			ТекстКнопки = Сред(ТекстКнопки,5);
			ОтветПоEsc = ТекстКнопки;
		КонецЕсли;
		
		Кнопка = ЭлементыФормы["Кнопка"+НомКнопки];
		Если ПустаяСтрока(ТекстКнопки) Тогда
			Кнопка.Видимость = Ложь;
		Иначе
			Кнопка.Видимость = Истина;
			Кнопка.Заголовок = ТекстКнопки;
			Если АктивнаяКнопка = ТекстКнопки Тогда
				ВопросПредупреждение.ТекущийЭлемент = Кнопка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Ответ = ВопросПредупреждение.ОткрытьМодально(Таймаут);
	Ответ = ?(Ответ=Неопределено, ОтветПоEsc, Ответ);
	//Если ДанныеДляЖР <> Неопределено Тогда
		ЗаписьЖурналаРегистрации("Вопрос."+Текст1,,,ДанныеДляЖР,Текст2 + Символы.ПС + "Ответ: " + Ответ);
	//КонецЕсли;
	
	Возврат Ответ;
КонецФункции

// Описание процедуры
//
// Параметры:
//	Параметр1	- описание параметра
//
Процедура Подсказка(ТекстЗаголовка, ТекстСообщения) Экспорт
	
	Подсказка = ИнтерфейсРМ.ПолучитьОбъектОбработки("Подсказка").ПолучитьФорму( "Форма" + глПараметрыРМ.ИнтерфейсТип );
	Подсказка.ТекстЗаголовка = ТекстЗаголовка;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Подсказка.ТекстСообщения = ТекстСообщения;
	Иначе
		Подсказка.ТекстСообщения = "Нет информации";
		Подсказка.ЭлементыФормы.ТекстСообщения.ВертикальноеПоложение	= ВертикальноеПоложение.Центр;
		Подсказка.ЭлементыФормы.ТекстСообщения.ГоризонтальноеПоложение	= ГоризонтальноеПоложение.Центр;		
	КонецЕсли; 
	
	Подсказка.ОткрытьМодально();
	
КонецПроцедуры

// Стандартный диалог ввода чисел и паролей для интерфейса рабочего места
//
// Параметры:
//	ЗаголовокФормы	- заголовок окна
//	ТипЗначения		- строка, "Пароль" для ввода пароля, "Число", "Строка"
//	Длина			- только для чисел и строк
//	Точность		- только для чисел
//	НачЗначение		- начальное значение в форме
//	Кратность		- только для чисел, если не 0, то допустим ввод только кратных значений
//	ВидЗначения		- строка, уточняющий параметр, только для паролей
//
// Возвращаемое значение:
//	Введенное значение. Если отказ от ввода, то Неопределено
//
Функция ВводЧисла(ЗаголовокФормы, ТипЗначения, Длина = 10, Точность = 0, НачЗначение = Неопределено, Кратность = 0, ВидЗначения = "", ЗапретОтмены = Ложь, Маска = "", ИнформацияДисплейГостя=Неопределено,Знач МассивВыбора = Неопределено, МножественныйПодбор = Ложь, МассивПомеченных = Неопределено, ПараметрОповещения = Неопределено) Экспорт
	
	Если ТипЗначения="Пароль" И ВидЗначения="Клиент" И глПараметрыРМ.ЗапретВводаПароляКлиент И
		НЕ (ЗначениеЗаполнено(глПользователь) И ИнтерфейсРМ.ПроверкаПраваДоступа("ИгнорЗапретВводаПаролей")) Тогда
		                   		
		ВводЧисла = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводЧисла").ПолучитьФорму( "ВводПароляСУ" + глПараметрыРМ.ИнтерфейсТип );
		
	Иначе
		
		обрВводЧисла = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводЧисла");
		ВводЧисла = обрВводЧисла.ФормаВвода;
		Если ВводЧисла = Неопределено Тогда
			ВводЧисла = обрВводЧисла.ПолучитьФорму( "Форма" + глПараметрыРМ.ИнтерфейсТип );		
		КонецЕсли;
		
		ВводЧисла.ТипЗначения	= ТипЗначения;
		ВводЧисла.Длина			= Длина;
		ВводЧисла.Точность		= Точность;
		ВводЧисла.ЗначениеВвода	= НачЗначение;
		ВводЧисла.Кратность		= Кратность;
		ВводЧисла.ЗапретОтмены  = ЗапретОтмены;
		
	КонецЕсли;
	
	ВводЧисла.Заголовок = ЗаголовокФормы;
	ВводЧисла.Маска = Маска;
	ВводЧисла.ПараметрОповещения = ПараметрОповещения;
	
	Если МассивВыбора <> Неопределено Тогда
		ВыборИзСписка = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборИзСписка");
		ВыборИзСписка.МассивВыбора			= МассивВыбора;
		ВыборИзСписка.МножественныйПодбор	= МножественныйПодбор;
		ВыборИзСписка.МассивПомеченных   	= МассивПомеченных;
		ВыборИзСписка.ЗаголовокФормы		= "Выбор";
		ВыборИзСписка.ЗаголовокВыбора		= ЗаголовокФормы;
		ФормаВыбора = ВыборИзСписка.ПолучитьФорму("Кнопки9");
		
		//:ФормаВыбора=ПолучитьОбщуюФорму("ВыборПрофиля");
		ФормаВыбора.ВладелецФормы = ВводЧисла;
		//ФормаВыбора.РазрешитьСостояниеПрикрепленное = Истина;
		//ФормаВыбора.РазрешитьСоединятьОкно = Истина;
		//ФормаВыбора.СоединяемоеОкно = Истина;
		//ФормаВыбора.СостояниеОкна = ВариантСостоянияОкна.Прикрепленное;
		ФормаВыбора.ПоложениеОкна = ВариантПоложенияОкна.НеПерекрыватьВладельца;
		
		
		ВводЧисла.ФормаВыбора = ФормаВыбора;
	
	КонецЕсли;
	//:ВводЧисла=обработки.ВводЧисла.ПолучитьФорму();
	Если ПараметрОповещения = Неопределено Тогда
		Результат = ВводЧисла.ОткрытьМодально();
		//МассивПомеченных = ФормаВыбора.МассивПомеченных;
	Иначе
		ВводЧисла.Открыть();
		Результат = Истина;
	КонецЕсли;	
	Возврат Результат;
КонецФункции

// Стандартный диалог ввода чисел и паролей для интерфейса рабочего места
//
// Параметры:
//	ЗаголовокФормы	- заголовок окна
//	ТипЗначения		- строка, "Пароль" для ввода пароля, "Число", "Строка"
//	Длина			- только для чисел и строк
//	Точность		- только для чисел
//	НачЗначение		- начальное значение в форме
//	Кратность		- только для чисел, если не 0, то допустим ввод только кратных значений
//	ВидЗначения		- строка, уточняющий параметр, только для паролей
//
// Возвращаемое значение:
//	Введенное значение. Если отказ от ввода, то Неопределено
//
Функция ВводСтроки(ЗаголовокФормы) Экспорт
	
	ВводСтроки = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводСтроки").ПолучитьФорму("Форма");
	ВводСтроки.Заголовок = ЗаголовокФормы;
	Результат = ВводСтроки.ОткрытьМодально();
	
	Возврат Результат;
КонецФункции

// Диалог авторизации
//
// Параметры:
//	ЗаголовокФормы	- заголовок окна
//	ТипЗначения		- строка, "Пароль" для ввода пароля, "Число", "Строка"
//	Длина			- только для чисел и строк
//	Точность		- только для чисел
//	НачЗначение		- начальное значение в форме
//	Кратность		- только для чисел, если не 0, то допустим ввод только кратных значений
//	ВидЗначения		- строка, уточняющий параметр, только для паролей
//
// Возвращаемое значение:
//	Введенное значение. Если отказ от ввода, то Неопределено
//
Функция Авторизация(ЗаголовокФормы, ТипЗначения, Длина=10, Точность=0, НачЗначение=Неопределено, Кратность=0, ВидЗначения="", ЗапретОтмены = Ложь, ЗапретБыстрогоВыбора = Ложь) Экспорт
	
	Авторизация = ИнтерфейсРМ.ПолучитьОбъектОбработки("Авторизация").ПолучитьФорму( "Форма" + ?(глПараметрыРМ.ИнтерфейсТип=8,8,9) );
	Если Авторизация.Открыта() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Авторизация.ТипЗначения	= ТипЗначения;
	Авторизация.Длина			= Длина;
	Авторизация.Точность		= Точность;
	Авторизация.ЗначениеВвода	= НачЗначение;
	Авторизация.Кратность		= Кратность;
	Авторизация.ЗапретОтмены 	 = ЗапретОтмены;
	Авторизация.ЭлементыФормы.НадписьЗаголовок.Заголовок = ЗаголовокФормы;
	Авторизация.ЗапретБыстрогоВыбора = ЗапретБыстрогоВыбора;	
	Результат = Авторизация.ОткрытьМодально();
	
	Если Результат = "ВыходОС" Тогда
		Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Завершение работы" , "Выключить ККМ?", "Да","","Esc=Нет") <> "Да" Тогда
			Возврат Результат;
		Иначе
			Попытка
				РаботаСокнами.ShutDown();	
			Исключение
				ЗапуститьПриложение("shutdown -s -f -t 20");	
			КонецПопытки;
			
			ПрекратитьРаботуСистемы(Ложь);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;	
КонецФункции

// Стандартный диалог ввода даты для интерфейса рабочего места
//
// Параметры:
//	ЗаголовокФормы	- заголовок окна
//	НачЗначение		- начальное значение в форме
//
// Возвращаемое значение:
//	Введенное значение. Если отказ от ввода, то Неопределено
//
Функция ВводДаты(ЗаголовокФормы, НачЗначение = Неопределено) Экспорт	
	
	ВводДаты = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводДаты").ПолучитьФорму( "Форма" + глПараметрыРМ.ИнтерфейсТип );
	ВводДаты.ЗначениеВвода	= НачЗначение;	
	ВводДаты.Заголовок = ЗаголовокФормы;	
	Результат = ВводДаты.ОткрытьМодально();
	Возврат Результат;
КонецФункции

// Стандартный диалог ввода времени для интерфейса рабочего места
//
// Параметры:
//	ЗаголовокФормы	- заголовок окна
//	НачЗначение		- начальное значение в форме
//
// Возвращаемое значение:
//	Введенное значение. Если отказ от ввода, то Неопределено
//
Функция ВводВремени(ЗаголовокФормы, НачЗначение) Экспорт
	
	ВводВремени = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводВремени").ПолучитьФорму();
	ВводВремени.Заголовок	= ЗаголовокФормы;
	
	Если ТипЗнч(НачЗначение) = Тип("Число") Тогда
		// это не время, а количество минут
		ЧЧ = Цел(НачЗначение/60);
		ММ = НачЗначение - ЧЧ*60;
		ВводВремени.ЗначениеВвода = Дата(1,1,1,ЧЧ,ММ,0);
	Иначе
		ВводВремени.ЗначениеВвода = НачЗначение;
	КонецЕсли;
	
	Результат = ВводВремени.ОткрытьМодально();
	
	Если Результат=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ТипЗнч(НачЗначение) = Тип("Число") Тогда
		// это не время, а количество минут
		Результат = Час(Результат)*60 + Минута(Результат);
	Иначе
		Результат = УстановитьВремяВДате(НачЗначение, Результат);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Стандартный диалог выбора значений из списка
//
// Параметры:
//	ЗаголовокФормы	- заголовок окна
//	МассивВыбора	- массив (или список) значений для выбора
//
// Возвращаемое значение:
//	Выбранное значение. Если отказ от ввода, то Неопределено
//
Функция ВыборИзСписка(Знач МассивВыбора, МножественныйПодбор=Ложь, Знач МассивПомеченных=Неопределено, ЗаголовокФормы = Неопределено, ЗаголовокВыбора = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(МассивВыбора) Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ТипЗнч(МассивВыбора) = Тип("Строка") Тогда
		// в строке описание типа объекта, из которого надо выбрать значение
		// "Справочник.Имя", "Документ.Имя"
		Запрос = Новый Запрос("
		|ВЫБРАТЬ Ссылка ИЗ "+МассивВыбора+"
		|ГДЕ НЕ ПометкаУдаления
		|");
		Выборка	= Запрос.Выполнить().Выбрать();
		МассивВыбора = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивВыбора.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	// для совместимости некоторых процедур, предусмотрим вызов не из Рабочего места
	Если НЕ ЗначениеЗаполнено(глРабочееМесто) Тогда
		
		Если ТипЗнч(МассивВыбора) = Тип("Массив") Тогда
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.ЗагрузитьЗначения( МассивВыбора );
		Иначе
			СписокВыбора = МассивВыбора;
		КонецЕсли;
		
		ВыбЭлемент = СписокВыбора.ВыбратьЭлемент();
		
		Возврат ?(ВыбЭлемент=Неопределено, Неопределено, ВыбЭлемент.Значение);
	КонецЕсли; 
	
	ВыборИзСписка = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборИзСписка");
	ВыборИзСписка.МассивВыбора			= МассивВыбора;
	ВыборИзСписка.МножественныйПодбор	= МножественныйПодбор;
	ВыборИзСписка.МассивПомеченных   	= МассивПомеченных;
	ВыборИзСписка.ЗаголовокФормы		= ЗаголовокФормы;
	ВыборИзСписка.ЗаголовокВыбора		= ЗаголовокВыбора;
	ФормаВыбора = ВыборИзСписка.ПолучитьФорму( ?(глПараметрыРМ.ИнтерфейсТип=0 И глПараметрыРМ.ЗаказМенюВид=0, "Список", "Кнопки"+глПараметрыРМ.ИнтерфейсТип ) );
	
	ВыбЗначение = ФормаВыбора.ОткрытьМодально();
	
	Возврат ВыбЗначение;
КонецФункции

// Стандартный диалог выбора значений из списка
//
// Параметры:
//	ЗаголовокФормы	- заголовок окна
//	МассивВыбора	- массив (или список) значений для выбора
//
// Возвращаемое значение:
//	Выбранное значение. Если отказ от ввода, то Неопределено
//
Функция ВыборПремиальныхТоваров(Знач ТаблицаВыбора, МножественныйПодбор=Ложь, Знач МассивПомеченных=Неопределено, ЗаголовокФормы = Неопределено, ЗаголовокВыбора = Неопределено, АкцииСНаборами) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТаблицаВыбора) Тогда
		Возврат Неопределено;
	КонецЕсли; 	
	
	
	ВыборИзСписка = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборПремиальныхТоваров");
	ВыборИзСписка.ТаблицаВыбора			= ТаблицаВыбора;
	ВыборИзСписка.МножественныйПодбор	= МножественныйПодбор;
	ВыборИзСписка.ЗаголовокФормы		= ЗаголовокФормы;
	ВыборИзСписка.ЗаголовокВыбора		= ЗаголовокВыбора;
	ВыборИзСписка.АкцииСНаборами		= АкцииСНаборами;
	ФормаВыбора = ВыборИзСписка.ПолучитьФорму( "Кнопки0" );
	
	ВыбЗначение = ФормаВыбора.ОткрытьМодально();
	
	Возврат ВыбЗначение;
КонецФункции

// Смена текущего пользователя (авторизация)
//
Процедура СменаПользователя(НовыйПользователь=Неопределено, ЗапретБыстрогоВыбора = Ложь) Экспорт
	
	БылПользователь = глПользователь;
	//глПользователь = ?(НовыйПользователь=Неопределено, ИдентификацияПользователя(), НовыйПользователь);
	ВремПользователь = ?(НовыйПользователь=Неопределено, ИдентификацияПользователя(ЗапретБыстрогоВыбора), НовыйПользователь);
	
	//Если ВремПользователь = БылПользователь Тогда
	Если ВремПользователь = БылПользователь И ЗначениеЗаполнено(БылПользователь) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ВремПользователь) Тогда
		ОбработкаРегистрации = Обработки.РегистрацияКассиров.Создать();
		ОбработкаРегистрации.Сотрудник = ВремПользователь;
		ОбработкаРегистрации.ТипФормы = "Приход";
		РезПроверки = ОбработкаРегистрации.ПроверитьНаРаботе();
		Если РезПроверки = Неопределено Тогда // не на работе
			Форма = ОбработкаРегистрации.ПолучитьФорму("РегистрацияКассиров" + глПараметрыРМ.ИнтерфейсТип);
			РезОбработки = Форма.ОткрытьМодально();
			Если РезОбработки = Неопределено или РезОбработки = Ложь ТОгда
			//Если не РезОбработки Тогда
				глПользователь = Справочники.Сотрудники.ПустаяСсылка();//БылПользователь;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	глПользователь = ВремПользователь;
	
	Если ЗначениеЗаполнено(глПользователь) Тогда
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.АвторизацияОК, глПользователь);
		
		// Автоматическая отметка прихода сотрудника
		Если глВерсия > 1 И глПараметрыРМ.УчетРВАвтоПриходПоАвторизации
			И ЗначениеЗаполнено(глПользователь) И НЕ УчетРабочегоВремени.СотрудникНаРаботе(глПользователь) 
			И ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ОтметитьПриход) Тогда
			
			УчетРабочегоВремени.ОтметитьПриходУход(Истина, глПользователь);
		КонецЕсли;

	Иначе
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.АвторизацияБлокировка, БылПользователь);
	КонецЕсли;
	
КонецПроцедуры

// Идентификация пользователя через стандартный диалог ввода пароля
// Возвращает  ссылку на сотрудника или пустую ссылку, в случае ошибки
//
Функция ИдентификацияПользователя(ЗапретБыстрогоВыбора = Ложь) Экспорт
	
	КодДоступа = Авторизация("АВТОРИЗАЦИЯ", "Пароль",4,,,,"Сотрудник",Истина,ЗапретБыстрогоВыбора);
	
	Если НЕ ЗначениеЗаполнено(КодДоступа) Тогда
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли; 
	
	Если Лев(КодДоступа,14) = "Идентификатор_" Тогда
		ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		ФлагПовтора = Истина;
		Пользователь = ИдентификацияПоКарте( КодДоступа, ТипПривязки, ФлагПовтора);                              
		
	Иначе
		Пользователь = Справочники.Сотрудники.НайтиПоРеквизиту("КодДоступа",КодДоступа);
		
		Если Пользователь.Пустая() Тогда
			Текст1="Нет доступа!";
			Текст2="Неверный код доступа!
			|Повторите ввод...";   
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.АвторизацияОшибка, , "Неверный код доступа. Введен код "+КодДоступа);
			Пользователь = Неопределено;
			
		ИначеЕсли Пользователь.ПометкаУдаления Тогда
			Текст1="Нет доступа!";
			Текст2="Пользователь "+Пользователь+" помечен на удаление!
			|Повторите ввод...";
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.АвторизацияОшибка, Пользователь, "Пользователь "+Пользователь+" помечен на удаление!");
			Пользователь = Неопределено;
			
		ИначеЕсли глПараметрыРМ.ЗапретВводаПароляСотрудник И НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ИгнорЗапретВводаПаролей", ,Пользователь) Тогда
			Текст1="Нет доступа!";
			Текст2="Ручной ввод кода доступа запрещен!
			|Повторите ввод...";
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.АвторизацияОшибка, Пользователь, "Пользователь "+Пользователь+" помечен на удаление!");
			Пользователь = Неопределено;
			
		Иначе
			ЗарегестрироватьСотрудникаВпоследних(Пользователь);
			Возврат Пользователь;
			
		КонецЕсли;
		
		ФлагПовтора = ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"Повтор","","Esc=Отмена") = "Повтор";
		
	КонецЕсли;
	
	Если Пользователь = Неопределено Тогда
		Если ФлагПовтора Тогда
			Возврат ИдентификацияПользователя(ЗапретБыстрогоВыбора);
		Иначе
			Возврат Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли; 
	
	Если глПараметрыРМ.ИнтерфейсТип <> 8 Тогда // Не для TPX
		ЗарегестрироватьСотрудникаВпоследних(Пользователь);	
	КонецЕсли;

	Возврат Пользователь;
КонецФункции

// Возвращает массив из 4-х последних сотрудников
Функция ПоследниеСотрудники() Экспорт
	Возврат глПоследниеСотрудники;	
КонецФункции

Функция ЗарегестрироватьСотрудникаВпоследних(Сотрудник) Экспорт
	//:глПоследниеСотрудники = Новый Массив
	Если Не глПоследниеСотрудники.Количество() Тогда
		глПоследниеСотрудники = Массив(Сотрудник);
		Возврат Истина;
	Иначе
		Позиция = глПоследниеСотрудники.Найти(Сотрудник);
		НовыйМассив = Новый Массив;
		Если Позиция = Неопределено Тогда
			Если глПоследниеСотрудники.Количество() = 4 Тогда
				Случай = ТекущаяУниверсальнаяДатаВМиллисекундах() % 4;		    
				глПоследниеСотрудники[Случай] = Сотрудник;
			Иначе
				глПоследниеСотрудники.Добавить(Сотрудник);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецФункции

// Идентификация клиента
//
Функция ИдентификацияКлиента(КодКлиента=Неопределено, ЗапретПустого=Ложь, БезПодтверждения=Ложь, КартаДоступаКлиента=Неопределено) Экспорт
// < КС_ВДВ -------------------------------------------------------------------- 	
//Было: 
//Функция ИдентификацияКлиента(КодКлиента=Неопределено, ЗапретПустого=Ложь, БезПодтверждения=Ложь) Экспорт

	КартаДоступаКлиента = Неопределено;
	// КС_ВДВ > -------------------------------------------------------------------- 
	
	Если КодКлиента=Неопределено Тогда
		
		Если глПараметрыРМ.ЗаказКлиентВыборИзСписка Тогда
			
			ФормаВыбора = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборКлиента").ПолучитьФорму("Список");
			Если ЗапретПустого Тогда
				ФормаВыбора.ЭлементыФормы.КнопкаУдалить.Видимость = Ложь;
			КонецЕсли;
			
			ФормаВыбора.ОткрытьМодально();
			
			Если ФормаВыбора.ВыборСделан Тогда
				Клиент = ?(БезПодтверждения, ФормаВыбора.Клиент, ПодтверждениеКлиента(ФормаВыбора.Клиент) );
			Иначе
				Клиент = Неопределено;
			КонецЕсли; 
			
			Возврат Клиент;
		КонецЕсли;
		
		КодКлиента = ВводЧисла("Карта ГОСТЯ", "Число",4,,,,"Клиент");
		
		Если КодКлиента=Неопределено Тогда
			Возврат Неопределено;
		ИначеЕсли КодКлиента="" или КодКлиента=0 Тогда
			Возврат ?(ЗапретПустого, Неопределено, Справочники.Клиенты.ПустаяСсылка() );
		КонецЕсли; 
		
	КонецЕсли; 
	
	ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Клиенты");
	ФлагПовтора = Истина;
	// < КС_ВДВ -------------------------------------------------------------------- 
	//Клиент = ИдентификацияПоКарте(КодКлиента, ТипПривязки, ФлагПовтора);
	Клиент = ИдентификацияПоКарте(КодКлиента, ТипПривязки, ФлагПовтора, КартаДоступаКлиента);
	// КС_ВДВ > -------------------------------------------------------------------- 
	
	Если Клиент = Неопределено Тогда
		Если ФлагПовтора Тогда
			// < КС_ВДВ ------------------------------------------------------------ 
			//Возврат ИдентификацияКлиента(,ЗапретПустого);
			Возврат ИдентификацияКлиента(,ЗапретПустого, , КартаДоступаКлиента);
			// КС_ВДВ > ------------------------------------------------------------ 
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ?(БезПодтверждения, Клиент, ПодтверждениеКлиента(Клиент) );
КонецФункции

// Описание функции
//
Функция ПодтверждениеКлиента(Знач Клиент) Экспорт
	
	Если НЕ глПараметрыРМ.ЗаказКлиентПодтверждение ИЛИ НЕ ЗначениеЗаполнено(Клиент) Тогда
		Возврат Клиент;
	КонецЕсли; 
	
	ФормаПодтверждения = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборКлиента","Подтверждение").ПолучитьФорму("Подтверждение");
	ФормаПодтверждения.Клиент = Клиент;
	
	Возврат ?(ФормаПодтверждения.ОткрытьМодально()="ОК", Клиент, Неопределено);
КонецФункции

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ИдентификацияПоКарте(КодДоступа, ТипПривязки=Неопределено, ФлагПовтора=Ложь, КартаДоступаКлиента=Неопределено, Молча = Ложь) Экспорт
// < КС_ВДВ -------------------------------------------------------------------- 	
//Было: 
//Функция ИдентификацияПоКарте(КодДоступа, ТипПривязки=Неопределено, ФлагПовтора=Ложь) Экспорт

	// в параметре КартаДоступаКлиента возвращается считанная карта
	// КС_ВДВ > -------------------------------------------------------------------- 
	
	Перем Текст1, Текст2;
	
	// < КС_ВДВ -------------------------------------------------------------------- 
	КартаДоступаКлиента = Неопределено;
	// КС_ВДВ > -------------------------------------------------------------------- 
	
	Если ТипПривязки = Неопределено Тогда
		ТипПривязки = Новый ОписаниеТипов("СправочникСсылка");
	КонецЕсли; 
	
	Если Лев(КодДоступа,14) = "Идентификатор_" Тогда
		//считали с помощью карт ридера
		КодПоиска = Сред(КодДоступа,15);
		
	//Пошивалов	
	Иначе
		//ввели вручную
		КодПоиска = КодДоступа;
	КонецЕсли;
	
	ДанныеШК = ПроверитьИдентификаторПоШаблонам(КодПоиска, Текст1, Текст2);
	Если Не ДанныеШК = Неопределено Тогда
		Если ДанныеШК.Тип = Справочники.ТипыШаблоновШК.КартаДоступа Тогда
			КартаДоступаКлиента = Справочники.КартыДоступа.НайтиПоРеквизиту("Идентификатор",КодПоиска);
		КонецЕсли;
		Возврат ДанныеШК;
	КонецЕсли;

	Если ТипЗнч(КодПоиска) = Тип("Число") Тогда
		КодПоиска = Формат(КодПоиска, "ЧГ=0"); 
	КонецЕсли;
	
	КартаДоступа = Справочники.КартыДоступа.НайтиПоРеквизиту("Идентификатор",КодПоиска);
	
	Если КартаДоступа.Пустая() Тогда
	//	// попытка поиска карты по значению карты после последнего "=" в идентификаторе
		КодПоискаНовый = СтрЗаменить(КодПоиска,"=",Символы.ПС);
		КартаДоступа = Справочники.КартыДоступа.НайтиПоРеквизиту("Идентификатор",СтрПолучитьСтроку(КодПоискаНовый,СтрЧислоСтрок(КодПоискаНовый)));
		Если КартаДоступа.Пустая() И ТипПривязки.СодержитТип(Тип("СправочникСсылка.Клиенты")) Тогда
			// пробуем найти по всем идентификаторам
			ОбработкаВводКарты = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводКартыКлиента");
			КартаДоступа = ОбработкаВводКарты.ПолучитьКартуДоступаПоИдентификатору(КодПоиска);
			
	//		// надо еще проверить шаблоны
	//		КартаДоступа = ПроверитьИдентификаторПоШаблонам(КодПоиска, Текст1, Текст2);
	//		Если Не КартаДоступа = Неопределено Тогда
	//			Возврат КартаДоступа;
	//		Иначе
	//			КартаДоступа = Справочники.КартыДоступа.ПустаяСсылка();
	//		КонецЕсли;
	//		
		КонецЕсли;
	КонецЕсли;
	//КонецЕсли;
	////Пошивалов	
	////Иначе
	////	КодПоиска = КодДоступа;
	////	КартаДоступа = Справочники.КартыДоступа.НайтиПоКоду(КодПоиска);
	////КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст1) И КартаДоступа.Пустая() Тогда
		// была ошибка при проверке шаблона
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ИдентификацияПоКартеОшибка, , Текст2+" "+КодПоиска);
		
	ИначеЕсли КартаДоступа.Пустая() ИЛИ КартаДоступа.ЭтоГруппа Тогда
		Текст1="Нет доступа!";
		Текст2="Карта доступа не распознана!"; 
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ИдентификацияПоКартеОшибка, , Текст2+" "+КодПоиска);
		
	ИначеЕсли КартаДоступа.ПометкаУдаления Тогда
		Текст1="Нет доступа!";
		Текст2="Карта доступа помечена на удаление!";
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ИдентификацияПоКартеОшибка, КартаДоступа, Текст2);
		
	ИначеЕсли КартаДоступа.Блокировка Тогда
		Текст1="Карта заблокирована!";
		Текст2=КартаДоступа.Комментарий;
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ИдентификацияПоКартеОшибка, КартаДоступа, Текст1+" "+Текст2);
		
	ИначеЕсли ЗначениеЗаполнено(КартаДоступа.Дата1) И ТекущаяДата() < КартаДоступа.Дата1 ИЛИ
		ЗначениеЗаполнено(КартаДоступа.Дата2) И ТекущаяДата() > КартаДоступа.Дата2 Тогда
		Текст1="Нет доступа!";
		Текст2="Период действия карты ограничен!";
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ИдентификацияПоКартеОшибка, КартаДоступа, Текст2);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(КартаДоступа.Привязка) Тогда
		//Текст1="Нет доступа!";
		//Текст2="Карта ни к чему не привязана!";
		//ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ИдентификацияПоКартеОшибка, КартаДоступа, Текст2);
		КартаДоступаКлиента = КартаДоступа;
		Возврат Справочники.Клиенты.ПоУмолчанию;
		
	ИначеЕсли НЕ ТипПривязки.СодержитТип( ТипЗнч(КартаДоступа.Привязка) ) Тогда
		// отработка возможной привязки клиента через другие ссылки
		Если ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Клиенты") И 
			Метаданные.НайтиПоТипу(ТипЗнч(КартаДоступа.Привязка)).Реквизиты.Найти("Клиент") <> Неопределено Тогда
			
			Клиент = КартаДоступа.Привязка.Клиент;
			Если НЕ Клиент.Пустая() Тогда
				// < КС_ВДВ -------------------------------------------------------------------- 
				КартаДоступаКлиента = КартаДоступа;
				// КС_ВДВ > ------------------------------------------------------------ 
				Возврат Клиент;
			КонецЕсли;
			
		КонецЕсли;
		
		Текст1="Нет доступа!";
		Текст2="Карта доступа другого вида!";
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ИдентификацияПоКартеОшибка, КартаДоступа, Текст2);
		
	Иначе
		// < КС_ВДВ -------------------------------------------------------------------- 
		КартаДоступаКлиента = КартаДоступа;
		// КС_ВДВ > ------------------------------------------------------------ 
		Возврат КартаДоступа.Привязка;
		
	КонецЕсли;
	
	Если ФлагПовтора Тогда
		ФлагПовтора = ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"Повтор","","Esc=Отмена") = "Повтор";
	ИначеЕсли Не Молча Тогда;
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
	КонецЕсли; 
	
	Возврат Неопределено;
КонецФункции

// Описание функции
//
Функция ПроверитьИдентификаторПоШаблонам(КодПоиска, Текст1, Текст2) Экспорт
	РаботаСокнами = РаботаСокнами;
	RegExp = ирПлатформа.RegExp;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ШаблоныШК.Шаблон,
	|	ШаблоныШК.Тип
	|ИЗ
	|	Справочник.ШаблоныШК КАК ШаблоныШК
	|ГДЕ
	|	НЕ ШаблоныШК.ПометкаУдаления");
	Выб = Запрос.Выполнить().Выбрать();
	
	Пока Выб.Следующий() Цикл
		
		RegExp.Pattern = Выб.Шаблон;
		Matches = RegExp.Execute(КодПоиска);
		Если Matches.Count >= 1 Тогда
			SubMatches = Matches.Item(0).SubMatches;
			Если SubMatches.Count >= 1 Тогда
				Возврат Новый Структура("Тип, Значение", Выб.Тип, SubMatches.Item(0));		
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Текст1="Ошибка ШК";
	Текст2="Штрихкод " + КодПоиска + " не распознан!";
	Возврат Неопределено;
КонецФункции

// Описание процедуры
//
// Параметры:
//	Параметр1	- описание параметра
//
Процедура ЗаписьСобытия(СобытиеСсылка, Данные=Неопределено, Парам1="", Парам2="", Парам3="", Парам4="", Парам5="") Экспорт
	
	Перем Пользователь, Комментарий;
	
	// может вызываться при фоновой загрузке заказа при неопределенных параметрах РМ
	Если НЕ ЗначениеЗаполнено(глРабочееМесто) Тогда
		Возврат;
	КонецЕсли; 
	
	Событие = глТаблицаСобытий.Найти(СобытиеСсылка.Код, "Код");
	Если Событие = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Пользователь = ?(ЗначениеЗаполнено(глПользователь), глПользователь.Наименование, "");
	Попытка
		Комментарий = Вычислить(Событие.Комментарий);
	Исключение
	КонецПопытки;
		
	ОбъектМетаданных = ?(Данные=Неопределено, Неопределено, Данные.Метаданные() );
	
	ЗаписьЖурналаРегистрации(Событие.Событие, Событие.Уровень, ОбъектМетаданных, Данные, Комментарий);
	
КонецПроцедуры

// Заполняет таблицу событий
//
Процедура ЗаполнитьТаблицуСобытий() Экспорт
	
	глТаблицаСобытий = Новый ТаблицаЗначений;
	глТаблицаСобытий.Колонки.Добавить("Код"			,Новый ОписаниеТипов("Число"));
	глТаблицаСобытий.Колонки.Добавить("Событие"		,Новый ОписаниеТипов("Строка"));
	глТаблицаСобытий.Колонки.Добавить("Уровень"		,Новый ОписаниеТипов("УровеньЖурналаРегистрации"));
	глТаблицаСобытий.Колонки.Добавить("Комментарий"	,Новый ОписаниеТипов("Строка"));
	глТаблицаСобытий.Колонки.Добавить("ИмяПарам1"	,Новый ОписаниеТипов("Строка"));
	глТаблицаСобытий.Колонки.Добавить("ИмяПарам2"	,Новый ОписаниеТипов("Строка"));
	глТаблицаСобытий.Колонки.Добавить("ИмяПарам3"	,Новый ОписаниеТипов("Строка"));
	глТаблицаСобытий.Колонки.Добавить("ИмяПарам4"	,Новый ОписаниеТипов("Строка"));
	глТаблицаСобытий.Колонки.Добавить("ИмяПарам5"	,Новый ОписаниеТипов("Строка"));
	
	Таб = Справочники.События.ПолучитьМакет("ТаблицаСобытий");
	
	Для НомСтр=3 По Таб.ВысотаТаблицы Цикл
		
		Если ПустаяСтрока( Таб.Область(НомСтр,1).Текст ) Тогда
			Продолжить;
		КонецЕсли;
		
		КодСобытия	= Число(Таб.Область(НомСтр,1).Текст);
		СобытиеСпр	= Справочники.События.НайтиПоКоду(КодСобытия);
		
		КодУровня	= Таб.Область(НомСтр,4).Текст;
		Если КодУровня = "1" Тогда
			Уровень = УровеньЖурналаРегистрации.Информация;
		ИначеЕсли КодУровня = "2" Тогда
			Уровень = УровеньЖурналаРегистрации.Ошибка;
		ИначеЕсли КодУровня = "3" Тогда
			Уровень = УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли КодУровня = "4" Тогда
			Уровень = УровеньЖурналаРегистрации.Примечание;
		Иначе
			Уровень = Неопределено;
		КонецЕсли; 
		
		// преобразование комментария из шаблона к выражению для функции Вычислить()
		Комментарий	= Шаблон2Выражение( Таб.Область(НомСтр,5).Текст );
		
		Событие = глТаблицаСобытий.Добавить();
		Событие.Код			= КодСобытия;
		Событие.Событие		= ?(НЕ СобытиеСпр.Пустая(), СтрЗаменить(СобытиеСпр.ПолноеНаименование(),"/","."), Таб.Область(НомСтр,2).Текст +"."+ Таб.Область(НомСтр,3).Текст);
		Событие.Уровень		= Уровень;
		Событие.Комментарий	= Комментарий;
		Событие.ИмяПарам1	= Таб.Область(НомСтр,6).Текст;
		Событие.ИмяПарам2	= Таб.Область(НомСтр,7).Текст;
		Событие.ИмяПарам3	= Таб.Область(НомСтр,8).Текст;
		Событие.ИмяПарам4	= Таб.Область(НомСтр,9).Текст;
		Событие.ИмяПарам5	= Таб.Область(НомСтр,10).Текст;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверка предопределенного ограничения права по статусу 
//
Функция ПравоПоСтатусуОграничено(Право, Статус) Экспорт
	
	СтатусыОграничения	= Справочники.НаборыПравДоступа.СоответствияПредопределенныхОграниченийПравПоСтатусам().Получить(Право);
	
	Возврат НЕ (СтатусыОграничения = Неопределено ИЛИ СтатусыОграничения.Найти(Статус) = Неопределено);
	
КонецФункции	

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ПроверкаПраваДоступа(Знач ПравоДоступа, ВыводПредупреждения=Ложь, Знач Пользователь=Неопределено, АвторЗаказа=Неопределено, Знач Статус=Неопределено) Экспорт
	
	Если ТипЗнч(ПравоДоступа) = Тип("Строка") Тогда
		ПравоДоступа = ПланыВидовХарактеристик.ПраваДоступа[ПравоДоступа];
	КонецЕсли; 
	
	Если Пользователь=Неопределено Тогда
		Пользователь = глПользователь;
	КонецЕсли;
	
	Если глВерсия = 3 Тогда
		Если Статус=Неопределено Тогда
			Статус = Перечисления.СтатусыДоставки.ПустаяСсылка();
		ИначеЕсли ПравоПоСтатусуОграничено(ПравоДоступа, Статус) Тогда
			Если ВыводПредупреждения Тогда
				Текст1="Недостаточно прав!";
				Текст2="Отказано в праве доступа:
				|"""+ПравоДоступа.Наименование+"""";
				ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			КонецЕсли; 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	СтрокаТЧ = Пользователь.ПраваДоступа.Найти(глПараметрыРМ.МестоРеализации, "МестоРеализации");
	
	Если СтрокаТЧ = Неопределено Тогда
		ЗначениеПрава = Ложь;
		
	Иначе
		НаборПрав = СтрокаТЧ.НаборПрав;
		
		Если НаборПрав.ПолныйДоступ Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если глВерсия = 3 Тогда
			Отбор = Новый Структура("НаборПрав,ПравоДоступа,Статус", НаборПрав, ПравоДоступа, Статус);
		Иначе
			Отбор = Новый Структура("НаборПрав,ПравоДоступа", НаборПрав, ПравоДоступа);
		КонецЕсли;
		
		ЗначениеПрава = РегистрыСведений.ПраваДоступа.Получить(Отбор).Значение;
		
		Если ТипЗнч(ЗначениеПрава) <> Тип("Булево") Тогда
			// права в заказе
			Если ЗначениеПрава = Перечисления.ТипыПравДоступаВЗаказе.Нет ИЛИ ЗначениеПрава = Неопределено Тогда
				ЗначениеПрава = Ложь;
				
			ИначеЕсли ЗначениеПрава = Перечисления.ТипыПравДоступаВЗаказе.Свои Тогда
				Если Пользователь = АвторЗаказа ИЛИ АвторЗаказа = Неопределено Тогда
					ЗначениеПрава = Истина;
				ИначеЕсли Пользователь.Бригадир Тогда
					ЗначениеПрава = Пользователь.Бригада.Сотрудники.Найти(АвторЗаказа, "Сотрудник") <> Неопределено;
				Иначе
					ЗначениеПрава = Ложь;
				КонецЕсли;
				
			Иначе
				ЗначениеПрава = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеПрава И ВыводПредупреждения Тогда
		Текст1="Недостаточно прав!";
		Текст2="Отказано в праве доступа:
		|"""+ПравоДоступа.Наименование+"""";
		ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
	КонецЕсли; 
	
	Возврат ЗначениеПрава;
КонецФункции

// Возвращает массив ссылок на сотрудников, включенных в текущую смену
//
Функция СоставСмены() Экспорт
	
	СоставСмены = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Сотрудник ИЗ Документ.ОткрытиеСмены.СоставСмены
	|ГДЕ Ссылка = &ТекущаяСмена");
	
	Запрос.УстановитьПараметр("ТекущаяСмена", ТекущаяСмена() );
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоставСмены.Добавить(Выборка.Сотрудник);
	КонецЦикла; 
	
	Возврат СоставСмены;
КонецФункции

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ПроверкаПользователяСмены(ПровПользователь=Неопределено) Экспорт
	
	СоставСмены = СоставСмены();
		
	Возврат Истина;
КонецФункции

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ПроверкаСмены(ВыводПредупреждения=Истина, МестоРеализации=Неопределено) Экспорт
	
	ТекСмена = ТекущаяСмена(МестоРеализации);
	
	Если НЕ ЗначениеЗаполнено(ТекСмена) Тогда
		
		Если ВыводПредупреждения Тогда
			Текст1="Ошибка смены!";
			Текст2="Смена не открыта...";
			ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли; 
		
		Возврат Ложь;
	КонецЕсли; 
	
	Если ТекущаяДата() - ТекСмена.Дата > 86400 Тогда
		
		Если ВыводПредупреждения Тогда
			Текст1="Ошибка смены!";
			Текст2="С момента открытия смены прошло более 24 часов...";
			ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли; 
		
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
КонецФункции

Функция ТекущаяСмена(МестоРеализации=Неопределено) Экспорт
	
	Если МестоРеализации = Неопределено Тогда
		МестоРеализации = глПараметрыРМ.МестоРеализации;
	КонецЕсли; 
	
	ТекСмена = РегистрыСведений.ТекущиеСмены.Получить(Новый Структура("МестоРеализации", МестоРеализации )).Смена;
	
#Если ТолстыйКлиентУправляемоеПриложение Тогда
	Если ТекСмена.Дата < НачалоДня(ТекущаяДатаСеанса()) Тогда
#Иначе 	
	Если ТекСмена.Дата < НачалоДня(ТекущаяДатаНаСервере()) Тогда
#КонецЕсли
		ТекСмена = Документы.ОткрытиеСмены.ПустаяСсылка();
	КонецЕсли;
	Возврат ТекСмена;
	
КонецФункции

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ТекущаяСменаЗапрос() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.МоментВремени КАК МоментВремени
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОткрытиеСмены.Ссылка КАК Ссылка,
	|		ОткрытиеСмены.МоментВремени КАК МоментВремени
	|	ИЗ
	|		Документ.ОткрытиеСмены КАК ОткрытиеСмены
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|			ПО (ЗакрытиеСмены.Смена = ОткрытиеСмены.Ссылка)
	|				И (НЕ ЗакрытиеСмены.ПометкаУдаления)
	|	ГДЕ
	|		НЕ ОткрытиеСмены.ПометкаУдаления
	|		И ОткрытиеСмены.МестоРеализации = &МестоРеализации
	|		И НАЧАЛОПЕРИОДА(ОткрытиеСмены.Дата, ДЕНЬ) = &Дата
	|		И ЗакрытиеСмены.Ссылка ЕСТЬ NULL ) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ");
	
	Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
#Если ТолстыйКлиентУправляемоеПриложение Тогда
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаСеанса()));
#Иначе 	
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДатаНаСервере()));
#КонецЕсли
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.ОткрытиеСмены") Тогда
		Возврат Выборка.Ссылка
	КонецЕсли; 
	
	Возврат Документы.ОткрытиеСмены.ПустаяСсылка();
КонецФункции

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ПоследняяСмена() Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОткрытиеСмены.Ссылка КАК Ссылка,
	|	ОткрытиеСмены.МоментВремени КАК МоментВремени
	|ИЗ
	|	Документ.ОткрытиеСмены КАК ОткрытиеСмены
	|ГДЕ
	|	НЕ ОткрытиеСмены.ПометкаУдаления
	|	И ОткрытиеСмены.МестоРеализации = &МестоРеализации
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени УБЫВ
	|");
	
	Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	КонецЕсли; 
	
	Возврат Документы.ОткрытиеСмены.ПустаяСсылка();
КонецФункции

// Открывает диалог выбора посадочного места
//
// Возвращаемое значение:
//	СправочникСсылка.ПосадочныеМеста или Неопределено
//
Функция ВыборПосадочногоМеста(ЛимитнаяКарта=Неопределено, ДоставкаВозможна=Ложь) Экспорт
	
	МассивМест = ПолучитьСписокПосадочныхМест(глПараметрыРМ.МестоРеализации, , ЛимитнаяКарта);
	
	Если ДоставкаВозможна Тогда
		МассивМест.Вставить(0,"Доставка");
	КонецЕсли; 
	
	Если МассивМест.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли МассивМест.Количество() = 1 Тогда
		Возврат МассивМест[0];
	КонецЕсли;
	
	Если НЕ глПараметрыРМ.ЗаказМестоВыборПоКоду Тогда
		Возврат ВыборИзСписка(МассивМест);
	КонецЕсли;
	
	КодМеста = ВводЧисла("Номер места", "Число", 5, 0 );
	Если КодМеста = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если ДоставкаВозможна Тогда
		Если КодМеста = 0 Тогда
			Возврат МассивМест[0];	// доставка
		КонецЕсли; 
		МассивМест.Удалить(0);
	КонецЕсли; 
	
	Для каждого Место Из МассивМест Цикл
		Если Место.Код = КодМеста Тогда
			Возврат Место;
		КонецЕсли; 
	КонецЦикла; 
	
	Текст1 = "Ошибка ввода!";
	Текст2 = "Посадочного места с таким номером нет!
	|Повторите ввод...";
	
	Если ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"Повтор","","Esc=Отмена") = "Повтор" Тогда
		Возврат ВыборПосадочногоМеста(ЛимитнаяКарта, ДоставкаВозможна);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ПолучитьСписокПосадочныхМест(МестоРеализации, ВклБезПривязки=Истина, ЛимитнаяКарта=Неопределено) Экспорт
	
	МассивМест = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка ИЗ Справочник.ПосадочныеМеста
	|ГДЕ
	|	НЕ ЭтоГруппа И НЕ ПометкаУдаления
	|	И (МестоРеализации = &МестоРеализации 
	|" +?(ВклБезПривязки, "ИЛИ МестоРеализации = ЗНАЧЕНИЕ(Справочник.МестаРеализации.ПустаяСсылка)", "") + ")
	|" +?(глВерсия=3 И ЛимитнаяКарта<>Неопределено, "И ЛимитнаяКарта = &ЛимитнаяКарта", "") + "
	|" +?(глВерсия>1, "И ИнформационнаяБаза = &ИнформационнаяБаза", "") + "
	|
	|УПОРЯДОЧИТЬ ПО Код
	|");
	
	Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
	Запрос.УстановитьПараметр("ЛимитнаяКарта", ЛимитнаяКарта);
	Если глВерсия>1 Тогда
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ПараметрыСеанса.ТекущаяИБ);
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивМест.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	
	Возврат МассивМест;
КонецФункции

// Сдвиг текущей строки в табличном поле таблицы значений
//
// Параметры:
//	ТабПоле		- элемент формы табличное поле
//  Направление	- 1 вниз, -1 вверх
//
Процедура ПереместитьКурсорВТаблице(ТабПоле, Направление) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТабПоле.Значение) Тогда
		Возврат;
	КонецЕсли; 
	
	ИндексСтроки = ТабПоле.Значение.Индекс( ТабПоле.ТекущаяСтрока ) + Направление;
	
	ИндексСтроки = Макс(0, Мин(ТабПоле.Значение.Количество()-1, ИндексСтроки ));
	
	ТабПоле.ТекущаяСтрока = ТабПоле.Значение[ИндексСтроки];
	
КонецПроцедуры

// Вывод информации на дисплей покупателя
//
Функция ВыводНаДП(Знач Действие, Знач Текст1="", Сумма1=Неопределено, Знач Текст2="", Сумма2=Неопределено ) Экспорт
	
	Если НЕ глПараметрыРМ.ДПЕсть Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	ПараметрыДействия = Новый Структура;
	
	Если Действие="СоздатьОкно" Тогда
		Возврат ложь;
		
	ИначеЕсли Действие="ВывестиТекст" Тогда
		
		Если СтрЧислоСтрок(Текст1)>1 Тогда
			Текст2 = СтрПолучитьСтроку(Текст1,2);
			Текст1 = СтрПолучитьСтроку(Текст1,1);
			
		Иначе
			Если Сумма1<>Неопределено Тогда
				СтрСумма = ФорматСумм(Сумма1);
				Текст1 = СтрДополнитьСправа(Текст1, 20-СтрДлина(СтрСумма) ) + СтрСумма;
			КонецЕсли;
			
			Если Сумма2<>Неопределено Тогда
				СтрСумма = ФорматСумм(Сумма2);
				Текст2 = СтрДополнитьСправа(Текст2, 20-СтрДлина(СтрСумма) ) + СтрСумма;
			КонецЕсли;
			
		КонецЕсли; 
		
		ПараметрыДействия.Вставить("Текст1" ,Текст1);
		ПараметрыДействия.Вставить("Текст2" ,Текст2);
		
	ИначеЕсли Действие="Ожидание" Тогда
		Действие="ВывестиТекст";
		Текст2 = СтрПолучитьСтроку(глПараметрыРМ.ДПТекстОжидание,2);
		Текст1 = СтрПолучитьСтроку(глПараметрыРМ.ДПТекстОжидание,1);
		ПараметрыДействия.Вставить("Текст1" ,Текст1);
		ПараметрыДействия.Вставить("Текст2" ,Текст2);		
	КонецЕсли;
	
	Попытка
		Результат = глПараметрыРМ.ДП.ПолучитьОбъект().ВыполнитьДействие(Действие, ПараметрыДействия);	
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка выполнения",УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); // иногда ошибка доступа к файлу
		Возврат Ложь;
	КонецПопытки;
	
	Если Результат.Ошибка Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Результат.Описание, Результат.Подробно, "","ОК","");
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Вывод информации на монитор покупателя
//
Процедура ВыводНаМП(Знач Действие, ПараметрыДействия = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(глПараметрыРМ) Тогда
		Возврат;
	ИначеЕсли НЕ (глПараметрыРМ.МПЕсть И глТорговоеОборудование.Свойство("MonitorBuyer")) Тогда
		Возврат;
	КонецЕсли;
	
	глТорговоеОборудование. MonitorBuyer.ВыполнитьДействие(Действие, ПараметрыДействия);

КонецПроцедуры

// Вывод информации на информационный дисплей
//
Процедура ВыводНаИнфоДисплей(Знач Действие, Знач Заказ = Неопределено, Знач ТаблицаЗаказа = Неопределено, СписокРекомендаций = Неопределено, ДопПараметрыИнфо  = Неопределено, Вес = Неопределено) Экспорт
	// < КС_ВДВ ------------------------------------------------------------ 
	// Было:
	// 		Процедура ВыводНаИнфоДисплей(Знач Действие, Знач Заказ = Неопределено, Знач ТаблицаЗаказа = Неопределено, СписокРекомендаций = Неопределено) Экспорт
	// Добавлен параметр:
	// 		, ДопПараметрыИнфо  = Неопределено
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Если НЕ (глПараметрыРМ.ИнфоДисплейЕсть И глТорговоеОборудование.Свойство("InfoDisplay")) Тогда
		Возврат;
	КонецЕсли;
	
	Если Заказ <> Неопределено И Заказ.Доставка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("Заказ"				,Заказ);
	ПараметрыДействия.Вставить("ТаблицаЗаказа"		,ТаблицаЗаказа);
	ПараметрыДействия.Вставить("СписокРекомендаций" ,СписокРекомендаций);
	ПараметрыДействия.Вставить("Вес" 				,Вес);
	// < КС_ВДВ ------------------------------------------------------------ 
	ПараметрыДействия.Вставить("ДопПараметрыИнфо"	,ДопПараметрыИнфо);
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Если Действие="ПоказатьЗаказ" Тогда
		глТорговоеОборудование.InfoDisplay.ЭтотОбъект.ВыполнитьДействие(Действие, ПараметрыДействия);
//Z+		
	ИначеЕсли Действие="ПоказатьСпецифику" Тогда
		глТорговоеОборудование.InfoDisplay.ЭтотОбъект.ВыполнитьДействие(Действие, ПараметрыДействия);
//Z-
	ИначеЕсли Действие="УбратьЗаказ" Тогда
		глТорговоеОборудование.InfoDisplay.ЭтотОбъект.ВыполнитьДействие(Действие, ПараметрыДействия);
	ИначеЕсли Действие="Приглашение" Тогда
		глТорговоеОборудование.InfoDisplay.ЭтотОбъект.ВыполнитьДействие(Действие, ПараметрыДействия);
	ИначеЕсли Действие="Авторизация" Тогда
		глТорговоеОборудование.InfoDisplay.ЭтотОбъект.ВыполнитьДействие(Действие, ПараметрыДействия);
	ИначеЕсли Действие="Реклама" Тогда
		глТорговоеОборудование.InfoDisplay.ЭтотОбъект.ВыполнитьДействие(Действие, ПараметрыДействия);
	ИначеЕсли Действие="ЗаказЗаписан" Тогда
		глТорговоеОборудование.InfoDisplay.ЭтотОбъект.ВыполнитьДействие(Действие, ПараметрыДействия);
	ИначеЕсли Действие="ПоказатьВес" Тогда
		глТорговоеОборудование.InfoDisplay.ЭтотОбъект.ВыполнитьДействие(Действие, ПараметрыДействия);
	ИначеЕсли Действие="ЗаказОплачен" Тогда
		глТорговоеОборудование.InfoDisplay.ЭтотОбъект.ВыполнитьДействие(Действие, ПараметрыДействия);
	КонецЕсли;	
	
КонецПроцедуры
 
// Возвращает ссылку на товар по найденному не удаленному штрих-коду, 
// или массив товаров если штрихкод не уникальный, или пустая ссылка если не найдено.
// Для весовых штихкодов в параметр Колво возвращается количество из штрихкода
Функция НайтиТоварПоШтрихКоду(ШтрихКод, Колво=0) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступностьКаталоговТоваров.КаталогТоваров КАК КаталогТоваров
	|ПОМЕСТИТЬ ДоступныеКаталоги
	|ИЗ
	|	РегистрСведений.ДоступностьКаталоговТоваров КАК ДоступностьКаталоговТоваров
	|ГДЕ
	|	(ДоступностьКаталоговТоваров.Станция = &Станция
	|			ИЛИ ДоступностьКаталоговТоваров.Станция = ЗНАЧЕНИЕ(Справочник.Станции.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихКоды.Товар КАК Товар
	|ИЗ
	|	ДоступныеКаталоги КАК ДоступныеКаталоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихКоды КАК ШтрихКоды
	|		ПО ШтрихКоды.Товар.Владелец = ДоступныеКаталоги.КаталогТоваров
	|ГДЕ
	|	ШтрихКоды.ШтрихКод = &ШтрихКод
	|	И НЕ ШтрихКоды.ПометкаУдаления
	|	И ШтрихКоды.Товар.ЕстьВПродаже
	|	И НЕ ШтрихКоды.Товар.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("ШтрихКод", ШтрихКод);
	Запрос.УстановитьПараметр("Станция", глПараметрыРМ.Станция);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество()=0 Тогда
		Возврат Справочники.Товары.ПустаяСсылка();
		
	ИначеЕсли Выборка.Количество()=1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Товар;
		
	Иначе
		МассивТоваров = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивТоваров.Добавить(Выборка.Товар);
		КонецЦикла; 
		Возврат МассивТоваров;
	КонецЕсли;
	
КонецФункции

// Возвращает ссылку на товар по коду, поиск только в основном меню РМ
//
Функция НайтиТоварПоКоду(КодТовара, КаталогТоваров = Неопределено) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоступностьКаталоговТоваров.КаталогТоваров КАК КаталогТоваров
	|ПОМЕСТИТЬ ДоступныеКаталоги
	|ИЗ
	|	РегистрСведений.ДоступностьКаталоговТоваров КАК ДоступностьКаталоговТоваров
	|ГДЕ
	|	(ДоступностьКаталоговТоваров.Станция = &Станция
	|			ИЛИ ДоступностьКаталоговТоваров.Станция = ЗНАЧЕНИЕ(Справочник.Станции.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка КАК Товар
	|ИЗ
	|	ДоступныеКаталоги КАК ДоступныеКаталоги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Товары КАК Товары
	|		ПО (Товары.Владелец = ДоступныеКаталоги.КаталогТоваров)
	|ГДЕ
	|	Товары.КодСУП = &КодТовара
	|	И НЕ Товары.ПометкаУдаления
	|	И Товары.ЕстьВПродаже
	|	И НЕ Товары.ПометкаУдаления");
	
	Станция = Справочники.Станции.НайтиПоНаименованию("Мясо");
	Попытка
		Станция = глПараметрыРМ.Станция;
	Исключение
	КонецПопытки;
	Запрос.УстановитьПараметр("КодТовара", КодТовара);
	Запрос.УстановитьПараметр("Станция", Станция);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество()=0 Тогда
		Возврат Справочники.Товары.ПустаяСсылка();
		
	ИначеЕсли Выборка.Количество()=1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Товар;
		
	Иначе
		Выборка.Следующий();
		Возврат Выборка.Товар;

	КонецЕсли;
КонецФункции

// Выполнение действий с объектами, связанных с записью в базу.
// Действие выполняется в Попытке, в случае ошибки выдается запрос на повтор или отмену,
// ошибка записывается в журнал регистрации.
//
// Параметры:
//	Объект		- объект действия (документ, справочник ...)
//  Действие	- строка, текст кода, исполняемый в Попытке командой Выполнить()
//				  объект действия должен фигурировать как переменная Объект,
//	Пример:
//		// создание в переменной Заказ объекта нового документа
//		ПопыткаДействияСОбъектом( Заказ, "Объект = Документы.Заказ.СоздатьДокумент()" )
//		// запись объекта в переменной Заказ
//		ПопыткаДействияСОбъектом( Заказ, "Объект.Записать()" )
//
// Возвращаемое значение:
//	Истина		- действие выполнено без ошибок
//  Ложь		- произошла ошибка и пользователь отказался от повторной попытки
//
Функция ПопыткаДействияСОбъектом(Объект, Действие, ФоновыйРежим = Истина, Знач Попыток = 3, ОбъектДляЖурнала = Неопределено) Экспорт
	
	ПовторДействия = Истина;
	
	Пока ПовторДействия Цикл
		
		Результат = Истина;
		
		Попытка
			Выполнить(Действие);
			ПовторДействия = Ложь;
			
		Исключение
			Если ОбъектДляЖурнала = Неопределено Тогда
				Попытка ОбъектДляЖурнала = Объект.Ссылка Исключение КонецПопытки;
			КонецЕсли;
			
			ЗаписьЖурналаРегистрации("Ошибка выполнения. " + Действие, УровеньЖурналаРегистрации.Ошибка, , ОбъектДляЖурнала, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
			Результат = Ложь;
			
			Если ФоновыйРежим Тогда
				Попыток = Попыток - 1;
				Если Попыток <= 0 Тогда
					ПовторДействия = Ложь;
				КонецЕсли;
			Иначе
				Текст1="Ошибка записи!";
				Текст2="Повторите попытку или обратитесь к администратору...";
				Если ВопросПредупреждение("Ошибка",Текст1,Текст2,"Повтор","","Esc=Отмена")="Отмена" Тогда
					ПовторДействия = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ЗаблокироватьОбъект(Объект, КемЗаблокирован="") Экспорт
	
	Попытка
		// заглушка на новый вариант блокировки
		// на всякий случай в попытку, потом можно убрать
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.Заказ") Тогда
			РезультатБлокировки = Объект.ЗаблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма);
			КемЗаблокирован = РезультатБлокировки.КемЗаблокирован;
			
			ЗаписьЖурналаРегистрации("Заказ.Блокировка по фирме", УровеньЖурналаРегистрации.Информация, , Объект.Ссылка, СтрШаблон("Фирма=%1;Заблокирован=%2;Успех=%3", глПараметрыРМ.Фирма, КемЗаблокирован, РезультатБлокировки.Успех));			
			
			Возврат РезультатБлокировки.Успех;
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации("Заказ.Блокировка по фирме", УровеньЖурналаРегистрации.Ошибка, , Объект.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));			
	КонецПопытки;
	
	Результат = Истина;
	
	Попытка
		Объект.Разблокировать();
	Исключение
	КонецПопытки;
	
	Попытка
		
		Объект.Заблокировать();
		ЗаписьЖурналаРегистрации("Заказ.Блокировка", УровеньЖурналаРегистрации.Информация, , Объект.Ссылка, "Успех=Да");			
		
	Исключение
		СтрОшибка = ОписаниеОшибки();
		// попробуем из описания ошибки вычленить имя пользователя и компа
		СтрКлюч = "компьютер: ";
		н = Найти( СтрОшибка, СтрКлюч );
		Если н <> 0 Тогда
			СтрОшибка = Сред( СтрОшибка, н+СтрДлина(СтрКлюч) );
			н = Найти( СтрОшибка, "," );
			ИмяКомпа = Лев(СтрОшибка, н-1);
			
			СтрКлюч = "пользователь: ";
			н = Найти( СтрОшибка, СтрКлюч );
			Если н <> 0 Тогда
				СтрОшибка = Сред( СтрОшибка, н+СтрДлина(СтрКлюч) );
				н = Найти( СтрОшибка, "," );
				ИмяПользователя = Лев(СтрОшибка, н-1);
				КемЗаблокирован = "\\"+ИмяКомпа+"\"+ИмяПользователя;
			КонецЕсли; 
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации("Заказ.Блокировка", УровеньЖурналаРегистрации.Информация, , Объект.Ссылка, СтрШаблон("Заблокирован=%1;Успех=Нет", КемЗаблокирован));			
		Результат = Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ВыборПричиныОтказа(Тип) Экспорт
	
	СписокПричин = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ПричиныУдалений
	|ГДЕ НЕ ПометкаУдаления И Тип = &Тип
	|УПОРЯДОЧИТЬ ПО Ссылка.Наименование");
	
	Запрос.УстановитьПараметр("Тип", Тип);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПричин.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	
	Если СписокПричин.Количество()=0 Тогда
		Текст1="Нет доступа!";
		Текст2="Не заполнен справочник ""Причины удалений"".
		|Обратитесь к администратору...";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат Неопределено;
		
	ИначеЕсли СписокПричин.Количество()=1 Тогда
		Возврат СписокПричин[0];
		
	Иначе
		Возврат ИнтерфейсРМ.ВыборИзСписка(СписокПричин);
		
	КонецЕсли;
	
КонецФункции

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ПолучитьРазрешенныеВариантыОплаты(Клиент, ЗапрещенныеТипыОплат=Неопределено) Экспорт
	
	Если ЗапрещенныеТипыОплат=Неопределено Тогда
		ЗапрещенныеТипыОплат = Новый Массив;
	КонецЕсли; 
	
	//Если НЕ( ЗначениеЗаполнено(Клиент) И Клиент.Безнал ) Тогда
	//	ЗапрещенныеТипыОплат.Добавить(Перечисления.ТипыОплаты.Безнал);
	//КонецЕсли; 
	Если НЕ( ЗначениеЗаполнено(Клиент) И Клиент.Неплательщик ) Тогда
		ЗапрещенныеТипыОплат.Добавить(Перечисления.ТипыОплаты.Неплательщик);
	КонецЕсли; 
	Если глВерсия>1 И НЕ ЗначениеЗаполнено(Клиент)Тогда
		ЗапрещенныеТипыОплат.Добавить(Перечисления.ТипыОплаты.Бонусы);
	КонецЕсли; 
	
	УсловиеПоВариантам = "";
	Если ЗначениеЗаполнено(Клиент) И (Клиент.Безнал ИЛИ Клиент.Неплательщик) Тогда
		
		ДопустимыеВарианты = Клиент.ДопустимыеВариантыОплаты.ВыгрузитьКолонку("ВариантОплаты");
		
		Если Клиент.ТипОграниченияВариантовОплат = Перечисления.ТипыОграниченийПоСписку.Включить Тогда
			// безнал и неплательщик только из списка допустимых
			УсловиеПоВариантам = "И (Ссылка В (&ДопустимыеВарианты) ИЛИ НЕ( Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Безнал) ИЛИ Тип = ЗНАЧЕНИЕ(Перечисление.ТипыОплаты.Неплательщик) ))";
			
		ИначеЕсли Клиент.ТипОграниченияВариантовОплат = Перечисления.ТипыОграниченийПоСписку.Исключить Тогда
			// исключить варианты из списка допустимых
			УсловиеПоВариантам = "И Ссылка НЕ В (&ДопустимыеВарианты)";
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ВариантыОплаты
	|ГДЕ НЕ ПометкаУдаления 
	|	И Тип НЕ В (&ЗапрещенныеТипыОплат)
	|	"+УсловиеПоВариантам+"
	|УПОРЯДОЧИТЬ ПО Код
	|");
	
	Запрос.УстановитьПараметр("ЗапрещенныеТипыОплат", ЗапрещенныеТипыОплат);
	Запрос.УстановитьПараметр("ДопустимыеВарианты", ДопустимыеВарианты);
	
	МассивВО = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ПроверкаПраваДоступа(Выборка.Ссылка) Тогда
			МассивВО.Добавить(Выборка.Ссылка);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат МассивВО;
КонецФункции

// Возвращает количество символов в строке для разных моделей принтеров и ККМ
//
// Параметры:
//	ТО		- ссылка на торговое оборудование
//
// Возвращаемое значение:
//	Число	- кол-во символов в строке
//
Функция ПРНДлинаСтроки(ТО) Экспорт
	
	ДлинаСтроки = 40;	// значение по умолчанию
	
	КодМодели = СокрП(ТО.КодМодели);
	
	// для Windows-принтера и принтеров подкладной печати длина строки задается в настройках
	Если СокрП(ТО.КодВида)="ПРН" И Найти("Windows,Феликс3СК,ШтрихКомбо,Штрих950К",КодМодели) Тогда
		
		СтруктураПараметров = ТО.ПолучитьОбъект().ПолучитьСтруктуруПараметров();
		
		Если НЕ СтруктураПараметров.Свойство("КолвоСимволовВСтроке", ДлинаСтроки) И 
			НЕ СтруктураПараметров.Свойство("СимволовВСтроке", ДлинаСтроки) Тогда
			ДлинаСтроки = 40;	// значение по умолчанию
		КонецЕсли; 
		
	ИначеЕсли Найти("ФеликсРК01,Феликс3СК,CBM270,FPrint03K,FPrint11,ШтрихLightФРК,ЭлвесФРК",КодМодели) Тогда
		ДлинаСтроки = 32;
	ИначеЕсли Найти("Спарк617ТФ,Спарк700ТК01",КодМодели) Тогда
		ДлинаСтроки = 35;
	ИначеЕсли Найти("ШтрихФРК01,ШтрихФРФ02,ШтрихФРФ03,AuraPP5200,FPrint5200K,FPrint55,ЭлвесМиниФРФ",КодМодели) Тогда
		ДлинаСтроки = 36;
	ИначеЕсли Найти("StarSP2000,ТриумФ,МеркурийСистемаФ,Штрих950К,ПРИМ88ТК,ПРИМ08ТК,FPrint88K,FPrint02K,FPrint22K,AuraPP6800,AuraPP6800L,MStarTK",КодМодели) Тогда
		ДлинаСтроки = 40;
	ИначеЕсли Найти("AuraPP7000,AuraPP7200L,AuraPP8000,AuraPP8000L,StarSP298,LK-T21,Bixolon01K,EpsonTM_T88",КодМодели) Тогда
		ДлинаСтроки = 42;
	ИначеЕсли Найти("Axiohm794,ПиритФР01К",КодМодели) Тогда
		ДлинаСтроки = 44;
	ИначеЕсли Найти("StarTSP600,StarTSP700,StarTSP800,CBM1000II,CTS300,ТОРНАДО,Меркурий114Ф,ШтрихМиниФРК,ШтрихКомбо,ШтрихМФРК,POSPrintFP410K,Спарк700ТК02",КодМодели) Тогда
		ДлинаСтроки = 48;
	КонецЕсли;
	
	Возврат ДлинаСтроки;
КонецФункции

// Снятие отчетов на ККМ
//
// Параметры:
//	ТипОтчета	- строка, варианты: "Z","X","ПоСекциям","ПоКассирам","Почасовой"
//
// Возвращаемое значение:
//	Булево		- Истина - все ОК, Ложь - драйвер вернул ошибку
//
Функция ОтчетККМ(ТипОтчета, ККМ=Неопределено, Пароль=Неопределено) Экспорт
	
	Если Пароль = Неопределено Тогда
		Если НЕ ВыборККМ_ЗапросПароля(ККМ, Пароль) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// с паролем вызывается только рекурсивно, после открытия смены
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.РежимАдминаОтчетККМ, глПользователь, ТипОтчета);
	КонецЕсли;
	
	глОжидание.Начало("Формирование отчета...",
	"Идет формирование отчета,
	|пожалуйста, подождите...");
	
	Парам = Новый Структура;
	Парам.Вставить("ТипОтчета"				,ТипОтчета);
	Парам.Вставить("Пароль"					,Пароль);
	Парам.Вставить("ИгнорироватьОбщийПароль",НЕ глПараметрыРМ.ККМИспользоватьТекПароль);
	Парам.Вставить("Кассир"					,глПользователь.Наименование);	// это для СПАРКа
	
	Если ТипОтчета = "ОткрытиеСмены" Тогда
		Результат = ККМ.ПолучитьОбъект().ВыполнитьДействие("ОткрытьСмену", Парам);
	Иначе
		Результат = ККМ.ПолучитьОбъект().ВыполнитьДействие("Отчет", Парам);
	КонецЕсли;
	
	глОжидание.Конец();
	
	Если Результат.Ошибка Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Результат.Описание, Результат.Подробно, "","ОК","");
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипОтчета="Z" И Результат.СменаНеОткрыта Тогда
		Текст1 = "Z-отчет";
		Текст2 = "Отсутствуют зарегистрированные продажи.
		|Распечатать нулевой Z-отчет?";
		Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "Да","","Esc=Нет")= "Да" Тогда
			Результат = ККМ.ПолучитьОбъект().ВыполнитьДействие("ОткрытьСмену", Парам);
			
			Если Результат.Ошибка Тогда
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Результат.Описание, Результат.Подробно, "","ОК","");
				Возврат Ложь;
			КонецЕсли;
			
			Возврат ОтчетККМ(ТипОтчета, ККМ, Пароль);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ЗначениеНДС(СтавкаНДС) Экспорт
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		Возврат 0;
	КонецЕсли;
	стрНДС = Строка(СтавкаНДС);
	Если Найти(стрНДС,"18") Тогда
		Возврат "18";
	ИначеЕсли Найти(стрНДС,"10") Тогда
		Возврат "10";
	Иначе
		Возврат "без НДС";
	КонецЕсли;
КонецФункции

Функция ПечатьКопииЧекаЛояльности(Заказ) Экспорт
	
	Обработка_ККМ = Обработка_ККМ;
	ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
	ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
	
	
	Если ТипЗнч(Заказ) = Тип("Структура") и Заказ.ТипЧека = 1 и СтрНайти(ККМ.ИмяОбработки,"326") <> 0 Тогда // для Атол 326 как будто старая версия
		Заказ = Заказ.Заказ;
	КонецЕсли;
	
	Если ТипЗнч(Заказ) <> Тип("Структура") Тогда // совместимость со старой версией
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ПротоколРасчетов") Тогда
			Заказ = Заказ.Заказ;
		КонецЕсли;
		ПодвалЧека = Заказ.ПодвалЧека;
		СтрокиПодвала = РазложитьСтрокуВМассив(ПодвалЧека, Символы.ПС);
		СтрокиДляПечати = Новый Массив;
		Для Каждого Т Из СтрокиПодвала Цикл
			Если СтрНайти(Т, "[отрезка]") Тогда
				Прервать;
			КонецЕсли;
			СтрокиДляПечати.Добавить(Т);
		КонецЦикла;
		
		Обработка_ККМ = Обработка_ККМ;
		ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
		ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
		
		СтрокиЧека = Новый Массив;
		Товары = Заказ.Товары;
		Для Каждого Т Из Товары Цикл
			Если Не ЗначениеЗаполнено(Т.Товар) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Т.КоличествоУдалено И Т.СуммаРеализации * Т.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокиЧека.Добавить(Новый Структура);
			СтрокаЧека = СтрокиЧека.Получить(СтрокиЧека.Количество()-1);
			
			СтрокаЧека.Вставить("ФискальнаяСтрока", "");
			СтрокаЧека.Вставить("Наименование", Т.Товар.Наименование);
			СтрокаЧека.Вставить("Количество",?(Т.Количество,Т.Количество,1));
			Если Т.Количество Тогда
				Цена = Окр(Т.СуммаРеализации/Т.Количество,2); 
			Иначе
				Цена = 0;
			КонецЕсли;
			СтрокаЧека.Вставить("Цена", Цена);
			СтрокаЧека.Вставить("Сумма", СтрокаЧека.Цена*СтрокаЧека.Количество);
			СтрокаЧека.Вставить("НомерСекции", Т.Товар.Категория.НомерОтдела);
			
			СтрокаЧека.Вставить("СтавкаНДС", ЗначениеНДС(Т.Товар.Категория.СтавкаНДС));
			СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*СтрокаЧека.СтавкаНДС/100);
		КонецЦикла;
		
		СтрокиОплат = Новый Массив;
		НЗ = РегистрыСведений.ЗаказДопИнф.СоздатьНаборЗаписей();
		НЗ.Отбор.Заказ.Установить(Заказ);
		НЗ.Прочитать();
		
		Если НЗ.Количество() Тогда
			Протокол = НЗ[0].ПротоколРасчетов;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		//:Протокол = Документы.ПротоколРасчетов.ПустаяСсылка();
		СтрокаБезнал = Протокол.Протокол.Найти(Справочники.ВариантыОплаты.Карта);
		Если СтрокаБезнал = Неопределено Тогда
			СуммаБезнал = 0;
		Иначе
			СуммаБезнал = СтрокаБезнал.СуммаФакт;
		КонецЕсли;
		
		СтрокаНал = Протокол.Протокол.Найти(Справочники.ВариантыОплаты.Наличные);
		Если СтрокаНал = Неопределено Тогда
			СуммаНал = 0;
		Иначе
			СуммаНал = СтрокаНал.СуммаФакт;
		КонецЕсли;
		
		Если СуммаНал Тогда
			СтрокаОплат = Новый Структура;
			СтрокаОплат.Вставить("ТипОплаты", "Нал");
			СтрокаОплат.Вставить("Сумма", СуммаНал);
			СтрокиОплат.Добавить(СтрокаОплат);
		КонецЕсли;	
		Если СуммаБезнал Тогда
			СтрокаОплат = Новый Структура;
			СтрокаОплат.Вставить("ТипОплаты", "Безнал");
			СтрокаОплат.Вставить("Сумма", СуммаБезнал);
			СтрокиОплат.Добавить(СтрокаОплат);
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("Кассир", Строка(Заказ.Автор));
		Параметры.Вставить("СтрокиЧека", СтрокиЧека);
		Параметры.Вставить("СтрокиОплат", СтрокиОплат);
		//Параметры.Вставить("СуммаСкидкиНаЧек",0.99);
		Параметры.Вставить("ТипЧека", Ложь);
		Параметры.Вставить("НомерЧека", Заказ.НомерЧека);
		Параметры.Вставить("НомерСмены", Заказ.НомерСмены);
		ПараметрыВыходные = ПараметрыВыходные;
		Если СтрокиЧека.Количество() Тогда
			
			Попытка
				Р = Обработка_ККМ.ВыполнитьКоманду("ПечатьКопииЧека",Параметры,ПараметрыВыходные);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		Иначе
		КонецЕсли;
		
		
		СтрокиДляПечати.Вставить(0, "******************КОПИЯ*****************");
		Параметры = Новый Структура;
		Параметры.Вставить("Строки", СтрокиДляПечати);
		Параметры.Вставить("ТипШрифта", 0);
		ПараметрыВыходные = ПараметрыВыходные;
		Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",Параметры,ПараметрыВыходные);
	ИначеЕсли Заказ.ТипЧека = 0 Тогда // чек лояльности
		
		ПодвалЧека = Заказ.Заказ.ПодвалЧека;
		СтрокиПодвала = РазложитьСтрокуВМассив(ПодвалЧека, Символы.ПС);

		
		Обработка_ККМ = Обработка_ККМ;
		ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
		ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
		
		ВходныеПараметры = Новый Структура;
		ВходныеПараметры.Вставить("Строки",СтрокиПодвала);
		ВыходныеПараметры = ВыходныеПараметры;
		Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",ВходныеПараметры,ВыходныеПараметры);
		
	ИначеЕсли Заказ.ТипЧека = 1 Тогда // чек фискальный
		Заказ = Заказ.Заказ;
		Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ПротоколРасчетов") Тогда
			СтруктураОтветаФН = ЗначениеИзСтрокиВнутр(Заказ.ОтветФН);
		Иначе
			НЗ = РегистрыСведений.ЗаказДопИнф.СоздатьНаборЗаписей();
			НЗ.Отбор.Заказ.Установить(Заказ);
			НЗ.Прочитать();
			
			Если НЗ.Количество() Тогда
				Протокол = НЗ[0].ПротоколРасчетов;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
			СтруктураОтветаФН = ЗначениеИзСтрокиВнутр(Протокол.ОтветФН);
		КонецЕсли;
		НомерФД = СтруктураОтветаФН.НомерДокумента;
		Если НомерФД = 0 Тогда
			НомерФД = 99999999;
		КонецЕсли;
		
		Обработка_ККМ = Обработка_ККМ;
		ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
		ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
		
		ВходныеПараметры = Новый Структура;
		ВходныеПараметры.Вставить("НомерФД",НомерФД);
		ВыходныеПараметры = ВыходныеПараметры;
		Обработка_ККМ.ВыполнитьКоманду("ПечатьКопииЧека",ВходныеПараметры,ВыходныеПараметры);
		
	КонецЕсли;
	

КонецФункции

Функция ОтчетСторно() Экспорт
	Схема = Обработки.ПросмотрОтчетов.ПолучитьМакет("Сторно");
	Настройки = Схема.НастройкиПоУмолчанию;
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Дата", ДобавитьМесяц(НачалоДня(ТекущаяДата()),-2));
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("РабочееМесто", глРабочееМесто);
	ТабДок = ирОбщий.СкомпоноватьВТабличныйДокументЛкс(Схема, Схема.НастройкиПоУмолчанию);
	Возврат ПоказатьОтчет("Сторно", ТабДок)
КонецФункции

Функция ПоказатьОтчет(Заголовок, ТабДок) Экспорт
	ПросмотрОтчетов = ПолучитьОбъектОбработки("ПросмотрОтчетов");
	ПросмотрОтчетов.ТабДок = ТабДок;
	ПросмотрОтчетов.Заголовок = Заголовок;
	
	Форма = ПросмотрОтчетов.ПолучитьФорму( "Форма" + глПараметрыРМ.ИнтерфейсТип, , Новый УникальныйИдентификатор);
	Возврат Форма.ОткрытьМодально();
КонецФункции

// Синхронизация времени с ККМ
//
Функция СинхронизироватьВремяККМ(ККМ=Неопределено, ЗапросПодтверждения=Истина) Экспорт
	
	Перем Пароль;
	
	Если НЕ ВыборККМ_ЗапросПароля( ККМ, Пароль ) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗапросПодтверждения Тогда
		Текст1="Внимание!";
		Текст2="Подтвердите системные дату, время: "+Символы.ПС+Формат(ТекущаяДата(),"ДЛФ=ДВ");
		Если ИнтерфейсРМ.ВопросПредупреждение("Подтверждение",Текст1,Текст2,"ОК","","Esc=Отмена")="Отмена" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.РежимАдминаСинхронизацияВремениККМ, глПользователь);
	
	Парам = Новый Структура;
	Парам.Вставить("Пароль"					,Пароль);
	Парам.Вставить("ИгнорироватьОбщийПароль",НЕ глПараметрыРМ.ККМИспользоватьТекПароль);
	
	Результат = ККМ.ПолучитьОбъект().ВыполнитьДействие("СинхронизироватьВремя", Парам);
	
	Если Результат.Ошибка Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Результат.Описание, Результат.Подробно, "","ОК","");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Описание функции
//
// Параметры:
//	Параметр1	- описание
//
// Возвращаемое значение:
//	Тип.Вид		- описание
//
Функция ВыборККМ_ЗапросПароля(ККМ, Пароль) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ККМ) Тогда
		
		Если НЕ глПараметрыРМ.ККМЕсть Тогда
			Текст1="Нет доступа!";
			Текст2="Рабочее место не является кассовым!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат Ложь;
		КонецЕсли;
		
		ККМ = глПараметрыРМ.ККМ;
		
		Если глПараметрыРМ.ККМЕстьДоп И ИнтерфейсРМ.ПроверкаПраваДоступа("ВыборККМ") Тогда
			
			СписокККМ = Новый Массив;
			СписокККМ.Добавить(ККМ);
			
			Для каждого СтрокаСписка Из глПараметрыРМ.ККМСписокДоп Цикл
				Если СтрокаСписка.Значение.КодВида = "ФР" Тогда
					СписокККМ.Добавить(СтрокаСписка.Значение);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокККМ.Количество() > 1 Тогда
				ККМ = ИнтерфейсРМ.ВыборИзСписка(СписокККМ);
				Если ККМ = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ККМ.КодВида <> "ФР" Тогда
			Текст1="Нет доступа!";
			Текст2="Это действие возможно только на фискальных регистраторах!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если глПараметрыРМ.ККМИспользоватьТекПароль Тогда
		Пароль = глПользователь.КодДоступа;
	Иначе
		Пароль = ИнтерфейсРМ.ВводЧисла("Введите пароль ККМ", "Пароль");
		Если Пароль = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	Если ПустаяСтрока(Пароль) Тогда
		Пароль = "0";
	КонецЕсли; 
	
	Возврат Истина;
КонецФункции

// Возвращает массив открытых заказов по посадочному месту, если задано.
// С отбором по месту реализации.
Функция ПолучитьМассивОткрытыхЗаказов( ПосадочноеМесто=Неопределено, Клиент=Неопределено, КартаДоступа=Неопределено) Экспорт
// < КС_ВДВ ------------------------------------------------------------ 
//Функция ПолучитьМассивОткрытыхЗаказов( ПосадочноеМесто=Неопределено, Клиент=Неопределено) Экспорт

// С учетом карты будет точнее. Например, если у клиента на руках есть две карты.
// КС_ВДВ > ------------------------------------------------------------ 
	МассивЗаказов = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗаказДопИнф.Заказ.Ссылка КАК ДокСсылка
	|Поместить Т
	|ИЗ
	|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|ГДЕ
	|	ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
	|	И НЕ ЗаказДопИнф.Заказ.ПометкаУдаления
	|	И НЕ ЗаказДопИнф.Заказ.Доставка
	|	И ЗаказДопИнф.Заказ.МестоРеализации = &МестоРеализации
	|"+?(ЗначениеЗаполнено(ПосадочноеМесто), "
	|	И ЗаказДопИнф.Заказ.ПосадочноеМесто = &ПосадочноеМесто", "") + "
	//|"+?(ЗначениеЗаполнено(Клиент) И Клиент <> Справочники.Клиенты.ПоУмолчанию, "
	//|	И ЗаказДопИнф.Заказ.Клиент = &Клиент", "") + "
	|// < КС_ВДВ ------------------------------------------------------------ 
	|"+?(ЗначениеЗаполнено(КартаДоступа), "
	|	И ЗаказДопИнф.Заказ.КартаДоступа = &КартаДоступа", "") + "
	|// КС_ВДВ > ------------------------------------------------------------ 
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Марки.Заказ
	|ИЗ
	|	РегистрСведений.Марки КАК Марки
	|ГДЕ
	|	Марки.Заказ.КартаДоступа = &КартаДоступа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказДопИнф.Заказ КАК ДокСсылка
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказДопИнф
	|ГДЕ
	|	(Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПозицийЗаказа.Заказано)
	|	ИЛИ Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПозицийЗаказа.Готово))
	|	И НЕ ЗаказДопИнф.Заказ.ПометкаУдаления
	|"+?(ЗначениеЗаполнено(ПосадочноеМесто), "
	|	И ЗаказДопИнф.Заказ.ПосадочноеМесто = &ПосадочноеМесто", "") + "
	//|"+?(ЗначениеЗаполнено(Клиент) И Клиент <> Справочники.Клиенты.ПоУмолчанию, "
	//|	И ЗаказДопИнф.Заказ.Клиент = &Клиент", "") + "
	|// < КС_ВДВ ------------------------------------------------------------ 
	|"+?(ЗначениеЗаполнено(КартаДоступа), "
	|	И ЗаказДопИнф.Заказ.КартаДоступа = &КартаДоступа", "") + "
 	|	И НЕ ЗаказДопИнф.Заказ.ПометкаУдаления
	|	И ЗаказДопИнф.ВремяЗаказано > &Дата12Часов
	|;
	|Выбрать различные Т.ДокСсылка ИЗ Т КАК Т
	|УПОРЯДОЧИТЬ ПО Т.ДокСсылка.Дата
	|");
	
	Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
	Запрос.УстановитьПараметр("ПосадочноеМесто", ПосадочноеМесто);
	Запрос.УстановитьПараметр("Клиент", Клиент);
	Запрос.УстановитьПараметр("Дата12Часов", ТекущаяДата()-12*3600);
	// < КС_ВДВ ------------------------------------------------------------ 
	Запрос.УстановитьПараметр("КартаДоступа", КартаДоступа);
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивЗаказов.Добавить(Выборка.ДокСсылка);
	КонецЦикла;
	
	Возврат МассивЗаказов;
КонецФункции

// Описание процедуры
//
Процедура ЭкраннаяКлавиатура() Экспорт
	
	Если глПараметрыРМ.ШиринаОкна1С = 800 Тогда		// 800х600
		ВысотаКлавы = 200;
		ШиринаКлавы = 800;
		
	Иначе
		ВысотаКлавы = 256;
		ШиринаКлавы = 1024;
		
	КонецЕсли;
	
	Лево = (глПараметрыРМ.ШиринаОкна1С - ШиринаКлавы) / 2;
	Верх = глПараметрыРМ.ВысотаОкна1С - ВысотаКлавы;
	
	Прозрачность = 240;
	
	РаботаСокнами.ScreenKey(Лево, Верх, ШиринаКлавы, ВысотаКлавы, Прозрачность);
	
КонецПроцедуры

// Проверка, является ли товар тарифицируемой позицией
//
Функция ЭтоТариф(Товар) Экспорт
	
	Возврат глВерсия=3 И Товар.Тип = Перечисления.ТипыТоваров.Тариф;
	
КонецФункции

// Посылает нажатие клавиш Shift+Ctrl+Z
//
Процедура ЗакрытьОкноСообщений() Экспорт
	
	WshShell.SendKeys("+^Z");
	
КонецПроцедуры

// Выводит полупрозрачное сообщение поверх всех окон
//
Процедура ВывестиОповещение(ТекстСообщения, ИдСообщения=-1, КолвоСтрок=0, ЦветФона=0, ЦветРамки=0, ЗвукОповещения="", Событие="", Данные="") Экспорт
	
	Если ЗначениеЗаполнено(ЗвукОповещения) Тогда
		РаботаСокнами.PlayWav(ЗвукОповещения);
	КонецЕсли; 
	
	Если глПараметрыРМ.ИнтерфейсТип=0 Тогда
		ШиринаОкна=350;
	Иначе
		ШиринаОкна=232;
	КонецЕсли;
	
	РаботаСокнами.ShowMessageEx(ШиринаОкна, ЦветФона, ТекстСообщения, Событие, Данные, ИдСообщения);
	
КонецПроцедуры

// Описание процедуры
//
// Параметры:
//	Параметр1	- описание параметра
//
Функция ВыполнитьВнешнююОбработку(ИмяФайла, ПараметрОбработки=Неопределено) Экспорт
	
	ЭтоОтчет = (Прав(ИмяФайла,4) = ".erf");
	
	Попытка
		Обработка = ?(ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки).Создать(ИмяФайла);  
		
		// реквизит ПараметрыДействия в обработке не обязательный
		Попытка
			Обработка.ПараметрОбработки = ПараметрОбработки;
		Исключение
		КонецПопытки;
		
		Результат = Обработка.ВыполнитьДействие();
		Текст1 = Обработка.ОписаниеРезультата;
		Текст2 = Обработка.ОписаниеРезультатаПодробно;
		
	Исключение
		Текст2 = ОписаниеОшибки();
		Текст1 = "Ошибка!";
		Результат = Ложь;
		
	КонецПопытки;
	
	Если ЗначениеЗаполнено(Текст1) Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ОЧЕРЕДИ СОБЫТИЙ

// Описание процедуры
//
Процедура ОбработкаОчередиСобытий(РабочееМесто, ОчиститьОчередь=Ложь) Экспорт
	
	Отбор = Новый Структура("РабочееМесто", РабочееМесто);
	ВыборкаСобытий = РегистрыСведений.ОбработкаСобытий.Выбрать(,ТекущаяДата(),Отбор);
	
	Если ВыборкаСобытий.Следующий() Тогда
		
		ИдСобытия 	= ВыборкаСобытий.ИдСобытия;
		Описание	= ВыборкаСобытий.Описание;
		ТипСобытия	= ВыборкаСобытий.ТипСобытия;
		Получатель	= ВыборкаСобытий.Получатель;
		
		Если ОчиститьОчередь Тогда
			СобытиеОбработано = Истина;
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытий.Сообщение Тогда
			СобытиеОбработано = ПоказатьОповещениеГотовности(ИдСобытия, Описание, Получатель);
			// Обновить статусы позиций в открытом заказе
			Оповестить("ОбновитьСтатусыПозицийЗаказа", ИдСобытия);
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытий.СтопЛист Тогда
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытий.ПланМеню Тогда
			
			ТекДокумент = Документы.ПланМеню.ПолучитьСсылку(Новый УникальныйИдентификатор(ИдСобытия));
			
			ТекстСообщения = "Выполняется обновление меню в соответствии с план-меню № " + ТекДокумент.Номер;
			Если ЗначениеЗаполнено(глРабочееМесто) Тогда
				глОжидание.Начало("Пожалуйста, подождите...", ТекстСообщения);
			Иначе
				Сообщить(ТекстСообщения);
			КонецЕсли;
			
			Если НЕ ТекДокумент.ПометкаУдаления Тогда
				СобытиеОбработано = ТекДокумент.ПолучитьОбъект().ПрименитьПланМеню();
			Иначе
				СобытиеОбработано = Истина;
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(глРабочееМесто) Тогда
				глОжидание.Конец();
				Если НЕ СобытиеОбработано Тогда
					Текст1 = "Ошибка обновления меню!";
					Текст2 = "При обновлении меню произошла ошибка!
					|Обратитесь к администратору...";
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				КонецЕсли; 
			Иначе
				
				Если НЕ СобытиеОбработано Тогда
				    Сообщить("При обновлении меню произошла ошибка!");
				КонецЕсли;
				Сообщить("Обработка закончена.");
				
			КонецЕсли;
			
			СобытиеОбработано = Истина;
			
		ИначеЕсли ТипСобытия = Перечисления.ТипыСобытий.МониторМарок Тогда	
			
			// Оповестить РМ о изменениях в марках
			Если ЗначениеЗаполнено(глРабочееМесто) Тогда
				//ТекущаяФорма = глСтекОкон[0];
				Оповестить("ОбновитьСтатусыПозицийЗаказа");
			КонецЕсли;
			
			СобытиеОбработано = Истина;
			
		Иначе
			// некоторые типы событий обрабатываются отдельно, например, отправка сообщений на пейджер и в моб.официант
			СобытиеОбработано = Ложь;
			
		КонецЕсли; 
		
		Если СобытиеОбработано Тогда
			ВыборкаСобытий.ПолучитьМенеджерЗаписи().Удалить();
		КонецЕсли;
		
		//вместо цикла, чтобы исключить пересечения параллельных процессов
		ОбработкаОчередиСобытий(РабочееМесто, ОчиститьОчередь);
	КонецЕсли;
	
КонецПроцедуры

Функция ПоказатьОповещениеГотовности(КодПодтверждения, ТекстСообщения, Получатель)
	
	Если глПараметрыРМ.ОповещенияОтключить Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если глПараметрыРМ.ОповещенияЗвукВключить Тогда 
		РаботаСокнами.PlayWav(глПараметрыРМ.ОповещенияЗвукИмяФайла);
	КонецЕсли; 
	
	ЦветФона = ?(Получатель = Неопределено, 0, Получатель.ЦветОповещенияГотовности);
	
	ИнтерфейсРМ.ВывестиОповещение(ТекстСообщения, Число(КодПодтверждения), , ЦветФона);
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// обход утечки памяти

// Возвращает объект обработки или внешней обработки,
// если в каталоге локальных настроек есть файл внешней обработки с таким же именем
Функция ПолучитьОбъектОбработки(ИмяОбработки, ИмяУникальности = "", ЭтоОтчет = Ложь) Экспорт
	
	Перем ОбработкаОбъект;
	
	Если НЕ глОбработки.Свойство(ИмяОбработки + ИмяУникальности, ОбработкаОбъект) Тогда
		
		КаталогЛокальныхНастроек = Константы.КаталогЛокальныхНастроек.Получить();
		
		Если ПустаяСтрока( КаталогЛокальныхНастроек ) Тогда
			ФлагВнешняя = Ложь;
		Иначе
			ИмяФайла = КаталогЛокальныхНастроек+"\"+ИмяОбработки + ?(ЭтоОтчет, ".erf", ".epf");
			ФлагВнешняя = РаботаСФайлами.ПроверитьСуществованиеФайла( ИмяФайла, , Истина );
		КонецЕсли;
		
		Если ФлагВнешняя Тогда
			ОбработкаОбъект = ?(ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки).Создать(ИмяФайла);  
		Иначе
			ОбработкаОбъект = ?(ЭтоОтчет, Отчеты[ИмяОбработки], Обработки[ИмяОбработки]).Создать();
		КонецЕсли; 
		
		глОбработки.Вставить(ИмяОбработки + ИмяУникальности, ОбработкаОбъект);
		
	КонецЕсли;
	
	// Перед запуском зачищаем все реквизиты
	Для Каждого Реквизит Из ОбработкаОбъект.Метаданные().Реквизиты Цикл
		ОбработкаОбъект[Реквизит.Имя] = Неопределено;
	КонецЦикла;
	
	// Перед запуском зачищаем все табличные части
	Для Каждого ТабличнаяЧасть Из ОбработкаОбъект.Метаданные().ТабличныеЧасти Цикл
		ОбработкаОбъект[ТабличнаяЧасть.Имя].Очистить();
	КонецЦикла;
	
	Попытка
		// пока через попытку, потом надо вставить эту процедуру во все обработки
		//РаботаСокнами.Затемнить();
		ОбработкаОбъект.УстановкаНачальныхЗначений();
		
		
		// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
		// Вызывается каждый раз при обращении к объекту обработки.
		// Здесь надо прописать сброс переменных в начальные значения
		// Реквизиты и табличные части уже сброшены
		
	Исключение
	КонецПопытки;
	
	Возврат ОбработкаОбъект;
КонецФункции

Процедура УстановитьУказательОкна(ТекущееОкно) Экспорт
	//:РаботаСокнами=обработки.РаботаСокнами.Создать();
	ТекущаяФорма = ТекущееОкно.Форма;
	ЗаголовокОкна = ТекущаяФорма.Заголовок + ?(ТекущаяФорма.Модифицированность, " *", "");
	
	// получаем указатель по заголовку окна
 	hWnd = РаботаСокнами.ПолучитьУказательОкна(ЗаголовокОкна, ТекущаяФорма.СостояниеОкна);
	
	ТекущееОкно.hWnd = hWnd;
	ТекущееОкно.Заголовок = ЗаголовокОкна;
	
КонецПроцедуры

Функция ЗаполнитьПодвал(ТабПоле, ЗаказОбъект,Макет = Неопределено) Экспорт
	ТипСумма = ПолучитьОписаниеТиповЧисла(12,2);
	ТабДок = Новый ТабличныйДокумент;
	ТабПоле.Очистить();
	Если Не ЗаказОбъект.Товары.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Макет = Неопределено Тогда
		Макет = ПолучитьОбщийМакет("ИтогиФормыРМ");	
	КонецЕсли;
	
	ФирмаРМ = глПараметрыРМ.Фирма;
	
	ТоварыСуммыПоФирмам = ЗаказОбъект.Товары.Выгрузить();
	ТоварыСуммыПоФирмам.Свернуть("Фирма,СтатусОплаты", "СуммаРеализации");
	ФирмыЗаказа = ТоварыСуммыПоФирмам.Скопировать(,"Фирма");
	ФирмыЗаказа.Свернуть("Фирма");
	ФирмыЗаказа = ФирмыЗаказа.ВыгрузитьКолонку(0);	
	СуммыПоФирмам = ТоварыСуммыПоФирмам.СкопироватьКолонки();
	СуммыПоФирмам.Колонки.Добавить("СуммаОплачено",ТипСумма);
	СуммыПоФирмам.Колонки.Добавить("КОплате",ТипСумма);
	СуммыПоФирмам.Колонки.Добавить("ЭтоНашаФирма",ТипСумма);
	
	Для Каждого Фирма Из ФирмыЗаказа Цикл
		
		СтрокаФирма = СуммыПоФирмам.Добавить();
		СтрокаФирмаОплачено = ТоварыСуммыПоФирмам.НайтиСтроки(Новый Структура("Фирма, СтатусОплаты", Фирма, 1));
		Если СтрокаФирмаОплачено.Количество() Тогда
			СтрокаФирма.СуммаОплачено = СтрокаФирмаОплачено[0].СуммаРеализации;
			СтрокаФирма.СуммаРеализации = СтрокаФирмаОплачено[0].СуммаРеализации + СтрокаФирма.СуммаРеализации;

		КонецЕсли;
		
		СтрокаФирмаНеОплачено = ТоварыСуммыПоФирмам.НайтиСтроки(Новый Структура("Фирма, СтатусОплаты", Фирма, 0));
		Если СтрокаФирмаНеОплачено.Количество() Тогда
			СтрокаФирма.СуммаРеализации = СтрокаФирмаНеОплачено[0].СуммаРеализации + СтрокаФирма.СуммаРеализации;
		КонецЕсли;
		
		СтрокаФирмаКОплате = ТоварыСуммыПоФирмам.НайтиСтроки(Новый Структура("Фирма, СтатусОплаты", Фирма,-1));
		Если СтрокаФирмаКОплате.Количество() Тогда
			СтрокаФирма.СуммаРеализации = СтрокаФирмаКОплате[0].СуммаРеализации + СтрокаФирма.СуммаРеализации;
		КонецЕсли;
		СтрокаФирма.Фирма = Фирма;
		
		СтрокаФирма.ЭтоНашаФирма = Фирма = ФирмаРМ;
		СтрокаФирма.КОплате = СтрокаФирма.СуммаРеализации - СтрокаФирма.СуммаОплачено;
	КонецЦикла;
	
	СуммыПоФирмам.Сортировать("ЭтоНашаФирма УБЫВ");	
	ТабДок.Вывести(Макет.ПолучитьОбласть("Шапка"));
	Для Каждого стФирма Из СуммыПоФирмам Цикл
		ОбластьСтрока = ?(стФирма.ЭтоНашаФирма, Макет.ПолучитьОбласть("СтрокаТекФирма"), Макет.ПолучитьОбласть("СтрокаДругаяФирма"));
		ОбластьСтрока.Параметры.Заполнить(стФирма);
		Если Не стФирма.ЭтоНашаФирма Тогда
			ОбластьСтрока.Параметры.кОплатеПоДругимФирмам = "+ " + Формат(стФирма.КОплате, "ЧДЦ=2; ЧРГ=; ЧН=' '");
		КонецЕсли;

		ОбластьСтрока.Параметры.КОплате = Формат(стФирма.КОплате, "ЧДЦ=2; ЧРГ=; ЧН=' '");
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	       	
	Если СуммыПоФирмам.Количество() = 1 Тогда
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаДругаяФирма");
		ТабДок.Вывести(ОбластьСтрока);	
	КонецЕсли;
	
	СуммыПоФирмам.Свернуть("","СуммаОплачено, СуммаРеализации, Коплате");
	ОбластьИтог = Макет.ПолучитьОбласть("Итог");
	ОбластьИтог.Параметры.Заполнить(СуммыПоФирмам[0]);
	ОбластьИтог.Параметры.Коплате = Формат(СуммыПоФирмам[0].КОплате, "ЧДЦ=2; ЧРГ=; ЧН=0.00");
	ТабДок.Вывести(ОбластьИтог);
	ТабПоле.Вывести(ТабДок);
КонецФункции

Функция ЗаполнитьПодвалГостя(ТабПоле, ЗаказОбъект, Макет = Неопределено, ДанныеЛояльности = Неопределено) Экспорт
	ТипСумма = ПолучитьОписаниеТиповЧисла(12,2);
	ТипКГЛ = ПолучитьОписаниеТиповЧисла(10,0);
	ТабДок = Новый ТабличныйДокумент;
	ТабПоле.Очистить();
	Если Не ЗаказОбъект.Товары.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	Если Макет = Неопределено Тогда
		Макет = ПолучитьОбщийМакет("ИтогиФормыГостя");	
	КонецЕсли;

	ФирмаРМ = глПараметрыРМ.Фирма;
	
	ТоварыСуммыПоФирмам = ЗаказОбъект.Товары.Выгрузить();
	ТоварыСуммыПоФирмам.Свернуть("Фирма,СтатусОплаты", "СуммаРеализации");
	ФирмыЗаказа = ТоварыСуммыПоФирмам.Скопировать(,"Фирма");
	ФирмыЗаказа.Свернуть("Фирма");
	ФирмыЗаказа = ФирмыЗаказа.ВыгрузитьКолонку(0);	
	СуммыПоФирмам = ТоварыСуммыПоФирмам.СкопироватьКолонки();
	СуммыПоФирмам.Колонки.Добавить("СуммаОплачено",ТипСумма);
	СуммыПоФирмам.Колонки.Добавить("КОплате",ТипСумма);
	СуммыПоФирмам.Колонки.Добавить("ЭтоНашаФирма",ТипСумма);
	СуммыПоФирмам.Колонки.Добавить("КГЛ",ТипКГЛ);
	Если ДанныеЛояльности = Неопределено Тогда
		ДанныеЛояльности = ЛояльностьКлиент.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект);
	КонецЕсли;
	Для Каждого Фирма Из ФирмыЗаказа Цикл
		
		СтрокаФирма = СуммыПоФирмам.Добавить();
		СтрокаФирмаОплачено = ТоварыСуммыПоФирмам.НайтиСтроки(Новый Структура("Фирма, СтатусОплаты", Фирма, 1));
		Если СтрокаФирмаОплачено.Количество() Тогда
			СтрокаФирма.СуммаОплачено = СтрокаФирмаОплачено[0].СуммаРеализации;
			СтрокаФирма.СуммаРеализации = СтрокаФирмаОплачено[0].СуммаРеализации + СтрокаФирма.СуммаРеализации;

		КонецЕсли;
		
		СтрокаФирмаНеОплачено = ТоварыСуммыПоФирмам.НайтиСтроки(Новый Структура("Фирма, СтатусОплаты", Фирма, 0));
		Если СтрокаФирмаНеОплачено.Количество() Тогда
			СтрокаФирма.СуммаРеализации = СтрокаФирмаНеОплачено[0].СуммаРеализации + СтрокаФирма.СуммаРеализации;
		КонецЕсли;
		
		СтрокаФирмаКОплате = ТоварыСуммыПоФирмам.НайтиСтроки(Новый Структура("Фирма, СтатусОплаты", Фирма,-1));
		Если СтрокаФирмаКОплате.Количество() Тогда
			СтрокаФирма.СуммаРеализации = СтрокаФирмаКОплате[0].СуммаРеализации + СтрокаФирма.СуммаРеализации;
		КонецЕсли;
		СтрокаФирма.Фирма = Фирма;
		
		СтрокаФирма.ЭтоНашаФирма = Фирма = ФирмаРМ;
		СтрокаФирма.КОплате = СтрокаФирма.СуммаРеализации - СтрокаФирма.СуммаОплачено;
		//{ Говнокод - начало
		БукваФирмы = Лев(Фирма.Наименование,1);
		ТекИтог = ТекИтог;
		Если ДанныеЛояльности.Свойство("Итоги"+БукваФирмы,ТекИтог) Тогда
			ТекИтог.Свойство("КГЛНачислено",СтрокаФирма.КГЛ);	
		КонецЕсли;
		//}
	КонецЦикла;
	
	СуммыПоФирмам.Сортировать("ЭтоНашаФирма УБЫВ");	
	ТабДок.Вывести(Макет.ПолучитьОбласть("Шапка"));
	
	
	Для Каждого стФирма Из СуммыПоФирмам Цикл
		
		ОбластьСтрока = ?(стФирма.ЭтоНашаФирма, Макет.ПолучитьОбласть("СтрокаТекФирма"), Макет.ПолучитьОбласть("СтрокаДругаяФирма"));
		ОбластьСтрока.Параметры.Заполнить(стФирма);
		ОбластьСтрока.Параметры.КОплате = Формат(стФирма.КОплате, "ЧДЦ=2; ЧРГ=; ЧН=' '");
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	Если СуммыПоФирмам.Количество() = 1 Тогда
		
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаДругаяФирма");
		ТабДок.Вывести(ОбластьСтрока);	
	КонецЕсли;
	
	СуммыПоФирмам.Свернуть("","СуммаОплачено, СуммаРеализации, Коплате, КГЛ");
	ОбластьИтог = Макет.ПолучитьОбласть("Итог");
	ОбластьИтог.Параметры.Заполнить(СуммыПоФирмам[0]);
	ОбластьИтог.Параметры.Коплате = Формат(СуммыПоФирмам[0].КОплате, "ЧДЦ=2; ЧРГ=; ЧН=0.00");
	ТабДок.Вывести(ОбластьИтог);
	ТабПоле.Вывести(ТабДок);
КонецФункции

// Устанавливает статус "Закрыт" / "Удален" в ЗаказДопИнф
// Освобождает бэйдж
//
// Возвращает статус 
//	ПеречислениеСсылка.СтатусыЗаказа
Функция ЗарегистрироватьЗавершениеПокупокПоЗаказу(ЗаказОбъектИлиСсылка) Экспорт
	Если ТипЗнч(ЗаказОбъектИлиСсылка) = Тип("ДокументСсылка.Заказ") Тогда
		ЗаказСсылка = ЗаказОбъектИлиСсылка;
		ЗаказОбъект = ЗаказОбъектИлиСсылка;//.ПолучитьОбъект();
	Иначе
		ЗаказСсылка = ЗаказОбъектИлиСсылка.Ссылка;
		ЗаказОбъект = ЗаказОбъектИлиСсылка;
	КонецЕсли;
	//:ЗаказОбъект = Документы.Заказ.СоздатьДокумент();
	ксТрактир.ОсвободитьКартуДоступаОтЗаказа(ЗаказСсылка);
	ЗаказСторнирован = ЗаказОбъект.Товары.Итог("Количество") = 0;
	Статус = ?(ЗаказСторнирован, Перечисления.СтатусыЗаказа.Удален, Перечисления.СтатусыЗаказа.Закрыт);	
	МЗ = РегистрыСведений.ЗаказДопИнф.СоздатьМенеджерЗаписи();
	МЗ.Заказ = ЗаказСсылка;
	МЗ.Прочитать();
	МЗ.ДатаЗакрытия = ТекущаяДата();
	МЗ.Статус = Статус;
	МЗ.Записать(Истина);
	Возврат Статус;
КонецФункции

// Вызывается при неудачной попытке заблокировать заказ
// если заказ захвачен автокассой, предоставляет вариант "перехвата"
Функция СообщитьСброситьЗаказНаАвтокассе(КемЗаблокирован, Текст1 = "", Текст2 = "", ТолькоДляЗаписи = Истина) Экспорт 
	
	Если Текст1 = "" Тогда
		Текст1 = "Не удалось заблокировать заказ";
	КонецЕсли;
	Если Текст2 = "" Тогда
		Текст2 = "Заказ редактируется на РМ " + КемЗаблокирован;
	КонецЕсли;
	
	РабочееМестоАК = Справочники.РабочиеМеста.НайтиПоРеквизиту("ПрофильВхода", КемЗаблокирован);
	КнопкаЗабратьЗаказ = ?(ЗначениеЗаполнено(РабочееМестоАК) И РабочееМестоАК.Тип = ПредопределенноеЗначение("Перечисление.ТипыРМ.Автокасса"), "Забрать заказ", "");
	
	Если ТолькоДляЗаписи Тогда
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Предупреждение", Текст1, Текст2, "", "Esc=ОК", КнопкаЗабратьЗаказ);
	Иначе
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Предупреждение", Текст1, Текст2, "ОК", КнопкаЗабратьЗаказ, "Esc=Отмена");
	КонецЕсли;
	
	Если Ответ = "Отмена" Тогда
		Возврат -1;
	ИначеЕсли Ответ = "Забрать заказ" Тогда
		РегистрыСведений.ОбработкаСобытий.СоздатьЗапись(РабочееМестоАК, , , ПредопределенноеЗначение("Перечисление.ТипыСобытий.СообщениеДействие"), "ГлавнаяФормаАК_СбросЗаказаСоСтандартнойКассы");
		глОжидание.Начало("Заказ не открыт", "Производится попытка закрыть заказ на автокассе.");
		ОбщегоНазначенияКлиент.ОбождатьМиллисекунд(3000);
		глОжидание.Конец();
		Возврат 1;
	ИначеЕсли ТолькоДляЗаписи Тогда 
		Возврат -1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецЕсли