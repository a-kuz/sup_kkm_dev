
// Подключает обработчик ожидания для автозагрузки
//
Процедура ПодключитьАвтозагрузку() Экспорт
	
#Если Клиент Тогда
	Если Константы.АвтообменИспользовать.Получить() Тогда
		
		ПериодПроверки = Константы.АвтообменПериодПроверкиЗагрузки.Получить();
		
		ПодключитьОбработчикОжидания("глАвтозагрузка", 60 * Макс(1,ПериодПроверки) );
		
	Иначе
		
		ОтключитьОбработчикОжидания("глАвтозагрузка");
		
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

// Настройка обмена
//
Процедура одНастроитьПостроитель(ОбработкаОбмена, ТекущееПВД, Построитель)
	
	ДоступностьПостроителя = ЛОЖЬ;
	//Построитель = Новый ПостроительЗапроса;
	
	Если ТекущееПВД = Неопределено
		ИЛИ ТекущееПВД.ЭтоГруппа = ИСТИНА 
		ИЛИ ТекущееПВД.СпособОтбораДанных <> "СтандартнаяВыборка"
		ИЛИ (ТекущееПВД.СсылкаНаУзелОбмена <> Неопределено
		И НЕ ТекущееПВД.СсылкаНаУзелОбмена.Пустая()) Тогда
		
		// отбор не поддерживается
		
	ИначеЕсли ТекущееПВД.ИмяОбъектаДляЗапросаРегистра <> Неопределено Тогда
		
		//Попытка
		//
		//	Свойства	= Менеджеры[ТекущееПВД.ОбъектВыборки];
		//	
		//	Непериодический = НЕ Свойства.Периодический;
		//	ПодчиненныйРегистратору = Свойства.ПодчиненныйРегистратору;
		//	
		//	СтрокаДополненияПолейВыборкиПодчиненРегистратору = ?(НЕ ПодчиненныйРегистратору, ", NULL КАК Активность,
		//	|	NULL КАК Регистратор,
		//	|	NULL КАК НомерСтроки", "");
		//	
		//	СтрокаДополненияПолейВыборкиПериодичность = ?(Непериодический, ", NULL КАК Период", "");
		//	
		//	ИтоговоеОграничениеПоДате = "";
		//	
		//	Если ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
		//		ИтоговоеОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(Свойства, Свойства.ИмяТипа, ТекущееПВД.ИмяОбъектаДляЗапросаРегистра, Ложь);
		//	КонецЕсли;
		//	
		//	Построитель.Текст = "ВЫБРАТЬ Разрешенные
		//			 |	*
		//			 |
		//			 | " + СтрокаДополненияПолейВыборкиПодчиненРегистратору + "
		//			 | " + СтрокаДополненияПолейВыборкиПериодичность + "
		//			 |
		//			 | ИЗ " + ТекущееПВД.ИмяОбъектаДляЗапросаРегистра + "
		//			 |
		//		 	 |" + ИтоговоеОграничениеПоДате;
		//			 
		//			 
		//	Построитель.Параметры.Вставить("ДатаНачала", ДатаНачала);
		//	Построитель.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
		//								 
		//	Построитель.ЗаполнитьНастройки();
		//	ДоступностьПостроителя = Истина;
		//	
		//Исключение
		//	
		//							
		//КонецПопытки;
		
	ИначеЕсли ТекущееПВД.ИмяОбъектаДляЗапроса <> Неопределено Тогда
		
		Свойства	= ОбработкаОбмена.Менеджеры[ТекущееПВД.ОбъектВыборки];
		
		ИтоговоеОграничениеПоДате = "";
		
		Если ОбработкаОбмена.ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
			ИтоговоеОграничениеПоДате = ОбработкаОбмена.ПолучитьСтрокуОграниченияПоДатеДляЗапроса(Свойства, Свойства.ИмяТипа, "_", Ложь);
		КонецЕсли;
		
		Построитель.Текст = "ВЫБРАТЬ Разрешенные _.* ИЗ " + ТекущееПВД.ИмяОбъектаДляЗапроса + " КАК _ 
		|
		|" + ИтоговоеОграничениеПоДате + "
		|
		|{ГДЕ _.Ссылка.* КАК " + СтрЗаменить(ТекущееПВД.ИмяОбъектаДляЗапроса, ".", "_") + "}";
		
		Построитель.Параметры.Вставить("ДатаНачала", ОбработкаОбмена.ДатаНачала);
		Построитель.Параметры.Вставить("ДатаОкончания", ОбработкаОбмена.ДатаОкончания);
		
		ДоступностьПостроителя = Истина;
		
	КонецЕсли;
	
	Если ДоступностьПостроителя Тогда
		
		Построитель.Отбор.Сбросить();
		Если ТекущееПВД.НастройкиПостроителя <> Неопределено Тогда
			
			Попытка
				Построитель.УстановитьНастройки(ТекущееПВД.НастройкиПостроителя);
			Исключение
				ТекущееПВД.НастройкиПостроителя = Неопределено;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА ДАННЫМИ XML

// ЗагрузитьДанные
//
Процедура ЗагрузитьДанныеXML(ЭлементОбменДанными, Сообщать = Ложь) Экспорт
	
	Если ПустаяСтрока(ЭлементОбменДанными.ИмяКаталогаДанныхЗагрузки + ЭлементОбменДанными.ИмяФайлаДанныхЗагрузки) Тогда
		Сообщить("Имя файла данных загрузки не указано!");
		Возврат;
	КонецЕсли;
	
	НайденныеФайлы = НайтиФайлы(ЭлементОбменДанными.ИмяКаталогаДанныхЗагрузки, ЭлементОбменДанными.ИмяФайлаДанныхЗагрузки);
	
	Если Сообщать Тогда
		Сообщить("_______________________________________________________________________________");
		Сообщить("Загрузка файлов по настройке обмена: " + ЭлементОбменДанными.Наименование);
		Если НайденныеФайлы.Количество() = 0 Тогда
			Сообщить("Не обнаружено файлов для загрузки.");
		Иначе
			Сообщить("Обнаружено " + НайденныеФайлы.Количество() + " файл(а,ов) для загрузки.");
		КонецЕсли;
	КонецЕсли;
	
	Для каждого НайденныйФайл Из НайденныеФайлы Цикл
		
		ФайлОбмена = НайденныйФайл;
		Если НЕ ФайлОбмена.Существует() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Сообщать Тогда
			Сообщить(Символы.ПС + "Обработка файла: " + НайденныйФайл.ПолноеИмя);
		КонецЕсли;
		
		Обработка = Обработки.УниверсальныйОбменДаннымиXML.Создать();
		
		Обработка.ИмяФайлаОбмена = НайденныйФайл.ПолноеИмя;
		Обработка.РежимОбмена = "Загрузка";
		Обработка.ПарольДляРаспаковкиФайлаОбмена = ЭлементОбменДанными.ПарольДляРаспаковкиФайлаОбмена;
		Обработка.ВыполнитьЗагрузку();
		
		Если ЭлементОбменДанными.СохранятьАрхивыФайловДанныхПриЗагрузке Тогда
			Архив=Новый ЗаписьZipФайла(ФайлОбмена.Путь + " [Загружен] " + ФайлОбмена.ИмяБезРасширения + ".zip");
			Архив.Добавить(ФайлОбмена.ПолноеИмя, РежимСохраненияПутейZIP.НеСохранятьПути);
			Архив.Записать();
			Если Сообщать Тогда
				Сообщить("Файл данных помещен в архив: " + ФайлОбмена.Путь + "[Загружен] " + ФайлОбмена.ИмяБезРасширения + ".zip");
			КонецЕсли;
		КонецЕсли;
		УдалитьФайлы(ФайлОбмена.ПолноеИмя);
		Если Сообщать И НЕ ЭлементОбменДанными.СохранятьАрхивыФайловДанныхПриЗагрузке Тогда
			Сообщить("Файл данных обработан и удален: " + НайденныйФайл.ПолноеИмя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// ВыгрузитьДанные
//
Процедура ВыгрузитьДанныеXML(ЭлементОбменДанными, СтруктураОтбора = Неопределено, ДатаНачала = Неопределено, ДатаОкончания = Неопределено) Экспорт
	
	Если СтруктураОтбора = Неопределено Тогда
		СтруктураОтбора = Новый Структура;
	КонецЕсли;
	
	УникальныйИдентификатор        = Новый УникальныйИдентификатор();
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";
	
	Если ЭлементОбменДанными.ВидОбменаСтрокой = "Произвольный" Тогда
		МакетПравилОбмена              = ЭлементОбменДанными.ХранилищеПравилВыгрузки.Получить();
	Иначе
		ИмяМакета = ЭлементОбменДанными.ВидОбменаСтрокой;
		Если Метаданные.Справочники.НастройкиОбменовДаннымиXML.Макеты.Найти(ИмяМакета) = Неопределено Тогда
			Сообщить("Нет макета для вида обмена: " + ЭлементОбменДанными.ВидОбмена);
			Возврат;
		КонецЕсли;
		МакетПравилОбмена              = Справочники.НастройкиОбменовДаннымиXML.ПолучитьМакет(ИмяМакета);
	КонецЕсли;
	
	Если МакетПравилОбмена = Неопределено Тогда
		Сообщить("Не заданы правила конвертации.");
		Возврат;
	КонецЕсли;
	
	МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
	Источник = ИмяВременногоФайлаПравилОбмена;

	Если НЕ ЭлементОбменДанными.НепосредственноеЧтениеВИБПриемнике
		И ПустаяСтрока(ЭлементОбменДанными.ПутьКФайлуДанныхВыгрузки) Тогда
		Сообщить("Путь к файлу данных не указан!");
		Возврат;
	КонецЕсли;
	
	Обработка = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	
	ЗаполняемыеСвойства = "АрхивироватьФайл, АутентификацияWindowsИнформационнойБазыДляПодключения,
	|ВерсияПлатформыИнформационнойБазыДляПодключения, ИмяИнформационнойБазыНаСервереДляПодключения,
	|ИмяСервераИнформационнойБазыДляПодключения, КаталогИнформационнойБазыДляПодключения,
	|НепосредственноеЧтениеВИБПриемнике, ПарольДляРаспаковкиФайлаОбмена, ПарольДляСжатияФайлаОбмена,
	|ПарольИнформационнойБазыДляПодключения, ПользовательИнформационнойБазыДляПодключения,
	|ТипИнформационнойБазыДляПодключения";
	ЗаполнитьЗначенияСвойств(Обработка, ЭлементОбменДанными, ЗаполняемыеСвойства);
	Обработка.ИмяФайлаПравилОбмена	= Источник;
	
	Если ЭлементОбменДанными.ДобавлятьДатуВремяКИмениФайлаПриВыгрузке Тогда
		Обработка.ИмяФайлаОбмена		= ОбменДаннымиДобавитьКИмениФайлаДату(ЭлементОбменДанными.ПутьКФайлуДанныхВыгрузки);
	Иначе
		Обработка.ИмяФайлаОбмена		= ЭлементОбменДанными.ПутьКФайлуДанныхВыгрузки;
	КонецЕсли;
	
	Обработка.РежимОбмена			= "Выгрузка";
	
	// Заполнение даты начала выгрузки
	мДатаНачала = НачалоМесяца(ТекущаяДата());
	Если ЭлементОбменДанными.ПериодичностьВыгрузки = 1 Тогда
		мДатаНачала = НачалоДня(ТекущаяДата());
	ИначеЕсли ЭлементОбменДанными.ПериодичностьВыгрузки = 2 Тогда
		мДатаНачала = НачалоНедели(ТекущаяДата());
	ИначеЕсли ЭлементОбменДанными.ПериодичностьВыгрузки = 3 Тогда
		мДатаНачала = НачалоДня(ТекущаяДата() - 7 * 24 * 60 * 60);
	ИначеЕсли ЭлементОбменДанными.ПериодичностьВыгрузки = 4 Тогда
		мДатаНачала = НачалоМесяца(ТекущаяДата());
	ИначеЕсли ЭлементОбменДанными.ПериодичностьВыгрузки = 5 Тогда
		мДатаНачала = НачалоДня(ДобавитьМесяц(ТекущаяДата(), -1));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда 
		Обработка.ДатаОкончания = ДатаОкончания;
		Обработка.ДатаНачала = ДатаНачала;
	Иначе
		Обработка.ДатаНачала			= мДатаНачала;

		// Заполнение даты окончания выгрузки
		Обработка.ДатаОкончания			= КонецДня(ТекущаяДата());
	КонецЕсли;
	
	
	
	
	Обработка.ЗагрузитьПравилаОбмена();
	
	Если ЭлементОбменДанными.ПериодичностьВыгрузки = 6
		И Обработка.Параметры.Свойство("ВыгружатьТолькоИзмененныеОбъекты")
		И Обработка.Параметры.Свойство("УзелОбмена") Тогда
		
		Обработка.ДатаНачала = Дата(1, 1, 1);
		Обработка.Параметры.ВыгружатьТолькоИзмененныеОбъекты = Истина;
		Обработка.Параметры.УзелОбмена = ЭлементОбменДанными.УзелИнформационнойБазы;
		
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);  // Удаляем временный файл правил
	Исключение КонецПопытки;
	////////////////////////////////////////////////////////////////
	
	Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
			
			Если ЭлементСтруктуры.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущееПВД = Обработка.ТаблицаПравилВыгрузки.Строки.Найти(ЭлементСтруктуры.Ключ, "Имя", Истина);
			
			Если НЕ ТекущееПВД = Неопределено Тогда
				Построитель = Новый ПостроительОтчета;
				одНастроитьПостроитель(Обработка, ТекущееПВД, Построитель);
				
				ОтборПостроителя = Построитель.Отбор.Добавить(СтрЗаменить(ТекущееПВД.ИмяОбъектаДляЗапроса, ".", "_"));
				ОтборПостроителя.ВидСравнения	= ВидСравнения.ВСписке;
				ОтборПостроителя.Значение		= ЭлементСтруктуры.Значение;
				ОтборПостроителя.Использование	= Истина;
				
				ТекущееПВД.НастройкиПостроителя = Построитель.ПолучитьНастройки();
				ТекущееПВД.ИспользоватьОтбор    = ИСТИНА;
				
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	////////////////////////////////////////////////////////////////
	
	Обработка.ВыполнитьВыгрузку();
	
	ФайлФлаг = Новый Файл(ЭлементОбменДанными.ПутьКФайлуФлагу);
	
	Если ФайлФлаг.Существует() Тогда
		Попытка
			УдалитьФайлы(ФайлФлаг.ПолноеИмя);
		Исключение
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ()

// Производит обмен данными
//
Процедура ПроизвестиОбменДаннымиXML(НастройкаОбмена = Неопределено) Экспорт
	
	Если НастройкаОбмена = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ОбменДанными.Ссылка,
		|	ОбменДанными.Наименование,
		|	ОбменДанными.ВыгружатьДанныеПриАвтообмене,
		|	ОбменДанными.ВыгрузкаТолькоПриНаличииФлага,
		|	ОбменДанными.ЗагружатьДанныеПриАвтообмене,
		|	ОбменДанными.ПутьКФайлуФлагуВыгрузки
		|ИЗ
		|	Справочник.НастройкиОбменовДаннымиXML КАК ОбменДанными
		|ГДЕ
		|	ОбменДанными.ПометкаУдаления = ложь
		|	И ОбменДанными.Автообмен = ИСТИНА";
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл

			Если Выборка.ВыгружатьДанныеПриАвтообмене Тогда
				
				Если Выборка.ВыгрузкаТолькоПриНаличииФлага Тогда
					ФайлФлаг = Новый Файл(Выборка.ПутьКФайлуФлагуВыгрузки);
					
					Если НЕ ФайлФлаг.Существует() Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				ВыгрузитьДанныеXML(Выборка.Ссылка);
				
			КонецЕсли;
			
			Если Выборка.ЗагружатьДанныеПриАвтообмене Тогда
				ЗагрузитьДанныеXML(Выборка.Ссылка);
			КонецЕсли;
		
		КонецЦикла;
	Иначе
		
		Если НастройкаОбмена.ВыгружатьДанныеПриАвтообмене Тогда
			
			Если НастройкаОбмена.ВыгрузкаТолькоПриНаличииФлага Тогда
				ФайлФлаг = Новый Файл(НастройкаОбмена.ПутьКФайлуФлагуВыгрузки);
				
				Если НЕ ФайлФлаг.Существует() Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ВыгрузитьДанныеXML(НастройкаОбмена.Ссылка);
			
		КонецЕсли;
		
		Если НастройкаОбмена.ЗагружатьДанныеПриАвтообмене Тогда
			ЗагрузитьДанныеXML(НастройкаОбмена.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбменДаннымиДобавитьКИмениФайлаДату(ПолноеИмяФайла) Экспорт
	
	СтруктураИмениФайла = Новый Файл(ПолноеИмяФайла);

	ДополненноеИмяФайла = СтруктураИмениФайла.Путь
						+ СтруктураИмениФайла.ИмяБезРасширения
						+ Формат(ТекущаяДата(), "ДФ=_yyyy_MM_dd_H_mm_ss")
						+ СтруктураИмениФайла.Расширение;
	
	Возврат ДополненноеИмяФайла;
	
КонецФункции

// Определяет признак наличия в конфигурации плана обмена для настройки обмена
//
// Параметры
//  ВидОбменаСтрокой  - Строка - Строковое представление вида обмена
//
// Возвращаемое значение:
//   <Булево>   - признак наличия в конфигурации плана обмена для настройки обмена
//
Функция ЕстьПланОбменаДляНастройкиОбмена(ВидОбменаСтрокой) Экспорт

	ЕстьПланОбмена = Ложь;
	
	Для каждого ТекущийПланОбмена Из Метаданные.ПланыОбмена Цикл
		Если Лев(ВидОбменаСтрокой, СтрДлина(ТекущийПланОбмена.Имя)) = СокрЛП(ТекущийПланОбмена.Имя) Тогда
			ЕстьПланОбмена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьПланОбмена;
	
КонецФункции // ()
