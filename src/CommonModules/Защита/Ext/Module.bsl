#Если НЕ ТонкийКлиент Тогда
      	
Функция ПолучитьТипЦен(МестоРеализации="") Экспорт
	Возврат Справочники.ТипыЦен.Розничная;
КонецФункции

Функция ОпределитьТипДня(ДатаРасчета) Экспорт
	Возврат Справочники.ТипыДней.ПустаяСсылка();	
КонецФункции  

Процедура ПослатьСобытиеВидеонаблюдению(Событие, Пользователь, Комментарий, Парам1, Парам2, Парам3, Парам4, Парам5) Экспорт
КонецПроцедуры

// Вызывается из монитора марок при отметке поваром готовности марки
// Скорее всего, процедура пишет/удаляет в/из регистра Марки и ЗаказТоварыДопИнф
//
// Параметры:
//	КодПодтверждения  	- Строка - ЗаказТоварыДопИнф.КодПодтверждения
//                 
//  Статус  			- ПеречислениеСсылка.СтатусыПозицийЗаказа - ЗаказТоварыДопИнф.Статус
//
// 	Парам3				- Булево - Назначение не ясно 	
Процедура ПодтверждениеГотовности(КодПодтверждения, Статус, Парам3 = Ложь) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаказТоварыДопИнф.Заказ,
	                      |	ЗаказТоварыДопИнф.НомерМарки,
	                      |	ЗаказТоварыДопИнф.ВремяЗаказано,
	                      |	ЗаказТоварыДопИнф.ИдСтроки
	                      |ИЗ
	                      |	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	                      |ГДЕ
	                      |	ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	                      |	И ЗаказТоварыДопИнф.КодПодтверждения = &КодПодтверждения");
	Запрос.УстановитьПараметр("КодПодтверждения", КодПодтверждения);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокиТовара = Рез.Выгрузить();
	Для каждого СтрокаТовара Из СтрокиТовара Цикл
		Заказ = СтрокаТовара.Заказ;
		Марка = СтрокаТовара.НомерМарки;
		ВремяЗаказано = СтрокаТовара.ВремяЗаказано;
		ИдСтроки = СтрокаТовара.ИдСтроки;
		
		НЗ = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьНаборЗаписей();
		НЗ.Отбор.Заказ.Установить(Заказ);
		НЗ.Отбор.ИдСтроки.Установить(ИдСтроки);
		НЗ.Прочитать();
		
		Для Каждого Запись ИЗ НЗ Цикл
			Запись.ВремяГотово = ТекущаяДата();
			Запись.Статус = Перечисления.СтатусыПозицийЗаказа.Готово;
		КонецЦикла;
		
		Нз.Записать(); 
		
		НЗ = РегистрыСведений.Марки.СоздатьНаборЗаписей();
		НЗ.Отбор.Заказ.Установить(Заказ);
		НЗ.Отбор.НомерМарки.Установить(Марка);
		НЗ.Прочитать();
		
		Для Каждого Запись ИЗ НЗ Цикл
			Запись.КВыдаче = 1;
			Норма = Секунда(Запись.НормативноеВремяВыдачи) - Секунда(ВремяЗаказано);
			Запись.НормативноеВремяВыдачи = ТекущаяДата() + 600;
			Запись.ПервоеНормативноеВремяВыдачи = Запись.НормативноеВремяВыдачи;
		КонецЦикла;
		
		Нз.Записать(); 
	КонецЦикла; 
КонецПроцедуры 

// Закрывает марки
// Скорее всего, процедура пишет/удаляет в/из регистра Марки и ЗаказТоварыДопИнф
//
// Параметры:
//	КодПодтверждения  	- Строка - ЗаказТоварыДопИнф.КодПодтверждения
//                 
//  Заказ  				- ДокументСсылка.Заказ
//
// 	Парам3				- Булево - Назначение не ясно 	
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция ПодтверждениеВыдачи(ИдСтроки, Заказ, Парам3 = Ложь) Экспорт
	
	СписокКодовПодтверждения = Новый СписокЗначений;
	
	НЗ = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьНаборЗаписей();
	НЗ.Отбор.Заказ.Установить(Заказ);
	НЗ.Отбор.ИдСтроки.Установить(ИдСтроки);
	НЗ.Прочитать();
	
	Для Каждого Запись ИЗ НЗ Цикл
		Запись.ВремяВыдано = ТекущаяДата();
		Запись.Статус = Перечисления.СтатусыПозицийЗаказа.Выдано;
		Если СписокКодовПодтверждения.НайтиПоЗначению(Запись.НомерМарки) = Неопределено Тогда
			СписокКодовПодтверждения.Добавить(Запись.НомерМарки);
		КонецЕсли;
		
	КонецЦикла;
	
	Нз.Записать(); 
	
	НЗ.Отбор.ИдСтроки.Установить(,Ложь);
	НЗ.Прочитать();
	
	Для Каждого Запись ИЗ НЗ Цикл
		Если Запись.ИдСтрокиВладельца = ИдСтроки Тогда
			Запись.ВремяВыдано = ТекущаяДата();
			Запись.Статус = Перечисления.СтатусыПозицийЗаказа.Выдано;
			Если СписокКодовПодтверждения.НайтиПоЗначению(Запись.НомерМарки) = Неопределено Тогда
				СписокКодовПодтверждения.Добавить(Запись.НомерМарки);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
	Для каждого Т Из СписокКодовПодтверждения Цикл
		НЗ = РегистрыСведений.Марки.СоздатьНаборЗаписей();
		НЗ.Отбор.Заказ.Установить(Заказ);
		НЗ.Отбор.НомерМарки.Установить(Т.Значение);
		НЗ.Записать(Истина);
	КонецЦикла; 
КонецФункции // ПодтверждениеВыдачи()
 
Функция ЗапросПлатежнойСистемы(ТипОперации, Сумма, НомерСмены, НомерЗаказа, СсылочныйНомер, ДанныеКарты, ВариантОплаты, ПротоколРасчетовОбъект = Неопределено) Экспорт
	ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
	Обработка_ПС = Обработка_ПС;
	РезультатИнит = ИнициализацияТО(ОбъектТерминал,Обработка_ПС,глПараметрыРМ);
	ВыходныеПараметры = ВыходныеПараметры;
	
	Попытка
		Если ТипОперации = "Возврат" Тогда
			Обработка_ПС.ВыполнитьКоманду("ВернутьПлатежПоПлатежнойКарте",Новый Структура("Сумма", Сумма), ВыходныеПараметры);
		Иначе
			Обработка_ПС.ВыполнитьКоманду("ОплатитьПлатежнойКартой",Новый Структура("Сумма", Сумма), ВыходныеПараметры);
		КонецЕсли;
		
	Исключение
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
		Возврат Ложь;
	КонецПопытки;
	
	Если ВыходныеПараметры.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
	идТранзакцииПлатежнойСистемы = ВыходныеПараметры[1];
	//ПротоколРасчетовОбъект.идТранзакцииПлатежнойСистемы = идТранзакцииПлатежнойСистемы;
	СсылочныйНомер = идТранзакцииПлатежнойСистемы;
	Строки = Строки;
	Попытка
		Строки = ВыходныеПараметры[2].Строки;
		//ПротоколРасчетовОбъект.Слип = ПротоколРасчетовОбъект.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
		ДанныеКарты = ПолучитьСтрокуИзМассива(Строки, Символы.ПС);		
	Исключение
		Если ТипЗнч(Строки) <> Тип("Массив") Тогда
			Строки = Массив("Ошибка при получении слип чека от терминала");
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	//ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетовОбъект, "Объект.Записать()");
	
	// Печать слипчека
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", Строки);
	ПараметрыВыходные = ПараметрыВыходные;
	Попытка
		ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
		Обработка_ККМ = Обработка_ККМ;
		ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
		Параметры = Новый Структура;
		Параметры.Вставить("Строки", Строки);
		Параметры.Вставить("ТипШрифта", 0);
		ПараметрыВыходные = Новый Массив;                  
		Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",Параметры,ПараметрыВыходные);
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка,, , "Заказ № " + НомерЗаказа + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	

	Возврат Истина;	
КонецФункции

Функция ОтчетПлатежнойСистемы() Экспорт
	Возврат Истина;
КонецФункции
	
Функция СуммаВнесеннойПредоплаты(Заказ, ЗаказДопИнф) Экспорт
	Возврат 0;
КонецФункции

Функция КонтрольнаяСтрокаСпецифики(СтрокиДерева) Экспорт
	//:СтрокиДерева = Новый ДеревоЗначений;
	Попытка
		 стр = ""+(ТекущаяУниверсальнаяДатаВМиллисекундах()%1000) + ЗначениеВСтрокуВнутр(СтрокиДерева.Строки) ;
	Исключение
		 стр = ""+(ТекущаяУниверсальнаяДатаВМиллисекундах()%1000)+ ЗначениеВСтрокуВнутр(СтрокиДерева);
	КонецПопытки;
	Возврат стр;
КонецФункции

#КонецЕсли