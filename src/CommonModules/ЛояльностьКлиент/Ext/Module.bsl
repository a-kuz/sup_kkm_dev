
 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Работа_с_JSON_ОСТАВЛЕНЫ_ДЛЯ_САШИ

Функция СформироватьJSON(Данные) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	//Если Отладка Тогда
	//	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, Символы.Таб);
	//Иначе
	//	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	//КонецЕсли;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	//ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписатьДанныеВJSON(ЗаписьJSON, Данные);
	
	//ЗаписьJSON.ЗаписатьКонецОбъекта();
	СтрокаJSON = ЗаписьJSON.Закрыть();
		
	Возврат СтрокаJSON;
КонецФункции

Функция ЗаписатьДанныеВJSON(ЗаписьJSON, Данные)
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для каждого ТекущиеДанные Из Данные Цикл
			ЗаписьJSON.ЗаписатьИмяСвойства(ТекущиеДанные.Ключ);
			ЗаписатьДанныеВJSON(ЗаписьJSON, ТекущиеДанные.Значение);
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для каждого ТекущиеДанные Из Данные Цикл
			ЗаписатьДанныеВJSON(ЗаписьJSON, ТекущиеДанные);
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для каждого ТекущиеДанные Из Данные Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			Для каждого ТекущаяКолонка Из Данные.Колонки Цикл
				ЗаписьJSON.ЗаписатьИмяСвойства(ТекущаяКолонка.Имя);
				ЗаписатьДанныеВJSON(ЗаписьJSON, ТекущиеДанные[ТекущаяКолонка.Имя]);
			КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
	Иначе
		Если Данные = NULL Тогда
			ЗаписьJSON.ЗаписатьЗначение(Неопределено);
		ИначеЕсли ТипЗнч(Данные) = Тип("Дата") Тогда
			ЗаписьJSON.ЗаписатьЗначение(Формат(Данные, "ДФ='dd/MM/yy HH:mm:ss'"));
		ИначеЕсли ТипЗнч(Данные) = Тип("Строка") Тогда
			ДанныеКЗаписи = СтрЗаменить(Данные, "'", "&quot;");
			ДанныеКЗаписи = СтрЗаменить(ДанныеКЗаписи, "[", "&#91;");
			ДанныеКЗаписи = СтрЗаменить(ДанныеКЗаписи, "]", "&#93;");
				
			ЗаписьJSON.ЗаписатьЗначение(ДанныеКЗаписи);
		Иначе
			ЗаписьJSON.ЗаписатьЗначение(Данные);
		КонецЕсли;		
	КонецЕсли;
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработкаЗаказаЛояльностью

// Процедура осуществляет процедуры открытия заказа в лояльности
Процедура ОткрытьЗаказ(ЗаказОбъект) Экспорт
	
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(глРабочееМесто);
	ЛояльностьКлиентСервер.ОткрытьЗаказ(ЗаказОбъект, Тест);
	
	//ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "начало (заказ="+ЗаказОбъект.Номер+")");

	//ВерсияЛояльности = ЛояльностьКлиентСервер.ВерсияЛояльности(Тест);
	// ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	//
	//ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONДляОткрытияЗаказа_Протокол4(ЗаказОбъект);
	//Если ПараметрыЗапроса.Ошибка Тогда
	//	ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
	//	Возврат;
	//КонецЕсли;
	//
	//ОтправкаУспешна = Ложь;
	//
	//Попытка
	//	ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "отправка запроса (текст="+ПараметрыЗапроса.ТекстЗапроса+")");
	//	
	//	ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
	//	ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
	//Исключение
	//КонецПопытки;
	//
	//Если НЕ ОтправкаУспешна Тогда
	//	ОписаниеОшибки = "";
	//	Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
	//		ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
	//	КонецЕсли;
	//	ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "ошибка отправки (ответ: "+ОписаниеОшибки+")");
	//КонецЕсли;
	//
	//ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
	//ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "распарсен ответ");
	//
	//Если ОтправкаУспешна И ДанныеОтвета.err <> 0 Тогда
	//	ЛояльностьКлиентСервер.Логирование(1, "открытие заказа", "в ответе ошибка:"+ДанныеОтвета.err_msg);
	//КонецЕсли;	
	//
	//Лояльность.ОбновитьАкцииГостяПоНомеруКарты(ЗаказОбъект.НомерКартыЛояльности, ЗаказОбъект.Ссылка, Тест);
	//ДанныеЛояльности = ЛояльностьКлиентСервер.ПолучитьАкцииГостяПоЗаказу(ЗаказОбъект, Тест);
	//ЛояльностьКлиентСервер.Логирование(1, "акции", ЛояльностьКлиентСервер.СформироватьJSON(ДанныеЛояльности));
	//ЛояльностьКлиентСервер.ЗаполнитьЗаказПоДаннымАкцийГостя(ЗаказОбъект, ДанныеЛояльности);
	//
	//ПараметрыЗадания = Новый Массив;
	//ПараметрыЗадания.Добавить(ЗаказОбъект.НомерКартыЛояльности);
	//ПараметрыЗадания.Добавить(ЗаказОбъект.Ссылка);
	//ПараметрыЗадания.Добавить(Тест);
	//ФоновыеЗадания.Выполнить("Лояльность.ОбновитьДанныеГостяПоНомеруКарты", ПараметрыЗадания, Строка(Новый УникальныйИдентификатор()), "Обновление данных гостя");
	////ФоновыеЗадания.Выполнить("Лояльность.ОбновитьАкцииГостяПоНомеруКарты", ПараметрыЗадания, Строка(Новый УникальныйИдентификатор()), "Обновление данных гостя");
	//
	////Если ЗаказОбъект.Товары.Количество()>0 Тогда
	////	ПараметрыЗадания = Новый Массив;
	////	ПараметрыЗадания.Добавить(ЗаказОбъект.НомерКартыЛояльности);
	////	ПараметрыЗадания.Добавить(Тест);
	////	ФоновыеЗадания.Выполнить("Лояльность.ОбновитьПредварительныйРасчетЗаказа", ПараметрыЗадания, Строка(Новый УникальныйИдентификатор()), "Обновление данных гостя");
	////КонецЕсли;
	
КонецПроцедуры

Функция РасчетЧека(ЗаказОбъект, ПротоколОбъект=Неопределено) Экспорт
	
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(глРабочееМесто);//ЗаказОбъект.РабочееМесто);
	ВерсияЛояльности = ЛояльностьКлиентСервер.ВерсияЛояльности(Тест);
 	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	
	Если ВерсияПротокола < 3 Тогда
		// Нет тестового режима. Настройки берутся из доп.регистра для ИБ
		Возврат РасчетЧека_Протокол2(ЗаказОбъект, Тест);
	ИначеЕсли ВерсияПротокола < 4 Тогда
		ТипРМ = глРабочееМесто.Тип;
		Если ТипРМ = ПредопределенноеЗначение("Перечисление.ТипыРМ.Автокасса") Тогда
			Возврат РасчетЧека_Автокасса_Протокол3(ЗаказОбъект, Тест);
		Иначе
			Возврат РасчетЧека_Протокол3(ЗаказОбъект, Тест);
		КонецЕсли;
	ИначеЕсли ВерсияПротокола = 4 Тогда
		ТипРМ = глРабочееМесто.Тип;
		Если ТипРМ = ПредопределенноеЗначение("Перечисление.ТипыРМ.Автокасса") Тогда
			Возврат РасчетЧека_Автокасса_Протокол4(ЗаказОбъект, Тест);
		Иначе
			Возврат РасчетЧека_Протокол4(ЗаказОбъект, ПротоколОбъект, Тест);
		КонецЕсли;
	ИначеЕсли ВерсияПротокола = 5 Тогда
		ТипРМ = глРабочееМесто.Тип;
		Если ТипРМ = ПредопределенноеЗначение("Перечисление.ТипыРМ.Автокасса") Тогда
			Возврат РасчетЧека_Автокасса_Протокол5(ЗаказОбъект, Тест);
		Иначе
			Возврат РасчетЧека_Протокол5(ЗаказОбъект, ПротоколОбъект, Тест);
		КонецЕсли;
	Иначе
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка","Не установлена версия лояльности!","","Вернуться в чек","");
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Ошибка"		, -1);
		СтруктураВозврата.Вставить("ТекстОшибки", "Не установлена версия лояльности!");
		СтруктураВозврата.Вставить("Результат", Неопределено);
		СтруктураВозврата.Вставить("Успех"		, Ложь);
		СтруктураВозврата.Вставить("Параметр"	, "Возврат в чек");
				
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции

Функция РасчетЧека_Автокасса_Протокол5(ЗаказОбъект, Тест)
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "начало (заказ="+ЗаказОбъект.Номер+")");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"		, 0);
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	СтруктураВозврата.Вставить("Результат", Неопределено);
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	ЗаказОбъект.ОбработанСистемойЛояльности = 0;
	//0		- обработан на центральном сервисе
	//1		- обработан в локальном сервисе
	//2		- не обработан
	
	ЗаказОбъект.ТипЧекаЛояльность = 0;
	
	СтруктураАСКов	= Новый Структура;
	ДанныеОтвета	= Неопределено;
	Заказ			= Неопределено;
	ЗакончитьРасчет = Ложь;
	НоваяКарта		= Ложь;
	
	РежимОтправки	= 0; // 0 - в Центр, 1 - в Локальный
	ОтправкаУспешна	= Ложь;
	
	ЕстьКупоны		= (ЗаказОбъект.Купоны.Количество() > 0);
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
		
	ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONДляРасчетаЗаказа_Протокол5(ЗаказОбъект,, СтруктураАСКов);
	Если ПараметрыЗапроса.Ошибка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
		СтруктураВозврата.Ошибка = -1;
		СтруктураВозврата.ТекстОшибки = "Нет связи с принтером кассы";
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ОтправкаУспешна = Ложь;
	
	Попытка
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "отправка запроса автокасса (Режим="+?(РежимОтправки=0,"центр","локальный")+",текст="+ПараметрыЗапроса.ТекстЗапроса+")");
		
		ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
		ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
	Исключение
	КонецПопытки;
	
	Если НЕ ОтправкаУспешна Тогда
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки автокасса (Режим="+?(РежимОтправки=0,"центр","локальный")+",ответ: "+ОписаниеОшибки+")");
		
		// сервис недоступен или не смог обработать запрос
		ОтправкаУспешна = Ложь;
	КонецЕсли;			
		
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если ОтправкаУспешна Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "получен ответ:"+ОтветСервера.Ответ);
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтправкаУспешна Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "Извините нет связи");
		
		СтруктураВозврата.Ошибка = -1;
		СтруктураВозврата.ТекстОшибки = "Извините нет связи";
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
	ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "распарсен ответ");
	
	ДанныеОтвета.Свойство("order", Заказ);
	//ДанныеОтвета.Свойство("ask"	, СтруктураАСКов);
	ЗаказОбъект.ИдентификаторЛояльности = Заказ.request_id;
	ЗаказОбъект.ОбработанСистемойЛояльности = 1;
	ЗаказОбъект.НомерКартыЛояльности = Заказ.card_number;
	
	//Если ЕстьКупоны И ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И НЕ ПустаяСтрока(Заказ.card_number) Тогда
	//	// получаем номер карты из ответа
	//	ЗаказОбъект.НомерКартыЛояльности = Заказ.card_number;			
	//КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК КОТОРЫЕ ВЕРНУЛА ЛОЯЛЬНОСТЬ
	Если ДанныеОтвета.err <> 0 Тогда
		СтруктураВозврата.Ошибка = ДанныеОтвета.err;
		СтруктураВозврата.ТекстОшибки = ДанныеОтвета.err_msg;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Результат = Заказ;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция РасчетЧека_Автокасса_Протокол4(ЗаказОбъект, Тест)
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "начало (заказ="+ЗаказОбъект.Номер+")");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"		, 0);
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	СтруктураВозврата.Вставить("Результат", Неопределено);
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	ЗаказОбъект.ОбработанСистемойЛояльности = 0;
	//0		- обработан на центральном сервисе
	//1		- обработан в локальном сервисе
	//2		- не обработан
	
	ЗаказОбъект.ТипЧекаЛояльность = 0;
	
	СтруктураАСКов	= Новый Структура;
	ДанныеОтвета	= Неопределено;
	Заказ			= Неопределено;
	ЗакончитьРасчет = Ложь;
	НоваяКарта		= Ложь;
	
	РежимОтправки	= 0; // 0 - в Центр, 1 - в Локальный
	ОтправкаУспешна	= Ложь;
	
	ЕстьКупоны		= (ЗаказОбъект.Купоны.Количество() > 0);
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
		
	ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONДляРасчетаЗаказа_Протокол4(ЗаказОбъект, ,СтруктураАСКов);
	Если ПараметрыЗапроса.Ошибка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
		СтруктураВозврата.Ошибка = -1;
		СтруктураВозврата.ТекстОшибки = "Нет связи с принтером кассы";
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ОтправкаУспешна = Ложь;
	
	Попытка
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "отправка запроса автокасса (Режим="+?(РежимОтправки=0,"центр","локальный")+",текст="+ПараметрыЗапроса.ТекстЗапроса+")");
		
		ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
		ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
	Исключение
	КонецПопытки;
	
	Если НЕ ОтправкаУспешна Тогда
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки автокасса (Режим="+?(РежимОтправки=0,"центр","локальный")+",ответ: "+ОписаниеОшибки+")");
		
		// сервис недоступен или не смог обработать запрос
		ОтправкаУспешна = Ложь;
	КонецЕсли;			
		
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если ОтправкаУспешна Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "получен ответ:"+ОтветСервера.Ответ);
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтправкаУспешна Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "Извините нет связи");
		
		СтруктураВозврата.Ошибка = -1;
		СтруктураВозврата.ТекстОшибки = "Извините нет связи";
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
	ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "распарсен ответ");
	
	ДанныеОтвета.Свойство("order", Заказ);
	//ДанныеОтвета.Свойство("ask"	, СтруктураАСКов);
	ЗаказОбъект.ИдентификаторЛояльности = Заказ.request_id;
	ЗаказОбъект.ОбработанСистемойЛояльности = 1;
	ЗаказОбъект.НомерКартыЛояльности = Заказ.card_number;
	
	//Если ЕстьКупоны И ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И НЕ ПустаяСтрока(Заказ.card_number) Тогда
	//	// получаем номер карты из ответа
	//	ЗаказОбъект.НомерКартыЛояльности = Заказ.card_number;			
	//КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК КОТОРЫЕ ВЕРНУЛА ЛОЯЛЬНОСТЬ
	Если ДанныеОтвета.err <> 0 Тогда
		СтруктураВозврата.Ошибка = ДанныеОтвета.err;
		СтруктураВозврата.ТекстОшибки = ДанныеОтвета.err_msg;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Результат = Заказ;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция РасчетЧека_Автокасса_Протокол3(ЗаказОбъект, Тест)
	
	ТипЗапроса = "PRESALE";
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "начало (заказ="+ЗаказОбъект.Номер+")");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"		, 0);
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	СтруктураВозврата.Вставить("Результат", Неопределено);
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	ЗаказОбъект.ОбработанСистемойЛояльности = 0;
	//0		- обработан на центральном сервисе
	//1		- обработан в локальном сервисе
	//2		- не обработан
	
	ЗаказОбъект.ТипЧекаЛояльность = 0;
	
	СтруктураАСКов	= Новый Структура;
	ДанныеОтвета	= Неопределено;
	Заказ			= Неопределено;
	ЗакончитьРасчет = Ложь;
	НоваяКарта		= Ложь;
	
	РежимОтправки	= 0; // 0 - в Центр, 1 - в Локальный
	ОтправкаУспешна	= Ложь;
	
	ЕстьКупоны		= (ЗаказОбъект.Купоны.Количество() > 0);
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
		
	ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONПоЗаказу_Протокол3("PRESALE", ЗаказОбъект, ЗаказОбъект.ТипЧекаЛояльность, СтруктураАСКов);
	Если ПараметрыЗапроса.Ошибка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
		СтруктураВозврата.Ошибка = -1;
		СтруктураВозврата.ТекстОшибки = "Нет связи с принтером кассы";
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ОтправкаУспешна = Ложь;
	
	Попытка
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "отправка запроса автокасса (Режим="+?(РежимОтправки=0,"центр","локальный")+",текст="+ПараметрыЗапроса.ТекстЗапроса+")");
		
		ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
		ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
	Исключение
	КонецПопытки;
	
	Если НЕ ОтправкаУспешна Тогда
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки автокасса (Режим="+?(РежимОтправки=0,"центр","локальный")+",ответ: "+ОписаниеОшибки+")");
		
		// сервис недоступен или не смог обработать запрос
		ОтправкаУспешна = Ложь;
	КонецЕсли;			
		
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если ОтправкаУспешна Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "получен ответ:"+ОтветСервера.Ответ);
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ОтправкаУспешна Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "Извините нет связи");
		
		СтруктураВозврата.Ошибка = -1;
		СтруктураВозврата.ТекстОшибки = "Извините нет связи";
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON_1С(ОтветСервера.Ответ);
	ЛояльностьКлиентСервер.Логирование(1, "расчет автокасса", "распарсен ответ");
	
	ДанныеОтвета.Свойство("order", Заказ);
	//ДанныеОтвета.Свойство("ask"	, СтруктураАСКов);
	//ЗаказОбъект.ИдентификаторЛояльности = ЛояльностьКлиентСервер.СформироватьИдентификаторЛояльности(Чек, Регион);//!!!
	ЗаказОбъект.ОбработанСистемойЛояльности = 1;
	ЗаказОбъект.НомерКартыЛояльности = Заказ.card_number;
	
	//Если ЕстьКупоны И ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И НЕ ПустаяСтрока(Заказ.card_number) Тогда
	//	// получаем номер карты из ответа
	//	ЗаказОбъект.НомерКартыЛояльности = Заказ.card_number;			
	//КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК КОТОРЫЕ ВЕРНУЛА ЛОЯЛЬНОСТЬ
	Если ДанныеОтвета.err <> 0 Тогда
		СтруктураВозврата.Ошибка = ДанныеОтвета.err;
		СтруктураВозврата.ТекстОшибки = ДанныеОтвета.err_msg;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	СтруктураВозврата.Результат = Заказ;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция РасчетЧека_Протокол5(ЗаказОбъект, ПротоколОбъект, Тест)
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет", "начало (заказ="+ЗаказОбъект.Номер+")");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех"		, Истина);
	СтруктураВозврата.Вставить("Параметр"	, "");
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	ЗаказОбъект.ОбработанСистемойЛояльности = 0;
	//0		- обработан на центральном сервисе
	//1		- обработан в локальном сервисе
	//2		- не обработан
	
	ЗаказОбъект.ТипЧекаЛояльность = 0;
	ЗаказОбъект.ИдентификаторЛояльности = ""; // Сбрасываем идентификатор лояльности
	
	СтруктураАСКов	= Новый Структура;
	ДанныеОтвета	= Неопределено;
	Заказ			= Неопределено;
	ЗакончитьРасчет = Ложь;
	НоваяКарта		= Ложь;
	
	РежимОтправки	= 0; // 0 - в Центр, 1 - в Локальный
	ОтправкаУспешна	= Ложь;
	
	ЕстьКупоны		= (ЗаказОбъект.Купоны.Количество() > 0);
	
	сч = 1;
	Пока НЕ ЗакончитьРасчет Цикл
		
		// исключаем зацикливание
		сч = сч + 1;
		Если сч > 30 Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка","Ошибка зацикливания расчета Лояльности","","Вернуться в чек","");
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "зацикливание расчета");
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;		
		
		Если ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И (НЕ ЕстьКупоны) И (РежимОтправки = 0) Тогда
			Если НЕ ВвестиКарту(ЗаказОбъект) Тогда
				Возврат ВозвратВЧек(СтруктураВозврата);
			КонецЕсли;
		КонецЕсли;
		
		//### Тестирование
		//Если Тест И НЕ ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
		//	//ЛояльностьКлиентСервер.Логирование(1, "предварительный расчет", "начало (заказ="+ЗаказОбъект.Номер+")");
		//	//Лояльность.ОбновитьАкцииГостяПоЗаказу(ЗаказОбъект.Ссылка, Тест);
		//	//Лояльность.ОбновитьДанныеГостяПоЗаказу(ЗаказОбъект.Ссылка, Тест);
		//	//Лояльность.ОбновитьПредварительныйРасчетЗаказа(ЗаказОбъект.Ссылка, Тест);
		//	//ДанныеРасчета = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "INFO");
		//	//ЛояльностьКлиентСервер.Логирование(1, "предварительный расчет", ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеРасчета));
		//	//ДанныеРасчета = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "ACTIONS");
		//	//ЛояльностьКлиентСервер.Логирование(1, "предварительный расчет", ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеРасчета));
		//	//ДанныеРасчета = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "CALC");
		//	
		//	//Если ЗаказОбъект.ОбработанСистемойЛояльности = 0 Тогда
		//	//	ОткрытьЗаказ(ЗаказОбъект);
		//	//КонецЕсли;
		//	
		//	//ДанныеРасчета = Лояльность.ПолучитьСписокКупоновГостя(ЗаказОбъект.Ссылка,,Тест);
		//	//ЛояльностьКлиентСервер.Логирование(1, "предварительный расчет", ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеРасчета));
		//	//ЛояльностьКлиентСервер.Логирование(1, "предварительный расчет", "конец (заказ="+ЗаказОбъект.Номер+")");
		//	//ДанныеРасчета = Неопределено;
		//КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
		
		ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONДляРасчетаЗаказа_Протокол5(ЗаказОбъект, , СтруктураАСКов);
		Если ПараметрыЗапроса.Ошибка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
			ОбработкаОшибокЛОЛ(ЗаказОбъект, 1, "Нет связи с принтером кассы");
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;
		
		ОтправкаУспешна = Ложь;
		
		Попытка
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "отправка запроса (Режим="+?(РежимОтправки=0,"центр","локальный")+",текст="+ПараметрыЗапроса.ТекстЗапроса+")");
			
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
		Если НЕ ОтправкаУспешна Тогда
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки (Режим="+?(РежимОтправки=0,"центр","локальный")+",ответ: "+ОписаниеОшибки+")");
			
			// отправка не прошла - либо в Локальный, либо выход
			Если РежимОтправки = 0 Тогда
				// попытка отправки в Локальный сервис
				РежимОтправки = 1;
				Продолжить;
			Иначе
				// сервис недоступен или не смог обработать запрос
				ОтправкаУспешна = Ложь;
			КонецЕсли;
		КонецЕсли;			
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОШИБОК ОТПРАВКИ
		Если ОтправкаУспешна Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "получен ответ:"+ОтветСервера.Ответ);
			Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
				
				// Если ошибка - сначала пытаемся обработать в Локальном сервисе
				Если РежимОтправки = 0 Тогда
					РежимОтправки = 1;
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки (Режим="+?(РежимОтправки=0,"центр","локальный")+")");
					Продолжить;
				КонецЕсли;
				
				// сервис недоступен или не смог обработать запрос
				ОтправкаУспешна = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОтправкаУспешна Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "Извините нет связи");
			
			ТекстЗаголовка	= "Извините нет связи";
			Текст			= "Акции +1 НЕ будут применены"+Символы.ПС+"КеГЛи будут начислены позднее автоматически";
			ТекстИнформационноеПоле = "Проверяйте начисление"+Символы.ПС+"КеГЛей в Вашем ЛИЧНОМ"+Символы.ПС+"КАБИНЕТЕ на сайте или в"+Символы.ПС+"Мобильном Приложении"+Символы.ПС+"КуулКЛЕВЕР";
			
			Ответ = Неопределено;
			Ответ = ВыводОкнаЛОЛ(ТекстЗаголовка, Текст, "Начислить позже", "Повторить запрос", ТекстИнформационноеПоле);
			
			Если		Ответ = "Начислить позже" Тогда
				ЗаказОбъект.ОбработанСистемойЛояльности = 2;
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "начислить позже");
				Прервать;
			ИначеЕсли	Ответ = "Повторить запрос" Тогда
				Продолжить;
			Иначе //Вернуться в чек
				Возврат ВозвратВЧек(СтруктураВозврата);
			КонецЕсли;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ПОЛУЧЕНИЕ ОТВЕТА
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "распарсен ответ");
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОШИБОК КОТОРЫЕ ВЕРНУЛА ЛОЯЛЬНОСТЬ
		Если ДанныеОтвета.err <> 0 Тогда
			Если ДанныеОтвета.err = (-1) Тогда
				// Если ошибка критичная, то сначала пытаемся обработать в Локальном сервисе
				Если РежимОтправки = 0 Тогда
					РежимОтправки = 1;
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "в ответе ошибка (-1)");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Ответ = Неопределено;
			Ответ = ОбработкаОшибокЛОЛ(ЗаказОбъект, ДанныеОтвета.err, ДанныеОтвета.err_msg);
			
			Если		Ответ = "Начислить позже" Тогда
				ЗаказОбъект.ОбработанСистемойЛояльности = 2;
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "начислить позже");
				Прервать;
			ИначеЕсли	Ответ = "Вернуться в чек" Тогда
				Возврат ВозвратВЧек(СтруктураВозврата);
			ИначеЕсли	Ответ = "Продолжить" Тогда
				Продолжить;
			Иначе
			КонецЕсли;
		КонецЕсли;
		
		ДанныеОтвета.Свойство("order", Заказ);
		//ДанныеОтвета.Свойство("ask"	, СтруктураАСКов);
		//ЗаказОбъект.ИдентификаторЛояльности = Заказ.request_id;
		//ЗаказОбъект.ОбработанСистемойЛояльности = 1;//Чек.status; //!!!
		//Если ПротоколОбъект<>Неопределено Тогда
			ЗаказОбъект.ИдентификаторЛояльности = Заказ.request_id;
			ПротоколОбъект.ИдентификаторЛояльности = Заказ.request_id;
			ПротоколОбъект.СтатусЛояльности = 0;
		//КонецЕсли;
		
		Если ЕстьКупоны И ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И НЕ ПустаяСтрока(Заказ.card_number) Тогда
			// получаем номер карты из купонов
			ЗаказОбъект.НомерКартыЛояльности = Заказ.card_number;			
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА АСКов
		//Если СтруктураАСКов <> Неопределено Тогда
		//	// есть аски
		//	ТребуетОтвета = 0;
		//	СтруктураАСКов.Свойство("need_rerequest", ТребуетОтвета);
		//	
		//	ВариантыОтвета = Неопределено;
		//	СтруктураАСКов.Свойство("answer_variants", ВариантыОтвета);
		//	
		//	Инпут = Неопределено;
		//	СтруктураАСКов.Свойство("input", Инпут);
		//	
		//	ТекстВопроса = "";
		//	СтруктураАСКов.Свойство("request", ТекстВопроса);
		//	ТекстВопроса = СтрЗаменить(ТекстВопроса, "\n", Символы.ПС);
		//	
		//	Ответ = "";
		//	Если		ВариантыОтвета <> Неопределено Тогда
		//		// АСК с вариантом ответа
		//		Ответ = ВыборВариантаОтвета(ТекстВопроса, ВариантыОтвета);
		//	ИначеЕсли	Инпут <> Неопределено Тогда
		//		// АСК с запросом значения
		//		Ответ = ИнтерфейсРМ.ВводЧисла(ТекстВопроса, "Строка", 10, 0);
		//	Иначе
		//		// Сообщение на экран
		//		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","",ТекстВопроса,"","ОК","");
		//	КонецЕсли;
		//	
		//	Ответ = ?(Ответ = Неопределено, "", Ответ);
		//	
		//	// вставить ответ в ответ 
		//	СтруктураОтвета = Новый Структура;
		//	СтруктураОтвета.Вставить("value", Ответ);
		//	СтруктураАСКов.Вставить("answer", СтруктураОтвета);
		//	
		//	СтруктураАСКов.Удалить("request");
		//	СтруктураАСКов.Удалить("need_rerequest");
		//	СтруктураАСКов.Удалить("answer_variants");
		//	СтруктураАСКов.Удалить("input");
		//	
		//	Если ТребуетОтвета = 1 Тогда
		//		// повторный запрос с ответом в теле
		//		Продолжить;
		//	Иначе
		//		// продолжаем так
		//		
		//	КонецЕсли;
		//КонецЕсли;
		
		DisplayInfo = "";
		Для каждого ТекущееИнфо Из Заказ.display_info Цикл
			DisplayInfo = DisplayInfo + ТекущееИнфо;
		КонецЦикла;
		
		///////////////////////////////////////////////////////////////////////////////////
		Если ОтправкаУспешна Тогда
			// после обработки всех ошибок - если запрос был успешено отправлен, то следующий запрос по умолчанию идет в центр
			РежимОтправки = 0;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОТВЕТА ЛОЯЛЬНОСТИ
		//Если ДанныеОтвета.request = "PRESALE" Тогда
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// первичный чек
			
			ЗаказОбъект.ПодвалЧека = "";
			
			Если Заказ.s_kgl_rem > 0 Тогда
				// в ответе 2 части (начисление списание)
				
				// вопрос - начислить/списать
				Ответ = ЗапросДействия_Протокол3("Вам начислить или списать КеГЛи?", DisplayInfo, "Начислить", "Списать", ДанныеОтвета);
				
				Если		Ответ = "Списать" Тогда
					// необходим пин
					Если Заказ.need_pin = 1 Тогда
						КорректныйПИН = 0;
						
						Для КоличествоПопыток = 1 по 3 Цикл
							ЛояльностьКлиентСервер.Логирование(1, "расчет", "запрос ПИНа");
							КорректныйПИН = ВвестиПИН(Заказ.pin_md);
							Если		КорректныйПИН = 1 Тогда
								// корректный
								Прервать;
							ИначеЕсли	КорректныйПИН = (-1) Тогда
								// отмена
								Возврат ВозвратВЧек(СтруктураВозврата);
							Иначе
								// некорректный
								ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка","Неверный Код защиты","","ОК","");
								ЛояльностьКлиентСервер.Логирование(1, "расчет", "неверный ПИН");
							КонецЕсли;
						КонецЦикла;
						
						Если КорректныйПИН <> 1 Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьСписание");
					
					Если НЕ ОбработатьСписание_Протокол4(ЗаказОбъект, ПротоколОбъект, Заказ) Тогда
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
					ЗакончитьРасчет = Истина;
				ИначеЕсли	Ответ = "Начислить" Тогда
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
					
					Если НЕ ОбработатьНачисление_Протокол4(ЗаказОбъект, ПротоколОбъект, Заказ) Тогда
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
					ЗакончитьРасчет = Истина;
				Иначе
					// "Возврат в чек"
					Возврат ВозвратВЧек(СтруктураВозврата);
					
				КонецЕсли;
				
			Иначе	
				//:ЗаказОбъект=Документы.Заказ.СоздатьДокумент();
				Если ПустаяСтрока(Заказ.card_number) И Не ЗаказОбъект.ОтказОтКартыЛояльности Тогда
					// карта не введена
					
					Ответ = ЗапросДействия_Протокол3("Давайте приобретем карту КеГеЛьБУМ", DisplayInfo, "Купить", "Отказаться", ДанныеОтвета);
					
					Если		Ответ = "Купить" Тогда
						Если НЕ ВвестиКарту(ЗаказОбъект, "Считайте новую карту КеГеЛьБУМ", Истина) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						
						Если НЕ ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
							// добавление карты в список товаров
							
							ТоварКарты = ИнтерфейсРМ.НайтиТоварПоКоду(Лояльность.ПолучитьКодТовараКарты(Регион));
							
							// товар не найден - выход
							Если ТоварКарты = Справочники.Товары.ПустаяСсылка() Тогда
								ЗаказОбъект.НомерКартыЛояльности = "";
								ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","","Не найден товар карты лояльности (код 16020001/16020002)","","Вернуться в чек","");
								ЛояльностьКлиентСервер.Логирование(1, "расчет", "товар карты не найден");
								Возврат ВозвратВЧек(СтруктураВозврата);
							КонецЕсли;
							
							// добавление карты в заказ, если ее там еще нет
							СтрокаТЧ = ЗаказОбъект.Товары.Найти(ТоварКарты, "Товар");
							Если СтрокаТЧ = Неопределено Тогда
								ГлавнаяФормаОбъектОбработки = глОбработки.ГлавнаяФорма;
								ИдСтроки = ГлавнаяФормаОбъектОбработки.ВводНовойСтроки(ТоварКарты);
							КонецЕсли;
							
							// пересчитаваем запрос
							НоваяКарта = Истина; 
							Продолжить;
						Иначе
							// карту не ввели - выход
							ЗакончитьРасчет = Истина; // если возвращаться к расчету, то будет повторый запрос карты
							Продолжить;
						КонецЕсли;
					ИначеЕсли	Ответ = "Отказаться" Тогда
						// карты не будет - выход
						ЗакончитьРасчет = Истина;
						Продолжить;
					Иначе
						// "Возврат в чек"
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
				ИначеЕсли ЗаказОбъект.ОтказОтКартыЛояльности Тогда
					ЗакончитьРасчет = Истина;
					Продолжить;
				Иначе
					
					// карта введена, выполняем начисление
					
					Если Заказ.n_kgl_add = 0 Тогда
						Если ДанныеОтвета.status = 1 Тогда
							Заголовок	= "Извините, нет связи с центральным офисом";
							Кнопка1		= "Начислить позже";
							Кнопка2		= "Повторить запрос";
						Иначе
							Заголовок	= "В чеке нет товаров для начисления и списания";
							Кнопка1		= "Продолжить";
							Кнопка2		= "Вернуться в чек";
						КонецЕсли;
					Иначе
						Заголовок	= "Возможно только начисление";
						Кнопка1		= "Начислить";
						Кнопка2		= "Вернуться в чек";
					КонецЕсли;
					
					Ответ = ЗапросДействия_Протокол3(Заголовок, DisplayInfo, Кнопка1, Кнопка2, ДанныеОтвета);
					
					Если		Ответ = "Начислить" ИЛИ  Ответ = "Продолжить" Тогда
						ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
						Если НЕ ОбработатьНачисление_Протокол4(ЗаказОбъект, ПротоколОбъект, Заказ) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						ЗакончитьРасчет = Истина;
					ИначеЕсли	Ответ = "Начислить позже" Тогда
						ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
						Если НЕ ОбработатьНачисление_Протокол4(ЗаказОбъект, ПротоколОбъект, Заказ) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						Прервать;
					ИначеЕсли	Ответ = "Повторить запрос" Тогда
						РежимОтправки = 0; // на всякий случай обновим
						Продолжить;
					Иначе
						// "Возврат в чек"
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
		//ИначеЕсли ДанныеОтвета.request="SALE" И Заказ.order_type = 1 Тогда
		//	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//	// чек начисления

		//	ЗакончитьРасчет = Истина;
		//ИначеЕсли ДанныеОтвета.request="SALE" И Заказ.order_type = 2 Тогда
		//	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//	// чек списания
		//	
		//	ЗакончитьРасчет = Истина;
		//Иначе
		//	// неизвестный запрос
		//	ЗакончитьРасчет = Истина;
		//КонецЕсли;
		
	КонецЦикла;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ПОСТРОВЕРКА
	Если ЗаказОбъект.ОбработанСистемойЛояльности = 2 Тогда
		
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "расчет не произведен, заказ уходит в СПУЛ");
		//Лояльность.ЗаписатьВСПУЛ(ЗаказОбъект.Ссылка);
		
		// заказ не обработан - вставляем подвал "нет связи"
		ВыборкаДополнительныхСвойств = РегистрыСведений.ДополнительныеСвойства.Выбрать(Новый Структура("Свойство", "ЛояльностьПодвалНетСвязи"));
		Если ВыборкаДополнительныхСвойств.Следующий() Тогда
			ЗаказОбъект.ПодвалЧека = СтрЗаменить(ВыборкаДополнительныхСвойств.Значение, "\n", Символы.ПС);
		КонецЕсли;
		
	Иначе
		
		Если ПротоколОбъект.ТипЧекаЛояльность = 0 Тогда
			ОбработатьНачисление_Протокол4(ЗаказОбъект, ПротоколОбъект, Заказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//ПодставитьАдресВПодвал(ЗаказОбъект);
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет", "конец (заказ="+ЗаказОбъект.Номер+")");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция РасчетЧека_Протокол4(ЗаказОбъект, ПротоколОбъект, Тест)
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет", "начало (заказ="+ЗаказОбъект.Номер+")");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех"		, Истина);
	СтруктураВозврата.Вставить("Параметр"	, "");
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	ЗаказОбъект.ОбработанСистемойЛояльности = 0;
	//0		- обработан на центральном сервисе
	//1		- обработан в локальном сервисе
	//2		- не обработан
	
	ЗаказОбъект.ТипЧекаЛояльность = 0;
	ЗаказОбъект.ИдентификаторЛояльности = ""; // Сбрасываем идентификатор лояльности
	
	СтруктураАСКов	= Новый Структура;
	ДанныеОтвета	= Неопределено;
	Заказ			= Неопределено;
	ЗакончитьРасчет = Ложь;
	НоваяКарта		= Ложь;
	
	РежимОтправки	= 0; // 0 - в Центр, 1 - в Локальный
	ОтправкаУспешна	= Ложь;
	
	ЕстьКупоны		= (ЗаказОбъект.Купоны.Количество() > 0);
	
	сч = 1;
	Пока НЕ ЗакончитьРасчет Цикл
		
		// исключаем зацикливание
		сч = сч + 1;
		Если сч > 30 Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка","Ошибка зацикливания расчета Лояльности","","Вернуться в чек","");
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "зацикливание расчета");
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;		
		
		Если ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И (НЕ ЕстьКупоны) И (РежимОтправки = 0) Тогда
			Если НЕ ВвестиКарту(ЗаказОбъект) Тогда
				Возврат ВозвратВЧек(СтруктураВозврата);
			КонецЕсли;
		КонецЕсли;
		
		//### Тестирование
		//Если Тест И НЕ ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
		//	//ЛояльностьКлиентСервер.Логирование(1, "предварительный расчет", "начало (заказ="+ЗаказОбъект.Номер+")");
		//	//Лояльность.ОбновитьАкцииГостяПоЗаказу(ЗаказОбъект.Ссылка, Тест);
		//	//Лояльность.ОбновитьДанныеГостяПоЗаказу(ЗаказОбъект.Ссылка, Тест);
		//	//Лояльность.ОбновитьПредварительныйРасчетЗаказа(ЗаказОбъект.Ссылка, Тест);
		//	//ДанныеРасчета = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "INFO");
		//	//ЛояльностьКлиентСервер.Логирование(1, "предварительный расчет", ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеРасчета));
		//	//ДанныеРасчета = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "ACTIONS");
		//	//ЛояльностьКлиентСервер.Логирование(1, "предварительный расчет", ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеРасчета));
		//	//ДанныеРасчета = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "CALC");
		//	
		//	//Если ЗаказОбъект.ОбработанСистемойЛояльности = 0 Тогда
		//	//	ОткрытьЗаказ(ЗаказОбъект);
		//	//КонецЕсли;
		//	
		//	//ДанныеРасчета = Лояльность.ПолучитьСписокКупоновГостя(ЗаказОбъект.Ссылка,,Тест);
		//	//ЛояльностьКлиентСервер.Логирование(1, "предварительный расчет", ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеРасчета));
		//	//ЛояльностьКлиентСервер.Логирование(1, "предварительный расчет", "конец (заказ="+ЗаказОбъект.Номер+")");
		//	//ДанныеРасчета = Неопределено;
		//КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
		
		ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONДляРасчетаЗаказа_Протокол4(ЗаказОбъект, , СтруктураАСКов);
		Если ПараметрыЗапроса.Ошибка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
			ОбработкаОшибокЛОЛ(ЗаказОбъект, 1, "Нет связи с принтером кассы");
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;
		
		ОтправкаУспешна = Ложь;
		
		Попытка
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "отправка запроса (Режим="+?(РежимОтправки=0,"центр","локальный")+",текст="+ПараметрыЗапроса.ТекстЗапроса+")");
			
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
		Если НЕ ОтправкаУспешна Тогда
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки (Режим="+?(РежимОтправки=0,"центр","локальный")+",ответ: "+ОписаниеОшибки+")");
			
			// отправка не прошла - либо в Локальный, либо выход
			Если РежимОтправки = 0 Тогда
				// попытка отправки в Локальный сервис
				РежимОтправки = 1;
				Продолжить;
			Иначе
				// сервис недоступен или не смог обработать запрос
				ОтправкаУспешна = Ложь;
			КонецЕсли;
		КонецЕсли;			
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОШИБОК ОТПРАВКИ
		Если ОтправкаУспешна Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "получен ответ:"+ОтветСервера.Ответ);
			Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
				
				// Если ошибка - сначала пытаемся обработать в Локальном сервисе
				Если РежимОтправки = 0 Тогда
					РежимОтправки = 1;
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки (Режим="+?(РежимОтправки=0,"центр","локальный")+")");
					Продолжить;
				КонецЕсли;
				
				// сервис недоступен или не смог обработать запрос
				ОтправкаУспешна = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОтправкаУспешна Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "Извините нет связи");
			
			ТекстЗаголовка	= "Извините нет связи";
			Текст			= "Акции +1 НЕ будут применены"+Символы.ПС+"КеГЛи будут начислены позднее автоматически";
			ТекстИнформационноеПоле = "Проверяйте начисление"+Символы.ПС+"КеГЛей в Вашем ЛИЧНОМ"+Символы.ПС+"КАБИНЕТЕ на сайте или в"+Символы.ПС+"Мобильном Приложении"+Символы.ПС+"КуулКЛЕВЕР";
			
			Ответ = Неопределено;
			Ответ = ВыводОкнаЛОЛ(ТекстЗаголовка, Текст, "Начислить позже", "Повторить запрос", ТекстИнформационноеПоле);
			
			Если		Ответ = "Начислить позже" Тогда
				ЗаказОбъект.ОбработанСистемойЛояльности = 2;
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "начислить позже");
				Прервать;
			ИначеЕсли	Ответ = "Повторить запрос" Тогда
				Продолжить;
			Иначе //Вернуться в чек
				Возврат ВозвратВЧек(СтруктураВозврата);
			КонецЕсли;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ПОЛУЧЕНИЕ ОТВЕТА
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "распарсен ответ");
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОШИБОК КОТОРЫЕ ВЕРНУЛА ЛОЯЛЬНОСТЬ
		Если ДанныеОтвета.err <> 0 Тогда
			Если ДанныеОтвета.err = (-1) Тогда
				// Если ошибка критичная, то сначала пытаемся обработать в Локальном сервисе
				Если РежимОтправки = 0 Тогда
					РежимОтправки = 1;
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "в ответе ошибка (-1)");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Ответ = Неопределено;
			Ответ = ОбработкаОшибокЛОЛ(ЗаказОбъект, ДанныеОтвета.err, ДанныеОтвета.err_msg);
			
			Если		Ответ = "Начислить позже" Тогда
				ЗаказОбъект.ОбработанСистемойЛояльности = 2;
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "начислить позже");
				Прервать;
			ИначеЕсли	Ответ = "Вернуться в чек" Тогда
				Возврат ВозвратВЧек(СтруктураВозврата);
			ИначеЕсли	Ответ = "Продолжить" Тогда
				Продолжить;
			Иначе
			КонецЕсли;
		КонецЕсли;
		
		ДанныеОтвета.Свойство("order", Заказ);
		//ДанныеОтвета.Свойство("ask"	, СтруктураАСКов);
		//ЗаказОбъект.ИдентификаторЛояльности = Заказ.request_id;
		//ЗаказОбъект.ОбработанСистемойЛояльности = 1;//Чек.status; //!!!
		//Если ПротоколОбъект<>Неопределено Тогда
			ЗаказОбъект.ИдентификаторЛояльности = Заказ.request_id;
			ПротоколОбъект.ИдентификаторЛояльности = Заказ.request_id;
			ПротоколОбъект.СтатусЛояльности = 1;
		//КонецЕсли;
		
		Если ЕстьКупоны И ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И НЕ ПустаяСтрока(Заказ.card_number) Тогда
			// получаем номер карты из купонов
			ЗаказОбъект.НомерКартыЛояльности = Заказ.card_number;			
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА АСКов
		//Если СтруктураАСКов <> Неопределено Тогда
		//	// есть аски
		//	ТребуетОтвета = 0;
		//	СтруктураАСКов.Свойство("need_rerequest", ТребуетОтвета);
		//	
		//	ВариантыОтвета = Неопределено;
		//	СтруктураАСКов.Свойство("answer_variants", ВариантыОтвета);
		//	
		//	Инпут = Неопределено;
		//	СтруктураАСКов.Свойство("input", Инпут);
		//	
		//	ТекстВопроса = "";
		//	СтруктураАСКов.Свойство("request", ТекстВопроса);
		//	ТекстВопроса = СтрЗаменить(ТекстВопроса, "\n", Символы.ПС);
		//	
		//	Ответ = "";
		//	Если		ВариантыОтвета <> Неопределено Тогда
		//		// АСК с вариантом ответа
		//		Ответ = ВыборВариантаОтвета(ТекстВопроса, ВариантыОтвета);
		//	ИначеЕсли	Инпут <> Неопределено Тогда
		//		// АСК с запросом значения
		//		Ответ = ИнтерфейсРМ.ВводЧисла(ТекстВопроса, "Строка", 10, 0);
		//	Иначе
		//		// Сообщение на экран
		//		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","",ТекстВопроса,"","ОК","");
		//	КонецЕсли;
		//	
		//	Ответ = ?(Ответ = Неопределено, "", Ответ);
		//	
		//	// вставить ответ в ответ 
		//	СтруктураОтвета = Новый Структура;
		//	СтруктураОтвета.Вставить("value", Ответ);
		//	СтруктураАСКов.Вставить("answer", СтруктураОтвета);
		//	
		//	СтруктураАСКов.Удалить("request");
		//	СтруктураАСКов.Удалить("need_rerequest");
		//	СтруктураАСКов.Удалить("answer_variants");
		//	СтруктураАСКов.Удалить("input");
		//	
		//	Если ТребуетОтвета = 1 Тогда
		//		// повторный запрос с ответом в теле
		//		Продолжить;
		//	Иначе
		//		// продолжаем так
		//		
		//	КонецЕсли;
		//КонецЕсли;
		
		DisplayInfo = "";
		Для каждого ТекущееИнфо Из Заказ.display_info Цикл
			DisplayInfo = DisplayInfo + ТекущееИнфо;
		КонецЦикла;
		
		///////////////////////////////////////////////////////////////////////////////////
		Если ОтправкаУспешна Тогда
			// после обработки всех ошибок - если запрос был успешено отправлен, то следующий запрос по умолчанию идет в центр
			РежимОтправки = 0;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОТВЕТА ЛОЯЛЬНОСТИ
		Если ДанныеОтвета.request = "PRESALE" Тогда
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// первичный чек
			
			ЗаказОбъект.ПодвалЧека = "";
			
			Если Заказ.s_kgl_rem > 0 Тогда
				// в ответе 2 части (начисление списание)
				
				// вопрос - начислить/списать
				Ответ = ЗапросДействия_Протокол3("Вам начислить или списать КеГЛи?", DisplayInfo, "Начислить", "Списать", ДанныеОтвета);
				
				Если		Ответ = "Списать" Тогда
					// необходим пин
					Если Заказ.need_pin = 1 Тогда
						КорректныйПИН = 0;
						
						Для КоличествоПопыток = 1 по 3 Цикл
							ЛояльностьКлиентСервер.Логирование(1, "расчет", "запрос ПИНа");
							КорректныйПИН = ВвестиПИН(Заказ.pin_md);
							Если		КорректныйПИН = 1 Тогда
								// корректный
								Прервать;
							ИначеЕсли	КорректныйПИН = (-1) Тогда
								// отмена
								Возврат ВозвратВЧек(СтруктураВозврата);
							Иначе
								// некорректный
								ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка","Неверный Код защиты","","ОК","");
								ЛояльностьКлиентСервер.Логирование(1, "расчет", "неверный ПИН");
							КонецЕсли;
						КонецЦикла;
						
						Если КорректныйПИН <> 1 Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьСписание");
					
					Если НЕ ОбработатьСписание_Протокол4(ЗаказОбъект, ПротоколОбъект, Заказ) Тогда
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
					ЗакончитьРасчет = Истина;
				ИначеЕсли	Ответ = "Начислить" Тогда
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
					
					Если НЕ ОбработатьНачисление_Протокол4(ЗаказОбъект, ПротоколОбъект, Заказ) Тогда
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
					ЗакончитьРасчет = Истина;
				Иначе
					// "Возврат в чек"
					Возврат ВозвратВЧек(СтруктураВозврата);
					
				КонецЕсли;
				
			Иначе	
				//:ЗаказОбъект=Документы.Заказ.СоздатьДокумент();
				Если ПустаяСтрока(Заказ.card_number) И Не ЗаказОбъект.ОтказОтКартыЛояльности Тогда
					// карта не введена
					
					Ответ = ЗапросДействия_Протокол3("Давайте приобретем карту КеГеЛьБУМ", DisplayInfo, "Купить", "Отказаться", ДанныеОтвета);
					
					Если		Ответ = "Купить" Тогда
						Если НЕ ВвестиКарту(ЗаказОбъект, "Считайте новую карту КеГеЛьБУМ", Истина) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						
						Если НЕ ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
							// добавление карты в список товаров
							
							ТоварКарты = ИнтерфейсРМ.НайтиТоварПоКоду(Лояльность.ПолучитьКодТовараКарты(Регион));
							
							// товар не найден - выход
							Если ТоварКарты = Справочники.Товары.ПустаяСсылка() Тогда
								ЗаказОбъект.НомерКартыЛояльности = "";
								ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","","Не найден товар карты лояльности (код 16020001/16020002)","","Вернуться в чек","");
								ЛояльностьКлиентСервер.Логирование(1, "расчет", "товар карты не найден");
								Возврат ВозвратВЧек(СтруктураВозврата);
							КонецЕсли;
							
							// добавление карты в заказ, если ее там еще нет
							СтрокаТЧ = ЗаказОбъект.Товары.Найти(ТоварКарты, "Товар");
							Если СтрокаТЧ = Неопределено Тогда
								ГлавнаяФормаОбъектОбработки = глОбработки.ГлавнаяФорма;
								ИдСтроки = ГлавнаяФормаОбъектОбработки.ВводНовойСтроки(ТоварКарты);
							КонецЕсли;
							
							// пересчитаваем запрос
							НоваяКарта = Истина; 
							Продолжить;
						Иначе
							// карту не ввели - выход
							ЗакончитьРасчет = Истина; // если возвращаться к расчету, то будет повторый запрос карты
							Продолжить;
						КонецЕсли;
					ИначеЕсли	Ответ = "Отказаться" Тогда
						// карты не будет - выход
						ЗакончитьРасчет = Истина;
						Продолжить;
					Иначе
						// "Возврат в чек"
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
				ИначеЕсли ЗаказОбъект.ОтказОтКартыЛояльности Тогда
					ЗакончитьРасчет = Истина;
					Продолжить;
				Иначе
					
					// карта введена, выполняем начисление
					
					Если Заказ.n_kgl_add = 0 Тогда
						Если ДанныеОтвета.status = 1 Тогда
							Заголовок	= "Извините, нет связи с центральным офисом";
							Кнопка1		= "Начислить позже";
							Кнопка2		= "Повторить запрос";
						Иначе
							Заголовок	= "В чеке нет товаров для начисления и списания";
							Кнопка1		= "Продолжить";
							Кнопка2		= "Вернуться в чек";
						КонецЕсли;
					Иначе
						Заголовок	= "Возможно только начисление";
						Кнопка1		= "Начислить";
						Кнопка2		= "Вернуться в чек";
					КонецЕсли;
					
					Ответ = ЗапросДействия_Протокол3(Заголовок, DisplayInfo, Кнопка1, Кнопка2, ДанныеОтвета);
					
					Если		Ответ = "Начислить" ИЛИ  Ответ = "Продолжить" Тогда
						ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
						Если НЕ ОбработатьНачисление_Протокол4(ЗаказОбъект, ПротоколОбъект, Заказ) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						ЗакончитьРасчет = Истина;
					ИначеЕсли	Ответ = "Начислить позже" Тогда
						ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
						Если НЕ ОбработатьНачисление_Протокол4(ЗаказОбъект, ПротоколОбъект, Заказ) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						Прервать;
					ИначеЕсли	Ответ = "Повторить запрос" Тогда
						РежимОтправки = 0; // на всякий случай обновим
						Продолжить;
					Иначе
						// "Возврат в чек"
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеОтвета.request="SALE" И Заказ.order_type = 1 Тогда
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// чек начисления

			ЗакончитьРасчет = Истина;
		ИначеЕсли ДанныеОтвета.request="SALE" И Заказ.order_type = 2 Тогда
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// чек списания
			
			ЗакончитьРасчет = Истина;
		Иначе
			// неизвестный запрос
			ЗакончитьРасчет = Истина;
		КонецЕсли;
		
	КонецЦикла;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ПОСТРОВЕРКА
	Если ЗаказОбъект.ОбработанСистемойЛояльности = 2 Тогда
		
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "расчет не произведен, заказ уходит в СПУЛ");
		//Лояльность.ЗаписатьВСПУЛ(ЗаказОбъект.Ссылка);
		
		// заказ не обработан - вставляем подвал "нет связи"
		ВыборкаДополнительныхСвойств = РегистрыСведений.ДополнительныеСвойства.Выбрать(Новый Структура("Свойство", "ЛояльностьПодвалНетСвязи"));
		Если ВыборкаДополнительныхСвойств.Следующий() Тогда
			ЗаказОбъект.ПодвалЧека = СтрЗаменить(ВыборкаДополнительныхСвойств.Значение, "\n", Символы.ПС);
		КонецЕсли;
		
	Иначе
		
		Если ПротоколОбъект.ТипЧекаЛояльность = 0 Тогда
			ОбработатьНачисление_Протокол4(ЗаказОбъект, ПротоколОбъект, Заказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//ПодставитьАдресВПодвал(ЗаказОбъект);
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет", "конец (заказ="+ЗаказОбъект.Номер+")");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция РасчетЧека_Протокол3(ЗаказОбъект, Тест)
	
	ТипЗапроса = "PRESALE";
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет", "начало (заказ="+ЗаказОбъект.Номер+")");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех"		, Истина);
	СтруктураВозврата.Вставить("Параметр"	, "");
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	ЗаказОбъект.ОбработанСистемойЛояльности = 0;
	//0		- обработан на центральном сервисе
	//1		- обработан в локальном сервисе
	//2		- не обработан
	
	ЗаказОбъект.ТипЧекаЛояльность = 0;
	
	СтруктураАСКов	= Новый Структура;
	ДанныеОтвета	= Неопределено;
	Заказ			= Неопределено;
	ЗакончитьРасчет = Ложь;
	НоваяКарта		= Ложь;
	
	РежимОтправки	= 0; // 0 - в Центр, 1 - в Локальный
	ОтправкаУспешна	= Ложь;
	
	ЕстьКупоны		= (ЗаказОбъект.Купоны.Количество() > 0);
	
	сч = 1;
	Пока НЕ ЗакончитьРасчет Цикл
		
		// исключаем зацикливание
		сч = сч + 1;
		Если сч > 30 Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка","Ошибка зацикливания расчета Лояльности","","Вернуться в чек","");
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "зацикливание расчета");
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;		
		
		Если ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И (НЕ ЕстьКупоны) И (РежимОтправки = 0) Тогда
			Если НЕ ВвестиКарту(ЗаказОбъект) Тогда
				Возврат ВозвратВЧек(СтруктураВозврата);
			КонецЕсли;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
		
		ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONПоЗаказу_Протокол3("PRESALE", ЗаказОбъект, ЗаказОбъект.ТипЧекаЛояльность, СтруктураАСКов);
		Если ПараметрыЗапроса.Ошибка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
			ОбработкаОшибокЛОЛ(ЗаказОбъект, 1, "Нет связи с принтером кассы");
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;
		
		ОтправкаУспешна = Ложь;
		
		Попытка
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "отправка запроса (Режим="+?(РежимОтправки=0,"центр","локальный")+",текст="+ПараметрыЗапроса.ТекстЗапроса+")");
			
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
		Если НЕ ОтправкаУспешна Тогда
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки (Режим="+?(РежимОтправки=0,"центр","локальный")+",ответ: "+ОписаниеОшибки+")");
			
			// отправка не прошла - либо в Локальный, либо выход
			Если РежимОтправки = 0 Тогда
				// попытка отправки в Локальный сервис
				РежимОтправки = 1;
				Продолжить;
			Иначе
				// сервис недоступен или не смог обработать запрос
				ОтправкаУспешна = Ложь;
			КонецЕсли;
		КонецЕсли;
			
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОШИБОК ОТПРАВКИ
		Если ОтправкаУспешна Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "получен ответ:"+ОтветСервера.Ответ);
			Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
				
				// Если ошибка - сначала пытаемся обработать в Локальном сервисе
				Если РежимОтправки = 0 Тогда
					РежимОтправки = 1;
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки (Режим="+?(РежимОтправки=0,"центр","локальный")+")");
					Продолжить;
				КонецЕсли;
				
				// сервис недоступен или не смог обработать запрос
				ОтправкаУспешна = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОтправкаУспешна Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "Извините нет связи");
			
			ТекстЗаголовка	= "Извините нет связи";
			Текст			= "Акции +1 НЕ будут применены"+Символы.ПС+"КеГЛи будут начислены позднее автоматически";
			ТекстИнформационноеПоле = "Проверяйте начисление"+Символы.ПС+"КеГЛей в Вашем ЛИЧНОМ"+Символы.ПС+"КАБИНЕТЕ на сайте или в"+Символы.ПС+"Мобильном Приложении"+Символы.ПС+"КуулКЛЕВЕР";
			
			Ответ = Неопределено;
			Ответ = ВыводОкнаЛОЛ(ТекстЗаголовка, Текст, "Начислить позже", "Повторить запрос", ТекстИнформационноеПоле);
			
			Если		Ответ = "Начислить позже" Тогда
				ЗаказОбъект.ОбработанСистемойЛояльности = 2;
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "начислить позже");
				Прервать;
			ИначеЕсли	Ответ = "Повторить запрос" Тогда
				Продолжить;
			Иначе //Вернуться в чек
				Возврат ВозвратВЧек(СтруктураВозврата);
			КонецЕсли;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ПОЛУЧЕНИЕ ОТВЕТА
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON_1С(ОтветСервера.Ответ);
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "распарсен ответ");
		
		ДанныеОтвета.Свойство("order", Заказ);
		//ДанныеОтвета.Свойство("ask"	, СтруктураАСКов);
		//ЗаказОбъект.ИдентификаторЛояльности = ЛояльностьКлиентСервер.СформироватьИдентификаторЛояльности(Чек, Регион);//!!!
		ЗаказОбъект.ОбработанСистемойЛояльности = 1;//Чек.status; //!!!
		
		Если ЕстьКупоны И ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И НЕ ПустаяСтрока(Заказ.card_number) Тогда
			// получаем номер карты из купонов
			ЗаказОбъект.НомерКартыЛояльности = Заказ.card_number;			
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОШИБОК КОТОРЫЕ ВЕРНУЛА ЛОЯЛЬНОСТЬ
		Если ДанныеОтвета.err <> 0 Тогда
			Если ДанныеОтвета.err = (-1) Тогда
				// Если ошибка критичная, то сначала пытаемся обработать в Локальном сервисе
				Если РежимОтправки = 0 Тогда
					РежимОтправки = 1;
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "в ответе ошибка (-1)");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Ответ = Неопределено;
			Ответ = ОбработкаОшибокЛОЛ(ЗаказОбъект, ДанныеОтвета.err, ДанныеОтвета.err_msg);
			
			Если		Ответ = "Начислить позже" Тогда
				ЗаказОбъект.ОбработанСистемойЛояльности = 2;
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "начислить позже");
				Прервать;
			ИначеЕсли	Ответ = "Вернуться в чек" Тогда
				Возврат ВозвратВЧек(СтруктураВозврата);
			ИначеЕсли	Ответ = "Продолжить" Тогда
				Продолжить;
			Иначе
			КонецЕсли;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА АСКов
		//Если СтруктураАСКов <> Неопределено Тогда
		//	// есть аски
		//	ТребуетОтвета = 0;
		//	СтруктураАСКов.Свойство("need_rerequest", ТребуетОтвета);
		//	
		//	ВариантыОтвета = Неопределено;
		//	СтруктураАСКов.Свойство("answer_variants", ВариантыОтвета);
		//	
		//	Инпут = Неопределено;
		//	СтруктураАСКов.Свойство("input", Инпут);
		//	
		//	ТекстВопроса = "";
		//	СтруктураАСКов.Свойство("request", ТекстВопроса);
		//	ТекстВопроса = СтрЗаменить(ТекстВопроса, "\n", Символы.ПС);
		//	
		//	Ответ = "";
		//	Если		ВариантыОтвета <> Неопределено Тогда
		//		// АСК с вариантом ответа
		//		Ответ = ВыборВариантаОтвета(ТекстВопроса, ВариантыОтвета);
		//	ИначеЕсли	Инпут <> Неопределено Тогда
		//		// АСК с запросом значения
		//		Ответ = ИнтерфейсРМ.ВводЧисла(ТекстВопроса, "Строка", 10, 0);
		//	Иначе
		//		// Сообщение на экран
		//		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","",ТекстВопроса,"","ОК","");
		//	КонецЕсли;
		//	
		//	Ответ = ?(Ответ = Неопределено, "", Ответ);
		//	
		//	// вставить ответ в ответ 
		//	СтруктураОтвета = Новый Структура;
		//	СтруктураОтвета.Вставить("value", Ответ);
		//	СтруктураАСКов.Вставить("answer", СтруктураОтвета);
		//	
		//	СтруктураАСКов.Удалить("request");
		//	СтруктураАСКов.Удалить("need_rerequest");
		//	СтруктураАСКов.Удалить("answer_variants");
		//	СтруктураАСКов.Удалить("input");
		//	
		//	Если ТребуетОтвета = 1 Тогда
		//		// повторный запрос с ответом в теле
		//		Продолжить;
		//	Иначе
		//		// продолжаем так
		//		
		//	КонецЕсли;
		//КонецЕсли;
		
		DisplayInfo = "";
		Для каждого ТекущееИнфо Из Заказ.display_info Цикл
			DisplayInfo = DisplayInfo + ТекущееИнфо;
		КонецЦикла;
		
		///////////////////////////////////////////////////////////////////////////////////
		Если ОтправкаУспешна Тогда
			// после обработки всех ошибок - если запрос был успешено отправлен, то следующий запрос по умолчанию идет в центр
			РежимОтправки = 0;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОТВЕТА ЛОЯЛЬНОСТИ
		Если ДанныеОтвета.request = "PRESALE" Тогда
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// первичный чек
			
			ЗаказОбъект.ПодвалЧека = "";
			
			Если Заказ.s_kgl_rem > 0 Тогда
				// в ответе 2 части (начисление списание)
				
				// вопрос - начислить/списать
				Ответ = ЗапросДействия_Протокол3("Вам начислить или списать КеГЛи?", DisplayInfo, "Начислить", "Списать", ДанныеОтвета);
				
				Если		Ответ = "Списать" Тогда
					// необходим пин
					Если Заказ.need_pin = 1 Тогда
						КорректныйПИН = 0;
						
						Для КоличествоПопыток = 1 по 3 Цикл
							ЛояльностьКлиентСервер.Логирование(1, "расчет", "запрос ПИНа");
							КорректныйПИН = ВвестиПИН(Заказ.pin_md);
							Если		КорректныйПИН = 1 Тогда
								// корректный
								Прервать;
							ИначеЕсли	КорректныйПИН = (-1) Тогда
								// отмена
								Возврат ВозвратВЧек(СтруктураВозврата);
							Иначе
								// некорректный
								ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка","Неверный Код защиты","","ОК","");
								ЛояльностьКлиентСервер.Логирование(1, "расчет", "неверный ПИН");
							КонецЕсли;
						КонецЦикла;
						
						Если КорректныйПИН <> 1 Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьСписание");
					
					Если НЕ ОбработатьСписание_Протокол3(ЗаказОбъект, Заказ) Тогда
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
					ЗакончитьРасчет = Истина;
				ИначеЕсли	Ответ = "Начислить" Тогда
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
					
					Если НЕ ОбработатьНачисление_Протокол3(ЗаказОбъект, Заказ) Тогда
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
					ЗакончитьРасчет = Истина;
				Иначе
					// "Возврат в чек"
					Возврат ВозвратВЧек(СтруктураВозврата);
					
				КонецЕсли;
				
			Иначе	
				
				Если ПустаяСтрока(Заказ.card_number) Тогда
					// карта не введена
					
					Ответ = ЗапросДействия_Протокол3("Давайте приобретем карту КеГеЛьБУМ", DisplayInfo, "Купить", "Отказаться", ДанныеОтвета);
					
					Если		Ответ = "Купить" Тогда
						Если НЕ ВвестиКарту(ЗаказОбъект, "Считайте новую карту КеГеЛьБУМ", Истина) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						
						Если НЕ ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
							// добавление карты в список товаров
							
							ТоварКарты = ИнтерфейсРМ.НайтиТоварПоКоду(Лояльность.ПолучитьКодТовараКарты(Регион));
							
							// товар не найден - выход
							Если ТоварКарты = Справочники.Товары.ПустаяСсылка() Тогда
								ЗаказОбъект.НомерКартыЛояльности = "";
								ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","","Не найден товар карты лояльности (код 16020001/16020002)","","Вернуться в чек","");
								ЛояльностьКлиентСервер.Логирование(1, "расчет", "товар карты не найден");
								Возврат ВозвратВЧек(СтруктураВозврата);
							КонецЕсли;
							
							// добавление карты в заказ, если ее там еще нет
							СтрокаТЧ = ЗаказОбъект.Товары.Найти(ТоварКарты, "Товар");
							Если СтрокаТЧ = Неопределено Тогда
								ГлавнаяФормаОбъектОбработки = глОбработки.ГлавнаяФорма;
								ИдСтроки = ГлавнаяФормаОбъектОбработки.ВводНовойСтроки(ТоварКарты);
							КонецЕсли;
							
							// пересчитаваем запрос
							НоваяКарта = Истина; 
							Продолжить;
						Иначе
							// карту не ввели - выход
							ЗакончитьРасчет = Истина; // если возвращаться к расчету, то будет повторый запрос карты
							Продолжить;
						КонецЕсли;
					ИначеЕсли	Ответ = "Отказаться" Тогда
						// карты не будет - выход
						ЗакончитьРасчет = Истина;
						Продолжить;
					Иначе
						// "Возврат в чек"
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
				Иначе
					// карта введена, выполняем начисление
					
					Если Заказ.n_kgl_add = 0 Тогда
						Если ДанныеОтвета.status = 1 Тогда
							Заголовок	= "Извините, нет связи с центральным офисом";
							Кнопка1		= "Начислить позже";
							Кнопка2		= "Повторить запрос";
						Иначе
							Заголовок	= "В чеке нет товаров для начисления и списания";
							Кнопка1		= "Продолжить";
							Кнопка2		= "Вернуться в чек";
						КонецЕсли;
					Иначе
						Заголовок	= "Возможно только начисление";
						Кнопка1		= "Начислить";
						Кнопка2		= "Вернуться в чек";
					КонецЕсли;
					
					Ответ = ЗапросДействия_Протокол3(Заголовок, DisplayInfo, Кнопка1, Кнопка2, ДанныеОтвета);
					
					Если		Ответ = "Начислить" ИЛИ  Ответ = "Продолжить" Тогда
						ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
						Если НЕ ОбработатьНачисление_Протокол3(ЗаказОбъект, Заказ) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						ЗакончитьРасчет = Истина;
					ИначеЕсли	Ответ = "Начислить позже" Тогда
						ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
						Если НЕ ОбработатьНачисление_Протокол3(ЗаказОбъект, Заказ) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						Прервать;
					ИначеЕсли	Ответ = "Повторить запрос" Тогда
						РежимОтправки = 0; // на всякий случай обновим
						Продолжить;
					Иначе
						// "Возврат в чек"
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеОтвета.request="SALE" И Заказ.order_type = 1 Тогда
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// чек начисления

			ЗакончитьРасчет = Истина;
		ИначеЕсли ДанныеОтвета.request="SALE" И Заказ.order_type = 2 Тогда
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// чек списания
			
			ЗакончитьРасчет = Истина;
		Иначе
			// неизвестный запрос
			ЗакончитьРасчет = Истина;
		КонецЕсли;
		
	КонецЦикла;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ПОСТРОВЕРКА
	Если ЗаказОбъект.ОбработанСистемойЛояльности = 2 Тогда
		
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "расчет не произведен, заказ уходит в СПУЛ");
		Лояльность.ЗаписатьВСПУЛ(ЗаказОбъект.Ссылка);
		
		// заказ не обработан - вставляем подвал "нет связи"
		ВыборкаДополнительныхСвойств = РегистрыСведений.ДополнительныеСвойства.Выбрать(Новый Структура("Свойство", "ЛояльностьПодвалНетСвязи"));
		Если ВыборкаДополнительныхСвойств.Следующий() Тогда
			ЗаказОбъект.ПодвалЧека = СтрЗаменить(ВыборкаДополнительныхСвойств.Значение, "\n", Символы.ПС);
		КонецЕсли;
		
	Иначе
		
		Если ЗаказОбъект.ПодвалЧека = "" Тогда
			// заказ обработан, но подвала нет - вставляем подвал начисления
			СформироватьПодвалНачисления_Протокол3(ЗаказОбъект, Заказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//ПодставитьАдресВПодвал(ЗаказОбъект);
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет", "конец (заказ="+ЗаказОбъект.Номер+")");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция РасчетЧека_Протокол2(ЗаказОбъект, Тест)
	
	ТипЗапроса = "SALE";
	
	///////////////////////////////////////////////////////////////////////////////////////
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет", "начало (заказ="+ЗаказОбъект.Номер+")");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех"		, Истина);
	СтруктураВозврата.Вставить("Параметр"	, "");
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	ЗаказОбъект.ОбработанСистемойЛояльности = 0;
	//0		- обработан на центральном сервисе
	//1		- обработан в локальном сервисе
	//2		- не обработан
	
	ЗаказОбъект.ТипЧекаЛояльность = 0;
	
	СтруктураАСКов	= Новый Структура;
	ДанныеОтвета	= Неопределено;
	Чек				= Неопределено;
	ЗакончитьРасчет = Ложь;
	НоваяКарта		= Ложь;
	
	РежимОтправки	= 0; // 0 - в Центр, 1 - в Локальный
	ОтправкаУспешна	= Ложь;
	
	ЕстьКупоны		= (ЗаказОбъект.Купоны.Количество() > 0);
	
	сч = 1;
	Пока НЕ ЗакончитьРасчет Цикл
		
		// исключаем зацикливание
		сч = сч + 1;
		Если сч > 30 Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка","Ошибка зацикливания расчета Лояльности","","Вернуться в чек","");
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "зацикливание расчета");
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;		
		
		Если ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И (НЕ ЕстьКупоны) И (РежимОтправки = 0) Тогда
			Если НЕ ВвестиКарту(ЗаказОбъект) Тогда
				Возврат ВозвратВЧек(СтруктураВозврата);
			КонецЕсли;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
		
		ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONПоЗаказу_Протокол2(ТипЗапроса, ЗаказОбъект, ЗаказОбъект.ТипЧекаЛояльность, СтруктураАСКов,,Тест);
		Если ПараметрыЗапроса.Ошибка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
			ОбработкаОшибокЛОЛ(ЗаказОбъект, 1, "Нет связи с принтером кассы");
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;
		
		ОтправкаУспешна = Ложь;
		
		Попытка
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "отправка запроса (Режим="+?(РежимОтправки=0,"центр","локальный")+",текст="+ПараметрыЗапроса.ТекстЗапроса+")");
			//ОтветСервера = Лояльность.ОтправитьЧекНаОбработку_Протокол2(ПараметрыЗапроса.ТекстЗапроса, РежимОтправки, Тест);
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол2(ПараметрыЗапроса.ТекстЗапроса, "CALC", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
		Если НЕ ОтправкаУспешна Тогда
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки (Режим="+?(РежимОтправки=0,"центр","локальный")+",ответ: "+ОписаниеОшибки+")");
			
			// отправка не прошла - либо в Локальный, либо выход
			Если РежимОтправки = 0 Тогда
				// попытка отправки в Локальный сервис
				РежимОтправки = 1;
				Продолжить;
			Иначе
				// сервис недоступен или не смог обработать запрос
				ОтправкаУспешна = Ложь;
			КонецЕсли;
		КонецЕсли;
			
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОШИБОК ОТПРАВКИ
		Если ОтправкаУспешна Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "получен ответ:"+ОтветСервера.Ответ);
			Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
				
				// Если ошибка - сначала пытаемся обработать в Локальном сервисе
				Если РежимОтправки = 0 Тогда
					РежимОтправки = 1;
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка отправки (Режим="+?(РежимОтправки=0,"центр","локальный")+")");
					Продолжить;
				КонецЕсли;
				
				// сервис недоступен или не смог обработать запрос
				ОтправкаУспешна = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОтправкаУспешна Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "Извините нет связи");
			
			ТекстЗаголовка	= "Извините нет связи";
			Текст			= "Акции +1 НЕ будут применены"+Символы.ПС+"КеГЛи будут начислены позднее автоматически";
			ТекстИнформационноеПоле = "Проверяйте начисление"+Символы.ПС+"КеГЛей в Вашем ЛИЧНОМ"+Символы.ПС+"КАБИНЕТЕ на сайте или в"+Символы.ПС+"Мобильном Приложении"+Символы.ПС+"КуулКЛЕВЕР";
			
			Ответ = Неопределено;
			Ответ = ВыводОкнаЛОЛ(ТекстЗаголовка, Текст, "Начислить позже", "Повторить запрос", ТекстИнформационноеПоле);
			
			Если		Ответ = "Начислить позже" Тогда
				ЗаказОбъект.ОбработанСистемойЛояльности = 2;
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "начислить позже");
				Прервать;
			ИначеЕсли	Ответ = "Повторить запрос" Тогда
				Продолжить;
			Иначе //Вернуться в чек
				Возврат ВозвратВЧек(СтруктураВозврата);
			КонецЕсли;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ПОЛУЧЕНИЕ ОТВЕТА
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON_1С(ОтветСервера.Ответ);
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "распарсен ответ");
		ДанныеОтвета.Свойство("chek", Чек);
		ДанныеОтвета.Свойство("ask"	, СтруктураАСКов);
		ЗаказОбъект.ИдентификаторЛояльности = ЛояльностьКлиентСервер.СформироватьИдентификаторЛояльности(Чек, Регион);
		ЗаказОбъект.ОбработанСистемойЛояльности = Чек.status;
		
		Если ЕстьКупоны И ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И НЕ ПустаяСтрока(Чек.card_number) Тогда
			// получаем номер карты из купонов
			ЗаказОбъект.НомерКартыЛояльности = Чек.card_number;			
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОШИБОК КОТОРЫЕ ВЕРНУЛА ЛОЯЛЬНОСТЬ
		Если Чек.err <> 0 Тогда
			Если Чек.err = (-1) Тогда
				// Если ошибка критичная, то сначала пытаемся обработать в Локальном сервисе
				Если РежимОтправки = 0 Тогда
					РежимОтправки = 1;
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "в ответе ошибка (-1)");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Ответ = Неопределено;
			Ответ = ОбработкаОшибокЛОЛ(ЗаказОбъект, Чек.err, Чек.errmsg);
			
			Если		Ответ = "Начислить позже" Тогда
				ЗаказОбъект.ОбработанСистемойЛояльности = 2;
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "начислить позже");
				Прервать;
			ИначеЕсли	Ответ = "Вернуться в чек" Тогда
				Возврат ВозвратВЧек(СтруктураВозврата);
			ИначеЕсли	Ответ = "Продолжить" Тогда
				Продолжить;
			Иначе
			КонецЕсли;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА СООБЩЕНИЙ
		
		Если Чек.Свойство("messages") Тогда		
			Для каждого ТекущееСообщение Из Чек.messages Цикл				
				Заголовок = ТекущееСообщение.head;
				Текст1 = СтрЗаменить(ТекущееСообщение.text_1, "\n", Символы.ПС);
				Текст2 = СтрЗаменить(ТекущееСообщение.text_2, "\n", Символы.ПС);
				
				СоответствиеОтветов = Новый Соответствие;
				Если ТекущееСообщение.btn_1 <> Неопределено Тогда
					СоответствиеОтветов.Вставить(ТекущееСообщение.btn_1.text, ТекущееСообщение.btn_1.command);
					Кнопка1 = ТекущееСообщение.btn_1.text;
				Иначе
					Кнопка1 = "";
				КонецЕсли;
				Если ТекущееСообщение.btn_2 <> Неопределено Тогда
					СоответствиеОтветов.Вставить(ТекущееСообщение.btn_2.text, ТекущееСообщение.btn_2.command);
					Кнопка2 = ТекущееСообщение.btn_2.text;
				Иначе
					Кнопка2 = "";
				КонецЕсли;
				Если ТекущееСообщение.btn_3 <> Неопределено Тогда
					СоответствиеОтветов.Вставить(ТекущееСообщение.btn_3.text, ТекущееСообщение.btn_3.command);
					Кнопка3 = ТекущееСообщение.btn_3.text;
				Иначе
					Кнопка3 = "";
				КонецЕсли;
				
				Ответ = ИнтерфейсРМ.ВопросПредупреждение(Заголовок, Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
				
				Команда = НРег(СоответствиеОтветов.Получить(Ответ));
				
				Если Команда = "next" Тогда
					Продолжить;
				ИначеЕсли Команда = "return" Тогда
					Возврат ВозвратВЧек(СтруктураВозврата);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА АСКов
		Если СтруктураАСКов <> Неопределено Тогда
			// есть аски
			ТребуетОтвета = 0;
			СтруктураАСКов.Свойство("need_rerequest", ТребуетОтвета);
			
			ВариантыОтвета = Неопределено;
			СтруктураАСКов.Свойство("answer_variants", ВариантыОтвета);
			
			Инпут = Неопределено;
			СтруктураАСКов.Свойство("input", Инпут);
			
			ТекстВопроса = "";
			СтруктураАСКов.Свойство("request", ТекстВопроса);
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "\n", Символы.ПС);
			
			Ответ = "";
			Если		ВариантыОтвета <> Неопределено Тогда
				// АСК с вариантом ответа
				Ответ = ВыборВариантаОтвета(ТекстВопроса, ВариантыОтвета);
			ИначеЕсли	Инпут <> Неопределено Тогда
				// АСК с запросом значения
				Ответ = ИнтерфейсРМ.ВводЧисла(ТекстВопроса, "Строка", 10, 0);
			Иначе
				// Сообщение на экран
				ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","",ТекстВопроса,"","ОК","");
			КонецЕсли;
			
			Ответ = ?(Ответ = Неопределено, "", Ответ);
			
			// вставить ответ в ответ 
			СтруктураОтвета = Новый Структура;
			СтруктураОтвета.Вставить("value", Ответ);
			СтруктураАСКов.Вставить("answer", СтруктураОтвета);
			
			СтруктураАСКов.Удалить("request");
			СтруктураАСКов.Удалить("need_rerequest");
			СтруктураАСКов.Удалить("answer_variants");
			СтруктураАСКов.Удалить("input");
			
			Если ТребуетОтвета = 1 Тогда
				// повторный запрос с ответом в теле
				Продолжить;
			Иначе
				// продолжаем так
				
			КонецЕсли;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		Если ОтправкаУспешна Тогда
			// после обработки всех ошибок - если запрос был успешено отправлен, то следующий запрос по умолчанию идет в центр
			РежимОтправки = 0;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОТВЕТА ЛОЯЛЬНОСТИ
		Если Чек.chek_type = 0 Тогда
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// первичный чек
			
			ЗаказОбъект.ПодвалЧека = "";
			
			Если Чек.chek_s_kgl_rem > 0 Тогда
				// в ответе 2 части (начисление списание)
				
				// вопрос - начислить/списать
				Ответ = ЗапросДействия("Вам начислить или списать КеГЛи?", Чек.DisplayInfo, "Начислить", "Списать", Чек);
				
				Если		Ответ = "Списать" Тогда
					// необходим пин
					Если Чек.need_pin = 1 Тогда
						КорректныйПИН = 0;
						
						Для КоличествоПопыток = 1 по 3 Цикл
							ЛояльностьКлиентСервер.Логирование(1, "расчет", "запрос ПИНа");
							КорректныйПИН = ВвестиПИН(Чек.pin_md);
							Если		КорректныйПИН = 1 Тогда
								// корректный
								Прервать;
							ИначеЕсли	КорректныйПИН = (-1) Тогда
								// отмена
								Возврат ВозвратВЧек(СтруктураВозврата);
							Иначе
								// некорректный
								ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка","Неверный Код защиты","","ОК","");
								ЛояльностьКлиентСервер.Логирование(1, "расчет", "неверный ПИН");
							КонецЕсли;
						КонецЦикла;
						
						Если КорректныйПИН <> 1 Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьСписание");
					Если НЕ ОбработатьСписание_Протокол2(ЗаказОбъект, Чек) Тогда
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
					ЗакончитьРасчет = Истина;
				ИначеЕсли	Ответ = "Начислить" Тогда
					ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
					//### Протокол = Лояльность
					Если НЕ ОбработатьНачисление_Протокол2(ЗаказОбъект, Чек) Тогда
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
					ЗакончитьРасчет = Истина;
				Иначе
					// "Возврат в чек"
					Возврат ВозвратВЧек(СтруктураВозврата);
					
				КонецЕсли;
				
			Иначе	
				
				Если ПустаяСтрока(Чек.card_number) Тогда
					// карта не введена
					
					Ответ = ЗапросДействия("Давайте приобретем карту КеГеЛьБУМ", Чек.DisplayInfo, "Купить", "Отказаться", Чек);
					
					Если		Ответ = "Купить" Тогда
						Если НЕ ВвестиКарту(ЗаказОбъект, "Считайте новую карту КеГеЛьБУМ", Истина) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						
						Если НЕ ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
							// добавление карты в список товаров
							
							ТоварКарты = ИнтерфейсРМ.НайтиТоварПоКоду(Лояльность.ПолучитьКодТовараКарты(Регион));
							
							// товар не найден - выход
							Если ТоварКарты = Справочники.Товары.ПустаяСсылка() Тогда
								ЗаказОбъект.НомерКартыЛояльности = "";
								ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","","Не найден товар карты лояльности (код 16020001/16020002)","","Вернуться в чек","");
								ЛояльностьКлиентСервер.Логирование(1, "расчет", "товар карты не найден");
								Возврат ВозвратВЧек(СтруктураВозврата);
							КонецЕсли;
							
							// добавление карты в заказ, если ее там еще нет
							СтрокаТЧ = ЗаказОбъект.Товары.Найти(ТоварКарты, "Товар");
							Если СтрокаТЧ = Неопределено Тогда
								ГлавнаяФормаОбъектОбработки = глОбработки.ГлавнаяФорма;
								ИдСтроки = ГлавнаяФормаОбъектОбработки.ВводНовойСтроки(ТоварКарты);
							КонецЕсли;
							
							// пересчитаваем запрос
							НоваяКарта = Истина; 
							Продолжить;
						Иначе
							// карту не ввели - выход
							ЗакончитьРасчет = Истина; // если возвращаться к расчету, то будет повторый запрос карты
							Продолжить;
						КонецЕсли;
					ИначеЕсли	Ответ = "Отказаться" Тогда
						// карты не будет - выход
						ЗакончитьРасчет = Истина;
						Продолжить;
					Иначе
						// "Возврат в чек"
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
				Иначе
					// карта введена, выполняем начисление
					
					Если Чек.chek_n_kgl_add = 0 Тогда
						Если Чек.status = 1 Тогда
							Заголовок	= "Извините, нет связи с центральным офисом";
							Кнопка1		= "Начислить позже";
							Кнопка2		= "Повторить запрос";
						Иначе
							Заголовок	= "В чеке нет товаров для начисления и списания";
							Кнопка1		= "Продолжить";
							Кнопка2		= "Вернуться в чек";
						КонецЕсли;
					Иначе
						Заголовок	= "Возможно только начисление";
						Кнопка1		= "Начислить";
						Кнопка2		= "Вернуться в чек";
					КонецЕсли;
					
					Ответ = ЗапросДействия(Заголовок, Чек.DisplayInfo, Кнопка1, Кнопка2, Чек);
					
					Если		Ответ = "Начислить" ИЛИ  Ответ = "Продолжить" Тогда
						ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
						Если НЕ ОбработатьНачисление_Протокол2(ЗаказОбъект, Чек) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						ЗакончитьРасчет = Истина;
					ИначеЕсли	Ответ = "Начислить позже" Тогда
						ЛояльностьКлиентСервер.Логирование(1, "расчет", "ОбработатьНачисление");
						Если НЕ ОбработатьНачисление_Протокол2(ЗаказОбъект, Чек) Тогда
							Возврат ВозвратВЧек(СтруктураВозврата);
						КонецЕсли;
						Прервать;
					ИначеЕсли	Ответ = "Повторить запрос" Тогда
						РежимОтправки = 0; // на всякий случай обновим
						Продолжить;
					Иначе
						// "Возврат в чек"
						Возврат ВозвратВЧек(СтруктураВозврата);
					КонецЕсли;
						
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Чек.chek_type = 1 Тогда
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// чек начисления

			ЗакончитьРасчет = Истина;
		ИначеЕсли Чек.chek_type = 2 Тогда
			///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			// чек списания
			
			ЗакончитьРасчет = Истина;
		Иначе
			// неизвестный запрос
			ЗакончитьРасчет = Истина;
		КонецЕсли;
		
	КонецЦикла;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ПОСТРОВЕРКА
	Если ЗаказОбъект.ОбработанСистемойЛояльности = 2 Тогда
		
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "расчет не произведен, заказ уходит в СПУЛ");
		Лояльность.ЗаписатьВСПУЛ(ЗаказОбъект.Ссылка);
		
		// заказ не обработан - вставляем подвал "нет связи"
		ВыборкаДополнительныхСвойств = РегистрыСведений.ДополнительныеСвойства.Выбрать(Новый Структура("Свойство", "ЛояльностьПодвалНетСвязи"));
		Если ВыборкаДополнительныхСвойств.Следующий() Тогда
			ЗаказОбъект.ПодвалЧека = СтрЗаменить(ВыборкаДополнительныхСвойств.Значение, "\n", Символы.ПС);
		КонецЕсли;
		
	Иначе
		
		Если ЗаказОбъект.ПодвалЧека = "" Тогда
			// заказ обработан, но подвала нет - вставляем подвал начисления
			СформироватьПодвалНачисления_Протокол2(ЗаказОбъект, Чек);
		КонецЕсли;
		
	КонецЕсли;
	
	//ПодставитьАдресВПодвал(ЗаказОбъект);
	
	ЛояльностьКлиентСервер.Логирование(1, "расчет", "конец (заказ="+ЗаказОбъект.Номер+")");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ФинализацияЧека(ЗаказОбъект, ПротоколОбъект=Неопределено) Экспорт
	
	ЛояльностьКлиентСервер.Логирование(1, "финализация", "начало (заказ="+ЗаказОбъект.Номер+", протокол="+ПротоколОбъект.Номер+")");
	
	Лояльность.ЗапуститьФинализациюЧека(ЗаказОбъект.Ссылка, ПротоколОбъект.Ссылка, ПротоколОбъект.ИдентификаторЛояльности);	
	
	ЛояльностьКлиентСервер.Логирование(1, "финализация", "конец (заказ="+ЗаказОбъект.Номер+", протокол="+ПротоколОбъект.Номер+")");
	
КонецПроцедуры

Функция ЗакрытьЗаказ(ЗаказОбъект, ПротоколСсылка=Неопределено) Экспорт
	
	ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "начало (заказ="+ЗаказОбъект.Номер+")");
	
	// Удаляем данные лояльности по заказу, не влияющие на закрытие заказа
	Лояльность.СброситьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка);
	
	// Получение параметров лояльности
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(глРабочееМесто);
	ВерсияЛояльности = ЛояльностьКлиентСервер.ВерсияЛояльности(Тест);
 	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);

	// Структура возврата результата обработки
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех"		, Истина);
	СтруктураВозврата.Вставить("Параметр"	, "");
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	ЗаказОбъект.ОбработанСистемойЛояльности = 0;
	//0		- обработан на центральном сервисе
	//1		- обработан в локальном сервисе
	//2		- не обработан
	
	ЗаказОбъект.ТипЧекаЛояльность = 0;
	ЗаказОбъект.ИдентификаторЛояльности = ""; // Сбрасываем идентификатор лояльности
	
	СтруктураАСКов	= Новый Структура;
	ДанныеОтвета	= Неопределено;
	Заказ			= Неопределено;
	ЗакончитьРасчет = Ложь;
	НоваяКарта		= Ложь;
	
	РежимОтправки	= 0; // 0 - в Центр, 1 - в Локальный
	ОтправкаУспешна	= Ложь;
	
	ЕстьКупоны		= (ЗаказОбъект.Купоны.Количество() > 0);
	
	сч = 1;
	Пока НЕ ЗакончитьРасчет Цикл
		
		// исключаем зацикливание
		сч = сч + 1;
		Если сч > 30 Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка","Ошибка зацикливания расчета Лояльности","","Вернуться в чек","");
			ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "зацикливание расчета");
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
		
		Если ВерсияПротокола = 5 Тогда
			ПараметрыЗапроса = Лояльность.СформироватьJSONДляЗакрытияЗаказаНаКлиенте_Протокол5(ЗаказОбъект.Ссылка, ПротоколСсылка,, Тест);
		Иначе
			ПараметрыЗапроса = Лояльность.СформироватьJSONДляЗакрытияЗаказаНаКлиенте_Протокол4(ЗаказОбъект.Ссылка, ПротоколСсылка,, Тест);
		КонецЕсли;
		
		Если ПараметрыЗапроса.Ошибка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
						
			ТекстЗаголовка	= "Извините нет связи";
			Текст			= "";//Акции +1 НЕ будут применены"+Символы.ПС+"КеГЛи будут начислены позднее автоматически";
			ТекстИнформационноеПоле = "Проверяйте начисление"+Символы.ПС+"КеГЛей в Вашем ЛИЧНОМ"+Символы.ПС+"КАБИНЕТЕ на сайте или в"+Символы.ПС+"Мобильном Приложении"+Символы.ПС+"КуулКЛЕВЕР";
			
			Ответ = Неопределено;
			ИнтерфейсРМ.ВопросПредупреждение(ТекстЗаголовка,Текст,ТекстИнформационноеПоле,"","ОК","");
			
			Лояльность.ЗаписатьВСПУЛЗакрытиеЗаказа(ЗаказОбъект.Ссылка, ПротоколСсылка);
			Лояльность.ЗапуститьОбработкуСПУЛаЛояльности(ЗаказОбъект.Ссылка, ПротоколСсылка);
			
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;
		
		ОтправкаУспешна = Ложь;
		
		Попытка
			ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "отправка запроса (Режим="+?(РежимОтправки=0,"центр","локальный")+",текст="+ПараметрыЗапроса.ТекстЗапроса+")");
			
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
		Если НЕ ОтправкаУспешна Тогда
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "ошибка отправки (Режим="+?(РежимОтправки=0,"центр","локальный")+",ответ: "+ОписаниеОшибки+")");
		КонецЕсли;			
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОШИБОК ОТПРАВКИ
		Если ОтправкаУспешна Тогда
			ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "получен ответ:"+ОтветСервера.Ответ);
			Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
				
				//// Если ошибка - сначала пытаемся обработать в Локальном сервисе
				//Если РежимОтправки = 0 Тогда
				//	РежимОтправки = 1;
				//	ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "ошибка отправки (Режим="+?(РежимОтправки=0,"центр","локальный")+")");
				//	Продолжить;
				//КонецЕсли;
				
				// сервис недоступен или не смог обработать запрос
				ОтправкаУспешна = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОтправкаУспешна Тогда
			ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "Извините нет связи");
			
			ТекстЗаголовка	= "Извините нет связи";
			Текст			= "";//Акции +1 НЕ будут применены"+Символы.ПС+"КеГЛи будут начислены позднее автоматически";
			ТекстИнформационноеПоле = "Проверяйте начисление"+Символы.ПС+"КеГЛей в Вашем ЛИЧНОМ"+Символы.ПС+"КАБИНЕТЕ на сайте или в"+Символы.ПС+"Мобильном Приложении"+Символы.ПС+"КуулКЛЕВЕР";
			
			Ответ = Неопределено;
			ИнтерфейсРМ.ВопросПредупреждение(ТекстЗаголовка,Текст,ТекстИнформационноеПоле,"","ОК","");
			
			//### Здесь нужно в протокол записать чек-оффлайн
			
			ЗаказОбъект.ОбработанСистемойЛояльности = 2;
			ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "закрыть позже");
			
			Лояльность.ЗаписатьВСПУЛЗакрытиеЗаказа(ЗаказОбъект.Ссылка, ПротоколСсылка);
			Лояльность.ЗапуститьОбработкуСПУЛаЛояльности(ЗаказОбъект.Ссылка, ПротоколСсылка);
			
			Прервать;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ПОЛУЧЕНИЕ ОТВЕТА
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
		ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "распарсен ответ");
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОШИБОК КОТОРЫЕ ВЕРНУЛА ЛОЯЛЬНОСТЬ
		Если ДанныеОтвета.err <> 0 Тогда
			Если ДанныеОтвета.err = (-1) Тогда
				// Если ошибка критичная, то сначала пытаемся обработать в Локальном сервисе
				//Если РежимОтправки = 0 Тогда
				//	РежимОтправки = 1;
					ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "в ответе ошибка (-1)");
				//	Продолжить;
				//КонецЕсли;
			КонецЕсли;
			
			ТекстЗаголовка	= "Извините нет связи";
			Текст			= "";//Акции +1 НЕ будут применены"+Символы.ПС+"КеГЛи будут начислены позднее автоматически";
			ТекстИнформационноеПоле = "Проверяйте начисление"+Символы.ПС+"КеГЛей в Вашем ЛИЧНОМ"+Символы.ПС+"КАБИНЕТЕ на сайте или в"+Символы.ПС+"Мобильном Приложении"+Символы.ПС+"КуулКЛЕВЕР";
			
			Ответ = Неопределено;
			ИнтерфейсРМ.ВопросПредупреждение(ТекстЗаголовка,Текст,ТекстИнформационноеПоле,"","ОК","");
			
			//### Здесь нужно в протокол записать чек-оффлайн
			
			Лояльность.ЗаписатьВСПУЛЗакрытиеЗаказа(ЗаказОбъект.Ссылка, ПротоколСсылка);
			Лояльность.ЗапуститьОбработкуСПУЛаЛояльности(ЗаказОбъект.Ссылка, ПротоколСсылка);
			
			Прервать;
			
			//Если		Ответ = "Начислить позже" Тогда
			//	ЗаказОбъект.ОбработанСистемойЛояльности = 2;
			//	ЛояльностьКлиентСервер.Логирование(1, "расчет", "начислить позже");
			//	Прервать;
			//ИначеЕсли	Ответ = "Вернуться в чек" Тогда
			//	Возврат ВозвратВЧек(СтруктураВозврата);
			//ИначеЕсли	Ответ = "Продолжить" Тогда
			//	Продолжить;
			//Иначе
			//КонецЕсли;
		КонецЕсли;
		
		ДанныеОтвета.Свойство("order", Заказ);
		ЗаказОбъект.ИдентификаторЛояльности = Заказ.request_id;
		ЗаказОбъект.ОбработанСистемойЛояльности = 1;//Чек.status; //!!!
		
		// Убираем признак необходимости обработки закрытия
		Лояльность.ЗаписатьВСПУЛЗакрытиеЗаказа(ЗаказОбъект.Ссылка, ПротоколСсылка, Ложь);
		Лояльность.УдалитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка);
		Лояльность.ЗапуститьОбработкуСПУЛаЛояльности(ЗаказОбъект.Ссылка, ПротоколСсылка);
				
		///////////////////////////////////////////////////////////////////////////////////
		Если ОтправкаУспешна Тогда
			// после обработки всех ошибок - если запрос был успешено отправлен, то следующий запрос по умолчанию идет в центр
			РежимОтправки = 0;
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ОТВЕТА ЛОЯЛЬНОСТИ
			
		ЗаказОбъект.ПодвалЧека = "";
			
		ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "обработка ответа");
					
		Если НЕ ОбработатьЗакрытие_Протокол4(ЗаказОбъект, Заказ) Тогда
			Возврат ВозвратВЧек(СтруктураВозврата);
		КонецЕсли;
					
		ЗакончитьРасчет = Истина;
	КонецЦикла;
	
	ЛояльностьКлиентСервер.Логирование(1, "закрытие заказа", "конец (заказ="+ЗаказОбъект.Номер+")");
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ОбработатьВозврат(ВозвратОбъект, ПротоколСсылка=Неопределено) Экспорт
	
	ЛояльностьКлиентСервер.Логирование(1, "финализация возврата", "начало (возврат="+ВозвратОбъект.Номер+")");
	
	Лояльность.ЗаписатьВСПУЛ(ВозвратОбъект.Ссылка, ПротоколСсылка);
	Лояльность.ОбработатьСпулЛояльности(ВозвратОбъект.Ссылка, ПротоколСсылка);
	//Лояльность.ЗапуститьОбработкуСПУЛаЛояльности(ВозвратОбъект.Ссылка, ПротоколСсылка);
	
	ЛояльностьКлиентСервер.Логирование(1, "финализация возврата", "конец (возврат="+ВозвратОбъект.Номер+")");
	
КонецПроцедуры

// Изменение заказа по результатам начисления лояльности
// Если Место реализации не указано (0), тогда выполняется изменение заказа по всем местам реализации
Функция ОбработатьНачисление(ЗаказОбъект, ПротоколОбъект, ДанныеЗаказа, МестоРеализации=Неопределено) Экспорт
	
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(ЗаказОбъект.РабочееМесто);
	ВерсияЛояльности = ЛояльностьКлиентСервер.ВерсияЛояльности(Тест);
 	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	
	Если ВерсияПротокола < 3 Тогда
		Возврат ОбработатьНачисление_Протокол3(ЗаказОбъект, ДанныеЗаказа);
	ИначеЕсли ВерсияПротокола < 4 Тогда
		Возврат ОбработатьНачисление_Протокол3(ЗаказОбъект, ДанныеЗаказа);
	ИначеЕсли ВерсияПротокола = 4 Тогда
		Если ЗначениеЗаполнено(МестоРеализации) Тогда
			КодТТ = МестоРеализации.КодТТ;
		Иначе
			КодТТ = 0;
		КонецЕсли;
		
		Возврат ОбработатьНачисление_Протокол4(ЗаказОбъект, ПротоколОбъект, ДанныеЗаказа);//???, МестоРеализации);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОбработатьНачисление_Протокол4(ЗаказОбъект, ПротоколОбъект, ДанныеЗаказа, МестоРеализации = Неопределено)
	
	Обработан = Ложь;
	
	Если МестоРеализации = Неопределено Тогда
		МестоРеализации = ПротоколОбъект.Фирма.КодТТ; //!!! Процедура получения кода ТТ запросом
	КонецЕсли;
	
	ЗаказОбъект.ИдентификаторЛояльности = ДанныеЗаказа.request_id;
	
	Для каждого ТекущееМестоРеализации Из ДанныеЗаказа.sale_places Цикл
		Если МестоРеализации > 0 И ТекущееМестоРеализации.sale_place <> МестоРеализации Тогда
			Продолжить; // Пропускаем текущее место реализации, если указан фильтр
		КонецЕсли;	
		
		// Перезаполнение таблицы товаров заказа
		ТаблицаТоваровЗаполнена = ЗаполнитьТаблицуТоваров_Протокол4(ЗаказОбъект, ТекущееМестоРеализации.order_str_n);
		Если НЕ ТаблицаТоваровЗаполнена Тогда
			ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ","Ошибка ПЕРЕзаполнения таблицы товаров","","Вернуться в чек","",,,10);
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования ТЧ товаров");
			Возврат Обработан;
		КонецЕсли;
		
		// Заполение подвала протокола
		СформироватьПодвалНачисления_Протокол4(ПротоколОбъект, ТекущееМестоРеализации);
		
		// Обработка купонов
		Если ТекущееМестоРеализации.Свойство("coupon_in_n") Тогда
			ОбработатьКупоны_Протокол4(ЗаказОбъект, ТекущееМестоРеализации.coupon_in_n);
		КонецЕсли;
		
		// Записываем примененную лояльность по заказу
		ДанныеРасчета = ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу_SALE(ТекущееМестоРеализации, 1, Ложь, "");
		Лояльность.ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "SALE", ДанныеРасчета, ПротоколОбъект.ИдентификаторЛояльности);
				
	КонецЦикла;
		
	ЗаказОбъект.ИтоговаяСумма = ЗаказОбъект.Товары.Итог("СуммаРеализации");
	ПротоколОбъект.ТипЧекаЛояльность = 1;
	ПротоколОбъект.ИдентификаторЛояльности = ДанныеЗаказа.request_id;
	ПротоколОбъект.НомерТелефона = ДанныеЗаказа.phone_number;
	ПротоколОбъект.Email = ДанныеЗаказа.email;
		
	Обработан = Истина;
	
	Возврат Обработан;
КонецФункции

Функция ОбработатьНачисление_Протокол3(ЗаказОбъект, ДанныеЗаказа)
	
	Обработан = Ложь;
	
	ЗаказОбъект.ИтоговаяСумма = ДанныеЗаказа.n_sum;
	
	ТаблицаТоваровЗаполнена = ЗаполнитьТаблицуТоваров_Протокол3(ЗаказОбъект, ДанныеЗаказа.order_str_n);
	Если НЕ ТаблицаТоваровЗаполнена Тогда
		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ","Ошибка ПЕРЕзаполнения таблицы товаров","","Вернуться в чек","",,,10);
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования ТЧ товаров");
		Возврат Обработан;
	КонецЕсли;
	ЗаказОбъект.ТипЧекаЛояльность = 1;
	
	СформироватьПодвалНачисления_Протокол3(ЗаказОбъект, ДанныеЗаказа);
	
	Обработан = Истина;
	
	Возврат Обработан;
КонецФункции

Функция ОбработатьНачисление_Протокол2(ЗаказОбъект, ДанныеЧека)
	
	Обработан = Ложь;
	
	ТаблицаТоваровЗаполнена = ЗаполнитьТаблицуТоваров_Протокол2(ЗаказОбъект, ДанныеЧека.chek_strn);	
	Если НЕ ТаблицаТоваровЗаполнена Тогда
		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ","Ошибка ПЕРЕзаполнения таблицы товаров","","Вернуться в чек","",,,10);
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования ТЧ товаров");
		Возврат Обработан;
	КонецЕсли;
	ЗаказОбъект.ТипЧекаЛояльность = 1;
	
	СформироватьПодвалНачисления_Протокол2(ЗаказОбъект, ДанныеЧека);
	
	Обработан = Истина;
	
	Возврат Обработан;
КонецФункции

Функция ОбработатьСписание(ЗаказОбъект, ПротоколОбъект, ДанныеЗаказа, МестоРеализации=Неопределено) Экспорт
	
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(ЗаказОбъект.РабочееМесто);
	ВерсияЛояльности = ЛояльностьКлиентСервер.ВерсияЛояльности(Тест);
 	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	
	Если ВерсияПротокола < 3 Тогда
		Возврат ОбработатьСписание_Протокол3(ЗаказОбъект, ДанныеЗаказа);
	ИначеЕсли ВерсияПротокола < 4 Тогда
		Возврат ОбработатьСписание_Протокол3(ЗаказОбъект, ДанныеЗаказа);
	ИначеЕсли ВерсияПротокола = 4 Тогда
		Если ЗначениеЗаполнено(МестоРеализации) Тогда
			КодТТ = МестоРеализации.КодТТ;
		Иначе
			КодТТ = 0;
		КонецЕсли;
		
		Возврат ОбработатьСписание_Протокол4(ЗаказОбъект, ПротоколОбъект, ДанныеЗаказа);//???, КодТТ);
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

Функция ОбработатьСписание_Протокол4(ЗаказОбъект, ПротоколОбъект, ДанныеЗаказа, МестоРеализации=Неопределено)
	
	Обработан = Ложь;
	
	Если МестоРеализации = Неопределено Тогда
		МестоРеализации = ПротоколОбъект.Фирма.КодТТ; //!!! Процедура получения кода ТТ запросом
	КонецЕсли;
	
	Для каждого ТекущееМестоРеализации Из ДанныеЗаказа.sale_places Цикл
		Если МестоРеализации > 0 И ТекущееМестоРеализации.sale_place <> МестоРеализации Тогда
			Продолжить; // Пропускаем текущее место реализации, если указан фильтр
		КонецЕсли;	
		
		// Перезаполнение таблицы товаров заказа
		ТаблицаТоваровЗаполнена = ЗаполнитьТаблицуТоваров_Протокол4(ЗаказОбъект, ТекущееМестоРеализации.order_str_s);
		Если НЕ ТаблицаТоваровЗаполнена Тогда
			ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ","Ошибка ПЕРЕзаполнения таблицы товаров","","Вернуться в чек","",,,10);
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования ТЧ товаров");
			Возврат Обработан;
		КонецЕсли;
		
		// Заполение подвала протокола
		СформироватьПодвалСписания_Протокол4(ПротоколОбъект, ТекущееМестоРеализации);
		
		// Обработка купонов
		Если ТекущееМестоРеализации.Свойство("coupon_in_s") Тогда
			ОбработатьКупоны_Протокол4(ЗаказОбъект, ТекущееМестоРеализации.coupon_in_s);
		КонецЕсли;
		
		// Записываем примененную лояльность по заказу
		ДанныеРасчета = ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу_SALE(ТекущееМестоРеализации, 2, Ложь, "");
		Лояльность.ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка, "SALE", ДанныеРасчета, ПротоколОбъект.ИдентификаторЛояльности);
	КонецЦикла;
		
	ЗаказОбъект.ИтоговаяСумма = ЗаказОбъект.Товары.Итог("СуммаРеализации");	
	
	ПротоколОбъект.ТипЧекаЛояльность = 2;
	ПротоколОбъект.ИдентификаторЛояльности = ДанныеЗаказа.request_id;
	ПротоколОбъект.НомерТелефона = ДанныеЗаказа.phone_number;
	ПротоколОбъект.Email = ДанныеЗаказа.email;
		
	Обработан = Истина;
	
	Возврат Обработан;
КонецФункции

Функция ОбработатьСписание_Протокол3(ЗаказОбъект, ДанныеЗаказа)
	
	Обработан = Ложь;
	
	ЗаказОбъект.ИтоговаяСумма = ДанныеЗаказа.s_sum;
	
	ТаблицаТоваровЗаполнена = ЗаполнитьТаблицуТоваров_Протокол3(ЗаказОбъект, ДанныеЗаказа.order_str_s);	
	Если НЕ ТаблицаТоваровЗаполнена Тогда
		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ","Ошибка ПЕРЕзаполнения таблицы товаров","","Вернуться в чек","",,,10);
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования ТЧ товаров");
		Возврат Обработан;
	КонецЕсли;
	ЗаказОбъект.ТипЧекаЛояльность = 2;
	
	СформироватьПодвалСписания_Протокол3(ЗаказОбъект, ДанныеЗаказа);
	
	Обработан = Истина;
	
	Возврат Обработан;
КонецФункции

Функция ОбработатьСписание_Протокол2(ЗаказОбъект, ДанныеЧека)
	
	Обработан = Ложь;
	
	ТаблицаТоваровЗаполнена = ЗаполнитьТаблицуТоваров_Протокол2(ЗаказОбъект, ДанныеЧека.chek_strs);	
	Если НЕ ТаблицаТоваровЗаполнена Тогда
		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ","Ошибка ПЕРЕзаполнения таблицы товаров","","Вернуться в чек","",,,10);
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования ТЧ товаров");
		Возврат Обработан;
	КонецЕсли;
	ЗаказОбъект.ТипЧекаЛояльность = 2;
	
	СформироватьПодвалСписания_Протокол2(ЗаказОбъект, ДанныеЧека);
	
	Обработан = Истина;
	
	Возврат Обработан;
КонецФункции

Функция ОбработатьЗакрытие_Протокол4(ЗаказОбъект, ДанныеЗаказа)
	
	Обработан = Ложь;
	
	//Для каждого ТекущееМестоРеализации Из ДанныеЗаказа.sale_places Цикл
	//	Если МестоРеализации > 0 И ТекущееМестоРеализации.sale_place <> ТекущееМестоРеализации Тогда
	//		Продолжить; // Пропускаем текущее место реализации, если указан фильтр
	//	КонецЕсли;	
	//
	//	ТаблицаТоваровЗаполнена = ЗаполнитьТаблицуТоваров_Протокол4(ЗаказОбъект, ТекущееМестоРеализации.order_str_n);
	//	Если НЕ ТаблицаТоваровЗаполнена Тогда
	//		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ","Ошибка ПЕРЕзаполнения таблицы товаров","","Вернуться в чек","",,,10);
	//		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования ТЧ товаров");
	//		Возврат Обработан;
	//	КонецЕсли;
		
		СформироватьПодвалНачисления_Протокол3(ЗаказОбъект, ДанныеЗаказа);
		
	//	Если ТекущееМестоРеализации.Свойство("coupon_in_n") Тогда
	//		ОбработатьКупоны_Протокол4(ЗаказОбъект, ТекущееМестоРеализации.coupon_in_n);
	//	КонецЕсли;
	//	
	//КонецЦикла;
		
	ЗаказОбъект.ТипЧекаЛояльность = 1;	
	//ЗаказОбъект.ИтоговаяСумма = ЗаказОбъект.Товары.Итог("СуммаРеализации");	
	////ЗаказОбъект.ИдентификаторЛояльности = ДанныеЗаказа.request_id;
	//Если ПротоколОбъект<>Неопределено Тогда
	//	ПротоколОбъект.ПодвалЧека = ЗаказОбъект.ПодвалЧека;
	//	ПротоколОбъект.ТипЧекаЛояльность = 1;	
	//	//ПротоколОбъект.ИдентификаторЛояльности = ДанныеЗаказа.request_id;
	//КонецЕсли;
	
	Обработан = Истина;
	
	Возврат Обработан;
КонецФункции

Процедура СформироватьПодвалНачисления_Протокол2(ЗаказОбъект, ДанныеЧека)
	ЗаказОбъект.ПодвалЧека = "";
	
	МасивСтрокПодвала = Новый Массив;
	ДанныеЧека.Свойство("podval_n", МасивСтрокПодвала);
	Для Каждого Стр ИЗ МасивСтрокПодвала Цикл
		ЗаказОбъект.ПодвалЧека = ЗаказОбъект.ПодвалЧека + ?(ЗаказОбъект.ПодвалЧека="","",Символы.ПС) + Стр.STR;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПодвалНачисления_Протокол3(ЗаказОбъект, ДанныеЗаказа)
	ЗаказОбъект.ПодвалЧека = "";
	
	МасивСтрокПодвала = Новый Массив;
	ДанныеЗаказа.Свойство("print_n", МасивСтрокПодвала);
	Для Каждого Стр ИЗ МасивСтрокПодвала Цикл
		ЗаказОбъект.ПодвалЧека = ЗаказОбъект.ПодвалЧека + ?(ЗаказОбъект.ПодвалЧека="","",Символы.ПС) + Стр;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПодвалНачисления_Протокол4(ДокументОбъект, ДанныеЗаказа)
	ДокументОбъект.ПодвалЧека = "";
	
	МасивСтрокПодвала = Новый Массив;
	ДанныеЗаказа.Свойство("print_n", МасивСтрокПодвала);
	Для Каждого Стр ИЗ МасивСтрокПодвала Цикл
		ДокументОбъект.ПодвалЧека = ДокументОбъект.ПодвалЧека + ?(ДокументОбъект.ПодвалЧека="","",Символы.ПС) + Стр;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПодвалСписания_Протокол4(ДокументОбъект, ДанныеЗаказа)
	ДокументОбъект.ПодвалЧека = "";
	
	МасивСтрокПодвала = Новый Массив;
	ДанныеЗаказа.Свойство("print_s", МасивСтрокПодвала);
	Для Каждого Стр ИЗ МасивСтрокПодвала Цикл
		ДокументОбъект.ПодвалЧека = ДокументОбъект.ПодвалЧека + ?(ДокументОбъект.ПодвалЧека="","",Символы.ПС) + Стр;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПодвалСписания_Протокол2(ЗаказОбъект, ДанныеЧека)
	ЗаказОбъект.ПодвалЧека = "";
	
	МасивСтрокПодвала = Новый Массив;
	ДанныеЧека.Свойство("podval_s", МасивСтрокПодвала);
	Для Каждого Стр ИЗ МасивСтрокПодвала Цикл
		ЗаказОбъект.ПодвалЧека = ЗаказОбъект.ПодвалЧека + ?(ЗаказОбъект.ПодвалЧека="","",Символы.ПС) + Стр.STR;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьПодвалСписания_Протокол3(ЗаказОбъект, ДанныеЗаказа)
	ЗаказОбъект.ПодвалЧека = "";
	
	МасивСтрокПодвала = Новый Массив;
	ДанныеЗаказа.Свойство("print_s", МасивСтрокПодвала);
	Для Каждого Стр ИЗ МасивСтрокПодвала Цикл
		ЗаказОбъект.ПодвалЧека = ЗаказОбъект.ПодвалЧека + ?(ЗаказОбъект.ПодвалЧека="","",Символы.ПС) + Стр;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьТаблицуТоваров_Протокол4(ЗаказОбъект, МассивТоваров)
	Успех = Истина;
	
	Для Каждого Стр ИЗ МассивТоваров Цикл
		
		Если Стр.pay_status > 0 Тогда
			// Пропускаем товары, у которых не установлен статус "К оплате"
			Продолжить;
		КонецЕсли;
		
		Если Стр.str_type = "T" Тогда
			
			СтрокаЗаказа = ЗаказОбъект.Товары.Найти(Стр.str_no, "ИДСтроки");
			Если СтрокаЗаказа = Неопределено Тогда
				
			//ИдСтроки = Стр.str_no;
			//СтрокаТЧ = ЗаказОбъект.Товары.Найти(ИдСтроки, "ИдСтроки");
			//Если СтрокаТЧ = Неопределено Тогда
				// добавляем товар
				НайденныйТовар = ИнтерфейсРМ.НайтиТоварПоКоду(Стр.product_code);
				Если НайденныйТовар <> Справочники.Товары.ПустаяСсылка() Тогда
					ГлавнаяФормаОбъектОбработки = глОбработки.ГлавнаяФорма;
					ИдСтроки = ГлавнаяФормаОбъектОбработки.ВводНовойСтроки(НайденныйТовар);
					СтрокаЗаказа = ЗаказОбъект.Товары.Найти(ИдСтроки, "ИдСтроки");
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаЗаказа = Неопределено Тогда
				Успех = Ложь;
			Иначе
				СтрокаЗаказа.ЦенаРеализации				= Стр.price_fact;
				СтрокаЗаказа.СуммаРеализации			= Стр.strsum_fact;
				
				СтрокаЗаказа.ЛояльностьСтатус			= Стр.loyality_status;
				СтрокаЗаказа.ЛояльностьСтатусАкции 		= Стр.action_status;
				СтрокаЗаказа.ЛояльностьДопСтатусАкции 	= Стр.action_status_d;
				СтрокаЗаказа.ЛояльностьГруппаАкции 		= Стр.action_group;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Стр.str_type = "S" Тогда
			
			Если Стр.pay_status > 0 Тогда
				// Пропускаем товары, у которых не установлен статус "К оплате"
				Продолжить;
			КонецЕсли;
			
			СтрокаЗаказа = ЗаказОбъект.Товары.Найти(Стр.str_t_no, "ИДСтроки");
			СтрокаСпецифики = ЗаказОбъект.Специфики.Найти(Стр.str_no, "ИДСтроки");
			Если СтрокаЗаказа = Неопределено ИЛИ СтрокаСпецифики = Неопределено Тогда
				
				//Если СтрокаТЧ = Неопределено Тогда
				//	// добавляем товар
				//	НайденныйТовар = ИнтерфейсРМ.НайтиТоварПоКоду(Стр.product_code);
				//	Если НайденныйТовар <> Справочники.Товары.ПустаяСсылка() Тогда
				//		ГлавнаяФормаОбъектОбработки = глОбработки.ГлавнаяФорма;
				//		ИдСтроки = ГлавнаяФормаОбъектОбработки.ВводНовойСтроки(НайденныйТовар);
				//		СтрокаТЧ = ЗаказОбъект.Товары.Найти(ИдСтроки, "ИдСтроки");
				//	КонецЕсли;
				//КонецЕсли;
			
				Успех = Ложь;
			Иначе
				
				СтрокаЗаказа.СуммаРеализации = СтрокаЗаказа.СуммаРеализации + Стр.strsum_fact;
					
				СтрокаСпецифики.ЦенаРеализации 				= Стр.price_fact;				
				СтрокаСпецифики.ЛояльностьСтатус			= Стр.loyality_status;
				СтрокаСпецифики.ЛояльностьСтатусАкции		= Стр.action_status;
				СтрокаСпецифики.ЛояльностьДопСтатусАкции	= Стр.action_status_d;
				СтрокаСпецифики.ЛояльностьГруппаАкции		= Стр.action_group;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Успех;
КонецФункции

Функция ЗаполнитьТаблицуТоваров_Протокол3(ЗаказОбъект, МассивТоваров)
	Успех = Истина;
	
	Для Каждого Стр ИЗ МассивТоваров Цикл        
		
		Если Стр.str_type = "T" Тогда
			
			СтрокаЗаказа = ЗаказОбъект.Товары.Найти(Стр.str_no, "ИДСтроки");
			Если СтрокаЗаказа = Неопределено Тогда
				
			//ИдСтроки = Стр.str_no;
			//СтрокаТЧ = ЗаказОбъект.Товары.Найти(ИдСтроки, "ИдСтроки");
			//Если СтрокаТЧ = Неопределено Тогда
				// добавляем товар
				НайденныйТовар = ИнтерфейсРМ.НайтиТоварПоКоду(Стр.product_code);
				Если НайденныйТовар <> Справочники.Товары.ПустаяСсылка() Тогда
					ГлавнаяФормаОбъектОбработки = глОбработки.ГлавнаяФорма;
					ИдСтроки = ГлавнаяФормаОбъектОбработки.ВводНовойСтроки(НайденныйТовар);
					СтрокаЗаказа = ЗаказОбъект.Товары.Найти(ИдСтроки, "ИдСтроки");
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаЗаказа = Неопределено Тогда
				Успех = Ложь;
			Иначе
				СтрокаЗаказа.ЦенаРеализации			= Стр.price_fact;
				СтрокаЗаказа.СуммаРеализации		= Стр.strsum_fact;
				
				СтрокаЗаказа.ЛояльностьСтатус		= Стр.loyality_status;
				СтрокаЗаказа.ЛояльностьСтатусАкции	= Стр.action_status;
				//СтрокаТЧ.ЛояльностьДопСтатусАкции	= Стр.action_statusD; //!!!
			КонецЕсли;
			
		КонецЕсли;
		
		Если Стр.str_type = "S" Тогда
			
			СтрокаЗаказа = ЗаказОбъект.Товары.Найти(Стр.str_t_no, "ИДСтроки");
			СтрокаСпецифики = ЗаказОбъект.Специфики.Найти(Стр.str_no, "ИДСтроки");
			Если СтрокаЗаказа = Неопределено ИЛИ СтрокаСпецифики = Неопределено Тогда
				
				//Если СтрокаТЧ = Неопределено Тогда
				//	// добавляем товар
				//	НайденныйТовар = ИнтерфейсРМ.НайтиТоварПоКоду(Стр.product_code);
				//	Если НайденныйТовар <> Справочники.Товары.ПустаяСсылка() Тогда
				//		ГлавнаяФормаОбъектОбработки = глОбработки.ГлавнаяФорма;
				//		ИдСтроки = ГлавнаяФормаОбъектОбработки.ВводНовойСтроки(НайденныйТовар);
				//		СтрокаТЧ = ЗаказОбъект.Товары.Найти(ИдСтроки, "ИдСтроки");
				//	КонецЕсли;
				//КонецЕсли;
			
				Успех = Ложь;
			Иначе
				
				СтрокаЗаказа.СуммаРеализации = СтрокаЗаказа.СуммаРеализации + Стр.strsum_fact;
					
				СтрокаСпецифики.ЦенаРеализации = Стр.price_fact;				
				//СтрокаТЧ.ЛояльностьСтатус			= Стр.loyality_status;
				//СтрокаТЧ.ЛояльностьСтатусАкции		= Стр.action_status;
				//СтрокаТЧ.ЛояльностьДопСтатусАкции	= Стр.action_statusD; //!!!
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Успех;
КонецФункции

Функция ЗаполнитьТаблицуТоваров_Протокол2(ЗаказОбъект, МассивТоваров)
	Успех = Истина;
	
	Для Каждого Стр ИЗ МассивТоваров Цикл        
		
		Если Стр.StrType = "T" Тогда
			
			ИдСтроки = Стр.pozNo;
			СтрокаТЧ = ЗаказОбъект.Товары.Найти(ИдСтроки, "ИдСтроки");
			Если СтрокаТЧ = Неопределено Тогда
				// добавляем товар
				НайденныйТовар = ИнтерфейсРМ.НайтиТоварПоКоду(Стр.product_code);
				Если НайденныйТовар <> Справочники.Товары.ПустаяСсылка() Тогда
					ГлавнаяФормаОбъектОбработки = глОбработки.ГлавнаяФорма;
					ИдСтроки = ГлавнаяФормаОбъектОбработки.ВводНовойСтроки(НайденныйТовар);
					СтрокаТЧ = ЗаказОбъект.Товары.Найти(ИдСтроки, "ИдСтроки");
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТЧ = Неопределено Тогда
				Успех = Ложь;
			Иначе
				СтрокаТЧ.ЦенаРеализации				= Стр.price_fact;
				СтрокаТЧ.СуммаРеализации			= Стр.strsum_fact;
				
				СтрокаТЧ.ЛояльностьСтатус			= Стр.loyality_status;
				СтрокаТЧ.ЛояльностьСтатусАкции		= Стр.action_status;
				СтрокаТЧ.ЛояльностьДопСтатусАкции	= Стр.action_statusD;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Успех;
КонецФункции

Процедура ОбработатьКупоны_Протокол4(ЗаказОбъект, МассивКупонов)
	Если МассивКупонов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущаяСтрока Из МассивКупонов Цикл
		СтрокаКупона = ЗаказОбъект.Купоны.Найти(ТекущаяСтрока.code, "Купон");
		Если СтрокаКупона = Неопределено Тогда
			// Если строки купона нет в заказе, значит лояльность решила его добавить
			СтрокаКупона = ЗаказОбъект.Купоны.Добавить();
			СтрокаКупона.Купон = СокрЛП(ТекущаяСтрока.code);
		КонецЕсли;
		СтрокаКупона.ТипКупона = ТекущаяСтрока.type;
		СтрокаКупона.СтатусКупона = ТекущаяСтрока.status;
		СтрокаКупона.Наименование = ТекущаяСтрока.name;
	КонецЦикла;
КонецПроцедуры

Функция ВозвратВЧек(СтруктураВозврата)
	СтруктураВозврата.Вставить("Успех"		, Ложь);
	СтруктураВозврата.Вставить("Параметр"	, "Возврат в чек");
	Возврат СтруктураВозврата;
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ИнтерфейсныеФункцииКП

Функция ИзменитьКартуЛояльности_КП(Обработка) Экспорт
	пНомерКартыЛояльности = ИнтерфейсРМ.ВводЧисла("Карта лояльности", "Пароль",20,,,,"Карта лояльности");
	Если не ЗначениеЗаполнено(пНомерКартыЛояльности) тогда
		возврат -1;
	КонецЕсли;
	
	Если Лев(пНомерКартыЛояльности,14) = "Идентификатор_" Тогда
		//считали с помощью карт ридера
		Обработка.Заказ.НомерКартыЛояльности = Сред(пНомерКартыЛояльности,15);
	Иначе
		Обработка.Заказ.НомерКартыЛояльности = пНомерКартыЛояльности;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Обработка.Заказ.РабочееМесто) Тогда
		Тест = Обработка.Заказ.РабочееМесто.Тест;
	Иначе
		Тест = Истина;
	КонецЕсли;
	
	РезультатПроверки = ЛояльностьКлиентСервер.ПолучитьДанныеГостя(Обработка.Заказ.НомерКартыЛояльности, Тест);
	Если РезультатПроверки.Ошибка Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка проверки номера карты КеГеЛьБУМ",РезультатПроверки.ТекстОшибки,"","ОК","");
		Возврат -1;
	ИначеЕсли ПустаяСтрока(РезультатПроверки.НомерКарты) Тогда
		Обработка.Заказ.НомерКартыЛояльности = "";
		Обработка.Заказ.ИмяГостя = "";
		Обработка.Заказ.ДатаРождения = Дата(1,1,1);
		Обработка.ЗаказДопИнф.ДатаАвторизации = Дата(1,1,1);
		Лояльность.УдалитьДанныеЛояльностиПоЗаказу(Обработка.Заказ.Ссылка); // Удаляем доп. данные, если уже были определены
	Иначе
		ЗаполнитьЗначенияСвойств(Обработка.Заказ, РезультатПроверки);
		Если РезультатПроверки.Свойство("НомерКарты") Тогда
			Обработка.Заказ.НомерКартыЛояльности = РезультатПроверки.НомерКарты;
		Иначе
			Обработка.Заказ.НомерКартыЛояльности = "";
		КонецЕсли;
		Обработка.ЗаказДопИнф.ДатаАвторизации = ТекущаяДата();
		Лояльность.ЗаписатьДанныеЛояльностиПоЗаказу(Обработка.Заказ.Ссылка, "INFO", РезультатПроверки);
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Обработка.Заказ.НомерКартыЛояльности);
		ПараметрыЗадания.Добавить(Обработка.Заказ.Ссылка);
		ПараметрыЗадания.Добавить(Тест);
		ФоновыеЗадания.Выполнить("Лояльность.ОбновитьАкцииГостяПоНомеруКарты", ПараметрыЗадания);		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Обработка.Заказ.НомерКартыЛояльности) Тогда
		КартаДоступа = Справочники.КартыДоступа.НайтиПоРеквизиту("Идентификатор", Обработка.Заказ.НомерКартыЛояльности);			
		Если КартаДоступа.Пустая() Тогда
			Обработка.Заказ.КартаЛояльности = Неопределено;
		иначе
			Обработка.Заказ.КартаЛояльности = КартаДоступа;
		КонецЕсли;
	Иначе
		Обработка.Заказ.КартаЛояльности = Неопределено;
	КонецЕсли;
	 
	Обработка.Заказ.ПодвалЧека						= "";
	Обработка.Заказ.ТипЧекаЛояльность				= 0;
	Обработка.Заказ.ОбработанСистемойЛояльности 	= 0;
	
	Возврат 1;
КонецФункции

Процедура ПрименитьЛояльность_КП(Обработка, ЕстьДеньРожденияВЗаказе) Экспорт
		
	СтруктураАСКов = Неопределено;
	ДеньРождения_Лимит = Константы.Лояльность_ДеньРождения_Лимит.Получить();
	ДеньРождения_Товар = Константы.Лояльность_ДеньРождения.Получить();
			
	ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Обработка.Заказ.Ссылка, "INFO");
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА АКЦИИ ДЕНЬ РОЖДЕНИЕ
	
	СтрДеньРождения = "";
	ДеньРожденияВТечениеМесяца = ложь;
	Если ЕстьДеньРожденияВЗаказе = -1 тогда
		ДеньРождения = ложь;
		Если ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения) тогда
			ДатаРожденияВЭтомГоду = Дата(Формат(Обработка.Заказ.Дата,"ДФ=гггг")+Формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДФ=ММдд"));
			Если ДатаРожденияВЭтомГоду >= НачалоДня(Обработка.Заказ.Дата-86400*6) и ДатаРожденияВЭтомГоду <= КонецДня(Обработка.Заказ.Дата) тогда
				//день рождения
				ДеньРождения = истина;
			иначеЕсли ДатаРожденияВЭтомГоду < ДобавитьМесяц(Обработка.Заказ.Дата,1) и ДатаРожденияВЭтомГоду > Обработка.Заказ.Дата тогда
				ДеньРожденияВТечениеМесяца = истина;
			КонецЕсли;
		КонецЕсли;
	иначе
		ДеньРождения = истина;
	КонецЕсли;
		
	Если ДеньРождения тогда //если определили факт дня рождения, проверим заказы за последний год !?
		
		УжеНачисленоЗаДеньРождения = ложь;
		
		Если Обработка.Заказ.ИтоговаяСумма >= ДеньРождения_Лимит тогда  //проверим условие на сумму заказа
			УсловиеНаРазмерСуммыЗаказа = истина;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказТовары.Ссылка,
			|	ЗаказТовары.Количество,
			|	ЗаказТовары.Ссылка.НомерКартыЛояльности,
			|	ЗаказДопИнф.Статус
			|ИЗ
			|	Документ.Заказ.Товары КАК ЗаказТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
			|		ПО ЗаказТовары.Ссылка = ЗаказДопИнф.Заказ
			|ГДЕ
			|	ЗаказДопИнф.Статус = &Статус
			|	И ЗаказТовары.Ссылка.Дата > &Дата1
			|	И ЗаказТовары.Ссылка.Ссылка <> &ТекущийЗаказ
			|	И ЗаказТовары.Товар = &ТоварПОДАРОК
			|	И ЗаказТовары.Количество > 0
			|	И ЗаказТовары.Ссылка.НомерКартыЛояльности = &НомерКарты";
			
			Запрос.УстановитьПараметр("Дата1", ДобавитьМесяц(Обработка.Заказ.Дата,-11));
			Запрос.УстановитьПараметр("НомерКарты", Обработка.Заказ.НомерКартыЛояльности);
			Запрос.УстановитьПараметр("ТоварПодарок", ДеньРождения_Товар);
			Запрос.УстановитьПараметр("ТекущийЗаказ", Обработка.Заказ.ссылка);
			Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыЗаказа.Закрыт);
			
			Если Не Запрос.Выполнить().Пустой() тогда
				//если по текущей карте были заказы с начислением за день рождения
				УжеНачисленоЗаДеньРождения = истина;
				Если ЕстьДеньРожденияВЗаказе > -1 тогда
					////если в заказ уже добавлен товар за день рождения, найдем и удалим его
					//пСтрока = Заказ.Товары.Получить(ЕстьДеньРожденияВЗаказе);
					//пСтрока.Количество = 0;
					//пСтрока.КоличествоУдалено = 1;
					
					ИнтерфейсРМ.ВопросПредупреждение("Предупреждение","Уже были начисления за День Рождения",
					"    По текущей карте есть проведенные заказы,"+Символы.ПС+
					"    в которых были начисления КеГЛей за День Рождения."+Символы.ПС+
					"    Бонус за День Рождения необходимо удалить из заказа.","ОК","","",,,,10);
					возврат;
				КонецЕсли;
			КонецЕсли;
		иначе
			УсловиеНаРазмерСуммыЗаказа = ложь;
		конецЕсли;
		
		Если УсловиеНаРазмерСуммыЗаказа и Не УжеНачисленоЗаДеньРождения тогда
			Если ЕстьДеньРожденияВЗаказе = -1 тогда
				// Определили что надо поздравить человека с днем рождения, но про это еще никто не знает
				Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос","День Рождения ?",
				"    Здравствуйте, "+ДанныеЛояльностиПоЗаказу.ФИО + Символы.ПС + 
				"________________________________________________________________________"+ Символы.ПС +
				"    С Днем Рождения - " + ?(ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения),формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДЛФ=ДД"),"(нет данных)")+Символы.ПС + 
				"   В Ваш день рождения ресторан Кухня Полли дарит Вам подарок - 500КеГЛей!"+Символы.ПС+
				"________________________________________________________________________","ДА","","НЕТ",,,,10);
				
				Если Ответ = "ДА" тогда
					СтрокаЗаказа = Обработка.ТаблицаЗаказа.Строки.Добавить();
					СтрокаЗаказа.Статус			= Обработка.СтатусЗаказано;
					СтрокаЗаказа.Станция		= глРабочееМесто.Станция;
					СтрокаЗаказа.Автор			= глПользователь;
					СтрокаЗаказа.Товар			= ДеньРождения_Товар;
					СтрокаЗаказа.Наименование	= СтрокаЗаказа.Товар.Наименование;
					СтрокаЗаказа.ТипЦен			= Обработка.ТипЦен;
					СтрокаЗаказа.Количество		= 1;
					СтрокаЗаказа.Категория		= СтрокаЗаказа.Товар.Категория;
					СтрокаЗаказа.ГруппаПечати	= СтрокаЗаказа.Товар.ГруппаПечати;
					СтрокаЗаказа.Подача			= Обработка.ТекущаяПодача;
					Обработка.ЗаполнитьТаблицуЗаказаОтбор();
					
					Обработка.Модифицирован = истина;
					//ОбновитьСтрокиТоваровТаблицыЗаказаОтбор();
					Обработка.ЗаписатьЗаказ();
					Возврат;
				КонецЕсли;
				УсловиеНаРазмерСуммыЗаказа = ложь; //отказались от дня рождения :)
			КонецЕсли;
			
		КонецЕсли;
		
		СтрДеньРождения = 
		"________________________________________________________________________"+ Символы.ПС +
		"День Рождения - " + ?(ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения),формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДЛФ=ДД"),"(нет данных)")+"!"+Символы.ПС;
		Если УсловиеНаРазмерСуммыЗаказа и не УжеНачисленоЗаДеньРождения тогда
			СтрДеньРождения = СтрДеньРождения + "В Ваш день рождения ресторан Кухня Полли дарит Вам подарок - 500 КеГЛей!"+Символы.ПС;
		ИначеЕсли УжеНачисленоЗаДеньРождения тогда
			СтрДеньРождения = СтрДеньРождения + "Подарок 500 КеГЛей уже БЫЛ НАЧИСЛЕН РАНЕЕ."+Символы.ПС;
		иначеЕсли не УсловиеНаРазмерСуммыЗаказа тогда
			СтрДеньРождения = СтрДеньРождения + 
			//" Отпразднуйте свой День рождения с рестораном Кухня Полли!"+Символы.ПС+
			" При заказе от 800 рублей в Ваш день рождения или в течение 6 дней после"+Символы.ПС+
			" ресторан Кухня Полли дарит Вам подарок – 500 КеГЛей! "+Символы.ПС;
		КонецЕсли;
		
		СтрДеньРождения = СтрДеньРождения +"________________________________________________________________________"+ Символы.ПС;
	ИначеЕсли ДеньРожденияВТечениеМесяца тогда
		СтрДеньРождения = 
		"________________________________________________________________________"+ Символы.ПС +
		"День Рождения - " + ?(ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения),формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДЛФ=ДД"),"(нет данных)")+"!"+Символы.ПС+
		" Отпразднуйте свой День рождения с рестораном Кухня Полли!"+Символы.ПС+
		" При заказе от 800 рублей в Ваш день рождения или в течение 6 дней после"+Символы.ПС+
		" ресторан Кухня Полли дарит Вам подарок – 500 КеГЛей! "+Символы.ПС +
		"________________________________________________________________________"+ Символы.ПС;
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////////////////////////
	// ОТПРАВКА ЗАПРОСА СЕРВИСУ ЛОЯЛЬНОСТИ
			
	// Формирование запроса сервису Лояльности
	ОшибкаЛояльности = Ложь;
	ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONПоЗаказу_КП_Протокол3("PRESALE", Обработка.Заказ, Обработка.Заказ.ТипЧекаЛояльность, ДанныеЛояльностиПоЗаказу, СтруктураАСКов);
	Если ПараметрыЗапроса.Ошибка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
		//ОбработкаОшибокЛОЛ(ЗаказОбъект, 1, "Нет связи с принтером кассы");
		
		ОшибкаЛояльности = Истина;						
	КонецЕсли;
	
	// Отправка запроса сервису Лояльности
	Если НЕ ОшибкаЛояльности Тогда
		ЛояльностьКлиентСервер.Логирование(1, "расчет", "отправка запроса (Режим=центр,текст="+ПараметрыЗапроса.ТекстЗапроса+")");
		Если ЗначениеЗаполнено(Обработка.Заказ.РабочееМесто) Тогда
			Тест = Обработка.Заказ.РабочееМесто.Тест;
		Иначе
			Тест = Истина;
		КонецЕсли;
		ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			
		Если ОтветСервера.Ошибка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "Извините нет связи");
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			
			ЗарегистрироватьСобытие("Лояльность.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Обработка.Заказ.Ссылка, ОписаниеОшибки);
			
			ОшибкаЛояльности = Истина;				
		КонецЕсли;
	КонецЕсли;
	
	// Разбор ответа сервиса Лояльности
	Если НЕ ОшибкаЛояльности Тогда
		Попытка
			ОтветЛояльности = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
		Исключение
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "Ошибка разбора ответа сервиса");
			ОшибкаЛояльности = Истина;
		КонецПопытки;
	КонецЕсли;
	
	// Проверка критических ошибок сервиса лояльности
	Если НЕ ОшибкаЛояльности Тогда
		Если ОтветЛояльности.err = -1 Тогда			
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "Ошибка сервиса лояльности");
			ОшибкаЛояльности = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОшибкаЛояльности Тогда
		
		Текст1 = "КеГеЛьБУМ";
		Текст2 = "Ошибка сервера лояльности. КеГЛи будут начислены"+Символы.ПС+"автоматически позднее с учетом действующих акций";
		Кнопка1 = "Начислить позже";
		Кнопка2 = "";
		Кнопка3 = "Вернуться в чек";
		
		Текст2 = Текст2 + Символы.ПС + 
		СтрДеньРождения +
		//"________________________________________________________________________"+ Символы.ПС +
		//ОтветЛояльности.Информация + Символы.ПС + 
		"________________________________________________________________________"+ Символы.ПС +
		"Сумма Вашего заказа – "+Обработка.Заказ.ИтоговаяСумма+" рублей" + Символы.ПС + 
		//"________________________________________________________________________"+ Символы.ПС +
		//"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.Начислено1 + " КеГЛей"  + 
		Символы.ПС; 
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ ПОЗЖЕ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
		
		Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
			// Это спул
			Обработка.Заказ.ОбработанСистемойЛояльности = -1;
			ЗарегистрироватьСобытие("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Обработка.Заказ.Ссылка, "Выбрана оплата без лояльности");
		иначе
			//не обработали, но хотим еще раз попробовать
			Обработка.Заказ.ОбработанСистемойЛояльности = 0;
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ОтветЛояльности.err>0 тогда
		
		Ответ = ОбработкаОшибокСервисаЛояльности_КП(Обработка.Заказ, ОтветЛояльности.err, ОтветЛояльности.err_msg);
		
		Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
			// Это спул
			Обработка.Заказ.ОбработанСистемойЛояльности = -1;
			ЗарегистрироватьСобытие("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Обработка.Заказ.Ссылка, "Выбрана оплата без лояльности");
		иначе
			//не обработали, но хотим еще раз попробовать
			Обработка.Заказ.ОбработанСистемойЛояльности = 0;
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли ОтветЛояльности.order.card_number="" тогда	
		
		Ответ = "НАЧИСЛИТЬ";
		
	ИначеЕсли ОтветЛояльности.order.card_status=1 тогда
		
		Текст1 = "списания запрещены";
		
		Текст2 = "Здравствуйте, "+ДанныеЛояльностиПоЗаказу.ФИО + Символы.ПС + 
		СтрДеньРождения +
		"ВОЗМОЖНО ТОЛЬКО НАЧИСЛЕНИЕ !!!" + Символы.ПС + 
		"________________________________________________________________________"+ Символы.ПС +
		ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
		"________________________________________________________________________"+ Символы.ПС +
		"Сумма Вашего заказа – "+ОтветЛояльности.order.n_sum+" рублей" + Символы.ПС + 
		"________________________________________________________________________"+ Символы.ПС +
		"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.order.n_kgl_add + " КеГЛей"  + Символы.ПС; 
		
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
	
	Иначе			

		Если ОтветЛояльности.order.s_kgl_rem=0 тогда // нет возможности списать
			МожноСписывать = ложь;
			Текст1 = "Начисляем КеГЛи";
		Иначе
			МожноСписывать = истина;
			Текст1 = "Начислить или списать КеГЛи?";
		КонецЕсли;			
		
		Текст2 = "Здравствуйте, "+ДанныеЛояльностиПоЗаказу.ФИО + Символы.ПС + 
		СтрДеньРождения +
		//"           "+
		ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
		"________________________________________________________________________"+ Символы.ПС +
		"В случае НАЧИСЛЕНИЯ:" + Символы.ПС + 
		"    Сумма Вашего заказа – "+ОтветЛояльности.order.n_sum+" рублей                   " + Символы.ПС + 
		"    Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.order.n_kgl_add + " КеГЛей"  + Символы.ПС + 
		"________________________________________________________________________"+ Символы.ПС +
		"В случае СПИСАНИЯ:" + Символы.ПС;
		Если МожноСписывать тогда 
			Текст2 = Текст2 +
			"    Сумма КеГЛей, которая будет списана – " + ОтветЛояльности.order.s_kgl_rem + " КеГЛей"  + Символы.ПС +
			"    Доплата за часть заказа, на которую не хватило КеГЛей – " + ОтветЛояльности.order.s_sum + " руб.," + Символы.ПС +
			"    Сумма КеГЛей, которая будет доначислена – " + ОтветЛояльности.order.s_kgl_add + " КеГЛей" + Символы.ПС;
		иначе
			Текст2 = Текст2 + 
			"    Недостаточно КеГЛей на карте для списания."
		КонецЕсли;
		ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ",?(можноСписывать,"СПИСАТЬ",""),"ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
	КонецЕсли;
	
	Если ответ = "ВОЗВРАТ" тогда
		возврат;
	КонецЕсли;
	
	Если ответ= "СПИСАТЬ" ИЛИ ответ= "НАЧИСЛИТЬ" Тогда
		Если ответ= "СПИСАТЬ" Тогда
			Обработка.Заказ.ТипЧекаЛояльность = 2;
			Обработка.Заказ.ПодвалЧека = ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.print_s);
			СтрокиЗаказа = ОтветЛояльности.order.order_str_s;
		иначе
			Обработка.Заказ.ТипЧекаЛояльность = 1;
			Обработка.Заказ.ПодвалЧека = ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.print_n);
			СтрокиЗаказа = ОтветЛояльности.order.order_str_n;
		КонецЕсли;
		
		Для каждого ТекущаяСтрока Из СтрокиЗаказа Цикл
			Если ТекущаяСтрока.str_type <> "T" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗаказа = Обработка.Заказ.Товары.Найти(ТекущаяСтрока.str_no, "ИДСтроки");
			Если СтрокаЗаказа <> Неопределено Тогда
				
				СтрокаЗаказа.ЦенаРеализации = ТекущаяСтрока.price_fact;
				СтрокаЗаказа.СуммаРеализации= ТекущаяСтрока.strsum_fact;
				
			Иначе
				
				ЗарегистрироватьСобытие("Лояльность.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Обработка.Заказ.Ссылка, "Некорректный ответ лояльности");
				
				Текст1 = "КеГеЛьБУМ";
				Текст2 = "Ошибка сервера лояльности. КеГЛи будут начислены"+Символы.ПС+"автоматически позднее с учетом действующих акций";
									
				Текст2 = Текст2 + Символы.ПС + 
				СтрДеньРождения +
				"________________________________________________________________________"+ Символы.ПС +
				ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
				"________________________________________________________________________"+ Символы.ПС +
				"Сумма Вашего заказа – "+Обработка.Заказ.ИтоговаяСумма+" рублей" + Символы.ПС + 
				//"________________________________________________________________________"+ Символы.ПС +
				//"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.Начислено1 + " КеГЛей"  + 
				Символы.ПС; 
				Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ ПОЗЖЕ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
				
				//Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос","Повторить запрос ?",
				//"не удалось обработать ответ от системы лояльности."+Символы.ПС+
				//"ДА - повторить запрос"+Символы.ПС+
				//"НЕТ - закрыть чек без лояльности"+Символы.ПС+
				//"Для начисления КеГЛей по текущему чеку"+Символы.ПС+
				//"обратитесь в службу поддержки КеГеЛьБУМ","ДА","НЕТ","",ГоризонтальноеПоложение.Лево);
				Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
					// Это спул
					Обработка.Заказ.ОбработанСистемойЛояльности = -1;
					ЗарегистрироватьСобытие("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Обработка.Заказ.Ссылка, "Выбрана оплата без лояльности");
				иначе
					//не обработали, но хотим еще раз попробовать
					Обработка.Заказ.ОбработанСистемойЛояльности = 0;
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ТекущаяСтрока Из СтрокиЗаказа Цикл
			Если ТекущаяСтрока.str_type <> "S" Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗаказа = Обработка.Заказ.Товары.Найти(ТекущаяСтрока.str_t_no, "ИДСтроки");
			СтрокаСпецифики = Обработка.Заказ.Специфики.Найти(ТекущаяСтрока.str_no, "ИДСтроки");
			Если СтрокаЗаказа <> Неопределено И СтрокаСпецифики <> Неопределено Тогда					
				
				СтрокаЗаказа.СуммаРеализации = СтрокаЗаказа.СуммаРеализации + ТекущаяСтрока.strsum_fact;
				
				СтрокаСпецифики.ЦенаРеализации = ТекущаяСтрока.price_fact;
				
			Иначе
				
				ЗарегистрироватьСобытие("Лояльность.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Обработка.Заказ.Ссылка, "Некорректный ответ лояльности");
				
				Текст1 = "КеГеЛьБУМ";
				Текст2 = "Ошибка сервера лояльности. КеГЛи будут начислены"+Символы.ПС+"автоматически позднее с учетом действующих акций";
									
				Текст2 = Текст2 + Символы.ПС + 
				СтрДеньРождения +
				"________________________________________________________________________"+ Символы.ПС +
				ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
				"________________________________________________________________________"+ Символы.ПС +
				"Сумма Вашего заказа – "+Обработка.Заказ.ИтоговаяСумма+" рублей" + Символы.ПС + 
				//"________________________________________________________________________"+ Символы.ПС +
				//"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.Начислено1 + " КеГЛей"  + 
				Символы.ПС; 
				Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ ПОЗЖЕ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
				
				//Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос","Повторить запрос ?",
				//"не удалось обработать ответ от системы лояльности."+Символы.ПС+
				//"ДА - повторить запрос"+Символы.ПС+
				//"НЕТ - закрыть чек без лояльности"+Символы.ПС+
				//"Для начисления КеГЛей по текущему чеку"+Символы.ПС+
				//"обратитесь в службу поддержки КеГеЛьБУМ","ДА","НЕТ","",ГоризонтальноеПоложение.Лево);
				Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
					// Это спул
					Обработка.Заказ.ОбработанСистемойЛояльности = -1;
					ЗарегистрироватьСобытие("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Обработка.Заказ.Ссылка, "Выбрана оплата без лояльности");
				иначе
					//не обработали, но хотим еще раз попробовать
					Обработка.Заказ.ОбработанСистемойЛояльности = 0;
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ответ= "СПИСАТЬ" Тогда
			Обработка.Заказ.ИтоговаяСумма = ОтветЛояльности.order.s_sum;
		иначе
			Обработка.Заказ.ИтоговаяСумма = ОтветЛояльности.order.n_sum;
		КонецЕсли;
		
	КонецЕсли;
	Обработка.Заказ.ОбработанСистемойЛояльности = 1;

КонецПроцедуры

Функция ОбработкаОшибокСервисаЛояльности_КП(ЗаказОбъект, КодОшибки, ТекстОшибки = "")
	
	Если	КодОшибки = 1 Тогда
		//Проект и ТТ для ККМ не определены - актуально ли?
		//Акция Вода в подарок - отдельным чеком
		//Данный сертификат не существует
		//Каждый сертификат отдельным чеком
		
		Текст1 = "КеГеЛьБУМ";
		Текст2 = ТекстОшибки;
		Кнопка1 = "";
		Кнопка2 = "ВОЗВРАТ";
		Кнопка3 = "";
		
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ", Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
	ИначеЕсли	КодОшибки = 2 Тогда
		//Карта не принадлежит системе КеГеЛьБУМ
		Текст1 = "КеГеЛьБУМ";
		Текст2 = "Неверный номер карты КеГеЛьБУМ";
		Кнопка1 = "";
		Кнопка2 = "ВОЗВРАТ";
		Кнопка3 = "";
		ЗаказОбъект.НомерКартыЛояльности = "";
		
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ", Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
	ИначеЕсли	КодОшибки = 102 Тогда
		//сертификат только с картой
		Текст1 = "КеГеЛьБУМ";
		Текст2 = "Неверный номер карты КеГеЛьБУМ";
		Кнопка1 = "";
		Кнопка2 = "ВОЗВРАТ";
		Кнопка3 = "";
		ЗаказОбъект.НомерКартыЛояльности = "";
		
		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","","Применение персонифицированного сертификата возможно только совместно с картой КеГеЛьБУМ","","ОК","");
		//Если ВвестиКарту(ЗаказОбъект,,Истина) Тогда
		//	Ответ = "Продолжить";
		//Иначе
			Ответ = "ВОЗВРАТ";
		//КонецЕсли;
	Иначе
		Текст1 = "КеГеЛьБУМ";
		Текст2 = ТекстОшибки;
		Кнопка1 = "";
		Кнопка2 = "ВОЗВРАТ";
		Кнопка3 = "";
		
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ", Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
	КонецЕсли;
	
	Ответ = ?(Ответ = Неопределено, "ВОЗВРАТ", Ответ);
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ИнтерфейсныеФункции

Функция ПеренестиКупонВЗаказ(ЗаказОбъект, КодКупона) Экспорт
	
	Если ПустаяСтрока(КодКупона) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ЗаказОбъект.Купоны.Найти(КодКупона, "Купон")=Неопределено Тогда
		НовыйКупон = ЗаказОбъект.Купоны.Добавить();
		НовыйКупон.Купон = КодКупона;
		НовыйКупон.СтатусКупона = 1;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСписокКупоновГостя(ЗаказОбъект, МестоРеализации=0) Экспорт
	
	МассивКупонов = Новый Массив;
	
	НовыйКупон = Новый Структура;
	НовыйКупон.Вставить("Код", "78000000007");
	НовыйКупон.Вставить("ИнфоГостя", "Тестовый купон");
	НовыйКупон.Вставить("ИнфоСтанции", "Тестовый купон");
	НовыйКупон.Вставить("Статус", 2);
	МассивКупонов.Добавить(НовыйКупон);
	НовыйКупон = Новый Структура;
	НовыйКупон.Вставить("Код", "78000000007");
	НовыйКупон.Вставить("ИнфоГостя", "Тестовый купон");
	НовыйКупон.Вставить("ИнфоСтанции", "Тестовый купон");
	НовыйКупон.Вставить("Статус", 1);
	МассивКупонов.Добавить(НовыйКупон);
	НовыйКупон = Новый Структура;
	НовыйКупон.Вставить("Код", "78000000007");
	НовыйКупон.Вставить("ИнфоГостя", "Тестовый купон");
	НовыйКупон.Вставить("ИнфоСтанции", "Тестовый купон");
	НовыйКупон.Вставить("Статус", 1);
	МассивКупонов.Добавить(НовыйКупон);
	НовыйКупон = Новый Структура;
	НовыйКупон.Вставить("Код", "78000000007");
	НовыйКупон.Вставить("ИнфоГостя", "Тестовый купон");
	НовыйКупон.Вставить("ИнфоСтанции", "Тестовый купон");
	НовыйКупон.Вставить("Статус", 0);
	МассивКупонов.Добавить(НовыйКупон);
	
	Возврат МассивКупонов;
	
	//Возврат Лояльность.ПолучитьСписокКупоновГостя(ЗаказСсылка, МестоРеализации, Истина);
	
КонецФункции

Функция ПолучитьДанныеЛояльностиПоЗаказу(ЗаказОбъект, ВерсияДанных=Неопределено) Экспорт
	
	//Возврат ПолучитьДанныеЛояльностиПоЗаказу_Асинхронно(ЗаказОбъект, ВерсияДанных);
	
	//### Затычка от передачи в процедуру ссылки, а не объекта
	Если ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.Заказ") Тогда
		ЗаказСсылка = ЗаказОбъект.Ссылка;
	Иначе
		ЗаказСсылка = ЗаказОбъект;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказСсылка) Тогда
		Возврат ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("CALC");
		Возврат Неопределено;
	КонецЕсли;
	
	ПревьюЗаказа = Лояльность.ПолучитьПревьюЗаказа(ЗаказСсылка, ВерсияДанных);
	
	//### Затычка от передачи в процедуру ссылки, а не объекта
	Если ТипЗнч(ЗаказОбъект) <> Тип("ДокументОбъект.Заказ") Тогда
		Возврат ПревьюЗаказа;
	КонецЕсли;
	
	//ЗаписыватьЗаказ = Ложь;
	//Для каждого ТекущаяСтрока Из ПревьюЗаказа.Купоны Цикл
	//	Если ТекущаяСтрока.Добавлен И ТекущаяСтрока.Статус>0 Тогда
	//		ПеренестиКупонВЗаказ(ЗаказОбъект, ТекущаяСтрока.Код);
	//		ЗаписыватьЗаказ = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	//Если ЗаписыватьЗаказ Тогда
	//	ЗаказОбъект.Записать();
	//КонецЕсли;
	
	// Заполним статусы строк заказа + обновим цены в заказе
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Товары Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ЛояльностьКлиентСервер.НайтиСтрокуВМассивеСтруктур(ПревьюЗаказа.СоставЗаказа, "ИДСтроки", ТекущаяСтрока.ИдСтроки);
		Если НайденнаяСтрока=Неопределено Тогда
			ТекущаяСтрока.ЛояльностьСтатус = 0;
			ТекущаяСтрока.ЛояльностьСтатусАкции = 0;
			ТекущаяСтрока.ЛояльностьДопСтатусАкции = "";
			ТекущаяСтрока.ЛояльностьГруппаАкции = 0;
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.ЛояльностьСтатус = НайденнаяСтрока.СтатусЛояльности;
		ТекущаяСтрока.ЛояльностьСтатусАкции = НайденнаяСтрока.СтатусАкции;
		ТекущаяСтрока.ЛояльностьДопСтатусАкции = НайденнаяСтрока.ДопСтатусАкции;
		ТекущаяСтрока.ЛояльностьГруппаАкции = НайденнаяСтрока.ГруппаАкции;
		
		ТекущаяСтрока.ЦенаРеализации = НайденнаяСтрока.ЦенаФакт;
		ТекущаяСтрока.СуммаРеализации = НайденнаяСтрока.СуммаФакт;
		
		//!!! Здесь нужна еще обработка специфик
	КонецЦикла;
	ЗаказОбъект.ИтоговаяСумма = ЗаказОбъект.Товары.Итог("СуммаРеализации");
	//ЗаказОбъект.ИтогоСумма = ЗаказОбъект.Товары.Итог("СуммаРеализации");
	
	Возврат ПревьюЗаказа;
	
КонецФункции

Функция ПолучитьДанныеЛояльностиПоЗаказу_Асинхронно(ЗаказОбъект, ВерсияДанных=Неопределено) Экспорт
	
	//### Затычка от передачи в процедуру ссылки, а не объекта
	Если ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.Заказ") Тогда
		ЗаказСсылка = ЗаказОбъект.Ссылка;
	Иначе
		ЗаказСсылка = ЗаказОбъект;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказСсылка) Тогда		
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(ВерсияДанных) Тогда
		ВерсияДанных = Неопределено;
	КонецЕсли;
	
	// Вызываем функцию для получения предварительного расчета
	ПревьюЗаказа = Лояльность.ПолучитьПревьюЗаказа_Асинхронно(ЗаказСсылка, ВерсияДанных, Строка(ЗаказСсылка.УникальныйИдентификатор()));
	
	Если ПревьюЗаказа=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	//### Затычка от передачи в процедуру ссылки, а не объекта
	Если ТипЗнч(ЗаказОбъект) <> Тип("ДокументОбъект.Заказ") Тогда
		Возврат ПревьюЗаказа;
	КонецЕсли;
	
	// Заполним статусы строк заказа + обновим цены в заказе
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Товары Цикл
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрока = ЛояльностьКлиентСервер.НайтиСтрокуВМассивеСтруктур(ПревьюЗаказа.СоставЗаказа, "ИДСтроки", ТекущаяСтрока.ИдСтроки);
		Если НайденнаяСтрока=Неопределено Тогда
			ТекущаяСтрока.ЛояльностьСтатус = 0;
			ТекущаяСтрока.ЛояльностьСтатусАкции = 0;
			ТекущаяСтрока.ЛояльностьДопСтатусАкции = "";
			ТекущаяСтрока.ЛояльностьГруппаАкции = 0;
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока.ЛояльностьСтатус = НайденнаяСтрока.СтатусЛояльности;
		ТекущаяСтрока.ЛояльностьСтатусАкции = НайденнаяСтрока.СтатусАкции;
		ТекущаяСтрока.ЛояльностьДопСтатусАкции = НайденнаяСтрока.ДопСтатусАкции;
		ТекущаяСтрока.ЛояльностьГруппаАкции = НайденнаяСтрока.ГруппаАкции;
		
		ТекущаяСтрока.ЦенаРеализации = НайденнаяСтрока.ЦенаФакт;
		ТекущаяСтрока.СуммаРеализации = НайденнаяСтрока.СуммаФакт;
		
		//!!! Здесь нужна еще обработка специфик
	КонецЦикла;
	ЗаказОбъект.ИтоговаяСумма = ЗаказОбъект.Товары.Итог("СуммаРеализации");
	//ЗаказОбъект.ИтогоСумма = ЗаказОбъект.Товары.Итог("СуммаРеализации");
	
	Возврат ПревьюЗаказа;
	
КонецФункции

//???+++ УДАЛИТЬ
// Идентификатор - УникальныйИдентификатор формы (чтобы при закрытии данные из хранилиза удалились)
Функция ОбновитьПревьюЗаказа(ЗаказОбъект, ВерсияДанных, Идентификатор) Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаказОбъект.Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор();
		Идентификатор = Строка(ИдентификаторЗадания);
	Иначе
		ИдентификаторЗадания = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Если ПустаяСтрока(ВерсияДанных) Тогда
		// Версию не передали, значит нужно заново выполнить получение данных
		ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания).Отменить();
		УдалитьИзВременногоХранилища(Идентификатор);
		Возврат Неопределено;
	Иначе
		// Данные уже получали и есть версия данных
		Попытка
			Данные = ПолучитьИзВременногоХранилища(Идентификатор);
			Если Данные = Неопределено Тогда
				// В хранилище ничего нет - запускаем задание на получение данных
				ПолучитьДанныеЛояльностиПоЗаказу_ЗапуститьЗадание(ЗаказОбъект, ВерсияДанных, ИдентификаторЗадания);
				Возврат Неопределено;
			КонецЕсли;
			Данные = ЛояльностьКлиентСервер.РазборJSON(Данные);
			Если Данные.ВерсияДанных<>ВерсияДанных Тогда
				УдалитьИзВременногоХранилища(Идентификатор);
				Данные = Неопределено;
				// Версия данных в хранилище не совпадает с текущей версией - запускаем задание
				ПолучитьДанныеЛояльностиПоЗаказу_ЗапуститьЗадание(ЗаказОбъект, ВерсияДанных, ИдентификаторЗадания);
				Возврат Неопределено;
			КонецЕсли;
			УдалитьИзВременногоХранилища(Идентификатор);
			Возврат Данные;
		Исключение
			ПолучитьДанныеЛояльностиПоЗаказу_ЗапуститьЗадание(ЗаказОбъект, ВерсияДанных, ИдентификаторЗадания);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьДанныеЛояльностиПоЗаказу_ЗапуститьЗадание(ЗаказОбъект, ВерсияДанных, ИдентификаторЗадания)
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ЗаказОбъект.Ссылка);
	ПараметрыЗадания.Добавить(ВерсияДанных);
	ФоновыеЗадания.Выполнить("Лояльность.ПолучитьДанныеЛояльностиПоЗаказу", ПараметрыЗадания, ИдентификаторЗадания, "Получение данных лояльности Заказ №"+ЗаказОбъект.Номер);
КонецПроцедуры

Функция ПолучитьДанныеЛояльностиПоЗаказу_Запустить1(ЗаказОбъект, ВерсияДанных="", Идентификатор="") Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаказОбъект.Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор();
	Иначе
		ИдентификаторЗадания = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания).Отменить();
	
	//ПараметрыЗадания = Новый Массив;
	//ПараметрыЗадания.Добавить(Заказ);
	//ПараметрыЗадания.Добавить(ВерсияДанных);
	//ФоновыеЗадания.Выполнить("Лояльность.ПолучитьДанныеЛояльностиПоЗаказу", ПараметрыЗадания, ИдентификаторЗадания, "Получение данных лояльности Заказ №"+ЗаказОбъект.Номер);
	//
	//Возврат ИдентификаторЗадания;
	
	//Возврат Лояльность.ПолучитьПредварительныйРасчетЗаказа(ЗаказОбъект.Ссылка, ВерсияДанных);
	
КонецФункции

Функция ПолучитьДанныеЛояльностиПоЗаказу_Получить(ЗаказОбъект, ВерсияДанных="", Идентификатор="") Экспорт
	
	Если Не ЗначениеЗаполнено(ЗаказОбъект.Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустаяСтрока(Идентификатор) Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор();
	Иначе
		ИдентификаторЗадания = Новый УникальныйИдентификатор(Идентификатор);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	//ПараметрыЗадания = Новый Массив;
	//ПараметрыЗадания.Добавить(Заказ);
	//ПараметрыЗадания.Добавить(ВерсияДанных);
	//ФоновыеЗадания.Выполнить("Лояльность.ПолучитьДанныеЛояльностиПоЗаказу", ПараметрыЗадания, ИдентификаторЗадания, "Получение данных лояльности Заказ №"+ЗаказОбъект.Номер);
	//
	//Возврат ИдентификаторЗадания;
	
	//Возврат Лояльность.ПолучитьПредварительныйРасчетЗаказа(ЗаказОбъект.Ссылка, ВерсияДанных);
	
КонецФункции

Функция ПолучитьДанныеЛояльностиПоЗаказу_Заглушка(ЗаказОбъект) Экспорт
	
	Данные = Новый Структура;
	СтрокиЗаказа = Новый Массив;
	
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Товары Цикл
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("ИдСтроки", ТекущаяСтрока.ИДСтроки);
		НоваяСтрока.Вставить("СтатусЛояльности", ТекущаяСтрока.ЛояльностьСтатус);
		НоваяСтрока.Вставить("СтатусАкции", ТекущаяСтрока.ЛояльностьСтатусАкции);
		НоваяСтрока.Вставить("ДопСтатусЛояльности", ТекущаяСтрока.ЛояльностьДопСтатусАкции);
		НоваяСтрока.Вставить("ГруппаАкции", ТекущаяСтрока.ЛояльностьГруппаАкции);
		НоваяСтрока.Вставить("ЦенаФакт", ТекущаяСтрока.Цена);
		НоваяСтрока.Вставить("СуммаФакт", ТекущаяСтрока.Сумма);
		НоваяСтрока.Вставить("КГЛНачислено", 0);
		НоваяСтрока.Вставить("КГЛСписано", 0);
		СтрокиЗаказа.Добавить(НоваяСтрока);
	КонецЦикла;
	Данные.Вставить("СоставЗаказа", СтрокиЗаказа);
	ИтогиМ = Новый Структура("КГЛНачислено, КГЛСписано, КГЛИнфо", 0, 0, Новый Массив);
	ИтогиО = Новый Структура("КГЛНачислено, КГЛСписано, КГЛИнфо", 0, 0, Новый Массив);
	ИтогиКП = Новый Структура("КГЛНачислено, КГЛСписано, КГЛИнфо", 0, 0, Новый Массив);
	Данные.Вставить("ИтогиМ", ИтогиМ);
	Данные.Вставить("ИтогиО", ИтогиО);
	Данные.Вставить("ИтогиКП", ИтогиКП);
	
	СтрокаМ = Новый Структура("Текст, КГЛ", "За товар МЪ", 100);
	ИтогиМ.КГЛИнфо.Добавить(СтрокаМ);
	СтрокаМ = Новый Структура("Текст, КГЛ", "За сумму покупки МЪ", 99);
	ИтогиМ.КГЛИнфо.Добавить(СтрокаМ);
	СтрокаМ = Новый Структура("Текст, КГЛ", "За сертификаты МЪ", 13);
	ИтогиМ.КГЛИнфо.Добавить(СтрокаМ);
	
	СтрокаО = Новый Структура("Текст, КГЛ", "За товар О", 77);
	ИтогиО.КГЛИнфо.Добавить(СтрокаО);
	СтрокаО = Новый Структура("Текст, КГЛ", "За сумму покупки О", 100);
	ИтогиО.КГЛИнфо.Добавить(СтрокаО);
	СтрокаО = Новый Структура("Текст, КГЛ", "За сертификаты О", 77);
	ИтогиО.КГЛИнфо.Добавить(СтрокаО);
	
	СтрокаКП = Новый Структура("Текст, КГЛ", "За товар КП", 100);
	ИтогиКП.КГЛИнфо.Добавить(СтрокаКП);
	СтрокаКП = Новый Структура("Текст, КГЛ", "За сумму покупки КП", 99);
	ИтогиКП.КГЛИнфо.Добавить(СтрокаКП);
	СтрокаКП = Новый Структура("Текст, КГЛ", "За сертификаты КП", 13);
	ИтогиКП.КГЛИнфо.Добавить(СтрокаКП);
	
	МассивКупонов = Новый Массив;	
	НовыйКупон = Новый Структура;
	НовыйКупон.Вставить("Код", "78000000007");
	НовыйКупон.Вставить("ИнфоГостя", "Тестовый купон");
	НовыйКупон.Вставить("ИнфоСтанции", "Тестовый купон");
	НовыйКупон.Вставить("Статус", 2);
	МассивКупонов.Добавить(НовыйКупон);
	НовыйКупон = Новый Структура;
	НовыйКупон.Вставить("Код", "78000000007");
	НовыйКупон.Вставить("ИнфоГостя", "Тестовый купон");
	НовыйКупон.Вставить("ИнфоСтанции", "Тестовый купон");
	НовыйКупон.Вставить("Статус", 1);
	МассивКупонов.Добавить(НовыйКупон);
	НовыйКупон = Новый Структура;
	НовыйКупон.Вставить("Код", "78000000007");
	НовыйКупон.Вставить("ИнфоГостя", "Тестовый купон");
	НовыйКупон.Вставить("ИнфоСтанции", "Тестовый купон");
	НовыйКупон.Вставить("Статус", 1);
	МассивКупонов.Добавить(НовыйКупон);
	НовыйКупон = Новый Структура;
	НовыйКупон.Вставить("Код", "78000000007");
	НовыйКупон.Вставить("ИнфоГостя", "Тестовый купон");
	НовыйКупон.Вставить("ИнфоСтанции", "Тестовый купон");
	НовыйКупон.Вставить("Статус", 0);
	МассивКупонов.Добавить(НовыйКупон);
	
	Данные.Вставить("Купоны", МассивКупонов);
	
	Возврат Данные;
	
КонецФункции
//???--- УДАЛИТЬ

// Переменная ЗаказОбъект может быть Структурой. Тогда в нее можно помещать результаты расчета
// Но я сделаю это позже...
Функция ВвестиКарту(ЗаказОбъект, ТекстЗаголовка = "Считайте карту КеГеЛьБУМ", ЗапретПустогоЗначения = Ложь, ЗапретОтмены = Ложь) Экспорт
	
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(глРабочееМесто);//ЗаказОбъект.РабочееМесто);
	ВерсияЛояльности = ЛояльностьКлиентСервер.ВерсияЛояльности(Тест);
 	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	Если ВерсияПротокола = 4 Тогда
		Возврат ВвестиКарту_Протокол4(ЗаказОбъект, ТекстЗаголовка, ЗапретПустогоЗначения, ЗапретОтмены);
	КонецЕсли;
	
	РезультатВвода = Истина;
	//:ЗаказОбъект=Документы.Заказ.СоздатьДокумент();
	//ЗаказОбъект.ТипЧекаЛояльность		= 0;
	//ЗаказОбъект.НомерКартыЛояльности	= "";
	ИсходныйНомерКарты = ЗаказОбъект.НомерКартыЛояльности;
	Если ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.Заказ") Тогда
		Если ЗаказОбъект.ОтказОтКартыЛояльности Тогда
			Возврат РезультатВвода;	
		КонецЕсли;
	КонецЕсли;		
	НомерКартыЛояльности = ИнтерфейсРМ.ВводЧисла(ТекстЗаголовка,"Строка",30,0,Неопределено);
	
	Если НЕ ПустаяСтрока(НомерКартыЛояльности) Тогда
		// проверка номера карты по маске		
		РезультатПроверки = ЛояльностьКлиентСервер.ПроверитьКартуЛояльностиПоНомеру(НомерКартыЛояльности, 1);
		Если РезультатПроверки.ЭтоКартаЛояльности Тогда
			ЗаказОбъект.НомерКартыЛояльности	= РезультатПроверки.НомерКарты;
		Иначе
			// Неверный номер карты
			ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ","Неверный номер карты КеГеЛьБУМ","","ОК","",,,10);
			РезультатВвода = ВвестиКарту(ЗаказОбъект, ТекстЗаголовка, ЗапретПустогоЗначения, ЗапретОтмены);
		КонецЕсли;
	ИначеЕсли	НомерКартыЛояльности = Неопределено Тогда		
		// отмена
		Если ЗапретОтмены Тогда
			РезультатВвода = ВвестиКарту(ЗаказОбъект, ТекстЗаголовка, ЗапретПустогоЗначения, ЗапретОтмены);
		Иначе
			ЗаказОбъект.НомерКартыЛояльности	= "";
			РезультатВвода = Ложь;
		КонецЕсли;
	Иначе
		// пустая строка
		Если ЗапретПустогоЗначения Тогда
			РезультатВвода = ВвестиКарту(ЗаказОбъект, ТекстЗаголовка, ЗапретПустогоЗначения, ЗапретОтмены);
		Иначе
			ЗаказОбъект.НомерКартыЛояльности	= "";
		КонецЕсли;
	КонецЕсли;
	
	//Если Не ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И ПустаяСтрока(ИсходныйНомерКарты) Тогда
	//	ОткрытьЗаказ(ЗаказОбъект);
	//КонецЕсли;
	
	Возврат РезультатВвода;
	
КонецФункции

// Переменная ЗаказОбъект может быть Структурой. Тогда в нее можно помещать результаты расчета
// Но я сделаю это позже...
Функция ВвестиКарту_Протокол4(ЗаказОбъект, ТекстЗаголовка = "Считайте карту КеГеЛьБУМ", ЗапретПустогоЗначения = Ложь, ЗапретОтмены = Ложь) Экспорт
	
	РезультатВвода = Истина;
	//:ЗаказОбъект=Документы.Заказ.СоздатьДокумент();
	//ЗаказОбъект.ТипЧекаЛояльность		= 0;
	//ЗаказОбъект.НомерКартыЛояльности	= "";
	ИсходныйНомерКарты = ЗаказОбъект.НомерКартыЛояльности;
	Если ТипЗнч(ЗаказОбъект) = Тип("ДокументОбъект.Заказ") Тогда
		Если ЗаказОбъект.ОтказОтКартыЛояльности Тогда
			Возврат РезультатВвода;	
		КонецЕсли;
	КонецЕсли;		
	НомерКартыЛояльности = ИнтерфейсРМ.ВводЧисла(ТекстЗаголовка,"Строка",30,0,Неопределено);
	
	Если НЕ ПустаяСтрока(НомерКартыЛояльности) Тогда
		Если НЕ ЛояльностьКлиентСервер.ПроверитьКорректностьНомераКарты(НомерКартыЛояльности) Тогда
			// Неверный номер карты по маске
			ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ","Неверный номер карты КеГеЛьБУМ","","ОК","",,,10);
			РезультатВвода = ВвестиКарту_Протокол4(ЗаказОбъект, ТекстЗаголовка, ЗапретПустогоЗначения, ЗапретОтмены);	
		Иначе
			РезультатПроверки = ЛояльностьКлиентСервер.ИзменитьКартуЛояльностиПоЗаказу(ЗаказОбъект, НомерКартыЛояльности);
			Если РезультатПроверки.Ошибка Тогда
			    ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ",РезультатПроверки.ТекстОшибки,"","ОК","",,,10);
				Если РезультатПроверки.ПовторныйВвод Тогда
					РезультатВвода = ВвестиКарту_Протокол4(ЗаказОбъект, ТекстЗаголовка, ЗапретПустогоЗначения, ЗапретОтмены);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//// проверка номера карты по маске
		//РезультатПроверки = ЛояльностьКлиентСервер.ПроверитьКартуЛояльностиПоНомеру(НомерКартыЛояльности, 1);
		//Если РезультатПроверки.ЭтоКартаЛояльности Тогда
		//	ЗаказОбъект.НомерКартыЛояльности	= РезультатПроверки.НомерКарты;
		//Иначе
		//	// Неверный номер карты
		//	ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ","Неверный номер карты КеГеЛьБУМ","","ОК","",,,10);
		//	РезультатВвода = ВвестиКарту(ЗаказОбъект, ТекстЗаголовка, ЗапретПустогоЗначения, ЗапретОтмены);
		//КонецЕсли;
	ИначеЕсли НомерКартыЛояльности = Неопределено Тогда		
		// отмена
		Если ЗапретОтмены Тогда
			РезультатВвода = ВвестиКарту(ЗаказОбъект, ТекстЗаголовка, ЗапретПустогоЗначения, ЗапретОтмены);
		Иначе
			ЗаказОбъект.НомерКартыЛояльности	= "";
			РезультатВвода = Ложь;
		КонецЕсли;
	Иначе
		// пустая строка
		Если ЗапретПустогоЗначения Тогда
			РезультатВвода = ВвестиКарту(ЗаказОбъект, ТекстЗаголовка, ЗапретПустогоЗначения, ЗапретОтмены);
		Иначе
			ЗаказОбъект.НомерКартыЛояльности	= "";
		КонецЕсли;
	КонецЕсли;
	
	//Если Не ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) И ПустаяСтрока(ИсходныйНомерКарты) Тогда
	//	ОткрытьЗаказ(ЗаказОбъект);
	//КонецЕсли;
	
	Возврат РезультатВвода;
	
КонецФункции

// Функция запроса ПИНа
// возвращаемое значение:
//	0	- некорректный пин
//	1	- корректный пин
//	-1	- отмена
Функция ВвестиПИН(ХэшЭталон)
	Пин = "";
	Пин = ИнтерфейсРМ.ВводЧисла("Введите код защиты", "Пароль", 4);
	
	Если Пин = Неопределено Тогда
		// отмена
		Возврат (-1);
	КонецЕсли;
	
	Хэш = Лояльность.MD5ХешСтрока(Пин);
	
	Возврат ?(Хэш=ХэшЭталон, 1, 0);
КонецФункции

Функция ЗапросДействия(ТекстЗаголовка, Текст, Кнопка1, Кнопка2, ДанныеЧека) Экспорт
	
	Если глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
		// Это 800x600
		ЗапросДействия = ИнтерфейсРМ.ПолучитьОбъектОбработки("ОбработкаЛояльности").ПолучитьФорму("ЗапросДействия_mini", , Новый УникальныйИдентификатор);
	Иначе
		// Это 1024х786
		ЗапросДействия = ИнтерфейсРМ.ПолучитьОбъектОбработки("ОбработкаЛояльности").ПолучитьФорму("ЗапросДействия", , Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ЭлементыФормы = ЗапросДействия.ЭлементыФормы;
	
	ЗапросДействия.ТекстЗаголовка	= ТекстЗаголовка;
	ЗапросДействия.Текст			= СтрЗаменить(Текст, "\n", Символы.ПС);
	
	ТекстИнформационноеПоле = "";
	Если ДанныеЧека.card_number = "" Тогда
		ТекстИнформационноеПоле =	"Установите на Ваш смартфон" + Символы.ПС
									+ "Мобильное приложение" + Символы.ПС
									+ "КуулКЛЕВЕР и предъявляйте" + Символы.ПС
									+ "карту КеГеЛьБУМ с экрана";
	КонецЕсли;								
	
	Если ДанныеЧека.status = 1 Тогда
		// локальный расчет
		ТекстИнформационноеПоле =	"Проверяйте начисление" + Символы.ПС 
									+ "КеГЛей в Вашем ЛИЧНОМ" + Символы.ПС
									+ "КАБИНЕТЕ на сайте или в" + Символы.ПС
									+ "Мобильном Приложении" + Символы.ПС
									+ "КуулКЛЕВЕР";
									
		ЭлементыФормы.НадписьНачислениеНачисление.Видимость		= Ложь;
		ЭлементыФормы.НачислениеНачисление.Видимость			= Ложь;
		ЭлементыФормы.НадписьНачислениеНачислениеЕд.Видимость	= Ложь;
	КонецЕсли;
	
	ЗапросДействия.ТекстИнформационноеПоле = ТекстИнформационноеПоле;	
	
	ЗапросДействия.НачислениеНачисление	= 0;
	ЗапросДействия.НачислениеОплата		= 0;
	ЗапросДействия.СписаниеНачисление	= 0;
	ЗапросДействия.СписаниеОплата		= 0;
	ЗапросДействия.СписаниеСписание		= 0;
	
	ДанныеЧека.Свойство("chek_n_kgl_add"	, ЗапросДействия.НачислениеНачисление);
	ДанныеЧека.Свойство("chek_n_sum"		, ЗапросДействия.НачислениеОплата);
	ДанныеЧека.Свойство("chek_s_kgl_add"	, ЗапросДействия.СписаниеНачисление);
	ДанныеЧека.Свойство("chek_s_sum"		, ЗапросДействия.СписаниеОплата);
	ДанныеЧека.Свойство("chek_s_kgl_rem"	, ЗапросДействия.СписаниеСписание);
	
	ЭлементыФормы.ТекстИнформационноеПоле.Видимость = НЕ ПустаяСтрока(ЗапросДействия.ТекстИнформационноеПоле);
	
	Если ЗапросДействия.СписаниеСписание <= 0 Тогда
		ЭлементыФормы.НадписьСписаниеСписание.Видимость		= Ложь;
		ЭлементыФормы.СписаниеСписание.Видимость			= Ложь;
		ЭлементыФормы.НадписьСписаниеСписаниеЕд.Видимость	= Ложь;
		ЭлементыФормы.НадписьСписаниеОплата.Видимость		= Ложь;
		ЭлементыФормы.СписаниеОплата.Видимость				= Ложь;
		ЭлементыФормы.НадписьСписаниеОплатаЕд.Видимость		= Ложь;
		ЭлементыФормы.НадписьСписаниеНачисление.Видимость	= Ложь;
		ЭлементыФормы.СписаниеНачисление.Видимость			= Ложь;
		ЭлементыФормы.НадписьСписаниеНачислениеЕд.Видимость	= Ложь;
	КонецЕсли;
	
	
	Для НомКнопки=1 По 2 Цикл
		
		ТекстКнопки = Вычислить("Кнопка"+НомКнопки);
		
		Кнопка = ЭлементыФормы["Кнопка"+НомКнопки];
		
		Если ПустаяСтрока(ТекстКнопки) Тогда
			Кнопка.Видимость = Ложь;
		Иначе
			Кнопка.Заголовок = ТекстКнопки;
		КонецЕсли;
		
	КонецЦикла;
	
	Ответ = ЗапросДействия.ОткрытьМодально();
	
	Возврат Ответ;
КонецФункции

Функция ЗапросДействия_Протокол3(ТекстЗаголовка, Текст, Кнопка1, Кнопка2, ДанныеОтвета) Экспорт
	
	ДанныеЧека = ДанныеОтвета.order;
	
	Если глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
		// Это 800x600
		ЗапросДействия = ИнтерфейсРМ.ПолучитьОбъектОбработки("ОбработкаЛояльности").ПолучитьФорму("ЗапросДействия_mini", , Новый УникальныйИдентификатор);
	Иначе
		// Это 1024х786
		ЗапросДействия = ИнтерфейсРМ.ПолучитьОбъектОбработки("ОбработкаЛояльности").ПолучитьФорму("ЗапросДействия", , Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ЭлементыФормы = ЗапросДействия.ЭлементыФормы;
	
	ЗапросДействия.ТекстЗаголовка	= ТекстЗаголовка;
	ЗапросДействия.Текст			= СтрЗаменить(Текст, "\n", Символы.ПС);
	
	ТекстИнформационноеПоле = "";
	Если ДанныеЧека.card_number = "" Тогда
		ТекстИнформационноеПоле =	"Установите на Ваш смартфон" + Символы.ПС
									+ "Мобильное приложение" + Символы.ПС
									+ "КуулКЛЕВЕР и предъявляйте" + Символы.ПС
									+ "карту КеГеЛьБУМ с экрана";
	КонецЕсли;								
	
	Если ДанныеОтвета.status = 1 Тогда
		// локальный расчет
		ТекстИнформационноеПоле =	"Проверяйте начисление" + Символы.ПС 
									+ "КеГЛей в Вашем ЛИЧНОМ" + Символы.ПС
									+ "КАБИНЕТЕ на сайте или в" + Символы.ПС
									+ "Мобильном Приложении" + Символы.ПС
									+ "КуулКЛЕВЕР";
									
		ЭлементыФормы.НадписьНачислениеНачисление.Видимость		= Ложь;
		ЭлементыФормы.НачислениеНачисление.Видимость			= Ложь;
		ЭлементыФормы.НадписьНачислениеНачислениеЕд.Видимость	= Ложь;
	КонецЕсли;
	
	ЗапросДействия.ТекстИнформационноеПоле = ТекстИнформационноеПоле;	
	
	ЗапросДействия.НачислениеНачисление	= 0;
	ЗапросДействия.НачислениеОплата		= 0;
	ЗапросДействия.СписаниеНачисление	= 0;
	ЗапросДействия.СписаниеОплата		= 0;
	ЗапросДействия.СписаниеСписание		= 0;
	
	ДанныеЧека.Свойство("n_kgl_add"	, ЗапросДействия.НачислениеНачисление);
	ДанныеЧека.Свойство("n_sum"		, ЗапросДействия.НачислениеОплата);
	ДанныеЧека.Свойство("s_kgl_add"	, ЗапросДействия.СписаниеНачисление);
	ДанныеЧека.Свойство("s_sum"		, ЗапросДействия.СписаниеОплата);
	ДанныеЧека.Свойство("s_kgl_rem"	, ЗапросДействия.СписаниеСписание);
	
	ЭлементыФормы.ТекстИнформационноеПоле.Видимость = НЕ ПустаяСтрока(ЗапросДействия.ТекстИнформационноеПоле);
	
	Если ЗапросДействия.СписаниеСписание <= 0 Тогда
		ЭлементыФормы.НадписьСписаниеСписание.Видимость		= Ложь;
		ЭлементыФормы.СписаниеСписание.Видимость			= Ложь;
		ЭлементыФормы.НадписьСписаниеСписаниеЕд.Видимость	= Ложь;
		ЭлементыФормы.НадписьСписаниеОплата.Видимость		= Ложь;
		ЭлементыФормы.СписаниеОплата.Видимость				= Ложь;
		ЭлементыФормы.НадписьСписаниеОплатаЕд.Видимость		= Ложь;
		ЭлементыФормы.НадписьСписаниеНачисление.Видимость	= Ложь;
		ЭлементыФормы.СписаниеНачисление.Видимость			= Ложь;
		ЭлементыФормы.НадписьСписаниеНачислениеЕд.Видимость	= Ложь;
	КонецЕсли;
	
	
	Для НомКнопки=1 По 2 Цикл
		
		ТекстКнопки = Вычислить("Кнопка"+НомКнопки);
		
		Кнопка = ЭлементыФормы["Кнопка"+НомКнопки];
		
		Если ПустаяСтрока(ТекстКнопки) Тогда
			Кнопка.Видимость = Ложь;
		Иначе
			Кнопка.Заголовок = ТекстКнопки;
		КонецЕсли;
		
	КонецЦикла;
	
	Ответ = ЗапросДействия.ОткрытьМодально();
	
	Возврат Ответ;
КонецФункции

Функция ВыводОкнаЛОЛ(ТекстЗаголовка, Текст, Кнопка1, Кнопка2, ТекстИнформационноеПоле = "") Экспорт
	
	Если глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
		// Это 800x600
		ЗапросДействия = ИнтерфейсРМ.ПолучитьОбъектОбработки("ОбработкаЛояльности").ПолучитьФорму("ЗапросДействия_mini", , Новый УникальныйИдентификатор);
	Иначе
		// Это 1024х786
		ЗапросДействия = ИнтерфейсРМ.ПолучитьОбъектОбработки("ОбработкаЛояльности").ПолучитьФорму("ЗапросДействия", , Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ЭлементыФормы = ЗапросДействия.ЭлементыФормы;
	
	ЗапросДействия.ТекстЗаголовка			= ТекстЗаголовка;
	ЗапросДействия.Текст					= Текст;
	ЗапросДействия.ТекстИнформационноеПоле	= ТекстИнформационноеПоле;
	
	ЭлементыФормы.ТекстИнформационноеПоле.Видимость = НЕ ПустаяСтрока(ЗапросДействия.ТекстИнформационноеПоле);
	
	ЭлементыФормы.НадписьНачислениеНачисление.Видимость		= Ложь;
	ЭлементыФормы.НачислениеНачисление.Видимость			= Ложь;
	ЭлементыФормы.НадписьНачислениеНачислениеЕд.Видимость	= Ложь;
	ЭлементыФормы.НадписьНачислениеОплата.Видимость			= Ложь;
	ЭлементыФормы.НачислениеОплата.Видимость				= Ложь;
	ЭлементыФормы.НадписьНачислениеОплатаЕд.Видимость		= Ложь;
	
	ЭлементыФормы.НадписьСписаниеСписание.Видимость			= Ложь;
	ЭлементыФормы.СписаниеСписание.Видимость				= Ложь;
	ЭлементыФормы.НадписьСписаниеСписаниеЕд.Видимость		= Ложь;
	ЭлементыФормы.НадписьСписаниеОплата.Видимость			= Ложь;
	ЭлементыФормы.СписаниеОплата.Видимость					= Ложь;
	ЭлементыФормы.НадписьСписаниеОплатаЕд.Видимость			= Ложь;
	ЭлементыФормы.НадписьСписаниеНачисление.Видимость		= Ложь;
	ЭлементыФормы.СписаниеНачисление.Видимость				= Ложь;
	ЭлементыФормы.НадписьСписаниеНачислениеЕд.Видимость		= Ложь;
	
	
	Для НомКнопки=1 По 2 Цикл
		
		ТекстКнопки = Вычислить("Кнопка"+НомКнопки);
		
		Кнопка = ЭлементыФормы["Кнопка"+НомКнопки];
		
		Если ПустаяСтрока(ТекстКнопки) Тогда
			Кнопка.Видимость = Ложь;
		Иначе
			Кнопка.Заголовок = ТекстКнопки;
		КонецЕсли;
		
	КонецЦикла;
	
	Ответ = ЗапросДействия.ОткрытьМодально();
	
	Возврат Ответ;
КонецФункции

Функция ВыборВариантаОтвета(ТекстЗаголовка, ВариантыОтвета) Экспорт
	Если глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
		// Это 800x600
		ВыборВариантаОтвета = ИнтерфейсРМ.ПолучитьОбъектОбработки("ОбработкаЛояльности").ПолучитьФорму("ВыборВариантаОтвета_mini", , Новый УникальныйИдентификатор);
	Иначе
		// Это 1024х786
		ВыборВариантаОтвета = ИнтерфейсРМ.ПолучитьОбъектОбработки("ОбработкаЛояльности").ПолучитьФорму("ВыборВариантаОтвета", , Новый УникальныйИдентификатор);
	КонецЕсли;
	
	//ВыборВариантаОтвета.Заголовок = ЗаголовокФормы;
	
	ЭлементыФормы = ВыборВариантаОтвета.ЭлементыФормы;
	ЭлементыФормы.Текст.Заголовок	= ТекстЗаголовка;
	
	ВариантыОтветаСписокЗначений = Новый СписокЗначений;
	Для Каждого Вар Из ВариантыОтвета Цикл
		ВариантыОтветаСписокЗначений.Добавить(Вар.value, Вар.STR);
	КонецЦикла;
	
	ВыборВариантаОтвета.ВариантыОтвета = ВариантыОтветаСписокЗначений;
	
	Ответ = ВыборВариантаОтвета.ОткрытьМодально();
	
	Возврат Ответ;
	
КонецФункции

Функция ОбработкаОшибокЛОЛ(ЗаказОбъект, КодОшибки, ТекстОшибки = "")
	
	Если	КодОшибки = -1 Тогда
		// исключительная ошибка
		Текст1 = "КеГеЛьБУМ";
		Текст2 = "Ошибка сервера лояльности. КеГЛи будут начислены"+Символы.ПС+"автоматически позднее с учетом действующих акций";
		Кнопка1 = "Начислить позже";
		Кнопка2 = "";
		Кнопка3 = "Вернуться в чек";
		
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ", Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
	ИначеЕсли	КодОшибки = 1 Тогда
		//Проект и ТТ для ККМ не определены - актуально ли?
		//Акция Вода в подарок - отдельным чеком
		//Данный сертификат не существует
		//Каждый сертификат отдельным чеком
		
		Текст1 = "КеГеЛьБУМ";
		Текст2 = ТекстОшибки;
		Кнопка1 = "";
		Кнопка2 = "Вернуться в чек";
		Кнопка3 = "";
		
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ", Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
	ИначеЕсли	КодОшибки = 2 Тогда
		//Карта не принадлежит системе КеГеЛьБУМ
		Текст1 = "КеГеЛьБУМ";
		Текст2 = "Неверный номер карты КеГеЛьБУМ";
		Кнопка1 = "";
		Кнопка2 = "Вернуться в чек";
		Кнопка3 = "";
		ЗаказОбъект.НомерКартыЛояльности = "";
		
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ", Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
	ИначеЕсли	КодОшибки = 102 Тогда
		//сертификат только с картой
		Текст1 = "КеГеЛьБУМ";
		Текст2 = "Неверный номер карты КеГеЛьБУМ";
		Кнопка1 = "";
		Кнопка2 = "Вернуться в чек";
		Кнопка3 = "";
		ЗаказОбъект.НомерКартыЛояльности = "";
		
		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","","Применение персонифицированного сертификата возможно только совместно с картой КеГеЛьБУМ","","ОК","");
		Если ВвестиКарту(ЗаказОбъект,,Истина) Тогда
			Ответ = "Продолжить";
		Иначе
			Ответ = "Вернуться в чек";
		КонецЕсли;
	//ИначеЕсли	КодОшибки = 3 Тогда
	//	//Карта заблокирована
	//ИначеЕсли	КодОшибки = 4 Тогда
	//	//Списание по данной карте запрещено
	//ИначеЕсли	КодОшибки = 5 Тогда
	//	//Мастер-карта не принадлежит системе КеГеЛьБУМ
	//ИначеЕсли	КодОшибки = 6 Тогда
	//	//Мастер-карта заблокирована
	//ИначеЕсли	КодОшибки = 7 Тогда
	//	//Списание по мастер-карте запрещено
	Иначе
		Текст1 = "КеГеЛьБУМ";
		Текст2 = ТекстОшибки;
		Кнопка1 = "";
		Кнопка2 = "Вернуться в чек";
		Кнопка3 = "";
	
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ", Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
	КонецЕсли;
	
	Ответ = ?(Ответ = Неопределено, "Вернуться в чек", Ответ);
	
	Возврат Ответ;
	
КонецФункции





#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрочиеФункции

Процедура ПодставитьАдресВПодвал(ЗаказОбъект)
	Адрес = "";
	Если ЗаказОбъект.Товары.Количество() > 0 Тогда
		Адрес = Лояльность.ПолучитьАдресФирмы(ЗаказОбъект.Товары[0].Фирма);
	КонецЕсли;
	
	ЗаказОбъект.ПодвалЧека = Адрес + ?(ПустаяСтрока(Адрес),"",Символы.ПС) + ЗаказОбъект.ПодвалЧека;

КонецПроцедуры

// Функция вызывается при тестировании перед вводом в эксплуатацию
Функция ЛояльностьРаботает() Экспорт 
	//Возврат Истина;
	
	ЛояльностьКлиентСервер.Логирование(1, "проверка", "начало");
	
	Регион = "52";
	Регион = Строка(ЛояльностьКлиентСервер.ПолучитьТекущийРегион());
	
	Проект = 1;
	Если глПараметрыРМ <> Неопределено Тогда
		Проект = Лояльность.ПолучитьКодПроекта(глПараметрыРМ.МестоРеализации);
	КонецЕсли;
	
	ККМ = "";
	ККМ = ЛояльностьКлиентСервер.ПолучитьКодККМИзПараметровРМ();
	
	ТестовыйРежим = Ложь;
	Если глПараметрыРМ <> Неопределено Тогда
		ТестовыйРежим = глПараметрыРМ.Тест;
	КонецЕсли;
	
	СтруктураОтвета = ЛояльностьКлиентСервер.ПроверитьРаботуЛояльности(Регион, Проект, ККМ, ТестовыйРежим);
	
	Возврат СтруктураОтвета.ЛояльностьРаботает;
	
КонецФункции

#КонецОбласти

















////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// !!! ВЕСЬ ЭТОТ ХЛАМ БУДЕТ УДАЛЕН !!!
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ИнформацияПоЗаказам

// Функция преобразует отправляет запрос сервису Лояльности для проверки карты и получения данных для КП
//
// Параметры:
// 	НомерКарты  - Строка - проверяемый номер
//
// Возвращаемое значение:
//  Структура	
//		- НомерКарты	- Строка - преобразованный номер карты. Пустая строка, если ошибка
//	 	- Ошибка		- Булево
//		- ТекстОшибки	- Строка - описание ошибки
Функция ПроверкаКарты_КП(НомерКарты, Тест=Ложь) Экспорт
	
	//Возврат ЛояльностьКлиентСервер.ПолучитьДанныеГостя(НомерКарты, Тест);
	//### Остальное удалить
		
	Данные = Новый Структура;
	Данные.Вставить("Ошибка", Ложь);
	Данные.Вставить("ТекстОшибки", "");
	Данные.Вставить("НомерКарты", НомерКарты);
	Если ПустаяСтрока(Данные.НомерКарты) Тогда
		Возврат Данные;
	КонецЕсли;
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("request", "INFO");
	ДанныеЗапроса.Вставить("protocol_version", 3);
	ДанныеЗапроса.Вставить("tt", 1);
	ДанныеЗапроса.Вставить("region", 77);
	ДанныеЗапроса.Вставить("station_type", 0);
	ДанныеЗапроса.Вставить("debug", 0);
	ДанныеЗапроса.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	ДанныеЗапроса.Вставить("guest", Новый Структура);
	ДанныеЗапроса.guest.Вставить("card_number", НомерКарты);
	
	ЗапросJSON = ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеЗапроса);
	
	ОтветJSON = ЛояльностьКлиентСервер.ОтправитьКартуГостяНаОбработку(ЗапросJSON, "GET",,Тест);
	Если ОтветJSON.Ошибка Тогда
		Возврат Данные;
	КонецЕсли;
	ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветJSON.Ответ);
	Если ДанныеОтвета.err<>0 Тогда
		Данные.Ошибка = Истина;
		Данные.ТекстОшибки = ДанныеОтвета.err_msg;
		Данные.НомерКарты = "";
		Возврат Данные;
	КонецЕсли;
	
	ДанныеГостя = ДанныеОтвета.guest;
	Данные.Вставить("ИсходныйНомерКарты", НомерКарты);
	Данные.НомерКарты = ДанныеГостя.card_number;
	Данные.Вставить("МастерКарта", ДанныеГостя.master_card);
	Данные.Вставить("Баланс", ДанныеГостя.balance);
	Данные.Вставить("Заблокирована", (ДанныеГостя.blocked=1));
	Данные.Вставить("СписаниеЗаблокировано", (ДанныеГостя.off_blocked=1));
	Данные.Вставить("ФИО", ДанныеГостя.FIO);
	Данные.Вставить("ДатаРождения", ЛояльностьКлиентСервер.ДатаВремяСтрокойВДатуВремя(ДанныеГостя.birthday));
	Данные.Вставить("НомерТелефона", ДанныеГостя.phone_number);
	Данные.Вставить("ЭлектроннаяПочта", ДанныеГостя.email);
	
	Возврат Данные;
	
КонецФункции

Функция ПолучитьДанныеГостя(НомерКарты) Экспорт
	
	Данные = Новый Структура;
	Данные.Вставить("НомерКарты", НомерКарты);
	Данные.Вставить("Ошибка", Ложь);
	Данные.Вставить("ТекстОшибки", "");
	
	Если ПустаяСтрока(Данные.НомерКарты) Тогда
		Возврат Данные;
	КонецЕсли;
	
	ДанныеЗапроса = Новый Структура;
	ДанныеЗапроса.Вставить("request", "INFO");
	ДанныеЗапроса.Вставить("protocol_version", 3);
	ДанныеЗапроса.Вставить("station_type", 0);
	ДанныеЗапроса.Вставить("debug", 0);
	ДанныеЗапроса.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	ДанныеЗапроса.Вставить("guest", Новый Структура);
	ДанныеЗапроса.guest.Вставить("card_number", НомерКарты);
	
	ЗапросJSON = ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеЗапроса);
	
	ОтветJSON = ЛояльностьКлиентСервер.ОтправитьКартуГостяНаОбработку(ЗапросJSON, "GET");
	ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветJSON);
	Если ДанныеОтвета.err<>0 Тогда
		Данные.Ошибка = Истина;
		Данные.ТекстОшибки = ДанныеОтвета.err_msg;
		Возврат Данные;
	КонецЕсли;
	
	ДанныеГостя = Данные.ДанныеОтвета.guest;
	Данные.Вставить("Баланс", ДанныеГостя.balance);
	Данные.Вставить("МастерКарта", ДанныеГостя.master_card);
	Данные.Вставить("Заблокирована", (ДанныеГостя.blocked=1));
	Данные.Вставить("СписаниеЗаблокировано", (ДанныеГостя.off_blocked=1));
	Данные.Вставить("ФИО", ДанныеГостя.FIO);
	Данные.Вставить("ДатаРождения", ЛояльностьКлиентСервер.ДатаВремяСтрокойВДатуВремя(ДанныеГостя.birthday));
	Данные.Вставить("НомерТелефона", ДанныеГостя.phone_number);
	Данные.Вставить("ЭлектроннаяПочта", ДанныеГостя.email);
	
	Возврат Данные;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
