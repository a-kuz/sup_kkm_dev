Процедура ЗагрузкаСправочникаСотрудников() Экспорт
	
	ВнешняяОбработкаЭлемент = Справочники.ВнешниеОбработки.НайтиПоНаименованию("ЗагрузкаСправочникаСотрудников");
	
	Если ВнешняяОбработкаЭлемент <> Неопределено Тогда
		
		ВнешняяОбработка = ПолучитьОбработкуИзСправочникаВнешнихОбработокНаСервере(ВнешняяОбработкаЭлемент,,Ложь);
		
		ПараметрыВыполненияКоманды = Новый Структура;
		//ПараметрыВыполненияКоманды.Вставить("ФирмаНаименование", "можно вставить текущую фирму, в простивном случае выподнится для всего справочника фирмы");
		
		ВнешняяОбработка.ВыполнитьКоманду("ОбновитьСправочникСотрудников", ПараметрыВыполненияКоманды);
		
	Иначе
		
		ЗарегистрироватьСобытие("Обновление справочника Сотрудники",УровеньЖурналаРегистрации.Ошибка,,,"Не найдена внешняя элемент справочника ВнешниеОбработки ('ЗагрузкаСправочникаСотрудников')");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОбработкуИзСправочникаВнешнихОбработокНаСервере(ЭлементСправочника, ВыборВнешнихОтчетов = Ложь, БезопасныйРежим = Истина)
	
	//Извлечение обработки и сохранение ее как внешней.
	ДвоичноеПредставлениеОбработки = ЭлементСправочника.ХранилищеОбработки.Получить();
	
	Если ВыборВнешнихОтчетов Тогда
		ПолноеИмяФайла	= КаталогВременныхФайлов() + "СправочникВнешниеОбработки_ВнешнийОтчет.erf";
	Иначе
		ПолноеИмяФайла	= КаталогВременныхФайлов() + "СправочникВнешниеОбработки_ВнешняяОбработка.epf";
	КонецЕсли;
	
	ДвоичноеПредставлениеОбработки.Записать(ПолноеИмяФайла);
	
	Если ВыборВнешнихОтчетов Тогда
		Возврат ВнешниеОтчеты.Создать(ПолноеИмяФайла, БезопасныйРежим);
	Иначе
		Возврат ВнешниеОбработки.Создать(ПолноеИмяФайла, БезопасныйРежим);
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьВьюхи() Экспорт
	СтруктураХранения = ПолучитьСтруктуруХраненияБазыДанных();
	
	ХД = Новый ХешированиеДанных(ХешФункция.SHA1);
	ХД.Добавить(ЗначениеВСтрокуВнутр(СтруктураХранения));
	ХС = Лев(Строка(ХД.ХешСумма),100);
	
	ТекХеш = Константы.ХешСтруктурыБД.Получить();
	СтруктураБДизменилась = ТекХеш <> ХС;
	
	Если СтруктураБДизменилась Тогда
		
		ТекИБ 		= ПараметрыСеанса.ТекущаяИБ;
		Если СтрНайти(ТекИБ.СерверХост, "ost") Тогда
			Сервер 		= ТекИБ.СерверХост;
		Иначе
			Сервер 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ТекИБ, "Лояльность_СерверSQL");
		КонецЕсли;                         		
		Пользователь= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ТекИБ, "Лояльность_ИмяПользователяSQL");
		Пароль 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ТекИБ, "Лояльность_ПарольSQL");
		
		Обработка = Обработки.СозданиеПредставленийТаблицВсубд.Создать();
		Обработка.Сервер = Сервер;
		Обработка.Пользователь = Пользователь;
		Обработка.Пароль = Пароль;
		Обработка.БД = "sup_kkm";
		Обработка.ОбновитьСписокОбъектов();
		Если Обработка.СоздатьПредставления() Тогда
			Константы.ХешСтруктурыБД.Установить(ХС);
		КонецЕсли;
		
	КонецЕсли;
	
	//ЗаполнитьККМрабочегоМеста(); // потом удалить
КонецПроцедуры

Процедура ЗаполнитьККМрабочегоМеста() 
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка, РабочееМесто
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.ККМрабочегоМеста = ЗНАЧЕНИЕ(Справочник.ТорговоеОборудование.ПустаяСсылка)
	|	И НЕ Заказ.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)
	|	И Дата < &Вчера
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка, РабочееМесто
	|ИЗ
	|	Документ.Возврат
	|ГДЕ
	|	ККМрабочегоМеста = ЗНАЧЕНИЕ(Справочник.ТорговоеОборудование.ПустаяСсылка)
	|	И НЕ РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)
	|	И Дата < &Вчера");
	Запрос.УстановитьПараметр("Вчера", ТекущаяДата() - 86400);
	Выб = Запрос.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		
		ПараметрыРМ = ОбщегоНазначенияПовтИсп.ПараметрыРМ(Выб.РабочееМесто);
		Если ПараметрыРМ.Свойство("ККМ") Тогда
			об = Выб.Ссылка.ПолучитьОбъект();
			об.ККМрабочегоМеста = ПараметрыРМ.ККМ;
			об.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьСпулЛояльности() Экспорт
	
	Лояльность.ОбработатьСпулЛояльности();
	
КонецПроцедуры

Процедура ОтправитьККМ_Инфо() Экспорт
	Дата = ТекущаяДата();

	СоединенияИнформационнойБазы = ПолучитьСоединенияИнформационнойБазы();

	СписокАктивныхРМ = Новый СписокЗначений;
	Для Каждого Соединение Из СоединенияИнформационнойБазы Цикл           		
		Если Соединение.ИмяПриложения = "1CV8" Тогда
			
			ПрофильВхода = "\\" + Соединение.ИмяКомпьютера + "\" + Соединение.Пользователь.Имя;
		    РабочееМесто = Справочники.РабочиеМеста.НайтиПоРеквизиту("ПрофильВхода", ПрофильВхода);
			СписокАктивныхРМ.Добавить(РабочееМесто);
		
		КонецЕсли;
	КонецЦикла;


	Запрос = Новый Запрос;		
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ОткрытиеСмены.ККМ
	|	,ОткрытиеСмены.НомерСмены
	|	,МАКСИМУМ(ISNULL(ДокументЗаказ.НомерЧека,0))	КАК НомерЧека
	|ИЗ
	|	(ВЫБРАТЬ
	|		Касса_ОткрытиеСмены.КассаНомер					КАК ККМ
	|		,Касса_ОткрытиеСмены.РабочееМесто				КАК РМ
	|		,МАКСИМУМ(Касса_ОткрытиеСмены.НомерСмены)		КАК НомерСмены
	|	ИЗ
	|		Документ.Касса_ОткрытиеСмены	КАК Касса_ОткрытиеСмены
	|	ГДЕ
	|		НАЧАЛОПЕРИОДА(Касса_ОткрытиеСмены.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|		И Касса_ОткрытиеСмены.Проведен
	|		И НЕ Касса_ОткрытиеСмены.РабочееМесто.Тест
	|	СГРУППИРОВАТЬ ПО
	|		Касса_ОткрытиеСмены.КассаНомер
	|		,Касса_ОткрытиеСмены.РабочееМесто
	|	) КАК ОткрытиеСмены
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ						КАК ДокументЗаказ
	|	ПО ДокументЗаказ.РабочееМесто = ОткрытиеСмены.РМ
	|	И НАЧАЛОПЕРИОДА(ДокументЗаказ.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|	И ДокументЗаказ.НомерСмены = ОткрытиеСмены.НомерСмены
	|ГДЕ
	|	ОткрытиеСмены.РМ В (&СписокАктивныхРМ)
	|СГРУППИРОВАТЬ ПО
	|	ОткрытиеСмены.ККМ
	|	,ОткрытиеСмены.НомерСмены
	|";
	Запрос.УстановитьПараметр("ТекущаяДата"	, Дата);

	Запрос.УстановитьПараметр("СписокАктивныхРМ", СписокАктивныхРМ);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СостояниеРабочихМест	= Новый Структура;
		ККМ_Инфо				= Новый Структура;

		ККМ_Инфо.Вставить("kkm"				, СокрЛП(Выборка.ККМ));
		ККМ_Инфо.Вставить("current_chek_num", Выборка.НомерЧека);
		ККМ_Инфо.Вставить("current_shift"	, Выборка.НомерСмены);
		ККМ_Инфо.Вставить("current_date"	, Формат(Дата, "ДФ=dd/MM/yyyy"));
		ККМ_Инфо.Вставить("current_time"	, Формат(Дата, "ДФ=HH:mm"));

		СостояниеРабочихМест.Вставить("kkm_info", ККМ_Инфо);
		
		ТекстЗапроса = ЛояльностьКлиентСервер.СформироватьJSON(СостояниеРабочихМест);
		ОтветСервера = Лояльность.ОтправитьЧекНаОбработку(ТекстЗапроса, 2, РабочееМесто.Тест);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьСпулExcise() Экспорт
	Возврат;
	ОбъектЗапроса = Новый Запрос;
	ОбъектЗапроса.Текст = "ВЫБРАТЬ
	|	ПР.Ссылка КАК Ссылка,
	|	ПР.Заказ КАК Заказ
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПР
	|ГДЕ
	|	НЕ ПР.ДобавленыЗаписиВexcise
	|	И ПР.ИдентификаторЗапросаЕГАИС <> """"
	|	И ПР.ИдентификаторЗапросаЕГАИС_Отмена = """"
	|	И ПР.Проведен
	|	И ПР.МестоРеализации = ЗНАЧЕНИЕ(справочник.Местареализации.Отдохни)
	|	И ПР.Дата МЕЖДУ &ДатаН И &ДатаК";

	ОбъектЗапроса.УстановитьПараметр("ДатаН", ТекущаяДата()-86400*5);
	ОбъектЗапроса.УстановитьПараметр("ДатаК", ТекущаяДата()-1800);

	РезультатЗапроса = ОбъектЗапроса.Выполнить();
	
	ТЗ = РезультатЗапроса.Выгрузить();
	Для каждого Т Из ТЗ Цикл
		ПротоколОбъект = Т.Ссылка.ПолучитьОбъект();
		//:ПротоколОбъект = Документы.ПротоколРасчетов.ПустаяСсылка().ПолучитьОбъект();
		Попытка
			ПротоколОбъект.Заблокировать();
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		Попытка
			Если Алкоголь.ЗаписатьВExcise(Т.Заказ, ТипЗнч(Т.Заказ) = тип("ДокументСсылка.Возврат")) Тогда
				ПротоколОбъект.ДобавленыЗаписиВexcise = Истина;	
				ПротоколОбъект.Записать();
			КонецЕсли;
			
		Исключение
			ЗарегистрироватьСобытие("Спул Excise.Ошибка",УровеньЖурналаРегистрации.Ошибка,,Т.Заказ,ОписаниеОшибки());
		КонецПопытки;
		Попытка
			ПротоколОбъект.Разблокировать();
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаОфЛайн() Экспорт	
	Возврат;
	СписокМасок = Новый СписокЗначений; // важен порядок
	СписокМасок.Вставить(0,"ОткрытиеСмены_*.txt");
	СписокМасок.Вставить(1,"ЗакрытиеСмены_*.txt");
	СписокМасок.Вставить(2,"ОткрытиеКассовойСмены_*.txt");
	СписокМасок.Вставить(3,"ЗакрытиеКассовойСмены_*.txt");
	СписокМасок.Вставить(4,"Заказ_*.txt");
	СписокМасок.Вставить(5,"Возврат_*.txt");	
	СписокМасок.Вставить(6,"ПротоколРасчетов_*.txt");	
	СписокМасок.Вставить(7,"ЗаказДопИнфо_*.txt");	
	СписокМасок.Вставить(8,"ВозвратДопИнфо_*.txt");	
	СписокМасок.Вставить(9,"НомерЧекаНФР_*.txt");
	СписокМасок.Вставить(10,"СПУЛЛояльности_*.txt");
	СписокМасок.Вставить(11,"Внесение_*.txt");
	СписокМасок.Вставить(12,"Выплата_*.txt");
	
	ИмяКомпьютера = ИмяКомпьютера();
	Если Найти(ВРег(ИмяКомпьютера),"SERV") > 0 Тогда
		Поз = Найти(ИмяКомпьютера,"-");
		ИмяКомпьютера = Лев(ИмяКомпьютера,Поз);
		Спр = Справочники.РабочиеМеста.Выбрать();
		Пока Спр.Следующий() Цикл
			Если Спр.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;
			Если Спр.ПометкаУдаления или Спр.Тест Тогда
				Продолжить;
			КонецЕсли;
			Профиль = Спр.ПрофильВхода;
			Если Найти(Профиль,ИмяКомпьютера) > 0 Тогда
				Поз = СтрНайти(Профиль,"\",НаправлениеПоиска.СКонца);
				СтрПуть = Лев(Профиль,Поз-1);
				Сеть.ПодключитьШару(Сред(СтрПуть,3));
				СтрПуть = СтрПуть + "\";
				Каталог = РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ПараметрыСеанса.ТекущаяИБ, "ПутьДляЛогирования");//Константы.ПутьДляЛогирования.Получить();
				Если Каталог = Неопределено Тогда
					Каталог = Константы.ПутьДляЛогирования.Получить();
				КонецЕсли;
				СтрПуть = СтрПуть + СтрЗаменить(Каталог,":","$");
				СтрПуть = ?(Прав(СтрПуть,1) = "\",СтрПуть,СтрПуть + "\");
				СтрПуть = СтрПуть + Формат(ТекущаяДата(),"ДФ=yyyyMMdd") + "\";
				// проверка загрузки
				Нашли = ложь;
				Файлы = НайтиФайлы(СтрПуть,"Заказ_*.txt");
				Если Файлы.Количество() <> 0 Тогда
					Нашли = Истина;
				КонецЕсли;
				Файлы = НайтиФайлы(СтрПуть,"Возврат_*.txt");
				Если Файлы.Количество() <> 0 Тогда
					Нашли = Истина;
				КонецЕсли;
				Если не Нашли тогда 
					Продолжить;
				КонецЕсли;
				для каждого эл из СписокМасок Цикл
					МаскаФайла = эл.Значение;
					Файлы = НайтиФайлы(СтрПуть,МаскаФайла);
					Для Каждого ИмяФайла из Файлы Цикл
						Попытка
							Объект = ПрочитатьОбъектИзФайла(ИмяФайла.ПолноеИмя);
							Если Метаданные.Документы.Найти(Объект.Метаданные().Имя) <> Неопределено Тогда
								Попытка
									Объект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
								Исключение
									Объект.Записать();
								КонецПопытки;
							Иначе
								Объект.Записать();
							КонецЕсли;
							ПереместитьФайл(ИмяФайла.ПолноеИмя,ИмяФайла.ПолноеИмя + "_");
						Исключение
							ЗарегистрироватьСобытие("Загрузка файлов регламент",УровеньЖурналаРегистрации.Ошибка,Объект,,"ошибка записи ""объекта""" + ИмяФайла.ПолноеИмя);
							// пока не понятно что делать если была ошибка при загрузке или записи
						КонецПопытки;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Для узлов из справочника информационных баз подключается к sql базе 1С 
// и считывает константу "НомерВерсии". Считанное значение записывается в регистр сведений "Дополнительные свойства"
Процедура ОбновитьНомераВерсийИБ() Экспорт
	Если ПараметрыСеанса.ТекущаяИБ <> Справочники.ИнформационныеБазы.Центр Тогда
		Возврат;
	КонецЕсли;
		ТекстЗапроса = "SELECT Значение AS НомерВерсии FROM  Константа_НомерВерсии";
	ЗапросНеобновленныеИБ = Новый Запрос("
	|ВЫБРАТЬ
	|	ДополнительныеСвойства.Объект.Код КАК Код,
	|	ИнформационныеБазы.Наименование КАК Наименование,
	|	ИнформационныеБазы.ПометкаУдаления КАК ПометкаУдаления,
	|	ИнформационныеБазы.Предопределенный КАК Предопределенный,
	|	ИнформационныеБазы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСвойства КАК ДополнительныеСвойства
	|		ПО (ДополнительныеСвойства.Объект = ИнформационныеБазы.Ссылка)
	|			И (ДополнительныеСвойства.Свойство = ""НомерВерсии"")
	|ГДЕ
	|	ЕСТЬNULL(ДополнительныеСвойства.Значение, 0) < &ТекНомерВерсии
	|	И НЕ ИнформационныеБазы.ПометкаУдаления
	|	И НЕ ИнформационныеБазы.Предопределенный
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(ДополнительныеСвойства.Значение, 0)");
	ЗапросНеобновленныеИБ.УстановитьПараметр("ТекНомерВерсии", Константы.НомерВерсии.Получить());

	Выб = ЗапросНеобновленныеИБ.Выполнить().Выбрать();
	Пока Выб.Следующий() Цикл
		
		Соединение = SQL.ПодключитьсяКsup_kkm(Выб.Ссылка);
		Если Соединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Отказ = Ложь;
		ТекстОшибки = "";
		Рез = SQL.ВыполнитьЗапросВыборкиПервойЗаписи(Соединение, ТекстЗапроса, Отказ, ТекстОшибки);
		//:Рез = Новый Структура;
		Если Отказ Тогда
			Сообщить(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Нов = РегистрыСведений.ДополнительныеСвойства.СоздатьМенеджерЗаписи();
		Нов.ИнформационнаяБаза = Справочники.ИнформационныеБазы.Центр;
		Нов.Объект = Выб.Ссылка;
		Нов.Свойство = "НомерВерсии";
		Нов.Значение = Рез.НомерВерсии;
		Нов.Записать();   

	КонецЦикла;

	
КонецПроцедуры

Процедура ВыполнитьПроцедуруПоЗадаче(Задача) Экспорт
	//:Задача = Справочники.Задачи.СоздатьЭлемент();
	Алгоритм = 	Задача.Процедура;
	
	Если ЗначениеЗаполнено(Алгоритм) и Задача.флагРезультат <> 1 И Не Задача.ПроцедураВыполяетсяНаКлиенте Тогда
		ПараметрыАлгоритма = ирКПА(Алгоритм);
		ПараметрыАлгоритма.Задача = Задача;
		ирИВА(Алгоритм,ПараметрыАлгоритма);
		флагРезультат = Задача.флагРезультат;
		Результат = Задача.Результат;
		ОписаниеОшибки = Задача.ОписаниеОшибки;
		ПараметрыАлгоритма.Свойство("Результат", Результат);
		ПараметрыАлгоритма.Свойство("флагРезультат", флагРезультат);
		ПараметрыАлгоритма.Свойство("ОписаниеОшибки", ОписаниеОшибки);
		обЗадача = Задача.ПолучитьОбъект();
		Если ОписаниеОшибки <> Неопределено Тогда
			обЗадача.ОписаниеОшибки = ОписаниеОшибки;
		КонецЕсли;
		Если флагРезультат <> Неопределено Тогда
			обЗадача.флагРезультат = флагРезультат;
		КонецЕсли;
		Если Результат <> Неопределено Тогда
			обЗадача.Результат = Результат;
		КонецЕсли;
		обЗадача.ДополнительныеСвойства.Вставить("Авто", Истина);
		Попытка
			ИдентификаторРегламентногоЗадания = обЗадача.ИдентификаторРегламентногоЗадания;
			обЗадача.ИдентификаторРегламентногоЗадания = "";
			обЗадача.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	Иначе
		Сообщить("(ЗначениеЗаполнено(Алгоритм) и Задача.флагРезультат <> 1 И Не Задача.ПроцедураВыполяетсяНаКлиенте) <> Истина");
		Сообщить("Алгоритм не выполнен");
		ИдентификаторРегламентногоЗадания = Задача.ИдентификаторРегламентногоЗадания;
	КонецЕсли;

	Попытка
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ИдентификаторРегламентногоЗадания));
		Задание.Удалить();
	Исключение
		обЗадача.ИдентификаторРегламентногоЗадания = "";
		обЗадача.Записать();
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Функция ВыполнитьПроизвольныйКод() Экспорт
	//	ирОбщий.ВыполнитьАлгоритмБезРезультата();
КонецФункции

Процедура ОтправкаЗаявленийЛУЧ_Оперативная() Экспорт
	Дата1 = ТекущаяДата() - 15*60;
	Дата2 = ТекущаяДата();
	Лояльность.ФормированиеТаблицыЗаявокЛУЧ(Дата1, Дата2);
	Лояльность.ОтправкаЗаявленийЛУЧ(Дата1, Дата2);
КонецПроцедуры

Процедура ВыполнитьОбновлениеПризнакаНаличияВпродаже() Экспорт
	РегистрыСведений.ДействующиеРасписания.ОбновлениеПризнакаНаличияВПродаже(Истина);
КонецПроцедуры

//{ Обмен с ТТ
Процедура ВыгрузитьЦеныПоРеестрамЦен() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РеестрЦенИзменения.Узел КАК Узел
	|ИЗ
	|	Документ.РеестрЦен.Изменения КАК РеестрЦенИзменения
	|
	|СГРУППИРОВАТЬ ПО
	|	РеестрЦенИзменения.Узел");
	
	Узлы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
	Для Каждого Узел Из Узлы Цикл
		
		Выб = ПланыОбмена.ВыбратьИзменения(Узел, Узел.НомерОтправленного+1);
		
		Пока Выб.Следующий() Цикл
			ВыгрузкаУспешна = Ложь;
			ОбъектДляВыгрузки = Выб.Получить();	
			Если ТипЗнч(ОбъектДляВыгрузки) = Тип("ДокументОбъект.РеестрЦен") Тогда
				ОписаниеОшибки = "";
				ВыгрузкаУспешна = ВыгрузитьРеестрЦен(ОбъектДляВыгрузки, ОписаниеОшибки);
				Если ВыгрузкаУспешна = Истина Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ОбъектДляВыгрузки);
					ЗарегистрироватьСобытие("Выгружены цены на ТТ", УровеньЖурналаРегистрации.Информация,,ОбъектДляВыгрузки.Ссылка);
				Иначе
					Сообщить(ОписаниеОшибки);
					ЗарегистрироватьСобытие("Ошибка выгрузки цен на ТТ", УровеньЖурналаРегистрации.Ошибка,,ОбъектДляВыгрузки.Ссылка);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Попытка
		ОбработатьЦеныПомеченныеНаУдаление();	
	Исключение
		ЗарегистрироватьСобытие("Ошибка удаления цен на ТТ", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.РеестрЦен,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработатьЦеныПомеченныеНаУдаление() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ВыгруженныеЦены.РеестрЦен КАК РеестрЦен,
	|	ВыгруженныеЦены.ИнформационнаяБаза КАК ИнформационнаяБаза,
	|	ВыгруженныеЦены.КодСУП КАК КодСУП,
	|	ВыгруженныеЦены.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ВыгруженныеЦены.Цена КАК Цена,
	|	ВыгруженныеЦены.РеестрЦен.КатегорияЦен.Код КАК КатегорияЦенКод, ДатаВыгрузки, Номенклатура
	|ИЗ
	|	РегистрСведений.ВыгруженныеЦены КАК ВыгруженныеЦены
	|ГДЕ
	|	ВыгруженныеЦены.фУдаление");
	ТаблицаУдаляемыхЦен = Запрос.Выполнить().Выгрузить();
	
	ОбъектыИБ = Новый Соответствие;
	Для Каждого Т Из ТаблицаУдаляемыхЦен Цикл
		ИБ = ОбъектыИБ.Получить(Т.ИнформационнаяБаза);
		Если ИБ = Неопределено Тогда
			ИБ = Т.ИнформационнаяБаза.ПолучитьОбъект();
			ОбъектыИБ.Вставить(Т.ИнформационнаяБаза, ИБ);
		КонецЕсли;
		//:ИБ = Справочники.ИнформационныеБазы.ПустаяСсылка().ПолучитьОбъект();
		Соединение = ИБ.ComConnection();
		
		Если Соединение = Неопределено Тогда
			ЗарегистрироватьСобытие("Ошибка удаления цен на ТТ", УровеньЖурналаРегистрации.Ошибка,Метаданные.Документы.РеестрЦен,,"Не удалось установить соединение с " + ИБ.Наименование);
			Продолжить;
		КонецЕсли;
		
		МЗ = Соединение.РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
		МЗ.Период = Т.ДатаНачалаДействия;
		МЗ.ТипЦен = Соединение.Справочники.ТипыЦен.НайтиПоКоду(Т.КатегорияЦенКод);
		МЗ.Номенклатура = Соединение.ПрочитатьОбъектИзСтроки(ЗаписатьОбъектВстроку(Т.Номенклатура));
		МЗ.Прочитать();
		Если МЗ.Цена = Т.Цена Тогда
			МЗ.Удалить();
		КонецЕсли;

		МЗ = РегистрыСведений.ВыгруженныеЦены.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, Т);
		МЗ.Прочитать();
		МЗ.Удалить();
	КонецЦикла;
	
	Для Каждого Т Из ОбъектыИБ Цикл
		Попытка
			Т.Значение.Соединение.ЗавершитьРаботуСистемы(Ложь);
		Исключение
		КонецПопытки;
		Т.Значение.Соединение = Неопределено;		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыгрузитьРеестрЦен(ДокументОбъект, ОписаниеОшибки = "") Экспорт
	ТаблицаСсылокДляВыгрузки = ТаблицаСсылокДляВыгрузки(ДокументОбъект.ТТ);
	//:ТаблицаСсылокДляВыгрузки = Новый ТаблицаЗначений;
	ИБ = ДокументОбъект.ТТ.ПолучитьОбъект();//:ИБ=Справочники.ИнформационныеБазы.СоздатьЭлемент();
	Соединение = ИБ.ComConnection();
	ТаблицаСсылокДляВыгрузкиФильтр = ТаблицаСсылокДляВыгрузки.СкопироватьКолонки();
	Для Каждого Т Из ТаблицаСсылокДляВыгрузки Цикл
		Если Т.Тип = "Товары" Или Т.Тип = "Номенклатура" Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаСсылокДляВыгрузкиФильтр.Добавить(), Т);
		КонецЕсли;
	КонецЦикла;
	ВыгрузитьПоТаблицеСсылок(ТаблицаСсылокДляВыгрузкиФильтр);
	
	
	ОписаниеОшибки = "";
	фОшибка = Ложь;
	//Соединение = Неопределено;
	//:ДокументОбъект = Документы.РеестрЦен.СоздатьДокумент();
	
		
	//НЗ = РегистрыСведений.ВыгруженныеЦены.СоздатьНаборЗаписей();
	//НЗ.Отбор.РеестрЦен.Установить(ДокументОбъект.Ссылка);
	//НЗ.Прочитать();
	//Для Каждого Т Из НЗ Цикл
	//	Т.фУдаление = 1;
	//КонецЦикла;
	//НЗ.Записать(Истина);
	//
	//
	//Если ДокументОбъект.Проведен Тогда
	//	НачатьТранзакцию();
	//	ИБ = ДокументОбъект.ТТ.ПолучитьОбъект();//:ИБ=Справочники.ИнформационныеБазы.СоздатьЭлемент();
	//	Соединение = ИБ.ComConnection();
	//	
	//	ЗапросТовары = Соединение.NewObject("Запрос");//:ЗапросТовары = Новый Запрос
	//	ЗапросТовары.Текст = "Выбрать Ссылка Из Справочник.Товары ГДЕ КодСУП = &КодСУП И Не ПометкаУдаления И Не ЭтоГруппа";
	//	Соединение.НачатьТранзакцию();
	//	
	//	Для Каждого Т Из ДокументОбъект.Товары Цикл
	//		Если Не ЗначениеЗаполнено(Т.Номенклатура.КодСУП) Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		МЗ = Соединение.РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
	//		МЗ.Период = ДокументОбъект.ДатаНачалаДействия;
	//		МЗ.ТипЦен = Соединение.Справочники.ТипыЦен.НайтиПоКоду(ДокументОбъект.КатегорияЦен.Код);
	//		МЗ.Цена = Т.Цена;
	//		МЗ.Номенклатура = Соединение.ПрочитатьОбъектИзСтроки(ЗаписатьОбъектВстроку(Т.Номенклатура));
	//		МЗ.Записать(Истина);
	//		
	//		НЗ = РегистрыСведений.ВыгруженныеЦены.СоздатьНаборЗаписей();	
	//		НЗ.Отбор.РеестрЦен.Установить(ДокументОбъект.Ссылка);
	//		НЗ.Отбор.ИнформационнаяБаза.Установить(ДокументОбъект.ТТ);
	//		НЗ.Отбор.ДатаНачалаДействия.Установить(ДокументОбъект.ДатаНачалаДействия);
	//		НЗ.Отбор.КодСУП.Установить(Т.Номенклатура.КодСУП);		
	//		
	//		
	//		Нов = НЗ.Добавить();
	//		Нов.ДатаВыгрузки = ТекущаяДатаНаСервере();
	//		Нов.ДатаНачалаДействия = ДокументОбъект.ДатаНачалаДействия;
	//		Нов.Номенклатура = Т.Номенклатура;
	//		Нов.Цена = Т.Цена;
	//		Нов.ИнформационнаяБаза = ДокументОбъект.ТТ;
	//		Нов.фУдаление = 0;
	//		Нов.ДатаВыгрузки = ТекущаяДатаНаСервере();
	//		Нов.КодСУП = Т.Номенклатура.КодСУП;
	//		Нов.РеестрЦен = ДокументОбъект.Ссылка;
	//		НЗ.Записать(Истина);
	//		
	//	КонецЦикла;
	//	
	//	
	//	Если фОшибка Тогда
	//		Если Соединение<>Неопределено Тогда
	//			Соединение.ОтменитьТранзакцию();
	//		КонецЕсли;
	//		
	//		ОтменитьТранзакцию();
	//	Иначе
	//		Если Соединение<>Неопределено Тогда
	//			Соединение.ЗафиксироватьТранзакцию();	
	//		КонецЕсли;
	//		
	//		ЗафиксироватьТранзакцию();	
	//		Возврат Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	ЗаписатьДокумент(Соединение, ДокументОбъект);
	Возврат Истина;
	
КонецФункции

Процедура ВыгрузитьМенюЛояльности() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Узел.ИнформационнаяБаза КАК ИБ,
	|	Т.Узел КАК Узел,
	|	Т.Тип КАК Тип,
	|	Т.ИнформационнаяБаза КАК ИнформационнаяБаза,
	|	Т.Объект КАК Объект,
	|	Т.Свойство КАК Свойство,
	|	Т.КодГруппыОграниченияПродажи КАК КодГруппыОграниченияПродажи,
	|	Т.ГруппаКонтроляПродажи КАК ГруппаКонтроляПродажи,
	|	Т.ПараметрОграниченийПродаж КАК ПараметрОграниченийПродаж,
	|	Т.ИнформационнаяБазаГруппа КАК ИнформационнаяБазаГруппа,
	|	Т.Период КАК Период,
	|	Т.фУдаление КАК фУдаление,
	|	Т.Станция КАК Станция,
	|	Т.КаталогТоваров КАК КаталогТоваров
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВнешниеОбработкиИзменения.Ссылка КАК Ссылка,
	|		ВнешниеОбработкиИзменения.Узел КАК Узел,
	|		""Внешние обработки"" КАК Тип,
	|		NULL КАК ИнформационнаяБаза,
	|		NULL КАК Объект,
	|		NULL КАК Свойство,
	|		NULL КАК КодГруппыОграниченияПродажи,
	|		NULL КАК ГруппаКонтроляПродажи,
	|		NULL КАК ПараметрОграниченийПродаж,
	|		NULL КАК ИнформационнаяБазаГруппа,
	|		NULL КАК Период,
	|		NULL КАК фУдаление,
	|		NULL КАК Станция,
	|		NULL КАК КаталогТоваров
	|	ИЗ
	|		Справочник.ВнешниеОбработки.Изменения КАК ВнешниеОбработкиИзменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнешниеОбработки КАК ВнешниеОбработки
	|			ПО ВнешниеОбработкиИзменения.Ссылка = ВнешниеОбработки.Ссылка
	|	ГДЕ
	|		ЛОЖЬ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГруппыМенюЛояльностиИзменения.Ссылка,
	|		ГруппыМенюЛояльностиИзменения.Узел,
	|		""Группы меню лояльности"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.ГруппыМенюЛояльности.Изменения КАК ГруппыМенюЛояльностиИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МенюЛояльностиИзменения.Ссылка,
	|		МенюЛояльностиИзменения.Узел,
	|		""Меню лояльности"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.МенюЛояльности.Изменения КАК МенюЛояльностиИзменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МенюЛояльности КАК спр
	|			ПО (спр.Ссылка = МенюЛояльностиИзменения.Ссылка)) КАК Т");
	ВыгрузитьПоТаблицеСсылок(Запрос.Выполнить().Выгрузить());	
		
КонецПроцедуры

Процедура ОбновлениеИндексаПолнотекстовогоПоиска() Экспорт
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		ПолнотекстовыйПоиск.ОбновитьИндекс(Истина, Истина);
	КонецЕсли;                               	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуНаТТ(ЧтоВыгружать = "РеестрыЦен") Экспорт
	Если ЧтоВыгружать = "РеестрыЦен" Тогда
		ВыгрузитьЦеныПоРеестрамЦен();
	ИначеЕсли ЧтоВыгружать = "МенюЛояльности" Тогда
		ВыгрузитьМенюЛояльности();	
	КонецЕсли;
КонецПроцедуры

Функция ТаблицаСсылокДляВыгрузки(ИБ) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Узел.ИнформационнаяБаза КАК ИБ,
	|	Т.Узел КАК Узел,
	|	Т.Тип КАК Тип,
	|	Т.ИнформационнаяБаза КАК ИнформационнаяБаза,
	|	Т.Объект КАК Объект,
	|	Т.Свойство КАК Свойство,
	|	Т.КодГруппыОграниченияПродажи КАК КодГруппыОграниченияПродажи,
	|	Т.ГруппаКонтроляПродажи КАК ГруппаКонтроляПродажи,
	|	Т.ПараметрОграниченийПродаж КАК ПараметрОграниченийПродаж,
	|	Т.ИнформационнаяБазаГруппа КАК ИнформационнаяБазаГруппа,
	|	Т.Период КАК Период,
	|	Т.фУдаление КАК фУдаление,
	|	Т.Станция КАК Станция,
	|	Т.КаталогТоваров КАК КаталогТоваров,
	|	Т.ТипКартинки КАК ТипКартинки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВнешниеОбработкиИзменения.Ссылка КАК Ссылка,
	|		ВнешниеОбработкиИзменения.Узел КАК Узел,
	|		""Внешние обработки"" КАК Тип,
	|		NULL КАК ИнформационнаяБаза,
	|		NULL КАК Объект,
	|		NULL КАК Свойство,
	|		NULL КАК КодГруппыОграниченияПродажи,
	|		NULL КАК ГруппаКонтроляПродажи,
	|		NULL КАК ПараметрОграниченийПродаж,
	|		NULL КАК ИнформационнаяБазаГруппа,
	|		NULL КАК Период,
	|		NULL КАК фУдаление,
	|		NULL КАК Станция,
	|		NULL КАК КаталогТоваров,
	|		NULL КАК ТипКартинки
	|	ИЗ
	|		Справочник.ВнешниеОбработки.Изменения КАК ВнешниеОбработкиИзменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВнешниеОбработки КАК ВнешниеОбработки
	|			ПО ВнешниеОбработкиИзменения.Ссылка = ВнешниеОбработки.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ГруппыМенюЛояльностиИзменения.Ссылка,
	|		ГруппыМенюЛояльностиИзменения.Узел,
	|		""Группы меню лояльности"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.ГруппыМенюЛояльности.Изменения КАК ГруппыМенюЛояльностиИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МенюЛояльностиИзменения.Ссылка,
	|		МенюЛояльностиИзменения.Узел,
	|		""Меню лояльности"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.МенюЛояльности.Изменения КАК МенюЛояльностиИзменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МенюЛояльности КАК спр
	|			ПО (спр.Ссылка = МенюЛояльностиИзменения.Ссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РабочиеМестаИзменения.Ссылка,
	|		РабочиеМестаИзменения.Узел,
	|		""Рабочие места"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.РабочиеМеста.Изменения КАК РабочиеМестаИзменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеМеста КАК спр
	|			ПО (спр.Ссылка = РабочиеМестаИзменения.Ссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТорговоеОборудованиеИзменения.Ссылка,
	|		ТорговоеОборудованиеИзменения.Узел,
	|		""Торговое оборудование"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.ТорговоеОборудование.Изменения КАК ТорговоеОборудованиеИзменения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТорговоеОборудование КАК спр
	|			ПО (спр.Ссылка = ТорговоеОборудованиеИзменения.Ссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ФирмыИзменения.Ссылка,
	|		ФирмыИзменения.Узел,
	|		""Фирмы"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.Фирмы.Изменения КАК ФирмыИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ИнформационныеБазыИзменения.Ссылка,
	|		ИнформационныеБазыИзменения.Узел,
	|		""Информационные базы"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.ИнформационныеБазы.Изменения КАК ИнформационныеБазыИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ШаблоныШКИзменения.Ссылка,
	|		ШаблоныШКИзменения.Узел,
	|		""Шаблоны ШК"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.ШаблоныШК.Изменения КАК ШаблоныШКИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		МестаРеализации.Ссылка,
	|		МестаРеализации.Узел,
	|		""Места реалиции"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.МестаРеализации.Изменения КАК МестаРеализации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Каталогитоваров.Ссылка,
	|		Каталогитоваров.Узел,
	|		""Виды меню"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.КаталогиТоваров.Изменения КАК Каталогитоваров
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтанцииИзменения.Ссылка,
	|		СтанцииИзменения.Узел,
	|		""Станции"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.Станции.Изменения КАК СтанцииИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТоварыИзменения.Ссылка,
	|		ТоварыИзменения.Узел,
	|		""Товары"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.Товары.Изменения КАК ТоварыИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПейджерыИзменения.Ссылка,
	|		ПейджерыИзменения.Узел,
	|		""Пейджеры"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.Пейджеры.Изменения КАК ПейджерыИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НаборыПейджеровИзменения.Ссылка,
	|		НаборыПейджеровИзменения.Узел,
	|		""Наборы пейджеров"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.НаборыПейджеров.Изменения КАК НаборыПейджеровИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СпецификиИзменения.Ссылка,
	|		СпецификиИзменения.Узел,
	|		""Специфики"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ВЫБОР
	|			КОГДА спр.Ссылка ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.Специфики.Изменения КАК СпецификиИзменения
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Специфики КАК спр
	|			ПО СпецификиИзменения.Ссылка = спр.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НоменклатураИзменения.Ссылка,
	|		НоменклатураИзменения.Узел,
	|		""Номенклатура"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РасписанияИзменения.Ссылка,
	|		РасписанияИзменения.Узел,
	|		""Расписания"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.Расписания.Изменения КАК РасписанияИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХранилищеДополнительнойИнформацииИзменения.Ссылка,
	|		ХранилищеДополнительнойИнформацииИзменения.Узел,
	|		""Хранилище дополнительной информации"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.ХранилищеДополнительнойИнформации.Изменения КАК ХранилищеДополнительнойИнформацииИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		ДополнительныеСвойстваИзменения.Узел,
	|		""Дополнительные свойства"",
	|		ДополнительныеСвойстваИзменения.ИнформационнаяБаза,
	|		ДополнительныеСвойстваИзменения.Объект,
	|		ДополнительныеСвойстваИзменения.Свойство,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрСведений.ДополнительныеСвойства.Изменения КАК ДополнительныеСвойстваИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		Картинки.Узел,
	|		""Картинки"",
	|		NULL,
	|		Картинки.Объект,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		Картинки.ТипКартинки
	|	ИЗ
	|		РегистрСведений.Картинки.Изменения КАК Картинки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		ДействующиеРасписанияИзменения.Узел,
	|		""Наличие в продаже"",
	|		NULL,
	|		ДействующиеРасписанияИзменения.Объект,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ДействующиеРасписанияИзменения.ИнформационнаяБазаГруппа,
	|		ДействующиеРасписанияИзменения.Период,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрСведений.ДействующиеРасписания.Изменения КАК ДействующиеРасписанияИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		ЗначенияПараметровОграниченийПродажиИзменения.Узел,
	|		""Значения параметров ограничений продажи"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		ЗначенияПараметровОграниченийПродажиИзменения.КодГруппыОграниченияПродажи,
	|		ЗначенияПараметровОграниченийПродажиИзменения.ГруппаКонтроляПродажи,
	|		ЗначенияПараметровОграниченийПродажиИзменения.ПараметрОграниченийПродаж,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		РегистрСведений.ЗначенияПараметровОграниченийПродажи.Изменения КАК ЗначенияПараметровОграниченийПродажиИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		ДоступностьКаталоговТоваровИзменения.Узел,
	|		""Доступность видов меню"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ДоступностьКаталоговТоваровИзменения.ИнформационнаяБазаГруппа,
	|		NULL,
	|		NULL,
	|		ДоступностьКаталоговТоваровИзменения.Станция,
	|		ДоступностьКаталоговТоваровИзменения.КаталогТоваров,
	|		NULL
	|	ИЗ
	|		РегистрСведений.ДоступностьКаталоговТоваров.Изменения КАК ДоступностьКаталоговТоваровИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		ПривязкаТоваровКстанциямИзменения.Узел,
	|		""Привязка товаров к станциям"",
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ПривязкаТоваровКстанциямИзменения.ИнформационнаяБаза,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ПривязкаТоваровКстанциямИзменения.КаталогТоваров,
	|		NULL
	|	ИЗ
	|		РегистрСведений.ПривязкаТоваровКстанциям.Изменения КАК ПривязкаТоваровКстанциямИзменения
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеестрЦенИзменения.Ссылка,
	|		РеестрЦенИзменения.Узел,
	|		""Реестр цен"",
	|		РеестрЦенИзменения.Ссылка.ТТ,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Документ.РеестрЦен.Изменения КАК РеестрЦенИзменения) КАК Т
	|ГДЕ
	|	Т.Узел.ИнформационнаяБаза = &ИнформационнаяБаза");
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИБ);

	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ТаблицаСсылокДляВыгрузкиИзПланаОбмена(ИБ) Экспорт
	Выборка = ПланыОбмена.ВыбратьИзменения();
КонецФункции

Функция ВыгрузитьВсеНаИБ(ИБ) Экспорт
	ТаблицаСсылокДляВыгрузки = ТаблицаСсылокДляВыгрузки(ИБ);
	АдресТаблицыСсылок = ПоместитьВоВременноеХранилище(ТаблицаСсылокДляВыгрузки);
КонецФункции

Процедура ВыгрузитьПоТаблицеСсылок(ТаблицаСсылок, Соединение = Неопределено) Экспорт
	//ТаблицаСсылок = ПолучитьИзВременногоХранилища(АдресТаблицыСсылок);
	
	//:ТаблицаСсылок = Новый ТаблицаЗначений;
	//:ТаблицаСсылок.Колонки.Добавить("Ссылка");
	//:ТаблицаСсылок.Колонки.Добавить("ИБ");
	//:ТаблицаСсылок.Колонки.Добавить("Тип");
	//:ТаблицаСсылок.Колонки.Добавить("Объект");
	//:ТаблицаСсылок.Колонки.Добавить("ИнформационнаяБаза");
	//:ТаблицаСсылок.Колонки.Добавить("Свойство");
	//:ТаблицаСсылок.Колонки.Добавить("КодГруппыОграниченияПродажи");
	//:ТаблицаСсылок.Колонки.Добавить("ПараметрОграниченийПродаж");
	//:ТаблицаСсылок.Колонки.Добавить("ГруппаКонтроляПродажи");
	//:ТаблицаСсылок.Колонки.Добавить("Период");
	//:ТаблицаСсылок.Колонки.Добавить("ИнформационнаяБазаГруппа");
	//:ТаблицаСсылок.Колонки.Добавить("Станция");
	//:ТаблицаСсылок.Колонки.Добавить("КаталогТоваров");
	
	ОбъектыИБ = Новый Соответствие;
	Инд = 0;
	КоличествоПозиций = ТаблицаСсылок.Количество();
	Для Каждого Т Из ТаблицаСсылок Цикл
		
		Если Т.Ссылка <> Null И Т.Ссылка <> Неопределено И Т.Ссылка <> "" Тогда
			Если Т.Ссылка.ПолучитьОбъект() = Неопределено Тогда
				Инд=Инд+1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

	
		Если Не Инд%10 Тогда
			Структура = Новый Структура("Заголовок, Прогресс", Т.Тип + " -> " + Т.Ссылка, Инд/КоличествоПозиций*100);
			Сообщить(СтрШаблон("%1 / %2: %3 : %4", Инд, КоличествоПозиций, Т.Тип, Т.Ссылка));
		КонецЕсли;
		Инд=Инд+1;
		
			ИБ = ОбъектыИБ.Получить(Т.ИБ);
		Если ИБ = Неопределено Тогда
			ИБ = Т.ИБ.ПолучитьОбъект();
			ОбъектыИБ.Вставить(Т.ИБ, ИБ);
		КонецЕсли;
		//:ИБ = Справочники.ИнформационныеБазы.ПустаяСсылка().ПолучитьОбъект();
		Попытка
			Соединение = ИБ.ComConnection();	
		Исключение
			Продолжить;
		КонецПопытки;
		
		
		Если Соединение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
		
		Если СтрНайти(Т.Тип, "свойства") Тогда
			НЗ = РегистрыСведений.ДополнительныеСвойства.СоздатьНаборЗаписей();
			НЗ.Отбор.ИнформационнаяБаза.Установить(Т.ИнформационнаяБаза);
			НЗ.Отбор.Объект.Установить(Т.Объект);
			НЗ.Отбор.Свойство.Установить(Т.Свойство);
			НЗ.Прочитать();
			Стр = ЗаписатьОбъектВстроку(НЗ);
			об = Соединение.ПрочитатьОбъектИзСтроки(Стр);
			об.ОбменДанными.Загрузка = Истина;	
			об.Записать();

			ПланыОбмена.УдалитьРегистрациюИзменений(ИБ.ПолучитьУзелРИБ(), НЗ);
		ИначеЕсли СтрНайти(Т.Тип, "Наличие в продаже") или СтрНайти(т.Тип, "ДействующиеРасписания") Тогда
			НЗ = РегистрыСведений.ДействующиеРасписания.СоздатьНаборЗаписей();
			НЗ.Отбор.Период.Установить(Т.период);
			НЗ.Отбор.Объект.Установить(Т.Объект);
			НЗ.Отбор.ИнформационнаяБазаГруппа.Установить(Т.ИнформационнаяБазаГруппа);
			НЗ.Прочитать();
			Стр = ЗаписатьОбъектВстроку(НЗ);
			об = Соединение.ПрочитатьОбъектИзСтроки(Стр);
			об.ОбменДанными.Загрузка = Истина;	
			об.Записать();
			ПланыОбмена.УдалитьРегистрациюИзменений(ИБ.ПолучитьУзелРИБ(), НЗ);	
			
			
		ИначеЕсли СтрНайти(Т.Тип, "Доступность видов меню") или СтрНайти(т.Тип, "ДоступностьКаталоговТоваров") Тогда
			НЗ = РегистрыСведений.ДоступностьКаталоговТоваров.СоздатьНаборЗаписей();
			НЗ.Отбор.КаталогТоваров.Установить(Т.КаталогТоваров);
			НЗ.Отбор.Станция.Установить(Т.Станция);
			НЗ.Отбор.ИнформационнаяБазаГруппа.Установить(Т.ИнформационнаяБазаГруппа);
			НЗ.Прочитать();
			Стр = ЗаписатьОбъектВстроку(НЗ);
			об = Соединение.ПрочитатьОбъектИзСтроки(Стр);
			об.ОбменДанными.Загрузка = Истина;	
			об.Записать();
			ПланыОбмена.УдалитьРегистрациюИзменений(ИБ.ПолучитьУзелРИБ(), НЗ);	
			
		ИначеЕсли СтрНайти(Т.Тип, "Картинки") Тогда
			НЗ = РегистрыСведений.Картинки.СоздатьНаборЗаписей();
			НЗ.Отбор.Объект.Установить(Т.Объект);
			НЗ.Отбор.ТипКартинки.Установить(Т.ТипКартинки);
			НЗ.Прочитать();
			Стр = ЗаписатьОбъектВстроку(НЗ);
			об = Соединение.ПрочитатьОбъектИзСтроки(Стр);
			об.ОбменДанными.Загрузка = Истина;	
			об.Записать();
			ПланыОбмена.УдалитьРегистрациюИзменений(ИБ.ПолучитьУзелРИБ(), НЗ);	

			
		ИначеЕсли СтрНайти(Т.Тип, "лояльности") Тогда
			Попытка
				
				Стр = ЗаписатьОбъектВстроку(Т.Ссылка.ПолучитьОбъект());
				
				об = Соединение.ПрочитатьОбъектИзСтроки(Стр);
				об.ОбменДанными.Загрузка = Истина;	
				
				об.Записать();
				ПланыОбмена.УдалитьРегистрациюИзменений(ИБ.ПолучитьУзелРИБ(), Т.Ссылка);	
				
			Исключение
				Сообщить("Ошибка выгрузки "  + Т.Ссылка + ":");
				Сообщить(ОписаниеОшибки());
				Попытка
					ДАнные = Т.Ссылка;
				Исключение
				КонецПопытки;
				ЗарегистрироватьСобытие("Ошибка выгрузки на ТТ", УровеньЖурналаРегистрации.Ошибка,,Данные,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		ИначеЕсли СтрНайти(Т.Тип, "Значения") Тогда
			НЗ = РегистрыСведений.ЗначенияПараметровОграниченийПродажи.СоздатьНаборЗаписей();
			НЗ.Отбор.КодГруппыОграниченияПродажи.Установить(Т.КодГруппыОграниченияПродажи);
			НЗ.Отбор.ГруппаКонтроляПродажи.Установить(Т.ГруппаКонтроляПродажи);
			НЗ.Отбор.ПараметрОграниченийПродаж.Установить(Т.ПараметрОграниченийПродаж);
			НЗ.Прочитать();
			Стр = ЗаписатьОбъектВстроку(НЗ);
			об = Соединение.ПрочитатьОбъектИзСтроки(Стр);
			об.ОбменДанными.Загрузка = Истина;	
			об.Записать();
			ПланыОбмена.УдалитьРегистрациюИзменений(ИБ.ПолучитьУзелРИБ(), НЗ);	
			
		ИначеЕсли СтрНайти(Т.Тип, "Реестр цен") Тогда
			фОшибка = Ложь;
			Попытка
				ЗаписатьДокумент(Соединение, Т.Ссылка.ПолучитьОбъект());
				ПланыОбмена.УдалитьРегистрациюИзменений(ИБ.ПолучитьУзелРИБ(), Т.Ссылка);
			Исключение
				Сообщить("Ошибка выгрузки "  + Т.Ссылка + ":");
				Сообщить(ОписаниеОшибки());
				ДАнные = Т.Ссылка;
				ЗарегистрироватьСобытие("Ошибка выгрузки на ТТ", УровеньЖурналаРегистрации.Ошибка,,Данные,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				фОшибка = Истина;
			КонецПопытки;
			Попытка
				
				Если фОшибка Тогда
					Стр = ЗаписатьОбъектВстроку(Т.Ссылка.ПолучитьОбъект());
					
					об = Соединение.ПрочитатьОбъектИзСтроки(Стр);
					об.ОбменДанными.Загрузка = Истина;	
					
					об.Записать();
					ПланыОбмена.УдалитьРегистрациюИзменений(ИБ.ПолучитьУзелРИБ(), Т.Ссылка);	
				КонецЕсли;
				
			Исключение
				Сообщить("Ошибка выгрузки "  + Т.Ссылка + ":");
				Сообщить(ОписаниеОшибки());
				Попытка
					ДАнные = Т.Ссылка;
				Исключение
				КонецПопытки;
				ЗарегистрироватьСобытие("Ошибка выгрузки на ТТ", УровеньЖурналаРегистрации.Ошибка,,Данные,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		Иначе
			фОшибка = Ложь;
			Попытка
				ЗаписатьЭлементСправочника(Соединение, Т.Ссылка.ПолучитьОбъект());
				ПланыОбмена.УдалитьРегистрациюИзменений(ИБ.ПолучитьУзелРИБ(), Т.Ссылка);
			Исключение
				Сообщить("Ошибка выгрузки "  + Т.Ссылка + ":");
				Сообщить(ОписаниеОшибки());
				ДАнные = Т.Ссылка;
				ЗарегистрироватьСобытие("Ошибка выгрузки на ТТ", УровеньЖурналаРегистрации.Ошибка,,Данные,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				фОшибка = Истина;
			КонецПопытки;
			Попытка
				
				Если фОшибка Тогда
					Стр = ЗаписатьОбъектВстроку(Т.Ссылка.ПолучитьОбъект());
					
					об = Соединение.ПрочитатьОбъектИзСтроки(Стр);
					об.ОбменДанными.Загрузка = Истина;	
					
					об.Записать();
					ПланыОбмена.УдалитьРегистрациюИзменений(ИБ.ПолучитьУзелРИБ(), Т.Ссылка);	
				КонецЕсли;
				
			Исключение
				Сообщить("Ошибка выгрузки "  + Т.Ссылка + ":");
				Сообщить(ОписаниеОшибки());
				Попытка
					ДАнные = Т.Ссылка;
				Исключение
				КонецПопытки;
				ЗарегистрироватьСобытие("Ошибка выгрузки на ТТ", УровеньЖурналаРегистрации.Ошибка,,Данные,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;	
		
	КонецЦикла;
	Попытка
		Сообщить(СтрШаблон("%1 / %2: %3 : %4", Инд, КоличествоПозиций, Т.Тип, Т.Ссылка));
	Исключение
	КонецПопытки;
	Для Каждого Т Из ОбъектыИБ Цикл
		Попытка
			Т.Значение.Соединение.ЗавершитьРаботуСистемы(Ложь);
		Исключение
		КонецПопытки;
		Т.Значение.Соединение = Неопределено;		
	КонецЦикла;
КонецПроцедуры

Функция ЗаписатьЭлементСправочника(ComConnection, Объект) Экспорт
	//:Объект = Справочники.Товары.СоздатьЭлемент();
	
	обМетаданные = Объект.Метаданные();
	Структура = Новый Структура;
	
	Поля = Массив("Код","Наименование", "Ссылка", "ПометкаУдаления", "Владелец", "Родитель", "ИмяПредопределенныхДанных");
	Для каждого Реквизит Из обМетаданные.Реквизиты Цикл
		Поля.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для каждого ИмяПоля ИЗ Поля Цикл
		Попытка
			Значение = ЗначениеВСтрокуВнутр(Объект[ИмяПоля]);
			Структура.Вставить(ИмяПоля, Значение);		
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ТЧ Из обМетаданные.ТабличныеЧасти Цикл
		Структура.Вставить(ТЧ.Имя, ЗначениеВСтрокуВнутр(Объект[ТЧ.имя].Выгрузить()));
	КонецЦикла;
	
	comСтруктура = ComConnection.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Структура));
	
	СоздатьГруппу = Ложь;
	Если обМетаданные.Иерархический Тогда
		Если Объект.ЭтоГруппа Тогда
			СоздатьГруппу = Истина;
		КонецЕсли;
	КонецЕсли;

	comСсылка = ComConnection.ПрочитатьОбъектИзСтроки(ЗаписатьОбъектВстроку(Объект.Ссылка));
	Если comСсылка.Пустая() Тогда
		Если СоздатьГруппу Тогда
			comОбъект = ComConnection.Справочники[обМетаданные.Имя].СоздатьГруппу();
		Иначе
			comОбъект = ComConnection.Справочники[обМетаданные.Имя].СоздатьОбъект();
		КонецЕсли;
		
		comОбъект.УстановитьСсылкуНового(comСсылка);
	Иначе
		comОбъект = comСсылка.ПолучитьОбъект();
		Если comОбъект = Неопределено Тогда
			МетаИмя = обМетаданные.полноеИмя();
			МетаИмяМенеджер = СтрЗаменить(МетаИмя, ".", "Менеджер.");
			Man = ComConnection.NewObject(МетаИмяМенеджер);
			
			Если СоздатьГруппу Тогда
				comОбъект = Man.CreateFolder();
			Иначе
				comОбъект = Man.CreateItem();	
			КонецЕсли;
			
			
			comОбъект.УстановитьСсылкуНового(comСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ИмяПоля ИЗ Поля Цикл
		Если ИмяПоля = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Значение = ComConnection.ЗначениеИзСтрокиВнутр(comСтруктура[ИмяПоля]);
			comОбъект[ИмяПоля] = Значение;
		Исключение
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	   
	Попытка
		comОбъект.ОбменДанными.Загрузка = Истина;	          
		
	Исключение
	КонецПопытки;
	
	comОбъект.Записать();
	
КонецФункции

Функция ЗаписатьДокумент(ComConnection, Объект) Экспорт
	//:Объект = Справочники.Товары.СоздатьЭлемент();
	
	обМетаданные = Объект.Метаданные();
	Структура = Новый Структура;
	
	Поля = Массив("Номер","Дата", "Ссылка", "ПометкаУдаления", "Проведен");
	Для каждого Реквизит Из обМетаданные.Реквизиты Цикл
		Поля.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для каждого ИмяПоля ИЗ Поля Цикл
		Попытка
			Значение = ЗначениеВСтрокуВнутр(Объект[ИмяПоля]);
			Структура.Вставить(ИмяПоля, Значение);		
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ТЧ Из обМетаданные.ТабличныеЧасти Цикл
		Структура.Вставить(ТЧ.Имя, ЗначениеВСтрокуВнутр(Объект[ТЧ.имя].Выгрузить()));
	КонецЦикла;
	
	comСтруктура = ComConnection.ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Структура));
	
	comСсылка = ComConnection.ПрочитатьОбъектИзСтроки(ЗаписатьОбъектВстроку(Объект.Ссылка));
	Если comСсылка.Пустая() Тогда
		comОбъект = ComConnection.Документы[обМетаданные.Имя].СоздатьДокумент();
		comОбъект.УстановитьСсылкуНового(comСсылка);
	Иначе
		comОбъект = comСсылка.ПолучитьОбъект();
		Если comОбъект = Неопределено Тогда
			МетаИмя = обМетаданные.ПолноеИмя();
			МетаИмяМенеджер = СтрЗаменить(МетаИмя, ".", "Менеджер.");
			Man = ComConnection.NewObject(МетаИмяМенеджер);
			comОбъект = Man.CreateDocument();			
			comОбъект.УстановитьСсылкуНового(comСсылка);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ИмяПоля ИЗ Поля Цикл
		Если ИмяПоля = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			Значение = ComConnection.ЗначениеИзСтрокиВнутр(comСтруктура[ИмяПоля]);
			comОбъект[ИмяПоля] = Значение;
		Исключение
			//Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Для каждого ТЧ Из обМетаданные.ТабличныеЧасти Цикл
		comТЗ = comConnection.ЗначениеИзСтрокиВнутр(comСтруктура[ТЧ.имя]);
		comОбъект[ТЧ.Имя].Загрузить(comТЗ);
	КонецЦикла;
	
	Если Объект.Проведен Тогда
		РежимЗаписи = ComConnection.РежимЗаписиДокумента.Проведение;
	Иначе
		Если comОбъект.Проведен Тогда
			РежимЗаписи = ComConnection.РежимЗаписиДокумента.ОтменаПроведения;
		Иначе
			РежимЗаписи = ComConnection.РежимЗаписиДокумента.Проведение;
		КонецЕсли;
	КонецЕсли;
	
	comОбъект.Записать(РежимЗаписи);
	
КонецФункции

Процедура ОчисткаИБ() Экспорт
	ОбработкаОчистка = Обработки.ОчисткаБазы.Создать();
	ОбработкаОчистка.КомандаОчиститьИБ();
КонецПроцедуры

//}

Процедура ОбновитьДатуОбновленияПризнакаНаличияВпродаже() Экспорт
	Константы.ДатаОбновленияПризнакаНаличияВПродаже.Установить(ТекущаяДатаНаСервере());	
КонецПроцедуры

