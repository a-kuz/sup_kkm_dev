Функция ПроверитьСоответствиеАлкокодаТовару(Алкокод, Товар, Connection = Неопределено)
	Если Connection = Неопределено Тогда
		Connection = SQL.ПодключитьсяКegais();
	КонецЕсли;
	
	Текст = "
	|SELECT 
	|	AlcoCode
	|FROM 
	|	Egais.dbo.AlcoCode
	|WHERE
	|	AlcoCode = '" + СокрЛП(Алкокод) + "' and Article =  '" + СокрЛП(Товар.КодСУП) + "' 
	|";
	Возврат Не SQL.ВыполнитьЗапросВыборкиПервойЗаписи(Connection, Текст) = Неопределено;
КонецФункции	

Функция ЕстьВExcise(ПДФ, Connection = Неопределено)
	Если Connection = Неопределено Тогда
		Connection = SQL.ПодключитьсяКegais();
	КонецЕсли;
	
	Текст = "
	|SELECT 
	|	Excise ПДФ, sum(quantity) Количество
	|FROM 
	|	Egais.dbo.Excise
	|WHERE
	|	Excise = '" + СокрЛП(ПДФ) + "'
	|Group by
	|	Excise
	|Having 
	|	sum(quantity)>0
	|";
	Возврат Не SQL.ВыполнитьЗапросВыборкиПервойЗаписи(Connection, Текст) = Неопределено;
	
КонецФункции

// Записывает заказ в Excise
Функция ЗаписатьВExcise(Заказ, ЭтоВозврат = Ложь) Экспорт
	фОшибка = Ложь;
	Для каждого Т Из Заказ.Товары Цикл
		Если Т.фАлкоголь = 1 Тогда
			Если Т.Количество Тогда
				Если Не ЗаписатьСтрокуВExcise(Т.ПДФ, Т.Товар.КодСУП, Неопределено, ЭтоВозврат, Заказ.Ссылка) Тогда 
					фОшибка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Не фОшибка;
КонецФункции

Функция ЗаписатьСтрокуВExcise(ПДФ, КодСУП, Connection = Неопределено, ЭтоВозврат = Ложь, ЗаказСсылка)
	Connection = SQL.ПодключитьсяКegais();
	ТекстЗапроса = "INSERT INTO dbo.Excise
	|(
	|  Excise
	| ,DT
	| ,Article
	| ,quantity
	|)
	|VALUES
	|(
	|  N'%ПДФ%'
	| ,GETDATE()
	| ,N'%КодСУП%'
	| , %Количество%
	|)";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%ПДФ%", ПДФ); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%КодСУП%", КодСУП); 
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"%Количество%", ?(ЭтоВозврат,"-1","1")); 
	
	Отказ = Ложь;
	ТекстОшибки = "";
	SQL.ВыполнитьЗапрос(Connection, ТекстЗапроса, Отказ, ТекстОшибки);
	Если Отказ Тогда
		//Ошибка
		ЗаписьЖурналаРегистрации("Excise", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Заказ, ЗаказСсылка, "Не удалось записать строку в Excise. " + ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция КодАПизПДФ(ШК)
	Значение = СокрЛП(ШК);
	Если СтрДлина(Значение) <> 68 Тогда
		Возврат "";
	КонецЕсли;
	Значение = Сред(Значение,4,16);
	Результат = 0;
	Для Х = 1 По 16 Цикл
		М = 1;
		Для У = 1 По 16-Х Цикл
			М = М*36 
		КонецЦикла;
		Результат = Результат+(Найти("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",Сред(Значение,Х,1))-1)*М;
	КонецЦикла;
	текAlcCode = Формат(Результат, "ЧЦ=19; ЧВН=; ЧГ=0"); // дополняем ведущими нулями до 19
	Возврат текAlcCode;
КонецФункции

// Возвращает структуру (ip, port)
// АдресУТМ в формате 1.1.1.1:8080 или http://1.1.1.1:8080
// Можно передать просто ip, порт будет выбран по-умолчанию (8080)
Функция РазобратьАдресУТМ(АдресУТМ, ДобавитьHTTP = Ложь)
	Результат = Новый Структура("АдресУТМ, ПортУТМ", АдресУТМ, 8080);
	RegExp = ирКэш.Получить().RegExp;
	RegExp.Pattern = "[http:\/\/]*([\d\.]+):([\d]+)";
	Matches = RegExp.Execute(АдресУТМ);
	Если Matches.Count = 1 Тогда
		SM = Matches.Item(0).submatches;
		Если sm.Count = 2 Тогда
			Результат.АдресУТМ = sm.Item(0);
			Результат.ПортУТМ = sm.Item(1);
		КонецЕсли;
	КонецЕсли;
	Попытка
		Если ДобавитьHTTP Тогда 
			Результат.АдресУТМ =  "http://" + Результат.АдресУТМ;
		КонецЕсли;
		
		Результат.ПортУТМ = Число(Результат.ПортУТМ);
	Исключение
	КонецПопытки;
	
	 
	Возврат Результат;
КонецФункции

// Разбивка строк заказ по фирмам и подготовка структур для передачи в модуль РаботаСегаис->ОтправитьЧекВЕГАИС
Функция ЗаказВструктуры(Заказ, УТМы, Отмена = Ложь)
	глПараметрыРМ = глПараметрыРМ;
	Результат = Новый Массив;
	//: УТМы = Новый Соответствие;
	Для Каждого УТМ ИЗ УТМы Цикл
		
		Фирма = УТМ.Ключ;
		МестоРеализации = Константы.ОсновноеМестоРеализации.Получить();
		
		ПоФирме = Новый Структура("Шапка, СтрокиЧека", Новый Структура, Новый Массив);
		Шапка = ПоФирме.Шапка;
		Шапка.Вставить("ИНН", Фирма.ИНН);
		Шапка.Вставить("КПП", Фирма.КПП);
		Шапка.Вставить("АдресМагазина", ?(ЗначениеЗаполнено(Фирма.АдресДляЕГАИС), Фирма.АдресДляЕГАИС, Лев(Фирма.Адрес, 128)));
		Шапка.Вставить("НаименованиеМагазина", Фирма.Наименование);
		Шапка.Вставить("ЗаводскойНомерККМ", глПараметрыРМ.ККМ.ЗаводскойНомер);
		Шапка.Вставить("НомерСменыККМ", Формат(Заказ.НомерСмены, "ЧГ=0"));
		Шапка.Вставить("НомерЧекаККМ", ?(Отмена,"999","")+Формат(Заказ.НомерЧека, "ЧГ=0"));
		Шапка.Вставить("ДатаВремяЧека", ТекущаяДатаНаСервере());
		
		Строки = ПоФирме.СтрокиЧека;
		МС = Заказ.Товары.НайтиСтроки(Новый Структура("Фирма, фАлкоголь", Фирма, 1));
		Для Каждого СтрокаАлкоголь Из МС Цикл
			Если СтрокаАлкоголь.Количество Тогда
				Строка = Новый Структура("Цена, ШтрихкодМарки, ШтрихкодТовара, Объем", СтрокаАлкоголь.Цена, СтрокаАлкоголь.ПДФ, СтрокаАлкоголь.ШК, 1);
				Если ЗначениеЗаполнено(СтрокаАлкоголь.Товар.ОбъемБутылки) Тогда
					Строка.Объем = СтрокаАлкоголь.Товар.ОбъемБутылки;
				КонецЕСли;
				
				Если Отмена Тогда
					Попытка
						Если ЗначениеЗаполнено(СтрокаАлкоголь.ЦенаРозничная) Тогда
							Строка.Цена = СтрокаАлкоголь.ЦенаРозничная;	
						КонецЕсли;
					Исключение
					КонецПопытки;
					Строка.Цена = (-1)*(Строка.Цена);
					
				КонецЕсли;
				
				Строки.Добавить(Строка);

			КонецЕсли;
		КонецЦикла;
		Результат.Добавить(Новый Структура("Фирма, ДанныеДляЕГАИС", Фирма, ПоФирме));
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Возвращает соответсвие Фирма: Адрес УТМ
// Количество ключей структуры <= количеству элементов во входном массиве фирм
Функция УТМпоФирмам(Фирмы)
	Результат = Новый Соответствие;
	Для Каждого Фирма Из Фирмы Цикл 
		АдресУТМ = РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(Фирма, "УТМ");
		Если Не ЗначениеЗаполнено(АдресУТМ) Тогда
			АдресУТМ = РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ПараметрыСеанса.ТекущаяИБ, "УТМ");
		КонецЕсли;
		Результат.Вставить(Фирма, СокрЛП(АдресУТМ));
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Вызывается первой после подтверждения оплаты
// Она же вызывается при ошибке оплаты для отмены чека в ЕГАИС
Функция ОтправитьЗаказВЕГАИС(Заказ, Отмена = Ложь) Экспорт
	РезультатПроверки = Новый Структура("Успех, ОшибкаТекст, ОшибкаЗаголовок, ИдентификаторЗапроса, Подпись, ОтветМодуляЕГАИС", Ложь, "", "");
	НеОтправлятьВегаис = Ложь;
	глПараметрыРМ = глПараметрыРМ;
	Если ТипЗнч(глПараметрыРМ) = Тип("Структура") Тогда
		глПараметрыРМ.Свойство("НеОтправлятьВегаис", НеОтправлятьВегаис);
		НеОтправлятьВегаис = ?(НеОтправлятьВегаис = Неопределено, Ложь, НеОтправлятьВегаис);
	КонецЕсли;
	
	Если НеОтправлятьВегаис Тогда
		РезультатПроверки.Успех = Истина;
		РезультатПроверки.ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
		Возврат РезультатПроверки;
	КонецЕсли;
	РезультатПроверки.ОшибкаЗаголовок = "Ошибка отправки в ЕГАИС";
	Фирмы = Заказ.Товары.Выгрузить(, "Фирма, фАлкоголь, Количество");
	Фирмы.Свернуть("Фирма, фАлкоголь", "Количество");
	ФирмыЕГАИС = Новый Массив;
	СтрокиАлкоголь = Фирмы.НайтиСтроки(Новый Структура("фАлкоголь", 1));
	Для каждого Т ИЗ СтрокиАлкоголь Цикл
		Если Т.Количество Тогда
			ФирмыЕГАИС.Добавить(Т.Фирма);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ФирмыЕГАИС.Количество() Тогда 
		РезультатПроверки.Успех = Истина;
		Возврат РезультатПроверки;
	КонецЕсли;
	
	УТМы = УТМпоФирмам(ФирмыЕГАИС);
	Для Каждого Фирма Из ФирмыЕГАИС Цикл
		Если УТМы.Получить(Фирма) = Неопределено Тогда
			РезультатПроверки.ОшибкаТекст = РезультатПроверки.ОшибкаТекст + "
			|Не задан адрес УТМ для фирмы " + Фирма;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(РезультатПроверки.ОшибкаТекст) Тогда
		
		МассивСтруктурДляЕГАИС = ЗаказВструктуры(Заказ, УТМы, Отмена);
		Для каждого Т Из МассивСтруктурДляЕГАИС Цикл 
			РезультатПроверки.Успех = Ложь;
			стрУТМ = УТМы.Получить(Т.Фирма);
			УТМ = РазобратьАдресУТМ(стрУТМ, Ложь);
			РезультатЕГАИС = РаботаСЕГАИС.ОтправитьЧекВЕГАИС(УТМ, Т.ДанныеДляЕГАИС);
			ЗаполнитьЗначенияСвойств(РезультатПроверки, РезультатЕГАИС);
			Если ЗначениеЗаполнено(РезультатЕГАИС.ОписаниеОшибки) Тогда
				РезультатПроверки.ОшибкаТекст = "Ошибка при отправке в ЕГАИС по фирме " + Т.Фирма + "
				|"+РезультатЕГАИС.ОписаниеОшибки;
				ЗаписьЖурналаРегистрации("ЕГАИС", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Заказ, Заказ.Ссылка, 
					РезультатЕГАИС.ОписаниеОшиБки);
				Прервать;
			Иначе
				РезультатПроверки.Успех = Истина;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	Возврат РезультатПроверки;
КонецФункции

Функция ПроверитьПДФ(ШК, ПДФчека, Товар, ЭтоВозврат = Ложь) Экспорт 
	РезультатПроверки = Новый Структура("Успех, ОшибкаТекст, ОшибкаЗаголовок, ПДФ", Ложь, "", "", ШК);
	РезультатПроверки.ОшибкаЗаголовок = "Ошибка проверки PDF";
	Алккод = КодАПизПДФ(ШК);
	Если Алккод = "" Тогда
		РезультатПроверки.ОшибкаТекст = "Неверный штрихкод PDF";
		
	Иначе
		Если ПДФчека.Найти(ШК) <> Неопределено Тогда
			//РезультатПроверки.ОшибкаТекст = "Данный ПДФ уже есть в чеке.
			//|" + ШК;	
			РезультатПроверки.ОшибкаТекст = "PDF уже зарегистрирован";
		Иначе
			
			Connection = SQL.ПодключитьсяКegais();
			Если Connection = Неопределено Тогда
				РезультатПроверки.ОшибкаТекст = "Не удалось подключиться к базе EGAIS Excise";	
			ИначеЕсли ЕстьВExcise(ШК, Connection) И Не ЭтоВозврат Тогда
				РезультатПроверки.ОшибкаТекст = "Этот PDF уже был отправлен в ЕГАИС";	
			ИначеЕсли Не ЕстьВExcise(ШК, Connection) И ЭтоВозврат Тогда
				РезультатПроверки.ОшибкаТекст = "Данный PDF не продавался";	
			Иначе
				Если ПроверитьСоответствиеАлкокодаТовару(Алккод, Товар) Тогда 
					РезультатПроверки.Успех = Истина;
				Иначе
					РезультатПроверки.ОшибкаТекст = "PDF не соответствует товару";	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатПроверки;
КонецФункции  
