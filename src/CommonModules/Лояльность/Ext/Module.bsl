 

#Область ДополнительныеДанныеЗаказа

// Процедура записывает дополнительные данные лояльности по заказу
// Параметры:
//			-	ЗаказСсылка - ссылка на заказ
//			-	ТипДанных - число с типом данных (1 - данные гостя, 2 - ЛУЧ, 3 - результат расчета CALC
//			-	ДанныеЛояльности - структура с данными для записи
Процедура ЗаписатьДанныеЛояльностиПоЗаказу(ДокументСсылка, ТипДанных, ДанныеЛояльности=Неопределено, Идентификатор=Неопределено) Экспорт //### Переходный режим
	
	//###
	// Затычка для переходного режима
	Если ТипЗнч(ТипДанных) = Тип("Структура") Тогда
		ЗаписатьДанныеЛояльностиПоЗаказу_УДАЛИТЬ(ДокументСсылка, ТипДанных);
		Возврат;
	КонецЕсли;	
	//###
	
	Если Идентификатор = Неопределено Тогда
		Идентификатор = Строка(Новый УникальныйИдентификатор());
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДанныеЛояльностиПоЗаказу.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Документ = ДокументСсылка;
	НоваяЗапись.ТипДанных = ТипДанных;
	Если ТипЗнч(ДанныеЛояльности) = Тип("Строка") Тогда
		НоваяЗапись.Данные = ДанныеЛояльности;
	Иначе
		НоваяЗапись.Данные = ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеЛояльности);
	КонецЕсли;
	НоваяЗапись.ВерсияДанных = Идентификатор;	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Функция возвращает дополнительные данные лояльности по заказу
// Параметры:
//			-	ЗаказСсылка - ссылка на заказ
//			-	ТипДанных - число с типом данных (1 - данные гостя, 2 - ЛУЧ, 3 - результат расчета CALC
Функция ПолучитьДанныеЛояльностиПоЗаказу(ДокументСсылка, ТипДанных=Неопределено) Экспорт //### Переходный режим
	
	//### Затычка для переходного режима
	Если ТипДанных=Неопределено Тогда
		Возврат ПолучитьДанныеЛояльностиПоЗаказу_УДАЛИТЬ(ДокументСсылка);
	КонецЕсли;	
	
	//### Здесь нужно в запросе отправить список купонов, которые уже есть в заказе для получения текстов по ним, если тексты не заполнены
	// Или сохранить текущие тексты
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЛояльностиПоЗаказу.Данные КАК Данные,
	|	ДанныеЛояльностиПоЗаказу.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	РегистрСведений.ДанныеЛояльностиПоЗаказу КАК ДанныеЛояльностиПоЗаказу
	|ГДЕ
	|	ДанныеЛояльностиПоЗаказу.Документ = &ДокументСсылка
	|	И ДанныеЛояльностиПоЗаказу.ТипДанных = &ТипДанных";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу(ТипДанных); // Возвращаем пустую структуру текущей версии
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Если ПустаяСтрока(ВыборкаЗапроса.Данные) Тогда
		Возврат ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу(ТипДанных);
	КонецЕсли;
	
	Попытка
		Результат = ЛояльностьКлиентСервер.РазборJSON(ВыборкаЗапроса.Данные);
	Исключение
		ЗарегистрироватьСобытие("Лояльность.Данные заказа",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка получения данных заказа: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу(ТипДанных,,Истина,"Не удалось получить данные заказа");		 
	КонецПопытки;
	
	Возврат Результат;
			
КонецФункции

Процедура ФинализироватьДанныеЛояльностиПоПротоколу(ЗаказСсылка, ПротоколСсылка, ТипДанных, Идентификатор) Экспорт
	
	// Получаем последний результат расчета заказа и записываем его с протоколом
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеЛояльностиПоЗаказу.Документ КАК Документ,
	|	ДанныеЛояльностиПоЗаказу.ТипДанных КАК ТипДанных,
	|	ДанныеЛояльностиПоЗаказу.Данные КАК Данные,
	|	ДанныеЛояльностиПоЗаказу.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	РегистрСведений.ДанныеЛояльностиПоЗаказу КАК ДанныеЛояльностиПоЗаказу
	|ГДЕ
	|	ДанныеЛояльностиПоЗаказу.Документ = &Документ
	|	И ДанныеЛояльностиПоЗаказу.ТипДанных = &ТипДанных";
	Запрос.УстановитьПараметр("Документ", ЗаказСсылка);
	Запрос.УстановитьПараметр("ТипДанных", ТипДанных);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ЛояльностьКлиентСервер.Логирование(1, "финализация", "нет данных расчета. Заказ="+ЗаказСсылка+" протокол="+ПротоколСсылка+" идентификатор="+Идентификатор);
		Возврат;
	КонецЕсли;
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Если ВыборкаЗапроса.ВерсияДанных<>Идентификатор Тогда
		ЛояльностьКлиентСервер.Логирование(1, "финализация", "изменилась версия данных расчета. Заказ="+ЗаказСсылка+" протокол="+ПротоколСсылка+" идентификатор="+Идентификатор);
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДанныеЛояльностиПоЗаказу.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ПротоколСсылка);
	НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Документ = ПротоколСсылка;
	НоваяЗапись.ТипДанных = ТипДанных;
	НоваяЗапись.Данные = ВыборкаЗапроса.Данные;
	НоваяЗапись.ВерсияДанных = Идентификатор;
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ДанныеЛояльностиПоЗаказу.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ЗаказСсылка);
	НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура УдалитьДанныеЛояльностиПоЗаказу(ДокументСсылка=Неопределено, ТипДанных="") Экспорт
	
	НаборЗаписей = РегистрыСведений.ДанныеЛояльностиПоЗаказу.СоздатьНаборЗаписей();
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		НаборЗаписей.Отбор.Документ.Установить(ДокументСсылка);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументСсылка) И ЗначениеЗаполнено(ТипДанных) Тогда
		НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
	КонецЕсли;
	НаборЗаписей.Записать();
	
	// Нужно удалить данные по протоколам
	Если ПустаяСтрока(ТипДанных) ИЛИ ТипДанных = "SALE" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СПУЛЛояльности.Протокол КАК Протокол
		|ИЗ
		|	РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
		|ГДЕ
		|	СПУЛЛояльности.ДокументСсылка = &ДокументСсылка";
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		Пока РезультатЗапроса.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ДанныеЛояльностиПоЗаказу.СоздатьНаборЗаписей();
			Если ЗначениеЗаполнено(РезультатЗапроса.Протокол) Тогда
				НаборЗаписей.Отбор.Документ.Установить(РезультатЗапроса.Протокол);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТипДанных) Тогда
				НаборЗаписей.Отбор.ТипДанных.Установить(ТипДанных);
			КонецЕсли;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеГостяПоЗаказу(ЗаказСсылка, Тест=Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.НомерКартыЛояльности КАК НомерКартыЛояльности
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	НомерКарты = ВыборкаЗапроса.НомерКартыЛояльности;
	
	Если ПустаяСтрока(НомерКарты) Тогда 
		Возврат;
	КонецЕсли;
	
	//!!! Нужно это убирать и вставлять тип применения карты лояльности
	ДанныеГостяПоЗаказу = ПолучитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "INFO");
	Если Не ДанныеГостяПоЗаказу.Пустой Тогда
		НомерКарты = ДанныеГостяПоЗаказу.ИсходныйНомерКарты;
	КонецЕсли;
		
	Данные = ЛояльностьКлиентСервер.ПолучитьДанныеГостя(НомерКарты, Тест);
	ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "INFO", Данные);
	
КонецПроцедуры

Процедура ОбновитьДанныеГостяПоНомеруКарты(НомерКарты, ЗаказСсылка, Тест=Ложь) Экспорт
	
	Если ПустаяСтрока(НомерКарты) Тогда 
		Возврат;
	КонецЕсли;
	
	Данные = ЛояльностьКлиентСервер.ПолучитьДанныеГостя(НомерКарты, Тест);
	Если Не Данные.Ошибка Тогда
		ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "INFO", Данные);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьАкцииГостяПоЗаказу(ЗаказСсылка, Тест=Ложь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.НомерКартыЛояльности КАК НомерКартыЛояльности
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	НомерКарты = ВыборкаЗапроса.НомерКартыЛояльности;
	
	Если ПустаяСтрока(НомерКарты) Тогда 
		Возврат;
	КонецЕсли;
	
	Данные = ЛояльностьКлиентСервер.ПолучитьАкцииГостя(НомерКарты, Тест);
	ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "ACTIONS", Данные);
	
КонецПроцедуры

Процедура ОбновитьАкцииГостяПоНомеруКарты(НомерКарты, ЗаказСсылка, Тест=Ложь) Экспорт
	
	Если ПустаяСтрока(НомерКарты) Тогда 
		Возврат;
	КонецЕсли;
	
	Данные = ЛояльностьКлиентСервер.ПолучитьАкцииГостя(НомерКарты, Тест);
	//Если Не Данные.Ошибка И Не Данные.Пустой Тогда
		ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "ACTIONS", Данные);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПредварительныйРасчетЗаказа(ЗаказСсылка, Тест=Ложь) Экспорт
	
	Данные = ПредварительныйРасчетЗаказаПоСсылке(ЗаказСсылка, Тест);
	Если Не Данные.Ошибка Тогда
		ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "CALC", Данные);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает массив купонов для отображения на экране информации
// с фильтром по месту реализации (Номер ТТ)
Функция ПолучитьСписокКупоновГостя(ЗаказСсылка, МестоРеализации=0, Тест=Ложь) Экспорт
	
	МассивКупонов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКупоны.Купон КАК Купон,
	|	ЗаказКупоны.ТипКупона КАК ТипКупона,
	|	ЗаказКупоны.СтатусКупона КАК СтатусКупона,
	|	ЗаказКупоны.Наименование КАК Наименование
	|ИЗ
	|	Документ.Заказ.Купоны КАК ЗаказКупоны
	|ГДЕ
	|	ЗаказКупоны.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() ЦИкл
		НовыйКупон = Новый Структура;
		НовыйКупон.Вставить("Код", ВыборкаЗапроса.Купон);
		НовыйКупон.Вставить("ИнфоГостя", ВыборкаЗапроса.Наименование);
		НовыйКупон.Вставить("ИнфоСтанции", ВыборкаЗапроса.Наименование);
		НовыйКупон.Вставить("Статус", ВыборкаЗапроса.СтатусКупона);
		МассивКупонов.Добавить(НовыйКупон);
	КонецЦикла;
	
	ДанныеАкций = ПолучитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "ACTIONS");
	Если ДанныеАкций.Пустой Тогда
		// Пытаемся обновить акции гостя
		ОбновитьАкцииГостяПоЗаказу(ЗаказСсылка, Тест);
		ДанныеАкций = ПолучитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "ACTIONS");
		Если ДанныеАкций.Пустой Тогда
			// Обновление вернуло пустой результат - возвращаем то что есть в заказе
			Возврат МассивКупонов;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ТекущийКупон Из ДанныеАкций.Купоны Цикл
		НайденныйКупон = ЛояльностьКлиентСервер.НайтиСтрокуВМассивеСтруктур(МассивКупонов, "Код", ТекущийКупон.Код);
		Если НайденныйКупон<>Неопределено Тогда
			// В массиве уже есть купон - обновляем его данные
			НайденныйКупон.Вставить("ИнфоГостя", ЛояльностьКлиентСервер.МассивВСтроку(ТекущийКупон.ИнфоГостя, Символы.ПС));
			НайденныйКупон.Вставить("ИнфоСтанции", ЛояльностьКлиентСервер.МассивВСтроку(ТекущийКупон.ИнфоСтанции, Символы.ПС));
			
			Продолжить;
		КонецЕсли;
		
		Если МестоРеализации <> 0 И ТекущийКупон.МестоРеализации <> 0 И МестоРеализации <> ТекущийКупон.МестоРеализации Тогда
			// Пропускаем купоны, если установлен фильтр по месту реализации
			Продолжить;
		КонецЕсли;
		
		НовыйКупон = Новый Структура;
		НовыйКупон.Вставить("Код", ТекущийКупон.Код);
		НовыйКупон.Вставить("ИнфоГостя", ЛояльностьКлиентСервер.МассивВСтроку(ТекущийКупон.ИнфоГостя, Символы.ПС));
		НовыйКупон.Вставить("ИнфоСтанции", ЛояльностьКлиентСервер.МассивВСтроку(ТекущийКупон.ИнфоСтанции, Символы.ПС));
		НовыйКупон.Вставить("Статус", 0);	
		МассивКупонов.Добавить(НовыйКупон);
	КонецЦикла;
	
	Возврат МассивКупонов;
КонецФункции

Функция ПолучитьДанныеФинализацийЗаказа(ЗаказСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЛояльностиПоЗаказу.Данные КАК Данные,
	|	СПУЛЛояльности.Протокол КАК Протокол
	|ИЗ
	|	РегистрСведений.ДанныеЛояльностиПоЗаказу КАК ДанныеЛояльностиПоЗаказу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|		ПО ДанныеЛояльностиПоЗаказу.Документ = СПУЛЛояльности.ДокументСсылка
	|ГДЕ
	|	СПУЛЛояльности.ДокументСсылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		Если Результат = Неопределено Тогда
			Результат = ЛояльностьКлиентСервер.РазборJSON(ВыборкаЗапроса.Данные);
			Продолжить;
		Иначе
			ТекущиеДанные = ЛояльностьКлиентСервер.РазборJSON(ВыборкаЗапроса.Данные);
			
			Результат.КГЛНачислено = Результат.КГЛНачислено + ТекущиеДанные.КГЛНачислено;
			Результат.КГЛСписано = Результат.КГЛСписано + ТекущиеДанные.КГЛСписано;
			Для каждого ТекущаяСтрока Из ТекущиеДанные.СоставЗаказа Цикл
				НоваяСтрока = ЛояльностьКлиентСервер.КопияСтруктуры(ТекущаяСтрока);
				Результат.СоставЗаказа.Добавить(НоваяСтрока);
			КонецЦикла;
			Результат.ИтогиМ.КГЛНачислено = Результат.ИтогиМ.КГЛНачислено + ТекущиеДанные.ИтогиМ.КГЛНачислено;
			Результат.ИтогиМ.КГЛСписано = Результат.ИтогиМ.КГЛСписано + ТекущиеДанные.ИтогиМ.КГЛСписано;
			Результат.ИтогиМ.КГЛЗаТовар = Результат.ИтогиМ.КГЛЗаТовар + ТекущиеДанные.ИтогиМ.КГЛЗаТовар;
			Результат.ИтогиМ.КГЛЗаСумму = Результат.ИтогиМ.КГЛЗаСумму + ТекущиеДанные.ИтогиМ.КГЛЗаСумму;
			Результат.ИтогиМ.КГЛЗаСерт = Результат.ИтогиМ.КГЛЗаСерт + ТекущиеДанные.ИтогиМ.КГЛЗаСерт;
			
			Результат.ИтогиО.КГЛНачислено = Результат.ИтогиО.КГЛНачислено + ТекущиеДанные.ИтогиО.КГЛНачислено;
			Результат.ИтогиО.КГЛСписано = Результат.ИтогиО.КГЛСписано + ТекущиеДанные.ИтогиО.КГЛСписано;
			Результат.ИтогиО.КГЛЗаТовар = Результат.ИтогиО.КГЛЗаТовар + ТекущиеДанные.ИтогиО.КГЛЗаТовар;
			Результат.ИтогиО.КГЛЗаСумму = Результат.ИтогиО.КГЛЗаСумму + ТекущиеДанные.ИтогиО.КГЛЗаСумму;
			Результат.ИтогиО.КГЛЗаСерт = Результат.ИтогиО.КГЛЗаСерт + ТекущиеДанные.ИтогиО.КГЛЗаСерт;
			
			Результат.ИтогиКП.КГЛНачислено = Результат.ИтогиКП.КГЛНачислено + ТекущиеДанные.ИтогиКП.КГЛНачислено;
			Результат.ИтогиКП.КГЛСписано = Результат.ИтогиКП.КГЛСписано + ТекущиеДанные.ИтогиКП.КГЛСписано;
			Результат.ИтогиКП.КГЛЗаТовар = Результат.ИтогиКП.КГЛЗаТовар + ТекущиеДанные.ИтогиКП.КГЛЗаТовар;
			Результат.ИтогиКП.КГЛЗаСумму = Результат.ИтогиКП.КГЛЗаСумму + ТекущиеДанные.ИтогиКП.КГЛЗаСумму;
			Результат.ИтогиКП.КГЛЗаСерт = Результат.ИтогиКП.КГЛЗаСерт + ТекущиеДанные.ИтогиКП.КГЛЗаСерт;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ДополнитьПревьюЗаказаДаннымиФинализации(ЗаказСсылка, ПревьюЗаказа)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЛояльностиПоЗаказу.Данные КАК Данные,
	|	СПУЛЛояльности.Протокол КАК Протокол
	|ИЗ
	|	РегистрСведений.ДанныеЛояльностиПоЗаказу КАК ДанныеЛояльностиПоЗаказу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|		ПО ДанныеЛояльностиПоЗаказу.Документ = СПУЛЛояльности.Протокол
	|ГДЕ
	|	СПУЛЛояльности.ДокументСсылка = &ДокументСсылка
	|	И ДанныеЛояльностиПоЗаказу.ТипДанных = &ТипДанных";
	Запрос.УстановитьПараметр("ДокументСсылка", ЗаказСсылка);
	Запрос.УстановитьПараметр("ТипДанных", "SALE");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	Пока ВыборкаЗапроса.Следующий() Цикл
		ТекущиеДанные = ЛояльностьКлиентСервер.РазборJSON(ВыборкаЗапроса.Данные);
		
		ПревьюЗаказа.КГЛНачислено = ПревьюЗаказа.КГЛНачислено + ТекущиеДанные.КГЛНачислено;
		ПревьюЗаказа.КГЛСписано = ПревьюЗаказа.КГЛСписано + ТекущиеДанные.КГЛСписано;
		Для каждого ТекущаяСтрока Из ТекущиеДанные.СоставЗаказа Цикл
			НайденнаяСтрока = ЛояльностьКлиентСервер.НайтиСтрокуВМассивеСтруктур(ПревьюЗаказа.СоставЗаказа, "ИДСтроки", ТекущаяСтрока.ИДСтроки);
			Если НайденнаяСтрока<>Неопределено Тогда
				НайденнаяСтрока.СтатусЛояльности = ТекущаяСтрока.СтатусЛояльности;
				НайденнаяСтрока.СтатусАкции = ТекущаяСтрока.СтатусАкции;
				НайденнаяСтрока.ДопСтатусАкции = ТекущаяСтрока.ДопСтатусАкции;
				НайденнаяСтрока.ГруппаАкции = ТекущаяСтрока.ГруппаАкции;
				НайденнаяСтрока.КГЛНачислено = ТекущаяСтрока.КГЛНачислено;
				НайденнаяСтрока.КГЛСписано = ТекущаяСтрока.КГЛСписано;
				НайденнаяСтрока.Проект = ТекущаяСтрока.Проект;
			Иначе
				НоваяСтрока = ЛояльностьКлиентСервер.КопияСтруктуры(ТекущаяСтрока);
				ПревьюЗаказа.СоставЗаказа.Добавить(НоваяСтрока);
			КонецЕсли;
		КонецЦикла;
		ПревьюЗаказа.ИтогиМ.КГЛНачислено = ПревьюЗаказа.ИтогиМ.КГЛНачислено + ТекущиеДанные.ИтогиМ.КГЛНачислено;
		ПревьюЗаказа.ИтогиМ.КГЛСписано = ПревьюЗаказа.ИтогиМ.КГЛСписано + ТекущиеДанные.ИтогиМ.КГЛСписано;
		ПревьюЗаказа.ИтогиМ.КГЛЗаТовар = ПревьюЗаказа.ИтогиМ.КГЛЗаТовар + ТекущиеДанные.ИтогиМ.КГЛЗаТовар;
		ПревьюЗаказа.ИтогиМ.КГЛЗаСумму = ПревьюЗаказа.ИтогиМ.КГЛЗаСумму + ТекущиеДанные.ИтогиМ.КГЛЗаСумму;
		ПревьюЗаказа.ИтогиМ.КГЛЗаСерт = ПревьюЗаказа.ИтогиМ.КГЛЗаСерт + ТекущиеДанные.ИтогиМ.КГЛЗаСерт;
		
		ПревьюЗаказа.ИтогиО.КГЛНачислено = ПревьюЗаказа.ИтогиО.КГЛНачислено + ТекущиеДанные.ИтогиО.КГЛНачислено;
		ПревьюЗаказа.ИтогиО.КГЛСписано = ПревьюЗаказа.ИтогиО.КГЛСписано + ТекущиеДанные.ИтогиО.КГЛСписано;
		ПревьюЗаказа.ИтогиО.КГЛЗаТовар = ПревьюЗаказа.ИтогиО.КГЛЗаТовар + ТекущиеДанные.ИтогиО.КГЛЗаТовар;
		ПревьюЗаказа.ИтогиО.КГЛЗаСумму = ПревьюЗаказа.ИтогиО.КГЛЗаСумму + ТекущиеДанные.ИтогиО.КГЛЗаСумму;
		ПревьюЗаказа.ИтогиО.КГЛЗаСерт = ПревьюЗаказа.ИтогиО.КГЛЗаСерт + ТекущиеДанные.ИтогиО.КГЛЗаСерт;
		
		ПревьюЗаказа.ИтогиКП.КГЛНачислено = ПревьюЗаказа.ИтогиКП.КГЛНачислено + ТекущиеДанные.ИтогиКП.КГЛНачислено;
		ПревьюЗаказа.ИтогиКП.КГЛСписано = ПревьюЗаказа.ИтогиКП.КГЛСписано + ТекущиеДанные.ИтогиКП.КГЛСписано;
		ПревьюЗаказа.ИтогиКП.КГЛЗаТовар = ПревьюЗаказа.ИтогиКП.КГЛЗаТовар + ТекущиеДанные.ИтогиКП.КГЛЗаТовар;
		ПревьюЗаказа.ИтогиКП.КГЛЗаСумму = ПревьюЗаказа.ИтогиКП.КГЛЗаСумму + ТекущиеДанные.ИтогиКП.КГЛЗаСумму;
		ПревьюЗаказа.ИтогиКП.КГЛЗаСерт = ПревьюЗаказа.ИтогиКП.КГЛЗаСерт + ТекущиеДанные.ИтогиКП.КГЛЗаСерт;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьПревьюЗаказаАкциямиГостя_УДАЛИТЬ(ЗаказСсылка, ПревьюЗаказа)
	
	// Получим список купонов, которые CALC добавил к заказу
	ДобавленныеКупоны = ЛояльностьКлиентСервер.НайтиСтрокиВМассивеСтруктур(ПревьюЗаказа.Купоны, Новый Структура("Добавлен", Истина));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЛояльностиПоЗаказу.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ДанныеЛояльностиПоЗаказу КАК ДанныеЛояльностиПоЗаказу
	|ГДЕ
	|	ДанныеЛояльностиПоЗаказу.ТипДанных = &ТипДанных
	|	И ДанныеЛояльностиПоЗаказу.Документ = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ЗаказСсылка);
	Запрос.УстановитьПараметр("ТипДанных", "ACTIONS");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Данные = ЛояльностьКлиентСервер.РазборJSON(ВыборкаЗапроса.Данные);
	Если Данные<>Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПревьюЗаказа, Данные, "ЛУЧ,ЛУЧО,ЛУЧМ,ЛУЧКП");
	КонецЕсли;
	Если ДобавленныеКупоны.Количество() = 0 Тогда
		Если Данные = Неопределено Тогда
			Возврат; // Нет информации по акциям гостя и нет добавленных купонов
		КонецЕсли;
	Иначе
		Если Данные = Неопределено Тогда
			// Добавим в акции гостя новые купоны
			Данные = ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("ACTIONS");
			Данные.Пустой = Ложь;
		КонецЕсли;
		Для каждого ТекущаяСтрока Из ДобавленныеКупоны Цикл
			//ТекущаяСтрока.Статус = 0;
			Если ЛояльностьКлиентСервер.НайтиСтрокуВМассивеСтруктур(Данные.Купоны, "Код", ТекущаяСтрока.Код) <> Неопределено Тогда
				Продолжить; // Избавляемся от дублей
			КонецЕсли;
			Данные.Купоны.Добавить(ЛояльностьКлиентСервер.КопияСтруктуры(ТекущаяСтрока));
		КонецЦикла;
		Лояльность.ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "ACTIONS", Данные); // Записываем измененные данные
		ДобавленныеКупоны = Неопределено;
	КонецЕсли;
		
	Для каждого ТекущаяСтрока Из Данные.Купоны Цикл
		НайденнаяСтрока = ЛояльностьКлиентСервер.НайтиСтрокуВМассивеСтруктур(ПревьюЗаказа.Купоны, "Код", ТекущаяСтрока.Код);
		Если НайденнаяСтрока<>Неопределено Тогда
			// Проверяем заполненность информации о купоне
			Если ПустаяСтрока(НайденнаяСтрока.ИнфоГостя) Тогда
				НайденнаяСтрока.ИнфоГостя = ТекущаяСтрока.ИнфоГостя;
			КонецЕсли;
			Если ПустаяСтрока(НайденнаяСтрока.ИнфоГостя) Тогда
				НайденнаяСтрока.ИнфоГостя = ТекущаяСтрока.Наименование;
			КонецЕсли;
			Если ПустаяСтрока(НайденнаяСтрока.ИнфоСтанции) Тогда
				НайденнаяСтрока.ИнфоСтанции = ТекущаяСтрока.ИнфоСтанции;
			КонецЕсли;
			Если ПустаяСтрока(НайденнаяСтрока.ИнфоСтанции) Тогда
				НайденнаяСтрока.ИнфоСтанции = ТекущаяСтрока.Наименование;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Новый Структура("Код, ИнфоГостя, ИнфоСтанции, Статус");
		НоваяСтрока.Код = ТекущаяСтрока.Код;
		НоваяСтрока.Статус = 0;
		НоваяСтрока.ИнфоГостя = СтрЗаменить(ТекущаяСтрока.ИнфоГостя,"\n", Символы.ПС);
		НоваяСтрока.ИнфоСтанции = СтрЗаменить(ТекущаяСтрока.ИнфоСтанции,"\n", Символы.ПС);
		// Проверяем заполненность информации о купоне
		Если ПустаяСтрока(НоваяСтрока.ИнфоГостя) Тогда
			НоваяСтрока.ИнфоГостя = ТекущаяСтрока.Наименование;
		КонецЕсли;
		Если ПустаяСтрока(НоваяСтрока.ИнфоСтанции) Тогда
			НоваяСтрока.ИнфоСтанции = ТекущаяСтрока.Наименование;
		КонецЕсли;
		ПревьюЗаказа.Купоны.Добавить(НоваяСтрока);
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьАкцииГостяПоПревьюЗаказа(ЗаказСсылка, ПревьюЗаказа, ВерсияДанных)
	
	ДанныеАкций = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "ACTIONS");
	ДанныеАкций.Пустой = Ложь;
	ДанныеАкций.Ошибка = Ложь;
	ДанныеАкций.Купоны.Очистить();
	ДанныеАкций.Акции.Очистить();
	
	Для каждого ТекущаяСтрока Из ПревьюЗаказа.Купоны Цикл
		НоваяСтрока = Новый Структура("Код, Тип, Проект, Наименование, ИнфоГостя, ИнфоСтанции, Статус"); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		ДанныеАкций.Купоны.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Для каждого ТекущаяСтрока Из ПревьюЗаказа.Акции Цикл
		НоваяСтрока = Новый Структура("Код, Тип, Проект, Наименование, ИнфоГостя, ИнфоСтанции, Статус"); 
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
		ДанныеАкций.Акции.Добавить(НоваяСтрока);
	КонецЦикла;
	
	ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "ACTIONS", ДанныеАкций, ВерсияДанных);
	
КонецПроцедуры

Функция ПолучитьВерсиюДанныхЛояльностиПоЗаказу(ЗаказСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Заказ.НомерКартыЛояльности КАК НомерКартыЛояльности,
	|	Заказ.Товары.(
	|		Товар КАК Товар,
	|		Количество КАК Количество,
	|		Сумма КАК Сумма,
	|		СтатусОплаты КАК СтатусОплаты
	|	) КАК Товары,
	|	Заказ.Специфики.(
	|		Специфика КАК Специфика,
	|		Количество КАК Количество,
	|		Цена КАК Цена
	|	) КАК Специфики,
	|	Заказ.Купоны.(
	|		Купон КАК Купон
	|	) КАК Купоны
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ЛояльностьКлиентСервер.ПолучитьХеш(ЗначениеВСтрокуВнутр(РезультатЗапроса));
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область УправлениеСПУЛом

Процедура ЗаписатьВСПУЛ(ДокументСсылка, Протокол=Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(Протокол) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаказДопИнф.ПротоколРасчетов КАК ПротоколРасчетов
		|ИЗ
		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		|ГДЕ
		|	ЗаказДопИнф.Заказ = &ДокументСсылка";
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			//!!! Протокола нет, потенциально опасная ситуация
			Возврат;
		КонецЕсли;
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		
		Протокол = ВыборкаЗапроса.ПротоколРасчетов;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СПУЛЛояльности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	Если ЗначениеЗаполнено(Протокол) Тогда
		НаборЗаписей.Отбор.Протокол.Установить(Протокол);
	КонецЕсли;
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ДокументСсылка = ДокументСсылка;
	НоваяЗапись.Протокол = Протокол;
	НоваяЗапись.СПУЛ = Истина;
	
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура ЗаписатьВСПУЛЗакрытиеЗаказа(ДокументСсылка, Протокол=Неопределено, Обрабатывать=Истина) Экспорт
	Если Не ЗначениеЗаполнено(Протокол) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СПУЛЛояльности.ДокументСсылка КАК ДокументСсылка,
		|	СПУЛЛояльности.Протокол КАК Протокол
		|ИЗ
		|	РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
		|ГДЕ
		|	СПУЛЛояльности.ДокументСсылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	СПУЛЛояльности.Протокол.Дата УБЫВ";
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			//!!! Протокола нет, потенциально опасная ситуация
			Возврат;
		КонецЕсли;
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		
		Протокол = ВыборкаЗапроса.Протокол;
	КонецЕсли;
	
	//!!! Возможно нужно проверять была ли уже записан в СПУЛ лояльности запись закрытия заказа
	
	НаборЗаписей = РегистрыСведений.СПУЛЛояльности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Протокол.Установить(Протокол);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДокументСсылка = ДокументСсылка;
		НоваяЗапись.Протокол = Протокол;
		НоваяЗапись.ЗакрытиеЗаказа = Истина;
		НоваяЗапись.ОбработатьЗакрытиеЗаказа = Обрабатывать;
	Иначе
		Для каждого ТекущаяЗапись Из НаборЗаписей Цикл
			ТекущаяЗапись.ЗакрытиеЗаказа = Истина;
			ТекущаяЗапись.ОбработатьЗакрытиеЗаказа = Обрабатывать;
		КонецЦикла;
	КонецЕсли;
	НаборЗаписей.Записать();
КонецПроцедуры

Функция ПолучитьДанныеСПУЛа(ДокументСсылка, Протокол=Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СПУЛЛояльности.СПУЛ КАК СПУЛ,
	|	СПУЛЛояльности.ЗакрытиеЗаказа КАК ЗакрытиеЗаказа,
	|	СПУЛЛояльности.ОбработатьЗакрытиеЗаказа КАК ОбработатьЗакрытиеЗаказа
	|ИЗ
	|	РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|ГДЕ
	|	СПУЛЛояльности.ДокументСсылка = &ДокументСсылка";
	Если ЗначениеЗаполнено(Протокол) Тогда
		Запрос.Текст = Запрос.Текст + " И СПУЛЛояльности.Протокол = &Протокол";
		Запрос.УстановитьПараметр("Протокол", Протокол);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса;
	
КонецФункции

Функция ПолучитьПризнакСПУЛа(ДокументСсылка, Протокол=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СПУЛЛояльности.СПУЛ КАК СПУЛ
	|ИЗ
	|	РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|ГДЕ
	|	СПУЛЛояльности.ДокументСсылка = &ДокументСсылка
	|";
	Если ЗначениеЗаполнено(Протокол) Тогда
		Запрос.Текст = Запрос.Текст + " И СПУЛЛояльности.Протокол = &Протокол";
		Запрос.УстановитьПараметр("Протокол", Протокол);
	КонецЕсли;
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.СПУЛ;
	
КонецФункции

Процедура УдалитьИзСПУЛа(ДокументСсылка, ПротоколСсылка=Неопределено) Экспорт
	НаборЗаписей = РегистрыСведений.СПУЛЛояльности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	Если ЗначениеЗаполнено(ПротоколСсылка) Тогда
		НаборЗаписей.Отбор.Протокол.Установить(ПротоколСсылка);
	КонецЕсли;
	
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура УдалитьИзСПУЛа_Финализация(ДокументСсылка, ПротоколСсылка) Экспорт
	НаборЗаписей = РегистрыСведений.СПУЛЛояльности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Протокол.Установить(ПротоколСсылка);
	
	// Если по протоколу установлен признак закрытия, тогда не удаляем, а сбрасываем признак финализации
	НаборЗаписей.Прочитать();
	Для каждого ТекущаяЗапись Из НаборЗаписей Цикл
		//ЕстьЗакрытие = ТекущаяЗапись.ОбработатьЗакрытиеЗаказа;
		ТекущаяЗапись.СПУЛ = Ложь;
	КонецЦикла;
	//!!! Удалять из СПУЛа нельзя, пока не закрыт заказ
	//Если Не ЕстьЗакрытие Тогда
	//	НаборЗаписей.Очистить();
	//КонецЕсли;
	
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура УдалитьИзСПУЛа_Закрытие(ДокументСсылка, ПротоколСсылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СПУЛЛояльности.Протокол КАК Протокол
	|ИЗ
	|	РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|ГДЕ
	|	СПУЛЛояльности.ДокументСсылка = &ДокументСсылка
	|	И (СПУЛЛояльности.СПУЛ
	|			ИЛИ СПУЛЛояльности.ОбработатьЗакрытиеЗаказа)";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Нет нефинализированных протоколов - можно удалить все из СПУЛа
		НаборЗаписей = РегистрыСведений.СПУЛЛояльности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументСсылка.Установить(ДокументСсылка);
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура УДАЛИТЬ_УстановитьПризнакОбработкиСПУЛ_ФинализацияЧека(ДокументСсылка, ПротоколСсылка, Признак=Истина) Экспорт
	НаборЗаписей = РегистрыСведений.СПУЛЛояльности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Протокол.Установить(ПротоколСсылка);
		
	НаборЗаписей.Прочитать();
	Для каждого ТекущаяЗапись Из НаборЗаписей Цикл
		ТекущаяЗапись.СПУЛ = Признак;
	КонецЦикла;
	
	НаборЗаписей.Записать();
КонецПроцедуры

Процедура УДАЛИТЬ_УстановитьПризнакОбработкиСПУЛ_ЗакрытиеЗаказа(ДокументСсылка, ПротоколСсылка, Признак=Истина) Экспорт
	НаборЗаписей = РегистрыСведений.СПУЛЛояльности.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументСсылка.Установить(ДокументСсылка);
	НаборЗаписей.Отбор.Протокол.Установить(ПротоколСсылка);
		
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДокументСсылка = ДокументСсылка;
		НоваяЗапись.Протокол = ПротоколСсылка;
		НоваяЗапись.ОбработатьЗакрытиеЗаказа = Признак;
		НоваяЗапись.ЗакрытиеЗаказа = Истина;
	Иначе
		Для каждого ТекущаяЗапись Из НаборЗаписей Цикл
			ТекущаяЗапись.ОбработатьЗакрытиеЗаказа = Признак;
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Записать();
КонецПроцедуры

Функция ПолучитьСпулЗаказов(Дата1 = Неопределено, Дата2 = Неопределено) ЭКСПОРТ
	Запрос = Новый Запрос;		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СПУЛЛояльности.ДокументСсылка КАК ЗаказСсылка,
	|	СПУЛЛояльности.Протокол КАК ПротоколСсылка
	|ИЗ
	|	РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|ГДЕ
	|	СПУЛЛояльности.Протокол <> ЗНАЧЕНИЕ(Документ.ПротоколРасчетов.ПустаяСсылка)
	|	И СПУЛЛояльности.СПУЛ
	|	И СПУЛЛояльности.Протокол.Фискализирован";
	
	Если Дата1 <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СПУЛЛояльности.ДокументСсылка.Дата >= &Дата1";
		Запрос.УстановитьПараметр("Дата1", Дата1);
	КонецЕсли;
	Если Дата2 <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И СПУЛЛояльности.ДокументСсылка.Дата <= &Дата2";
		Запрос.УстановитьПараметр("Дата2", Дата2);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	ДокументЗаказ.Ссылка КАК ЗаказСсылка,
	|	ДокументПротоколРасчетов.Ссылка КАК ПротоколСсылка
	|ИЗ
	|	Документ.Заказ КАК ДокументЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|		ПО (ЗаказДопИнф.Заказ = ДокументЗаказ.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПротоколРасчетов КАК ДокументПротоколРасчетов
	|		ПО (ДокументПротоколРасчетов.Ссылка = ЗаказДопИнф.ПротоколРасчетов)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|		ПО (СПУЛЛояльности.ДокументСсылка = ДокументЗаказ.Ссылка)
	|ГДЕ
	|	СПУЛЛояльности.Протокол = ЗНАЧЕНИЕ(Документ.ПротоколРасчетов.ПустаяСсылка)
	|	И ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Закрыт)
	|	И ДокументПротоколРасчетов.Фискализирован
	|	И СПУЛЛояльности.СПУЛ";
	
	Если Дата1 <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ДокументЗаказ.Дата >= &Дата1";
		Запрос.УстановитьПараметр("Дата1", Дата1);
	КонецЕсли;
	Если Дата2 <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ДокументЗаказ.Дата <= &Дата2";
		Запрос.УстановитьПараметр("Дата2", Дата2);
	КонецЕсли;
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьСпулУдаленныхЗаказов(Дата1 = Неопределено, Дата2 = Неопределено) ЭКСПОРТ
	Запрос = Новый Запрос;		
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументЗаказ.Ссылка КАК ЗаказСсылка
	|ИЗ
	|	Документ.Заказ									КАК ДокументЗаказ
	|		INNER JOIN РегистрСведений.ЗаказДопИнф		КАК ЗаказДопИнф
	|		ON ЗаказДопИнф.Заказ = ДокументЗаказ.Ссылка
	|		INNER JOIN РегистрСведений.СПУЛЛояльности	КАК СПУЛЛояльности
	|		ON СПУЛЛояльности.ДокументСсылка = ДокументЗаказ.Ссылка
	|ГДЕ
	|	СПУЛЛояльности.СПУЛ = ИСТИНА
	|	И ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Удален)
	|";
	
	Если Дата1 <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ДокументЗаказ.Дата >= &Дата1";
		Запрос.УстановитьПараметр("Дата1", Дата1);
	КонецЕсли;
	Если Дата2 <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ДокументЗаказ.Дата <= &Дата2";
		Запрос.УстановитьПараметр("Дата2", Дата2);
	КонецЕсли;
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьСпулВозвратов(Дата1 = Неопределено, Дата2 = Неопределено) ЭКСПОРТ
	Запрос = Новый Запрос;		
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументВозврат.Ссылка КАК ВозвратСсылка
	|ИЗ
	|	Документ.Возврат								КАК ДокументВозврат
	|		INNER JOIN РегистрСведений.ВозвратДопИнф	КАК ВозвратДопИнф
	|		ON ВозвратДопИнф.Возврат = ДокументВозврат.Ссылка
	|		INNER JOIN Документ.ПротоколРасчетов		КАК ДокументПротоколРасчетов
	|		ON ДокументПротоколРасчетов.Ссылка = ВозвратДопИнф.ПротоколРасчетов
	|		INNER JOIN РегистрСведений.СПУЛЛояльности	КАК СПУЛЛояльности
	|		ON СПУЛЛояльности.ДокументСсылка = ДокументВозврат.Ссылка
	|ГДЕ
	|	ВозвратДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Закрыт)
	|	И ДокументПротоколРасчетов.Фискализирован = ИСТИНА
	|	И СПУЛЛояльности.СПУЛ = ИСТИНА";
	Если Дата1 <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ДокументВозврат.Дата >= &Дата1";
		Запрос.УстановитьПараметр("Дата1", Дата1);
	КонецЕсли;
	Если Дата2 <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ДокументВозврат.Дата <= &Дата2";
		Запрос.УстановитьПараметр("Дата2", Дата2);
	КонецЕсли;
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ;
	
КонецФункции

Процедура ЗапуститьОбработкуСПУЛаЛояльности(ЗаказСсылка=Неопределено, ПротоколСсылка=Неопределено) Экспорт
	Если ЗначениеЗаполнено(ЗаказСсылка) Тогда
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ЗаказСсылка);
		ИдентификаторЗадания = Строка(ЗаказСсылка);
		Если ЗначениеЗаполнено(ПротоколСсылка) Тогда
			ПараметрыЗадания.Добавить(ПротоколСсылка);
			ИдентификаторЗадания = ИдентификаторЗадания + ": " + Строка(ПротоколСсылка);
		КонецЕсли;
		ФоновыеЗадания.Выполнить("Лояльность.ОбработатьСпулЛояльности", ПараметрыЗадания, , "Обработать СПУЛ Лояльности");
	Иначе
		ФоновыеЗадания.Выполнить("Лояльность.ОбработатьСпулЛояльности",, "Обработать СПУЛ Лояльности", "Обработать СПУЛ Лояльности");
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьСпулЛояльности(ЗаказСсылка=Неопределено, ПротоколСсылка=Неопределено) Экспорт
	
	//!!! Нужны проверки на заполненность протоколов по закрытым заказам
	//!!! И еще проверки на отметки о закрытии заказа
	
	Если ЗначениеЗаполнено(ЗаказСсылка) И ЗначениеЗаполнено(ПротоколСсылка) Тогда
		Попытка
			ДанныеСПУЛа = ПолучитьДанныеСПУЛа(ЗаказСсылка, ПротоколСсылка);
			Если ДанныеСПУЛа<>Ложь И ДанныеСПУЛа.СПУЛ Тогда
				Если ТипЗнч(ЗаказСсылка) = Тип("ДокументСсылка.Заказ") Тогда
					ФинализацияЧека(ЗаказСсылка, ПротоколСсылка, Истина);
				ИначеЕсли ТипЗнч(ЗаказСсылка) = Тип("ДокументСсылка.Возврат") Тогда
					ОбработатьВозврат(ЗаказСсылка, ПротоколСсылка, Истина);
				КонецЕсли;
			КонецЕсли;
			Если ДанныеСПУЛа.ЗакрытиеЗаказа Тогда
				Если ДанныеСПУЛа.ОбработатьЗакрытиеЗаказа Тогда
					ЗакрытиеЗаказа(ЗаказСсылка, ПротоколСсылка);
				КонецЕсли;
				УдалитьИзСПУЛа_Закрытие(ЗаказСсылка, ПротоколСсылка);
			КонецЕсли;
		Исключение
			ЗарегистрироватьСобытие("Лояльность.Обработка СПУЛ",УровеньЖурналаРегистрации.Ошибка,,ЗаказСсылка,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		ЗапуститьОбработкуСпулЛояльности_СборщикМусора();
	Иначе
		ТаблицаЗаказов = ПолучитьСпулЗаказов();
		Для Каждого Стр ИЗ ТаблицаЗаказов Цикл
			Попытка
				ДанныеСПУЛа = ПолучитьДанныеСПУЛа(Стр.ЗаказСсылка, Стр.ПротоколСсылка);
				Если ДанныеСПУЛа<>Ложь И ДанныеСПУЛа.СПУЛ Тогда
					Если ТипЗнч(Стр.ЗаказСсылка) = Тип("ДокументСсылка.Заказ") Тогда
						ФинализацияЧека(Стр.ЗаказСсылка, Стр.ПротоколСсылка, Истина);
					ИначеЕсли ТипЗнч(Стр.ЗаказСсылка) = Тип("ДокументСсылка.Возврат") Тогда
						ОбработатьВозврат(Стр.ЗаказСсылка, Стр.ПротоколСсылка, Истина);
					КонецЕсли;
				КонецЕсли;
				Если ДанныеСПУЛа.ЗакрытиеЗаказа И ДанныеСПУЛа.ОбработатьЗакрытиеЗаказа Тогда
					ЗакрытиеЗаказа(Стр.ЗаказСсылка, Стр.ПротоколСсылка);
				КонецЕсли;
			Исключение
				ЗарегистрироватьСобытие("Лояльность.Обработка СПУЛ",УровеньЖурналаРегистрации.Ошибка,,Стр.ЗаказСсылка,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЦикла;
		
		//ТаблицаУдаленных = Лояльность.ПолучитьСпулУдаленныхЗаказов();
		//Для Каждого Стр ИЗ ТаблицаУдаленных Цикл
		//	Попытка
		//		ЛояльностьКлиентСервер.УдалениеЧека(Стр.ЗаказСсылка);
		//	Исключение
		//		ЗарегистрироватьСобытие("Лояльность. Ошибка обработки СПУЛа",УровеньЖурналаРегистрации.Ошибка,,Стр.ВозвратСсылка,ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
		//	КонецПопытки;
		//КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ЗапуститьОбработкуСпулЛояльности_СборщикМусора()
	Задания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", "ОбработкаСпулЛояльности_СборщикМусора", СостояниеФоновогоЗадания.Активно));
	Если Задания.Количество() = 0 Тогда
		// Задание не найдено - запустим новое в фоне
		ФоновыеЗадания.Выполнить("Лояльность.ОбработатьСпулЛояльности_СборщикМусора", , "ОбработкаСпулЛояльности_СборщикМусора", "Обработка СПУЛ лояльности (сборщик мусора)");
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьСпулЛояльности_СборщикМусора() Экспорт
	
	ТаблицаЗаказов = ПолучитьСпулЗаказов();
	Для Каждого Стр ИЗ ТаблицаЗаказов Цикл
		Попытка
			ДанныеСПУЛа = ПолучитьДанныеСПУЛа(Стр.ЗаказСсылка, Стр.ПротоколСсылка);
			Если ДанныеСПУЛа<>Ложь И ДанныеСПУЛа.СПУЛ Тогда
				Если ТипЗнч(Стр.ЗаказСсылка) = Тип("ДокументСсылка.Заказ") Тогда
					ФинализацияЧека(Стр.ЗаказСсылка, Стр.ПротоколСсылка, Истина);
				ИначеЕсли ТипЗнч(Стр.ЗаказСсылка) = Тип("ДокументСсылка.Возврат") Тогда
					ОбработатьВозврат(Стр.ЗаказСсылка, Стр.ПротоколСсылка, Истина);
				КонецЕсли;
			КонецЕсли;
			Если ДанныеСПУЛа.ЗакрытиеЗаказа И ДанныеСПУЛа.ОбработатьЗакрытиеЗаказа Тогда
				ЗакрытиеЗаказа(Стр.ЗаказСсылка, Стр.ПротоколСсылка);
			КонецЕсли;
		Исключение
			ЗарегистрироватьСобытие("Лояльность.Обработка СПУЛ",УровеньЖурналаРегистрации.Ошибка,,Стр.ЗаказСсылка,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	//ТаблицаУдаленных = Лояльность.ПолучитьСпулУдаленныхЗаказов();
	//Для Каждого Стр ИЗ ТаблицаУдаленных Цикл
	//	Попытка
	//		ЛояльностьКлиентСервер.УдалениеЧека(Стр.ЗаказСсылка);
	//	Исключение
	//		ЗарегистрироватьСобытие("Лояльность. Ошибка обработки СПУЛа",УровеньЖурналаРегистрации.Ошибка,,Стр.ВозвратСсылка,ПодробноеПредставлениеОшибки(ОписаниеОшибки()));
	//	КонецПопытки;
	//КонецЦикла;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработкаЗаказаЛояльностью

// Процедура очистки данных лояльности по заказу: инфор о госте, акции и предварительный расчет
Процедура СброситьДанныеЛояльностиПоЗаказу(ЗаказСсылка) Экспорт
	// Убираем все данные из регистра
	Лояльность.УдалитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "INFO");
	Лояльность.УдалитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "ACTIONS");
	Лояльность.УдалитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "CALC");
КонецПроцедуры

Процедура ЗапуститьЗакрытиеЗаказа(ЗаказСсылка, ПротоколСсылка) Экспорт
	
	ЗаписатьВСПУЛЗакрытиеЗаказа(ЗаказСсылка, ПротоколСсылка);
	ЗапуститьОбработкуСПУЛаЛояльности(ЗаказСсылка, ПротоколСсылка);
	
КонецПроцедуры

Процедура ЗапуститьФинализациюЧека(ЗаказСсылка, ПротоколСсылка, Идентификатор) Экспорт
	
	ЗаписатьВСПУЛ(ЗаказСсылка, ПротоколСсылка);
	ФинализироватьДанныеЛояльностиПоПротоколу(ЗаказСсылка, ПротоколСсылка, "SALE", Идентификатор);
	//### Временная затычка
	//### Проверяем статус заказа. Если он закрыт, то нужно и в лояльности его закрыть
	//Если ПолучитьСтатусЗаказа(ЗаказСсылка) = Перечисления.СтатусыЗаказа.Закрыт Тогда
	//	ЗаписатьВСПУЛЗакрытиеЗаказа(ЗаказСсылка, ПротоколСсылка);
	//КонецЕсли;
	
	ЗапуститьОбработкуСПУЛаЛояльности(ЗаказСсылка, ПротоколСсылка);
	
КонецПроцедуры

Процедура ИзменитьКартуЛояльностиПоЗаказу(ЗаказСсылка, НомерКарты) Экспорт
	
	УдалитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "INFO");
	УдалитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "ACTIONS");
	
	
КонецПроцедуры

Функция НайтиПротоколРасчетовПоЗаказу(ЗаказСсылка)
	
	// Сбор протоколов из товарных строк заказа
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	ИтоговаяТаблица.ПротоколСсылка КАК ПротоколСсылка,
	//|	ИтоговаяТаблица.СПУЛ КАК СПУЛ
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		ЗаказТовары.ДокументОплаты КАК ПротоколСсылка,
	//|		ЕСТЬNULL(СПУЛЛояльности.СПУЛ, НЕОПРЕДЕЛЕНО) КАК СПУЛ
	//|	ИЗ
	//|		Документ.Заказ.Товары КАК ЗаказТовары
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	//|			ПО ЗаказТовары.Ссылка = СПУЛЛояльности.ДокументСсылка
	//|				И ЗаказТовары.ДокументОплаты = СПУЛЛояльности.Протокол
	//|	ГДЕ
	//|		ЗаказТовары.Ссылка = &Ссылка
	//|		И ЗаказТовары.ДокументОплаты <> ЗНАЧЕНИЕ(Документ.ПротоколРасчетов.ПустаяСсылка)
	//|	
	//|	ОБЪЕДИНИТЬ ВСЕ
	//|	
	//|	ВЫБРАТЬ
	//|		ЗаказДопИнф.ПротоколРасчетов,
	//|		ЕСТЬNULL(СПУЛЛояльности.СПУЛ, НЕОПРЕДЕЛЕНО)
	//|	ИЗ
	//|		РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	//|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	//|			ПО ЗаказДопИнф.Заказ = СПУЛЛояльности.ДокументСсылка
	//|				И ЗаказДопИнф.ПротоколРасчетов = СПУЛЛояльности.Протокол
	//|	ГДЕ
	//|		ЗаказДопИнф.Заказ = &Ссылка) КАК ИтоговаяТаблица";
	//Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	//Результат = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказДопИнф.ПротоколРасчетов КАК ПротоколРасчетов
	|ИЗ
	|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|ГДЕ
	|	ЗаказДопИнф.Заказ = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.ПротоколРасчетов;
КонецФункции

Функция НайтиТаблицуПротоколаРасчетовПоЗаказу(ЗаказСсылка)
	
	// Сбор протоколов из товарных строк заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИтоговаяТаблица.ПротоколСсылка КАК ПротоколСсылка,
	|	ИтоговаяТаблица.СПУЛ КАК СПУЛ
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказТовары.ДокументОплаты КАК ПротоколСсылка,
	|		ЕСТЬNULL(СПУЛЛояльности.СПУЛ, НЕОПРЕДЕЛЕНО) КАК СПУЛ
	|	ИЗ
	|		Документ.Заказ.Товары КАК ЗаказТовары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|			ПО ЗаказТовары.Ссылка = СПУЛЛояльности.ДокументСсылка
	|				И ЗаказТовары.ДокументОплаты = СПУЛЛояльности.Протокол
	|	ГДЕ
	|		ЗаказТовары.Ссылка = &Ссылка
	|		И ЗаказТовары.ДокументОплаты <> ЗНАЧЕНИЕ(Документ.ПротоколРасчетов.ПустаяСсылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаказДопИнф.ПротоколРасчетов,
	|		ЕСТЬNULL(СПУЛЛояльности.СПУЛ, НЕОПРЕДЕЛЕНО)
	|	ИЗ
	|		РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|			ПО ЗаказДопИнф.Заказ = СПУЛЛояльности.ДокументСсылка
	|				И ЗаказДопИнф.ПротоколРасчетов = СПУЛЛояльности.Протокол
	|	ГДЕ
	|		ЗаказДопИнф.Заказ = &Ссылка) КАК ИтоговаяТаблица";
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат ;
КонецФункции

Процедура УДАЛИТЬ_СкорректироватьЗаказПоПротоколуРасчетов(ЗаказСсылка, ПротоколСсылка)
	
	ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
	Для каждого ТекущаяСтрока Из ЗаказОбъект.Товары Цикл
		ТекущаяСтрока.ДокументОплаты = ПротоколСсылка;
	КонецЦикла;
	Попытка
		ЗаказОбъект.Записать();
		ЗаказОбъект = Неопределено;
	Исключение
		ЗарегистрироватьСобытие("Лояльность. Ошибка обработки СПУЛа",УровеньЖурналаРегистрации.Ошибка,,ЗаказСсылка,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура УДАЛИТЬ_СкорректироватьПротоколРасчетовПоЗаказу(ЗаказСсылка, ПротоколСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.ИдентификаторЛояльности КАК ИдентификаторЛояльности,
	|	Заказ.ОбработанСистемойЛояльности КАК ОбработанСистемойЛояльности,
	|	Заказ.ТипЧекаЛояльность КАК ТипЧекаЛояльность,
	|	Заказ.НомерКартыЛояльности КАК НомерКартыЛояльности,
	|	Заказ.РабочееМесто.Фирма КАК Фирма
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	ДанныеЗаказа = Запрос.Выполнить().Выбрать();
	ДанныеЗаказа.Следующий();
	
	ПротоколОбъект = ПротоколСсылка.ПолучитьОбъект();
	ПротоколОбъект.ИдентификаторЛояльности = ДанныеЗаказа.ИдентификаторЛояльности;
	ПротоколОбъект.ТипЧекаЛояльность = ДанныеЗаказа.ТипЧекаЛояльность;
	ПротоколОбъект.СтатусЛояльности = ДанныеЗаказа.ОбработанСистемойЛояльности;
	ПротоколОбъект.Фирма = ДанныеЗаказа.Фирма;
	Попытка
		ПротоколОбъект.Записать();
		ПротоколОбъект = Неопределено;
	Исключение
		ЗарегистрироватьСобытие("Лояльность. Ошибка обработки СПУЛа",УровеньЖурналаРегистрации.Ошибка,,ПротоколСсылка,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура УДАЛИТЬ_ПроверитьНеобходимостьЗакрытияЗаказа(ЗаказСсылка, ПротоколСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказДопИнф.Заказ КАК Заказ,
	|	ЗаказДопИнф.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|ГДЕ
	|	ЗаказДопИнф.Заказ = &Заказ";
	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Если ВыборкаЗапроса.Статус = Перечисления.СтатусыЗаказа.Закрыт Тогда
		НаборЗаписей = РегистрыСведений.СПУЛЛояльности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументСсылка.Установить(ЗаказСсылка);
		НаборЗаписей.Отбор.Протокол.Установить(ПротоколСсылка);
			
		НаборЗаписей.Прочитать();
		Для каждого ТекущаяЗапись Из НаборЗаписей Цикл
			ТекущаяЗапись.ЗакрытиеЗаказа = Истина;
			ТекущаяЗапись.ОбработатьЗакрытиеЗаказа = Истина;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЕсли;	
	
КонецПроцедуры

Функция СобратьДанныеДляВозврата_Протокол4(ВозвратСсылка, ПротоколСсылка)
	
	Результат = Новый Структура("Возврат, Протокол, Товары");
	
	// Получаем данные протокола
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПротоколРасчетов.Ссылка КАК Ссылка,
	|	ПротоколРасчетов.Номер КАК Номер,
	|	ПротоколРасчетов.Дата КАК Дата,
	|	ПротоколРасчетов.ТипЧекаЛояльность КАК ТипЧекаЛояльность,
	|	ПротоколРасчетов.ИдентификаторЛояльности КАК ИдентификаторЛояльности,
	|	ПротоколРасчетов.НомерСмены КАК НомерСмены,
	|	ПротоколРасчетов.НомерЧека КАК НомерЧека,
	|	ПротоколРасчетов.ККМ.КодСУП КАК ККМ,
	|	ПротоколРасчетов.Фирма.КодТТ КАК МестоРеализации,
	|	ПротоколРасчетов.Автор.КодДоступа КАК КодКассира,
	|	ПротоколРасчетов.СтатусЛояльности КАК СтатусЛояльности
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|ГДЕ
	|	ПротоколРасчетов.Ссылка = &ПротоколСсылка";
	Запрос.УстановитьПараметр("ПротоколСсылка", ПротоколСсылка);
	Результат.Протокол = Запрос.Выполнить().Выбрать();
	Результат.Протокол.Следующий();
	
	// Получаем шапку заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Возврат.Ссылка КАК Ссылка,
	|	Возврат.Номер КАК Номер,
	|	Возврат.Дата КАК Дата,
	|	Возврат.НомерКартыЛояльности КАК НомерКартыЛояльности,
	|	Возврат.Автор.КодДоступа КАК КодКассира
	|ИЗ
	|	Документ.Возврат КАК Возврат
	|ГДЕ
	|	Возврат.Ссылка = &ВозвратСсылка";
	Запрос.УстановитьПараметр("ВозвратСсылка", ВозвратСсылка);
	Результат.Возврат = Запрос.Выполнить().Выбрать();
	Результат.Возврат.Следующий();
	
	// Получаем таблицу заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТовары.НомерСтроки КАК НомерСтроки,
	|	ВозвратТовары.ИдСтроки КАК ИдСтроки,
	|	ВозвратТовары.Товар.Номенклатура.КодСУП КАК Код,
	|	ВозвратТовары.Количество КАК Количество,
	|	ВозвратТовары.ЦенаРозничная КАК Цена,
	|	ВозвратТовары.СуммаРозничная КАК Сумма,
	|	ВозвратТовары.Цена КАК ЦенаФакт,
	|	ВозвратТовары.Сумма КАК СуммаФакт,
	|	ВозвратТовары.Товар.Наименование КАК Наименование,
	|	ВозвратТовары.Товар КАК Товар,
	|	ВозвратТовары.ПДФ КАК ПДФ,
	|	ВозвратТовары.ШК КАК ШК,
	|	ВозвратТовары.ВремяДобавления КАК ВремяДобавления,
	|	ВозвратТовары.Фирма.КодТТ КАК МестоРеализации
	|ИЗ
	|	Документ.Возврат.Товары КАК ВозвратТовары
	|ГДЕ
	|	ВозвратТовары.Ссылка = &ВозвратСсылка
	|	И ВозвратТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	Запрос.УстановитьПараметр("ВозвратСсылка", ВозвратСсылка);
	Результат.Товары = Запрос.Выполнить().Выбрать();
	
	Возврат Результат;
	
КонецФункции

Функция СобратьДанныеДляФинализацииЗаказа_Протокол4(ЗаказСсылка, ПротоколСсылка)
	
	Результат = Новый Структура("Заказ, Протокол, Товары");
	
	// Получаем данные протокола
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПротоколРасчетов.Ссылка КАК Ссылка,
	|	ПротоколРасчетов.Номер КАК Номер,
	|	ПротоколРасчетов.Дата КАК Дата,
	|	ПротоколРасчетов.ТипЧекаЛояльность КАК ТипЧекаЛояльность,
	|	ПротоколРасчетов.ИдентификаторЛояльности КАК ИдентификаторЛояльности,
	|	ПротоколРасчетов.НомерСмены КАК НомерСмены,
	|	ПротоколРасчетов.НомерЧека КАК НомерЧека,
	|	ПротоколРасчетов.ККМ.КодСУП КАК ККМ,
	|	ПротоколРасчетов.Фирма.КодТТ КАК МестоРеализации,
	|	ПротоколРасчетов.Автор.КодДоступа КАК КодКассира,
	|	ПротоколРасчетов.СтатусЛояльности КАК СтатусЛояльности
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|ГДЕ
	|	ПротоколРасчетов.Ссылка = &ПротоколСсылка";
	Запрос.УстановитьПараметр("ПротоколСсылка", ПротоколСсылка);
	Результат.Протокол = Запрос.Выполнить().Выбрать();
	Результат.Протокол.Следующий();
	
	// Получаем шапку заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка,
	|	Заказ.Номер КАК Номер,
	|	Заказ.Дата КАК Дата,
	|	Заказ.НомерКартыЛояльности КАК НомерКартыЛояльности,
	|	Заказ.ТипЧекаЛояльность КАК ТипЧекаЛояльность,
	|	Заказ.Автор.КодДоступа КАК КодКассира
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Заказ = Запрос.Выполнить().Выбрать();
	Результат.Заказ.Следующий();
	
	// Получаем таблицу заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|	ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|	ЗаказТовары.Количество КАК Количество,
	|	ЗаказТовары.Цена КАК Цена,
	|	ЗаказТовары.Количество * ЗаказТовары.Цена КАК Сумма,
	|	ЗаказТовары.ЦенаРеализации КАК ЦенаРеализации,
	|	ЗаказТовары.Количество * ЗаказТовары.ЦенаРеализации КАК СуммаРеализации,
	|	ЗаказТовары.Товар.Наименование КАК Наименование,
	|	ЗаказТовары.Товар КАК Товар,
	|	ЗаказТовары.ПДФ КАК ПДФ,
	|	ЗаказТовары.ШК КАК ШК,
	|	ЗаказТовары.ВремяДобавления КАК ВремяДобавления,
	|	ЗаказТовары.Фирма.КодТТ КАК МестоРеализации
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.Заказ.Товары КАК ЗаказТовары
	|ГДЕ
	|	ЗаказТовары.Ссылка = &ЗаказСсылка
	|	И ЗаказТовары.ДокументОплаты = &ПротоколСсылка
	|	И ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
	|	ЗаказСпецифики.ИдСтроки КАК ИдСтроки,
	|	ЗаказСпецифики.Специфика.Номенклатура.КодСУП КАК Код,
	|	ЗаказСпецифики.Цена КАК Цена,
	|	ЗаказСпецифики.ЦенаРеализации КАК ЦенаРеализации,
	|	ЗаказСпецифики.Специфика.Наименование КАК Наименование,
	|	ЗаказСпецифики.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаСпецифик
	|ИЗ
	|	Документ.Заказ.Специфики КАК ЗаказСпецифики
	|ГДЕ
	|	ЗаказСпецифики.Ссылка = &ЗаказСсылка
	|	И ЗаказСпецифики.Специфика.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ИтоговаяТаблица.ИдСтроки КАК ИдСтроки,
	|	ИтоговаяТаблица.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	ИтоговаяТаблица.Код КАК Код,
	|	ИтоговаяТаблица.Количество КАК Количество,
	|	ИтоговаяТаблица.Цена КАК Цена,
	|	ИтоговаяТаблица.Сумма КАК Сумма,
	|	ИтоговаяТаблица.ЦенаФакт КАК ЦенаФакт,
	|	ИтоговаяТаблица.СуммаФакт КАК СуммаФакт,
	|	ИтоговаяТаблица.Наименование КАК Наименование,
	|	ИтоговаяТаблица.Товар КАК Товар,
	|	ИтоговаяТаблица.Специфика КАК Специфика,
	|	ИтоговаяТаблица.НомерСтрокиСпец КАК НомерСтрокиСпец,
	|	ИтоговаяТаблица.ПДФ КАК ПДФ,
	|	ИтоговаяТаблица.ШК КАК ШК,
	|	ИтоговаяТаблица.МестоРеализации КАК МестоРеализации,
	|	ИтоговаяТаблица.ВремяДобавления КАК ВремяДобавления
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.ИдСтроки КАК ИдСтроки,
	|		NULL КАК ИдСтрокиТовара,
	|		ТаблицаТовары.Код КАК Код,
	|		ТаблицаТовары.Количество КАК Количество,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.ЦенаРеализации КАК ЦенаФакт,
	|		ТаблицаТовары.СуммаРеализации КАК СуммаФакт,
	|		ТаблицаТовары.Наименование КАК Наименование,
	|		ТаблицаТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	|		ТаблицаТовары.ПДФ КАК ПДФ,
	|		ТаблицаТовары.ШК КАК ШК,
	|		ТаблицаТовары.МестоРеализации КАК МестоРеализации,
	|		ТаблицаТовары.ВремяДобавления КАК ВремяДобавления
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСпецифик.НомерСтрокиТовара,
	|		ТаблицаСпецифик.ИдСтроки,
	|		ТаблицаТовары.ИдСтроки,
	|		ТаблицаСпецифик.Код,
	|		ТаблицаТовары.Количество,
	|		ТаблицаСпецифик.Цена,
	|		ТаблицаСпецифик.Цена,
	|		ТаблицаСпецифик.ЦенаРеализации,
	|		ТаблицаСпецифик.ЦенаРеализации,
	|		ТаблицаСпецифик.Наименование,
	|		NULL,
	|		1,
	|		ТаблицаСпецифик.НомерСтроки,
	|		"""",
	|		"""",
	|		ТаблицаТовары.МестоРеализации,
	|		ТаблицаТовары.ВремяДобавления
	|	ИЗ
	|		ТаблицаСпецифик КАК ТаблицаСпецифик
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|			ПО ТаблицаСпецифик.НомерСтрокиТовара = ТаблицаТовары.НомерСтроки) КАК ИтоговаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСпецифик";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Запрос.УстановитьПараметр("ПротоколСсылка", ПротоколСсылка);
	Результат.Товары = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьДанныеДляЗакрытияЗаказа_Протокол5(ЗаказСсылка) Экспорт
	
	Результат = Новый Структура("Заказ, СписокПротоколов, Товары, Купоны");
	
	// Получаем список идентификаторов всех протоколов оплаты по заказу
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПротоколРасчетов.Номер КАК Номер,
	|	ПротоколРасчетов.Дата КАК Дата,
	|	ПротоколРасчетов.ТипЧекаЛояльность КАК ТипЧекаЛояльность,
	|	ПротоколРасчетов.ИдентификаторЛояльности КАК ИдентификаторЛояльности,
	|	ПротоколРасчетов.НомерСмены КАК НомерСмены,
	|	ПротоколРасчетов.НомерЧека КАК НомерЧека,
	|	ПротоколРасчетов.ККМ.КодСУП КАК ККМ,
	|	ПротоколРасчетов.Фирма.КодТТ КАК МестоРеализации,
	|	ПротоколРасчетов.Автор.КодДоступа КАК КодКассира,
	|	ПротоколРасчетов.СтатусЛояльности КАК СтатусЛояльности,
	|	ЗаказТовары.ДокументОплаты КАК Ссылка
	|ИЗ
	|	Документ.Заказ.Товары КАК ЗаказТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|		ПО ЗаказТовары.ДокументОплаты = ПротоколРасчетов.Ссылка
	|ГДЕ
	|	ЗаказТовары.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.СписокПротоколов = Запрос.Выполнить().Выгрузить();
			
	// Получаем купоны заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКупоны.Купон КАК Купон,
	|	ЗаказКупоны.ТипКупона КАК ТипКупона,
	|	ЗаказКупоны.СтатусКупона КАК СтатусКупона,
	|	ЗаказКупоны.Наименование КАК Наименование
	|ИЗ
	|	Документ.Заказ.Купоны КАК ЗаказКупоны
	|ГДЕ
	|	ЗаказКупоны.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Купоны = Запрос.Выполнить().Выгрузить();
		
	// Получаем шапку заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка,
	|	Заказ.Номер КАК Номер,
	|	Заказ.Дата КАК Дата,
	|	Заказ.НомерКартыЛояльности КАК НомерКартыЛояльности,
	|	Заказ.Автор.КодДоступа КАК КодКассира
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Заказ = Запрос.Выполнить().Выбрать();
	Результат.Заказ.Следующий();
	
	// Получаем таблицу заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|	ЗаказТовары.Фирма.КодТТ КАК МестоРеализации,
	|	ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|	ЗаказТовары.Количество КАК Количество,
	|	ЗаказТовары.Цена КАК Цена,
	|	ЗаказТовары.Количество * ЗаказТовары.Цена КАК Сумма,
	|	ЗаказТовары.ЦенаРеализации КАК ЦенаРеализации,
	|	ЗаказТовары.Количество * ЗаказТовары.ЦенаРеализации КАК СуммаРеализации,
	|	ЗаказТовары.Товар.Наименование КАК Наименование,
	|	ЗаказТовары.Товар КАК Товар,
	|	ЗаказТовары.ПДФ КАК ПДФ,
	|	ЗаказТовары.ШК КАК ШК,
	|	ЗаказТовары.ВремяДобавления КАК ВремяДобавления,
	|	ЗаказТовары.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ЗаказТовары.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ЗаказТовары.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ЗаказТовары.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции,
	|	ПротоколРасчетов.ИдентификаторЛояльности КАК ИдентификаторЛояльности
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.Заказ.Товары КАК ЗаказТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|		ПО ЗаказТовары.ДокументОплаты = ПротоколРасчетов.Ссылка
	|ГДЕ
	|	ЗаказТовары.Ссылка = &ЗаказСсылка
	|	И ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
	|	ЗаказСпецифики.ИдСтроки КАК ИдСтроки,
	|	ЗаказСпецифики.Специфика.Номенклатура.КодСУП КАК Код,
	|	ЗаказСпецифики.Цена КАК Цена,
	|	ЗаказСпецифики.ЦенаРеализации КАК ЦенаРеализации,
	|	ЗаказСпецифики.Специфика.Наименование КАК Наименование,
	|	ЗаказСпецифики.НомерСтроки КАК НомерСтроки,
	|	ЗаказСпецифики.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ЗаказСпецифики.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ЗаказСпецифики.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ЗаказСпецифики.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ПОМЕСТИТЬ ТаблицаСпецифик
	|ИЗ
	|	Документ.Заказ.Специфики КАК ЗаказСпецифики
	|ГДЕ
	|	ЗаказСпецифики.Ссылка = &ЗаказСсылка
	|	И ЗаказСпецифики.Специфика.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ИтоговаяТаблица.ИдСтроки КАК ИдСтроки,
	|	ИтоговаяТаблица.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	ИтоговаяТаблица.Код КАК Код,
	|	ИтоговаяТаблица.Количество КАК Количество,
	|	ИтоговаяТаблица.Цена КАК Цена,
	|	ИтоговаяТаблица.Сумма КАК Сумма,
	|	ИтоговаяТаблица.ЦенаФакт КАК ЦенаФакт,
	|	ИтоговаяТаблица.СуммаФакт КАК СуммаФакт,
	|	ИтоговаяТаблица.Наименование КАК Наименование,
	|	ИтоговаяТаблица.Товар КАК Товар,
	|	ИтоговаяТаблица.Специфика КАК Специфика,
	|	ИтоговаяТаблица.НомерСтрокиСпец КАК НомерСтрокиСпец,
	|	ИтоговаяТаблица.ПДФ КАК ПДФ,
	|	ИтоговаяТаблица.ШК КАК ШК,
	|	ИтоговаяТаблица.МестоРеализации КАК МестоРеализации,
	|	ИтоговаяТаблица.ВремяДобавления КАК ВремяДобавления,
	|	ИтоговаяТаблица.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ИтоговаяТаблица.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ИтоговаяТаблица.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ИтоговаяТаблица.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции,
	|	ИтоговаяТаблица.ИдентификаторЛояльности КАК ИдентификаторЛояльности
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.ИдСтроки КАК ИдСтроки,
	|		NULL КАК ИдСтрокиТовара,
	|		ТаблицаТовары.Код КАК Код,
	|		ТаблицаТовары.Количество КАК Количество,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.ЦенаРеализации КАК ЦенаФакт,
	|		ТаблицаТовары.СуммаРеализации КАК СуммаФакт,
	|		ТаблицаТовары.Наименование КАК Наименование,
	|		ТаблицаТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	|		ТаблицаТовары.ПДФ КАК ПДФ,
	|		ТаблицаТовары.ШК КАК ШК,
	|		ТаблицаТовары.МестоРеализации КАК МестоРеализации,
	|		ТаблицаТовары.ВремяДобавления КАК ВремяДобавления,
	|		ТаблицаТовары.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|		ТаблицаТовары.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|		ТаблицаТовары.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|		ТаблицаТовары.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции,
	|		ТаблицаТовары.ИдентификаторЛояльности КАК ИдентификаторЛояльности
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСпецифик.НомерСтрокиТовара,
	|		ТаблицаСпецифик.ИдСтроки,
	|		ТаблицаТовары.ИдСтроки,
	|		ТаблицаСпецифик.Код,
	|		ТаблицаТовары.Количество,
	|		ТаблицаСпецифик.Цена,
	|		ТаблицаСпецифик.Цена,
	|		ТаблицаСпецифик.ЦенаРеализации,
	|		ТаблицаСпецифик.ЦенаРеализации,
	|		ТаблицаСпецифик.Наименование,
	|		NULL,
	|		1,
	|		ТаблицаСпецифик.НомерСтроки,
	|		"""",
	|		"""",
	|		ТаблицаТовары.МестоРеализации,
	|		ТаблицаТовары.ВремяДобавления,
	|		ТаблицаСпецифик.ЛояльностьСтатус,
	|		ТаблицаСпецифик.ЛояльностьСтатусАкции,
	|		ТаблицаСпецифик.ЛояльностьДопСтатусАкции,
	|		ТаблицаСпецифик.ЛояльностьГруппаАкции,
	|		ТаблицаТовары.ИдентификаторЛояльности
	|	ИЗ
	|		ТаблицаСпецифик КАК ТаблицаСпецифик
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|			ПО ТаблицаСпецифик.НомерСтрокиТовара = ТаблицаТовары.НомерСтроки) КАК ИтоговаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСпецифик";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Товары = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьДанныеДляЗакрытияЗаказа_Протокол4(ЗаказСсылка, ПротоколСсылка) Экспорт
	
	Результат = Новый Структура("Заказ, СписокПротоколов, Протокол, Товары, Купоны");
	
	// Получаем данные протокола
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПротоколРасчетов.Ссылка КАК Ссылка,
	|	ПротоколРасчетов.Номер КАК Номер,
	|	ПротоколРасчетов.Дата КАК Дата,
	|	ПротоколРасчетов.ТипЧекаЛояльность КАК ТипЧекаЛояльность,
	|	ПротоколРасчетов.ИдентификаторЛояльности КАК ИдентификаторЛояльности,
	|	ПротоколРасчетов.НомерСмены КАК НомерСмены,
	|	ПротоколРасчетов.НомерЧека КАК НомерЧека,
	|	ПротоколРасчетов.ККМ.КодСУП КАК ККМ,
	|	ПротоколРасчетов.Фирма.КодТТ КАК МестоРеализации,
	|	ПротоколРасчетов.Автор.КодДоступа КАК КодКассира,
	|	ПротоколРасчетов.СтатусЛояльности КАК СтатусЛояльности
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|ГДЕ
	|	ПротоколРасчетов.Ссылка = &ПротоколСсылка";
	Запрос.УстановитьПараметр("ПротоколСсылка", ПротоколСсылка);
	Результат.Протокол = Запрос.Выполнить().Выбрать();
	Результат.Протокол.Следующий();
	
	// Получаем список идентификаторов всех протоколов оплаты по заказу
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СПУЛЛояльности.Протокол.ИдентификаторЛояльности КАК ИдентификаторЛояльности,
	|	СПУЛЛояльности.Протокол.ТипЧекаЛояльность КАК ТипЧека
	|ИЗ
	|	РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|ГДЕ
	|	СПУЛЛояльности.ДокументСсылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.СписокПротоколов = Запрос.Выполнить().Выгрузить();
		
	// Получаем купоны заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКупоны.Купон КАК Купон,
	|	ЗаказКупоны.ТипКупона КАК ТипКупона,
	|	ЗаказКупоны.СтатусКупона КАК СтатусКупона,
	|	ЗаказКупоны.Наименование КАК Наименование
	|ИЗ
	|	Документ.Заказ.Купоны КАК ЗаказКупоны
	|ГДЕ
	|	ЗаказКупоны.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Купоны = Запрос.Выполнить().Выгрузить();
		
	// Получаем шапку заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка,
	|	Заказ.Номер КАК Номер,
	|	Заказ.Дата КАК Дата,
	|	Заказ.НомерКартыЛояльности КАК НомерКартыЛояльности,
	|	Заказ.ТипЧекаЛояльность КАК ТипЧекаЛояльность,
	|	Заказ.Автор.КодДоступа КАК КодКассира
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Заказ = Запрос.Выполнить().Выбрать();
	Результат.Заказ.Следующий();
	
	// Получаем таблицу заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|	ЗаказТовары.Фирма.КодТТ КАК МестоРеализации,
	|	ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|	ЗаказТовары.Количество КАК Количество,
	|	ЗаказТовары.Цена КАК Цена,
	|	ЗаказТовары.Количество * ЗаказТовары.Цена КАК Сумма,
	|	ЗаказТовары.ЦенаРеализации КАК ЦенаРеализации,
	|	ЗаказТовары.Количество * ЗаказТовары.ЦенаРеализации КАК СуммаРеализации,
	|	ЗаказТовары.Товар.Наименование КАК Наименование,
	|	ЗаказТовары.Товар КАК Товар,
	|	ЗаказТовары.ПДФ КАК ПДФ,
	|	ЗаказТовары.ШК КАК ШК,
	|	ЗаказТовары.ВремяДобавления КАК ВремяДобавления,
	|	ЗаказТовары.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ЗаказТовары.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ЗаказТовары.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ЗаказТовары.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.Заказ.Товары КАК ЗаказТовары
	|ГДЕ
	|	ЗаказТовары.Ссылка = &ЗаказСсылка
	|	И ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
	|	ЗаказСпецифики.ИдСтроки КАК ИдСтроки,
	|	ЗаказСпецифики.Специфика.Номенклатура.КодСУП КАК Код,
	|	ЗаказСпецифики.Цена КАК Цена,
	|	ЗаказСпецифики.ЦенаРеализации КАК ЦенаРеализации,
	|	ЗаказСпецифики.Специфика.Наименование КАК Наименование,
	|	ЗаказСпецифики.НомерСтроки КАК НомерСтроки,
	|	ЗаказСпецифики.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ЗаказСпецифики.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ЗаказСпецифики.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ЗаказСпецифики.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ПОМЕСТИТЬ ТаблицаСпецифик
	|ИЗ
	|	Документ.Заказ.Специфики КАК ЗаказСпецифики
	|ГДЕ
	|	ЗаказСпецифики.Ссылка = &ЗаказСсылка
	|	И ЗаказСпецифики.Специфика.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ИтоговаяТаблица.ИдСтроки КАК ИдСтроки,
	|	ИтоговаяТаблица.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	ИтоговаяТаблица.Код КАК Код,
	|	ИтоговаяТаблица.Количество КАК Количество,
	|	ИтоговаяТаблица.Цена КАК Цена,
	|	ИтоговаяТаблица.Сумма КАК Сумма,
	|	ИтоговаяТаблица.ЦенаФакт КАК ЦенаФакт,
	|	ИтоговаяТаблица.СуммаФакт КАК СуммаФакт,
	|	ИтоговаяТаблица.Наименование КАК Наименование,
	|	ИтоговаяТаблица.Товар КАК Товар,
	|	ИтоговаяТаблица.Специфика КАК Специфика,
	|	ИтоговаяТаблица.НомерСтрокиСпец КАК НомерСтрокиСпец,
	|	ИтоговаяТаблица.ПДФ КАК ПДФ,
	|	ИтоговаяТаблица.ШК КАК ШК,
	|	ИтоговаяТаблица.МестоРеализации КАК МестоРеализации,
	|	ИтоговаяТаблица.ВремяДобавления КАК ВремяДобавления,
	|	ИтоговаяТаблица.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ИтоговаяТаблица.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ИтоговаяТаблица.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ИтоговаяТаблица.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.ИдСтроки КАК ИдСтроки,
	|		NULL КАК ИдСтрокиТовара,
	|		ТаблицаТовары.Код КАК Код,
	|		ТаблицаТовары.Количество КАК Количество,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.ЦенаРеализации КАК ЦенаФакт,
	|		ТаблицаТовары.СуммаРеализации КАК СуммаФакт,
	|		ТаблицаТовары.Наименование КАК Наименование,
	|		ТаблицаТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	|		ТаблицаТовары.ПДФ КАК ПДФ,
	|		ТаблицаТовары.ШК КАК ШК,
	|		ТаблицаТовары.МестоРеализации КАК МестоРеализации,
	|		ТаблицаТовары.ВремяДобавления КАК ВремяДобавления,
	|		ТаблицаТовары.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|		ТаблицаТовары.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|		ТаблицаТовары.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|		ТаблицаТовары.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСпецифик.НомерСтрокиТовара,
	|		ТаблицаСпецифик.ИдСтроки,
	|		ТаблицаТовары.ИдСтроки,
	|		ТаблицаСпецифик.Код,
	|		ТаблицаТовары.Количество,
	|		ТаблицаСпецифик.Цена,
	|		ТаблицаСпецифик.Цена,
	|		ТаблицаСпецифик.ЦенаРеализации,
	|		ТаблицаСпецифик.ЦенаРеализации,
	|		ТаблицаСпецифик.Наименование,
	|		NULL,
	|		1,
	|		ТаблицаСпецифик.НомерСтроки,
	|		"""",
	|		"""",
	|		ТаблицаТовары.МестоРеализации,
	|		ТаблицаТовары.ВремяДобавления,
	|		ТаблицаСпецифик.ЛояльностьСтатус,
	|		ТаблицаСпецифик.ЛояльностьСтатусАкции,
	|		ТаблицаСпецифик.ЛояльностьДопСтатусАкции,
	|		ТаблицаСпецифик.ЛояльностьГруппаАкции
	|	ИЗ
	|		ТаблицаСпецифик КАК ТаблицаСпецифик
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|			ПО ТаблицаСпецифик.НомерСтрокиТовара = ТаблицаТовары.НомерСтроки) КАК ИтоговаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСпецифик";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Запрос.УстановитьПараметр("ПротоколСсылка", ПротоколСсылка);
	Результат.Товары = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьДанныеДляПредварительногоРасчетаЗаказа_Протокол5(ЗаказСсылка) Экспорт
	
	Результат = Новый Структура("Заказ, Товары, Купоны");
	
	// Получаем шапку заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка,
	|	Заказ.Номер КАК Номер,
	|	Заказ.Дата КАК Дата,
	|	Заказ.НомерКартыЛояльности КАК НомерКартыЛояльности,
	|	Заказ.ТипЧекаЛояльность КАК ТипЧекаЛояльность,
	|	Заказ.Автор.КодДоступа КАК КодКассира
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Заказ = Запрос.Выполнить().Выбрать();
	Результат.Заказ.Следующий();
	
	// Получаем купоны заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКупоны.Купон КАК Купон,
	|	ЗаказКупоны.ТипКупона КАК ТипКупона,
	|	ЗаказКупоны.СтатусКупона КАК СтатусКупона,
	|	ЗаказКупоны.Наименование КАК Наименование
	|ИЗ
	|	Документ.Заказ.Купоны КАК ЗаказКупоны
	|ГДЕ
	|	ЗаказКупоны.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Купоны = Запрос.Выполнить().Выгрузить();
	
	АкцииПоЗаказу = ПолучитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "ACTIONS");
	Для каждого ТекущийКупон Из АкцииПоЗаказу.Купоны Цикл
		ПоискДублей = Результат.Купоны.Найти(ТекущийКупон.Код, "Купон");
		Если ПоискДублей <> Неопределено Тогда
			Если ПоискДублей.СтатусКупона <> 3 Тогда
				// Если купон не погашен, то статус берем из регистра
				ПоискДублей.СтатусКупона = ТекущийКупон.Статус;
			КонецЕсли;
		Иначе
			НоваяСтрока = Результат.Купоны.Добавить();
			НоваяСтрока.Купон = ТекущийКупон.Код;
			НоваяСтрока.ТипКупона = ТекущийКупон.Тип;
			НоваяСтрока.Наименование = ТекущийКупон.Наименование;
			НоваяСтрока.СтатусКупона = ТекущийКупон.Статус;
		КонецЕсли;		
	КонецЦикла;
			
	// Получаем таблицу заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|	ЗаказТовары.Фирма.КодТТ КАК МестоРеализации,
	|	ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|	ЗаказТовары.Количество КАК Количество,
	|	ЗаказТовары.Цена КАК Цена,
	|	ЗаказТовары.Количество * ЗаказТовары.Цена КАК Сумма,
	|	ЗаказТовары.ЦенаРеализации КАК ЦенаРеализации,
	|	ЗаказТовары.Количество * ЗаказТовары.ЦенаРеализации КАК СуммаРеализации,
	|	ЗаказТовары.Товар.Наименование КАК Наименование,
	|	ЗаказТовары.Товар КАК Товар,
	|	ЗаказТовары.ПДФ КАК ПДФ,
	|	ЗаказТовары.ШК КАК ШК,
	|	ЗаказТовары.ДокументОплаты КАК ДокументОплаты,
	|	ЗаказТовары.ВремяДобавления КАК ВремяДобавления,
	|	ЗаказТовары.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ЗаказТовары.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ЗаказТовары.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ЗаказТовары.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.Заказ.Товары КАК ЗаказТовары
	|ГДЕ
	|	ЗаказТовары.Ссылка = &ЗаказСсылка
	|	И ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
	|	ЗаказСпецифики.ИдСтроки КАК ИдСтроки,
	|	ЗаказСпецифики.Специфика.Номенклатура.КодСУП КАК Код,
	|	ЗаказСпецифики.Цена КАК Цена,
	|	ЗаказСпецифики.ЦенаРеализации КАК ЦенаРеализации,
	|	ЗаказСпецифики.Специфика.Наименование КАК Наименование,
	|	ЗаказСпецифики.НомерСтроки КАК НомерСтроки,
	|	ЗаказСпецифики.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ЗаказСпецифики.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ЗаказСпецифики.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ЗаказСпецифики.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ПОМЕСТИТЬ ТаблицаСпецифик
	|ИЗ
	|	Документ.Заказ.Специфики КАК ЗаказСпецифики
	|ГДЕ
	|	ЗаказСпецифики.Ссылка = &ЗаказСсылка
	|	И ЗаказСпецифики.Специфика.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ИтоговаяТаблица.ИдСтроки КАК ИдСтроки,
	|	ИтоговаяТаблица.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	ИтоговаяТаблица.Код КАК Код,
	|	ИтоговаяТаблица.Количество КАК Количество,
	|	ИтоговаяТаблица.Цена КАК Цена,
	|	ИтоговаяТаблица.Сумма КАК Сумма,
	|	ИтоговаяТаблица.ЦенаФакт КАК ЦенаФакт,
	|	ИтоговаяТаблица.СуммаФакт КАК СуммаФакт,
	|	ИтоговаяТаблица.Наименование КАК Наименование,
	|	ИтоговаяТаблица.Товар КАК Товар,
	|	ИтоговаяТаблица.Специфика КАК Специфика,
	|	ИтоговаяТаблица.НомерСтрокиСпец КАК НомерСтрокиСпец,
	|	ИтоговаяТаблица.ПДФ КАК ПДФ,
	|	ИтоговаяТаблица.ШК КАК ШК,
	|	ИтоговаяТаблица.МестоРеализации КАК МестоРеализации,
	|	ИтоговаяТаблица.ДокументОплаты КАК ДокументОплаты,
	|	ИтоговаяТаблица.ВремяДобавления КАК ВремяДобавления,
	|	ИтоговаяТаблица.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ИтоговаяТаблица.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ИтоговаяТаблица.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ИтоговаяТаблица.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.ИдСтроки КАК ИдСтроки,
	|		NULL КАК ИдСтрокиТовара,
	|		ТаблицаТовары.Код КАК Код,
	|		ТаблицаТовары.Количество КАК Количество,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.ЦенаРеализации КАК ЦенаФакт,
	|		ТаблицаТовары.СуммаРеализации КАК СуммаФакт,
	|		ТаблицаТовары.Наименование КАК Наименование,
	|		ТаблицаТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	|		ТаблицаТовары.ПДФ КАК ПДФ,
	|		ТаблицаТовары.ШК КАК ШК,
	|		ТаблицаТовары.МестоРеализации КАК МестоРеализации,
	|		ТаблицаТовары.ДокументОплаты КАК ДокументОплаты,
	|		ТаблицаТовары.ВремяДобавления КАК ВремяДобавления,
	|		ТаблицаТовары.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|		ТаблицаТовары.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|		ТаблицаТовары.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|		ТаблицаТовары.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСпецифик.НомерСтрокиТовара,
	|		ТаблицаСпецифик.ИдСтроки,
	|		ТаблицаТовары.ИдСтроки,
	|		ТаблицаСпецифик.Код,
	|		ТаблицаТовары.Количество,
	|		ТаблицаСпецифик.Цена,
	|		ТаблицаСпецифик.Цена,
	|		ТаблицаСпецифик.ЦенаРеализации,
	|		ТаблицаСпецифик.ЦенаРеализации,
	|		ТаблицаСпецифик.Наименование,
	|		NULL,
	|		1,
	|		ТаблицаСпецифик.НомерСтроки,
	|		"""",
	|		"""",
	|		ТаблицаТовары.МестоРеализации,
	|		ТаблицаТовары.ДокументОплаты,
	|		ТаблицаТовары.ВремяДобавления,
	|		ТаблицаСпецифик.ЛояльностьСтатус,
	|		ТаблицаСпецифик.ЛояльностьСтатусАкции,
	|		ТаблицаСпецифик.ЛояльностьДопСтатусАкции,
	|		ТаблицаСпецифик.ЛояльностьГруппаАкции
	|	ИЗ
	|		ТаблицаСпецифик КАК ТаблицаСпецифик
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|			ПО ТаблицаСпецифик.НомерСтрокиТовара = ТаблицаТовары.НомерСтроки) КАК ИтоговаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСпецифик";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Товары = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Результат;
	
КонецФункции

Функция СобратьДанныеДляПредварительногоРасчетаЗаказа_Протокол4(ЗаказСсылка) Экспорт
	
	Результат = Новый Структура("Заказ, Товары, Купоны");
	
	// Получаем шапку заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.Ссылка КАК Ссылка,
	|	Заказ.Номер КАК Номер,
	|	Заказ.Дата КАК Дата,
	|	Заказ.НомерКартыЛояльности КАК НомерКартыЛояльности,
	|	Заказ.ТипЧекаЛояльность КАК ТипЧекаЛояльность,
	|	Заказ.Автор.КодДоступа КАК КодКассира
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Заказ = Запрос.Выполнить().Выбрать();
	Результат.Заказ.Следующий();
	
	// Получаем купоны заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказКупоны.Купон КАК Купон,
	|	ЗаказКупоны.ТипКупона КАК ТипКупона,
	|	ЗаказКупоны.СтатусКупона КАК СтатусКупона,
	|	ЗаказКупоны.Наименование КАК Наименование
	|ИЗ
	|	Документ.Заказ.Купоны КАК ЗаказКупоны
	|ГДЕ
	|	ЗаказКупоны.Ссылка = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Купоны = Запрос.Выполнить().Выгрузить();
			
	// Получаем таблицу заказа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
	|	ЗаказТовары.ИдСтроки КАК ИдСтроки,
	|	ЗаказТовары.Фирма.КодТТ КАК МестоРеализации,
	|	ЗаказТовары.Товар.Номенклатура.КодСУП КАК Код,
	|	ЗаказТовары.Количество КАК Количество,
	|	ЗаказТовары.Цена КАК Цена,
	|	ЗаказТовары.Количество * ЗаказТовары.Цена КАК Сумма,
	|	ЗаказТовары.ЦенаРеализации КАК ЦенаРеализации,
	|	ЗаказТовары.Количество * ЗаказТовары.ЦенаРеализации КАК СуммаРеализации,
	|	ЗаказТовары.Товар.Наименование КАК Наименование,
	|	ЗаказТовары.Товар КАК Товар,
	|	ЗаказТовары.ПДФ КАК ПДФ,
	|	ЗаказТовары.ШК КАК ШК,
	|	ЗаказТовары.ДокументОплаты КАК ДокументОплаты,
	|	ЗаказТовары.ВремяДобавления КАК ВремяДобавления,
	|	ЗаказТовары.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ЗаказТовары.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ЗаказТовары.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ЗаказТовары.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	Документ.Заказ.Товары КАК ЗаказТовары
	|ГДЕ
	|	ЗаказТовары.Ссылка = &ЗаказСсылка
	|	И ЗаказТовары.Товар.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
	|	ЗаказСпецифики.ИдСтроки КАК ИдСтроки,
	|	ЗаказСпецифики.Специфика.Номенклатура.КодСУП КАК Код,
	|	ЗаказСпецифики.Цена КАК Цена,
	|	ЗаказСпецифики.ЦенаРеализации КАК ЦенаРеализации,
	|	ЗаказСпецифики.Специфика.Наименование КАК Наименование,
	|	ЗаказСпецифики.НомерСтроки КАК НомерСтроки,
	|	ЗаказСпецифики.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ЗаказСпецифики.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ЗаказСпецифики.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ЗаказСпецифики.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ПОМЕСТИТЬ ТаблицаСпецифик
	|ИЗ
	|	Документ.Заказ.Специфики КАК ЗаказСпецифики
	|ГДЕ
	|	ЗаказСпецифики.Ссылка = &ЗаказСсылка
	|	И ЗаказСпецифики.Специфика.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТаблица.НомерСтроки КАК НомерСтроки,
	|	ИтоговаяТаблица.ИдСтроки КАК ИдСтроки,
	|	ИтоговаяТаблица.ИдСтрокиТовара КАК ИдСтрокиТовара,
	|	ИтоговаяТаблица.Код КАК Код,
	|	ИтоговаяТаблица.Количество КАК Количество,
	|	ИтоговаяТаблица.Цена КАК Цена,
	|	ИтоговаяТаблица.Сумма КАК Сумма,
	|	ИтоговаяТаблица.ЦенаФакт КАК ЦенаФакт,
	|	ИтоговаяТаблица.СуммаФакт КАК СуммаФакт,
	|	ИтоговаяТаблица.Наименование КАК Наименование,
	|	ИтоговаяТаблица.Товар КАК Товар,
	|	ИтоговаяТаблица.Специфика КАК Специфика,
	|	ИтоговаяТаблица.НомерСтрокиСпец КАК НомерСтрокиСпец,
	|	ИтоговаяТаблица.ПДФ КАК ПДФ,
	|	ИтоговаяТаблица.ШК КАК ШК,
	|	ИтоговаяТаблица.МестоРеализации КАК МестоРеализации,
	|	ИтоговаяТаблица.ДокументОплаты КАК ДокументОплаты,
	|	ИтоговаяТаблица.ВремяДобавления КАК ВремяДобавления,
	|	ИтоговаяТаблица.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|	ИтоговаяТаблица.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|	ИтоговаяТаблица.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|	ИтоговаяТаблица.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.ИдСтроки КАК ИдСтроки,
	|		NULL КАК ИдСтрокиТовара,
	|		ТаблицаТовары.Код КАК Код,
	|		ТаблицаТовары.Количество КАК Количество,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.ЦенаРеализации КАК ЦенаФакт,
	|		ТаблицаТовары.СуммаРеализации КАК СуммаФакт,
	|		ТаблицаТовары.Наименование КАК Наименование,
	|		ТаблицаТовары.Товар КАК Товар,
	|		0 КАК Специфика,
	|		NULL КАК НомерСтрокиСпец,
	|		ТаблицаТовары.ПДФ КАК ПДФ,
	|		ТаблицаТовары.ШК КАК ШК,
	|		ТаблицаТовары.МестоРеализации КАК МестоРеализации,
	|		ТаблицаТовары.ДокументОплаты КАК ДокументОплаты,
	|		ТаблицаТовары.ВремяДобавления КАК ВремяДобавления,
	|		ТаблицаТовары.ЛояльностьСтатус КАК ЛояльностьСтатус,
	|		ТаблицаТовары.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
	|		ТаблицаТовары.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
	|		ТаблицаТовары.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
	|	ИЗ
	|		ТаблицаТовары КАК ТаблицаТовары
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаСпецифик.НомерСтрокиТовара,
	|		ТаблицаСпецифик.ИдСтроки,
	|		ТаблицаТовары.ИдСтроки,
	|		ТаблицаСпецифик.Код,
	|		ТаблицаТовары.Количество,
	|		ТаблицаСпецифик.Цена,
	|		ТаблицаСпецифик.Цена,
	|		ТаблицаСпецифик.ЦенаРеализации,
	|		ТаблицаСпецифик.ЦенаРеализации,
	|		ТаблицаСпецифик.Наименование,
	|		NULL,
	|		1,
	|		ТаблицаСпецифик.НомерСтроки,
	|		"""",
	|		"""",
	|		ТаблицаТовары.МестоРеализации,
	|		ТаблицаТовары.ДокументОплаты,
	|		ТаблицаТовары.ВремяДобавления,
	|		ТаблицаСпецифик.ЛояльностьСтатус,
	|		ТаблицаСпецифик.ЛояльностьСтатусАкции,
	|		ТаблицаСпецифик.ЛояльностьДопСтатусАкции,
	|		ТаблицаСпецифик.ЛояльностьГруппаАкции
	|	ИЗ
	|		ТаблицаСпецифик КАК ТаблицаСпецифик
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТовары КАК ТаблицаТовары
	|			ПО ТаблицаСпецифик.НомерСтрокиТовара = ТаблицаТовары.НомерСтроки) КАК ИтоговаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Товар УБЫВ
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(Сумма),
	|	МАКСИМУМ(Товар)
	|ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаСпецифик";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Результат.Товары = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Результат;
	
КонецФункции

Процедура ФинализацияЧека(ЗаказСсылка, ПротоколСсылка = Неопределено, РежимСПУЛ = Ложь, ЗаписьЛога = "") Экспорт
	
	РабочееМесто = ПолучитьРабочееМестоЗаказа(ЗаказСсылка);
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(РабочееМесто);
	ВерсияЛояльности = ПолучитьВерсиюЛояльностиРабочегоМеста(РабочееМесто);
	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	Если ВерсияПротокола < 3 Тогда
		ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
		ФинализацияЧека_Протокол2(ЗаказОбъект, РежимСПУЛ, ЗаписьЛога, Тест);
	ИначеЕсли ВерсияПротокола = 3 Тогда
		ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
		ФинализацияЧека_Протокол3(ЗаказОбъект, РежимСПУЛ, ЗаписьЛога, Тест);
	ИначеЕсли ВерсияПротокола = 4 Тогда
		ФинализацияЧека_Протокол4(ЗаказСсылка, ПротоколСсылка, РежимСПУЛ, ЗаписьЛога, Тест);
	ИначеЕсли ВерсияПротокола = 5 Тогда
		ФинализацияЧека_Протокол5(ЗаказСсылка, ПротоколСсылка, РежимСПУЛ, ЗаписьЛога, Тест);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФинализацияЧека_Протокол5(ЗаказСсылка, ПротоколСсылка, РежимСПУЛ = Ложь, ЗаписьЛога = "", Тест=Ложь)
	
	Данные = СобратьДанныеДляФинализацииЗаказа_Протокол4(ЗаказСсылка, ПротоколСсылка);
	
	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;начало (заказ="+Данные.Заказ.Номер+", РежимСПУЛ="+РежимСПУЛ+")";
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = СформироватьJSONДляФинализацииЗаказа_Протокол5(Данные,, Тест);
		
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Лояльность.Финализация чека", УровеньЖурналаРегистрации.Ошибка,, ЗаказСсылка,"ОписаниеОшибки=ошибка формирования JSON");
	Иначе		
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если НЕ ОтправкаУспешна Тогда
		// сервис недоступен или не смог обработать запрос
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		
		ЗарегистрироватьСобытие("Лояльность.Финализация чек", УровеньЖурналаРегистрации.Ошибка, , ЗаказСсылка,"ОписаниеОшибки="+ОписаниеОшибки);
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка отправки (ответ="+ОписаниеОшибки+")";
	Иначе
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ЗарегистрироватьСобытие("Лояльность.Финализация чека", УровеньЖурналаРегистрации.Ошибка, , ЗаказСсылка,"ответ="+ОтветСервера.Ответ);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка отправки (ответ="+ОтветСервера.Ответ+")";
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	Если ОтправкаУспешна Тогда		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;получен ответ=" + ОтветСервера.Ответ;
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
				
		Если ДанныеОтвета.err < 0 Тогда
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;чек не финализирован";
			//Лояльность.ЗаписатьВСПУЛ(ЗаказСсылка, ПротоколСсылка);
		Иначе
			// финализация успешна
			Если НЕ РежимСПУЛ Тогда
				// пытаемся обработать СПУЛ
				ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;запуск фонового задания";
				Лояльность.ЗапуститьОбработкуСПУЛаЛояльности(ЗаказСсылка, ПротоколСсылка);
			Иначе
				// удаляем из СПУЛа
				// только снимаем признак финализации протокола, удалять нельзя - используется при закрытии заказа
				//Лояльность.УстановитьПризнакОбработкиСПУЛ_ФинализацияЧека(ЗаказСсылка, ПротоколСсылка, Ложь);
				Лояльность.УдалитьИзСПУЛа_Финализация(ЗаказСсылка, ПротоколСсылка);
			КонецЕсли;
		КонецЕсли;
	Иначе		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;чек не финализирован";
		//Лояльность.ЗаписатьВСПУЛ(ЗаказСсылка, ПротоколСсылка);
	КонецЕсли;
	
	Если РежимСПУЛ Тогда
		ЛояльностьКлиентСервер.Логирование(1, "финализация", "результат финализации:"+ЗаписьЛога);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФинализацияЧека_Протокол4(ЗаказСсылка, ПротоколСсылка, РежимСПУЛ = Ложь, ЗаписьЛога = "", Тест=Ложь)
	
	Данные = СобратьДанныеДляФинализацииЗаказа_Протокол4(ЗаказСсылка, ПротоколСсылка);
	
	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;начало (заказ="+Данные.Заказ.Номер+", РежимСПУЛ="+РежимСПУЛ+")";
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = СформироватьJSONДляФинализацииЗаказа_Протокол4(Данные,, Тест);
		
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Лояльность.Финализация чека", УровеньЖурналаРегистрации.Ошибка,, ЗаказСсылка,"ОписаниеОшибки=ошибка формирования JSON");
	Иначе		
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если НЕ ОтправкаУспешна Тогда
		// сервис недоступен или не смог обработать запрос
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		
		ЗарегистрироватьСобытие("Лояльность.Финализация чек", УровеньЖурналаРегистрации.Ошибка, , ЗаказСсылка,"ОписаниеОшибки="+ОписаниеОшибки);
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка отправки (ответ="+ОписаниеОшибки+")";
	Иначе
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ЗарегистрироватьСобытие("Лояльность.Финализация чека", УровеньЖурналаРегистрации.Ошибка, , ЗаказСсылка,"ответ="+ОтветСервера.Ответ);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка отправки (ответ="+ОтветСервера.Ответ+")";
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	Если ОтправкаУспешна Тогда		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;получен ответ=" + ОтветСервера.Ответ;
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
		Заказ = ДанныеОтвета.order;
		
		Если ДанныеОтвета.err < 0 Тогда
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;чек не финализирован";
			//Лояльность.ЗаписатьВСПУЛ(ЗаказСсылка, ПротоколСсылка);
		Иначе
			// финализация успешна
			Если НЕ РежимСПУЛ Тогда
				// пытаемся обработать СПУЛ
				ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;запуск фонового задания";
				Лояльность.ЗапуститьОбработкуСПУЛаЛояльности(ЗаказСсылка, ПротоколСсылка);
			Иначе
				// удаляем из СПУЛа
				// только снимаем признак финализации протокола, удалять нельзя - используется при закрытии заказа
				//Лояльность.УстановитьПризнакОбработкиСПУЛ_ФинализацияЧека(ЗаказСсылка, ПротоколСсылка, Ложь);
				Лояльность.УдалитьИзСПУЛа_Финализация(ЗаказСсылка, ПротоколСсылка);
			КонецЕсли;
		КонецЕсли;
	Иначе		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;чек не финализирован";
		//Лояльность.ЗаписатьВСПУЛ(ЗаказСсылка, ПротоколСсылка);
	КонецЕсли;
	
	Если РежимСПУЛ Тогда
		ЛояльностьКлиентСервер.Логирование(1, "финализация", "результат финализации:"+ЗаписьЛога);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФинализацияЧека_Протокол3(ЗаказОбъект, РежимСПУЛ = Ложь, ЗаписьЛога = "", Тест=Ложь)
	
	ТипЗапроса = "SALE";
	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;начало (заказ="+ЗаказОбъект.Номер+", РежимСПУЛ="+РежимСПУЛ+")";
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	Если ЗаказОбъект.ТипЧекаЛояльность = 0 Тогда
		ТипЧекаЛояльность = 1;
	Иначе
		ТипЧекаЛояльность = ЗаказОбъект.ТипЧекаЛояльность;
	КонецЕсли;
	
	ЭтоСПУЛ = Лояльность.ПолучитьПризнакСПУЛа(ЗаказОбъект.Ссылка);
	
	Если ЭтоСПУЛ <> РежимСПУЛ Тогда
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;флаг СПУЛа заказа("+ЭтоСПУЛ+") не соответствует режиму финализации("+РежимСПУЛ+")";
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONПоЗаказу_Протокол3(ТипЗапроса, ЗаказОбъект, ТипЧекаЛояльность,,РежимСПУЛ);
		
	ОтправкаУспешна = Ложь;
                                   	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект, ЗаказОбъект.Ссылка,"ОписаниеОшибки=ошибка формирования JSON");

	Иначе
		
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если НЕ ОтправкаУспешна Тогда
		// сервис недоступен или не смог обработать запрос
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		
		ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект, ЗаказОбъект.Ссылка,"ОписаниеОшибки="+ОписаниеОшибки);
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка отправки (ответ="+ОписаниеОшибки+")";
	Иначе
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект, ЗаказОбъект.Ссылка,"ответ="+ОтветСервера.Ответ);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка отправки (ответ="+ОтветСервера.Ответ+")";
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	Если ОтправкаУспешна Тогда
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;получен ответ=" + ОтветСервера.Ответ;
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON_1С(ОтветСервера.Ответ);
		Заказ = ДанныеОтвета.order;
		//!!!
		//Если ЗаказОбъект.ИдентификаторЛояльности = 0 Тогда
		//	ЗаказОбъект.ИдентификаторЛояльности = СформироватьИдентификаторЛояльности(Чек, Регион);
		//КонецЕсли;
		
		// финализация успешна
		Если НЕ РежимСПУЛ Тогда
			// пытаемся обработать СПУЛ
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;запуск фонового задания";
			Лояльность.ЗапуститьОбработкуСПУЛаЛояльности();
		Иначе
			// удаляем из СПУЛа
			Лояльность.УдалитьИзСПУЛа(ЗаказОбъект.Ссылка);
			Лояльность.УдалитьДанныеЛояльностиПоЗаказу(ЗаказОбъект.Ссылка);
		КонецЕсли;
		
	Иначе
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;заказ уходит в СПУЛ";
		Лояльность.ЗаписатьВСПУЛ(ЗаказОбъект.Ссылка);
		
	КонецЕсли;
	
	Если РежимСПУЛ Тогда
		ЛояльностьКлиентСервер.Логирование(1, "финализация", "результат финализации:"+ЗаписьЛога);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФинализацияЧека_Протокол2(ЗаказОбъект, РежимСПУЛ = Ложь, ЗаписьЛога = "", Тест=Ложь)
	
	ТипЗапроса = "SALE";
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;начало (заказ="+ЗаказОбъект.Номер+", РежимСПУЛ="+РежимСПУЛ+")";
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	Если ЗаказОбъект.ТипЧекаЛояльность = 0 Тогда
		ТипЧекаЛояльность = 1;
	Иначе
		ТипЧекаЛояльность = ЗаказОбъект.ТипЧекаЛояльность;
	КонецЕсли;
	
	ЭтоСПУЛ = Лояльность.ПолучитьПризнакСПУЛа(ЗаказОбъект.Ссылка);
	
	Если ЭтоСПУЛ <> РежимСПУЛ Тогда
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;флаг СПУЛа заказа("+ЭтоСПУЛ+") не соответствует режиму финализации("+РежимСПУЛ+")";
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONПоЗаказу_Протокол2(ТипЗапроса, ЗаказОбъект, ТипЧекаЛояльность,,РежимСПУЛ, Тест);
		
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект, ЗаказОбъект.Ссылка,"ОписаниеОшибки=ошибка формирования JSON");
		
	//ИначеЕсли	ЗаказОбъект.ОбработанСистемойЛояльности = 0 Тогда
	//	// первичный расчет в Центральном
	//	
	//	// 1. в центральный сервис
	//	Попытка
	//		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
	//		ОтветСервера = Лояльность.ОтправитьЧекНаОбработку(ПараметрыЗапроса.ТекстЗапроса, 0, ЗаказОбъект.РабочееМесто.Тест);
	//		ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
	//	Исключение
	//	КонецПопытки;
	//	
	//ИначеЕсли	ЗаказОбъект.ОбработанСистемойЛояльности = 1 Тогда
	//	// первичный расчет в Локальном
	//	
	//	// 2. в локальный сервис
	//	Попытка
	//		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;отправка запроса (Режим=локальный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
	//		ОтветСервера = Лояльность.ОтправитьЧекНаОбработку(ПараметрыЗапроса.ТекстЗапроса, 1, ЗаказОбъект.РабочееМесто.Тест);
	//		ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
	//	Исключение
	//	КонецПопытки;
	//	
	Иначе	//	ЗаказОбъект.ОбработанСистемойЛояльности = 2
		// первичный расчет не произведен
		
		// 1. в центральный сервис
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			//ОтветСервера = Лояльность.ОтправитьЧекНаОбработку_Протокол2(ПараметрыЗапроса.ТекстЗапроса, 0, Тест);
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол2(ПараметрыЗапроса.ТекстЗапроса, "CALC", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
		// 2. в локальный сервис
		//Если НЕ ОтправкаУспешна Тогда
		//	Попытка
		//		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;отправка запроса (Режим=локальный,текст="+ТекстЗапроса+")";
		//		ОтветСервера = Лояльность.ОтправитьЧекНаОбработку(ТекстЗапроса, 1, ЗаказОбъект.РабочееМесто.Тест);
		//		ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если НЕ ОтправкаУспешна Тогда
		// сервис недоступен или не смог обработать запрос
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		
		ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект, ЗаказОбъект.Ссылка,"ОписаниеОшибки="+ОписаниеОшибки);
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка отправки (ответ="+ОписаниеОшибки+")";
	Иначе
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ЗаказОбъект, ЗаказОбъект.Ссылка,"ответ="+ОтветСервера.Ответ);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;ошибка отправки (ответ="+ОтветСервера.Ответ+")";
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	Если ОтправкаУспешна Тогда
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;получен ответ=" + ОтветСервера.Ответ;
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON_1С(ОтветСервера.Ответ);
		Чек = ДанныеОтвета.chek;
		//Если ЗаказОбъект.ИдентификаторЛояльности = 0 Тогда
		//	ЗаказОбъект.ИдентификаторЛояльности = СформироватьИдентификаторЛояльности(Чек, Регион);
		//КонецЕсли;
		
		// финализация успешна
		Если НЕ РежимСПУЛ Тогда
			// пытаемся обработать СПУЛ
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;запуск фонового задания";
			Лояльность.ЗапуститьОбработкуСПУЛаЛояльности();
		Иначе
			// удаляем из СПУЛа
			Лояльность.УдалитьИзСПУЛа(ЗаказОбъект.Ссылка);
		КонецЕсли;
		
	Иначе
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;заказ уходит в СПУЛ";
		Лояльность.ЗаписатьВСПУЛ(ЗаказОбъект.Ссылка);
		
	КонецЕсли;
	
	Если РежимСПУЛ Тогда
		ЛояльностьКлиентСервер.Логирование(1, "финализация", "результат финализации:"+ЗаписьЛога);
	КонецЕсли;
	
КонецПроцедуры

// Функция отправляет запрос сервису Лояльности для получения предварительного расчета заказа
//
// Параметры:
// 	НомерКарты  - Строка - проверяемый номер
//
// Возвращаемое значение:
//  Структура	
//		- НомерКарты	- Строка - преобразованный номер карты. Пустая строка, если ошибка
//	 	- Ошибка		- Булево
//		- ТекстОшибки	- Строка - описание ошибки
Функция ПредварительныйРасчетЗаказаПоСсылке(ЗаказСсылка, Тест) Экспорт
	
 	Данные = Новый Структура;
	Данные.Вставить("Ошибка", Ложь);
	Данные.Вставить("ТекстОшибки", "");
	
	РабочееМесто = ПолучитьРабочееМестоЗаказа(ЗаказСсылка);
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(РабочееМесто);
	ВерсияЛояльности = ПолучитьВерсиюЛояльностиРабочегоМеста(РабочееМесто);
	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	
	Если ВерсияПротокола = 4 Тогда
		ДанныеЗапроса = СформироватьJSONДляПредварительногоРасчетаЗаказа_Протокол4(СобратьДанныеДляПредварительногоРасчетаЗаказа_Протокол4(ЗаказСсылка));
	ИначеЕсли ВерсияПротокола = 5 Тогда
		ДанныеЗапроса = СформироватьJSONДляПредварительногоРасчетаЗаказа_Протокол5(СобратьДанныеДляПредварительногоРасчетаЗаказа_Протокол5(ЗаказСсылка));
	Иначе
		Возврат ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("CALC",, Истина);
	КонецЕсли;
	
	Если ДанныеЗапроса.Ошибка Тогда
		Возврат ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("CALC",, Истина);
	КонецЕсли;
	
	ОтветJSON = ОтправитьЗапросКСервисуРасчетаЧеков(ДанныеЗапроса.ТекстЗапроса, "ORDER", Тест);
	Если ОтветJSON.Ошибка Тогда
		// При ошибке сервиса возвращаем пустую структуру, в регистр не пишем
		Возврат ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("CALC",, Истина);
	КонецЕсли;
	ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветJSON.Ответ);
	Если ДанныеОтвета=Неопределено Тогда
		Возврат ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("CALC",, Истина);
	КонецЕсли;
	Если ДанныеОтвета.err<>0 Тогда
		Возврат ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("CALC",, Истина, ДанныеОтвета.err_msg);
	КонецЕсли;
	
	Возврат ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("CALC", ДанныеОтвета);
	
КонецФункции

Процедура ЗакрытиеЗаказа(ЗаказСсылка, ПротоколСсылка)
	
	РабочееМесто = ПолучитьРабочееМестоЗаказа(ЗаказСсылка);
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(РабочееМесто);
	ВерсияЛояльности = ПолучитьВерсиюЛояльностиРабочегоМеста(РабочееМесто);
	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
		
	Если ВерсияПротокола = 4 Тогда		
		ЗакрытиеЗаказа_Протокол4(ЗаказСсылка, ПротоколСсылка, Тест);
	ИначеЕсли ВерсияПротокола = 4 Тогда		
		ЗакрытиеЗаказа_Протокол5(ЗаказСсылка, ПротоколСсылка, Тест);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеЗаказа_Протокол4(ЗаказСсылка, ПротоколСсылка, Тест = Ложь)
	
	Данные = СобратьДанныеДляЗакрытияЗаказа_Протокол4(ЗаказСсылка, ПротоколСсылка);
	
	ЗаписьЛога = "";
	ЗаписьЛога = ЗаписьЛога + ТекущаяДата()+";"+"закрытие заказа;начало (заказ="+Данные.Заказ.Номер+")";
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = СформироватьJSONДляЗакрытияЗаказа_Протокол4(Данные,, Тест);
		
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Лояльность.Закрытие заказа", УровеньЖурналаРегистрации.Ошибка,, ЗаказСсылка,"ОписаниеОшибки=ошибка формирования JSON");
	Иначе		
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если НЕ ОтправкаУспешна Тогда
		// сервис недоступен или не смог обработать запрос
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		
		ЗарегистрироватьСобытие("Лояльность.Закрытие заказа", УровеньЖурналаРегистрации.Ошибка, , ЗаказСсылка,"ОписаниеОшибки="+ОписаниеОшибки);
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;ошибка отправки (ответ="+ОписаниеОшибки+")";
	Иначе
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ЗарегистрироватьСобытие("Лояльность.Закрытие заказа", УровеньЖурналаРегистрации.Ошибка, , ЗаказСсылка,"ответ="+ОтветСервера.Ответ);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;ошибка отправки (ответ="+ОтветСервера.Ответ+")";
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	Если ОтправкаУспешна Тогда		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;получен ответ=" + ОтветСервера.Ответ;
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
		//Заказ = ДанныеОтвета.order;
		
		Если ДанныеОтвета.err < 0 Тогда
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;заказ не закрыт";
			//Лояльность.ЗаписатьВСПУЛ(ЗаказСсылка, ПротоколСсылка);
		Иначе
			// финализация успешна
			//Если НЕ РежимСПУЛ Тогда
			//	// пытаемся обработать СПУЛ
			//	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;запуск фонового задания";
			//	Лояльность.ЗапуститьОбработкуСПУЛаЛояльности(ЗаказСсылка, ПротоколСсылка);
			//Иначе
				// удаляем из СПУЛа
				//Лояльность.УстановитьПризнакОбработкиСПУЛ_ЗакрытиеЗаказа(ЗаказСсылка, ПротоколСсылка, Ложь);
				//Лояльность.УдалитьИзСПУЛа_Закрытие(ЗаказСсылка, ПротоколСсылка);
				// Удаляем временные данные лояльности по заказу
				Лояльность.УдалитьДанныеЛояльностиПоЗаказу(Данные.Заказ.Ссылка);
			//КонецЕсли;
		КонецЕсли;
	Иначе		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;заказ не закрыт";
		//Лояльность.ЗаписатьВСПУЛ(ЗаказСсылка, ПротоколСсылка);		
	КонецЕсли;
	
	//Если РежимСПУЛ Тогда
	//	ЛояльностьКлиентСервер.Логирование(1, "финализация", "результат финализации:"+ЗаписьЛога);
	//КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытиеЗаказа_Протокол5(ЗаказСсылка, ПротоколСсылка, Тест = Ложь)
	
	Данные = СобратьДанныеДляЗакрытияЗаказа_Протокол5(ЗаказСсылка);
	
	ЗаписьЛога = "";
	ЗаписьЛога = ЗаписьЛога + ТекущаяДата()+";"+"закрытие заказа;начало (заказ="+Данные.Заказ.Номер+")";
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = СформироватьJSONДляЗакрытияЗаказа_Протокол5(Данные,, Тест);
		
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Лояльность.Закрытие заказа", УровеньЖурналаРегистрации.Ошибка,, ЗаказСсылка,"ОписаниеОшибки=ошибка формирования JSON");
	Иначе		
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если НЕ ОтправкаУспешна Тогда
		// сервис недоступен или не смог обработать запрос
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		
		ЗарегистрироватьСобытие("Лояльность.Закрытие заказа", УровеньЖурналаРегистрации.Ошибка, , ЗаказСсылка,"ОписаниеОшибки="+ОписаниеОшибки);
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;ошибка отправки (ответ="+ОписаниеОшибки+")";
	Иначе
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ЗарегистрироватьСобытие("Лояльность.Закрытие заказа", УровеньЖурналаРегистрации.Ошибка, , ЗаказСсылка,"ответ="+ОтветСервера.Ответ);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;ошибка отправки (ответ="+ОтветСервера.Ответ+")";
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	Если ОтправкаУспешна Тогда		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;получен ответ=" + ОтветСервера.Ответ;
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
		//Заказ = ДанныеОтвета.order;
		
		Если ДанныеОтвета.err < 0 Тогда
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;заказ не закрыт";
			//Лояльность.ЗаписатьВСПУЛ(ЗаказСсылка, ПротоколСсылка);
		Иначе
			// финализация успешна
			//Если НЕ РежимСПУЛ Тогда
			//	// пытаемся обработать СПУЛ
			//	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация;запуск фонового задания";
			//	Лояльность.ЗапуститьОбработкуСПУЛаЛояльности(ЗаказСсылка, ПротоколСсылка);
			//Иначе
				// удаляем из СПУЛа
				//Лояльность.УстановитьПризнакОбработкиСПУЛ_ЗакрытиеЗаказа(ЗаказСсылка, ПротоколСсылка, Ложь);
				//Лояльность.УдалитьИзСПУЛа_Закрытие(ЗаказСсылка, ПротоколСсылка);
				// Удаляем временные данные лояльности по заказу
				Лояльность.УдалитьДанныеЛояльностиПоЗаказу(Данные.Заказ.Ссылка);
			//КонецЕсли;
		КонецЕсли;
	Иначе		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"закрытие заказа;заказ не закрыт";
		//Лояльность.ЗаписатьВСПУЛ(ЗаказСсылка, ПротоколСсылка);		
	КонецЕсли;
	
	//Если РежимСПУЛ Тогда
	//	ЛояльностьКлиентСервер.Логирование(1, "финализация", "результат финализации:"+ЗаписьЛога);
	//КонецЕсли;
	
КонецПроцедуры


Процедура ОбработатьВозврат(ВозвратСсылка, ПротоколСсылка = Неопределено, РежимСПУЛ = Ложь, ЗаписьЛога = "") Экспорт
	
	РабочееМесто = ПолучитьРабочееМестоВозврата(ВозвратСсылка);
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(РабочееМесто);
	ВерсияЛояльности = ПолучитьВерсиюЛояльностиРабочегоМеста(РабочееМесто);
	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	Если ВерсияПротокола < 3 Тогда
		ВозвратОбъект = ВозвратСсылка.ПолучитьОбъект();
		ОбработатьВозврат_Протокол2(ВозвратОбъект, РежимСПУЛ, ЗаписьЛога, Тест);
	ИначеЕсли ВерсияПротокола = 3 Тогда
		ВозвратОбъект = ВозвратСсылка.ПолучитьОбъект();
		ОбработатьВозврат_Протокол3(ВозвратОбъект, РежимСПУЛ, ЗаписьЛога, Тест);
	ИначеЕсли ВерсияПротокола = 4 Тогда		
		ОбработатьВозврат_Протокол4(ВозвратСсылка, ПротоколСсылка, РежимСПУЛ, ЗаписьЛога, Тест);
	ИначеЕсли ВерсияПротокола = 5 Тогда		
		ОбработатьВозврат_Протокол5(ВозвратСсылка, ПротоколСсылка, РежимСПУЛ, ЗаписьЛога, Тест);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВозврат_Протокол5(ВозвратСсылка, ПротоколСсылка, РежимСПУЛ = Ложь, ЗаписьЛога = "", Тест = Ложь)
	
	Данные = СобратьДанныеДляВозврата_Протокол4(ВозвратСсылка, ПротоколСсылка);
	
	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;начало (возврат="+Данные.Возврат.Номер+", РежимСПУЛ="+РежимСПУЛ+")";
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = СформироватьJSONДляВозврата_Протокол5(Данные, Тест);
	
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Ошибка финализации возврата (Лояльность)", УровеньЖурналаРегистрации.Ошибка, , ВозвратСсылка,"ОписаниеОшибки=ошибка формирования JSON");
		
	Иначе
			
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
		Если НЕ ОтправкаУспешна Тогда
			// сервис недоступен или не смог обработать запрос
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			
			ЗарегистрироватьСобытие("Ошибка финализации возврата (Лояльность)", УровеньЖурналаРегистрации.Ошибка, , ВозвратСсылка, "ОписаниеОшибки="+ОписаниеОшибки);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка отправки (Режим=локальный, ответ="+ОписаниеОшибки+")";
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если ОтправкаУспешна Тогда
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, , ВозвратСсылка,"ответ="+ОтветСервера.Ответ);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка отправки (ответ="+ОтветСервера.Ответ+")";
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	Если ОтправкаУспешна Тогда
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;получен ответ=" + ОтветСервера.Ответ;
		
		Если НЕ РежимСПУЛ Тогда
			// пытаемся обработать СПУЛ
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;запуск фонового задания";
			Лояльность.ЗапуститьОбработкуСПУЛаЛояльности();
		Иначе
			// удаляем из СПУЛа
			Лояльность.УдалитьИзСПУЛа(ВозвратСсылка, ПротоколСсылка);
		КонецЕсли;
		
	Иначе	
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;не финализирован";
				
	КонецЕсли;
	
	Если РежимСПУЛ Тогда
		ЛояльностьКлиентСервер.Логирование(1, "финализация", "результат финализации:"+ЗаписьЛога);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВозврат_Протокол4(ВозвратСсылка, ПротоколСсылка, РежимСПУЛ = Ложь, ЗаписьЛога = "", Тест = Ложь)
	
	Данные = СобратьДанныеДляВозврата_Протокол4(ВозвратСсылка, ПротоколСсылка);
	
	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;начало (возврат="+Данные.Возврат.Номер+", РежимСПУЛ="+РежимСПУЛ+")";
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = СформироватьJSONДляВозврата_Протокол4(Данные, Тест);
	
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Ошибка финализации возврата (Лояльность)", УровеньЖурналаРегистрации.Ошибка, , ВозвратСсылка,"ОписаниеОшибки=ошибка формирования JSON");
		
	Иначе
			
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
		Если НЕ ОтправкаУспешна Тогда
			// сервис недоступен или не смог обработать запрос
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			
			ЗарегистрироватьСобытие("Ошибка финализации возврата (Лояльность)", УровеньЖурналаРегистрации.Ошибка, , ВозвратСсылка, "ОписаниеОшибки="+ОписаниеОшибки);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка отправки (Режим=локальный, ответ="+ОписаниеОшибки+")";
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если ОтправкаУспешна Тогда
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, , ВозвратСсылка,"ответ="+ОтветСервера.Ответ);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка отправки (ответ="+ОтветСервера.Ответ+")";
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	Если ОтправкаУспешна Тогда
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;получен ответ=" + ОтветСервера.Ответ;
		
		Если НЕ РежимСПУЛ Тогда
			// пытаемся обработать СПУЛ
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;запуск фонового задания";
			Лояльность.ЗапуститьОбработкуСПУЛаЛояльности();
		Иначе
			// удаляем из СПУЛа
			Лояльность.УдалитьИзСПУЛа(ВозвратСсылка, ПротоколСсылка);
		КонецЕсли;
		
	Иначе	
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;не финализирован";
				
	КонецЕсли;
	
	Если РежимСПУЛ Тогда
		ЛояльностьКлиентСервер.Логирование(1, "финализация", "результат финализации:"+ЗаписьЛога);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВозврат_Протокол3(ВозвратОбъект, РежимСПУЛ = Ложь, ЗаписьЛога = "", Тест = Ложь)
	
	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;начало (возврат="+ВозвратОбъект.Номер+", РежимСПУЛ="+РежимСПУЛ+")";
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	ЭтоСПУЛ = Лояльность.ПолучитьПризнакСПУЛа(ВозвратОбъект.Ссылка);
	
	Если ЭтоСПУЛ <> РежимСПУЛ Тогда
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;флаг СПУЛа возврата("+ЭтоСПУЛ+") не соответствует режиму финализации("+РежимСПУЛ+")";
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONПоВозврату_Протокол3("RETURN", ВозвратОбъект, 1,,РежимСПУЛ);
	
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Ошибка финализации возврата (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ВозвратОбъект, ВозвратОбъект.Ссылка,"ОписаниеОшибки=ошибка формирования JSON");
		
	Иначе
			
		// 1. в центральный сервис
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(ПараметрыЗапроса.ТекстЗапроса, "ORDER", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
		//// 2. в локальный сервис
		//Если НЕ ОтправкаУспешна Тогда
		//	ОписаниеОшибки = "";
		//	Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
		//		ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		//	КонецЕсли;
		//	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка отправки (Режим=центральный, ответ="+ОписаниеОшибки+")";
		//	
		//	Попытка
		//		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;отправка запроса (Режим=локальный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
		//		ОтветСервера = Лояльность.ОтправитьЧекНаОбработку(ПараметрыЗапроса.ТекстЗапроса, 1, ВозвратОбъект.РабочееМесто.Тест);
		//		ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		//	Исключение
		//	КонецПопытки;
		//КонецЕсли;
		
		// 3. неудача
		Если НЕ ОтправкаУспешна Тогда
			// сервис недоступен или не смог обработать запрос
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			
			ЗарегистрироватьСобытие("Ошибка финализации возврата (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ВозвратОбъект, ВозвратОбъект.Ссылка,"ОписаниеОшибки="+ОписаниеОшибки);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка отправки (Режим=локальный, ответ="+ОписаниеОшибки+")";
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если ОтправкаУспешна Тогда
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ВозвратОбъект, ВозвратОбъект.Ссылка,"ответ="+ОтветСервера.Ответ);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка отправки (ответ="+ОтветСервера.Ответ+")";
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	Если ОтправкаУспешна Тогда
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;получен ответ=" + ОтветСервера.Ответ;
		
		Если НЕ РежимСПУЛ Тогда
			// пытаемся обработать СПУЛ
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;запуск фонового задания";
			Лояльность.ЗапуститьОбработкуСПУЛаЛояльности();
		Иначе
			// удаляем из СПУЛа
			Лояльность.УдалитьИзСПУЛа(ВозвратОбъект.Ссылка);
		КонецЕсли;
		
	Иначе	
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;возврат уходит в СПУЛ";
		Лояльность.ЗаписатьВСПУЛ(ВозвратОбъект.Ссылка);
		
	КонецЕсли;
	
	Если РежимСПУЛ Тогда
		ЛояльностьКлиентСервер.Логирование(1, "финализация", "результат финализации:"+ЗаписьЛога);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВозврат_Протокол2(ВозвратОбъект, РежимСПУЛ = Ложь, ЗаписьЛога = "", Тест = Ложь)
	
	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;начало (возврат="+ВозвратОбъект.Номер+", РежимСПУЛ="+РежимСПУЛ+")";
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	ЭтоСПУЛ = Лояльность.ПолучитьПризнакСПУЛа(ВозвратОбъект.Ссылка);
	
	Если ЭтоСПУЛ <> РежимСПУЛ Тогда
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;флаг СПУЛа возврата("+ЭтоСПУЛ+") не соответствует режиму финализации("+РежимСПУЛ+")";
		Возврат;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONПоВозврату_Протокол2(,ВозвратОбъект, РежимСПУЛ, Тест);
	
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Ошибка финализации возврата (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ВозвратОбъект, ВозвратОбъект.Ссылка,"ОписаниеОшибки=ошибка формирования JSON");
		
	Иначе
			
		// 1. в центральный сервис
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			//ОтветСервера = Лояльность.ОтправитьЧекНаОбработку_Протокол2(ПараметрыЗапроса.ТекстЗапроса, 0, Тест);
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол2(ПараметрыЗапроса.ТекстЗапроса, "CALC", Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
		// 2. в локальный сервис
		Если НЕ ОтправкаУспешна Тогда
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка отправки (Режим=центральный, ответ="+ОписаниеОшибки+")";
			
			Попытка
				ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;отправка запроса (Режим=локальный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
				//ОтветСервера = Лояльность.ОтправитьЧекНаОбработку_Протокол2(ПараметрыЗапроса.ТекстЗапроса, 1, Тест);
				ОтветСервера = Лояльность.ОтправитьЗапросКЛокальномуСервисуРасчетаЧеков_Протокол2(ПараметрыЗапроса.ТекстЗапроса, "CALC", Тест);
				ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// 3. неудача
		Если НЕ ОтправкаУспешна Тогда
			// сервис недоступен или не смог обработать запрос
			ОписаниеОшибки = "";
			Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
				ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
			КонецЕсли;
			
			ЗарегистрироватьСобытие("Ошибка финализации возврата (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ВозвратОбъект, ВозвратОбъект.Ссылка,"ОписаниеОшибки="+ОписаниеОшибки);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка отправки (Режим=локальный, ответ="+ОписаниеОшибки+")";
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если ОтправкаУспешна Тогда
		Если ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" ИЛИ ОтветСервера.Ответ = Неопределено Тогда
			// сервис недоступен или не смог обработать запрос
			ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ВозвратОбъект, ВозвратОбъект.Ссылка,"ответ="+ОтветСервера.Ответ);
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;ошибка отправки (ответ="+ОтветСервера.Ответ+")";
			ОтправкаУспешна = Ложь;
		КонецЕсли;
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////////
	// ПОЛУЧЕНИЕ ОТВЕТА
	Если ОтправкаУспешна Тогда
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;получен ответ=" + ОтветСервера.Ответ;
		
		Если НЕ РежимСПУЛ Тогда
			// пытаемся обработать СПУЛ
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;запуск фонового задания";
			Лояльность.ЗапуститьОбработкуСПУЛаЛояльности();
		Иначе
			// удаляем из СПУЛа
			Лояльность.УдалитьИзСПУЛа(ВозвратОбъект.Ссылка);
		КонецЕсли;
		
	Иначе	
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"финализация возврата;возврат уходит в СПУЛ";
		Лояльность.ЗаписатьВСПУЛ(ВозвратОбъект.Ссылка);
		
	КонецЕсли;
	
	Если РежимСПУЛ Тогда
		ЛояльностьКлиентСервер.Логирование(1, "финализация", "результат финализации:"+ЗаписьЛога);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалениеЧека(ЗаказСсылка) Экспорт
	
	ЗаписьЛога = "";
	
	ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"удаление;начало (заказ="+ЗаказСсылка.Номер;
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	
	///////////////////////////////////////////////////////////////////////////////////
	// ФОРМИРОВАНИЕ И ОТПРАВКА ЗАПРОСА
	ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONУдаленияЧека(ЗаказСсылка);
		
	ОтправкаУспешна = Ложь;
	ОтветСервера = Неопределено;
	
	Если ПараметрыЗапроса.Ошибка Тогда
		
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"удаление;ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")";
		ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ЗаказСсылка, ЗаказСсылка,"ОписаниеОшибки=ошибка формирования JSON");
		
	Иначе
		// 1. в центральный сервис
		Попытка
			ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"удаление;отправка запроса (Режим=центральный,текст="+ПараметрыЗапроса.ТекстЗапроса+")";
			//ОтветСервера = Лояльность.ОтправитьЧекНаОбработку_Протокол2(ПараметрыЗапроса.ТекстЗапроса, 0, ЗаказСсылка.РабочееМесто.Тест);
			ОтветСервера = Лояльность.ОтправитьЗапросКСервисуРасчетаЧеков_Протокол2(ПараметрыЗапроса.ТекстЗапроса, "CALC", ЗаказСсылка.РабочееМесто.Тест);
			ОтправкаУспешна = НЕ ОтветСервера.Ошибка;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////
	// ОБРАБОТКА ОШИБОК ОТПРАВКИ
	Если НЕ ОтправкаУспешна Тогда
		// сервис недоступен или не смог обработать запрос
		ОписаниеОшибки = "";
		Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
			ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
		КонецЕсли;
		
		ЗарегистрироватьСобытие("Ошибка финализации заказа (Лояльность)", УровеньЖурналаРегистрации.Ошибка, ЗаказСсылка, ЗаказСсылка,"ОписаниеОшибки="+ОписаниеОшибки);
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"удаление;ошибка отправки (ответ="+ОписаниеОшибки+")";
		
	Иначе
		// Отправка успешна
		
		Лояльность.УдалитьИзСПУЛа(ЗаказСсылка);
		ЗаписьЛога = ЗаписьЛога+Символы.ПС+""+ТекущаяДата()+";"+"удаление;получен ответ=" + ОтветСервера.Ответ;
		
	КонецЕсли;
	
	ЛояльностьКлиентСервер.Логирование(1, "удаление", "результат:"+ЗаписьЛога);
	
КонецПроцедуры


Функция ПолучитьПревьюЗаказаИзРегистра(ЗаказСсылка, ВерсияЗаказа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЛояльностиПоЗаказу.Данные КАК Данные,
	|	ДанныеЛояльностиПоЗаказу.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	РегистрСведений.ДанныеЛояльностиПоЗаказу КАК ДанныеЛояльностиПоЗаказу
	|ГДЕ
	|	ДанныеЛояльностиПоЗаказу.Документ = &ЗаказСсылка
	|	И ДанныеЛояльностиПоЗаказу.ТипДанных = &ТипДанных";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Запрос.УстановитьПараметр("ТипДанных", "PREVIEW");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Если ВыборкаЗапроса.ВерсияДанных<>ВерсияЗаказа Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЛояльностьКлиентСервер.РазборJSON(ВыборкаЗапроса.Данные);
	
КонецФункции

Функция ПолучитьПревьюЗаказа(ЗаказСсылка, ВерсияДанных) Экспорт
	
	Отладка = ЛояльностьКлиентСервер.ОтладкаВключена();
	Если Отладка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "начало");
	КонецЕсли;
	
	Если ВерсияДанных = Неопределено Тогда
		ВерсияЗаказа = ПолучитьВерсиюДанныхЛояльностиПоЗаказу(ЗаказСсылка);
	КонецЕсли;
	
	Данные = ПолучитьПревьюЗаказаИзРегистра(ЗаказСсылка, ВерсияЗаказа);
	Если Отладка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "данные в регистре: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
	КонецЕсли;
	Если Данные <> Неопределено Тогда	
		// Предварительный расчет
		Если Отладка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "данные: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
		КонецЕсли;
		
		Возврат Данные;
	КонецЕсли;
	
	РабочееМесто = ПолучитьРабочееМестоЗаказа(ЗаказСсылка);
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(РабочееМесто);
	ВерсияЛояльности = ПолучитьВерсиюЛояльностиРабочегоМеста(РабочееМесто);
	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	
	Если ЛояльностьКлиентСервер.РежимОффлайн() Тогда
		Данные = ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("CALC");
	Иначе			
		Данные = ПредварительныйРасчетЗаказаПоСсылке(ЗаказСсылка, Тест);
		ДополнитьПревьюЗаказаДаннымиФинализации(ЗаказСсылка, Данные);
		Если Отладка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "данные+данные финализации: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
		КонецЕсли;
		
		ОбновитьАкцииГостяПоПревьюЗаказа(ЗаказСсылка, Данные, ВерсияЗаказа);
		Если Отладка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "данные+акции: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
		КонецЕсли;
		
		Для каждого ТекущаяСтрока Из Данные.Купоны Цикл
			// Проверяем заполненность информации о купоне
			Если ПустаяСтрока(ТекущаяСтрока.ИнфоГостя) Тогда
				ТекущаяСтрока.ИнфоГостя = ТекущаяСтрока.Код;
			КонецЕсли;
			Если ПустаяСтрока(ТекущаяСтрока.ИнфоСтанции) Тогда
				ТекущаяСтрока.ИнфоСтанции = ТекущаяСтрока.Код;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Итоги = Данные.Итоги;
	//ИтогиМ = Данные.ИтогиМ;
	//ИтогиО = Данные.ИтогиО;
	//ИтогиКП = Данные.ИтогиКП;
	//	
	//Строка = Новый Структура("Текст, КГЛ", "За совместные акции", Итоги.КГЛЗаТовар+Итоги.КГЛЗаСумму+Итоги.КГЛЗаСерт);
	//Итоги.КГЛИнфо.Добавить(Строка);
	//
	//СтрокаМ = Новый Структура("Текст, КГЛ", "За товар МЪ", ИтогиМ.КГЛЗаТовар);
	//ИтогиМ.КГЛИнфо.Добавить(СтрокаМ);
	//СтрокаМ = Новый Структура("Текст, КГЛ", "За сумму покупки МЪ", ИтогиМ.КГЛЗаСумму);
	//ИтогиМ.КГЛИнфо.Добавить(СтрокаМ);
	//СтрокаМ = Новый Структура("Текст, КГЛ", "За сертификаты МЪ", ИтогиМ.КГЛЗаСерт);
	//ИтогиМ.КГЛИнфо.Добавить(СтрокаМ);
	//
	//СтрокаО = Новый Структура("Текст, КГЛ", "За товар О", ИтогиО.КГЛЗаТовар);
	//ИтогиО.КГЛИнфо.Добавить(СтрокаО);
	//СтрокаО = Новый Структура("Текст, КГЛ", "За сумму покупки О", ИтогиО.КГЛЗаСумму);
	//ИтогиО.КГЛИнфо.Добавить(СтрокаО);
	//СтрокаО = Новый Структура("Текст, КГЛ", "За сертификаты О", ИтогиО.КГЛЗаСерт);
	//ИтогиО.КГЛИнфо.Добавить(СтрокаО);
	//
	//СтрокаКП = Новый Структура("Текст, КГЛ", "За товар КП", ИтогиКП.КГЛЗаТовар);
	//ИтогиКП.КГЛИнфо.Добавить(СтрокаКП);
	//СтрокаКП = Новый Структура("Текст, КГЛ", "За сумму покупки КП", ИтогиКП.КГЛЗаСумму);
	//ИтогиКП.КГЛИнфо.Добавить(СтрокаКП);
	//СтрокаКП = Новый Структура("Текст, КГЛ", "За сертификаты КП", ИтогиКП.КГЛЗаСерт);
	//ИтогиКП.КГЛИнфо.Добавить(СтрокаКП);
	
	Если Отладка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "финальные данные: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
		ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "завершение");
	КонецЕсли;
	
	ИсключитьИзЗаписи = Новый Массив;
	ИсключитьИзЗаписи.Добавить("Алерты");
	ДанныеКЗаписи = ЛояльностьКлиентСервер.СформироватьJSON_Новый(Данные,,ИсключитьИзЗаписи);
	
	ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "PREVIEW", ДанныеКЗаписи, ВерсияЗаказа);
	
	Возврат Данные;
	
КонецФункции

Процедура ОбновитьПревьюЗаказа(ЗаказСсылка, ВерсияДанных) Экспорт
	
	Отладка = ЛояльностьКлиентСервер.ОтладкаВключена();
	Если Отладка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "начало");
	КонецЕсли;
	
	РабочееМесто = ПолучитьРабочееМестоЗаказа(ЗаказСсылка);
	Тест = ЛояльностьКлиентСервер.ТестовыйРежим(РабочееМесто);
	ВерсияЛояльности = ПолучитьВерсиюЛояльностиРабочегоМеста(РабочееМесто);
	ВерсияПротокола = ЛояльностьКлиентСервер.ВерсияПротоколаИзВерсииЛояльности(ВерсияЛояльности);
	
	Если ЛояльностьКлиентСервер.РежимОффлайн() Тогда
		Данные = ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("CALC");
	Иначе
			
		Данные = ПредварительныйРасчетЗаказаПоСсылке(ЗаказСсылка, Тест);
		ДополнитьПревьюЗаказаДаннымиФинализации(ЗаказСсылка, Данные);
		Если Отладка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "данные+данные финализации: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
		КонецЕсли;
		
		ОбновитьАкцииГостяПоПревьюЗаказа(ЗаказСсылка, Данные, ВерсияДанных);
		Если Отладка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "данные+акции: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
		КонецЕсли;
		
		Для каждого ТекущаяСтрока Из Данные.Купоны Цикл
			// Проверяем заполненность информации о купоне
			Если ПустаяСтрока(ТекущаяСтрока.ИнфоГостя) Тогда
				ТекущаяСтрока.ИнфоГостя = ТекущаяСтрока.Код;
			КонецЕсли;
			Если ПустаяСтрока(ТекущаяСтрока.ИнфоСтанции) Тогда
				ТекущаяСтрока.ИнфоСтанции = ТекущаяСтрока.Код;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИтогиМ = Данные.ИтогиМ;
	ИтогиО = Данные.ИтогиО;
	ИтогиКП = Данные.ИтогиКП;
	ИтогиМ.Вставить("КГЛИнфо", Новый Массив);
	ИтогиО.Вставить("КГЛИнфо", Новый Массив);
	ИтогиКП.Вставить("КГЛИнфо", Новый Массив);
		
	СтрокаМ = Новый Структура("Текст, КГЛ", "За товар МЪ", ИтогиМ.КГЛЗаТовар);
	ИтогиМ.КГЛИнфо.Добавить(СтрокаМ);
	СтрокаМ = Новый Структура("Текст, КГЛ", "За сумму покупки МЪ", ИтогиМ.КГЛЗаСумму);
	ИтогиМ.КГЛИнфо.Добавить(СтрокаМ);
	СтрокаМ = Новый Структура("Текст, КГЛ", "За сертификаты МЪ", ИтогиМ.КГЛЗаСерт);
	ИтогиМ.КГЛИнфо.Добавить(СтрокаМ);
	
	СтрокаО = Новый Структура("Текст, КГЛ", "За товар О", ИтогиО.КГЛЗаТовар);
	ИтогиО.КГЛИнфо.Добавить(СтрокаО);
	СтрокаО = Новый Структура("Текст, КГЛ", "За сумму покупки О", ИтогиО.КГЛЗаСумму);
	ИтогиО.КГЛИнфо.Добавить(СтрокаО);
	СтрокаО = Новый Структура("Текст, КГЛ", "За сертификаты О", ИтогиО.КГЛЗаСерт);
	ИтогиО.КГЛИнфо.Добавить(СтрокаО);
	
	СтрокаКП = Новый Структура("Текст, КГЛ", "За товар КП", ИтогиКП.КГЛЗаТовар);
	ИтогиКП.КГЛИнфо.Добавить(СтрокаКП);
	СтрокаКП = Новый Структура("Текст, КГЛ", "За сумму покупки КП", ИтогиКП.КГЛЗаСумму);
	ИтогиКП.КГЛИнфо.Добавить(СтрокаКП);
	СтрокаКП = Новый Структура("Текст, КГЛ", "За сертификаты КП", ИтогиКП.КГЛЗаСерт);
	ИтогиКП.КГЛИнфо.Добавить(СтрокаКП);
	
	Если Отладка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "финальные данные: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
		ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "завершение");
	КонецЕсли;
	
	ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "PREVIEW", Данные, ВерсияДанных);
	
	//Возврат Данные;
	
КонецПроцедуры

Функция ПолучитьПревьюЗаказа_Асинхронно(ЗаказСсылка, ВерсияДанных, УникальныйИдентификатор) Экспорт
	
	Отладка = ЛояльностьКлиентСервер.ОтладкаВключена();
	Если Отладка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "начало");
	КонецЕсли;
	
	Если ВерсияДанных = Неопределено Тогда
		ВерсияДанных = ПолучитьВерсиюДанныхЛояльностиПоЗаказу(ЗаказСсылка);
	КонецЕсли;
	
	Данные = ПолучитьПревьюЗаказаИзРегистра(ЗаказСсылка, ВерсияДанных);
	Если Отладка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "данные в регистре: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
	КонецЕсли;
	Если Данные <> Неопределено Тогда	
		// Предварительный расчет
		Если Отладка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "данные: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
		КонецЕсли;
		
		Возврат Данные;
	КонецЕсли;
	
	// В регистре неактуальная версия - нужно запустить фоновое задание на обновление данных
	
	// Запишем в регистр пустую структуру для отображения на экране
	Данные = ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("CALC");
	ИтогиМ = Данные.ИтогиМ;
	ИтогиО = Данные.ИтогиО;
	ИтогиКП = Данные.ИтогиКП;
	ИтогиМ.Вставить("КГЛИнфо", Новый Массив);
	ИтогиО.Вставить("КГЛИнфо", Новый Массив);
	ИтогиКП.Вставить("КГЛИнфо", Новый Массив);
	ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "PREVIEW", Данные, ВерсияДанных);
		
	Если Отладка Тогда
		ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "запущено задание");
	КонецЕсли;
	
	// Отменяем все задания с ключом
	ОтменитьВыполнениеЗаданияПоКлючу(УникальныйИдентификатор);
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(ЗаказСсылка);
	ПараметрыЗадания.Добавить(ВерсияДанных);
	Задание = ФоновыеЗадания.Выполнить("Лояльность.ОбновитьПревьюЗаказа", ПараметрыЗадания, УникальныйИдентификатор, "Обновление превью заказа");
	Если Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
		// Задание уже завершено - читаем результат из регистра
		Данные = ПолучитьПревьюЗаказаИзРегистра(ЗаказСсылка, ВерсияДанных);
		Если Отладка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "данные в регистре: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
		КонецЕсли;
		Если Данные <> Неопределено Тогда	
			// Предварительный расчет
			Если Отладка Тогда
				ЛояльностьКлиентСервер.Логирование(1, "Предварительный расчет", "данные: "+ЛояльностьКлиентСервер.СформироватьJSON(Данные));
			КонецЕсли;
			
			Возврат Данные;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Сервисы

Функция ПолучитьПараметрыСервисаКеГеЛьБУМ(Тест = Ложь) Экспорт
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	ТекущаяИБ = ПараметрыСеанса.ТекущаяИБ;
		
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПрокси"	, Ложь);
	Результат.Вставить("ПроксиСервер"		, "");
	Результат.Вставить("ПроксиПорт"			, "");
	Результат.Вставить("ПроксиПользователь"	, "");
	Результат.Вставить("ПроксиПароль"		, "");
	Результат.Вставить("Таймаут"			, 10);
	//Результат.Вставить("ИспользоватьПрокси"	, Истина);
	//Результат.Вставить("ПроксиСервер"		, "tmg.cd.local");
	//Результат.Вставить("ПроксиПорт"			, 8080);
	
	Если Тест Тогда
		АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисКеГеЛьБУМ_ТЕСТ", ТекущаяИБ);		
		Если АдресСервиса = Неопределено Тогда
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисКеГеЛьБУМ_ТЕСТ");
		КонецЕсли;
		Если АдресСервиса = Неопределено Тогда
			Результат.Вставить("АдресСервиса", "");
		Иначе
			Результат.Вставить("АдресСервиса", АдресСервиса);
		КонецЕсли;
	ИначеЕсли Регион = Справочники.Регионы.Р52 Тогда 			
		АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисКеГеЛьБУМ_52", ТекущаяИБ);
		Если АдресСервиса = Неопределено Тогда
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисКеГеЛьБУМ_52");
		КонецЕсли;
		Если АдресСервиса = Неопределено Тогда
			Результат.Вставить("АдресСервиса", "");
		Иначе
			Результат.Вставить("АдресСервиса", АдресСервиса);
		КонецЕсли;
	ИначеЕсли Регион = Справочники.Регионы.Р77 Тогда 					
		АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисКеГеЛьБУМ_77", ТекущаяИБ);
		Если АдресСервиса = Неопределено Тогда
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисКеГеЛьБУМ_77");
		КонецЕсли;
		Если АдресСервиса = Неопределено Тогда
			Результат.Вставить("АдресСервиса", "");
		Иначе
			Результат.Вставить("АдресСервиса", АдресСервиса);
		КонецЕсли;
	Иначе		
		Результат.Вставить("АдресСервиса", "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыСервисаРасчетаЧеков(Тест = Ложь, Регион = Неопределено, ТекущаяИБ = Неопределено) Экспорт
	
	Если Регион = Неопределено Тогда
		Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	КонецЕсли;
	
	Если ТекущаяИБ = Неопределено Тогда
		ТекущаяИБ = ПараметрыСеанса.ТекущаяИБ;
	КонецЕсли;
		
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПрокси"	, Ложь);
	Результат.Вставить("ПроксиСервер"		, "");
	Результат.Вставить("ПроксиПорт"			, "");
	Результат.Вставить("ПроксиПользователь"	, "");
	Результат.Вставить("ПроксиПароль"		, "");
	Результат.Вставить("Таймаут"			, 10);
	//Результат.Вставить("ИспользоватьПрокси"	, Истина);
	//Результат.Вставить("ПроксиСервер"		, "tmg.cd.local");
	//Результат.Вставить("ПроксиПорт"			, 8080);
	
	Если Тест Тогда
		АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_ТЕСТ", ТекущаяИБ);
		Если АдресСервиса = Неопределено Тогда
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_ТЕСТ");
		КонецЕсли;
		Если АдресСервиса = Неопределено Тогда
			Результат.Вставить("АдресСервиса", "");
		Иначе
			Результат.Вставить("АдресСервиса", АдресСервиса);
		КонецЕсли;
	ИначеЕсли Регион = Справочники.Регионы.Р52 Тогда
		АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_52", ТекущаяИБ);
		Если АдресСервиса = Неопределено Тогда
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_52");
		КонецЕсли;
		Если АдресСервиса = Неопределено Тогда
			Результат.Вставить("АдресСервиса", "");
		Иначе
			Результат.Вставить("АдресСервиса", АдресСервиса);
		КонецЕсли;
	ИначеЕсли Регион = Справочники.Регионы.Р77 Тогда
		АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_77", ТекущаяИБ);
		Если АдресСервиса = Неопределено Тогда
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_77");
		КонецЕсли;
		Если АдресСервиса = Неопределено Тогда
			Результат.Вставить("АдресСервиса", "");
		Иначе
			Результат.Вставить("АдресСервиса", АдресСервиса);
		КонецЕсли;
	Иначе
		Возврат Результат.Вставить("АдресСервиса", "");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыЛокальногоСервисаРасчетаЧеков(Тест = Ложь) Экспорт
	
	Регион = ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
		
	Результат = Новый Структура;
	Результат.Вставить("ИспользоватьПрокси"	, Ложь);
	Результат.Вставить("ПроксиСервер"		, "");
	Результат.Вставить("ПроксиПорт"			, "");
	Результат.Вставить("ПроксиПользователь"	, "");
	Результат.Вставить("ПроксиПароль"		, "");
	Результат.Вставить("Таймаут"			, 10);
	//Результат.Вставить("ИспользоватьПрокси"	, Истина);
	//Результат.Вставить("ПроксиСервер"		, "tmg.cd.local");
	//Результат.Вставить("ПроксиПорт"			, 8080);
	
	Если Тест Тогда
		АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Локальный_ТЕСТ");
		Результат.Вставить("АдресСервиса", АдресСервиса);
	Иначе
		АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Локальный");
		Результат.Вставить("АдресСервиса", АдресСервиса);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции


Функция ОтправитьЗапросКСервисуКеГеЛьБУМ(СтрокаJSON) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	АдресСервиса	= "http://v8test/loyality_service/ws/kegelbum?wsdl";
	Таймаут			= 10;
	
	//Если ПустаяСтрока(АдресСервиса) ИЛИ ПустаяСтрока(ИмяКоманды) Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	ИнтернетПрокси = Неопределено;
	//ИнтернетПрокси = Новый ИнтернетПрокси;
	//ИнтернетПрокси.Установить("http", ТекущийСервисРасчетаЧека.ПроксиСервер, ТекущийСервисРасчетаЧека.ПроксиПорт);
	//ИнтернетПрокси.Пользователь	= ТекущийСервисРасчетаЧека.ПроксиПользователь;
	//ИнтернетПрокси.Пароль		= ТекущийСервисРасчетаЧека.ПроксиПароль;
		
	Попытка

		Определение = Новый WSОпределения(АдресСервиса,,,ИнтернетПрокси, Таймаут);
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "kegelbum", "kegelbumSoap", ИнтернетПрокси, Таймаут);
		
		СтруктураВозврата.Вставить("Ответ"	, Прокси.kkm_request(СтрокаJSON));
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ОтправитьЗапросКСервисуРасчетаЧеков(СтрокаJSON, Команда, Тест = Ложь) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	Если ПустаяСтрока(Команда) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не указана команда сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТекущийСервисРасчетаЧека = ПолучитьПараметрыСервисаРасчетаЧеков(Тест);
	
	Если ПустаяСтрока(ТекущийСервисРасчетаЧека.АдресСервиса) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Таймаут = ТекущийСервисРасчетаЧека.Таймаут;
	
	ИнтернетПрокси = Неопределено;
	Если ТекущийСервисРасчетаЧека.ИспользоватьПрокси Тогда
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Установить("http", ТекущийСервисРасчетаЧека.ПроксиСервер, ТекущийСервисРасчетаЧека.ПроксиПорт);
		ИнтернетПрокси.Пользователь	= ТекущийСервисРасчетаЧека.ПроксиПользователь;
		ИнтернетПрокси.Пароль		= ТекущийСервисРасчетаЧека.ПроксиПароль;
	КонецЕсли;
		
	Попытка
		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Определение = Новый WSОпределения(ТекущийСервисРасчетаЧека.АдресСервиса,,,ИнтернетПрокси, Таймаут);
		
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОстатокТаймаута = Таймаут - (ОкончаниеВыполнения - НачалоВыполнения)/1000;
		Если ОстатокТаймаута < 1 Тогда
			ВызватьИсключение "Истекло время ожидания (таймаут="+Таймаут+")";
		КонецЕсли;
		Если Таймаут <> Окр(ОстатокТаймаута,0) Тогда
			Таймаут = Окр(ОстатокТаймаута,0)+1;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "Check", "CheckSoap", ИнтернетПрокси, Таймаут);
		
		Если ВРег(Команда) = "ORDER" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.order(СтрокаJSON));
		ИначеЕсли ВРег(Команда) = "CALC" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.calc(СтрокаJSON));
		ИначеЕсли ВРег(Команда) = "KKM_STATUS" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.kkm_status(СтрокаJSON));
		ИначеЕсли ВРег(Команда) = "PRICE_LIST" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.price_list(СтрокаJSON));
		Иначе
			СтруктураВозврата.Вставить("Ошибка"	, Истина);
			СтруктураВозврата.Вставить("Ответ"	, "неверно указана команда сервиса");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ОтправитьЗапросКСервисуРасчетаЧеков_Протокол2(СтрокаJSON, Команда, Тест = Ложь) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	Если ПустаяСтрока(Команда) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не указана команда сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТекущийСервисРасчетаЧека = ПолучитьПараметрыСервисаРасчетаЧеков(Тест);
	
	Если ПустаяСтрока(ТекущийСервисРасчетаЧека.АдресСервиса) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Таймаут = ТекущийСервисРасчетаЧека.Таймаут;
	
	ИнтернетПрокси = Неопределено;
	Если ТекущийСервисРасчетаЧека.ИспользоватьПрокси Тогда
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Установить("http", ТекущийСервисРасчетаЧека.ПроксиСервер, ТекущийСервисРасчетаЧека.ПроксиПорт);
		ИнтернетПрокси.Пользователь	= ТекущийСервисРасчетаЧека.ПроксиПользователь;
		ИнтернетПрокси.Пароль		= ТекущийСервисРасчетаЧека.ПроксиПароль;
	КонецЕсли;
		
	Попытка
		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Определение = Новый WSОпределения(ТекущийСервисРасчетаЧека.АдресСервиса,,,ИнтернетПрокси, Таймаут);
		
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОстатокТаймаута = Таймаут - (ОкончаниеВыполнения - НачалоВыполнения)/1000;
		Если ОстатокТаймаута < 1 Тогда
			ВызватьИсключение "Истекло время ожидания (таймаут="+Таймаут+")";
		КонецЕсли;
		Если Таймаут <> Окр(ОстатокТаймаута,0) Тогда
			Таймаут = Окр(ОстатокТаймаута,0)+1;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "Check", "CheckSoap", ИнтернетПрокси, Таймаут);
		
		Если ВРег(Команда) = "CALC" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.calc(СтрокаJSON));
		ИначеЕсли ВРег(Команда) = "KKM_STATUS" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.kkm_status(СтрокаJSON));
		Иначе
			СтруктураВозврата.Вставить("Ошибка"	, Истина);
			СтруктураВозврата.Вставить("Ответ"	, "неверно указана команда сервиса");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ОтправитьЗапросКСервисуРасчетаЧеков_Протокол3(СтрокаJSON, Команда, Тест = Ложь) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	Если ПустаяСтрока(Команда) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не указана команда сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТекущийСервисРасчетаЧека = ПолучитьПараметрыСервисаРасчетаЧеков(Тест);
	
	Если ПустаяСтрока(ТекущийСервисРасчетаЧека.АдресСервиса) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Таймаут = ТекущийСервисРасчетаЧека.Таймаут;
	
	ИнтернетПрокси = Неопределено;
	Если ТекущийСервисРасчетаЧека.ИспользоватьПрокси Тогда
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Установить("http", ТекущийСервисРасчетаЧека.ПроксиСервер, ТекущийСервисРасчетаЧека.ПроксиПорт);
		ИнтернетПрокси.Пользователь	= ТекущийСервисРасчетаЧека.ПроксиПользователь;
		ИнтернетПрокси.Пароль		= ТекущийСервисРасчетаЧека.ПроксиПароль;
	КонецЕсли;
		
	Попытка
		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Определение = Новый WSОпределения(ТекущийСервисРасчетаЧека.АдресСервиса,,,ИнтернетПрокси, Таймаут);
		
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОстатокТаймаута = Таймаут - (ОкончаниеВыполнения - НачалоВыполнения)/1000;
		Если ОстатокТаймаута < 1 Тогда
			ВызватьИсключение "Истекло время ожидания (таймаут="+Таймаут+")";
		КонецЕсли;
		Если Таймаут <> Окр(ОстатокТаймаута,0) Тогда
			Таймаут = Окр(ОстатокТаймаута,0)+1;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "Check", "CheckSoap", ИнтернетПрокси, Таймаут);
		
		Если ВРег(Команда) = "ORDER" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.order(СтрокаJSON));
		Иначе
			СтруктураВозврата.Вставить("Ошибка"	, Истина);
			СтруктураВозврата.Вставить("Ответ"	, "неверно указана команда сервиса");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ОтправитьЗапросКЛокальномуСервисуРасчетаЧеков_Протокол2(СтрокаJSON, Команда, Тест = Ложь) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	Если ПустаяСтрока(Команда) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не указана команда сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТекущийСервисРасчетаЧека = ПолучитьПараметрыЛокальногоСервисаРасчетаЧеков(Тест);
	
	Если ПустаяСтрока(ТекущийСервисРасчетаЧека.АдресСервиса) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Таймаут = ТекущийСервисРасчетаЧека.Таймаут;
	
	ИнтернетПрокси = Неопределено;
	Если ТекущийСервисРасчетаЧека.ИспользоватьПрокси Тогда
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Установить("http", ТекущийСервисРасчетаЧека.ПроксиСервер, ТекущийСервисРасчетаЧека.ПроксиПорт);
		ИнтернетПрокси.Пользователь	= ТекущийСервисРасчетаЧека.ПроксиПользователь;
		ИнтернетПрокси.Пароль		= ТекущийСервисРасчетаЧека.ПроксиПароль;
	КонецЕсли;
		
	Попытка
		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Определение = Новый WSОпределения(ТекущийСервисРасчетаЧека.АдресСервиса,,,ИнтернетПрокси, Таймаут);
		
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОстатокТаймаута = Таймаут - (ОкончаниеВыполнения - НачалоВыполнения)/1000;
		Если ОстатокТаймаута < 1 Тогда
			ВызватьИсключение "Истекло время ожидания (таймаут="+Таймаут+")";
		КонецЕсли;
		Если Таймаут <> Окр(ОстатокТаймаута,0) Тогда
			Таймаут = Окр(ОстатокТаймаута,0)+1;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "Check", "CheckSoap", ИнтернетПрокси, Таймаут);
		
		Если ВРег(Команда) = "CALC" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.calc(СтрокаJSON));
		ИначеЕсли ВРег(Команда) = "KKM_STATUS" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.kkm_status(СтрокаJSON));
		Иначе
			СтруктураВозврата.Вставить("Ошибка"	, Истина);
			СтруктураВозврата.Вставить("Ответ"	, "неверно указана команда сервиса");
			Возврат СтруктураВозврата;
		КонецЕсли;
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции


// параметры
// РежимОтправки:
//	0 - центр
//	1 - локальный
Функция ПолучитьПараметрыСервиса_УДАЛИТЬ(РежимОтправки = 0, Тест = Ложь) ЭКСПОРТ
	
	Регион	= ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	ТекИБ	= ПараметрыСеанса.ТекущаяИБ;
	
	Результат = Новый Структура;
	
	Если Тест Тогда
		
		Если		РежимОтправки = 0 Тогда
			
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_ТЕСТ");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			//Результат.Вставить("ИспользоватьПрокси"	, Истина);
			//Результат.Вставить("ПроксиСервер"		, "tmg.cd.local");
			//Результат.Вставить("ПроксиПорт"			, 8080);
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 10);
			
		ИначеЕсли	РежимОтправки = 1 Тогда
			
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Локальный", ТекИБ);
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			//Результат.Вставить("ИспользоватьПрокси"	, Истина);
			//Результат.Вставить("ПроксиСервер"		, "tmg.cd.local");
			//Результат.Вставить("ПроксиПорт"			, 8080);
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 5);
			
		ИначеЕсли	РежимОтправки = 2 Тогда
			
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_ТЕСТ");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "kkm_status");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			//Результат.Вставить("ИспользоватьПрокси"	, Истина);
			//Результат.Вставить("ПроксиСервер"		, "tmg.cd.local");
			//Результат.Вставить("ПроксиПорт"			, 8080);
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 10);

			
		КонецЕсли;
		
	ИначеЕсли		ПараметрыСеанса.ТекущаяИБ.Регион = Справочники.Регионы.Р52 Тогда 
		Если		РежимОтправки = 0 Тогда
			
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_52");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 10);
			
		ИначеЕсли	РежимОтправки = 1 Тогда
			
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Локальный", ТекИБ);
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 5);
			
		ИначеЕсли	РежимОтправки = 2 Тогда
			
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_52");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "kkm_status");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 5);
			
		КонецЕсли;
	ИначеЕсли	ПараметрыСеанса.ТекущаяИБ.Регион = Справочники.Регионы.Р77 Тогда 
		Если РежимОтправки = 0 Тогда
			
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_77");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 10);
			
		ИначеЕсли	РежимОтправки = 1 Тогда
			
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Локальный", ТекИБ);
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 5);
			
		ИначеЕсли	РежимОтправки = 2 Тогда
			
			АдресСервиса = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_СервисРасчетаЧеков_Центральный_77");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "kkm_status");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 5);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
Функция ПолучитьПараметрыСервиса_77_УДАЛИТЬ()
	Результат = Новый Структура;
	Результат.Вставить("АдресСервиса"		, "http://proc77.msk.coolclever.ru:85/check/ws/check?wsdl");
	//Результат.Вставить("АдресСервиса"		, "http://p77.msk.local/check/ws/check?wsdl");
	Результат.Вставить("ИмяКоманды"			, "calc");
	Результат.Вставить("ИспользоватьПрокси"	, Ложь);
	Результат.Вставить("ПроксиСервер"		, "10.1.0.15");
	Результат.Вставить("ПроксиПорт"			, 8080);
	Результат.Вставить("ПроксиПользователь"	, "cd\user");
	Результат.Вставить("ПроксиПароль"		, "password");
	Результат.Вставить("Таймаут"			, 10);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьПараметрыСервиса_52_УДАЛИТЬ()
	Результат = Новый Структура;
	Результат.Вставить("АдресСервиса"		, "http://p52/check/ws/check?wsdl");
	Результат.Вставить("ИмяКоманды"			, "calc");
	Результат.Вставить("ИспользоватьПрокси"	, Ложь);
	Результат.Вставить("ПроксиСервер"		, "");
	Результат.Вставить("ПроксиПорт"			, "");
	Результат.Вставить("ПроксиПользователь"	, "");
	Результат.Вставить("ПроксиПароль"		, "");
	Результат.Вставить("Таймаут"			, 10);
	
	Возврат Результат;
КонецФункции

Функция ОтправитьЧекНаОбработку_Протокол2_УДАЛИТЬ(СтрокаJSON, РежимОтправки = 0, Тест = Ложь) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	ТекущийСервисРасчетаЧека = ПолучитьПараметрыСервисаРасчетаЧеков(Тест);
	
	Если ПустаяСтрока(ТекущийСервисРасчетаЧека.АдресСервиса) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	АдресСервиса = ТекущийСервисРасчетаЧека.АдресСервиса + "/check_v2/ws/check?wsdl";
	ИмяКоманды		= ТекущийСервисРасчетаЧека.ИмяКоманды;
	Таймаут			= ТекущийСервисРасчетаЧека.Таймаут;
	
	Если ПустаяСтрока(АдресСервиса) ИЛИ ПустаяСтрока(ИмяКоманды) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ИнтернетПрокси = Неопределено;
	Если ТекущийСервисРасчетаЧека.ИспользоватьПрокси Тогда
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Установить("http", ТекущийСервисРасчетаЧека.ПроксиСервер, ТекущийСервисРасчетаЧека.ПроксиПорт);
		ИнтернетПрокси.Пользователь	= ТекущийСервисРасчетаЧека.ПроксиПользователь;
		ИнтернетПрокси.Пароль		= ТекущийСервисРасчетаЧека.ПроксиПароль;
	КонецЕсли;
		
	Попытка

		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Определение = Новый WSОпределения(АдресСервиса,,,ИнтернетПрокси, Таймаут);
		
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОстатокТаймаута = Таймаут - (ОкончаниеВыполнения - НачалоВыполнения)/1000;
		Если ОстатокТаймаута < 1 Тогда
			ВызватьИсключение "Истекло время ожидания (таймаут="+Таймаут+")";
		КонецЕсли;
		Если Таймаут <> Окр(ОстатокТаймаута,0) Тогда
			Таймаут = Окр(ОстатокТаймаута,0)+1;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "Check", "CheckSoap", ИнтернетПрокси, Таймаут);
		
		Если ИмяКоманды = "calc" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.calc(СтрокаJSON));
		ИначеЕсли ИмяКоманды = "calc_test" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.calc_test(СтрокаJSON));
		ИначеЕсли ИмяКоманды = "kkm_status" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.kkm_status(СтрокаJSON));
		КонецЕсли;
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ОтправитьЧекНаОбработку_Протокол3_УДАЛИТЬ(СтрокаJSON, РежимОтправки = 0, Тест = Ложь) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	ТекущийСервисРасчетаЧека = ПолучитьПараметрыСервисаРасчетаЧеков(Тест);
	
	Если ПустаяСтрока(ТекущийСервисРасчетаЧека.АдресСервиса) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	АдресСервиса = ТекущийСервисРасчетаЧека.АдресСервиса + "/check_v3/ws/check?wsdl";
	Таймаут = ТекущийСервисРасчетаЧека.Таймаут;
	
	ИнтернетПрокси = Неопределено;
	Если ТекущийСервисРасчетаЧека.ИспользоватьПрокси Тогда
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Установить("http", ТекущийСервисРасчетаЧека.ПроксиСервер, ТекущийСервисРасчетаЧека.ПроксиПорт);
		ИнтернетПрокси.Пользователь	= ТекущийСервисРасчетаЧека.ПроксиПользователь;
		ИнтернетПрокси.Пароль		= ТекущийСервисРасчетаЧека.ПроксиПароль;
	КонецЕсли;
		
	Попытка
		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Определение = Новый WSОпределения(АдресСервиса,,,ИнтернетПрокси, ТекущийСервисРасчетаЧека.Таймаут);
		
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОстатокТаймаута = Таймаут - (ОкончаниеВыполнения - НачалоВыполнения)/1000;
		Если ОстатокТаймаута < 1 Тогда
			ВызватьИсключение "Истекло время ожидания (таймаут="+ТекущийСервисРасчетаЧека.Таймаут+")";
		КонецЕсли;
		Если Таймаут <> Окр(ОстатокТаймаута,0) Тогда
			Таймаут = Окр(ОстатокТаймаута,0)+1;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "Check", "CheckSoap", ИнтернетПрокси, Таймаут);
		
		СтруктураВозврата.Вставить("Ответ"	, Прокси.order(СтрокаJSON));
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции


Функция СформироватьJSONДляВозврата_Протокол5(Данные, Тест)
		
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	НомерКарты = Данные.Возврат.НомерКартыЛояльности;
		
	СтрокиЗаказа = Новый Массив;

	Выборка = Данные.Товары;
	Пока Выборка.Следующий() Цикл
					
		СтрокаЧека = Новый Структура;
		
		СтрокаЧека.Вставить("str_type"			, "T");
		СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			
		СтрокаЧека.Вставить("mol"				, Данные.Протокол.КодКассира);
		СтрокаЧека.Вставить("sale_place"		, Выборка.МестоРеализации);
		
		//СтрокаЧека.Вставить("pay_status"		, Выборка.СтатусОплаты);
		
		СтрокаЧека.Вставить("loyality_status"	, 0);
		СтрокаЧека.Вставить("action_status"		, 0);
		СтрокаЧека.Вставить("action_status_d"	, "");
		СтрокаЧека.Вставить("action_group"		, 0);
		СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
		СтрокаЧека.Вставить("product_code"		, Выборка.Код);
		СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
		СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
		СтрокаЧека.Вставить("price"				, Выборка.Цена);
		СтрокаЧека.Вставить("price_fact"		, Выборка.ЦенаФакт);
		СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
		СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.СуммаФакт, 2));
		СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
		СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
		
		СтрокиЗаказа.Добавить(СтрокаЧека);
	КонецЦикла;
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "RETURN");
	Запрос.Вставить("status", Данные.Протокол.СтатусЛояльности);
	Запрос.Вставить("protocol_version", 5);
	//###
	//Запрос.Вставить("station_type", Станция);
	Запрос.Вставить("station_type", 0);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
			
	ККМ = Данные.Протокол.ККМ;
	НомерСмены = Данные.Протокол.НомерСмены;
	НомерЧека = Данные.Протокол.НомерЧека;
	Если Тест Тогда
		Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
			НомерСмены = Число(Формат(Данные.Возврат.Дата, "ДФ=ddHH"));
		КонецЕсли;
		Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
			//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
			НомерЧека = Число(Прав(СокрЛП(Данные.Возврат.Номер),3));
		КонецЕсли;
		Если ПустаяСтрока(ККМ) Тогда
			ККМ = "337";
		КонецЕсли;
	Иначе
		// Нужна проверка на заполненность ККМ, Смены и номера чека, а также тип чека лояльности <> 0
		Если НомерСмены = 0 ИЛИ НомерЧека = 0 ИЛИ ККМ = 0 Тогда
			СтруктураОтвета.Ошибка = Истина;
			СтруктураОтвета.ТекстОшибки = "Не определены параметры ККМ: НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ;
			Возврат СтруктураОтвета;
		КонецЕсли;
	КонецЕсли;
		
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("request_id"	, Данные.Протокол.ИдентификаторЛояльности);
	ДанныеЗаказа.Вставить("tt"			, ?(ТТ=Неопределено,"",ТТ));
	ДанныеЗаказа.Вставить("sale_place"	, Данные.Протокол.МестоРеализации);
	ДанныеЗаказа.Вставить("kkm"			, ККМ);
	ДанныеЗаказа.Вставить("shift"		, НомерСмены);
	ДанныеЗаказа.Вставить("check_number", НомерЧека);
	
	ДанныеЗаказа.Вставить("order_date"	, Данные.Возврат.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(Данные.Возврат.Номер));
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str"	, СтрокиЗаказа);
	ДанныеЗаказа.Вставить("pay"			, ПолучитьМассивОплаты_Протокол4(Данные.Протокол.Ссылка, Истина));
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции

Функция СформироватьJSONДляВозврата_Протокол4(Данные, Тест)
		
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	НомерКарты = Данные.Возврат.НомерКартыЛояльности;
		
	СтрокиЗаказа = Новый Массив;

	Выборка = Данные.Товары;
	Пока Выборка.Следующий() Цикл
					
		СтрокаЧека = Новый Структура;
		
		СтрокаЧека.Вставить("str_type"			, "T");
		СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			
		СтрокаЧека.Вставить("mol"				, Данные.Протокол.КодКассира);
		СтрокаЧека.Вставить("sale_place"		, Выборка.МестоРеализации);
		
		//СтрокаЧека.Вставить("pay_status"		, Выборка.СтатусОплаты);
		
		СтрокаЧека.Вставить("loyality_status"	, 0);
		СтрокаЧека.Вставить("action_status"		, 0);
		СтрокаЧека.Вставить("action_status_d"	, "");
		СтрокаЧека.Вставить("action_group"		, 0);
		СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
		СтрокаЧека.Вставить("product_code"		, Выборка.Код);
		СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
		СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
		СтрокаЧека.Вставить("price"				, Выборка.Цена);
		СтрокаЧека.Вставить("price_fact"		, Выборка.ЦенаФакт);
		СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
		СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.СуммаФакт, 2));
		СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
		СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
		
		СтрокиЗаказа.Добавить(СтрокаЧека);
	КонецЦикла;
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "RETURN");
	Запрос.Вставить("status", Данные.Протокол.СтатусЛояльности);
	Запрос.Вставить("protocol_version", 4);
	//###
	//Запрос.Вставить("station_type", Станция);
	Запрос.Вставить("station_type", 0);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
			
	ККМ = Данные.Протокол.ККМ;
	НомерСмены = Данные.Протокол.НомерСмены;
	НомерЧека = Данные.Протокол.НомерЧека;
	Если Тест Тогда
		Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
			НомерСмены = Число(Формат(Данные.Возврат.Дата, "ДФ=ddHH"));
		КонецЕсли;
		Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
			//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
			НомерЧека = Число(Прав(СокрЛП(Данные.Возврат.Номер),3));
		КонецЕсли;
		Если ПустаяСтрока(ККМ) Тогда
			ККМ = "337";
		КонецЕсли;
	Иначе
		// Нужна проверка на заполненность ККМ, Смены и номера чека, а также тип чека лояльности <> 0
		Если НомерСмены = 0 ИЛИ НомерЧека = 0 ИЛИ ККМ = 0 Тогда
			СтруктураОтвета.Ошибка = Истина;
			СтруктураОтвета.ТекстОшибки = "Не определены параметры ККМ: НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ;
			Возврат СтруктураОтвета;
		КонецЕсли;
	КонецЕсли;
		
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("request_id"	, Данные.Протокол.ИдентификаторЛояльности);
	ДанныеЗаказа.Вставить("tt"			, ?(ТТ=Неопределено,"",ТТ));
	ДанныеЗаказа.Вставить("sale_place"	, Данные.Протокол.МестоРеализации);
	ДанныеЗаказа.Вставить("kkm"			, ККМ);
	ДанныеЗаказа.Вставить("shift"		, НомерСмены);
	ДанныеЗаказа.Вставить("check_number", НомерЧека);
	
	ДанныеЗаказа.Вставить("order_date"	, Данные.Возврат.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(Данные.Возврат.Номер));
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str"	, СтрокиЗаказа);
	ДанныеЗаказа.Вставить("pay"			, ПолучитьМассивОплаты_Протокол4(Данные.Протокол.Ссылка, Истина));
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции

Функция СформироватьJSONДляФинализацииЗаказа_Протокол5(Данные, ДанныеЛояльностиПоЗаказу=Неопределено, Тест)
		
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
#Если Сервер Тогда
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Данные.Заказ.Ссылка, "INFO");
	КонецЕсли;		
#КонецЕсли
		
	НомерКарты = Данные.Заказ.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиЗаказа = Новый Массив;

	Данные_Товары = Данные.Товары;	
	Пока Данные_Товары.Следующий() Цикл
		Если Данные_Товары.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = Данные_Товары.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("mol"				, Данные.Протокол.КодКассира);
			СтрокаЧека.Вставить("sale_place"		, Выборка.МестоРеализации);
			
			//СтрокаЧека.Вставить("pay_status"		, Выборка.СтатусОплаты);
			
			//### Нужно подставлять из заказа !!!
			СтрокаЧека.Вставить("loyality_status"	, 0);//СтрТов.ЛояльностьСтатус);
			СтрокаЧека.Вставить("action_status"		, 0);//СтрТов.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_status_d"	, "");//СтрТов.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.ЦенаФакт);
			СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
			СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.СуммаФакт, 2));
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "SALE");
	Запрос.Вставить("status", Данные.Протокол.СтатусЛояльности);
	Запрос.Вставить("protocol_version", 5);
	//###
	//Запрос.Вставить("station_type", Станция);
	Запрос.Вставить("station_type", 0);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	ДанныеЗаказа.Вставить("order_type"	, ?(Данные.Протокол.ТипЧекаЛояльность=0,1,Данные.Протокол.ТипЧекаЛояльность));
		
	ККМ = Данные.Протокол.ККМ;
	НомерСмены = Данные.Протокол.НомерСмены;
	НомерЧека = Данные.Протокол.НомерЧека;
	Если Тест Тогда
		Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
			//НомерСмены = Число(Формат(Данные.Заказ.Дата, "ДФ=ddHH"));
			НомерСмены = Число(Формат(Данные.Протокол.Дата, "ДФ=mmss"));
		КонецЕсли;
		Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
			//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
			НомерЧека = Число(Прав(СокрЛП(Данные.Заказ.Номер),3));
		КонецЕсли;
		Если ПустаяСтрока(ККМ) Тогда
			ККМ = "337";
		КонецЕсли;
	Иначе
		// Нужна проверка на заполненность ККМ, Смены и номера чека, а также тип чека лояльности <> 0
		//Если Данные.Протокол.ТипЧекаЛояльность = 0 Тогда
		//	СтруктураОтвета.Ошибка = Истина;
		//	СтруктураОтвета.ТекстОшибки = "Не определен тип чека лояльности";
		//	Возврат СтруктураОтвета;
		//КонецЕсли;
		Если НомерСмены = 0 ИЛИ НомерЧека = 0 ИЛИ ККМ = 0 Тогда
			СтруктураОтвета.Ошибка = Истина;
			СтруктураОтвета.ТекстОшибки = "Не определены параметры ККМ: НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ;
			Возврат СтруктураОтвета;
		КонецЕсли;
	КонецЕсли;
		
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("request_id", Данные.Протокол.ИдентификаторЛояльности);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	ДанныеЗаказа.Вставить("sale_place"	, Данные.Протокол.МестоРеализации);
	ДанныеЗаказа.Вставить("kkm"			, ККМ);
	ДанныеЗаказа.Вставить("shift"		, НомерСмены);
	ДанныеЗаказа.Вставить("check_number", НомерЧека);
	ДанныеЗаказа.Вставить("cheсk_date"	, Данные.Протокол.Дата);
	
	ДанныеЗаказа.Вставить("order_date"	, Данные.Заказ.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(Данные.Заказ.Номер));
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str"	, СтрокиЗаказа);
	ДанныеЗаказа.Вставить("pay"			, ПолучитьМассивОплаты_Протокол4(Данные.Протокол.Ссылка));
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции

Функция СформироватьJSONДляФинализацииЗаказа_Протокол4(Данные, ДанныеЛояльностиПоЗаказу=Неопределено, Тест)
		
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
#Если Сервер Тогда
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Данные.Заказ.Ссылка, "INFO");
	КонецЕсли;		
#КонецЕсли
		
	НомерКарты = Данные.Заказ.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиЗаказа = Новый Массив;

	Данные_Товары = Данные.Товары;	
	Пока Данные_Товары.Следующий() Цикл
		Если Данные_Товары.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = Данные_Товары.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("mol"				, Данные.Протокол.КодКассира);
			СтрокаЧека.Вставить("sale_place"		, Выборка.МестоРеализации);
			
			//СтрокаЧека.Вставить("pay_status"		, Выборка.СтатусОплаты);
			
			//### Нужно подставлять из заказа !!!
			СтрокаЧека.Вставить("loyality_status"	, 0);//СтрТов.ЛояльностьСтатус);
			СтрокаЧека.Вставить("action_status"		, 0);//СтрТов.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_status_d"	, "");//СтрТов.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_group"		, 0);//СтрТов.ЛояльностьДопСтатусАкции);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.ЦенаФакт);
			СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
			СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.СуммаФакт, 2));
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "SALE");
	Запрос.Вставить("status", Данные.Протокол.СтатусЛояльности);
	Запрос.Вставить("protocol_version", 4);
	//###
	//Запрос.Вставить("station_type", Станция);
	Запрос.Вставить("station_type", 0);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	ДанныеЗаказа.Вставить("order_type"	, ?(Данные.Протокол.ТипЧекаЛояльность=0,1,Данные.Протокол.ТипЧекаЛояльность));
		
	ККМ = Данные.Протокол.ККМ;
	НомерСмены = Данные.Протокол.НомерСмены;
	НомерЧека = Данные.Протокол.НомерЧека;
	Если Тест Тогда
		Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
			НомерСмены = Число(Формат(Данные.Заказ.Дата, "ДФ=ddHH"));
		КонецЕсли;
		Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
			//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
			НомерЧека = Число(Прав(СокрЛП(Данные.Заказ.Номер),3));
		КонецЕсли;
		Если ПустаяСтрока(ККМ) Тогда
			ККМ = "337";
		КонецЕсли;
	Иначе
		// Нужна проверка на заполненность ККМ, Смены и номера чека, а также тип чека лояльности <> 0
		//Если Данные.Протокол.ТипЧекаЛояльность = 0 Тогда
		//	СтруктураОтвета.Ошибка = Истина;
		//	СтруктураОтвета.ТекстОшибки = "Не определен тип чека лояльности";
		//	Возврат СтруктураОтвета;
		//КонецЕсли;
		Если НомерСмены = 0 ИЛИ НомерЧека = 0 ИЛИ ККМ = 0 Тогда
			СтруктураОтвета.Ошибка = Истина;
			СтруктураОтвета.ТекстОшибки = "Не определены параметры ККМ: НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ;
			Возврат СтруктураОтвета;
		КонецЕсли;
	КонецЕсли;
		
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("request_id", Данные.Протокол.ИдентификаторЛояльности);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	ДанныеЗаказа.Вставить("sale_place"	, Данные.Протокол.МестоРеализации);
	ДанныеЗаказа.Вставить("kkm"			, ККМ);
	ДанныеЗаказа.Вставить("shift"		, НомерСмены);
	ДанныеЗаказа.Вставить("check_number", НомерЧека);
	
	ДанныеЗаказа.Вставить("order_date", Данные.Протокол.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(Данные.Заказ.Номер));
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str"	, СтрокиЗаказа);
	ДанныеЗаказа.Вставить("pay"			, ПолучитьМассивОплаты_Протокол4(Данные.Протокол.Ссылка));
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции

Функция СформироватьJSONДляЗакрытияЗаказа_Протокол5(Данные, ДанныеЛояльностиПоЗаказу=Неопределено, Тест = Ложь) Экспорт
		
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	//### В заказ записывать исходный номер карты, а в INFO хранить расшифровку
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Данные.Заказ.Ссылка, "INFO");
	КонецЕсли;		
		
	НомерКарты = Данные.Заказ.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиЗаказа = Новый Массив;

	Данные_Товары = Данные.Товары;	
	Пока Данные_Товары.Следующий() Цикл
		Если Данные_Товары.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = Данные_Товары.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			//СтрокаЧека.Вставить("mol"				, Данные.Протокол.КодКассира);
			СтрокаЧека.Вставить("sale_place"		, Выборка.МестоРеализации);
			СтрокаЧека.Вставить("request_id"		, Выборка.ИдентификаторЛояльности);
			
			СтрокаЧека.Вставить("loyality_status"	, Выборка.ЛояльностьСтатус);
			СтрокаЧека.Вставить("action_status"		, Выборка.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_status_d"	, Выборка.ЛояльностьДопСтатусАкции);
			СтрокаЧека.Вставить("action_group"		, Выборка.ЛояльностьГруппаАкции);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.ЦенаФакт);
			СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
			СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.СуммаФакт, 2));
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	СтрокиОплат = Новый Массив;
	Для каждого ТекущаяСтрока Из Данные.СписокПротоколов Цикл
		Если Не ПустаяСтрока(ТекущаяСтрока.ИдентификаторЛояльности) Тогда
			НоваяСтрока = Новый Структура;
			
			ККМ = ТекущаяСтрока.ККМ;
			НомерСмены = ТекущаяСтрока.НомерСмены;
			НомерЧека = ТекущаяСтрока.НомерЧека;			
			Если Тест Тогда
				Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
					НомерСмены = Число(Формат(Данные.Заказ.Дата, "ДФ=ddHH"));
				КонецЕсли;
				Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
					НомерЧека = Число(Прав(СокрЛП(Данные.Заказ.Номер),3));
				КонецЕсли;
				Если ПустаяСтрока(ККМ) Тогда
					ККМ = "337";
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.Вставить("request_id"	, ТекущаяСтрока.ИдентификаторЛояльности);
			НоваяСтрока.Вставить("request_type"	, ТекущаяСтрока.ТипЧекаЛояльность);
			НоваяСтрока.Вставить("sale_place"	, ТекущаяСтрока.МестоРеализации);
			НоваяСтрока.Вставить("kkm"			, ККМ);
			НоваяСтрока.Вставить("shift"		, НомерСмены);
			НоваяСтрока.Вставить("check_number"	, НомерЧека);
			
			СтрокиОплат.Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Структура;
	
	//Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "CLOSE");
	Запрос.Вставить("protocol_version", 5);
	Запрос.Вставить("loyality_version", ЛояльностьКлиентСервер.ВерсияЛояльности(Тест));
	Запрос.Вставить("station_type", 0);
	Запрос.Вставить("status", 0);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("coupons", Купоны);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	Для Каждого ТекущийКупон ИЗ Данные.Купоны Цикл
		СтрокаКупонов = Новый Структура;
		СтрокаКупонов.Вставить("code", ТекущийКупон.Купон);
		СтрокаКупонов.Вставить("type", ТекущийКупон.ТипКупона);
		СтрокаКупонов.Вставить("status", ТекущийКупон.СтатусКупона);
		Купоны.Добавить(СтрокаКупонов);
	КонецЦикла;	
	
	ДанныеЗаказа = Запрос.order;
	
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ДанныеЗаказа.Вставить("order_date", Данные.Заказ.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(Данные.Заказ.Номер));
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");
	ДанныеЗаказа.Вставить("sales"		, СтрокиОплат);
	ДанныеЗаказа.Вставить("order_str"	, СтрокиЗаказа);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции

Функция СформироватьJSONДляЗакрытияЗаказа_Протокол4(Данные, ДанныеЛояльностиПоЗаказу=Неопределено, Тест = Ложь)
		
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	//### В заказ записывать исходный номер карты, а в INFO хранить расшифровку
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Данные.Заказ.Ссылка, "INFO");
	КонецЕсли;		
		
	НомерКарты = Данные.Заказ.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиЗаказа = Новый Массив;

	Данные_Товары = Данные.Товары;	
	Пока Данные_Товары.Следующий() Цикл
		Если Данные_Товары.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = Данные_Товары.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("mol"				, Данные.Протокол.КодКассира);
			СтрокаЧека.Вставить("sale_place"		, Выборка.МестоРеализации);
			
			СтрокаЧека.Вставить("loyality_status"	, Выборка.ЛояльностьСтатус);
			СтрокаЧека.Вставить("action_status"		, Выборка.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_status_d"	, Выборка.ЛояльностьДопСтатусАкции);
			СтрокаЧека.Вставить("action_group"		, Выборка.ЛояльностьГруппаАкции);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.ЦенаФакт);
			СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
			СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.СуммаФакт, 2));
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	СтрокиОплат = Новый Массив;
	Для каждого ТекущаяСтрока Из Данные.СписокПротоколов Цикл
		Если Не ПустаяСтрока(ТекущаяСтрока.ИдентификаторЛояльности) Тогда
			НоваяСтрока = Новый Структура("request_id, request_type", ТекущаяСтрока.ИдентификаторЛояльности, ТекущаяСтрока.ТипЧека);
			СтрокиОплат.Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "CLOSE");
	Запрос.Вставить("status", Данные.Протокол.СтатусЛояльности);
	Запрос.Вставить("protocol_version", 4);
	//###
	//Запрос.Вставить("station_type", Станция);
	Запрос.Вставить("station_type", 0);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	ДанныеЗаказа.Вставить("order_type"	, Данные.Протокол.ТипЧекаЛояльность);
		
	ККМ = Данные.Протокол.ККМ;
	НомерСмены = Данные.Протокол.НомерСмены;
	НомерЧека = Данные.Протокол.НомерЧека;
	
	Если Тест Тогда
		Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
			НомерСмены = Число(Формат(Данные.Заказ.Дата, "ДФ=ddHH"));
		КонецЕсли;
		Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
			НомерЧека = Число(Прав(СокрЛП(Данные.Заказ.Номер),3));
		КонецЕсли;
		Если ПустаяСтрока(ККМ) Тогда
			ККМ = "337";
		КонецЕсли;
	Иначе
		// Нужна проверка на заполненность ККМ, Смены и номера чека, а также тип чека лояльности <> 0
		Если Данные.Протокол.ТипЧекаЛояльность = 0 Тогда
			СтруктураОтвета.Ошибка = Истина;
			СтруктураОтвета.ТекстОшибки = "Не определен тип чека лояльности";
			Возврат СтруктураОтвета;
		КонецЕсли;
		Если НомерСмены = 0 ИЛИ НомерЧека = 0 ИЛИ ККМ = 0 Тогда
			СтруктураОтвета.Ошибка = Истина;
			СтруктураОтвета.ТекстОшибки = "Не определены параметры ККМ: НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ;
			Возврат СтруктураОтвета;
		КонецЕсли;
	КонецЕсли;
	
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("request_id", Данные.Протокол.ИдентификаторЛояльности);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	ДанныеЗаказа.Вставить("sale_place"	, Данные.Протокол.МестоРеализации);
	ДанныеЗаказа.Вставить("kkm"			, ККМ);
	ДанныеЗаказа.Вставить("shift"		, НомерСмены);
	ДанныеЗаказа.Вставить("check_number", НомерЧека);
	
	ДанныеЗаказа.Вставить("order_date", Данные.Протокол.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(Данные.Заказ.Номер));
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");
	ДанныеЗаказа.Вставить("sales"		, СтрокиОплат);
	ДанныеЗаказа.Вставить("order_str"	, СтрокиЗаказа);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции

Функция СформироватьJSONДляЗакрытияЗаказаНаКлиенте_Протокол5(ЗаказСсылка, ПротоколСсылка, ДанныеЛояльностиПоЗаказу=Неопределено, Тест = Ложь) Экспорт
	
	Данные = Лояльность.СобратьДанныеДляЗакрытияЗаказа_Протокол5(ЗаказСсылка);
	
	Возврат СформироватьJSONДляЗакрытияЗаказа_Протокол5(Данные, ДанныеЛояльностиПоЗаказу, Тест);
	
КонецФункции

Функция СформироватьJSONДляЗакрытияЗаказаНаКлиенте_Протокол4(ЗаказСсылка, ПротоколСсылка, ДанныеЛояльностиПоЗаказу=Неопределено, Тест = Ложь) Экспорт
	
	Данные = Лояльность.СобратьДанныеДляЗакрытияЗаказа_Протокол4(ЗаказСсылка, ПротоколСсылка);
		
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
#Если Сервер Тогда
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Данные.Заказ.Ссылка, "INFO");
	КонецЕсли;		
#КонецЕсли
		
	НомерКарты = Данные.Заказ.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиЗаказа = Новый Массив;

	Данные_Товары = Данные.Товары;	
	Пока Данные_Товары.Следующий() Цикл
		Если Данные_Товары.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = Данные_Товары.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("mol"				, Данные.Протокол.КодКассира);
			СтрокаЧека.Вставить("sale_place"		, Выборка.МестоРеализации);
			
			//СтрокаЧека.Вставить("pay_status"		, Выборка.СтатусОплаты);
			
			//### Нужно подставлять из заказа !!!
			СтрокаЧека.Вставить("loyality_status"	, Выборка.ЛояльностьСтатус);
			СтрокаЧека.Вставить("action_status"		, Выборка.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_status_d"	, Выборка.ЛояльностьСтатусАкции);
			СтрокаЧека.Вставить("action_group"		, Выборка.ЛояльностьДопСтатусАкции);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("price"				, Выборка.Цена);
			СтрокаЧека.Вставить("price_fact"		, Выборка.ЦенаФакт);
			СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
			СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.СуммаФакт, 2));
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;
	
	СтрокиОплат = Новый Массив;
	Для каждого ТекущаяСтрока Из Данные.СписокПротоколов Цикл
		Если Не ПустаяСтрока(ТекущаяСтрока.ИдентификаторЛояльности) Тогда
			НоваяСтрока = Новый Структура("request_id, request_type", ТекущаяСтрока.ИдентификаторЛояльности, ТекущаяСтрока.ТипЧека);
			СтрокиОплат.Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "CLOSE");
	Запрос.Вставить("status", Данные.Протокол.СтатусЛояльности);
	Запрос.Вставить("protocol_version", 4);
	//###
	//Запрос.Вставить("station_type", Станция);
	Запрос.Вставить("station_type", 0);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	ДанныеЗаказа.Вставить("order_type", 1);
		
	ККМ = Данные.Протокол.ККМ;
	НомерСмены = Данные.Протокол.НомерСмены;
	НомерЧека = Данные.Протокол.НомерЧека;
	Если Тест Тогда
		Если НомерСмены = 999 ИЛИ НомерСмены = 0 Тогда
			НомерСмены = Число(Формат(Данные.Заказ.Дата, "ДФ=ddHH"));
		КонецЕсли;
		Если НомерЧека = 999 ИЛИ НомерЧека = 0 Тогда
			//НомерЧека = Число(Прав(Формат(ЗаказОбъект.Дата, "ДФ=mmss"),3));
			НомерЧека = Число(Прав(СокрЛП(Данные.Заказ.Номер),3));
		КонецЕсли;
		Если ПустаяСтрока(ККМ) Тогда
			ККМ = "337";
		КонецЕсли;
	Иначе
		// Нужна проверка на заполненность ККМ, Смены и номера чека
		Если НомерСмены = 0 ИЛИ НомерЧека = 0 ИЛИ ККМ = 0 Тогда
			СтруктураОтвета.Ошибка = Истина;
			СтруктураОтвета.ТекстОшибки = "Не определены параметры ККМ: НомерЧека="+НомерЧека+",НомерСмены="+НомерСмены+",ККМ="+ККМ;
			Возврат СтруктураОтвета;
		КонецЕсли;
	КонецЕсли;
		
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("request_id", Данные.Протокол.ИдентификаторЛояльности);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	ДанныеЗаказа.Вставить("sale_place"	, Данные.Протокол.МестоРеализации);
	ДанныеЗаказа.Вставить("kkm"			, ККМ);
	ДанныеЗаказа.Вставить("shift"		, НомерСмены);
	ДанныеЗаказа.Вставить("check_number", НомерЧека);
	
	ДанныеЗаказа.Вставить("order_date", Данные.Протокол.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(Данные.Заказ.Номер));
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");
	ДанныеЗаказа.Вставить("sales"		, СтрокиОплат);
	ДанныеЗаказа.Вставить("order_str"	, СтрокиЗаказа);
	//ДанныеЗаказа.Вставить("pay"			, ЛояльностьКлиентСервер.ПолучитьМассивОплаты(Данные.Заказ.Ссылка));
	
	Купоны	= Новый Массив;
	Для Каждого ТекущийКупон ИЗ Данные.Купоны Цикл
		СтрокаКупонов = Новый Структура;
		СтрокаКупонов.Вставить("code", ТекущийКупон.Купон);
		СтрокаКупонов.Вставить("type", ТекущийКупон.ТипКупона);
		СтрокаКупонов.Вставить("status", ТекущийКупон.СтатусКупона);
		Купоны.Добавить(СтрокаКупонов);
	КонецЦикла;
	
	Запрос.Вставить("coupon_in", Купоны);
		
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции

Функция СформироватьJSONДляПредварительногоРасчетаЗаказа_Протокол5(Данные, ДанныеЛояльностиПоЗаказу=Неопределено)
		
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Данные.Заказ.Ссылка, "INFO");
	КонецЕсли;		
		
	НомерКарты = Данные.Заказ.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиЗаказа = Новый Массив;

	Данные_Товары = Данные.Товары;	
	Пока Данные_Товары.Следующий() Цикл
		Если Данные_Товары.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = Данные_Товары.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("sale_place"			, Выборка.МестоРеализации);
			
			Если ЗначениеЗаполнено(Выборка.ДокументОплаты) Тогда
				СтрокаЧека.Вставить("pay_status"		, 1);
				СтрокаЧека.Вставить("loyality_status"	, Выборка.ЛояльностьСтатус);
				СтрокаЧека.Вставить("action_status"		, Выборка.ЛояльностьСтатусАкции);
				СтрокаЧека.Вставить("action_status_d"	, Выборка.ЛояльностьДопСтатусАкции);
				СтрокаЧека.Вставить("action_group"		, Выборка.ЛояльностьГруппаАкции);
				СтрокаЧека.Вставить("price"				, Выборка.Цена);
				СтрокаЧека.Вставить("price_fact"		, Выборка.ЦенаФакт);
				СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
				СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.СуммаФакт, 2));
			Иначе
				СтрокаЧека.Вставить("pay_status"		, 0);
				СтрокаЧека.Вставить("loyality_status"	, 0);
				СтрокаЧека.Вставить("action_status"		, 0);
				СтрокаЧека.Вставить("action_status_d"	, 0);
				СтрокаЧека.Вставить("action_group"		, 0);
				СтрокаЧека.Вставить("price"				, Выборка.Цена);
				СтрокаЧека.Вставить("price_fact"		, Выборка.Цена);
				СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
				СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.Сумма, 2));
			КонецЕсли;
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);			
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			//СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	//Если СтрокиЗаказа.Количество() = 0 Тогда
	//	СтруктураОтвета.Ошибка = Истина;
	//	СтруктураОтвета.ТекстОшибки = "Нет ни одной строки заказа";
	//	Возврат СтруктураОтвета;
	//КонецЕсли;
	
	Попытка //!!! Станция из перечисления
		Станция = Число(Данные.РабочееМесто.Станция.Код);
	Исключение
		Станция = 0;
	КонецПопытки;
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "CALC");
	Запрос.Вставить("status", 0);
	Запрос.Вставить("protocol_version", 5);
	//###
	//Запрос.Вставить("station_type", Станция);
	Запрос.Вставить("station_type", 0);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	//ДанныеЗаказа.Вставить("order_type"	, 0);
		
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ДанныеЗаказа.Вставить("order_date", Данные.Заказ.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(Данные.Заказ.Номер));
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str"	, СтрокиЗаказа);
	
	ДобавленныеКупоны = Новый Массив;
	Для Каждого ТекущийКупон ИЗ Данные.Купоны Цикл
		Если ДобавленныеКупоны.Найти(ТекущийКупон.Купон)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКупонов = Новый Структура;
		СтрокаКупонов.Вставить("code", ТекущийКупон.Купон);
		СтрокаКупонов.Вставить("type", ТекущийКупон.ТипКупона);
		СтрокаКупонов.Вставить("status", ТекущийКупон.СтатусКупона);
		Купоны.Добавить(СтрокаКупонов);
		ДобавленныеКупоны.Добавить(ТекущийКупон.Купон);
	КонецЦикла;
	ДобавленныеКупоны = Неопределено;
		
	Запрос.Вставить("coupons", Купоны);
	Запрос.Вставить("actions", Новый Массив);
		
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции

Функция СформироватьJSONДляПредварительногоРасчетаЗаказа_Протокол4(Данные, ДанныеЛояльностиПоЗаказу=Неопределено)
		
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("Ошибка"		, Ложь);
	СтруктураОтвета.Вставить("ТекстОшибки"	, "");
	СтруктураОтвета.Вставить("ТекстЗапроса"	, "");
	
	Если ДанныеЛояльностиПоЗаказу = Неопределено Тогда
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Данные.Заказ.Ссылка, "INFO");
	КонецЕсли;		
		
	НомерКарты = Данные.Заказ.НомерКартыЛояльности;
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу)=Тип("Структура") Тогда
		Если ДанныеЛояльностиПоЗаказу.Свойство("ИсходныйНомерКарты") И Не ПустаяСтрока(ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты) Тогда
			НомерКарты = ДанныеЛояльностиПоЗаказу.ИсходныйНомерКарты;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиЗаказа = Новый Массив;

	Данные_Товары = Данные.Товары;	
	Пока Данные_Товары.Следующий() Цикл
		Если Данные_Товары.Количество<=0 Тогда
			Продолжить;
		КонецЕсли;	
		Выборка = Данные_Товары.Выбрать();
		Пока Выборка.Следующий() Цикл
						
			СтрокаЧека = Новый Структура;
			Если Выборка.Специфика = 1 Тогда
				СтрокаЧека.Вставить("str_type"			, "S");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
				СтрокаЧека.Вставить("str_t_no"			, Выборка.ИдСтрокиТовара);
			Иначе
				СтрокаЧека.Вставить("str_type"			, "T");
				СтрокаЧека.Вставить("str_no"			, Выборка.ИдСтроки);
			КонецЕсли;
		
			СтрокаЧека.Вставить("sale_place"			, Выборка.МестоРеализации);
			
			Если ЗначениеЗаполнено(Выборка.ДокументОплаты) Тогда
				СтрокаЧека.Вставить("pay_status"		, 1);
				СтрокаЧека.Вставить("loyality_status"	, Выборка.ЛояльностьСтатус);
				СтрокаЧека.Вставить("action_status"		, Выборка.ЛояльностьСтатусАкции);
				СтрокаЧека.Вставить("action_status_d"	, Выборка.ЛояльностьДопСтатусАкции);
				СтрокаЧека.Вставить("action_group"		, Выборка.ЛояльностьГруппаАкции);
				СтрокаЧека.Вставить("price"				, Выборка.Цена);
				СтрокаЧека.Вставить("price_fact"		, Выборка.ЦенаФакт);
				СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
				СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.СуммаФакт, 2));
			Иначе
				СтрокаЧека.Вставить("pay_status"		, 0);
				СтрокаЧека.Вставить("loyality_status"	, 0);
				СтрокаЧека.Вставить("action_status"		, 0);
				СтрокаЧека.Вставить("action_status_d"	, 0);
				СтрокаЧека.Вставить("action_group"		, 0);
				СтрокаЧека.Вставить("price"				, Выборка.Цена);
				СтрокаЧека.Вставить("price_fact"		, Выборка.Цена);
				СтрокаЧека.Вставить("strsum"			, Окр(Выборка.Сумма, 2));
				СтрокаЧека.Вставить("strsum_fact"		, Окр(Выборка.Сумма, 2));
			КонецЕсли;
			СтрокаЧека.Вставить("quantity"			, Выборка.Количество);
			СтрокаЧека.Вставить("product_EAN"		, Выборка.ШК);
			СтрокаЧека.Вставить("product_code"		, Выборка.Код);
			СтрокаЧека.Вставить("product_name"		, Выборка.Наименование);			
			СтрокаЧека.Вставить("pdf"				, Выборка.ПДФ);
			//СтрокаЧека.Вставить("str_date"			, Выборка.ВремяДобавления);
			
			СтрокиЗаказа.Добавить(СтрокаЧека);
		КонецЦикла;
	КонецЦикла;		
	
	//Если СтрокиЗаказа.Количество() = 0 Тогда
	//	СтруктураОтвета.Ошибка = Истина;
	//	СтруктураОтвета.ТекстОшибки = "Нет ни одной строки заказа";
	//	Возврат СтруктураОтвета;
	//КонецЕсли;
	
	Запрос = Новый Структура;
	
	Чек		= Новый Структура;
	Купоны	= Новый Массив;
	Таблица	= Новый Массив;
	
	Запрос.Вставить("request", "CALC");
	Запрос.Вставить("status", 0);
	Запрос.Вставить("protocol_version", 4);
	//###
	//Запрос.Вставить("station_type", Станция);
	Запрос.Вставить("station_type", 0);
	//Запрос.Вставить("debug", 1);
	//Запрос.Вставить("delay", 1000);
	Запрос.Вставить("order", Новый Структура);
	Запрос.Вставить("password", ЛояльностьКлиентСервер.ПарольСервиса_Чеки());
	
	ДанныеЗаказа = Запрос.order;
	//ДанныеЗаказа.Вставить("order_type"	, 0);
		
	ТТ = ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	ДанныеЗаказа.Вставить("tt"		, ?(ТТ=Неопределено,"",ТТ));
	
	ДанныеЗаказа.Вставить("order_date", Данные.Заказ.Дата);
	ДанныеЗаказа.Вставить("order_number", СокрЛП(Данные.Заказ.Номер));
	ДанныеЗаказа.Вставить("card_number"	, НомерКарты);
	ДанныеЗаказа.Вставить("master_card"	, "");	
	ДанныеЗаказа.Вставить("order_str"	, СтрокиЗаказа);
	
	ДобавленныеКупоны = Новый Массив;
	Для Каждого ТекущийКупон ИЗ Данные.Купоны Цикл
		Если ДобавленныеКупоны.Найти(ТекущийКупон.Купон)<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКупонов = Новый Структура;
		СтрокаКупонов.Вставить("code", ТекущийКупон.Купон);
		СтрокаКупонов.Вставить("type", ТекущийКупон.ТипКупона);
		СтрокаКупонов.Вставить("status", ТекущийКупон.СтатусКупона);
		Купоны.Добавить(СтрокаКупонов);
		ДобавленныеКупоны.Добавить(ТекущийКупон.Купон);
	КонецЦикла;
	ДобавленныеКупоны = Неопределено;
		
	Запрос.Вставить("coupon_in", Купоны);
		
	//Если СтруктураАСКов <> Неопределено И (СтруктураАСКов.Количество() = 0) Тогда
	//	СтруктураАСКов = Неопределено;
	//КонецЕсли;
	//Результат.Вставить("ask"	, СтруктураАСКов);
	
	СтруктураОтвета.Вставить("ТекстЗапроса"	, ЛояльностьКлиентСервер.СформироватьJSON_Новый(Запрос));
	
	Возврат СтруктураОтвета;

КонецФункции
	


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПолучениеДанных

Функция ПолучитьМассивОплаты(ДокументСсылка) Экспорт
	МассивОплаты = Новый Массив;
		
	// 1. ищем протокол оплаты
	
	// (А) - в регистре
	//Если		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Заказ") Тогда
	//	РегистрДопИнф = РегистрыСведений.ЗаказДопИнф.Получить(Новый Структура("Заказ",ДокументСсылка));
	//ИначеЕсли	ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Возврат") Тогда
	//	РегистрДопИнф = РегистрыСведений.ВозвратДопИнф.Получить(Новый Структура("Возврат",ДокументСсылка));
	//Иначе 
	//	Возврат МассивОплаты;
	//КонецЕсли;
	//	
	//ДокументПротоколРасчетов = РегистрДопИнф.ПротоколРасчетов;
	//
	//Если ДокументПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка() Тогда
	//	Возврат МассивОплаты;
	//КонецЕсли;
	
	// (Б) - непосредственно документ
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколРасчетов.Ссылка
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|ГДЕ
	|	ПротоколРасчетов.Заказ = &ДокументСсылка
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколРасчетов.Дата УБЫВ";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ВыборкаПротокол = Запрос.Выполнить().Выбрать();
	Если ВыборкаПротокол.Следующий() Тогда
		ДокументПротоколРасчетов = ВыборкаПротокол.Ссылка;
	Иначе
		Возврат МассивОплаты;
	КонецЕсли;
	
	// 2. получаем информацию из протокола оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВариантОплаты			КАК ВариантОплаты
	|,	СУММА(	ВЫБОР
	|				КОГДА Действие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОплате.Взнос)
	|				ТОГДА СуммаФакт
	|				ИНАЧЕ 0
	|			КОНЕЦ)			КАК Приход
	|,	СУММА(	ВЫБОР
	|				КОГДА Действие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОплате.Сдача)
	|				ТОГДА СуммаФакт
	|				ИНАЧЕ 0
	|			КОНЕЦ)			КАК Расход
	|ИЗ
	|	Документ.ПротоколРасчетов.Протокол
	|ГДЕ
	|	Ссылка = &ПротоколРасчетов
	|СГРУППИРОВАТЬ ПО
	|	ВариантОплаты
	|ИМЕЮЩИЕ
	|	СУММА(	ВЫБОР
	|				КОГДА Действие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОплате.Взнос)
	|				ТОГДА СуммаФакт
	|				ИНАЧЕ 0
	|			КОНЕЦ)
	|	+
	|	СУММА(	ВЫБОР
	|				КОГДА Действие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОплате.Сдача)
	|				ТОГДА СуммаФакт
	|				ИНАЧЕ 0
	|			КОНЕЦ) > 0
	|";
	Запрос.УстановитьПараметр("ПротоколРасчетов", ДокументПротоколРасчетов);
	ТаблицаОплаты = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрОпл ИЗ ТаблицаОплаты Цикл
		Если		СтрОпл.ВариантОплаты = Справочники.ВариантыОплаты.Наличные Тогда
			ТипОплаты = 1;
		ИначеЕсли	СтрОпл.ВариантОплаты = Справочники.ВариантыОплаты.Карта Тогда
			ТипОплаты = 2;
		ИначеЕсли	СтрОпл.ВариантОплаты = Справочники.ВариантыОплаты.Безнал Тогда
			ТипОплаты = 2; //!!! Верный ли тип оплаты?
		Иначе
			ТипОплаты = 0;
		КонецЕсли;
	
		Money_sum_in	= 0;
		Money_sum_out	= 0;
		
		Если		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Заказ") Тогда
			Money_sum_in	= СтрОпл.Приход;
			Money_sum_out	= СтрОпл.Расход;
		ИначеЕсли	ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Возврат") Тогда
			// протокол расчетов инвертирован
			Money_sum_in	= СтрОпл.Расход;
			Money_sum_out	= СтрОпл.Приход;
		КонецЕсли;
		
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Pay_type"		, ТипОплаты);
		СтрокаОплаты.Вставить("Money_sum_in"	, Money_sum_in);
		СтрокаОплаты.Вставить("Money_sum_out"	, Money_sum_out);
		
		МассивОплаты.Добавить(СтрокаОплаты);
		
	КонецЦикла;
	
	Возврат МассивОплаты;
КонецФункции

Функция ПолучитьМассивОплаты_Протокол4(ПротоколСсылка, ЭтоВозврат=Ложь) Экспорт
	МассивОплаты = Новый Массив;
		
	// Получаем информацию из протокола оплаты
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПротоколРасчетовПротокол.ВариантОплаты КАК ВариантОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА ПротоколРасчетовПротокол.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОплате.Взнос)
	|				ТОГДА ПротоколРасчетовПротокол.СуммаФакт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Приход,
	|	СУММА(ВЫБОР
	|			КОГДА ПротоколРасчетовПротокол.Действие = ЗНАЧЕНИЕ(Перечисление.ДействияПриОплате.Сдача)
	|				ТОГДА ПротоколРасчетовПротокол.СуммаФакт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Расход
	|ИЗ
	|	Документ.ПротоколРасчетов.Протокол КАК ПротоколРасчетовПротокол
	|ГДЕ
	|	ПротоколРасчетовПротокол.Ссылка = &ПротоколРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ПротоколРасчетовПротокол.ВариантОплаты";
	Запрос.УстановитьПараметр("ПротоколРасчетов", ПротоколСсылка);
	ТаблицаОплаты = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрОпл ИЗ ТаблицаОплаты Цикл
		Если СтрОпл.ВариантОплаты = Справочники.ВариантыОплаты.Наличные Тогда
			ТипОплаты = 1;
		ИначеЕсли СтрОпл.ВариантОплаты = Справочники.ВариантыОплаты.Карта Тогда
			ТипОплаты = 2;
		ИначеЕсли СтрОпл.ВариантОплаты = Справочники.ВариантыОплаты.Безнал Тогда
			ТипОплаты = 2;
		Иначе
			ТипОплаты = 0;
		КонецЕсли;
	
		Money_sum_in	= 0;
		Money_sum_out	= 0;
		
		Если НЕ ЭтоВозврат Тогда
			Money_sum_in	= СтрОпл.Приход;
			Money_sum_out	= СтрОпл.Расход;
		Иначе
			// протокол расчетов инвертирован
			Money_sum_in	= СтрОпл.Расход;
			Money_sum_out	= СтрОпл.Приход;
		КонецЕсли;
		
		СтрокаОплаты = Новый Структура;
		СтрокаОплаты.Вставить("Pay_type"		, ТипОплаты);
		СтрокаОплаты.Вставить("Money_sum_in"	, Money_sum_in);
		СтрокаОплаты.Вставить("Money_sum_out"	, Money_sum_out);
		
		МассивОплаты.Добавить(СтрокаОплаты);		
	КонецЦикла;
	
	Возврат МассивОплаты;
КонецФункции


// Возвращает значение свойства информационной базы из регистра сведений "Дополнительные свойства"
Функция ПолучитьДополнительноеСвойствоИнформационнойБазы(Свойство, ИБ = Неопределено, Объект = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДополнительныеСвойства.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСвойства КАК ДополнительныеСвойства
	|ГДЕ
	|	ДополнительныеСвойства.Свойство = &Свойство";
	
	Если ЗначениеЗаполнено(ИБ) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ДополнительныеСвойства.ИнформационнаяБаза = &ИнформационнаяБаза";
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ИБ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ДополнительныеСвойства.Объект = &Объект";
		Запрос.УстановитьПараметр("Объект", Объект);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ВыборкаРезультата = Результат.Выбрать();
		ВыборкаРезультата.Следующий();
		Возврат ВыборкаРезультата.Значение;
	КонецЕсли;
	
КонецФункции

// Возвращает текущий регион из текущей информационной базы
Функция ПолучитьТекущийРегион() Экспорт //!!! Вынести в повторное использование
	Если Не ЗначениеЗаполнено(ПараметрыСеанса.ТекущаяИБ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИнформационныеБазы.Регион КАК Регион
	|ИЗ
	|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
	|ГДЕ
	|	ИнформационныеБазы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ПараметрыСеанса.ТекущаяИБ);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	Возврат ВыборкаЗапроса.Регион;
КонецФункции

Функция ПолучитьЗначениеТаймаута(РежимОтправки)
	ЗначениеЗадержки = 5;
	
	Если		РежимОтправки = 0 Тогда
		// центральный сервис
		ЗначениеЗадержки = 10;
	ИначеЕсли	РежимОтправки = 1 Тогда
		// локальный сервис
		ЗначениеЗадержки = 5;
	КонецЕсли;
	
	Возврат ЗначениеЗадержки;
КонецФункции

Функция ПолучитьКодТовараКарты(Регион) ЭКСПОРТ
	Если Регион = Справочники.Регионы.Р77 Тогда
		Возврат "16020001";
	Иначе
		Возврат "16020002";
	КонецЕсли;
КонецФункции

Функция ПолучитьМестоРеализацииРабочегоМеста(РабочееМесто)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочиеМеста.МестоРеализации КАК МестоРеализации
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", РабочееМесто);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.МестаРеализации.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.МестоРеализации;
КонецФункции

Функция ПолучитьРабочееМестоВозврата(ВозвратСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Возврат.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	Документ.Возврат КАК Возврат
	|ГДЕ
	|	Возврат.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ВозвратСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.РабочиеМеста.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.РабочееМесто;
КонецФункции

Функция ПолучитьРабочееМестоЗаказа(ЗаказСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Заказ.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	Документ.Заказ КАК Заказ
	|ГДЕ
	|	Заказ.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.РабочиеМеста.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.РабочееМесто;
КонецФункции

Функция ПолучитьСтатусЗаказа(ЗаказСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказДопИнф.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|ГДЕ
	|	ЗаказДопИнф.Заказ = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Перечисления.СтатусыЗаказа.ПустаяСсылка();
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.Статус;
КонецФункции

// Возвращает ссылку на товар по коду, поиск только в основном меню РМ
//
Функция ПолучитьТоварКарта(КодТовара, КаталогТоваров = Неопределено) Экспорт
	//Если КаталогТоваров = Неопределено Тогда
	//	МестоРеализации = глПараметрыРМ.МестоРеализации;
	//	КаталогТоваров = МестоРеализации.ОсновнойКаталогТоваров;
	//	Результат = Справочники.Товары.НайтиПоРеквизиту("КодСУП",Формат(КодТовара,"ЧГ=0"),,КаталогТоваров);	
	//Иначе
		Результат = Справочники.Товары.НайтиПоРеквизиту("КодСУП",Формат(КодТовара,"ЧГ=0"),,КаталогТоваров);
	//КонецЕсли;	
	Возврат Результат;
КонецФункции

Функция ПолучитьАдресФирмы(ФирмаСсылка) Экспорт
	АдресФирмы = "";
	
	ДлинаСтроки = 48;
	
	МассивСтрокАдреса = Новый Массив;
	МассивСтрокАдреса.Добавить("");
	ИндексТекущейСтрокиАдреса = 0;
	ТекущаяСтрокаАдреса = МассивСтрокАдреса[ИндексТекущейСтрокиАдреса];
	
	Если ФирмаСсылка <> Справочники.Фирмы.ПустаяСсылка() Тогда
		МассивСлов = РазложитьСтрокуВМассив(ФирмаСсылка.Адрес, " ");
		ИндексТекущегоСлова = 0;
		Для Каждого Слово ИЗ МассивСлов Цикл
			
			МассивПодслов = Новый Массив;
			
			Если СтрДлина(Слово) > ДлинаСтроки Тогда
				Пока СтрДлина(Слово) > ДлинаСтроки Цикл
					МассивПодслов.Добавить(Лев(Слово, ДлинаСтроки));
					Слово = Сред(Слово,ДлинаСтроки+1);
				КонецЦикла;
				МассивПодслов.Добавить(Лев(Слово, ДлинаСтроки));
			Иначе
				МассивПодслов.Добавить(Слово);
			КонецЕсли;
			
			Для Каждого ПодСлово ИЗ МассивПодслов Цикл
				
				Если СтрДлина(ТекущаяСтрокаАдреса + ?(ПустаяСтрока(ТекущаяСтрокаАдреса),""," ") + ПодСлово) > ДлинаСтроки Тогда
					МассивСтрокАдреса.Добавить("");
					ИндексТекущейСтрокиАдреса = ИндексТекущейСтрокиАдреса + 1;
					ТекущаяСтрокаАдреса = МассивСтрокАдреса[ИндексТекущейСтрокиАдреса];
				КонецЕсли;
				
				ТекущаяСтрокаАдреса = ТекущаяСтрокаАдреса + ?(ПустаяСтрока(ТекущаяСтрокаАдреса),""," ") + ПодСлово;
				
				МассивСтрокАдреса[ИндексТекущейСтрокиАдреса] = ТекущаяСтрокаАдреса;
				
			КонецЦикла;
			
			ИндексТекущегоСлова = ИндексТекущегоСлова + 1;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка ИЗ МассивСтрокАдреса Цикл
		АдресФирмы = АдресФирмы + ?(ПустаяСтрока(АдресФирмы),"",Символы.ПС) + Строка;
	КонецЦикла;
	
	Возврат АдресФирмы;
КонецФункции

Функция ПолучитьКодПроекта(МестоРеализации) Экспорт
	Проект = 1;
	Если МестоРеализации = Справочники.МестаРеализации.Отдохни Тогда
		Проект = 2;
	КонецЕсли;
	Возврат Проект;
КонецФункции

Функция ТестовыйРежим(РабочееМесто) Экспорт
	
	Если Не ЗначениеЗаполнено(РабочееМесто) Тогда
		ТекущаяИБ = ПараметрыСеанса.ТекущаяИБ;
		
		//### Данный блок вынести в процедуру и выполнять одним запросом???
		ПараметрОтладка = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_ТестовыйРежим", ТекущаяИБ);
		Если ПараметрОтладка = Неопределено Тогда
			ПараметрОтладка = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_ТестовыйРежим");
		КонецЕсли;
		Возврат (ПараметрОтладка = "1");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РабочиеМеста.Тест КАК Тест
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", РабочееМесто);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.Тест;
	
КонецФункции

Функция ОтладкаВключена() Экспорт
	ТекущаяИБ = ПараметрыСеанса.ТекущаяИБ;
	
	Возврат (ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_Отладка", ТекущаяИБ) = "1");
КонецФункции

Функция РежимОффлайн() Экспорт
	Возврат Константы.Лояльность_РежимОффлайн.Получить();
КонецФункции

Функция ИзменитьРежимОффлайн(Запрос) Экспорт
	Ответ = Новый Структура;
	Ответ.Вставить("Результат", 1);
	Ответ.Вставить("ОписаниеОшибки", "");
	Попытка
		Если Запрос.Оффлайн = 1 ИЛИ Запрос.Оффлайн = "1" Тогда
			Константы.Лояльность_РежимОффлайн.Установить(Истина);
		Иначе
			Константы.Лояльность_РежимОффлайн.Установить(Ложь);
		КонецЕсли;
		ЛояльностьКлиентСервер.Логирование(1, "изменение режима оффлайн", "установлен: "+Запрос.Оффлайн);
	Исключение
		Ответ.Результат = 0;
		Ответ.ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЛояльностьКлиентСервер.Логирование(1, "изменение режима оффлайн", "ошибка: "+Ответ.ОписаниеОшибки);
	КонецПопытки;
	Ответ.Вставить("Оффлайн", Константы.Лояльность_РежимОффлайн.Получить());
	
	Возврат ЛояльностьКлиентСервер.СформироватьJSON_Новый(Ответ);
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПовторногоИспользования

Функция ВерсияЛояльности(Тест=Ложь) Экспорт
	
	ВерсияЛояльности = ПараметрыСеанса.ВерсияЛояльности;
	Если ТипЗнч(ВерсияЛояльности) = Тип("Строка") Тогда
		ВерсияЛояльности = ЛояльностьКлиентСервер.ОставитьТолькоЦифры(ВерсияЛояльности);
		Попытка
			ВерсияЛояльности = Число(ВерсияЛояльности);
			Если ВерсияЛояльности<10 Тогда
				ВерсияЛояльности = ВерсияЛояльности * 100 + 1;
			ИначеЕсли ВерсияЛояльности<100 Тогда
				ВерсияЛояльности = ВерсияЛояльности * 10 + 1;
			КонецЕсли;
			ВерсияЛояльности = Формат(ВерсияЛояльности, "ЧГ=0;");
		Исключение
			ВерсияЛояльности = ЛояльностьКлиентСервер.ТекущаяВерсияЛояльности();
		КонецПопытки;		
	КонецЕсли;
	
	Возврат ВерсияЛояльности;
			
КонецФункции

Функция ПолучитьВерсиюЛояльностиРабочегоМеста(РабочееМесто)
	
	Возврат ПолучитьВерсиюЛояльности(ПолучитьМестоРеализацииРабочегоМеста(РабочееМесто));
		
КонецФункции

Функция ПолучитьВерсиюЛояльности(МестоРеализации=Неопределено) Экспорт
	
	ТекущаяИБ = ПараметрыСеанса.ТекущаяИБ;
	
	Если ЗначениеЗаполнено(ТекущаяИБ) И ЗначениеЗаполнено(МестоРеализации) Тогда
		Результат = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_Версия", ТекущаяИБ, МестоРеализации); // Получаем значение для текущей ИБ, текущего места реализации
		Если Результат = Неопределено Тогда
			Результат = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_Версия", ТекущаяИБ); // Получаем значение для текущей ИБ
			Если Результат = Неопределено Тогда
				Результат = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_Версия"); // Получаем значение общее для всех ИБ
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ТекущаяИБ) Тогда
		Результат = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_Версия", ТекущаяИБ); // Получаем значение для текущей ИБ
		Если Результат = Неопределено Тогда
			Результат = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_Версия"); // Получаем значение общее для всех ИБ
		КонецЕсли;
	Иначе		
		Результат = ПолучитьДополнительноеСвойствоИнформационнойБазы("Лояльность_Версия"); // Получаем значение общее для всех ИБ
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = ЛояльностьКлиентСервер.ТекущаяВерсияЛояльности(); // Версия лояльности по-умолчанию
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

Процедура УстановитьПараметрСеанса_ВерсияЛояльности(Версия="") Экспорт
	
	Если ПустаяСтрока(Версия) Тогда
		Версия = ПолучитьВерсиюЛояльности();
	КонецЕсли;
	
	//!!! ГОВНОКОД
	Попытка
		ПараметрыСеанса.ВерсияЛояльности = Версия;
	Исключение
		ПараметрыСеанса.ВерсияЛояльности = "";
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ЛУЧ

Процедура ФормированиеТаблицыЗаявокЛУЧ(Дата1, Дата2) Экспорт
	
	//Подключение = SQL.Подключиться("4-serv.tt52.local\sqlexpress");
	Подключение = SQL.ПодключитьсяКloyality_ext();
	
	Если Подключение = Неопределено Тогда
		ЗарегистрироватьСобытие("Выгрузка ЛУЧ",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка подключения к серверу");
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|SELECT
	|	[doc_number]
	|,	[doc_date]
	|,	[tt]
	|,	[prim]
	|,	[op_date]
	|,	[op_time]
	|,	[card_number]
	|,	[packet_code]
	|,	[packet_name]
	|,	[date_zav]
	|,	[F]
	|,	[I]
	|,	[O]
	|,	[birthday]
	|,	[addr_city]
	|,	[addr_street]
	|,	[addr_house]
	|,	[addr_flat]
	|,	[phone]
	|,	[email]
	|,	[addr_block]
	|,	[soc_packet_code]
	|,	[soc_packet_name]
	|,	[tt_pair_1]
	|,	[tt_pair_2]
	|,	[acceptance_tt]
	|,	[acceptance_rc]
	|,	[acceptance_co]
	|,	[stage_date]
	|,	[stage_time]
	|,	[t_LineNo]
	|,	[t_tov_code]
	|,	[t_packet]
	|,	[t_soc_packet]
	|FROM
	|	[loyality_local].[dbo].[doc_zav_lu4]
	|WHERE
	|		[date_zav] >= '" + Формат(Дата1, "ДФ='yyyyMMdd HH:mm:ss'") + "'
	|	AND [date_zav] <= '" + Формат(Дата2, "ДФ='yyyyMMdd HH:mm:ss'") + "'
	|";
	
	Отказ = Ложь;	ТекстОшибки = "";
	Результат = SQL.ВыполнитьЗапросВыборки(Подключение, ТекстЗапроса, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ЗарегистрироватьСобытие("Выгрузка ЛУЧ",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка получения данных (" + ТекстОшибки + ")");
		Возврат;
	КонецЕсли;
	
	Регион	= Лояльность.ЛояльностьКлиентСервер.ПолучитьТекущийРегион();
	НомерТТ	= ЛояльностьКлиентСервер.НомерТТ(ПланыОбмена.Основной.ЭтотУзел().ИнформационнаяБаза.Код);
	
	ТекущийНомерДокумента = "";
	СтруктураДЖСОН	= Новый Структура;
	ДанныеДЖСОН		= Новый Структура;
	ТоварыДЖСОН		= Новый Массив;
	
	Для Каждого Стр ИЗ Результат Цикл
		
		Стр.doc_number = СокрЛП(Стр.doc_number);
		
		Если Стр.doc_number <> ТекущийНомерДокумента Тогда
			
			Если ТоварыДЖСОН.Количество() > 0 Тогда
				// запись в базу
				ДанныеДЖСОН.Вставить("tov_str"		, ТоварыДЖСОН);
				
				ТекстДЖСОН = ЛояльностьКлиентСервер.СформироватьJSON(СтруктураДЖСОН);
				
				ТекстЗапроса = "
				|INSERT INTO [loyality_local].[dbo].[kkm_request_lu4]
				|           ([doc_number]
				|           ,[doc_date]
				|           ,[request_text]
				|           ,[status])
				|VALUES
				|           ('" + Стр.doc_number + "'
				|           ,'" + Формат(Стр.doc_date, "ДФ='yyyyMMdd HH:mm:ss'") + "'
				|           ,'" + ТекстДЖСОН + "'
				|           ," + 0 + ")
				|";
				Отказ = Ложь;	ТекстОшибки = "";
				SQL.ВыполнитьЗапрос(Подключение, ТекстЗапроса, Отказ, ТекстОшибки);
				Если Отказ Тогда
					// либо не получается записать из-за ошибки, либо из-за дубля PRIMARY KEY - в табле уже есть эта заявка
					//ЗарегистрироватьСобытие("Выгрузка ЛУЧ",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка записи данных (" + ТекстОшибки + ")");
				КонецЕсли;
			КонецЕсли;
			
			ТекущийНомерДокумента = Стр.doc_number;
			ТоварыДЖСОН = Новый Массив;
			
			СтруктураДЖСОН = Новый Структура;
			СтруктураДЖСОН.Вставить("password"		, "LwSelrH7Za99SK7o5Z5yC2Hr67FlQt7QA2I2fd31Y9g9uwO0On4a5pC9lU7nSvCo");
			СтруктураДЖСОН.Вставить("request_type"	, "editLuch_old");
			СтруктураДЖСОН.Вставить("region"		, ""+Регион);
			СтруктураДЖСОН.Вставить("source"		, "СУП ККМ " + Формат(НомерТТ, "ЧГ=0;ЧН=0"));
			
			ДанныеДЖСОН = Новый Структура;
			ДанныеДЖСОН.Вставить("doc_number"		, Стр.doc_number);
			ДанныеДЖСОН.Вставить("doc_date"			, Формат(Стр.doc_date, "ДФ='dd.MM.yyyy HH:mm:ss'"));
			ДанныеДЖСОН.Вставить("tt"				, Стр.tt);
			ДанныеДЖСОН.Вставить("prim"				, СокрЛП(Стр.prim));
			ДанныеДЖСОН.Вставить("card_number"		, СокрЛП(Стр.card_number));
			ДанныеДЖСОН.Вставить("packet_code"		, Формат(Стр.packet_code, "ЧГ=0;ЧН=0"));
			ДанныеДЖСОН.Вставить("packet_name"		, СокрЛП(Стр.packet_name));
			ДанныеДЖСОН.Вставить("date_zav"			, Формат(Стр.date_zav, "ДФ='dd.MM.yyyy'"));
			ДанныеДЖСОН.Вставить("f"				, СокрЛП(Стр.f));
			ДанныеДЖСОН.Вставить("i"				, СокрЛП(Стр.i));
			ДанныеДЖСОН.Вставить("o"	 			, СокрЛП(Стр.o));
			ДанныеДЖСОН.Вставить("birthday"			, Формат(Стр.birthday, "ДФ='dd.MM.yyyy'"));
			ДанныеДЖСОН.Вставить("addr_city"		, СокрЛП(Стр.addr_city));
			ДанныеДЖСОН.Вставить("addr_street"		, СокрЛП(Стр.addr_street));
			ДанныеДЖСОН.Вставить("addr_house"		, СокрЛП(Стр.addr_house));
			ДанныеДЖСОН.Вставить("addr_block"		, СокрЛП(Стр.addr_block));
			ДанныеДЖСОН.Вставить("addr_flat"		, СокрЛП(Стр.addr_flat));
			ДанныеДЖСОН.Вставить("phone"			, СокрЛП(Стр.phone));
			ДанныеДЖСОН.Вставить("email"			, СокрЛП(Стр.email));
			ДанныеДЖСОН.Вставить("soc_packet_code"	, Формат(Стр.soc_packet_code, "ЧГ=0;ЧН=0"));
			ДанныеДЖСОН.Вставить("soc_packet_name"	, СокрЛП(Стр.soc_packet_name));
			СтруктураДЖСОН.Вставить("data"			, ДанныеДЖСОН);
			
		КонецЕсли;
		
		ТоварыДЖСОН.Добавить(СокрЛП(Стр.t_tov_code));
		
	КонецЦикла;
	
	Если ТоварыДЖСОН.Количество() > 0 Тогда
		// запись в базу
		ДанныеДЖСОН.Вставить("tov_str"		, ТоварыДЖСОН);
		
		ТекстДЖСОН = ЛояльностьКлиентСервер.СформироватьJSON(СтруктураДЖСОН);
		
		ТекстЗапроса = "
		|INSERT INTO [loyality_local].[dbo].[kkm_request_lu4]
		|           ([doc_number]
		|           ,[doc_date]
		|           ,[request_text]
		|           ,[status])
		|VALUES
		|           ('" + Стр.doc_number + "'
		|           ,'" + Формат(ТекущаяДата(), "ДФ='yyyyMMdd HH:mm:ss'") + "'
		|           ,'" + ТекстДЖСОН + "'
		|           ," + 0 + ")
		|";
		Отказ = Ложь;	ТекстОшибки = "";
		SQL.ВыполнитьЗапрос(Подключение, ТекстЗапроса, Отказ, ТекстОшибки);
		Если Отказ Тогда
			// либо не получается записать из-за ошибки, либо из-за дубля PRIMARY KEY - в табле уже есть эта заявка
			//ЗарегистрироватьСобытие("Выгрузка ЛУЧ",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка записи данных (" + ТекстОшибки + ")");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкаЗаявленийЛУЧ(Дата1, Дата2) Экспорт
	
	//Подключение = SQL.Подключиться("4-serv.tt52.local\sqlexpress");
	Подключение = SQL.ПодключитьсяКloyality_ext();
	
	Если Подключение = Неопределено Тогда
		ЗарегистрироватьСобытие("Отправка ЛУЧ",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка подключения к серверу");
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = "
	|SELECT
	|   [doc_number]
	|,	[doc_date]
	|,	[request_text]
	|,	[status]
	|FROM
	|	[loyality_local].[dbo].[kkm_request_lu4]
	|WHERE
	|	[status] <> 1
	|	AND [doc_date] >= '" + Формат(Дата1, "ДФ='yyyyMMdd HH:mm:ss'") + "'
	|	AND [doc_date] <= '" + Формат(Дата2, "ДФ='yyyyMMdd HH:mm:ss'") + "'
	|";
	Отказ = Ложь;	ТекстОшибки = "";
	Результат = SQL.ВыполнитьЗапросВыборки(Подключение, ТекстЗапроса, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ЗарегистрироватьСобытие("Отправка ЛУЧ",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка получения данных (" + ТекстОшибки + ")");
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр ИЗ Результат Цикл
		
		ОтветСервера = Лояльность.ОтправитьЗапросКСервисуКеГеЛьБУМ(Стр.request_text);
		Если ОтветСервера = Неопределено ИЛИ ОтветСервера.Ошибка ИЛИ ОтветСервера.Ответ = "" Тогда
			ЗарегистрироватьСобытие("Отправка ЛУЧ",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка отправки");
			Продолжить;
		КонецЕсли;
		
		ДанныеОтвета = ЛояльностьКлиентСервер.РазборJSON_1С(ОтветСервера.Ответ);
		
		Ошибка = 1;
		ДанныеОтвета.Свойство("err", Ошибка);
		Если Ошибка = 0 Тогда
			ТекстЗапроса = "
			|UPDATE [loyality_local].[dbo].[kkm_request_lu4]
			|SET	[status] = 1
			|WHERE	[doc_number] = '" + Стр.doc_number + "'";
			Отказ = Ложь;	ТекстОшибки = "";
			SQL.ВыполнитьЗапрос(Подключение, ТекстЗапроса, Отказ, ТекстОшибки);
			Если Отказ Тогда
				ЗарегистрироватьСобытие("Отправка ЛУЧ",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка обновления данных (" + ТекстОшибки + ")");
			КонецЕсли;
		Иначе
			ТекстОшибки = "";
			ДанныеОтвета.Свойство("err_msg", ТекстОшибки);
			ЛогированиеЛОЛ(Подключение, 103, "Сервис вернул ошибку (" + ТекстОшибки + ")");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область РегламентныеЗадания

Процедура ОчисткаДанныхЛояльности(ДатаОчистки) Экспорт
	Попытка
		ОчисткаДанныхЛояльностиПоЗаказу(ДатаОчистки);
		ОчисткаДанныхСПУЛа(ДатаОчистки);
	Исключение
		ЗарегистрироватьСобытие("Очистка данных лояльности", УровеньЖурналаРегистрации.Ошибка,,,КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ОчисткаДанныхЛояльностиПоЗаказу(ДатаОчистки) Экспорт
	
	// Чистка данных лояльности
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеЛояльностиПоЗаказу.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ДанныеЛояльностиПоЗаказу КАК ДанныеЛояльностиПоЗаказу
	|ГДЕ
	|	ДанныеЛояльностиПоЗаказу.Документ.Дата <= &ДатаОчистки";
	Запрос.УстановитьПараметр("ДатаОчистки", ДатаОчистки);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ДанныеЛояльностиПоЗаказу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(РезультатЗапроса.Документ);
		НаборЗаписей.Записать();
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОчисткаДанныхСПУЛа(ДатаОчистки) Экспорт
	
	// Чистка СПУЛа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СПУЛЛояльности.ДокументСсылка КАК ДокументСсылка,
	|	СПУЛЛояльности.Протокол КАК Протокол
	|ИЗ
	|	РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|ГДЕ
	|	СПУЛЛояльности.ДокументСсылка.Дата <= &ДатаОчистки";
	Запрос.УстановитьПараметр("ДатаОчистки", ДатаОчистки);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.СПУЛЛояльности.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументСсылка.Установить(РезультатЗапроса.ДокументСсылка);
		НаборЗаписей.Отбор.Протокол.Установить(РезультатЗапроса.Протокол);
		НаборЗаписей.Записать();
	КонецЦикла;
	
	
	//// Чистка СПУЛа
	//Запрос = Новый Запрос;
	//Запрос.Текст =
	//"ВЫБРАТЬ
	//|	СПУЛЛояльности.ДокументСсылка КАК ДокументСсылка,
	//|	СПУЛЛояльности.Протокол КАК Протокол
	//|ИЗ
	//|	РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	//|ГДЕ
	//|	НЕ СПУЛЛояльности.СПУЛ
	//|	И НЕ СПУЛЛояльности.ОбработатьЗакрытиеЗаказа";
	//РезультатЗапроса = Запрос.Выполнить().Выбрать();
	//
	//Пока РезультатЗапроса.Следующий() Цикл
	//	НаборЗаписей = РегистрыСведений.СПУЛЛояльности.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.ДокументСсылка.Установить(РезультатЗапроса.ДокументСсылка);
	//	НаборЗаписей.Отбор.Протокол.Установить(РезультатЗапроса.Протокол);
	//	НаборЗаписей.Записать();
	//КонецЦикла;
	
КонецПроцедуры

Процедура ОтправитьККМ_Инфо() Экспорт
	Дата = ТекущаяДата();

	СоединенияИнформационнойБазы = ПолучитьСоединенияИнформационнойБазы();

	СписокАктивныхРМ = Новый СписокЗначений;
	Для Каждого Соединение Из СоединенияИнформационнойБазы Цикл           		
		Если Соединение.ИмяПриложения = "1CV8" Тогда
			
			ПрофильВхода = "\\" + Соединение.ИмяКомпьютера + "\" + Соединение.Пользователь.Имя;
		    РабочееМесто = Справочники.РабочиеМеста.НайтиПоРеквизиту("ПрофильВхода", ПрофильВхода);
			СписокАктивныхРМ.Добавить(РабочееМесто);
		
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОткрытиеСмены.ККМ КАК ККМ,
	|	ОткрытиеСмены.НомерСмены КАК НомерСмены,
	|	МАКСИМУМ(ЕСТЬNULL(ДокументЗаказ.НомерЧека, 0)) КАК НомерЧека,
	|	ЕСТЬNULL(ЧекиВСПУЛе.КоличествоВСПУЛе, 0) КАК КоличествоВСПУЛе
	|ИЗ
	|	(ВЫБРАТЬ
	|		Касса_ОткрытиеСмены.КассаНомер КАК ККМ,
	|		Касса_ОткрытиеСмены.РабочееМесто КАК РМ,
	|		МАКСИМУМ(Касса_ОткрытиеСмены.НомерСмены) КАК НомерСмены
	|	ИЗ
	|		Документ.Касса_ОткрытиеСмены КАК Касса_ОткрытиеСмены
	|	ГДЕ
	|		НАЧАЛОПЕРИОДА(Касса_ОткрытиеСмены.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|		И Касса_ОткрытиеСмены.Проведен
	|		И НЕ Касса_ОткрытиеСмены.РабочееМесто.Тест
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Касса_ОткрытиеСмены.КассаНомер,
	|		Касса_ОткрытиеСмены.РабочееМесто) КАК ОткрытиеСмены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ КАК ДокументЗаказ
	|		ПО (ДокументЗаказ.РабочееМесто = ОткрытиеСмены.РМ)
	|			И (НАЧАЛОПЕРИОДА(ДокументЗаказ.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ))
	|			И (ДокументЗаказ.НомерСмены = ОткрытиеСмены.НомерСмены)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СПУЛЛояльности.ДокументСсылка) КАК КоличествоВСПУЛе,
	|			СПУЛЛояльности.ДокументСсылка.ККМрабочегоМеста.КодСУП КАК ККМ
	|		ИЗ
	|			РегистрСведений.СПУЛЛояльности КАК СПУЛЛояльности
	|		ГДЕ
	|			СПУЛЛояльности.СПУЛ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СПУЛЛояльности.ДокументСсылка.ККМрабочегоМеста.КодСУП) КАК ЧекиВСПУЛе
	|		ПО ОткрытиеСмены.ККМ = ЧекиВСПУЛе.ККМ
	|ГДЕ
	|	ОткрытиеСмены.РМ В(&СписокАктивныхРМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОткрытиеСмены.ККМ,
	|	ОткрытиеСмены.НомерСмены,
	|	ЕСТЬNULL(ЧекиВСПУЛе.КоличествоВСПУЛе, 0)";
	Запрос.УстановитьПараметр("ТекущаяДата"	, Дата);

	Запрос.УстановитьПараметр("СписокАктивныхРМ", СписокАктивныхРМ);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		СостояниеРабочихМест	= Новый Структура;
		ККМ_Инфо				= Новый Структура;

		ККМ_Инфо.Вставить("kkm"				, СокрЛП(Выборка.ККМ));
		ККМ_Инфо.Вставить("current_chek_num", Выборка.НомерЧека);
		ККМ_Инфо.Вставить("current_shift"	, Выборка.НомерСмены);
		ККМ_Инфо.Вставить("current_date"	, Формат(Дата, "ДФ=dd/MM/yyyy"));
		ККМ_Инфо.Вставить("current_time"	, Формат(Дата, "ДФ=HH:mm"));
		ККМ_Инфо.Вставить("spool_count"		, Выборка.КоличествоВСПУЛе);

		СостояниеРабочихМест.Вставить("kkm_info", ККМ_Инфо);
		
		ТекстЗапроса = ЛояльностьКлиентСервер.СформироватьJSON(СостояниеРабочихМест);
		ОтветСервера = Лояльность.ОтправитьЧекНаОбработку(ТекстЗапроса, 2, РабочееМесто.Тест);
		
	КонецЦикла;

КонецПроцедуры

Процедура УстановкаПараметровРегламентногоЗадания() Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.ОбработатьСпулЛояльности);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ВремяНачала = Дата(1,1,1,6,45,0);
	Расписание.ВремяКонца = Дата(1,1,1,23,0,0);
	Расписание.ПериодПовтораВТечениеДня = 900;
	Расписание.ПериодПовтораДней = 1;
	
	Задание.Расписание = Расписание;
	Задание.Записать();
	
КонецПроцедуры

Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания) Экспорт 	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если Задание = Неопределено ИЛИ Задание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда		
		Возврат;
	КонецЕсли;
	
	Попытка
		Задание.Отменить();
	Исключение
		ЗарегистрироватьСобытие("Лояльность.Общие",УровеньЖурналаРегистрации.Предупреждение, , ,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
КонецПроцедуры

Процедура ОтменитьВыполнениеЗаданияПоКлючу(Знач ИдентификаторЗадания) Экспорт 	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Ключ, Состояние", ИдентификаторЗадания, СостояниеФоновогоЗадания.Активно));
	Для каждого ТекущееЗадание Из АктивныеЗадания Цикл
		Попытка
			ТекущееЗадание.Отменить();
		Исключение
			ЗарегистрироватьСобытие("Лояльность.Общие",УровеньЖурналаРегистрации.Предупреждение, , ,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Прочие

Процедура ЛогированиеЛОЛ(Подключение = Неопределено, Тип, ТекстОшибки = "") Экспорт
	Если Подключение = Неопределено Тогда 
		Подключение = SQL.ПодключитьсяКloyality_ext();
	КонецЕсли;
		
	ТекстЗапроса = "
	|INSERT INTO [loyality_local].[dbo].[LOG_ERROR]
	|	(
	|	[ERROR_DATE]
	|,	[ERROR_TYPE]
	|,	[SEND_EMAIL]
	|,	[SEND_SMS]
	|,	[ERROR_TEXT]
	|,	[CHECK_H_ID]
	|,	[SERVER]
	|	)
	|VALUES
	|	(
	|	getdate()
	|,	" + Формат(Тип, "ЧГ=0;ЧН=0") + "
	|,	0
	|,	0
	|,	'" + ТекстОшибки + "'
	|,	0
	|,	'LOCALHOST'
	|	)
	|";
	Отказ = Ложь;	ТекстОшибки = "";
	SQL.ВыполнитьЗапрос(Подключение, ТекстЗапроса, Отказ, ТекстОшибки);
	Если Отказ Тогда
		ЗарегистрироватьСобытие("ЛогированиеЛОЛ",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка записи лога ошибок");
	КонецЕсли;
	
КонецПроцедуры

Функция СоответствиеКартИРегионовСтрокой() Экспорт
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("52", "52");
	Соответствие.Вставить("77", "77");
	Соответствие.Вставить("97", "77");
	Соответствие.Вставить("99", "77");
	
	Возврат Соответствие;
КонецФункции

Функция ОпределитьРегионПоНомеруКарты(НомерКарты) Экспорт
	Если ПустаяСтрока(НомерКарты) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КартыИРегионы = СоответствиеКартИРегионовСтрокой();
	Регион = Справочники.Регионы.НайтиПоКоду(КартыИРегионы.Получить(Лев(НомерКарты, 2)));
	
	Возврат Регион;
КонецФункции

Функция MD5ХешСтрока(Строка) ЭКСПОРТ
	Если Строка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Хеш = Новый ХешированиеДанных(ХешФункция.MD5);

	Хеш.Добавить(Строка);

	СтрокаХЭШ = НРег(СтрЗаменить(Хеш.ХешСумма," ",""));

	Возврат СтрокаХЭШ; 
КонецФункции

Функция ПолучитьПараметрыСтрокиТовара(Товар) ЭКСПОРТ
	Параметры = Новый Структура;
	
	Параметры.Вставить("Товар"				, Товар);
	Параметры.Вставить("Количество"			, 1);
	Цена = ЦенаТовара(Товар).Цена;
	Параметры.Вставить("Цена"				, Цена);
	Параметры.Вставить("Сумма"				, Цена);
	Параметры.Вставить("ЦенаРеализации"		, Цена);
	Параметры.Вставить("СуммаРеализации"	, Цена);
	Параметры.Вставить("ШК" 				, Товар.КодСУП);
	//Нов.Фирма = ФирмаПоТовару(ВыбТов);

	Возврат Параметры;
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Сервис_Check

Функция ОбработатьЗапрос_edit(СтрокаJSON) Экспорт
	
	// Отдельная структура данных обработки запроса
	ДанныеОбработки = Новый Структура;
	
ПОПЫТКА
	
	// Разбор строки JSON в структуру
	ДанныеЗапроса = ЛояльностьКлиентСервер.РазборJSON(СтрокаJSON);
	ДанныеЗапроса.Вставить("err", 0);
	ДанныеЗапроса.Вставить("err_msg", "");
	
	// Определяем параметры обработки
	Запрос = ВРЕГ(ДанныеЗапроса.request);
		
	Если Запрос = "REG" Тогда
		// РЕГИСТРАЦИЯ		
		ЗарегистрироватьЗаказГостя(ДанныеЗапроса);
		Результат = ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеЗапроса);
	Иначе
		ВызватьИсключение "Неверный запрос";
	КонецЕсли;
	
ИСКЛЮЧЕНИЕ
	
	ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	ДанныеЗапроса.Вставить("err", -1);
	ДанныеЗапроса.Вставить("err_msg", ТекстОшибки);
	Результат = ЛояльностьКлиентСервер.СформироватьJSON(ДанныеЗапроса);
	
КОНЕЦПОПЫТКИ;

	Возврат Результат;	
	
КонецФункции

Процедура ЗарегистрироватьЗаказГостя(ДанныеЗапроса)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КартыДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КартыДоступа КАК КартыДоступа
	|ГДЕ
	|	КартыДоступа.Идентификатор1 = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", ДанныеЗапроса.guest.guest_number);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		ДанныеЗапроса.err = 1;
		ДанныеЗапроса.err_msg = "БЕЙДЖ ГОСТЯ не найден";
		
		Если НЕ (ДанныеЗапроса.Свойство("debug") И ДанныеЗапроса.debug = 1) Тогда
			ДанныеЗапроса.Удалить("guest");
			ДанныеЗапроса.Удалить("request");
			ДанныеЗапроса.Удалить("protocol_version");
			ДанныеЗапроса.Удалить("region");
			ДанныеЗапроса.Удалить("tt");
			ДанныеЗапроса.Удалить("password");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	КартаГостя = РезультатЗапроса.Выбрать();
	КартаГостя.Следующий();
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОткрытыеЗаказыПоКартам.Заказ КАК Заказ,
	|	ОткрытыеЗаказыПоКартам.Заказ.НомерКартыЛояльности КАК ЗаказНомерКартыЛояльности,
	|	ОткрытыеЗаказыПоКартам.Заказ.Номер КАК ЗаказНомер,
	|	ОткрытыеЗаказыПоКартам.Заказ.Дата КАК ЗаказДата
	|ПОМЕСТИТЬ т
	|ИЗ
	|	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|		ПО ОткрытыеЗаказыПоКартам.Заказ = ЗаказДопИнф.Заказ
	|ГДЕ
	|	ОткрытыеЗаказыПоКартам.КартаДоступа = &КартаДоступа
	|	И ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Марки.Заказ,
	|	Марки.Заказ.НомерКартыЛояльности,
	|	Марки.Заказ.Номер,
	|	Марки.Заказ.Дата
	|ИЗ
	|	РегистрСведений.Марки КАК Марки
	|ГДЕ
	|	Марки.Заказ.КартаДоступа = &КартаДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Заказ КАК Ссылка,
	|	т.ЗаказНомерКартыЛояльности КАК НомерКартыЛояльности,
	|	т.ЗаказНомер КАК Номер,
	|	т.ЗаказДата КАК Дата
	|ИЗ
	|	т КАК т";
	//"ВЫБРАТЬ
	//|	ЗаказДокумент.Номер КАК НомерЗаказа,
	//|	ЗаказДокумент.Дата КАК ДатаЗаказа,
	//|	ЗаказДопИнф.Статус КАК Статус,
	//|	ЗаказДокумент.КартаДоступа КАК КартаДоступа,
	//|	ЗаказДокумент.НомерКартыЛояльности КАК НомерКартыЛояльности,
	//|	ЗаказДокумент.Ссылка КАК Ссылка
	//|ИЗ
	//|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ КАК ЗаказДокумент
	//|		ПО ЗаказДопИнф.Заказ = ЗаказДокумент.Ссылка
	//|ГДЕ
	//|	ЗаказДокумент.Дата >= &Дата
	//|	И ЗаказДокумент.КартаДоступа = &КартаДоступа
	//|	И ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)";
	Запрос.УстановитьПараметр("Дата", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("КартаДоступа", КартаГостя.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Создаем новый заказ
		НачатьТранзакцию();
		
		Попытка
			Заказ = Документы.Заказ.СоздатьДокумент();
			Заказ.НомерКартыЛояльности = ДанныеЗапроса.guest.card_number;
			Заказ.КартаДоступа = КартаГостя.Ссылка;
			Заказ.Дата = ТекущаяДатаНаСервере();
			Заказ.СпособРегистрацииБейджа = 3;
			Заказ.СпособАвторизацииГостя = 4;
			//Заказ.Автор = глПользователь;
			//Заказ.МестоРеализации = глПараметрыРМ.МестоРеализации;
			//Заказ.РабочееМесто = глРабочееМесто;
			//Заказ.Смена = ИнтерфейсРМ.ТекущаяСмена();
			//Заказ.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
			//Заказ.УстановитьНовыйНомер("000");
			Заказ.Записать();
			
			НаборЗаписей = РегистрыСведений.ЗаказДопИнф.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заказ.Установить(Заказ.Ссылка);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Заказ = Заказ.Ссылка;
			НоваяЗапись.ДатаОткрытия = Заказ.Дата;
			НоваяЗапись.Статус = Перечисления.СтатусыЗаказа.Открыт;
			НаборЗаписей.Записать();
			
			//ксТрактир.РегистрацияЗаказаПоКартеДоступа(Заказ.КартаДоступа, Заказ.Ссылка);
			НаборЗаписей = РегистрыСведений.ОткрытыеЗаказыПоКартам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КартаДоступа.Установить(КартаГостя.Ссылка);
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.КартаДоступа = КартаГостя.Ссылка;
			НоваяЗапись.Заказ = Заказ.Ссылка;
			НаборЗаписей.Записать();
			
			ЛояльностьКлиентСервер.Логирование(1, "регистрация через МП", "начало (заказ="+Заказ.Номер+")");
			
			Тест = ЛояльностьКлиентСервер.ТестовыйРежим();
			ЛояльностьКлиентСервер.ОткрытьЗаказ(Заказ, Тест);
			Заказ.Записать();
					
			ЗафиксироватьТранзакцию();
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЛояльностьКлиентСервер.Логирование(1, "регистрация через МП", "ошибка (заказ="+Заказ.Номер+")");
			ЛояльностьКлиентСервер.Логирование(1, "регистрация через МП", ТекстОшибки);
			
			ОтменитьТранзакцию();
		КонецПопытки;
		
		ДанныеЗапроса.Вставить("order", Новый Структура);
		ДанныеЗапроса.order.Вставить("order_number", Формат(Число(УбратьВсеБуквы(Заказ.Номер)), "ЧДЦ=; ЧГ=0"));
		ДанныеЗапроса.order.Вставить("order_date", Заказ.Дата);
	Иначе
		ДанныеЗаказа = РезультатЗапроса.Выбрать();
		ДанныеЗаказа.Следующий();
		
		Если Не ПустаяСтрока(ДанныеЗаказа.НомерКартыЛояльности) Тогда
			//Если ДанныеЗаказа.НомерКартыЛояльности = ДанныеЗапроса.guest.card_number Тогда
				ДанныеЗапроса.err = 1;
				ДанныеЗапроса.err_msg = "БЕЙДЖ ГОСТЯ уже привязан к карте КеГеЛьБУМ";
				Возврат;
			//Иначе
			//	ДанныеЗапроса.err = 1;
			//	ДанныеЗапроса.err_msg = "Заказ уже привязан к карте лояльности";
			//	Возврат;
			//КонецЕсли;
		КонецЕсли;
		
		Попытка
			Заказ = ДанныеЗаказа.Ссылка.ПолучитьОбъект();
			Заказ.НомерКартыЛояльности = ДанныеЗапроса.guest.card_number;
			Заказ.СпособРегистрацииБейджа = 3;
			Заказ.СпособАвторизацииГостя = 4;
			Заказ.Записать();
			
			ЛояльностьКлиентСервер.Логирование(1, "регистрация через МП", "начало (заказ="+Заказ.Номер+")");
			
			Тест = ЛояльностьКлиентСервер.ТестовыйРежим();
			ЛояльностьКлиентСервер.ОткрытьЗаказ(Заказ, Тест);
			Заказ.Записать();
		Исключение
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЛояльностьКлиентСервер.Логирование(1, "регистрация через МП", "ошибка (заказ="+Заказ.Номер+")");
			ЛояльностьКлиентСервер.Логирование(1, "регистрация через МП", ТекстОшибки);
			
			ДанныеЗапроса.err = -1;
			ДанныеЗапроса.err_msg = ТекстОшибки;
			Возврат;
		КонецПопытки;
		
		ДанныеЗапроса.Вставить("order", Новый Структура);
		ДанныеЗапроса.order.Вставить("order_number", Формат(Число(УбратьВсеБуквы(ДанныеЗаказа.Номер)), "ЧДЦ=; ЧГ=0"));
		ДанныеЗапроса.order.Вставить("order_date", ДанныеЗаказа.Дата);
	КонецЕсли;
	
	Если НЕ (ДанныеЗапроса.Свойство("debug") И ДанныеЗапроса.debug = 1) Тогда
		ДанныеЗапроса.Удалить("guest");
		ДанныеЗапроса.Удалить("request");
		ДанныеЗапроса.Удалить("protocol_version");
		ДанныеЗапроса.Удалить("region");
		ДанныеЗапроса.Удалить("tt");
		ДанныеЗапроса.Удалить("password");
	КонецЕсли;	
	
КонецПроцедуры


Функция ОбработатьЗапрос_get(СтрокаJSON) Экспорт
	
	// Отдельная структура данных обработки запроса
	ДанныеОбработки = Новый Структура;
	
ПОПЫТКА
	
	// Разбор строки JSON в структуру
	ДанныеЗапроса = ЛояльностьКлиентСервер.РазборJSON(СтрокаJSON);
	ДанныеЗапроса.Вставить("err", 0);
	ДанныеЗапроса.Вставить("err_msg", "");
	
	// Определяем параметры обработки
	Запрос = ВРЕГ(ДанныеЗапроса.request);
		
	Если Запрос = "REG" Тогда
		
	Иначе
		ВызватьИсключение "Неверный запрос";
	КонецЕсли;
	
ИСКЛЮЧЕНИЕ
	
	ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	ДанныеЗапроса.Вставить("err", -1);
	ДанныеЗапроса.Вставить("err_msg", ТекстОшибки);
	Результат = ЛояльностьКлиентСервер.СформироватьJSON(ДанныеЗапроса);
	
КОНЕЦПОПЫТКИ;

	Возврат Результат;	
	
КонецФункции


Функция ОбработатьЗапрос_info(СтрокаJSON) Экспорт
	
	// Отдельная структура данных обработки запроса
	ДанныеОбработки = Новый Структура;
	
ПОПЫТКА
	
	// Разбор строки JSON в структуру
	ДанныеЗапроса = ЛояльностьКлиентСервер.РазборJSON(СтрокаJSON);
	ДанныеЗапроса.Вставить("err", 0);
	ДанныеЗапроса.Вставить("err_msg", "");
	
	// Проверка пароля сервиса
	Если НЕ ДанныеЗапроса.Свойство("password") ИЛИ ДанныеЗапроса.password<>ЛояльностьКлиентСервер.ПарольСервиса_Чеки() Тогда
		ВызватьИсключение "Неверный запрос";
	КонецЕсли;
	
	// Определяем параметры обработки
	Запрос = ВРЕГ(ДанныеЗапроса.request);
		
	Если Запрос = "CHECK_LIST" Тогда
		Возврат ПолучитьИнформациюОЧеках(ДанныеЗапроса);
	ИначеЕсли Запрос = "PROC" Тогда
		Возврат ВыполнитьПроцедуруПоЗапросу(ДанныеЗапроса);
	ИначеЕсли Запрос = "FUNC" Тогда
		Возврат ВыполнитьФункциюПоЗапросу(ДанныеЗапроса);
	Иначе
		ВызватьИсключение "Неверный запрос";
	КонецЕсли;
	
ИСКЛЮЧЕНИЕ
	
	ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	ДанныеЗапроса.Вставить("err", -1);
	ДанныеЗапроса.Вставить("err_msg", ТекстОшибки);
	Результат = ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеЗапроса);
	
КОНЕЦПОПЫТКИ;

	Возврат Результат;	
	
КонецФункции

Функция ПолучитьИнформациюОЧеках(ДанныеЗапроса)
	
	ДанныеЗапроса.Вставить("check_list", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПротоколРасчетов.Номер КАК Номер,
	|	ПротоколРасчетов.Дата КАК Дата,
	|	ПротоколРасчетов.НомерЧека КАК НомерЧека,
	|	ПротоколРасчетов.НомерСмены КАК НомерСмены,
	|	ПротоколРасчетов.ТипЧекаЛояльность КАК ТипЧекаЛояльность,
	|	ПротоколРасчетов.СтатусЛояльности КАК СтатусЛояльности,
	|	ПротоколРасчетов.ИдентификаторЛояльности КАК ИдентификаторЛояльности,
	|	ПротоколРасчетов.ККМ.КодСУП КАК ККМ
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|ГДЕ
	|	ПротоколРасчетов.Дата МЕЖДУ &НачПериода И &КонПериода
	|	И ПротоколРасчетов.Проведен
	|	И ПротоколРасчетов.Фискализирован";	
	Запрос.УстановитьПараметр("НачПериода", НачалоДня(ДанныеЗапроса.date_time));
	Запрос.УстановитьПараметр("КонПериода", КонецДня(ДанныеЗапроса.date_time));
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("order_number", РезультатЗапроса.Номер);
		НоваяСтрока.Вставить("check_date", РезультатЗапроса.Дата);
		НоваяСтрока.Вставить("check_number", РезультатЗапроса.НомерЧека);
		НоваяСтрока.Вставить("check_shift", РезультатЗапроса.НомерСмены);
		НоваяСтрока.Вставить("check_kkm", РезультатЗапроса.ККМ);
		НоваяСтрока.Вставить("check_type", РезультатЗапроса.ТипЧекаЛояльность);
		НоваяСтрока.Вставить("loyality_status", РезультатЗапроса.СтатусЛояльности);
		НоваяСтрока.Вставить("loyality_id", РезультатЗапроса.ИдентификаторЛояльности);
		
		ДанныеЗапроса.check_list.Добавить(НоваяСтрока);
	КонецЦикла;	
	
	Если НЕ (ДанныеЗапроса.Свойство("debug") И ДанныеЗапроса.debug = 1) Тогда
		ДанныеЗапроса.Удалить("request");
		ДанныеЗапроса.Удалить("password");
	КонецЕсли;
	
	Возврат ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеЗапроса);
	
КонецФункции

Функция ВыполнитьПроцедуруПоЗапросу(ДанныеЗапроса)
		
	// Проверка пароля сервиса
	//Если НЕ ДанныеЗапроса.Свойство("admin_password") ИЛИ ДанныеЗапроса.password<>ЛояльностьКлиентСервер.ПарольСервиса_Чеки() Тогда
	//	ВызватьИсключение "Неверный запрос";
	//КонецЕсли;
	
	Выполнить(ДанныеЗапроса.command);
	
	Если НЕ (ДанныеЗапроса.Свойство("debug") И ДанныеЗапроса.debug = 1) Тогда
		ДанныеЗапроса.Удалить("request");
		ДанныеЗапроса.Удалить("password");
	КонецЕсли;
	
	Возврат ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеЗапроса);
	
КонецФункции

Функция ВыполнитьФункциюПоЗапросу(ДанныеЗапроса)
		
	// Проверка пароля сервиса
	//Если НЕ ДанныеЗапроса.Свойство("admin_password") ИЛИ ДанныеЗапроса.password<>ЛояльностьКлиентСервер.ПарольСервиса_Чеки() Тогда
	//	ВызватьИсключение "Неверный запрос";
	//КонецЕсли;
	
	//УИД = Новый УникальныйИдентификатор();
	
	ИмяФайла = ПолучитьИмяВременногоФайла(".txt");
	
	// Добавляем команду помещения результата во временное хранилище
	КомандаКВыполнению = ДанныеЗапроса.command + "
	|
	//|ПоместитьВоВременноеХранилище(Результат, Новый УникальныйИдентификатор(""" + Строка(УИД) + """));
	|Запись = Новый ЗаписьТекста;
	|Запись.Открыть(" + ИмяФайла + ");
	|Запись.Записать(Результат);
	|Запись.Закрыть();
	|";	
	Выполнить(КомандаКВыполнению);
	
	Чтение = Новый ЧтениеТекста;
	Чтение.Открыть(ИмяФайла);
	Результат = Чтение.Прочитать();
	Чтение.Закрыть();
	УдалитьФайлы(ИмяФайла);
	
	//Результат = ПолучитьИзВременногоХранилища(УИД);
	//УдалитьИзВременногоХранилища(УИД);
	
	ДанныеЗапроса.Вставить("result", Результат);
		
	Если НЕ (ДанныеЗапроса.Свойство("debug") И ДанныеЗапроса.debug = 1) Тогда
		ДанныеЗапроса.Удалить("request");
		ДанныеЗапроса.Удалить("password");
	КонецЕсли;
	
	Возврат ЛояльностьКлиентСервер.СформироватьJSON_Новый(ДанныеЗапроса);
	
КонецФункции


#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область УДАЛИТЬ

Функция ПодключениеЛояльность(Регион)
	Если Регион = Справочники.Регионы.Р52 Тогда
		Возврат Подключиться_loyality77();
	Иначе
		Возврат Подключиться_loyality777();
	КонецЕсли;
КонецФункции

Функция Подключиться_loyality77()
	
	SQLConnection = Новый COMОбъект("ADODB.Connection");
    
    ServerName = "loyality77";
    UID = "sa";	
    PWD = "ser09l";
    ConnectString = "Provider=SQLOLEDB;DRIVER={SQL Server Native Client 11.0};" + 
                    "Data Source=" + ServerName +
                    ";UID=" + UID + ";PWD=" + PWD;
    SQLConnection.ConnectionString = ConnectString;
	SQLConnection.ConnectionTimeOut = 20;
	SQLConnection.CommandTimeout = 180;
	//Подключаемся к базе данных 
	Try
		SQLConnection.Open();        
	Except
		#Если Клиент Тогда 
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		#КонецЕсли 
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьСобытие("Подключение к базе", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		
		SQLConnection = Неопределено;
		
	EndTry;
	
	Возврат SQLConnection;
КонецФункции

Функция Подключиться_loyality777()
	
	SQLConnection = Новый COMОбъект("ADODB.Connection");
    
    ServerName = "loyality777.msk.local";
    UID = "sa";	
    PWD = "ser09l";
    ConnectString = "Provider=SQLOLEDB;DRIVER={SQL Server Native Client 11.0};" + 
                    "Data Source=" + ServerName +
                    ";UID=" + UID + ";PWD=" + PWD;
    SQLConnection.ConnectionString = ConnectString;
	SQLConnection.ConnectionTimeOut = 20;
	SQLConnection.CommandTimeout = 180;
	//Подключаемся к базе данных 
	Try
		SQLConnection.Open();        
	Except
		#Если Клиент Тогда 
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		#КонецЕсли 
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьСобытие("Подключение к базе", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения);
		
		SQLConnection = Неопределено;
		
	EndTry;
	
	Возврат SQLConnection;
КонецФункции

Функция ВыполнитьЗапросВыборкиПервойЗаписи(Подключение, ТекстЗапроса, Отказ=Ложь, ТекстОшибки="")
	
	РезультатЗапроса = Новый COMОбъект("ADODB.Recordset");
	
	Попытка
		РезультатЗапроса.Open(ТекстЗапроса, Подключение);
	Исключение
		Отказ = Истина;
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатЗапроса = Неопределено;
		Возврат Неопределено;
	КонецПопытки;
	
	// Проверяем результат запроса на наличие записей
	Если РезультатЗапроса.EOF() = 1 Тогда
		РезультатЗапроса.Close();
		РезультатЗапроса = Неопределено;
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатСтруктура = Новый Структура;
	
	Если РезультатЗапроса.EOF() = 0 Тогда
		Для НомерКолонки=0 По РезультатЗапроса.Fields.Count-1 Цикл
			ИмяКолонки = РезультатЗапроса.Fields.Item(НомерКолонки).Name;
			РезультатСтруктура.Вставить(ИмяКолонки,РезультатЗапроса.Fields(ИмяКолонки).Value);
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗапроса.Close();
	РезультатЗапроса = Неопределено;
	
	Возврат РезультатСтруктура;
	
КонецФункции

Процедура РасшифроватьКартуИзМобильногоПриложения(Регион, Подключение, Данные)
	ПОПЫТКА
		НомерКарты = Сред(Данные.НомерКарты,3);
		НомерКартыКодирование = "";
		
		Для Индекс = 1 По СтрДлина(НомерКарты) Цикл
			НомерКартыКодирование = Сред(НомерКарты, Индекс, 1) + НомерКартыКодирование;
		КонецЦикла;
		
		ТекДата = ТекущаяДата();
		
		// Получаем крипто ключ, соответствующий дню месяца
		НомерДняЧека = Число(Формат(ТекДата, "ДФ=dd"));
		ТекстЗапроса = "
		|SELECT
	    |	CRYPTO_STATUS, CRYPTO_DAY, CRYPTO_KEY
		|FROM [Loyality"+Регион+"].[dbo].[CRYPTO_KEYS]
		|WHERE
		|	CRYPTO_DAY = "+НомерДняЧека+" AND CRYPTO_STATUS = 1
		|	";
		Отказ = Ложь;
		ТекстОшибки = "";
		РезультатЗапроса = ВыполнитьЗапросВыборкиПервойЗаписи(Подключение, ТекстЗапроса, Отказ, ТекстОшибки);
		Если Отказ Тогда
			Данные.НомерКарты = "";
			Данные.Ошибка = 3;
			Данные.ТекстОшибки = "Ошибка получения данных о крипто-ключах";
		КонецЕсли;
		Если РезультатЗапроса = Неопределено Тогда
			Данные.НомерКарты = "";
			Данные.Ошибка = 3;
			Данные.ТекстОшибки = "Ошибка получения данных о крипто-ключах";
		КонецЕсли;
		
		КриптоКлюч = РезультатЗапроса.CRYPTO_KEY;
		
		МассивНомерКарты = Новый Массив();
		
		// Переводим Крипто-ключ в массив
		МассивКриптоКлюч = Новый Массив();
		Для ТекущийНомер = 0 По 9 Цикл		
			МассивКриптоКлюч.Добавить(Сред(КриптоКлюч, ТекущийНомер+1, 1));
		КонецЦикла;
		
		// Раскодируем карту
		РезультатСтрока = "";
		Для ТекущийНомер = 0 По СтрДлина(НомерКартыКодирование) Цикл
			НомерРезультат = МассивКриптоКлюч.Найти(Сред(НомерКартыКодирование, ТекущийНомер+1, 1));
			РезультатСтрока = РезультатСтрока + НомерРезультат;
		КонецЦикла;
		
		Год = Год(ТекДата);
		Месяц = Месяц(ТекДата);
		День = День(ТекДата);
		Часы = Сред(РезультатСтрока, 1, 2);
		Минуты = Сред(РезультатСтрока, 3, 2);
		Секунды = Сред(РезультатСтрока, 5, 2);
		
		ДатаКарты = Дата(Год, Месяц, День, Часы, Минуты, Секунды);
		
		НомерКарты = Сред(РезультатСтрока, 7, 10);	
		
		Данные.НомерКарты = НомерКарты;
	ИСКЛЮЧЕНИЕ
		Данные.НомерКарты = "";
		Данные.Ошибка = 1;
		Данные.ТекстОшибки = "Неверный номер карты КеГеЛьБУМ";
	КОНЕЦПОПЫТКИ;
КонецПроцедуры


#КонецОбласти














////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// !!! ВЕСЬ ЭТОТ ХЛАМ БУДЕТ УДАЛЕН !!!
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#Область ДополнительныеДанныеЗаказа

Функция СтруктураДанныхЛояльностиПоЗаказу_УДАЛИТЬ(Источник=Неопределено)
	
	// Версия 3.0.1	
	Результат = Новый Структура;
	Результат.Вставить("ИсходныйНомерКарты"	,"");
	Результат.Вставить("МастерКарта"		,"");
	Результат.Вставить("Баланс"				,0);
	Результат.Вставить("ФИО"				,"");
	Результат.Вставить("ДатаРождения"		,Дата(1,1,1));
	Результат.Вставить("НомерТелефона"		,"");
	Результат.Вставить("ЭлектроннаяПочта"	,"");
	
	// Если в процедуру передан Источник типа "Структура", то заполняем из него
	Если ТипЗнч(Источник) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Результат, Источник);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура записывает дополнительные данные лояльности по заказу
// Параметры:
//			-	ЗаказСсылка - ссылка на заказ
//			-	ДанныеЛояльности - структура с данными для записи
Процедура ЗаписатьДанныеЛояльностиПоЗаказу_УДАЛИТЬ(ЗаказСсылка, ДанныеЛояльности) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДанныеЛояльностиПоЗаказу.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ЗаказСсылка);
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Документ = ЗаказСсылка;
	НоваяЗапись.Данные = ЛояльностьКлиентСервер.СформироватьJSON_Новый(СтруктураДанныхЛояльностиПоЗаказу_УДАЛИТЬ(ДанныеЛояльности));
	НоваяЗапись.ВерсияДанных = ЛояльностьКлиентСервер.ТекущаяВерсияЛояльности();	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьДанныеЛояльностиПоЗаказу_УДАЛИТЬ(ЗаказСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЛояльностиПоЗаказу.Данные КАК Данные,
	|	ДанныеЛояльностиПоЗаказу.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	РегистрСведений.ДанныеЛояльностиПоЗаказу КАК ДанныеЛояльностиПоЗаказу
	|ГДЕ
	|	ДанныеЛояльностиПоЗаказу.Документ = &Заказ";
	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПолучитьДанныеЛояльностиПоЗаказу_301(); // Возвращаем пустую структуру текущей версии
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	//Если ВыборкаЗапроса.ВерсияДанных <= 301 Тогда
		Возврат ПолучитьДанныеЛояльностиПоЗаказу_301(ВыборкаЗапроса.Данные);
	//Иначе
	//	Возврат ПолучитьДанныеЛояльностиПоЗаказу_301(); // Возвращаем пустую структуру текущей версии
	//КонецЕсли;
		
КонецФункции

Функция ПолучитьДанныеЛояльностиПоЗаказу_301(ДанныеJSON="") Экспорт
	
	Результат = СтруктураДанныхЛояльностиПоЗаказу_УДАЛИТЬ();
	
	Если ПустаяСтрока(ДанныеJSON) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		Результат = ЛояльностьКлиентСервер.РазборJSON(ДанныеJSON);
	Исключение
		ЗарегистрироватьСобытие("Лояльность.Данные заказа",УровеньЖурналаРегистрации.Ошибка,,,"Ошибка получения данных заказа: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Результат;
	КонецПопытки;
	
	Результат.ДатаРождения = ЛояльностьКлиентСервер.ДатаВремяСтрокойВДатуВремя(Результат.ДатаРождения);
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьДанныеЛояльностиПоЗаказу_УДАЛИТЬ(ЗаказСсылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДанныеЛояльностиПоЗаказу.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ЗаказСсылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область Сервисы

// параметры
// РежимОтправки:
//	0 - центр
//	1 - локальный
Функция ПолучитьПараметрыСервиса(РежимОтправки = 0, Тест = Ложь) ЭКСПОРТ
	
	Регион	= ПолучитьТекущийРегион();
	ТекИБ	= ПараметрыСеанса.ТекущаяИБ;
	
	Результат = Новый Структура;
	
	Если Тест Тогда
		
		Если		РежимОтправки = 0 Тогда
			
			АдресСервиса = ПолучитьДопСвойство(, "Лояльность_СервисРасчетаЧеков_Центральный_ТЕСТ");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			//Результат.Вставить("ИспользоватьПрокси"	, Истина);
			//Результат.Вставить("ПроксиСервер"		, "tmg.cd.local");
			//Результат.Вставить("ПроксиПорт"			, 8080);
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 10);
			
		ИначеЕсли	РежимОтправки = 1 Тогда
			
			АдресСервиса = ПолучитьДопСвойство(ТекИБ, "Лояльность_СервисРасчетаЧеков_Локальный");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			//Результат.Вставить("ИспользоватьПрокси"	, Истина);
			//Результат.Вставить("ПроксиСервер"		, "tmg.cd.local");
			//Результат.Вставить("ПроксиПорт"			, 8080);
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 5);
			
		ИначеЕсли	РежимОтправки = 2 Тогда
			
			АдресСервиса = ПолучитьДопСвойство(, "Лояльность_СервисРасчетаЧеков_Центральный_ТЕСТ");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "kkm_status");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			//Результат.Вставить("ИспользоватьПрокси"	, Истина);
			//Результат.Вставить("ПроксиСервер"		, "tmg.cd.local");
			//Результат.Вставить("ПроксиПорт"			, 8080);
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 10);

			
		КонецЕсли;
		
	ИначеЕсли		ПараметрыСеанса.ТекущаяИБ.Регион = Справочники.Регионы.Р52 Тогда 
		Если		РежимОтправки = 0 Тогда
			
			АдресСервиса = ПолучитьДопСвойство(, "Лояльность_СервисРасчетаЧеков_Центральный_52");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 10);
			
		ИначеЕсли	РежимОтправки = 1 Тогда
			
			АдресСервиса = ПолучитьДопСвойство(ТекИБ, "Лояльность_СервисРасчетаЧеков_Локальный");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 5);
			
		ИначеЕсли	РежимОтправки = 2 Тогда
			
			АдресСервиса = ПолучитьДопСвойство(, "Лояльность_СервисРасчетаЧеков_Центральный_52");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "kkm_status");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 5);
			
		КонецЕсли;
	ИначеЕсли	ПараметрыСеанса.ТекущаяИБ.Регион = Справочники.Регионы.Р77 Тогда 
		Если РежимОтправки = 0 Тогда
			
			АдресСервиса = ПолучитьДопСвойство(, "Лояльность_СервисРасчетаЧеков_Центральный_77");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 10);
			
		ИначеЕсли	РежимОтправки = 1 Тогда
			
			АдресСервиса = ПолучитьДопСвойство(ТекИБ, "Лояльность_СервисРасчетаЧеков_Локальный");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "calc");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 5);
			
		ИначеЕсли	РежимОтправки = 2 Тогда
			
			АдресСервиса = ПолучитьДопСвойство(, "Лояльность_СервисРасчетаЧеков_Центральный_77");
			
			Результат.Вставить("АдресСервиса"		, АдресСервиса);
			Результат.Вставить("ИмяКоманды"			, "kkm_status");
			Результат.Вставить("ИспользоватьПрокси"	, Ложь);
			Результат.Вставить("ПроксиСервер"		, "");
			Результат.Вставить("ПроксиПорт"			, "");
			Результат.Вставить("ПроксиПользователь"	, "");
			Результат.Вставить("ПроксиПароль"		, "");
			Результат.Вставить("Таймаут"			, 5);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
	
Функция ПолучитьПараметрыСервиса_77()
	Результат = Новый Структура;
	Результат.Вставить("АдресСервиса"		, "http://proc77.msk.coolclever.ru:85/check/ws/check?wsdl");
	//Результат.Вставить("АдресСервиса"		, "http://p77.msk.local/check/ws/check?wsdl");
	Результат.Вставить("ИмяКоманды"			, "calc");
	Результат.Вставить("ИспользоватьПрокси"	, Ложь);
	Результат.Вставить("ПроксиСервер"		, "10.1.0.15");
	Результат.Вставить("ПроксиПорт"			, 8080);
	Результат.Вставить("ПроксиПользователь"	, "cd\user");
	Результат.Вставить("ПроксиПароль"		, "password");
	Результат.Вставить("Таймаут"			, 10);
	
	Возврат Результат;
КонецФункции

Функция ПолучитьПараметрыСервиса_52()
	Результат = Новый Структура;
	Результат.Вставить("АдресСервиса"		, "http://p52/check/ws/check?wsdl");
	Результат.Вставить("ИмяКоманды"			, "calc");
	Результат.Вставить("ИспользоватьПрокси"	, Ложь);
	Результат.Вставить("ПроксиСервер"		, "");
	Результат.Вставить("ПроксиПорт"			, "");
	Результат.Вставить("ПроксиПользователь"	, "");
	Результат.Вставить("ПроксиПароль"		, "");
	Результат.Вставить("Таймаут"			, 10);
	
	Возврат Результат;
КонецФункции

// параметры
// РежимОтправки:
//	0 - центр
//	1 - локальный
Функция ОтправитьЧекНаОбработку(СтрокаJSON, РежимОтправки = 0, Тест = Ложь) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	ТекущийСервисРасчетаЧека	= ПолучитьПараметрыСервиса(РежимОтправки, Тест);
	
	АдресСервиса	= ТекущийСервисРасчетаЧека.АдресСервиса;
	ИмяКоманды		= ТекущийСервисРасчетаЧека.ИмяКоманды;
	Таймаут			= ТекущийСервисРасчетаЧека.Таймаут;
	
	Если ПустаяСтрока(АдресСервиса) ИЛИ ПустаяСтрока(ИмяКоманды) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ИнтернетПрокси = Неопределено;
	Если ТекущийСервисРасчетаЧека.ИспользоватьПрокси Тогда
		ИнтернетПрокси = Новый ИнтернетПрокси;
		ИнтернетПрокси.Установить("http", ТекущийСервисРасчетаЧека.ПроксиСервер, ТекущийСервисРасчетаЧека.ПроксиПорт);
		ИнтернетПрокси.Пользователь	= ТекущийСервисРасчетаЧека.ПроксиПользователь;
		ИнтернетПрокси.Пароль		= ТекущийСервисРасчетаЧека.ПроксиПароль;
	КонецЕсли;
		
	Попытка

		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Определение = Новый WSОпределения(АдресСервиса,,,ИнтернетПрокси, Таймаут);
		
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОстатокТаймаута = Таймаут - (ОкончаниеВыполнения - НачалоВыполнения)/1000;
		Если ОстатокТаймаута < 1 Тогда
			ВызватьИсключение "Истекло время ожидания (таймаут="+Таймаут+")";
		КонецЕсли;
		Если Таймаут <> Окр(ОстатокТаймаута,0) Тогда
			Таймаут = Окр(ОстатокТаймаута,0)+1;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "Check", "CheckSoap", ИнтернетПрокси, Таймаут);
		
		Если ИмяКоманды = "calc" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.calc(СтрокаJSON));
		ИначеЕсли ИмяКоманды = "calc_test" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.calc_test(СтрокаJSON));
		ИначеЕсли ИмяКоманды = "kkm_status" Тогда
			СтруктураВозврата.Вставить("Ответ"	, Прокси.kkm_status(СтрокаJSON));
		КонецЕсли;
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции

Функция ОтправитьЧекНаОбработку_Протокол3(СтрокаJSON, РежимОтправки = 0, Тест = Ложь) Экспорт
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Ошибка"	, Ложь);
	СтруктураВозврата.Вставить("Ответ"	, "");
	
	//ТекущийСервисРасчетаЧека	= ПолучитьПараметрыСервиса(РежимОтправки, Тест);
	//
	//АдресСервиса	= ТекущийСервисРасчетаЧека.АдресСервиса;
	//ИмяКоманды		= ТекущийСервисРасчетаЧека.ИмяКоманды;
	//Таймаут			= ТекущийСервисРасчетаЧека.Таймаут;
	
	Если Тест Тогда
		АдресСервиса = "http://10.1.0.197/check_v3/ws/check?wsdl";
	Иначе
		АдресСервиса = "http://p77sp.msk.local:89/check_v3/ws/check?wsdl";
	КонецЕсли;
	
	//Если Тест Тогда
	//	АдресСервиса = "";
	//Иначе
	//	АдресСервиса = "";
	//КонецЕсли;
	Таймаут = 10;
	
	Если ПустаяСтрока(АдресСервиса) Тогда
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, "не определен адрес сервиса");
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ИнтернетПрокси = Неопределено;
	//Если ТекущийСервисРасчетаЧека.ИспользоватьПрокси Тогда
	//	ИнтернетПрокси = Новый ИнтернетПрокси;
	//	ИнтернетПрокси.Установить("http", ТекущийСервисРасчетаЧека.ПроксиСервер, ТекущийСервисРасчетаЧека.ПроксиПорт);
	//	ИнтернетПрокси.Пользователь	= ТекущийСервисРасчетаЧека.ПроксиПользователь;
	//	ИнтернетПрокси.Пароль		= ТекущийСервисРасчетаЧека.ПроксиПароль;
	//КонецЕсли;
		
	Попытка

		НачалоВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Определение = Новый WSОпределения(АдресСервиса,,,ИнтернетПрокси, Таймаут);
		
		ОкончаниеВыполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОстатокТаймаута = Таймаут - (ОкончаниеВыполнения - НачалоВыполнения)/1000;
		Если ОстатокТаймаута < 1 Тогда
			ВызватьИсключение "Истекло время ожидания (таймаут="+Таймаут+")";
		КонецЕсли;
		Если Таймаут <> Окр(ОстатокТаймаута,0) Тогда
			Таймаут = Окр(ОстатокТаймаута,0)+1;
		КонецЕсли;
		
		Прокси = Новый WSПрокси(Определение, "http://www.kegelbum.ru/", "Check", "CheckSoap", ИнтернетПрокси, Таймаут);
		
		СтруктураВозврата.Вставить("Ответ"	, Прокси.order(СтрокаJSON));
	Исключение
		
		СтруктураВозврата.Вставить("Ошибка"	, Истина);
		СтруктураВозврата.Вставить("Ответ"	, ОписаниеОшибки());
		
	КонецПопытки;
	
	Возврат СтруктураВозврата;

КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПолучениеДанных

Функция ПолучитьДопСвойство(ИБ = Неопределено, Свойство)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДополнительныеСвойства.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСвойства КАК ДополнительныеСвойства
	|ГДЕ
	|	ДополнительныеСвойства.Свойство = &Свойство";
	
	Если ЗначениеЗаполнено(ИБ) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И ДополнительныеСвойства.Объект = &Объект";
		Запрос.УстановитьПараметр("Объект", ИБ);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	
	Рез = Запрос.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Рез.Выгрузить()[0][0];
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекущийРегион_УДАЛИТЬ() ЭКСПОРТ
	Возврат ПараметрыСеанса.ТекущаяИБ.Регион;
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

