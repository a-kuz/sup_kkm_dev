#Если НЕ ТонкийКлиент Тогда

Функция Подключиться(ServerName, UID="sa", PWD="ser09l", DB = Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(UID) Тогда
		UID = "sa";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(PWD) Тогда
		PWD = "ser09l";
	КонецЕсли;

	КлючПодключения = "" + ServerName + ?(DB = Неопределено, "", DB);         
	SQLConnection = Неопределено;
	глСоединения = глСоединения;
	Если Не ЗначениеЗаполнено(глСоединения) Тогда
		глСоединения = Новый Соответствие;
	КонецЕсли;
	SQLConnection = глСоединения.Получить(КлючПодключения);
	
	Если Не SQLConnection = Неопределено Тогда
		Попытка
			SQLConnection.Execute("Select 1"); // такой тест
		Исключение
			SQLConnection = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Если Не SQLConnection = Неопределено Тогда
		Возврат SQLConnection;
	КонецЕсли;
		
	SQLConnection = Новый COMОбъект("ADODB.Connection");
    
    ConnectString = "Provider=SQLOLEDB;DRIVER={SQL Server Native Client 11.0};" + 
	                "Data Source=" + ServerName +
	                ";UID=" + UID + ";PWD=" + PWD;
	Если DB <> Неопределено Тогда
		ConnectString = ConnectString + "; Initial Catalog=" + DB;						
	КонецЕсли;  	
							
    SQLConnection.ConnectionString = ConnectString;
    SQLConnection.ConnectionTimeOut = 5;
    SQLConnection.CommandTimeout = 30;
	
    Попытка
        SQLConnection.Open();        
    Исключение
		ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("Подключение к базе", УровеньЖурналаРегистрации.Ошибка,,,ТекстСообщения + Символы.ПС + "ConnectString = " + ConnectString);
        
        SQLConnection = Неопределено;
    КонецПопытки;
	глСоединения.Вставить(КлючПодключения, SQLConnection);
	Возврат SQLConnection;
КонецФункции

Функция ПодключитьсяКloyality_ext() Экспорт 
	ТекИБ = ПараметрыСеанса.ТекущаяИБ;
	
	ServerName 	= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ТекИБ, "Лояльность_СерверSQL");
	UID 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ТекИБ, "Лояльность_ИмяПользователяSQL");
	PWD 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ТекИБ, "Лояльность_ПарольSQL");
	
	Если ServerName = Неопределено Тогда
		ОшибкаТекст = "Не определено значение свойства Лояльность_СерверSQL для ИБ (" + ТекИБ + ")";
		
		#Если Клиент Тогда
			Предупреждение(ОшибкаТекст);
		#КонецЕсли
		
		ЗаписьЖурналаРегистрации("Подключение к базе", УровеньЖурналаРегистрации.Ошибка,,,ОшибкаТекст);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Подключиться(ServerName, UID, PWD);
КонецФункции

Функция ПодключитьсяКegais() Экспорт 
	ТекИБ = ПараметрыСеанса.ТекущаяИБ;
	
	ServerName 	= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ТекИБ, "Excise_Server");
	UID 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ТекИБ, "Excise_User");
	PWD 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ТекИБ, "Excise_Pwd");
	DB 			= "Egais";
	
	Если ServerName = Неопределено Тогда
		ОшибкаТекст = "Не определено значение свойства Excise_Server для основой ИБ (" + ТекИБ + ")";
		
		#Если Клиент Тогда
			Предупреждение(ОшибкаТекст);
		#КонецЕсли
		
		ЗаписьЖурналаРегистрации("Подключение к базе", УровеньЖурналаРегистрации.Ошибка,,,ОшибкаТекст);
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат Подключиться(ServerName, UID, PWD, DB);
КонецФункции

Функция ПодключитьсяКСУПцентр(Регион) Экспорт
	
	ServerName 	= ?(Регион = Справочники.Регионы.Р77, "tdrm77", "black_hawk");
	DB 			= "Raz_ref";
			
	Возврат Подключиться(ServerName, "", "", DB);
КонецФункции

Процедура ВыполнитьЗапрос(Подключение, ТекстЗапроса, Отказ=Ложь, ТекстОшибки="") Экспорт
	
	РезультатЗапроса = Новый COMОбъект("ADODB.Recordset");
	
	Попытка
		РезультатЗапроса.Open(ТекстЗапроса, Подключение);
	Исключение
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	РезультатЗапроса = Неопределено;
КонецПроцедуры

Функция ВыполнитьЗапросВыборки(Подключение, ТекстЗапроса, Отказ=Ложь, ТекстОшибки="") Экспорт
	
	РезультатЗапроса = Новый COMОбъект("ADODB.Recordset");
	
	Попытка
		РезультатЗапроса.Open(ТекстЗапроса, Подключение);
	Исключение
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатЗапроса = Неопределено;
		Возврат Неопределено;
	КонецПопытки;
	
	Результат = Новый ТаблицаЗначений;
	
	// Создаем структура таблицы значений
	КоличествоКолонок = РезультатЗапроса.Fields.Count;
	Для НомерКолонки=0 По КоличествоКолонок-1 Цикл
		Результат.Колонки.Добавить(РезультатЗапроса.Fields.Item(НомерКолонки).Name);
	КонецЦикла;
	
	// Проверяем результат запроса на наличие записей
	Если РезультатЗапроса.EOF() = 1 Тогда
		РезультатЗапроса = Неопределено;
		Возврат Результат;
	КонецЕсли;
	
	Пока РезультатЗапроса.EOF() = 0 Цикл
		НоваяСтрока = Результат.Добавить();
		
		Для НомерКолонки=0 По КоличествоКолонок-1 Цикл
			НоваяСтрока[НомерКолонки] = РезультатЗапроса.Fields(НомерКолонки).Value;//РезультатЗапроса.Fields(РезультатЗапроса.Fields.Item(НомерКолонки).Name).Value;
		КонецЦикла;
		
		РезультатЗапроса.MoveNext();
	КонецЦикла;
	
	РезультатЗапроса.Close();	
	РезультатЗапроса = Неопределено;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗапросВыборкиПервойЗаписи(Подключение, Знач ТекстЗапроса, Отказ=Ложь, ТекстОшибки="", ИспользоватьТОП1=Истина) Экспорт
	
	Если ИспользоватьТОП1 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "SELECT", "SELECT TOP 1 ");
	КонецЕсли;
	
	РезультатЗапроса = Новый COMОбъект("ADODB.Recordset");
	
	Попытка
		РезультатЗапроса.Open(ТекстЗапроса, Подключение);
	Исключение
		Отказ = Истина;
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатЗапроса = Неопределено;
		Возврат Неопределено;
	КонецПопытки;
	
	// Проверяем результат запроса на наличие записей
	Если РезультатЗапроса.EOF() = 1 Тогда
		РезультатЗапроса = Неопределено;
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	Если РезультатЗапроса.EOF() = 0 Тогда
		Для НомерКолонки=0 По РезультатЗапроса.Fields.Count-1 Цикл
			ИмяКолонки = РезультатЗапроса.Fields.Item(НомерКолонки).Name;
			Результат.Вставить(ИмяКолонки,РезультатЗапроса.Fields(ИмяКолонки).Value);
		КонецЦикла;
	КонецЕсли;
	
	РезультатЗапроса.Close();	
	РезультатЗапроса = Неопределено;
	
	Возврат Результат;
	
КонецФункции

Функция ПодключитьсяКsup_kkm(ИнформационнаяБаза) Экспорт
	//:ИнформационнаяБаза = ПараметрыСеанса.ТекущаяИБ;
		
	ServerName 	= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ИнформационнаяБаза, "Лояльность_СерверSQL");
	UID 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ИнформационнаяБаза, "Лояльность_ИмяПользователяSQL");
	PWD 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ИнформационнаяБаза, "Лояльность_ПарольSQL");
	
	
	Если ServerName = Неопределено Тогда
		Если Найти(ИнформационнаяБаза.СерверХост, "ost") Тогда
			ServerName 	= ИнформационнаяБаза.СерверIp;//РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ИнформационнаяБаза, "Лояльность_СерверSQL");
		Иначе
			ServerName 	= ИнформационнаяБаза.СерверIp + "\sqlexpress";//РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ИнформационнаяБаза, "Лояльность_СерверSQL");
		КонецЕсли;
	КонецЕсли;
	
	
	
	Возврат Подключиться(ServerName,UID, PWD,"sup_kkm");
КонецФункции

#КонецЕсли