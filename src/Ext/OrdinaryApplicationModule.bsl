Перем РаботаСокнами Экспорт;
Перем глВерсия Экспорт;						// 1 - ЛАЙТ, 2 - БИЗНЕС, 3 - ПРЕМИУМ
Перем глТорговоеОборудование Экспорт;		// Структура со ссылками на объекты для работы с торговым оборудованием
Перем глРубли Экспорт;						// значение константы Основная валюта
Перем глСимволРубля Экспорт;
Перем глВнешнееСобытиеОбработано Экспорт;	// для предотвращения повторной обработки события в Модуле приложения
Перем ирПлатформа Экспорт;
// переменные для работы интерфейса РМ
Перем глРабочееМесто Экспорт;			// Текущее рабочее место
Перем глПараметрыРМ Экспорт;			// Структура с параметрами текущего рабочего места
Перем глПользователь Экспорт;			// Текущий пользователь
Перем глСтекОкон Экспорт;				// Массив стека открытых окон
Перем глОбработки Экспорт;				// Структура для хранения объектов используемых обработок
Перем глСоединения Экспорт;				// Соответствие для хранения соединений с SQL базами

Перем глДопУправлениеФормами Экспорт;	// Объект внешней обработки для управления формами
Перем глФлагБлокировка Экспорт;			// Признак блокировки
Перем глФлагЗапретБлокировки Экспорт;	// Признак запрета повторной блокировки
Перем глОжидание Экспорт;				// Форма окна ожидания
Перем глТаблицаСобытий Экспорт;			// Таблица событий для записи в журнал регистрации / центр безопасности
Перем WshShell Экспорт;					// Объект WScript.Shell, используется для эмуляции нажатий клавиш
Перем глТаблицаНаличияПоВремени Экспорт;// Для кэширования данных при обновлении наличия в продаже
Перем глТипыДней Экспорт;				// Для кэширования расчетов по тарифам
Перем глТарифныеСетки Экспорт;			// Для кэширования расчетов по тарифам
Перем глРасписаниеТиповЦен Экспорт;		// Для кэширования определения типа цены
Перем глДоставкаОсновнойРежим Экспорт;	// Признак работы в режиме "Доставка"
Перем глКоличествоХранимыхЦифрТелефона Экспорт;	// Число. Это то количество символов, которое будет обрезаться справа при поиске и сохранении в базе данных.

// переменные для работы интерфейса Админа
Перем глФормаНастройкиРМ Экспорт;		// нужна чтобы форма настройки РМ не открывалась в разных окнах
Перем глСписокКлиентов Экспорт;			// используется в рассылке и в отчетах

// РИБ
Перем глОбработкаАвтоОбменДанными Экспорт;    // Объект обработки автообмена данными. Необходимо для автообмена в РИБ.
Перем глКоличествоСекундОпросаОбмена Экспорт; // Интервал времени (в секундах) проверки обмена данными.

Перем ВКСинхронизацииССайтом Экспорт;	// Объект компоненты синхронизации с сайтом

Перем глНомерГруппыСпецифик Экспорт;

Перем глБлок Экспорт;//pr
Перем глЦветаАкционныхТоваров Экспорт;
Перем глОтладочнаяИнформация Экспорт;

Перем ВыполнитьПриНачалеРаботыСистемы;
Перем глПоследниеСотрудники Экспорт; // Массив из четырех последних сотрудников работавших на РМ

//АК
Перем глРежимКиоск Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Загрузка внешних компонент и проверка версий
//
// Возвращаемое значение:
//  Истина - загрузка прошла успешно, ложь - несупешно.
//
Функция глЗагрузитьВнешниеКомпоненты() Экспорт
	
	//Шрифты.УстановитьШрифт();
	Возврат Истина;
КонецФункции

// Подключается как обработчик ожидания, запускает процесс закрытия окон.
//
Процедура глАвтоблокировка() Экспорт
	
	Если ЗначениеЗаполнено(глПользователь) И ЗначениеЗаполнено(глСтекОкон) Тогда
		Если глСтекОкон.Количество() - 1 Тогда
			Возврат;
		КонецЕсли;
		глФлагБлокировка = Истина;
		Попытка
			глСтекОкон[0].Форма.Закрыть();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при всех интерактивных действиях пользователя в интерфейсе РМ,
// подключает обработчик ожидания для срабатывания автоблокировки.
Процедура глОтсечкаПростоя() Экспорт
	Попытка
		Если глПараметрыРМ.БлокировкаАвто И НЕ глФлагЗапретБлокировки Тогда
			ПодключитьОбработчикОжидания("глАвтоблокировка", глПараметрыРМ.БлокировкаАвтоВремя, Истина);
		КонецЕсли;
	Исключение
	КонецПопытки;
		
КонецПроцедуры

Процедура глУбратьЗаголовок() Экспорт
	Если глПараметрыРМ.ИнтерфейсТип = 9 Тогда
		глСтекОкон[0].Форма.Заголовок = "";
	КонецЕсли;
КонецПроцедуры

// Подключается как обработчик ожидания. Срабатывает однократно через 0.1с после открытия окна.
// Устанавливает размеры и положения окна.
Процедура глУправлениеОкнами() Экспорт
	
	Если ТипЗнч(глСтекОкон) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	ТекущееОкно = глСтекОкон[0];
	
	ТекущаяФорма = ТекущееОкно.Форма;
	
	//// получаем указатель на текущее окно
	hWnd = 1;
	ТекущееОкно.hWnd = hWnd;
	ТекущееОкно.Заголовок = ТекущаяФорма.Заголовок;
	
	ИнтерфейсРМ.УстановитьУказательОкна(ТекущееОкно);
	
	Если ТекущаяФорма.РежимРабочегоСтола Тогда
		Возврат;
	КонецЕсли; 
	
	ПараметрыОкна = ТекущаяФорма.ПараметрыОкна;

	Если ПараметрыОкна.Ширина <> Неопределено И ПараметрыОкна.Ширина  <> ТекущаяФорма.Ширина И ПараметрыОкна.Лево = Неопределено Тогда	
		//РаботаСокнами.УстановитьРазмерДочернегоОкна( hWnd, ПараметрыОкна.Ширина, ПараметрыОкна.Высота );
		РаботаСокнами.УстановитьРазмерДочернегоОкна(ТекущееОкно.Заголовок, ПараметрыОкна.Ширина, ПараметрыОкна.Высота );
	КонецЕсли;
	
	Если ПараметрыОкна.Центр Тогда
		//Если ТекущееОкно.МодальныйРежим И глПараметрыРМ.Свойство("ШиринаОкна1С") Тогда
		//	РаботаСокнами.GetWndSizeV8( hWnd, ПараметрыОкна.Ширина, ПараметрыОкна.Высота );
		//	ПараметрыОкна.Лево = (глПараметрыРМ.ШиринаОкна1С - ПараметрыОкна.Ширина) / 2;
		//	ПараметрыОкна.Верх = (глПараметрыРМ.ВысотаОкна1С - ПараметрыОкна.Высота) / 2;
		//Иначе
			//РаботаСокнами.CenterV8( hWnd );
		//КонецЕсли; 
		РаботаСокнами.CenterV8( ТекущееОкно.hWnd );
	ИначеЕсли ПараметрыОкна.Лево <> Неопределено Тогда
		РаботаСокнами.УстановитьПоложениеОкна( ТекущаяФорма.Заголовок, ПараметрыОкна.Лево, ПараметрыОкна.Верх, ПараметрыОкна.Ширина, ПараметрыОкна.Высота );
	КонецЕсли;
	
	
	Если ТекущееОкно.Форма.ПараметрыОкна.Свойство("НеОбрезать") Тогда
		РаботаСокнами.AOTon(ТекущаяФорма.Заголовок);
	ИначеЕсли ТекущееОкно.Форма.ПараметрыОкна.Свойство("Обрезать") Тогда
			Заголовок = ТекущаяФорма.Заголовок;
			Если Не ЗначениеЗаполнено(Заголовок) Тогда
				Заголовок = "ahk_class V8NewLocalFrameBaseWnd";
			КонецЕсли;
			
			ИнтерфейсРМ.ОбрезкаОкна(Заголовок);
		
	КонецЕсли;
КонецПроцедуры

// Обработчик ожидания для загрузки данных из БЭКа
//
Процедура глАвтозагрузка() Экспорт
    
	Если НЕ Константы.АвтообменИспользовать.Получить() Тогда
		Возврат;
	КонецЕсли; 
	
	ПравилаЗагрузки = Константы.АвтообменПравилаЗагрузки.Получить();
	
	//Если ЗначениеЗаполнено(ПравилаЗагрузки) И 
	//	ПолучитьНомерСоединенияПервогоПользователя() = НомерСоединенияИнформационнойБазы() Тогда
	//	
	//	АвтообменДанными.ЗагрузитьДанныеXML(ПравилаЗагрузки);
	//	
	//КонецЕсли;

КонецПроцедуры

// Подключается как обработчик ожидания
// 
//
Процедура глОбработкаОчередиСобытий() Экспорт
	
	Если ЗначениеЗаполнено(глРабочееМесто) Тогда
		// обработка событий для текущего РМ
		ИнтерфейсРМ.ОбработкаОчередиСобытий(глРабочееМесто);
	КонецЕсли; 
	
	//Если ПолучитьНомерСоединенияПервогоПользователя() = НомерСоединенияИнформационнойБазы() Тогда
	//	// обработка общих событий
	//	ИнтерфейсРМ.ОбработкаОчередиСобытий( Справочники.РабочиеМеста.ПустаяСсылка() );
	//КонецЕсли; 
	//
КонецПроцедуры
 
// Процедура осуществляет проверку на необходимость обмена данными с заданным интервалом.
//
Процедура ПроверкаОбменаДанными() Экспорт

	Если глОбработкаАвтоОбменДанными = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	
	глОбработкаАвтоОбменДанными.ПровестиОбменДанными(); 
	
	//ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глКоличествоСекундОпросаОбмена);

КонецПроцедуры

// Процедура служит для поддержки работы регламентных заданий в файловой версии.
//
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры

Процедура глОтключитьОбработчикОжидания(ИмяПроцедуры) Экспорт 

	ОтключитьОбработчикОжидания(ИмяПроцедуры);

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПриНачалеРаботыСистемы()
	//Если Не ВыполнитьПриНачалеРаботыСистемы = Неопределено Тогда
	//	Предупреждение("Отладка");	
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрЗапуска) И ВыполнитьПриНачалеРаботыСистемы = Неопределено Тогда
		ЗавершитьРаботуСистемы(Ложь, Ложь);
		Возврат;
	КонецЕсли;
	
	WshShell = Новый ComОбъект("WScript.Shell");
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если Пользователь.Имя = "Линия" Тогда
		Возврат;
	КонецЕсли;
	Если Не СтрНайти(НРег(ИмяПользователя()), "pos") И Не СтрНайти(НРег(ИмяПользователя()), "обмен") И ЗначениеЗаполнено(ИмяПользователя()) Тогда
		Если Не Пользователь.ПарольУстановлен Тогда
			Пароль = "";
			Пока Пароль = "" Цикл
				ВвестиСтроку(Пароль, "Придумайте новый пароль");
				Пароль2 = "";
				ВвестиСтроку(Пароль2, "Повторите ввод пароля");
				Если Пароль<>Пароль2 Тогда
					Предупреждение("Пароли не совпадают!");
					Пароль = "";
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			Пользователь.Пароль = Пароль;
			Пользователь.Записать();
		КонецЕсли;
	КонецЕсли;


	// Проверка пользователя
	Если Пользователь.Имя = "" Тогда
		Если ЗаполнитьПользователейПоУмолчанию() Тогда
			ЗавершитьРаботуСистемы(Ложь,Истина);
		Иначе
			Предупреждение("Вход в систему без авторизации запрещен!
							|Заведите список пользователей в конфигураторе...");
			ЗавершитьРаботуСистемы(Ложь);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// РИБ
	УправлениеРИБ.УстановитьПараметрыРИБ();
		
	Если Не ПараметрыСеанса.ТекущаяИБ.Предопределенный Тогда
		// загружаем файлы "открытие смены", "открытие кассовой смены", "номер чека" в случае файлового запуска
		Если Найти(ВРег(СтрокаСоединенияИнформационнойБазы()),"FILE") = 1 Тогда
			Каталог = РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ПараметрыСеанса.ТекущаяИБ, "ПутьДляЛогирования");//Константы.ПутьДляЛогирования.Получить();
			Если Каталог = Неопределено Тогда
				Каталог = Константы.ПутьДляЛогирования.Получить();
			КонецЕсли;
			Каталог = ?(Прав(Каталог,1) = "\",Каталог,Каталог + "\");
			Каталог = Каталог + Формат(ТекущаяДата(),"ДФ=yyyyMMdd") + "\";
			СписокМасок = Новый СписокЗначений; // важен порядок
			СписокМасок.Вставить(0,"ОткрытиеСмены_*.txt");
			СписокМасок.Вставить(1,"ЗакрытиеСмены_*.txt");
			СписокМасок.Вставить(2,"ОткрытиеКассовойСмены_*.txt");
			СписокМасок.Вставить(3,"ЗакрытиеКассовойСмены_*.txt");
			СписокМасок.Вставить(4,"НомерЧекаНФР_*.txt");
			для каждого эл из СписокМасок Цикл
				МаскаФайла = эл.Значение;
				Файлы = НайтиФайлы(Каталог,МаскаФайла);
				Для Каждого ИмяФайла из Файлы Цикл
					Попытка
						Объект = ПрочитатьОбъектИзФайла(ИмяФайла.ПолноеИмя);
						Объект.Записать();
						Попытка
							//УдалитьФайлы(ИмяФайла.Путь,ИмяФайла.Имя);
							//ПереместитьФайл(ИмяФайла.ПолноеИмя,ИмяФайла.ПолноеИмя + "_");
						Исключение
							
						КонецПопытки;
					Исключение
						// пока не понятно что делать если была ошибка при загрузке или записи
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Каталог = РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ПараметрыСеанса.ТекущаяИБ, "ПутьДляЛогирования");//Константы.ПутьДляЛогирования.Получить();
			Если Каталог = Неопределено Тогда
				Каталог = Константы.ПутьДляЛогирования.Получить();
			КонецЕсли;
			Каталог = ?(Прав(Каталог,1) = "\",Каталог,Каталог + "\");
			Каталог = Каталог + Формат(ТекущаяДата(),"ДФ=yyyyMMdd") + "\";
			СписокМасок = Новый СписокЗначений; // важен порядок
			СписокМасок.Вставить(0,"ОткрытиеСмены_*.txt");
			СписокМасок.Вставить(1,"ЗакрытиеСмены_*.txt");
			СписокМасок.Вставить(2,"ОткрытиеКассовойСмены_*.txt");
			СписокМасок.Вставить(3,"ЗакрытиеКассовойСмены_*.txt");
			СписокМасок.Вставить(4,"Заказ_*.txt");
			СписокМасок.Вставить(5,"Возврат_*.txt");	
			СписокМасок.Вставить(6,"ПротоколРасчетов_*.txt");	
			СписокМасок.Вставить(7,"ЗаказДопИнфо_*.txt");	
			СписокМасок.Вставить(8,"ВозвратДопИнфо_*.txt");	
			СписокМасок.Вставить(9,"НомерЧекаНФР_*.txt");
			СписокМасок.Вставить(10,"СПУЛЛояльности_*.txt");
			СписокМасок.Вставить(11,"Внесение_*.txt");
			СписокМасок.Вставить(12,"Выплата_*.txt");
			СписокЗаказов = Новый СписокЗначений;
			для каждого эл из СписокМасок Цикл
				МаскаФайла = эл.Значение;
				Файлы = НайтиФайлы(Каталог,МаскаФайла);
				Для Каждого ИмяФайла из Файлы Цикл
					Попытка
						Объект = ПрочитатьОбъектИзФайла(ИмяФайла.ПолноеИмя);
						Если Метаданные.Документы.Найти(Объект.Метаданные().Имя) <> Неопределено Тогда
							Попытка 
								Объект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
							Исключение
								Объект.Записать();
							КонецПопытки;
						Иначе
							Объект.Записать();
						КонецЕсли;
						Если СписокМасок.Индекс(эл) >= 4 Тогда
							Попытка
								//УдалитьФайлы(ИмяФайла.Путь,ИмяФайла.Имя);
								ПереместитьФайл(ИмяФайла.ПолноеИмя,ИмяФайла.ПолноеИмя + "_");
							Исключение
							КонецПопытки;
						КонецЕсли;
						// добавим список для проверки (изменим статус заказа с открыт на закрыт)
						Если СписокМасок.Индекс(эл) = 4 Тогда
							СписокЗаказов.Добавить(Объект.ссылка);
						КонецЕсли;
					Исключение
						// пока не понятно что делать если была ошибка при загрузке или записи
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
			// 
			Для каждого ВрЭл из СписокЗаказов Цикл
				Рег = РегистрыСведений.ЗаказДопИнф.СоздатьМенеджерЗаписи();
				Рег.Заказ = ВрЭл.Значение;
				Рег.Прочитать();
				Если Рег.Выбран() тогда
					Если Рег.Статус = Перечисления.СтатусыЗаказа.Открыт Тогда
						Рег.Статус = Перечисления.СтатусыЗаказа.Закрыт;
						Рег.Записать();
					КонецЕсли;
				Иначе
					Если ВрЭл.Значение.Товары.Количество() <> 0 Тогда
						Рег.Заказ = ВрЭл.Значение;
						Рег.ДатаОткрытия = ТекущаяДата();
						Рег.ДатаЗакрытия = ТекущаяДата();
						рег.ПротоколРасчетов = ВрЭл.Значение.Товары[0].ДокументОплаты;
						Рег.Записать();
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			// очистка логов ТО
			Каталог = Константы.ПутьДляЛогирования.Получить();
			МассивФайлов = НайтиФайлы(Каталог,"*.*",ложь);
			ДатаМин = НачалоДня(ДобавитьДень(ТекущаяДата(),-30));
			Для каждого эл из МассивФайлов Цикл
				Если Эл.ЭтоКаталог() Тогда
					Попытка
						Если Дата(эл.Имя) < ДатаМин Тогда
							УдалитьФайлы(Эл.ПолноеИмя);
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			//Если Найти(ВРег(ИмяКомпьютера()),"SERV") > 0 Тогда
			//	// закачиваем даные по кассам только на сервере
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка обновления версии и первого запуска
	ОбновлениеИнформационнойБазы();
	ПроверитьНомерВерсии();
	СтрокаСоединенияИнформационнойБазы = СтрокаСоединенияИнформационнойБазы();
	Сервер = НСтр(СтрокаСоединенияИнформационнойБазы, "Srvr");
	База = НСтр(СтрокаСоединенияИнформационнойБазы, "Ref");

	УстановитьЗаголовокСистемы(СокрЛП(ПараметрыСеанса.ТекущаяИБ.Наименование)+ " | " + ИмяКомпьютера() + " | " + База + " на " + Сервер);
	
	// Проверка интерфейса
	Если Пользователь.ОсновнойИнтерфейс <> Неопределено И 
		Пользователь.ОсновнойИнтерфейс.Имя = "РабочееМесто" Тогда
		//:РаботаСокнами=обработки.РаботаСокнами.Создать();
		РаботаСокнами.СкрытьПенельЗадач();
		Если Не Найти(ИмяКомпьютера(),"11_1") Тогда
			РаботаСокнами.ShowCaption(0,0,1);
		КонецЕсли;
		Если НЕ ИнтерфейсРМ.ЗапуститьРабочееМесто() Тогда
			ЗавершитьРаботуСистемы(Ложь);
			Возврат;
		КонецЕсли; 
		
	Иначе
		Если не РаботаСокнами = Неопределено Тогда
			РаботаСокнами.РазблокироватьВвод();
		КонецЕсли;
		
		Если НЕ глЗагрузитьВнешниеКомпоненты() Тогда
			ЗавершитьРаботуСистемы(Ложь);
			Возврат;
		КонецЕсли;
		
		тоВыполнитьПодключениеОтключение("Подключить");
		
	КонецЕсли;
	
	// РИБ
	Если глВерсия>1 Тогда
		Если Не УправлениеРИБ.ПараметрыРИБКорректны() Тогда		
			Предупреждение("Не задан текущий торговый объект.", 10);		
		КонецЕсли;                    	
		
		ЭтоФайловаяИБ = ПроцедурыОбменаДанными.ОпределитьЭтаИнформационнаяБазаФайловая();
		
		Если ЭтоФайловаяИБ Тогда
			
			ПользовательДляВыполненияРеглЗаданий = ПараметрыСеанса.ТекущаяИБ.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте;
			
			Если ПараметрыСеанса.ТекущийПользователь = ПользовательДляВыполненияРеглЗаданий Тогда
				
				ПоддержкаРегламентныхЗаданиеДляФайловойВерсии();
				
				ИнтервалДляОпроса = ПараметрыСеанса.ТекущаяИБ.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте;
				
				Если НЕ ЗначениеЗаполнено(ИнтервалДляОпроса) Тогда
					ИнтервалДляОпроса = 60;
				КонецЕсли;
				
				ПодключитьОбработчикОжидания("ПоддержкаРегламентныхЗаданиеДляФайловойВерсии", ИнтервалДляОпроса);
				
			КонецЕсли;
			
		КонецЕсли;

		// Автообмен РИБ
		//глОбработкаАвтоОбменДанными = ПроцедурыОбменаДанными.ВыполнитьИнициализациюАвтообменаПриНачалеРаботы();
		глОбработкаАвтоОбменДанными = Неопределено;
		Если глОбработкаАвтоОбменДанными <> Неопределено Тогда
			
			глКоличествоСекундОпросаОбмена = ПроцедурыОбменаДанными.ПолучитьКоличествоСекундОпросаЗапускаОбменаДанными();
			
			ПодключитьОбработчикОжидания("ПроверкаОбменаДанными", глКоличествоСекундОпросаОбмена);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнитьПриНачалеРаботыСистемы <> Неопределено Тогда
		Попытка
			Выполнить(ВыполнитьПриНачалеРаботыСистемы);
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	Если Не Источник = "NativeDraw" Тогда
		ОбработкаВнешнихСобытий.ПолучитьДанные(Источник, Событие, Данные, Истина);
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

Процедура глЗатемнить() Экспорт
	//Если глСтекОкон.Количество()>1 Тогда
	//	РаботаСокнами.Затемнить();
	//КонецЕсли;
КонецПроцедуры

// Процедура проверяет, есть ли необходимость выполнять обновление информационной базы.
// Если необходимо - выполняется обновление.
// Если обновление не удалось выполнить - предлагается завершить работу системы.
//
// Параметры:
//  Нет.
//
Процедура ОбновлениеИнформационнойБазы()
	Возврат;	
	// Проверка необходимости обновления информационной базы.
	Если Константы.ВерсияПрограммы.Получить() = глВерсия И 
		 Константы.НомерВерсииКонфигурации.Получить() = Метаданные.Версия Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйЗапуск = ПустаяСтрока(Константы.НомерВерсииКонфигурации.Получить());
	
	Если ПервыйЗапуск тогда
		Предупреждение("Обнаружен первый запуск!
						|Будет выполнено начальное заполнение информационной базы...");
	
	Иначе
		//Предупреждение("Изменился номер версии конфигурации!
		//				|Будет выполнено обновление информационной базы...");
	КонецЕсли;
	
	// Проверка наличия прав для обновления информационной базы.
	Если НЕ ПравоДоступа("МонопольныйРежим" , Метаданные) 
	 ИЛИ НЕ ПравоДоступа("Использование"    , Метаданные.Обработки.ОбновлениеИнформационнойБазы) 
	 ИЛИ НЕ ПравоДоступа("Администрирование", Метаданные) Тогда

		Предупреждение("Недостаточно прав для выполнения обновления!
						|Работа системы будет завершена.");
		ЗавершитьРаботуСистемы(Ложь);
		Возврат;
	КонецЕсли;

	Попытка
		УстановитьМонопольныйРежим(Истина);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
		Предупреждение("Не удалось установить монопольный режим!
						|Работа системы будет завершена.");
		ЗавершитьРаботуСистемы(Ложь);
		Возврат;
	КонецПопытки;
	
	// Обновление информационной базы.
	Обработки.ОбновлениеИнформационнойБазы.Создать().ВыполнитьОбновление();

	// Откючение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);

	// Проверка выполнения обновления информационной базы.
	Если Константы.НомерВерсииКонфигурации.Получить() <> Метаданные.Версия Тогда

		Действие = ?(ПервыйЗапуск, "начальное заполнение", "обновление");
		
		Сообщить("Не выполнено " + Действие + " информационной базы!", СтатусСообщения.Важное);

		Текст = "Не выполнено " + Действие + " информационной базы!
				|Завершить работу системы?";

		Если Вопрос(Текст, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			ЗавершитьРаботуСистемы(Ложь);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьНомерВерсии()
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не ПланыОбмена.Основной.ЭтотУзел().Центр Тогда
		Возврат;
	КонецЕсли;
	
	Сервер 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ПараметрыСеанса.ТекущаяИБ, "СерверSQL");
	База 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ПараметрыСеанса.ТекущаяИБ, "БазаSQL");
	Пользователь= "sa";
	Пароль 		= РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ПараметрыСеанса.ТекущаяИБ, "Лояльность_ПарольSQL");
	Если Пароль = Неопределено Тогда
		Пароль  = "ser09l";
	КонецЕсли;
	
	
	
	Подключение = SQL.Подключиться(Сервер, Пользователь, Пароль, База);
	
	ТекстЗапроса = "SELECT 
	| Modified    
	|FROM dbo.Config 
	|ORDER BY modified DESC";
	
	Рез = SQL.ВыполнитьЗапросВыборкиПервойЗаписи(Подключение, ТекстЗапроса);
	
	Если Рез <> Неопределено Тогда
		Ид = Рез.Modified;
	КонецЕсли;
	
	ТекИд = Константы.ИдентификаторКонфигурации.Получить();
	Если Ид <> ТекИд Тогда
		НомерВерсии = Константы.НомерВерсии.Получить();
		
		Константы.НомерВерсии.Установить(НомерВерсии+1);
		Константы.ИдентификаторКонфигурации.Установить(Ид);
	КонецЕсли;

КонецПроцедуры

Функция ЗаполнитьПользователейПоУмолчанию()
	ОписаниеЗащитыОтОпасныхДействий = Новый ОписаниеЗащитыОтОпасныхДействий();
	ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
	
	Администратор = ПользователиИнформационнойБазы.СоздатьПользователя();
	Администратор.Имя = "Администратор";
	Администратор.ПолноеИмя = "Администратор";
	Администратор.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
	Администратор.ОсновнойИнтерфейс = Метаданные.Интерфейсы.ирРазработчик;
	Администратор.Пароль = "19643003";
	Администратор.ЗащитаОтОпасныхДействий = ОписаниеЗащитыОтОпасныхДействий;
	Администратор.Записать();
	
	РабочееМесто1 = ПользователиИнформационнойБазы.СоздатьПользователя();
	РабочееМесто1.Имя = "Otdohni-pos";
	РабочееМесто1.ПолноеИмя = "Otdohni-Pos";
	РабочееМесто1.ОсновнойИнтерфейс = Метаданные.Интерфейсы.РабочееМесто;
	РабочееМесто1.Роли.Добавить(Метаданные.Роли.РабочееМесто);
	РабочееМесто1.ЗащитаОтОпасныхДействий = ОписаниеЗащитыОтОпасныхДействий;
	РабочееМесто1.Записать();

	Обмен = ПользователиИнформационнойБазы.СоздатьПользователя();
	Обмен.Имя = "Обмен";
	Обмен.ПолноеИмя = "Обмен";
	Обмен.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
	Обмен.ЗащитаОтОпасныхДействий = ОписаниеЗащитыОтОпасныхДействий;
	Обмен.Записать();
	
	РабочееМесто = ПользователиИнформационнойБазы.СоздатьПользователя();
	РабочееМесто.Имя = "Myasnov-Pos";
	РабочееМесто.ПолноеИмя = "Myasnov-Pos";
	РабочееМесто.ОсновнойИнтерфейс = Метаданные.Интерфейсы.РабочееМесто;
	РабочееМесто.Роли.Добавить(Метаданные.Роли.РабочееМесто);
	РабочееМесто.ЗащитаОтОпасныхДействий = ОписаниеЗащитыОтОпасныхДействий;
	РабочееМесто.Записать();
	
	//АК
	РабочееМесто2 = ПользователиИнформационнойБазы.СоздатьПользователя();
	РабочееМесто2.Имя = "Avtokassa-Pos";
	РабочееМесто2.ПолноеИмя = "Avtokassa-Pos";
	РабочееМесто2.Роли.Добавить(Метаданные.Роли.Автокасса);
	РабочееМесто2.ЗащитаОтОпасныхДействий = ОписаниеЗащитыОтОпасныхДействий;
	РабочееМесто2.Записать();
	
	Сотр = Справочники.Сотрудники.СоздатьЭлемент();
	Сотр.УстановитьНовыйКод();
	Сотр.Наименование = "Администратор";
	Сотр.КодДоступа = 1;
	Сотр.ФИО = "Администратор";
	
	Выб = Справочники.МестаРеализации.Выбрать();
	Пока Выб.Следующий() Цикл
		Нов = Сотр.ПраваДоступа.Добавить();
		Нов.МестоРеализации = Выб.Ссылка;
		Нов.НаборПрав = Справочники.НаборыПравДоступа.НайтиПоНаименованию("Администратор");
	КонецЦикла;
	
	ВыполнениеРегламентныхЗаданий.ЗагрузкаСправочникаСотрудников();
	Возврат Истина;
КонецФункции	

Процедура ПередЗавершениемРаботыСистемы(Отказ)
	
	//Если Вопрос("Завершить работу системы?",РежимДиалогаВопрос.ДаНет,10,КодВозвратаДиалога.Нет,"Завершение работы") = КодВозвратаДиалога.Нет Тогда 
	//	Отказ = Истина;
	//КонецЕсли;
	//
	Если НЕ Отказ Тогда 		
		//ОтключитьОбработчикОжидания("глОбработкаОчередиСобытий");
		ОтключитьОбработчикОжидания("глАвтоблокировка");
		//ОтключитьОбработчикОжидания("ПроверкаОбменаДанными");
	КонецЕсли; 
	Если ЗначениеЗаполнено(глСтекОкон) Тогда
		Если глСтекОкон.Количество() = 1 Тогда
			О = Ложь;
			//глСтекОкон[0].Форма.ЭтотОбъект.ДействияПередЗакрытиемФормы(глСтекОкон[0].Форма, О);		
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

Процедура ПриЗавершенииРаботыСистемы()
	СохранитьНастройкиПользователя();
	
	глСтекОкон = Новый Массив;
	глОбработки = Новый Структура;
	глСоединения = Новый Соответствие;
	РаботаСокнами = Неопределено;
	WshShell = null;
	Если СтрНайти(ИмяКомпьютера(), "-k") Тогда
		КомандаСистемы("taskkill /im 1cv8.exe /f");
	КонецЕсли;	
КонецПроцедуры

Процедура ПередНачаломРаботыСистемы(Отказ)
	ОбработатьПараметрыЗапуска(ПараметрЗапуска,Отказ);	
	Если Не Отказ Тогда
		Если СтрНайти(НРег(ИмяПользователя()),"pos") Тогда
			РаботаСокнами = Обработки.РаботаСокнами.Создать();
			РаботаСокнами.ЗаблокироватьВвод();
			
		КонецЕсли;
	Иначе
		Отказ = Ложь;
		ЗавершитьРаботуСистемы(Ложь,Ложь);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВЗАИМОДЕЙСТВИЕ С СУП ТТ (AUTOMATION СЕРВЕР)

Функция ОбработатьПараметрыЗапуска(Знач стрКоманда, Отказ = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(стрКоманда) Тогда
		Отказ = Истина;
		Если Найти(стрКоманда, "ОбновитьТовары") Тогда
			ОбновлениеТоваров = Обработки.ОбновлениеТоваров.Создать();
			
			Попытка
				ОбновлениеТоваров.Загрузка();
				Результат = Новый Структура("Результат", "1");
			Исключение
				Результат = Новый Структура("Результат, ОписаниеОшибки", "0", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
			КонецПопытки;
			стрРезультат = ЛояльностьКлиент.СформироватьJSON(Результат);
			ЗарегистрироватьСобытие("Вызов команды из СУП ТТ.Ответ",УровеньЖурналаРегистрации.Информация, , , стрРезультат);
			Возврат стрРезультат;
		ИначеЕсли Найти(стрКоманда, "ОбновитьКассиров") Тогда
			ВыполнениеРегламентныхЗаданий.ЗагрузкаСправочникаСотрудников();
			Возврат "{""Результат"":1}";
		ИначеЕсли Найти(стрКоманда, "{") Тогда
			Попытка
				ЧтениеJSON = Новый ЧтениеJSON;  
				ЧтениеJSON.УстановитьСтроку(стрКоманда);
				СтруктураКоманды = ПрочитатьJSON(ЧтениеJSON);
				
				Если СтруктураКоманды.Команда = "ОткрытьСмену" Тогда
					Результат = ОткрытьСмену(СтруктураКоманды);
					
					Результат = ЛояльностьКлиент.СформироватьJSON(Результат);
				ИначеЕсли СтруктураКоманды.Команда = "НомерТекущейСменыККМ" Тогда
					Результат = НомерТекущейСменыККМ(ДатаИзСтроки(СтруктураКоманды.Дата), СтруктураКоманды.НомерККМ);
				ИначеЕсли СтруктураКоманды.Команда = "ВыручкаПоККМ" Тогда
					Результат = ВыручкаПоККМ(ДатаИзСтроки(СтруктураКоманды.Дата), СтруктураКоманды.НомерККМ);
				ИначеЕсли СтруктураКоманды.Команда = "ЗакрытьСменуТТ" Тогда
					ВернутьОбъект = Неопределено;
					СтруктураКоманды.Свойство("ВернутьОбъект", ВернутьОбъект);
					ВернутьОбъект = ?(ВернутьОбъект = Неопределено, Ложь, Истина);
					Результат = ЗакрытьСменуТТ(ДатаИзСтроки(СтруктураКоманды.Дата), СтруктураКоманды.имяМестаРеализации, ВернутьОбъект);
				ИначеЕсли СтруктураКоманды.Команда = "ЗапросОперативнойРеализации" Тогда
					ВернутьОбъект = Неопределено;
					СтруктураКоманды.Свойство("ВернутьОбъект", ВернутьОбъект);
					ВернутьОбъект = ?(ВернутьОбъект = Неопределено, Ложь, Истина);
					Результат = ЗапросОперативнойРеализации(ДатаИзСтроки(СтруктураКоманды.Дата), СтруктураКоманды.имяМестаРеализации,ВернутьОбъект);
				ИначеЕсли СтруктураКоманды.Команда = "ВыполнитьОбменПоНастройкеXML" Тогда
					Результат = ВыполнитьОбменПоНастройкеXML();
				ИначеЕсли СтруктураКоманды.Команда = "ПрогрузитьВесы" Тогда
					ОбработкаВесы = Обработки.ПрогрузкаВесов.Создать();
					Попытка
						ОбработкаВесы.ЗагрузитьВесы(СтруктураКоманды.ФлагОчисткиВесов,СтруктураКоманды.Весы,СтруктураКоманды.Товары);
						Возврат "{""Результат"":1}";
					Исключение
						Возврат "{""Результат"":0, ""ОписаниеОшибки"":"""+ОписаниеОшибки()+"""}";
					КонецПопытки;
				ИначеЕсли СтруктураКоманды.Команда = "ПроверкаСвязиВесы" Тогда
					ОбработкаВесы = Обработки.ПрогрузкаВесов.Создать();
					Попытка
						Ответ = ОбработкаВесы.ПроверкаСвязи(СтруктураКоманды.ИПВесов);
						Возврат "{""Результат"":""" + Ответ.Ошибка + """, ""ОписаниеОшибки"":"""+Ответ.ТекстОшибки+"""}";;
					Исключение
						Возврат "{""Результат"":0, ""ОписаниеОшибки"":"""+ОписаниеОшибки()+"""}";
					КонецПопытки;
				ИначеЕсли СтруктураКоманды.Команда = "ПечатьЦенников" Тогда
					Возврат ЛояльностьКлиентСервер.ПолучитьДанныеДляЦенников(СтруктураКоманды);
				ИначеЕсли СтруктураКоманды.Команда = "ЛояльностьРежимОффлайн" Тогда
					Возврат Лояльность.ИзменитьРежимОффлайн(СтруктураКоманды);
				//{{УК_НФ СА 20170928 
				ИначеЕсли СтруктураКоманды.Команда = "ОтчетыСУПУП" Тогда
					Возврат СУПУП.ПолучитьОтчет(стрКоманда);
				//}}УК_НФ СА 20170928
				КонецЕсли;
				Если ТипЗнч(Результат) = Тип("Строка") Тогда
					стрРезультат = Результат;
				Иначе
					Попытка
						стрРезультат = ЛояльностьКлиент.СформироватьJSON(Результат);
					Исключение
						стрРезультат = ЗначениеВСтрокуВнутр(Результат);
					КонецПопытки;
				КонецЕсли;
				ЗарегистрироватьСобытие("Вызов команды из СУП ТТ.Ответ",УровеньЖурналаРегистрации.Информация, , , стрКоманда + Символы.ПС + стрРезультат);
				Возврат Результат;
			Исключение
				ЗарегистрироватьСобытие("Вызов команды из СУП ТТ.Ответ",УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат "{""Результат"":0, ""ОписаниеОшибки"":"""+ОписаниеОшибки()+"""}";
			КонецПопытки;
		ИначеЕсли стрКоманда = "ВыполнитьОбменДанными" Тогда
			глВыполнитьОбменДаннымиРИБ();
			ЗарегистрироватьСобытие("Запуск обмена через параметр запуска",УровеньЖурналаРегистрации.Информация, , , Результат);
			Сообщить("Обмен закончен");
		ИначеЕсли СтрНачинаетсяС(стрКоманда, "Выполнить") Тогда
			Отказ = Ложь;
			ЗарегистрироватьСобытие("Выполнение кода через параметр запуска",УровеньЖурналаРегистрации.Информация, , , стрКоманда);
			стрКоманда = СтрЗаменить(стрКоманда,"Выполнить","");
			ВыполнитьПриНачалеРаботыСистемы = стрКоманда;			
			
		ИначеЕсли Лев(НРег(ИмяКомпьютера()), 2) = "ak" ИЛИ стрКоманда = "ak" Тогда
			
			ЗапуститьСистему("/RunModeManagedApplication/iTaxi");
			
		Иначе
			Отказ = Ложь;
			Предупреждение("Не опознана команда запуска: " + ПараметрЗапуска,40);
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ВыполнитьОбменПоНастройкеXML() Экспорт
	Попытка
	ПутьКФайлуДанныхВыгрузки = Неопределено;	
	
	Выб = Справочники.НастройкиОбменовДаннымиXML.Выбрать();
	Пока Выб.Следующий() Цикл
		Если Выб.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		АвтообменДанными.ВыгрузитьДанныеXML(Выб.Ссылка);
		ПутьКФайлуДанныхВыгрузки = Выб.ПутьКФайлуДанныхВыгрузки;
	КонецЦикла;
		Результат = Новый Структура("Результат,  ПутьКФайлуДанныхВыгрузки", ?(ПутьКФайлуДанныхВыгрузки = Неопределено, -1, 1), ПутьКФайлуДанныхВыгрузки);
	Исключение
		Результат = Новый Структура("Результат,  ПутьКФайлуДанныхВыгрузки, ОписаниеОшибки", ?(ПутьКФайлуДанныхВыгрузки = Неопределено, -1, 1), ПутьКФайлуДанныхВыгрузки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	Возврат Результат;
	
КонецФункции


Процедура глВыполнитьОбменДаннымиРИБ()
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	НастройкиОбменаДанными.Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменаДанными КАК НастройкиОбменаДанными
	|ГДЕ
	|	НастройкиОбменаДанными.УзелИнформационнойБазы.Центр
	|	И НЕ НастройкиОбменаДанными.ПометкаУдаления");
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат;
	Иначе
		НастройкаОбменаДанными = Рез.Выгрузить()[0][0];
	КонецЕсли;
	МассивОбменов = Новый Массив();
	МассивОбменов.Добавить(НастройкаОбменаДанными);
	глОбработкаАвтоОбменДанными = ПроцедурыОбменаДанными.ВыполнитьИнициализациюАвтообменаПриНачалеРаботы();
	ПроцедурыОбменаДанными.ПроизвестиСписокОбменовДанными(МассивОбменов, Истина, глОбработкаАвтоОбменДанными);
КонецПроцедуры

Функция ОткрытьСмену(Знач СтруктураКоманды)
	
	Перем Док, МенеджерЗаписи, НЗ, ТТ;
	
	РезультатОткрытия = Новый Структура("Результат");
	ТТ = Справочники.МестаРеализации.НайтиПоНаименованию(СтруктураКоманды.ТТ);
	НЗ = РегистрыСведений.ТекущиеСмены.СоздатьНаборЗаписей();
	НЗ.Отбор.МестоРеализации.Установить(ТТ);
	НЗ.Прочитать();
	
	Дата = ДатаИзСтроки(СтруктураКоманды.Дата); // строка 01.01.2016
	
	Если НЗ.Количество() Тогда
		ТекСмена = НЗ[0].Смена;
		Если Не ТекСмена.Пустая() Тогда
			Если ТекСмена.Дата < НачалоДня(Дата) Тогда
				РезультатОткрытия.Вставить("Результат", 0);
				РезультатОткрытия.Вставить("ОписаниеОшибки", "Смена за " + Формат(ТекСмена.Дата, "ДФ=дд.ММ.гггг") + " не закрыта");
				Возврат РезультатОткрытия;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекСмена = Документы.ОткрытиеСмены.ПустаяСсылка();
	КонецЕсли;
	
	Если ТекСмена.Пустая() Тогда
		
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ЗакрытиеСмены.Ссылка КАК Закрытие,
		|	ЗакрытиеСмены.Смена КАК Открытие
		|ИЗ
		|	Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
		|ГДЕ
		|	ЗакрытиеСмены.МестоРеализации = &МестоРеализации
		|	И НАЧАЛОПЕРИОДА(ЗакрытиеСмены.Смена.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)");	
		
		Запрос.УстановитьПараметр("МестоРеализации", ТТ);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		Рез = Запрос.Выполнить();
		Если НЕ Рез.Пустой() Тогда
			РезультатОткрытия.Вставить("Результат", 0);
			РезультатОткрытия.Вставить("ОписаниеОшибки", "Смена закрыта");
			Возврат РезультатОткрытия;
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ОткрытиеСмены.Ссылка КАК Открытие
		|ИЗ
		|	Документ.ОткрытиеСмены КАК ОткрытиеСмены
		|ГДЕ
		|	ОткрытиеСмены.МестоРеализации = &МестоРеализации
		|	И НЕ ОткрытиеСмены.ПометкаУдаления
		|	И НАЧАЛОПЕРИОДА(ОткрытиеСмены.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)");	
		
		Запрос.УстановитьПараметр("МестоРеализации", ТТ);
		Запрос.УстановитьПараметр("Дата", Дата);
		
		Рез = Запрос.Выполнить();
		Если НЕ Рез.Пустой() Тогда
			
			МенеджерЗаписи = РегистрыСведений.ТекущиеСмены.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.МестоРеализации = ТТ;
			МенеджерЗаписи.Смена = Рез.Выгрузить()[0][0];
			МенеджерЗаписи.Записать();
			РезультатОткрытия.Вставить("Результат", 1);
			Возврат РезультатОткрытия;
		КонецЕсли;
		
		Док = Документы.ОткрытиеСмены.СоздатьДокумент();
		Док.Дата = Дата + (ТекущаяДатаНаСервере() - НачалоДня(ТекущаяДатаНаСервере()));
		Док.МестоРеализации = ТТ;
		Док.Записать(РежимЗаписиДокумента.Запись);
		
		МенеджерЗаписи = РегистрыСведений.ТекущиеСмены.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.МестоРеализации = ТТ;
		МенеджерЗаписи.Смена = Док.Ссылка;
		МенеджерЗаписи.Записать();
		РезультатОткрытия.Вставить("Результат", 1);
		Возврат РезультатОткрытия;	
	Иначе
		РезультатОткрытия.Вставить("Результат", 1);
		Возврат РезультатОткрытия;	
	КонецЕсли;
	
КонецФункции

Функция ВыполнитьКомандуИзСупТТ(стрКоманда) Экспорт
	ЗарегистрироватьСобытие("Вызов команды из СУП ТТ.Команда",УровеньЖурналаРегистрации.Информация, , , стрКоманда);
	Возврат ОбработатьПараметрыЗапуска(стрКоманда);
КонецФункции
 
Функция НомерТекущейСменыККМ(Дата, НомерККМ)
	Смена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассыПоНомеруКассы(Дата, НомерККМ);
	Если Смена.Пустая() Тогда
		НомерТекущейСменыККМ = 0;
	Иначе
		НомерТекущейСменыККМ = Смена.НомерСмены;
	КонецЕсли;
	
	Результат = Новый Структура("Результат, НомерТекущейСменыККМ", 1, НомерТекущейСменыККМ);
	Возврат ЛояльностьКлиент.СформироватьJSON(Результат);
КонецФункции

Функция ВыручкаПоККМ(Дата, НомерККМ) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Касса_ЗакрытиеСмены.Ссылка
	|ИЗ
	|	Документ.Касса_ЗакрытиеСмены КАК Касса_ЗакрытиеСмены
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Касса_ЗакрытиеСмены.СменаКассы.СменаТТ.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И Касса_ЗакрытиеСмены.СменаКассы.КассаНомер = &НомерККМ");
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("НомерККМ", НомерККМ);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	ВыручкаПоККМ = Новый Структура;
	Для Каждого Т Из ТЗ Цикл
		ПараметрыСмены = Т.Ссылка.ПараметрыСмены.Получить();
		//: ПараметрыСмены = Новый СТруктура;
		Если ПараметрыСмены = Неопределено Тогда
			Продолжить
		КонецЕсли;
		
		Для Каждого Т Из ПараметрыСмены Цикл
			Если Найти(Т.Ключ, "Номер") Тогда
				Продолжить
			КонецЕсли;
			
			Если ВыручкаПоККМ.Свойство(Т.Ключ) Тогда
				Если ТипЗнч(т.Значение) = тип("Число") Тогда
					ВыручкаПоККМ[т.Ключ] = ВыручкаПоККМ[т.Ключ] + Т.Значение;
				КонецЕсли
			Иначе
				Если ТипЗнч(т.Значение) = тип("Число") Тогда
					ВыручкаПоККМ.Вставить(Т.Ключ, Т.Значение);
				КонецЕсли
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	Для Каждого Т Из ВыручкаПоККМ Цикл
		Если ТипЗнч(т.Значение) = Тип("Число") Тогда
			ВыручкаПоККМ.Вставить(Т.Ключ, Формат(Т.Значение, "ЧРД=.; ЧГ=0"));
		КонецЕсли;
	КонецЦикла;
	Результат = ЛояльностьКлиент.СформироватьJSON(Новый Структура("Результат,  ВыручкаПоККМ", 1, ВыручкаПоККМ));
	Возврат Результат;
КонецФункции

Функция ЗакрытьСменуТТ(Дата, имяМестаРеализации, ВернутьОбъект = Ложь) Экспорт
	МестоРеализации = Справочники.МестаРеализации.НайтиПоНаименованию(имяМестаРеализации);
	МассивОшибок = Новый Массив;
	ОписаниеОшибки = "";
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОткрытиеСмены.Ссылка КАК Открытие,
	|	ЗакрытиеСмены.Ссылка КАК Закрытие
	|ИЗ
	|	Документ.ОткрытиеСмены КАК ОткрытиеСмены
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|		ПО (ЗакрытиеСмены.Смена = ОткрытиеСмены.Ссылка)
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ОткрытиеСмены.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И ОткрытиеСмены.МестоРеализации = &МестоРеализации
	|	И НЕ ОткрытиеСмены.ПометкаУдаления");

	Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить().Выгрузить();
	ТекСмена = ТекСмена;
	Если Результат.Количество() Тогда
		ТекСмена = Результат[0].Открытие;
		СменаЗакрыта = Результат[0].Закрытие <> Null;
		
		Если СменаЗакрыта Тогда
			Результат = 1;
		Иначе
			Обр = Обработки.ОткрытиеЗакрытиеСмены.Создать();
			Обр.ДокОткрытияСмены = ТекСмена.ПолучитьОбъект();
			Результат = ?(Обр.ЗакрытьСмену(МассивОшибок),1,0);

		КонецЕсли;
	Иначе
		МассивОшибок.Добавить("Смена не открыта");	
		Результат = 0;
	КонецЕсли;
	//{
	
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//                      |	ОтчетФОТовары.КассоваяСмена.Номер КАК НомерСмены,
	//                      |	ПРЕДСТАВЛЕНИЕ(ОтчетФОТовары.ВариантОплаты) КАК ТипОплаты,
	//                      |	ВЫБОР
	//                      |		КОГДА ОтчетФОТовары.Ссылка.ТипРасхода = ЗНАЧЕНИЕ(перечисление.типырасхода.возврат)
	//                      |			ТОГДА -ОтчетФОТовары.Сумма
	//                      |		ИНАЧЕ ОтчетФОТовары.Сумма
	//                      |	КОНЕЦ КАК Сумма,
	//                      |	ОтчетФОТовары.Номенклатура,
	//                      |	ВЫБОР
	//                      |		КОГДА ОтчетФОТовары.Ссылка.ТипРасхода = ЗНАЧЕНИЕ(Перечисление.ТипыРасхода.Возврат)
	//                      |			ТОГДА -ОтчетФОТовары.Количество
	//                      |		ИНАЧЕ ОтчетФОТовары.Количество
	//                      |	КОНЕЦ КАК Количество,
	//                      |	ВЫБОР
	//                      |		КОГДА ОтчетФОТовары.Ссылка.ТипРасхода = ЗНАЧЕНИЕ(Перечисление.ТипыРасхода.Возврат)
	//                      |			ТОГДА -ОтчетФОТовары.Сумма
	//                      |		ИНАЧЕ ОтчетФОТовары.СуммаБезСкидки
	//                      |	КОНЕЦ КАК СуммаРозн,
	//                      |	ОтчетФОТовары.ККМ.КодСУП,
	//                      |	ОтчетФОТовары.СтавкаНДС,
	//					  |	ВЫБОР
	//					  |		КОГДА ОтчетФОТовары.Ссылка.ТипРасхода = ЗНАЧЕНИЕ(Перечисление.ТипыРасхода.Возврат)
	//					  |			ТОГДА -ОтчетФОТовары.СуммаНДС
	//					  |		ИНАЧЕ ОтчетФОТовары.СуммаНДС
	//					  |	КОНЕЦ КАК СуммаНДС
	//					  |ПОМЕСТИТЬ ОтчетФО
	//					  |ИЗ
	//					  |	Документ.ОтчетФО.Товары КАК ОтчетФОТовары
	//					  |ГДЕ
	//					  |	НАЧАЛОПЕРИОДА(ОтчетФОТовары.Ссылка.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	//					  |	И НЕ ОтчетФОТовары.Ссылка.ПометкаУдаления
	//					  |	И ОтчетФОТовары.Ссылка.Склад = &МестоРеализации
	//					  |;
	//                      |
	//                      |////////////////////////////////////////////////////////////////////////////////
	//                      |ВЫБРАТЬ
	//                      |	ОтчетФО.Номенклатура.КодСУП КАК КодСУП,
	//                      |	ПРЕЛОтчетФО.ТипОплаты,
	//                      |	СУММА(ОтчетФО.Количество) КАК Количество,
	//                      |	СУММА(ОтчетФО.Сумма) КАК СуммаФакт,
	//                      |	СУММА(ОтчетФО.СуммаРозн) КАК СуммаРозн,
	//                      |	ОтчетФО.ККМКодСУП КАК НомерККМ,
	//                      |	ПРЕДСТАВЛЕНИЕ(ОтчетФО.СтавкаНДС) КАК СтавкаНДС,
	//                      |	СУММА(ОтчетФО.СуммаНДС) КАК СуммаНДС
	//                      |ИЗ
	//                      |	ОтчетФО КАК ОтчетФО
	//                      |
	//                      |СГРУППИРОВАТЬ ПО
	//                      |	ОтчетФО.ТипОплаты,
	//                      |	ОтчетФО.Номенклатура.КодСУП,
	//                      |	ОтчетФО.ККМКодСУП,
	//                      |	ПРЕДСТАВЛЕНИЕ(ОтчетФО.СтавкаНДС)");
	//Запрос.УстановитьПараметр("Дата", Дата);
	//Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
	//}
	
	ТаблицаРеализации = Обработки.ФормированиеОтчетовФО.ТаблицаОперативнойРеализации(ТекСмена);
	
	Для Каждого Т Из МассивОшибок Цикл
		ОписаниеОшибки=?(ОписаниеОшибки="","",Символы.ПС)+ОписаниеОшибки+Т;
	КонецЦикла;
	СтруктураДляJSON = Новый Структура("Результат, ОписаниеОшибки, ТаблицаРеализации", Результат, ОписаниеОшибки, ТаблицаРеализации);
	
	Если ВернутьОбъект Тогда
		Возврат СтруктураДляJSON;
	Иначе
		Возврат ЛояльностьКлиент.СформироватьJSON(СтруктураДляJSON);
	КонецЕсли;
КонецФункции          	

Функция ЗапросОперативнойРеализации(Дата, имяМестаРеализации, ВернутьОбъект = Ложь) Экспорт
	МестоРеализации = Справочники.МестаРеализации.НайтиПоНаименованию(имяМестаРеализации);
	МассивОшибок = Новый Массив;
	ОписаниеОшибки = "";
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОткрытиеСмены.Ссылка КАК Открытие
	|ИЗ
	|	Документ.ОткрытиеСмены КАК ОткрытиеСмены
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ОткрытиеСмены.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	И ОткрытиеСмены.МестоРеализации = &МестоРеализации
	|	И НЕ ОткрытиеСмены.ПометкаУдаления");

	Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() Тогда
		Смена = Результат[0].Открытие;
		Результат = 1;
	Иначе
		МассивОшибок.Добавить("Смена не открыта");	
		Результат = 0;
	КонецЕсли;
	
	ТаблицаРеализации = Обработки.ФормированиеОтчетовФО.ТаблицаОперативнойРеализации(Смена,ВернутьОбъект);
	Если ВернутьОбъект Тогда
		//:ТаблицаРеализации=Новый ТаблицаЗначений
		ТаблицаРеализации.Свернуть("СтавкаНДС, КодСУП, ТипОплаты, НомерККМ, Фирма, ШК", "Количество, СуммаРозн, СуммаФакт, СуммаНДС");
		ТаблицаРеализации.Колонки.Добавить("ФирмаКодТТ",ПолучитьОписаниеТиповСтроки(7));
		Для Каждого Т Из ТаблицаРеализации Цикл
			Т.ФирмаКодТТ =  Формат(Т.Фирма.КодТТ, "ЧРД=.; ЧГ=0");
		КонецЦикла;
		
	Иначе
		ТаблицаРеализации.Свернуть("СтавкаНДС, КодСУП, ТипОплаты, НомерККМ, ФирмаКодТТ", "Количество, СуммаРозн, СуммаФакт, СуммаНДС");
		Для Каждого Т Из ТаблицаРеализации Цикл
			Т.Количество= Формат(Т.Количество	, "ЧРД=.; ЧГ=0");
			Т.СуммаРозн = Формат(Т.СуммаРозн	, "ЧРД=.; ЧГ=0");
			Т.СуммаФакт = ?(Т.СуммаФакт=null, "0", Формат(Т.СуммаФакт	, "ЧРД=.; ЧГ=0"));
			Т.СуммаНДС 	= ?(Т.СуммаНДС=	null, "0", Формат(Т.СуммаНДС	, "ЧРД=.; ЧГ=0"));
		КонецЦикла;
	КонецЕсли;

	Для Каждого Т Из МассивОшибок Цикл
		ОписаниеОшибки=?(ОписаниеОшибки="","",Символы.ПС)+ОписаниеОшибки+Т;
	КонецЦикла;
	
	СтруктураДляJSON = Новый Структура("Результат, ОписаниеОшибки, ТаблицаОперативнойРеализации", Результат, ОписаниеОшибки, ТаблицаРеализации);
	Если ВернутьОбъект Тогда
		Возврат СтруктураДляJSON;
	Иначе
		Возврат ЛояльностьКлиент.СформироватьJSON(СтруктураДляJSON);	
	КонецЕсли;
	
КонецФункции          	

Функция Тест() Экспорт
	Попытка
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ОсновноеМестоРеализации.Значение
		|ИЗ
		|	Константа.ОсновноеМестоРеализации КАК ОсновноеМестоРеализации");
		Запрос.Выполнить();
		Возврат 1;
	Исключение
		Возврат 0;        
	КонецПопытки;
КонецФункции

Процедура ПриИзмененииПараметровЭкрана()
КонецПроцедуры

Функция ПрименитьКарту(НомерКарты) Экспорт
	глСтекОкон[0].ФОрма._ПрименитьКарту(НомерКарты);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

глВерсия = 3;
глОбработки				= Новый Структура;
глСоединения			= Новый Соответствие;
глТорговоеОборудование	= Новый Структура;
глВнешнееСобытиеОбработано = Ложь;
глРубли = Константы.ОсновнаяВалюта.Получить();
глКоличествоХранимыхЦифрТелефона = 10;
глЦветаАкционныхТоваров = Новый Соответствие;
Документы.Акция.ОбновитьЦветаАкций(глЦветаАкционныхТоваров);
//:РаботаСокнами = Обработки.РаботаСокнами.Создать();
глСимволРубля = Символ(8381);
глОтладочнаяИнформация = "";
ирПлатформа = Обработки.ирПлатформа.Создать();
глОтладкаУровень = 1;
//АК
глРежимКиоск = Ложь;
глПоследниеСотрудники = Новый Массив;