
Перем ПараметрыТО Экспорт;   // Параметры торгового оборудования.
Перем Результат Экспорт;     // Результат выполнения действия.
Перем DRV Экспорт;           // Драйвер
Перем УровеньЛогирования Экспорт; // уровень логирования действий драйвера 0 - самый низкий ....

Перем Пароль, ИгнорироватьОбщийПароль;
Перем КодыМоделей;
Перем ТаблицаПараметрыСтроки;
Перем МаксДлинаСтроки;
Перем СписокОшибок;
Перем СтрокиКлише;
Перем sc;

#Если Клиент Тогда
// Производит инициализацию торгового оборудования.
//
Процедура Инициализация() Экспорт
	sc = Новый COMОбъект("MSScriptControl.ScriptControl");
	sc.language="VBscript";
	Если НЕ ЗагрузитьДрайвер() Тогда
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Ошибка загрузки драйвера!";
		Результат.Подробно	= "Программе не удалось загрузить драйвер ККМ...";
		Возврат;
	КонецЕсли; 
	
	
	КодыМоделей = Новый Структура;
	КодыМоделей.Вставить("АТОЛ326",0);
	КодыМоделей.Вставить("ПР410",1);
	
	//ПрочитатьПараметр("AccessPassword","0");
	ПрочитатьПараметр("BaudRate",10);
	ПрочитатьПараметр("Model",КодыМоделей[то.КодМодели]);
	//ПрочитатьПараметр("Password","30");
	ПрочитатьПараметр("PortNumber",PortNumber);
	//ПрочитатьПараметр("PrintBarCodeText",Ложь);
	//ПрочитатьПараметр("PrintTax",Истина);
	//ПрочитатьПараметр("Scale",200);
	//ПрочитатьПараметр("ScaleQR",300);
	ПрочитатьПараметр("ИдУстройства", "");
	ПрочитатьПараметр("ТаймаутОпроса",5);
	ПараметрыТО.Model = КодыМоделей[то.КодМодели];
    Логирование(0,"Чтение параметров и формирование клише","Начало - " + ТекущаяДата());
	ЗаполнитьПараметрыСтроки();
    Логирование(0,"Чтение параметров и формирование клише","конец - " + ТекущаяДата());
	
	
	ТО.Параметры = ЗначениеВСтрокуВнутр(ПараметрыТО);
	ТО.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыСтроки()
	
	ТаблицаПараметрыСтроки = Новый ТаблицаЗначений;
	ТаблицаПараметрыСтроки.Колонки.Добавить("ИдМодели");
	ТаблицаПараметрыСтроки.Колонки.Добавить("ИмяКоманды");
	ТаблицаПараметрыСтроки.Колонки.Добавить("Команда");
	
	Таб = ПолучитьМакет("ПараметрыСтроки");
	
	Для НомСтр=1 По Таб.ВысотаТаблицы Цикл
		
		ИдПарам = (Таб.Область(НомСтр,1).Текст);
		Если НЕ ЗначениеЗаполнено(ИдПарам) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСтроки = ТаблицаПараметрыСтроки.Добавить();
		ПараметрыСтроки.ИдМодели = Число(ИдПарам);
		ПараметрыСтроки.ИмяКоманды = Таб.Область(НомСтр,2).Текст;
		ПараметрыСтроки.Команда = Таб.Область(НомСтр,3).Текст;
		
	КонецЦикла;
	
	СтрокиКлише.Очистить();
	КолСтрок = ПРТ_ПолучитьКомандуТекст(ПараметрыТО.model,"СтрокКлише");
	Попытка
		КолСтрок = Число(КолСтрок);
	Исключение
		КолСтрок = 5;
	КонецПопытки;
	
	Если глПараметрыРМ <> Неопределено Тогда
		Если КолСтрок = 5 Тогда
			СтрокиКлише.Вставить(1," ");
			СтрокиКлише.Вставить(2," ");
			к = 3;
		Иначе
			к = 1;
		КонецЕсли;
		СтрНаим = "" + глПараметрыРМ.Фирма.НаименованиеЮридическогоЛица;
		СтрИНН = "ИНН " + глПараметрыРМ.Фирма.ИНН;
		Пока СтрДлина(СтрНаим) < 48 - СтрДлина(СтрИНН) Цикл
			СтрНаим = СтрНаим + " ";
		КонецЦикла;
		СтрокиКлише.Вставить(к,СтрНаим + СтрИНН);
		к = к + 1;
		СтрНаимМаг = глПараметрыРМ.Фирма.Наименование;
		Кол = Цел(24-СтрДлина(СтрНаимМаг)/2);
		Для к = 1 по кол Цикл
			СтрНаимМаг = " " + СтрНаимМаг;
		КонецЦикла;
		Пока СтрДлина(СтрНаимМаг) < 48 Цикл
			СтрНаимМаг = СтрНаимМаг + " ";
		КонецЦикла;
		СтрокиКлише.Вставить(к,СтрНаимМаг);
		к = к + 1;
		Пока к <= КолСтрок Цикл
			СтрокиКлише.Вставить(к," ");
			к = к + 1;
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

// Загружает драйвер ТО.
//
// Возвращаемое значение:
//  Истина - драйвер загружен, ложь - нет.
//
Функция ЗагрузитьДрайвер()
	
	Логирование(1,"Инициализация драйвера","Начало");
	Если глТорговоеОборудование.Свойство("RcpPrn8",DRV) Тогда
		Возврат Истина;
	КонецЕсли;
	Попытка
		//ПодключитьВнешнююКомпоненту("AddIn.RcpPrn8");
		//ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "\FPrnM1C.dll");
	    //DRV = Новый ("AddIn.RcpPrn8");
		DRV = Новый COMОбъект("MSCOMMLib.MSComm.1");
		Если DRV.PortOpen =  1 Тогда 
			DRV.PortOpen = 0;
		КонецЕсли;
	Исключение
		Инфо = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(Инфо);
		Логирование(0,"Инициализация драйвера","Ошибка - " + Инфо);
	КонецПопытки;
	
	//DRV.LockDevices = 1;
	
	Если DRV <> Неопределено Тогда
		глТорговоеОборудование.Вставить("RcpPrn8", DRV);
		DRV = глТорговоеОборудование["RcpPrn8"];
	КонецЕсли;
	
	Возврат Истина;
КонецФункции
 
// Выполняет чтение параметра ТО.
//
// Параметры:
//  ИмяПараметра        - имя параметра,
//  ЗначениеПоУмолчанию - значение по умолчанию для данного параметра.
//
// Возвращаемое значение:
//  Значение параметра или значение по умолчанию
//
Процедура ПрочитатьПараметр(ИмяПараметра,ЗначениеПоУмолчанию)
	
	Если НЕ ПараметрыТО.Свойство(ИмяПараметра) Тогда
		ПараметрыТО.Вставить(ИмяПараметра,ЗначениеПоУмолчанию);
	КонецЕсли; 
	
	Попытка
		Если ИмяПараметра = "PortNumber" ТОгда
			ЭтотОбъект[ИмяПараметра] = ?(ПараметрыТО[ИмяПараметра]> 1000,ПараметрыТО[ИмяПараметра] - 1000,ПараметрыТО[ИмяПараметра]);
		Иначе 
			ЭтотОбъект[ИмяПараметра] = ПараметрыТО[ИмяПараметра];
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Установка параметров подключения
//
Функция Подключить(БезПроверок=Ложь) Экспорт
	
	Логирование(1,"Подключение PRN","Начало");
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Логирование(0,"Подключение PRN","Ошибка - Не задан объект справочника ТО");
			Возврат Ложь;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Логирование(0,"Подключение PRN","Ошибка - Ошибка загрузки Драйвера");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	Если не ПараметрыТО.Свойство("ИдУстройства") Тогда
		ПараметрыТО.вставить("ИдУстройства","");
	КонецЕсли;
	
	Ответ = ПРТ_ДобавитьУстройство();//DRV.ДобавитьУстройство();
	Если Ответ Тогда
		ПараметрыТО.ИДУстройства = 1;//DRV.НомерТекущегоУстройства;
		Порт1 = ?(ПараметрыТО.PortNumber > 1000, ПараметрыТО.PortNumber - 1000, ПараметрыТО.PortNumber);
		Ответ = ПРТ_Подключить(ПараметрыТО.Model,Порт1,ПараметрыТО.BaudRate);
		//DRV.Модель                         = ПараметрыТО.Model;
		//DRV.НомерПорта                     = ПараметрыТО.PortNumber;
		//DRV.СкоростьОбмена                 = ПараметрыТО.BaudRate;
		//DRV.ОбновлятьНастройкиПринтера	   = 1;
		//DRV.ФоноваяПечать				   = 0;
		//DRV.УстройствоВключено = 1;
		//DRV.УстановитьПароль();

		Если Ответ <> 0 Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = ПРТ_ОписаниеОшибки(ответ);
			Логирование(0,"Подключение PRN","Ошибка - " + Результат.Описание);
			//DRV.УдалитьУстройство();
			ПараметрыТО.ИДУстройства = Неопределено;
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Результат.Ошибка = Истина;
		Результат.Описание = "Ошибка добавления устройства";
		Логирование(0,"Подключение PRN","Ошибка - " + Результат.Описание);
		Возврат Ложь;
	КонецЕсли;
	
	Если не ТО.Ссылка.Пустая() Тогда
		Попытка
			ТО.Параметры = ЗначениеВСтрокуВнутр(ПараметрыТО);
			то.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;

	Возврат Истина;
КонецФункции

// Отключение драйвера
//
Процедура Отключить() Экспорт
	
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Возврат;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	//DRV.УстройствоВключено = 0;
	//DRV.УдалитьУстройство();
	
КонецПроцедуры

#Область ТочкаВхода
// Точка входа
Функция ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Логирование(1,"Выполнить команду","начало - " + Команда);
	ВыходныеПараметры = новый Структура;
	
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Логирование(0,"Выполнить команду","ошибка - Не задан объект справочника ТО");
			Отключить();
			Возврат Ложь;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Логирование(0,"Выполнить команду","ошибка - Ошибка загрузки Драйвера");
			Отключить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Подключить();
	
	Если Команда = "ОткрытьСмену" тогда
		ответКоманды = ОткрытьСмену(ВыходныеПараметры);
	ИначеЕсли Команда = "ЗакрытьСмену" Тогда
		ответКоманды =  ЗакрытьСмену(ВыходныеПараметры);
	ИначеЕсли Команда = "НапечататьОтчетБезГашения" Тогда
		ОтветКоманды = НапечататьОтчетБезГашения(ВыходныеПараметры);
	//ИначеЕсли Команда = "НапечататьОтчетСГашением" Тогда
	//	//Возврат НапечататьОтчетСГашением(ВыходныеПараметры);
	ИначеЕсли Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
		//ответКоманды =  ОтчетОТекущемСостоянииРасчетов(ВыходныеПараметры);
	ИначеЕсли Команда = "ФискализацияЧека" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  ФисказизацияЧека(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	ИначеЕсли Команда = "АннулироватьЧек" Тогда
		ответКоманды =  АннулироватьЧек(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "ПечатьТекста" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  ПечатьТекста(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	ИначеЕсли Команда = "ОткрытьЧек" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  ОткрытьЧек(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	ИначеЕсли Команда = "ОтменитьЧек" Тогда
		ответКоманды =  ОтменитьЧек(ВыходныеПараметры);
	ИначеЕсли Команда = "Внесение" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  Внесение(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	ИначеЕсли Команда = "Выемка" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  Выемка(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	//ИначеЕсли Команда = "ПечатьШтрихКода" Тогда
		//Возврат ПечатьШтрихКода(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "ОткрытьДенежныйЯщик" Тогда
		ответКоманды =  ОткрытьДенежныйЯщик(ВыходныеПараметры);
	ИначеЕсли Команда = "ПолучитьТекущееСостояние" Тогда
		ответКоманды = ПолучитьТекущееСостояние(ВыходныеПараметры);
	ИначеЕсли Команда = "КопияПоследнегоЧека" Тогда
		ответКоманды = КопияПоследнегоЧека(ВыходныеПараметры);
	ИначеЕсли Команда = "Выручка" Тогда
		ответКоманды = Выручка(ВыходныеПараметры);
	Иначе
		ВыходныеПараметры.Очистить();
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") тогда
			Ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки",ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				Ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки",ош);
			КонецЕсли;
		КонецЕсли;
		
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Неизвестная команда");
		Логирование(1,"Выполнить команду","Неизвестная команда:" + Команда);
		Отключить();
		Возврат Ложь;
	КонецЕсли;
	
	Отключить();
	
	Возврат ответКоманды;
	
КонецФункции

#КонецОбласти


#Область ДопПроцедуры
Функция ПолучитьСменуКассы()
	Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	//               |	ВложенныйЗапрос.Ссылка,
	//               |	ВложенныйЗапрос.МоментВремени КАК МоментВремени
	//               |ИЗ
	//               |	(ВЫБРАТЬ
	//               |		Касса_ОткрытиеСмены.Ссылка КАК Ссылка,
	//               |		Касса_ОткрытиеСмены.МоментВремени КАК МоментВремени
	//               |	ИЗ
	//               |		Документ.Касса_ОткрытиеСмены КАК Касса_ОткрытиеСмены
	//               |	ГДЕ
	//               |		НЕ Касса_ОткрытиеСмены.ПометкаУдаления
	//               |		И Касса_ОткрытиеСмены.РабочееМесто = &РабочееМесто
	//               |	
	//               |	ОБЪЕДИНИТЬ ВСЕ
	//               |	
	//               |	ВЫБРАТЬ
	//               |		Касса_ЗакрытиеСмены.Ссылка,
	//               |		Касса_ЗакрытиеСмены.МоментВремени
	//               |	ИЗ
	//               |		Документ.Касса_ЗакрытиеСмены КАК Касса_ЗакрытиеСмены
	//               |	ГДЕ
	//               |		НЕ Касса_ЗакрытиеСмены.ПометкаУдаления
	//               |		И Касса_ЗакрытиеСмены.РабочееМесто = &РабочееМесто) КАК ВложенныйЗапрос
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	МоментВремени УБЫВ";
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СУММА(влож.открытий), 0) > ЕСТЬNULL(СУММА(влож.Закрытий), 0)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Рез,
	               |	ВЫБОР
	               |		КОГДА ЕСТЬNULL(СУММА(влож.открытий), 0) > ЕСТЬNULL(СУММА(влож.Закрытий), 0)
	               |			ТОГДА Касса_ОткрытиеСмены.Ссылка
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Документ.Касса_ОткрытиеСмены.Пустаяссылка)
	               |	КОНЕЦ КАК Ссылка
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		КОЛИЧЕСТВО(Касса_ОткрытиеСмены.Ссылка) КАК открытий,
	               |		NULL КАК Закрытий
	               |	ИЗ
	               |		Документ.Касса_ОткрытиеСмены КАК Касса_ОткрытиеСмены
	               |	ГДЕ
	               |		НЕ Касса_ОткрытиеСмены.ПометкаУдаления
	               |		И Касса_ОткрытиеСмены.РабочееМесто = &РабочееМесто
	               |		И Касса_ОткрытиеСмены.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		NULL,
	               |		КОЛИЧЕСТВО(Касса_ЗакрытиеСмены.Ссылка)
	               |	ИЗ
	               |		Документ.Касса_ЗакрытиеСмены КАК Касса_ЗакрытиеСмены
	               |	ГДЕ
	               |		НЕ Касса_ЗакрытиеСмены.ПометкаУдаления
	               |		И Касса_ЗакрытиеСмены.РабочееМесто = &РабочееМесто
	               |		И Касса_ЗакрытиеСмены.СменаКассы.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)) КАК влож,
	               |	Документ.Касса_ОткрытиеСмены КАК Касса_ОткрытиеСмены
	               |ГДЕ
	               |	НЕ Касса_ОткрытиеСмены.ПометкаУдаления
	               |	И Касса_ОткрытиеСмены.РабочееМесто = &РабочееМесто
	               |	И Касса_ОткрытиеСмены.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Касса_ОткрытиеСмены.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Касса_ОткрытиеСмены.МоментВремени УБЫВ";
				   
	Запрос.УстановитьПараметр("РабочееМесто", глРабочееМесто);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//Если Выборка.Следующий() И ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.Касса_ОткрытиеСмены") Тогда
	Если Выборка.Следующий() и не Выборка.Ссылка.Пустая() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Документы.ОткрытиеСмены.ПустаяСсылка();
	
КонецФункции

Процедура Логирование(Уровень,Место,Текст)
	Если УровеньЛогирования <= Уровень Тогда
		Если ТипЗнч(Текст) <> Тип("Строка") Тогда
			Текст = ПреобразоватьВJSON(Текст);
			//Текст = json(Текст);
			//сообщить(Текст);
		КонецЕсли;
		
		ПутьДляЛогирования = Константы.ПутьДляЛогирования.Получить();
		Файл = Новый Файл(ПутьДляЛогирования);
		Если Файл.Существует() ТОгда
			Каталог = Формат(ТекущаяДата(),"ДФ=yyyyMMdd");
			НовыйПуть = ПутьДляЛогирования + "\" + Каталог;
			Файл = Новый Файл(НовыйПуть);
			Если не Файл.Существует() Тогда
				СоздатьКаталог(НовыйПуть);
			КонецЕсли;
			ИмяФайла = НовыйПуть + "\F" + Каталог + ".log";
			ТекстовыйДокумент = новый ЗаписьТекста(ИмяФайла,,,Истина);
			//ФАйл = Новый Файл(ИмяФайла);
			//Если Файл.Существует() Тогда
			//	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
			//	//ТекстовыйДокумент.Прочитать(ИмяФайла);
			//Иначе
			//	ТекстовыйДокумент = Новый ТекстовыйДокумент;
			//КонецЕсли;
			СтрокаЗаписи = "" + ТекущаяДата() + ";" + Место + ";" + Текст;
			ТекстовыйДокумент.ЗаписатьСтроку(СтрокаЗаписи);
			ТекстовыйДокумент.Закрыть();
			//ТекстовыйДокумент.ДобавитьСтроку(СтрокаЗаписи);
			//ТекстовыйДокумент.Записать(ИмяФайла);
		Иначе
			 ЗаписьЖурналаРегистрации("Ошибка логирования",УровеньЖурналаРегистрации.Ошибка,,,"Путь логирования не существует");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьВJSON(ВхПараметры)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON,ВхПараметры);
	//СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,ВхПараметры,НазначениеТипаXML.Явное);
	ВыхСтрока = ЗаписьJSON.Закрыть();
	Возврат ВыхСтрока;
	
КонецФункции

Процедура ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека)
	СменаККМ = ПолучитьСменуКассы();
	Если СменаККМ.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Касса_ОткрытиеСмены.НомерСмены КАК НомерСмены,
		               |	Касса_ОткрытиеСмены.Дата КАК Дата
		               |ИЗ
		               |	Документ.Касса_ОткрытиеСмены КАК Касса_ОткрытиеСмены
		               |ГДЕ
		               |	Касса_ОткрытиеСмены.РабочееМесто = &РабочееМесто
		               |	И НЕ Касса_ОткрытиеСмены.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Дата УБЫВ";
		Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Дата <> ТекущаяДата() Тогда
				НомерСмены = УбратьНеЦифры(Выборка.НомерСмены) + 1;
			Иначе
				НомерСмены = УбратьНеЦифры(Выборка.НомерСмены) + 1;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НомерСмены = УбратьНеЦифры(СменаККМ.Номерсмены);
	КонецЕсли;
	
	НомерЧекаРег = 0;
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НомерЧекаНФР.НомерЧека КАК НомерЧека
	               |ИЗ
	               |	РегистрСведений.НомерЧекаНФР КАК НомерЧекаНФР
	               |ГДЕ
	               |	НомерЧекаНФР.Дата = &Дата
	               |	И НомерЧекаНФР.РабочееМесто = &РабочееМесто
	               |	И НомерЧекаНФР.НомерСменыККМ = &НомерСменыККМ";
	Запрос.УстановитьПараметр("Дата",НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
	Запрос.УстановитьПараметр("НомерСменыККМ",НомерСмены);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерЧекаРег = Выборка.номерЧека;
	КонецЦикла;
	
	НомерЧека = НомерЧекаРег + 1;
	
	НомерЧекаЗаказ = 0;
	// поищем номер чека в уже закрытых заказах
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(МАКСИМУМ(влож.НомерЧека), 0) КАК НомерЧека
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ЕСТЬNULL(ЗаказДопИнф.Заказ.НомерЧека, 0) КАК НомерЧека
	               |	ИЗ
	               |		РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	               |	ГДЕ
	               |		ЗаказДопИнф.Заказ.РабочееМесто = &РабочееМесто
	               |		И ЗаказДопИнф.Заказ.НомерСмены = &НомерСменыККМ
	               |		И ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗаказа.Закрыт)
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		ЕСТЬNULL(ВозвратДопИнф.Возврат.НомерЧека, 0)
	               |	ИЗ
	               |		РегистрСведений.ВозвратДопИнф КАК ВозвратДопИнф
	               |	ГДЕ
	               |		ВозвратДопИнф.Возврат.НомерСмены = &НомерСменыККМ
	               |		И ВозвратДопИнф.Возврат.РабочееМесто = &РабочееМесто
	               |		И ВозвратДопИнф.Статус = ЗНАЧЕНИЕ(перечисление.СтатусыЗаказа.Закрыт)) КАК влож";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерЧекаЗаказ = Выборка.НомерЧека + 1;
	КонецЦикла;
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	КОЛИЧЕСТВО(ПротоколРасчетов.Номер) КАК Номер
	//               |ИЗ
	//               |	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	//               |ГДЕ
	//               |	ПротоколРасчетов.Заказ.РабочееМесто = &РабочееМесто
	//               |	И НЕ ПротоколРасчетов.ПометкаУдаления
	//               |	И ПротоколРасчетов.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), СЕКУНДА, 1)
	//               |	И ПротоколРасчетов.Проведен
	//               |	И ПротоколРасчетов.КассоваяСмена.НомерСмены = &НомерСменыККМ
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	Номер УБЫВ";
	//Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
	//Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	//Запрос.УстановитьПараметр("НомерСменыККМ",НомерСмены);
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	НомерЧека = УбратьНеЦифры(Выборка.номер);
	//КонецЦикла;
	
	НомерЧека = Макс(НомерЧека,НомерЧекаЗаказ);
	
КонецПроцедуры

Функция ПолучитьНомерДокВнесения()
	Номер = -1;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Касса_Внесение.Номер) КАК Номер
	               |ИЗ
	               |	Документ.Касса_Внесение КАК Касса_Внесение
	               |ГДЕ
	               |	Касса_Внесение.РабочееМесто = &РабочееМесто
	               |	И Касса_Внесение.Проведен";
	Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Номер = Выборка.Номер;
	КонецЦикла;
	Номер = УбратьНеЦифры(Номер);
	Попытка
		Номер = Число(Номер);
	Исключение
		Номер = -1;
	КонецПопытки;
	Возврат Номер + 1;
КонецФункции
Функция ПолучитьНомерДокВыплата()
	Номер = -1;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Касса_Изъятие.Номер) КАК Номер
	               |ИЗ
	               |	Документ.Касса_Изъятие КАК Касса_Изъятие
	               |ГДЕ
	               |	Касса_Изъятие.РабочееМесто = &РабочееМесто
	               |	И Касса_Изъятие.Проведен";
	Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Номер = Выборка.Номер;
	КонецЦикла;
	Номер = УбратьНеЦифры(Номер);
	Попытка
		Номер = Число(Номер);
	Исключение
		Номер = -1;
	КонецПопытки;
	Возврат Номер + 1;
КонецФункции

Функция УбратьНеЦифры(Знач ВхСтрока)
	Если СокрЛП(ВхСтрока) = "" Тогда
		Возврат 0;
	КонецЕсли;
	ВхСтрока = СокрЛП(ВхСтрока);
	ВыхЧисло = 0;
	Для к = 1 по СтрДлина(ВхСтрока) Цикл
		Символ = Сред(ВхСтрока,к,1);
		Если найти("0123456789",Символ) <> 0 Тогда
			ВыхЧисло = ВыхЧисло * 10 + Число(Символ);
		КонецЕсли;
	КонецЦикла;
	Возврат ВыхЧисло;
КонецФункции

#КонецОбласти

#Область ФункцийРаботыСПРТ

Функция ОткрытьСмену(ВыходныеПараметры)
	
	Логирование(1,"Открытие смены","Начало");
	// проверка открытия смены
	СменаТТ = ИнтерфейсРМ.ТекущаяСмена();
	Если СменаТТ.Пустая() Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Смена ТТ не открыта");
		Логирование(0,"Открытие смены","Ошибка - Смена ТТ не открыта");
		Возврат Ложь;
	КонецЕсли;
	
	
	Ответ = ПРТ_Статус(ПараметрыТО.Model);
	
	Если Ответ <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
		Логирование(0,"Открытие смены","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
		Возврат Ложь;
	КонецЕсли;
	Если Ответ = 0 Тогда
		
		НомерСмены = 0;
		НомерЧека = 0; // последний номер документа протокол расчетов
		ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека); 
	
		// здесь нужно напечатать отчет об открытии смены !!!!!!!!!!!!!
		МассивСтрокДляПечати = Новый Массив;
		МассивСтрокДляПечати.Добавить("            ОТЧЕТ ОБ ОТКРЫТИИ СМЕНЫ             ");
		МассивСтрокДляПечати.Добавить(СокрЛП(глПользователь));
		ДатаВремя = Формат(ТекущаяДата(),"ДФ='дд-ММ-гг ЧЧ:мм'");
		МассивСтрокДляПечати.Добавить("Дата Время                        " + ДатаВремя);
		МассивСтрокДляПечати.Добавить("Смена №                                     " + Прав("0000" + НомерСмены,4));
		СтрокаНомера = "ПРТ №";
		ЗавНомер = СокрЛП(глПараметрыРМ.ККМ.ЗаводскойНомер);
		Пока СтрДлина(СтрокаНомера) < 48 - СтрДлина(ЗавНомер) Цикл
			СтрокаНомера = СтрокаНомера + " ";
		КонецЦикла;
		МассивСтрокДляПечати.Добавить(СтрокаНомера + ЗавНомер);
		МассивСтрокДляПечати.Добавить(" ");
		ВХПар = Новый Структура;
		ВХПар.Вставить("Строки",МассивСтрокДляПечати);
		Выхпар = Новый Структура;
		ПечатьТекста(ВХПар,Выхпар);
		
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);
		ВыходныеПараметры.Вставить("НомерЧека",1); // при открытии всегда возвращаем первый чек
		ВыходныеПараметры.Вставить("НомерДокумента",НомерЧека);
		
		// Формирование документа открытия смены
		
		ОткрытиеСмены = Документы.Касса_ОткрытиеСмены.СоздатьДокумент();
		ОткрытиеСмены.Автор = глПользователь;
		ОткрытиеСмены.Дата = ТекущаяДатаСеанса();
		ОткрытиеСмены.Касса = глПараметрыРМ.ККМ;
		ОткрытиеСмены.КассаНомер = глПараметрыРМ.ККМ.КодСуп;
		ОткрытиеСмены.КассаЗаводскойНомер = глПараметрыРМ.ККМ.ЗаводскойНомер;
		ОткрытиеСмены.НомерСмены = НомерСмены;
		ОткрытиеСмены.НомерДокумента = НомерЧека;
		ОткрытиеСмены.РабочееМесто = глРабочееМесто;
		ОткрытиеСмены.СменаТТ = СменаТТ; 
		
		//// запишем данные по смене в регистр
		//Рег = РегистрыСведений.НомерЧекаНФР.СоздатьМенеджерЗаписи();
		//Рег.Дата = ТекущаяДата();
		//Рег.РабочееМесто = глРабочееМесто;
		//Рег.НомерСменыККМ = номерСмены;
		//Рег.Прочитать();
		//Рег.Дата = ТекущаяДата();
		//Рег.РабочееМесто = глРабочееМесто;
		//Рег.НомерСменыККМ = номерСмены;
		//Рег.НомерЧека = 1;
		//Рег.Записать();
		
		Если не ИнтерфейсРМ.ПопыткаДействияСОбъектом(ОткрытиеСмены,"Объект.Записать(РежимЗаписиДокумента.Проведение)") Тогда
			//Ответ = Ложь;
		КонецЕсли;
		Попытка
			УправлениеСерверамиПриложений.СоздатьЛокальнуюФайловуюБазу();	
		Исключение
			ЗаписьЖурналаРегистрации("Резервирование.Ошибка создания локальной базы", УровеньЖурналаРегистрации.Ошибка, , ОткрытиеСмены.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Логирование(1,"Открытие смены","Окончание - Параметры: " + ПреобразоватьВJSON(ВыходныеПараметры));
	КонецЕсли;	
	
	Возврат Истина;
		
КонецФункции

Функция ПроверитьИОткрытьСмену(ВыходныеПараметры)

	СменаТТ = ИнтерфейсРМ.ТекущаяСмена();
	Если СменаТТ.Пустая() Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Смена ТТ не открыта");
		Логирование(0,"Открытие смены","Ошибка - Смена ТТ не открыта");
		Возврат Ложь;
	КонецЕсли;
	
	Если НачалоДня(СменаТТ.Дата) <> НачалоДня(ТекущаяДатаСеанса()) Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Предыдущая смена ТТ не закрыта!");
		Логирование(0,"Открытие смены","Ошибка - Предыдущая смена ТТ не закрыта!");
		Возврат Ложь;
	КонецЕсли;
	
	
	Ответ = ПРТ_Статус(ПараметрыТО.Model);
	
	Если Ответ <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(ответ));
		Логирование(0,"Открытие смены","Ошибка - " + ПРТ_ОписаниеОшибки(ответ));
		Возврат Ложь;
	КонецЕсли;
	
	
	Если Ответ = 0 Тогда
		Если ПолучитьСменуКассы().Пустая() тогда
			Ответ = ОткрытьСмену(ВыходныеПараметры);
		КонецЕсли;	
		Если Ответ Тогда
			номерЧека = ВыходныеПараметры.НомерДокумента;
			НомерСмены = ВыходныеПараметры.номерСмены;
		Иначе
			НомерСмены = 0;
			НомерЧека = 0; // последний номер документа протокол расчетов
			ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека); 
			
		КонецЕсли;
		
		Если ПолучитьСменуКассы().Пустая() Тогда
			ОткрытиеСмены = Документы.Касса_ОткрытиеСмены.СоздатьДокумент();
			ОткрытиеСмены.Автор = глПользователь;
			ОткрытиеСмены.Дата = ТекущаяДатаСеанса();
			ОткрытиеСмены.Касса = глПараметрыРМ.ККМ;
			ОткрытиеСмены.КассаНомер = глПараметрыРМ.ККМ.КодСуп;
			ОткрытиеСмены.КассаЗаводскойНомер = глПараметрыРМ.ККМ.ЗаводскойНомер;
			ОткрытиеСмены.НомерСмены = НомерСмены;
			ОткрытиеСмены.НомерДокумента = НомерЧека;
			ОткрытиеСмены.РабочееМесто = глРабочееМесто;
			ОткрытиеСмены.СменаТТ = СменаТТ; 
			
			// запишем данные по смене в регистр
			//Рег = РегистрыСведений.НомерЧекаНФР.СоздатьМенеджерЗаписи();
			//Рег.Дата = ТекущаяДата();
			//Рег.РабочееМесто = глРабочееМесто;
			//Рег.НомерСменыККМ = номерСмены;
			//Рег.Прочитать();
			//Рег.Дата = ТекущаяДата();
			//Рег.РабочееМесто = глРабочееМесто;
			//Рег.НомерСменыККМ = номерСмены;
			//Рег.НомерЧека = 1;
			//Рег.Записать();
			
			Если не ИнтерфейсРМ.ПопыткаДействияСОбъектом(ОткрытиеСмены,"Объект.Записать(РежимЗаписиДокумента.Проведение)") Тогда
				//Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				//	ош = Новый Массив;
				//	ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
				//Иначе
				//	Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				//		ош = Новый Массив;
				//		ВыходныеПараметры.ОписаниеОшибки = ош;
				//	КонецЕсли;
				//КонецЕсли;
				//ВыходныеПараметры.ОписаниеОшибки.Добавить("Кассовая смена не открыта");
				//Логирование(0,"Открытие смены","Ошибка - Кассовая смена не открыта");
				//Ответ = Ложь;
			КонецЕсли;
			
			Попытка
				УправлениеСерверамиПриложений.СоздатьЛокальнуюФайловуюБазу();	
			Исключение
				ЗаписьЖурналаРегистрации("Резервирование.Ошибка создания локальной базы", УровеньЖурналаРегистрации.Ошибка, , ОткрытиеСмены.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПечатьТекста(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	
	Логирование(1,"Печать текста","Начало");
	
	Логирование(0,"Печать текста","входные параметры: " + ПреобразоватьВJSON(ВходныеПараметры));
	
	Если не ВходныеПараметры.Свойство("Строки") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.ОписаниеОшибки = ош;
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: нет строк");
		Логирование(0,"Печать текста","Ошибка -  Ошибка входных параметров: нет строк");
		Возврат Ложь;
	КонецЕсли;
	// узкий шрифт это 1
	ТипШрифта = 1;
	Если ВходныеПараметры.Свойство("ТипШрифта") Тогда
		ТипШрифта = ?(ВходныеПараметры.ТипШрифта = 0, 0 , 1);
	КонецЕсли;
	Модель = ПараметрыТО.Model;
	ТипШрифта = 0; // всегда большой шрифт
	
	// установим шрифт
	Команда = ПРТ_ПолучитьКоманду(Модель,"Шрифт" + ТипШрифта);
	ПРТ_ОтправитьВПорт(Команда);
	Если ТипШрифта = 1 Тогда // Уменьшим растоние между строками
		ПРТ_ОтправитьВПорт(Знак(27) + Знак(51) + Знак(15));
	КонецЕсли;
	// выравнивание по левому краю
	Команда = ПРТ_ПолучитьКоманду(Модель, "ВыравниваниеЛево");
	ПРТ_ОтправитьВПорт(Команда);
	
	Ответ = ПРТ_Статус(Модель);
	
	Если Ответ <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
		Логирование(0,"Печать текста","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
		Возврат Ложь;
	КонецЕсли;	
	
	МассивСтрок = ВходныеПараметры.Строки;
	Если МассивСтрок.Количество() <> 0 ТОгда
		Для инд = 0 по МассивСтрок.Количество() - 1 Цикл
			СтрокаТекста = МассивСтрок[инд];
			Если СокрЛП(СтрокаТекста) = "[отрезка]" Тогда
				
				ПРТ_ОтправитьВПорт(Знак(0) + Знак(10));
				Если ТипШрифта = 1 Тогда // Уменьшим растоние между строками
					Команда = ПРТ_ПолучитьКоманду(Модель,"Прогон");
					для к = 1 по 12 Цикл
						ПРТ_ОтправитьВПорт(Команда);
					КонецЦикла;
					ПРТ_ОтправитьВПорт(Знак(27) + Знак(51) + Знак(30));
				Иначе
					Команда = ПРТ_ПолучитьКоманду(Модель,"Прогон");
					для к = 1 по 3 Цикл
						ПРТ_ОтправитьВПорт(Команда);
					КонецЦикла;
				КонецЕсли;
				Ответ = ПРТ_ПечатьКлише();
				Если Ответ <> 0 Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
					Логирование(0,"Печать текста","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
					Возврат Ложь;
				КонецЕсли;
				
				//Команда = ПРТ_ПолучитьКоманду(Модель,"Отрезка");
				//ПРТ_ОтправитьВПорт(Команда);
				
				ПРТ_ОтправитьВПорт(Знак(0) + Знак(10));
				
			ИначеЕсли найти(СтрокаТекста,"|ШтрихКод|") > 0 Тогда
				поз = Найти(СтрокаТекста,"|ШтрихКод|");
				ВыделеннаяСтрока = Сред(СтрокаТекста, Поз + СтрДлина("|ШтрихКод|") );
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока,1, Найти(ВыделеннаяСтрока, "|") - 1); 
				Если СтрДлина(СокрЛП(ВремШтрихКод)) <= 13 и СтрДлина(СокрЛП(ВремШтрихКод)) >= 8 Тогда
					//"EAN13"
					ТипШК = "EAN13";
					ПРТ_ПечатьШК(Модель,ТипШК,ВремШтрихКод);
				ИначеЕсли СтрДлина(СокрЛП(ВремШтрихКод)) = 8 Тогда
					//"EAN8";
					ТипШК = "EAN8";
					ПРТ_ПечатьШК(Модель,ТипШК,ВремШтрихКод);
				Иначе
					//"QR";
					ТипШК = "QR";
					ПРТ_ПечатьШК(Модель,ТипШК,ВремШтрихКод);
				КонецЕсли;
				
				Ответ = ПРТ_Статус(Модель);
				
				Если Ответ <> 0 Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
					Логирование(0,"Печать текста","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Если Найти(СтрокаТекста,"[Кассир]") <> 0 Тогда
					СтрокаТекста = СтрЗаменить(СтрокаТекста,"[Кассир]",глПользователь);
				КонецЕсли;
				МаксДлинаСтроки = 48;
				Если СтрДлина(СтрокаТекста) > МаксДлинаСтроки Тогда
					Пока СтрДлина(СтрокаТекста) > МаксДлинаСтроки Цикл
						Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
						ПРТ_ПечатьСтроки(Строка);
						СтрокаТекста = Сред(СтрокаТекста, МаксДлинаСтроки + 1);
					КонецЦикла;
					
					Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
					ПРТ_ПечатьСтроки(Строка);
				Иначе
					Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
					ПРТ_ПечатьСтроки(Строка);
				КонецЕсли;
				Ответ = ПРТ_Статус(Модель);
				Если ответ <> 0 Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
					Логирование(0,"Печать текста","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПРТ_ОтправитьВПорт(Знак(0) + Знак(10));
		
		Если ТипШрифта = 1 Тогда // Уменьшим растоние между строками
			Команда = ПРТ_ПолучитьКоманду(Модель,"Прогон");
			для к = 1 по 12 Цикл
				ПРТ_ОтправитьВПорт(Команда);
			КонецЦикла;
			ПРТ_ОтправитьВПорт(Знак(27) + Знак(51) + Знак(30));
		Иначе
			Команда = ПРТ_ПолучитьКоманду(Модель,"Прогон");
			для к = 1 по 3 Цикл
				ПРТ_ОтправитьВПорт(Команда);
			КонецЦикла;
		КонецЕсли;
		
		Ответ = ПРТ_ПечатьКлише();
		Если Ответ <> 0 Тогда
			Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			Иначе
				Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					ош = Новый Массив;
					ВыходныеПараметры.ОписаниеОшибки = ош;
				КонецЕсли;
			КонецЕсли;
			ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
			Логирование(0,"Печать текста","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
			Возврат Ложь;
		КонецЕсли;
		
		
		//Команда = ПРТ_ПолучитьКоманду(Модель,"Отрезка");
		//ПРТ_ОтправитьВПорт(Команда);
		
		
		
		ПРТ_ОтправитьВПорт(Знак(0) + Знак(10));
		
	КонецЕсли;
	//ОткрытьДенежныйЯщик(ВыходныеПараметры);
	Возврат Истина;	
КонецФункции

Функция АннулироватьЧек(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	//Ответ = ОткрытьЧек(ВходныеПараметры,ВыходныеПараметры);
	//Если Ответ Тогда
	//	Ответ = ОтменитьЧек(ВыходныеПараметры);
	//КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПолучитьТекущееСостояние(ВыходныеПараметры)
	
	Логирование(1,"Текущее состояние ККТ","начало");
	
	КоличествоНепереданныхФД = 0;//DRV.Count;
	ДатаПервогоНепереданногоФД = Дата(1,1,1);
	НомерСмены = 0;
	НомерЧека = 0; // последний номер документа протокол расчетов
	ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека);
	НомерЧека = ?(НомерЧека = 0,1,НомерЧека);
	СменаОткрыта = НомерСмены <> 0;//DRV.СменаОткрыта; // на всякий случай
	ТипПослЧека = 0;//DRV.LastCheckType;
	НомерДокумента = 0;//DRV.НомерДокумента;
	Ответ = ПРТ_Статус(ПараметрыТО.Model);
	
	Если Ответ <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
		Логирование(0,"Текущее состояние ККТ","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
		Возврат Ложь;
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);		
		ВыходныеПараметры.Вставить("НомерЧека",НомерЧека);
		ВыходныеПараметры.Вставить("КоличествоНепереданныхФД"   , КоличествоНепереданныхФД); 
		ВыходныеПараметры.Вставить("НомерПервогоНепереданногоФД", Неопределено); 
		ВыходныеПараметры.Вставить("ДатаПервогоНепереданногоФД ", ДатаПервогоНепереданногоФД); 
		ВыходныеПараметры.Вставить("ДатаСменыККТ",ТекущаяДата());//ДатаСмены);
		ВыходныеПараметры.Вставить("НомерСменыККТ",НомерСмены);
		ВыходныеПараметры.Вставить("КоличествоЧеков",номерЧека);
		ВыходныеПараметры.Вставить("КоличествоФД",НомерДокумента);
		ВыходныеПараметры.Вставить("НомерДокумента",НомерДокумента);
		
		ВыходныеПараметры.Вставить("СменаОткрыта",СменаОткрыта);
		//1 – чек прихода;
		//2 – чек возврата прихода;
		//4 – чек расхода;
		//5 – чек возврата расхода;
		//7 - чек коррекции прихода;
		//8 – чек коррекции возврата прихода;
		//9 – чек корреции расхода;
		//10 – чек коррекции возврата расхода
		ВыходныеПараметры.Вставить("ТипЧека",ТипПослЧека);
		ВыходныеПараметры.Вставить("ДатаДокумента",ТекущаяДата());//ДатаСмены);
		ВыходныеПараметры.Вставить("ФискальныйПризнак",ложь);//DRV.ФискальныйПризнак);
		Логирование(1,"Текущее состояние ККТ","Выходные параметры " + ПреобразоватьВJSON(ВыходныеПараметры));
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОткрытьЧек(ВходныеПараметры,ВыходныеПараметры)
	
	Логирование(1,"Открытие чека","Начало");
	Логирование(0,"Открытие чека","Входные параметры - " + ПреобразоватьВJSON(ВходныеПараметры));
	
	Ответ  = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;
	Электронно = 1;
	
	Если не ВходныеПараметры.Свойство("ТипЧека") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: не указан тип чека");
		Логирование(0,"Открытие чека","Ошибка входных параметров: не указан тип чека");
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("ФискальныйЧек") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: не указан тип фискальности чека");
		Логирование(0,"Открытие чека","Ошибка входных параметров: не указан тип фискальности чека");
		Возврат Ложь;
	КонецЕсли;
	ТипЧека = ВходныеПараметры.ТипЧека;
	ФискальныйЧек = ВходныеПараметры.ФискальныйЧек;	
	Если ВходныеПараметры.Свойство("Электронно") Тогда
		Электронно = ВходныеПараметры.Электронно;
	КонецЕсли;
		
	Ответ = ПРТ_Статус(ПараметрыТО.Model);
	
	Если Ответ <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
		Логирование(0,"Открытие чека","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
		Возврат Ложь;
	Иначе
		
		НомерСмены = 0;
		НомерЧека = 0;
		ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека);
		
		//НомерЧека = НомерЧека + 1;
	КонецЕсли;
	
	Если Ответ = 0 Тогда
		ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);
		ВыходныеПараметры.Вставить("НомерЧека",НомерЧека);
		Логирование(1,"Открытие чека","Окончание - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОткрытьДенежныйЯщик(ВыходныеПараметры)
	
	Логирование(1,"Открыть денежный ящик","начало");
	
	Ответ = Истина;

	Команда = ПРТ_ПолучитьКоманду(ПараметрыТО.model,"ОткрытьЯщик");
	ПРТ_ОтправитьВПорт(Команда);
	Ответ = ПРТ_Статус(ПараметрыТО.model);
	
	Если Ответ <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
		Логирование(0,"Открыть денежный ящик","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция ОтменитьЧек(ВыходныеПараметры) 

	Логирование(1,"Отмена чека","начало");
	
	Модель = ПараметрыТО.Model;
	МассивСтрокДляПечати = Новый Массив;
	МассивСтрокДляПечати.Добавить(" ");
	МассивСтрокДляПечати.Добавить("               ЧЕК АННУЛИРОВАН    ");
	МассивСтрокДляПечати.Добавить(" ");
	ВхПар = новый Структура;
	ВыхПар = новый Структура;
	ВхПар.Вставить("Строки",МассивСтрокДляПечати);
	ПечатьТекста(ВхПар,ВыхПар);
	//Если ответ <> 0 тогда
	//	Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
	//		ош = Новый Массив;
	//		ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
	//	Иначе
	//		Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
	//			ош = Новый Массив;
	//			ВыходныеПараметры.ОписаниеОшибки = ош;
	//		КонецЕсли;
	//	КонецЕсли;
	//	ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
	//	Логирование(0,"Отмена чека","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
	//	Возврат Ложь;
	//КонецЕсли;
	//ПРТ_ПечатьКлише();
	//Ответ = ПРТ_Статус(Модель);
	//Если ответ <> 0 тогда
	//	Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
	//		ош = Новый Массив;
	//		ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
	//	Иначе
	//		Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
	//			ош = Новый Массив;
	//			ВыходныеПараметры.ОписаниеОшибки = ош;
	//		КонецЕсли;
	//	КонецЕсли;
	//	ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
	//	Логирование(0,"Отмена чека","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
	//	Возврат Ложь;
	//КонецЕсли;
	//Команда = ПРТ_ПолучитьКоманду(Модель,"Отрезка");
	//ПРТ_ОтправитьВПорт(Команда);
	Ответ = ПРТ_Статус(Модель);
	
	Если Ответ <> 0 Тогда
		//ВыходныеПараметры.Очистить();
		//ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.ОтменитьЧек>. " + ОписаниеОшибки());
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
		Логирование(0,"Отмена чека","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция Внесение (ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	
	Логирование(1,"Внесение","Начало");
	Логирование(0,"Внесение","Входные параметры" + ПреобразоватьВJSON(ВходныеПараметры));

	
	Если ТипЗнч(ВходныеПараметры) <> Тип("Число") ТОгда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: передано не число");
		Логирование(0,"Внесение","Ошибка входных параметров: передано не число");
		Возврат Ложь;
	КонецЕсли;
	
	Модель = ПараметрыТО.Model;
	Ответ = ПРТ_Статус(Модель);
	
	Если Ответ <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
		Логирование(0,"Внесение","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
		Возврат Ложь;
	КонецЕсли;
	
	Сумма = Формат(ВходныеПараметры,"ЧДЦ=2; ЧН=0.00; ЧГ=0");
	
	МассивСтрокДляПечати = Новый Массив;
	
	Стр = "ВНЕСЕНИЕ";
	Пока СтрДлина(Стр) < 48 - СтрДлина(Сумма) Цикл
		Стр = Стр + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(Стр + Строка(Сумма));
	НомерДок = ПолучитьНомерДокВнесения();
	ДатаСтр = Формат(ТекущаяДата(),"ДФ='дд-ММ-гг ЧЧ:мм'");
	Стр = "Док. " + Прав("00000000" + НомерДок,8);
	Пока СтрДлина(Стр) < 48 - СтрДлина(ДатаСтр) Цикл
		Стр = Стр + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(Стр);
	Стр = "!ЗН ПРТ:";
	ЗавНомер = СокрЛП(глПараметрыРМ.ККМ.ЗаводскойНомер);
	Пока СтрДлина(Стр) < 48 - СтрДлина(ЗавНомер) Цикл
		Стр = Стр + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(Стр + ЗавНомер);
	МассивСтрокДляПечати.Добавить("ДАТА " + формат(ТекущаяДата()));

	МассивСтрокДляПечати.Добавить(" ");
	МассивСтрокДляПечати.Добавить(" ");
	ВхПар = Новый Структура;
	ВЫхПар = Новый Структура;
	ВхПар.Вставить("Строки",МассивСтрокДляПечати);
	ПечатьТекста(ВхПар,ВЫхПар);
	
	//ПРТ_ПечатьКлише();
	//
	//Команда = ПРТ_ПолучитьКоманду(Модель,"Отрезка");
	//ПРТ_ОтправитьВПорт(Команда);
	
	Ответ = ПРТ_Статус(Модель);
	Если Ответ <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
		Логирование(0,"Внесение","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция Выемка (ВходныеПараметры,ВыходныеПараметры)
	
	Логирование(1,"Выемка","Начало");
	Логирование(0,"Выемка","Входные параметры" + ПреобразоватьВJSON(ВходныеПараметры));
	
	
	Ответ = Истина;
	Если ТипЗнч(ВходныеПараметры) <> Тип("Число") ТОгда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: передано не число");
		Логирование(0,"Выемка","Ошибка входных параметров: передано не число");
		Возврат Ложь;
	КонецЕсли;
	
	Модель = ПараметрыТО.Model;
	Ответ = ПРТ_Статус(Модель);
	
	Если Ответ <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
		Логирование(0,"Выемка","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
		Возврат Ложь;
	КонецЕсли;
	
	Сумма = Формат(ВходныеПараметры,"ЧДЦ=2; ЧН=0.00; ЧГ=0");
	
	СменаККМ = ПолучитьСменуКассы();
	Если СменаККМ.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	Касса_ОткрытиеСмены.НомерСмены КАК НомерСмены,
		               |	Касса_ОткрытиеСмены.Дата КАК Дата,
		               |	Касса_ОткрытиеСмены.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.Касса_ОткрытиеСмены КАК Касса_ОткрытиеСмены
		               |ГДЕ
		               |	Касса_ОткрытиеСмены.РабочееМесто = &РабочееМесто
		               |	И НЕ Касса_ОткрытиеСмены.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Дата УБЫВ";
		Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СменаККМ = Выборка.Ссылка;
			Прервать;
		КонецЦикла;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               //|	ДенежныеОперации.РабочееМесто КАК РабочееМесто,
	               |	СУММА(ДенежныеОперации.Сумма) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ДенежныеОперации КАК ДенежныеОперации
	               |ГДЕ
	               |	ДенежныеОперации.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) И КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
				   //|	И ДенежныеОперации.РабочееМесто = &РабочееМесто
	               |	И ВЫБОР
	               |			КОГДА ДенежныеОперации.Регистратор ССЫЛКА Документ.ПротоколРасчетов
	               |				ТОГДА ДенежныеОперации.Регистратор.КассоваяСмена.НомерСмены = &НомерСмены
	               |			ИНАЧЕ ДенежныеОперации.Регистратор.СменаКассы.НомерСмены = &НомерСмены
	               |		КОНЕЦ
	               |	И ДенежныеОперации.ККМ = &ККМ
				   //|
				   //|СГРУППИРОВАТЬ ПО
				   //|	ДенежныеОперации.РабочееМесто
				   |";
#Если ТолстыйКлиентУправляемоеПриложение Тогда
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
#Иначе 	
	Запрос.УстановитьПараметр("Период", ТекущаяДатаНаСервере());
#КонецЕсли
	//Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
	Запрос.УстановитьПараметр("ККМ",СменаККМ.Касса);
	НомерСмены = 0;
	НомерЧека = 0; // последний номер документа протокол расчетов
	ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",НомерСмены);
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаПриход = 0;
	Пока Выборка.Следующий() Цикл
		СуммаПриход = Выборка.Сумма;
	КонецЦикла;
	Если СуммаПриход < ВходныеПараметры Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("В ККМ нет денег для выплаты");
		Логирование(0,"Выемка","Ошибка - " + "В ККМ нет денег для выплаты");
		Возврат Ложь;
	КонецЕсли;
	
	
	МассивСтрокДляПечати = Новый Массив;
	Стр = "ВЫПЛАТА";
	Пока СтрДлина(Стр) < 48 - 7 - СтрДлина(Сумма) Цикл
		Стр = Стр + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(Стр + Строка(Сумма));
	НомерДок = ПолучитьНомерДокВыплата();
	ДатаСтр = Формат(ТекущаяДата(),"ДФ='дд-ММ-гг ЧЧ:мм'");
	Стр = "Док. " + Прав("00000000" + НомерДок,8);
	Пока СтрДлина(Стр) < 48 - СтрДлина(ДатаСтр) Цикл
		Стр = Стр + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(Стр);
	Стр = "!ЗН ПРТ:";
	ЗавНомер = СокрЛП(глПараметрыРМ.ККМ.ЗаводскойНомер);
	Пока СтрДлина(Стр) < 48 - СтрДлина(ЗавНомер) Цикл
		Стр = Стр + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(Стр + ЗавНомер);
	МассивСтрокДляПечати.Добавить("ДАТА " + формат(ТекущаяДата()));
	МассивСтрокДляПечати.Добавить(" ");
	МассивСтрокДляПечати.Добавить(" ");
	
	ВхПар = Новый Структура;
	ВЫхПар = Новый Структура;
	ВхПар.Вставить("Строки",МассивСтрокДляПечати);
	ПечатьТекста(ВхПар,ВЫхПар);

	//ПРТ_ПечатьКлише();
	//
	//Команда = ПРТ_ПолучитьКоманду(Модель,"Отрезка");
	//ПРТ_ОтправитьВПорт(Команда);
	
	Ответ = ПРТ_Статус(Модель);
	Если Ответ <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
		Логирование(0,"Выемка","Ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция ФисказизацияЧека(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	ОтветПоОперации = Истина;
	
	ПоследнийФД = 0;
	АдресКлиента = "";
	
	Логирование(1,"Фискализация чека","Начало");
	
	Логирование(0,"Фискализация чека","входные параметры - " + ПреобразоватьВJSON(ВходныеПараметры));
	
	МассивСтрокЧека = Новый Массив;
	МассивСтрокОплаты = Новый Массив;
	ТипЧека = Ложь;
	
	Если не ВходныеПараметры.Свойство("СтрокиЧека") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: нет строк чека");
		Логирование(0,"Фискализация чека","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("СтрокиОплат") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: нет строк оплаты");
		Логирование(0,"Фискализация чека","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("ТипЧека") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: не указан тип чека");
		Логирование(0,"Фискализация чека","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	Кассир = "";
	Если ВходныеПараметры.Свойство("Кассир") Тогда
		Кассир = Лев(ВходныеПараметры.Кассир,63);
	КонецЕсли;
	СуммаСкидкиНаЧек = 0;
	Если ВходныеПараметры.Свойство("СуммаСкидкиНаЧек") Тогда
		СуммаСкидкиНаЧек = ВходныеПараметры.СуммаСкидкиНаЧек;
	КонецЕсли;
	
	МассивСтрокЧека = ВходныеПараметры.СтрокиЧека;
	МассивСтрокОплаты = ВходныеПараметры.СтрокиОплат;
	ТипЧека = ВходныеПараметры.ТипЧека;
	СуммаЧека = 0;
	
	ВхСтрук = Новый Структура;
	ВхСтрук.Вставить("ТипЧека",ТипЧека);
	ВхСтрук.Вставить("ФискальныйЧек",Истина);
	ВхСтрук.Вставить("Электронно",1); // 0 - не печатается
	
	СоответТиповШК = Новый Соответствие;
	СоответТиповШК.Вставить("EAN8",3);
	СоответТиповШК.Вставить("EAN13",2);
	СоответТиповШК.Вставить("PDF417",10);
	СоответТиповШК.Вставить("QR",84);
	
	ВыхСтрук = Новый Структура;
	
	//DRV.НомерРегистра = 52;
	//DRV.ПолучитьРегистр();
	//
	//ПоследнийФД = DRV.НомерДокумента;
	
	Логирование(0,"Фискализация чека","Открытие чека вх параметры " + ПреобразоватьВJSON(ВхСтрук));
	
	Ответ = ОткрытьЧек(ВхСтрук,ВыхСтрук);
	Ответ = ?(ответ,0,-99);
	
	//ВхСтрук.Вставить("ТелефонКлиента","89150000000");
	//ВхСтрук.Вставить("EmailКлиента","test@test.ru");
	Если ВходныеПараметры.Свойство("EmailКлиента") Тогда
		АдресКлиента = ВходныеПараметры.EmailКлиента;
	КонецЕсли;
	Если ВходныеПараметры.Свойство("ТелефонКлиента") и не ЗначениеЗаполнено(АдресКлиента) Тогда
		АдресКлиента = ВходныеПараметры.ТелефонКлиента;
	КонецЕсли;
	
	
	Логирование(0,"Фискализация чека","Открытие чека вх параметры " + ПреобразоватьВJSON(ВыхСтрук));
	
	Если Ответ <> 0 Тогда
		Логирование(0,"Фискализация чека","Открытие чека ошибка - " + ПреобразоватьВJSON(ВыхСтрук));
		//ОтменитьЧек(ВыходныеПараметры);
		Возврат ложь;
	КонецЕсли;
	НомерЧека = ВыхСтрук.НомерЧека;
	НомерСмены = ВыхСтрук.НомерСмены;
	
	Если МассивСтрокЧека.Количество() <> 0 Тогда
		
		Если ЗначениеЗаполнено(АдресКлиента) ТОгда
			//DRV.AttrNumber = 1008;
			//DRV.AttrValue = АдресКлиента;
			//DRV.ЗаписатьРеквизит();
		КонецЕсли;
		// кассир
		//DRV.AttrNumber = 1021;
		//DRV.AttrValue = Кассир;
		//DRV.ЗаписатьРеквизит();
		ТаблСуммПоСтрокам = Новый ТаблицаЗначений;
		ТаблСуммПоСтрокам.Колонки.Добавить("Сумма");
		МассивСтрокДляПечати = Новый Массив;
		МассивСтрокДляПечати.Добавить("ТОВАРНЫЙ ЧЕК " + ?(ТипЧека,"ВОЗВРАТА","ПРОДАЖИ") + " № " + Строка(НомерЧека));
		МассивСтрокДляПечати.Добавить("КАССИР " + глПользователь);
		МассивСтрокДляПечати.Добавить("------------------------------------------------");
		МассивСтрокДляПечати.Добавить("  Кол-во        Цена        Скидка        Ст-ть ");
		МассивСтрокДляПечати.Добавить("------------------------------------------------");
		
		Для инд = 0 по МассивСтрокЧека.Количество() - 1 Цикл
			ПозицияЧека = МассивСтрокЧека[инд];
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
			
				//DRV.РасширеннаяРегистрация = ложь;
				//DRV.ПереносТекста = 2;
				МассивСтрокДляПечати.Добавить(Лев(ПозицияЧека.Наименование,48));
				Кол = ПозицияЧека.Количество;
				Цена = ПозицияЧека.Цена;
				Сумма = Окр(Кол*Цена,2,РежимОкругления.Окр15как20);
				СтрТабл = ТаблСуммПоСтрокам.Добавить();
				СтрТабл.Сумма = Сумма;
				СтрокаСуммы = "  ";
				СтрокаСуммы = СтрокаСуммы + Формат(Кол,"ЧДЦ=3; ЧГ=0") + " Х ";
				Пока СтрДлина(СтрокаСуммы) + СтрДлина(Цена) < 17 Цикл
					СтрокаСуммы = СтрокаСуммы + " ";
				КонецЦикла;
				СтрокаСуммы = СтрокаСуммы + Формат(Цена,"ЧДЦ=2; ЧГ=0") + " -        0.00";
				СтрокаСуммы = СтрокаСуммы + "=" + Прав("            " + Формат(Сумма,"ЧДЦ=2; ЧГ=0"),48 - (СтрДлина(СтрокаСуммы) + СтрДлина(Формат(Сумма,"ЧДЦ=2; ЧГ=0"))));
				МассивСтрокДляПечати.Добавить(СтрокаСуммы);
			ИначеЕсли ПозицияЧека.Свойство("Текст") Тогда
				СтрокаТекста = ПозицияЧека.Текст;
				МаксДлинаСтроки = 48;
				Если СтрДлина(СтрокаТекста) > МаксДлинаСтроки Тогда
					Пока СтрДлина(СтрокаТекста) > МаксДлинаСтроки Цикл
						МассивСтрокДляПечати.Добавить(Лев(СтрокаТекста, МаксДлинаСтроки));
						СтрокаТекста = Сред(СтрокаТекста, МаксДлинаСтроки + 1);
					КонецЦикла;
					
					МассивСтрокДляПечати.Добавить(Лев(СтрокаТекста, МаксДлинаСтроки));
				Иначе
					МассивСтрокДляПечати.Добавить(Лев(СтрокаТекста, МаксДлинаСтроки));
				КонецЕсли;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				Если ПозицияЧека.Свойство("ТипШтрихкода") Тогда
					ТипШК = СоответТиповШК[ПозицияЧека.ТипШтрихкода];
				Иначе
					Если СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) <= 13 и СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) >= 8 Тогда
						ТипШК = "EAN13";
					ИначеЕсли СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) = 8 Тогда
						ТипШК = "EAN8";
					Иначе
						ТипШК = "QR";
					КонецЕсли;
				КонецЕсли;
				ВхПар = Новый Структура;
				ВхПар.Вставить("Строки",МассивСтрокДляПечати);
				ПечатьТекста(ВхПар,ВыходныеПараметры);
				
				ПРТ_ПечатьШК(ПараметрыТО.model,ТипШК,СокрЛП(ПозицияЧека.ШтрихКод));
				
				МассивСтрокДляПечати.Очистить();
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Строка1 = Формат(ТекущаяДата(),"ДФ='дд/ММ/гг ЧЧ:мм'");
	Строка1 = Строка1 + " ";
	Пока СтрДлина(Строка1) < 48 Цикл
		Строка1 = Строка1 + "-";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(Строка1);
	СуммаВсего = Окр(ТаблСуммПоСтрокам.Итог("Сумма"),2,РежимОкругления.Окр15как20);
	
	// округление копеек
	
	Если Ответ = 0 Тогда
		
		СуммаНал = 0;
		СуммаБНал = 0;
		Для индекс = 0 по МассивСтрокОплаты.Количество() - 1 Цикл
			ПозицияОплаты = МассивСтрокОплаты[индекс];
			ТипОплаты = ?(ПозицияОплаты.Свойство("ТипОплаты") , ПозицияОплаты.ТипОплаты, "Нал");
			СуммаОплаты = ?(ПозицияОплаты.Свойство("Сумма") , ПозицияОплаты.Сумма, 0);
			Если ТипОплаты = "Нал" Тогда
				СуммаНал = СуммаНал + СуммаОплаты;
			Иначе
				СуммаБНал = СуммаБНал + СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
		//Если СуммаНал + СуммаБНал - СуммаСкидкиНаЧек <> СуммаВсего Тогда
		//	Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
		//		ош = Новый Массив;
		//		ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		//	Иначе
		//		Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
		//			ош = Новый Массив;
		//			ВыходныеПараметры.ОписаниеОшибки = ош;
		//		КонецЕсли;
		//	КонецЕсли;
		//	ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		//	Логирование(0,"Фискализация чека","Оплата НАЛ ошибка - Недостаточно сумм оплат");
		//	ОтменитьЧек(ВыходныеПараметры);
		//	Возврат Ложь;
		//КонецЕсли;
		
		СтрПоз = "ПОЗИЦИЙ: ";
		КолПоз = Формат(ТаблСуммПоСтрокам.Количество(),"ЧЦ=4; ЧГ=0");
		Пока СтрДлина(СтрПоз) < 48 - СтрДлина(КолПоз) Цикл
			СтрПоз = СтрПоз + " ";
		КонецЦикла;
		МассивСтрокДляПечати.Добавить(СтрПоз + КолПоз);
		СтрВсего = "ВСЕГО ";
		Пока СтрДлина(СтрВсего) < 48 - СтрДлина(СуммаВсего) Цикл
			СтрВсего = СтрВсего + " ";
		КонецЦикла;
		МассивСтрокДляПечати.Добавить(СтрВсего + СуммаВсего);
		// округление копеек
		Если СуммаСкидкиНаЧек <> 0 Тогда
			СтрСкидка = " СКИДКА";
			Пока СтрДлина(СтрСкидка) < 48 - СтрДлина(СуммаСкидкиНаЧек) + 1 Цикл
				СтрСкидка = СтрСкидка + " ";
			КонецЦикла;
			МассивСтрокДляПечати.Добавить(СтрСкидка + "=" + СуммаСкидкиНаЧек);
		КонецЕсли;
		МассивСтрокДляПечати.Добавить("------------------------------------------------");
		
		Если СуммаБНал <> 0 Тогда
			МассивСтрокДляПечати.Добавить("ПОЛУЧЕНО:                КК " + Прав("                    " + Окр(СуммаБНал,2,РежимОкругления.Окр15как20),20));
		КонецЕсли;
		Если СуммаНал <> 0 Тогда
			//ОткрытьДенежныйЯщик(ВыходныеПараметры);
			МассивСтрокДляПечати.Добавить("ПОЛУЧЕНО:                Руб" + Прав("                    " + Окр(СуммаНал,2,РежимОкругления.Окр15как20),20));
		КонецЕсли;
		СуммаСдачи = СуммаНал + СуммаБНал - СуммаВсего - СуммаСкидкиНаЧек;
		Если СуммаСдачи <> 0 Тогда
			МассивСтрокДляПечати.Добавить("СДАЧА:                   Руб" + Прав("                    " + Окр(СуммаСдачи,2,РежимОкругления.Окр15как20),20));
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ = 0 Тогда 
		
		МассивСтрокДляПечати.Добавить(" ");
		МассивСтрокДляПечати.Добавить(" ");
		МассивСтрокДляПечати.Добавить("Подпись: ____________________");
		МассивСтрокДляПечати.Добавить(" ");
		МассивСтрокДляПечати.Добавить(" ");
		ВхПар = Новый Структура;
		ВхПар.Вставить("Строки",МассивСтрокДляПечати);
		ПечатьТекста(ВхПар,ВыходныеПараметры);
		
		Ответ = ПРТ_Статус(ПараметрыТО.model);
		Если Ответ <> 0 Тогда
			Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			Иначе
				Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					ош = Новый Массив;
					ВыходныеПараметры.ОписаниеОшибки = ош;
				КонецЕсли;
			КонецЕсли;
			ВыходныеПараметры.ОписаниеОшибки.Добавить(ПРТ_ОписаниеОшибки(Ответ));
			Логирование(0,"Фискализация чека","Закрытие чека ошибка - " + ПРТ_ОписаниеОшибки(Ответ));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Ответ = 0 тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);
		ВыходныеПараметры.Вставить("НомерЧека",номерЧека);
		
		
		ВыходныеПараметры.Вставить("НомерДокумента",0);//DRV.НомерДокумента);
		
//1 – чек прихода;
//2 – чек возврата прихода;
//4 – чек расхода;
//5 – чек возврата расхода;
//7 - чек коррекции прихода;
//8 – чек коррекции возврата прихода;
//9 – чек корреции расхода;
//10 – чек коррекции возврата расхода
		ВыходныеПараметры.Вставить("ТипЧека",?(ТипЧека,2,1));//DRV.LastCheckType);
		ВыходныеПараметры.Вставить("ДатаДокумента",ТекущаяДата());//Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда));
		ВыходныеПараметры.Вставить("ФискальныйПризнак",Ложь);//DRV.ФискальныйПризнак);
		
		
		Логирование(1,"Фискализация чека","Закрытие чека вых параметры - " + ПреобразоватьВJSON(ВыходныеПараметры));
		// запишем данные по номеру чека в регистр
		Рег = РегистрыСведений.НомерЧекаНФР.СоздатьМенеджерЗаписи();
		Рег.Дата = ТекущаяДата();
		Рег.РабочееМесто = глРабочееМесто;
		Рег.НомерСменыККМ = номерСмены;
		Рег.НомерЧека = НомерЧека;
		Рег.Записать();
		
		//ВыходныеПараметры.Добавить(АдресСайтаПроверки);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗакрытьСмену(ВыходныеПараметры)
	
	Логирование(1,"Закрытие смены","Начало");
	
	МассивСтрокДляПечати = Новый Массив;
	МассивСтрокДляПечати.Добавить("КАССОВЫЙ ОТЧЕТ Z");
	МассивСтрокДляПечати.Добавить("------------------------------------------------");
	МассивСтрокДляПечати.Добавить("КАССА " + глПараметрыРМ.ККМ.КодСУП);
	НомерСмены = 0;
	НомерЧека = 0;
	ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека);
	МассивСтрокДляПечати.Добавить("СМЕНА " + НомерСмены);
	МассивСтрокДляПечати.Добавить("ДАТА " + формат(ТекущаяДата()));
	МассивСтрокДляПечати.Добавить("КАССИР " + глПользователь);
	
	МассивСтрокДляПечати.Добавить("ПРИХОД");
	МассивСтрокДляПечати.Добавить("---------------------------------");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕстьNULL(СУММА(ДенежныеОперации.Сумма),0) КАК Сумма
	               |ИЗ
	               |	РегистрНакопления.ДенежныеОперации КАК ДенежныеОперации
	               |ГДЕ
	               |	ДенежныеОперации.РабочееМесто = &РабочееМесто
	               |	И ДенежныеОперации.Период = &Период
	               |	И ДенежныеОперации.Сумма > 0";
	Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
	Запрос.УстановитьПараметр("Период",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	СуммаВнесения = 0;
	Пока Выборка.Следующий() Цикл
		СуммаВнесения = Выборка.Сумма;
	КонецЦикла;
	Если СуммаВнесения <> 0 Тогда
		МассивСтрокДляПечати.Добавить("Внесено в кассу");
		СтрВнесено = "  Руб  ";
		Пока СтрДлина(СтрВнесено) < 48 - СтрДлина(СуммаВнесения) Цикл
			СтрВнесено = СтрВнесено + " ";
		КонецЦикла;
		МассивСтрокДляПечати.Добавить(СтрВнесено + СуммаВнесения);
	КонецЕсли;
	МассивСтрокДляПечати.Добавить("Получено по продаже");
	номерСмены = 0;
	НомерЧека = 0;
	ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека);
	СуммаНал = 0;
	СуммаБНал = 0;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ПротоколРасчетовПротокол.ВариантОплаты = ЗНАЧЕНИЕ(Справочник.ВариантыОплаты.Наличные)
	               |					ТОГДА ПротоколРасчетовПротокол.СуммаФакт
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК Нал,
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ПротоколРасчетовПротокол.ВариантОплаты = ЗНАЧЕНИЕ(Справочник.ВариантыОплаты.Карта)
	               |					ТОГДА ПротоколРасчетовПротокол.СуммаФакт
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК БНал
	               |ИЗ
	               |	Документ.ПротоколРасчетов.Протокол КАК ПротоколРасчетовПротокол
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	               |		ПО ПротоколРасчетовПротокол.Ссылка.Заказ.Ссылка = ЗаказДопИнф.Заказ
	               |			И (ЗаказДопИнф.Статус = &Закрыт)
	               |ГДЕ
	               |	ПротоколРасчетовПротокол.Ссылка.НомерСмены = &НомерСмены
				   |	и ПротоколРасчетовПротокол.Ссылка.проведен
				   |	И ПротоколРасчетовПротокол.Ссылка.РабочееМесто = &РабочееМесто
				   //|	И ПротоколРасчетовПротокол.Ссылка.Заказ.РабочееМесто = &РабочееМесто
	               |	И ПротоколРасчетовПротокол.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	               |	И ПротоколРасчетовПротокол.Ссылка.Заказ ССЫЛКА Документ.Заказ";
	Запрос.УстановитьПараметр("НомерСмены",номерСмены);
	Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Запрос.УстановитьПараметр("Закрыт",Перечисления.СтатусыЗаказа.Закрыт);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаНал = СуммаНал + Выборка.нал;
		СуммаБНал = СуммаБНал + Выборка.БНал;
	КонецЦикла;
	СуммаПриход = СуммаНал + СуммаБНал;
	СуммаПриходНал = СуммаНал;
	СуммаПриходБНал = СуммаБНал;
	СуммаНал = Формат(СуммаНал,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СуммаБНал = Формат(СуммаБНал,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СтрНал = " Наличными";
	Пока СтрДлина(СтрНал) < 48 - СтрДлина(СуммаНал) Цикл
		СтрНал = СтрНал + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрНал + СуммаНал);
	СтрБНал = " Электронными";
	Пока СтрДлина(СтрБНал) < 48 - СтрДлина(СуммаБНал) Цикл
		СтрБНал = СтрБНал + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрБНал + СуммаБНал);
	
	// Возврат
	МассивСтрокДляПечати.Добавить("РАСХОД");
	МассивСтрокДляПечати.Добавить("---------------------------------");
	МассивСтрокДляПечати.Добавить("Выдано по возврату");
	СуммаНал = 0;
	СуммаБНал = 0;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ССЫЛКА Документ.Заказ","ССЫЛКА Документ.Возврат");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗаказДопИнф.Заказ","ВозвратДопИнф.Возврат");
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗаказДопИнф","ВозвратДопИнф");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаНал = СуммаНал + Выборка.нал;
		СуммаБНал = СуммаБНал + Выборка.БНал;
	КонецЦикла;
	СуммаВозвратПрихода = СуммаНал + СуммаБНал;
	СуммаВозвратПриходаНал = СуммаНал;
	СуммаВозвратПриходаБНал = СуммаБНал;
	СуммаНал = Формат(СуммаНал,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СуммаБНал = Формат(СуммаБНал,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СтрНал = " Наличными";
	Пока СтрДлина(СтрНал) < 48 - СтрДлина(СуммаНал) Цикл
		СтрНал = СтрНал + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрНал + СуммаНал);
	СтрБНал = " Электронными";
	Пока СтрДлина(СтрБНал) < 48 - СтрДлина(СуммаБНал) Цикл
		СтрБНал = СтрБНал + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрБНал + СуммаБНал);
	
	// Выручка
	МассивСтрокДляПечати.Добавить("Выручка");
	МассивСтрокДляПечати.Добавить("---------------------------------");
	СуммаВыручка = 0;
	//Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ПротоколРасчетовПротокол.Ссылка.Заказ ССЫЛКА Документ.Возврат","и истина");
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	СуммаВыручка = СуммаВыручка + Выборка.нал + Выборка.БНал;
	//КонецЦикла;
	СуммаВыручка = СуммаПриход - СуммаВозвратПрихода;
	СуммаВыручки = СуммаВыручка;
	СуммаВыручка = Формат(СуммаВыручка,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СтрНал = " Руб ";
	Пока СтрДлина(СтрНал) < 48 - СтрДлина(СуммаВыручка) Цикл
		СтрНал = СтрНал + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрНал + СуммаВыручка);
	МассивСтрокДляПечати.Добавить("ПОДПИСЬ");
	
	ВхПар = Новый Структура;
	ВхПар.Вставить("Строки",МассивСтрокДляПечати);
	Вхпар.Вставить("ТипШрифта",0);
	Ответ = ПечатьТекста(ВхПар,ВыходныеПараметры);
	
	
	
	КоличествоНепереданныхФД = 0;//DRV.Count;
	ДатаПервогоНепереданногоФД = Дата(1,1,1);
	
	Логирование(0,"Закрытие смены","значение регистра 45 дата неотправленого в ОФД - " + ДатаПервогоНепереданногоФД);
	
	ДатаСмены = ТекущаяДата();
	
	ТипПослЧека = 0;//DRV.LastCheckType;
	НомерДокумента = 0;//DRV.НомерДокумента;
	
	//ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);
	ВыходныеПараметры.Вставить("НомерЧека",НомерЧека);
	//ВыходныеПараметры.Добавить(Параметры);
	
	//Параметры = новый Структура;
	ВыходныеПараметры.Вставить("КоличествоНепереданныхФД"   , КоличествоНепереданныхФД); 
	ВыходныеПараметры.Вставить("НомерПервогоНепереданногоФД", Неопределено); 
	ВыходныеПараметры.Вставить("ДатаПервогоНепереданногоФД ", ДатаПервогоНепереданногоФД); 
	ВыходныеПараметры.Вставить("ДатаСменыККТ",ДатаСмены);
	ВыходныеПараметры.Вставить("НомерСменыККТ",НомерСмены);
	ВыходныеПараметры.Вставить("КоличествоЧеков",номерЧека);
	ВыходныеПараметры.Вставить("КоличествоФД",НомерДокумента);
	//Параметры.Вставить("ПревышеноВремяОжиданияОтветаОФД");
	//Параметры.Вставить("НеобходимаСтрочнаяЗаменаФН");
	//Параметры.Вставить("ПамятьФНПереполнена");
	//Параметры.Вставить("РесурсФНИсчерпан");
	
	ВыходныеПараметры.Вставить("НомерДокумента",НомерДокумента);
//1 – чек прихода;
//2 – чек возврата прихода;
//4 – чек расхода;
//5 – чек возврата расхода;
//7 - чек коррекции прихода;
//8 – чек коррекции возврата прихода;
//9 – чек корреции расхода;
//10 – чек коррекции возврата расхода
	ВыходныеПараметры.Вставить("ТипЧека",ТипПослЧека);
	ВыходныеПараметры.Вставить("ДатаДокумента",ДатаСмены);
	ВыходныеПараметры.Вставить("ФискальныйПризнак",Ложь);//DRV.ФискальныйПризнак);
	
	// запрос сумм по регистрам
	// суммы регистраций
	ВыходныеПараметры.Вставить("СуммаПриход",СуммаПриход);
	ВыходныеПараметры.Вставить("СуммаВозвратПрихода",СуммаВозвратПрихода);
	
	ВыходныеПараметры.Вставить("СуммаПриходНал",СуммаПриходНал);
	ВыходныеПараметры.Вставить("СуммаВозвратПриходаНал",СуммаВозвратПриходаНал);
	ВыходныеПараметры.Вставить("СуммаПриходБНал",СуммаПриходБНал);
	
	ВыходныеПараметры.Вставить("СуммаВозвратПриходаБНал",СуммаВозвратПриходаБНал);
	
	ВыходныеПараметры.Вставить("СуммаВыручка",СуммаВыручки);
	
	СменныйИтогПриход = 0;
	ВыходныеПараметры.Вставить("СменныйИтогПриход",СменныйИтогПриход);
	
	СменныйИтогВозвратПрихода = 0;
	ВыходныеПараметры.Вставить("СменныйИтогВозвратПрихода",СменныйИтогВозвратПрихода);
	
	
	//ВыходныеПараметры.Добавить(СтрукПослФД);
	
	Логирование(1,"Закрытие смены","Окончание - " + ПреобразоватьВJSON(ВыходныеПараметры));
	
	Возврат Истина;
	
КонецФункции

Функция Выручка(ВыходныеПараметры)
	
	Логирование(1,"Выручка","Начало");
	
	номерСмены = 0;
	НомерЧека = 0;
	ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека);
	СуммаНал = 0;
	СуммаБНал = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ПротоколРасчетовПротокол.ВариантОплаты = ЗНАЧЕНИЕ(Справочник.ВариантыОплаты.Наличные)
	               |					ТОГДА ПротоколРасчетовПротокол.СуммаФакт
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК Нал,
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ПротоколРасчетовПротокол.ВариантОплаты = ЗНАЧЕНИЕ(Справочник.ВариантыОплаты.Карта)
	               |					ТОГДА ПротоколРасчетовПротокол.СуммаФакт
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК БНал
	               |ИЗ
	               |	Документ.ПротоколРасчетов.Протокол КАК ПротоколРасчетовПротокол
	               |ГДЕ
	               |	ПротоколРасчетовПротокол.Ссылка.Заказ.НомерСмены = &НомерСмены
	               |	И ПротоколРасчетовПротокол.Ссылка.Заказ.РабочееМесто = &РабочееМесто
	               |	И ПротоколРасчетовПротокол.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	               |	И ПротоколРасчетовПротокол.Ссылка.Заказ ССЫЛКА Документ.Заказ";
	Запрос.УстановитьПараметр("НомерСмены",номерСмены);
	Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаНал = СуммаНал + Выборка.нал;
		СуммаБНал = СуммаБНал + Выборка.БНал;
	КонецЦикла;
	СуммаПриход = СуммаНал + СуммаБНал;
	
	// Возврат
	СуммаНал = 0;
	СуммаБНал = 0;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ССЫЛКА Документ.Заказ","ССЫЛКА Документ.Возврат");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаНал = СуммаНал + Выборка.нал;
		СуммаБНал = СуммаБНал + Выборка.БНал;
	КонецЦикла;
	СуммаВозвратПрихода = СуммаНал + СуммаБНал;
	
	// Выручка
	СуммаВыручка = 0;
	СуммаВыручка = СуммаПриход - СуммаВозвратПрихода;
	СуммаВыручки = СуммаВыручка;
	
	ВыходныеПараметры.Вставить("СуммаВыручка",СуммаВыручки);
	
	Логирование(1,"Выручка","Окончание - " + ПреобразоватьВJSON(ВыходныеПараметры));
	
	Возврат Истина;
	
КонецФункции

Функция НапечататьОтчетБезГашения(ВыходныеПараметры)
	
	Ответ = Истина;
	Логирование(1,"Отчет без гашения","Начало");
	
	МассивСтрокДляПечати = Новый Массив;
	МассивСтрокДляПечати.Добавить("КАССОВЫЙ ОТЧЕТ X");
	МассивСтрокДляПечати.Добавить("------------------------------------------------");
	МассивСтрокДляПечати.Добавить("КАССА " + глПараметрыРМ.ККМ.КодСУП);
	НомерСмены = 0;
	НомерЧека = 0;
	ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека);
	МассивСтрокДляПечати.Добавить("СМЕНА " + НомерСмены);
	МассивСтрокДляПечати.Добавить("ДАТА " + формат(ТекущаяДата()));
	МассивСтрокДляПечати.Добавить("КАССИР " + глПользователь);
	
	Запрос = Новый Запрос;
	// Приход
	номерСмены = 0;
	НомерЧека = 0;
	ПолучитьНомерСменыНомерЧека(НомерСмены,НомерЧека);
	СуммаНал = 0;
	СуммаБНал = 0;
	КолПриход = 0;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ПротоколРасчетовПротокол.ВариантОплаты = ЗНАЧЕНИЕ(Справочник.ВариантыОплаты.Наличные)
	               |					ТОГДА ПротоколРасчетовПротокол.СуммаФакт
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК Нал,
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ПротоколРасчетовПротокол.ВариантОплаты = ЗНАЧЕНИЕ(Справочник.ВариантыОплаты.Карта)
	               |					ТОГДА ПротоколРасчетовПротокол.СуммаФакт
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК БНал,
	               |	ЕСТЬNULL(СУММА(1), 0) КАК Кол
	               |ИЗ
	               |	Документ.ПротоколРасчетов.Протокол КАК ПротоколРасчетовПротокол
	               |ГДЕ
	               |	ПротоколРасчетовПротокол.Ссылка.Заказ.НомерСмены = &НомерСмены
	               |	И ПротоколРасчетовПротокол.Ссылка.Заказ.РабочееМесто = &РабочееМесто
	               |	И ПротоколРасчетовПротокол.Ссылка.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
	               |	И ПротоколРасчетовПротокол.Ссылка.Заказ ССЫЛКА Документ.Заказ";
	Запрос.УстановитьПараметр("НомерСмены",номерСмены);
	Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаНал = СуммаНал + Выборка.нал;
		СуммаБНал = СуммаБНал + Выборка.БНал;
		КолПриход = КолПриход + Выборка.Кол;
	КонецЦикла;
	СуммаПриход = СуммаНал + СуммаБНал;
	СуммаПриходНал = СуммаНал;
	СуммаПриходФ = Формат(СуммаПриход,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СуммаНал = Формат(СуммаНал,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СуммаБНал = Формат(СуммаБНал,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СтрПриход = "ПРИХОД";
	Пока СтрДлина(СтрПриход) < 47 - СтрДлина(СуммаПриходФ) Цикл
		СтрПриход = СтрПриход + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрПриход + "=" + СуммаПриходФ);
	СтрНал = " Наличными";
	Пока СтрДлина(СтрНал) < 47 - СтрДлина(СуммаНал) Цикл
		СтрНал = СтрНал + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрНал + "=" + СуммаНал);
	СтрБНал = " Электронными";
	Пока СтрДлина(СтрБНал) < 48 - СтрДлина(СуммаБНал) Цикл
		СтрБНал = СтрБНал + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрБНал + "=" + СуммаБНал);
	                               
	МассивСтрокДляПечати.Добавить("----------------------------------------------");
	
	// Возврат
	СуммаНал = 0;
	СуммаБНал = 0;
	КолВозврат = 0;
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ССЫЛКА Документ.Заказ","ССЫЛКА Документ.Возврат");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаНал = СуммаНал + Выборка.нал;
		СуммаБНал = СуммаБНал + Выборка.БНал;
		КолВозврат = КолВозврат + Выборка.Кол;
	КонецЦикла;
	СуммаВозврат = СуммаНал + СуммаБНал;
	СуммаВозвратНал = СуммаНал;
	СуммаВозвратФ = Формат(СуммаВозврат,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СуммаНал = Формат(СуммаНал,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СуммаБНал = Формат(СуммаБНал,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СтрВозврат = "ВОЗВРАТ";
	Пока СтрДлина(СтрВозврат) < 47 - СтрДлина(СуммаВозвратФ) Цикл
		СтрВозврат = СтрВозврат + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрВозврат + "=" + СуммаВозвратФ);
	СтрНал = " Наличными";
	Пока СтрДлина(СтрНал) < 47 - СтрДлина(СуммаНал) Цикл
		СтрНал = СтрНал + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрНал + "=" + СуммаНал);
	СтрБНал = " Электронными";
	Пока СтрДлина(СтрБНал) < 47 - СтрДлина(СуммаБНал) Цикл
		СтрБНал = СтрБНал + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрБНал + "=" + СуммаБНал);
	
	МассивСтрокДляПечати.Добавить("----------------------------------------------");
	
	// внесение выплата
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ДенежныеОперации.Регистратор ССЫЛКА Документ.Касса_Внесение
	               |					ТОГДА ДенежныеОперации.Сумма
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК Внесение,
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ДенежныеОперации.Регистратор ССЫЛКА Документ.Касса_Изъятие
	               |					ТОГДА ДенежныеОперации.Сумма
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК Выплата,
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ДенежныеОперации.Регистратор ССЫЛКА Документ.Касса_Внесение
	               |					ТОГДА 1
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК КолВнесение,
	               |	ЕСТЬNULL(СУММА(ВЫБОР
	               |				КОГДА ДенежныеОперации.Регистратор ССЫЛКА Документ.Касса_Изъятие
	               |					ТОГДА 1
	               |				ИНАЧЕ 0
	               |			КОНЕЦ), 0) КАК КолВыплата
	               |ИЗ
	               |	РегистрНакопления.ДенежныеОперации КАК ДенежныеОперации
	               |ГДЕ
	               |	ДенежныеОперации.РабочееМесто = &РабочееМесто
	               |	И ДенежныеОперации.Период МЕЖДУ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ) И ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), СЕКУНДА, 1)";
	СуммаВнесение = 0;
	СуммаВыплата = 0;
	КолВнесение = 0;
	КолВыплата = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СуммаВнесение = СуммаВнесение + Выборка.Внесение;
		СуммаВыплата = СуммаВыплата + Выборка.Выплата;
		КолВнесение = КолВнесение + Выборка.КолВнесение;
		КолВыплата = КолВыплата + Выборка.КолВыплата;
	КонецЦикла;
	СуммаВнесение = ?(СуммаВнесение < 0, -1*СуммаВнесение,СуммаВнесение);
	СуммаВыплата = ?(СуммаВыплата < 0, -1*СуммаВыплата,СуммаВыплата);
	СуммаВнесениеФ = Формат(СуммаВнесение,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СуммаВыплатаФ = Формат(СуммаВыплата,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СтрВнесения = "ВНЕСЕНИЕ";
	Пока СтрДлина(СтрВнесения) < 47 - СтрДлина(СуммаВнесениеФ) Цикл
		СтрВнесения = СтрВнесения + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрВнесения + "=" + СуммаВнесениеФ);
	СтрВыплата = "ВЫПЛАТА";
	Пока СтрДлина(СтрВыплата) < 47 - СтрДлина(СуммаВыплатаФ) Цикл
		СтрВыплата = СтрВыплата + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрВыплата + "=" + СуммаВыплатаФ);

	МассивСтрокДляПечати.Добавить("----------------------------------------------");
	
	// количество приход расход
	
	КолПриходФ = Формат(КолПриход,"ЧЦ=4; ЧН=0; ЧГ=0");
	КолВозвратФ = Формат(КолВозврат,"ЧЦ=4; ЧН=0; ЧГ=0");
	МассивСтрокДляПечати.Добавить("ПРИХОДЫ:");
	СтрПриходКол = " ПРИХОД";
	Пока СтрДлина(СтрПриходКол) < 48 - СтрДлина(КолПриходФ) Цикл
		СтрПриходКол = СтрПриходКол + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрПриходКол + КолПриходФ);
	СтрВозвратКол = " ВОЗВРАТ";
	Пока СтрДлина(СтрВозвратКол) < 48 - СтрДлина(КолВозвратФ) Цикл
		СтрВозвратКол = СтрВозвратКол + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрВозвратКол + КолВозвратФ);

	МассивСтрокДляПечати.Добавить("----------------------------------------------");

	// Количество внесений выплат
	
	КолВнесениеФ = Формат(КолВнесение,"ЧЦ=4; ЧН=0; ЧГ=0");
	КолВыплатаФ = Формат(КолВыплата,"ЧЦ=4; ЧН=0; ЧГ=0");
	СтрВнесенийКол = "ВНЕСЕНИЙ";
	Пока СтрДлина(СтрВнесенийКол) < 48 - СтрДлина(КолВнесениеФ) Цикл
		СтрВнесенийКол = СтрВнесенийКол + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрВнесенийКол + КолВнесениеФ);
	СтрВыплатКол = "ВЫПЛАТ";
	Пока СтрДлина(СтрВыплатКол) < 48 - СтрДлина(КолВыплатаФ) Цикл
		СтрВыплатКол = СтрВыплатКол + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрВыплатКол + КолВыплатаФ);

	МассивСтрокДляПечати.Добавить("----------------------------------------------");
	
	МассивСтрокДляПечати.Добавить("НАЛИЧНОСТЬ");
	СуммаНаличность = СуммаВнесение - СуммаВыплата + СуммаПриходНал - СуммаВозвратНал;
	СуммаНаличностьФ = Формат(СуммаНаличность,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СтрСуммаНаличность = "";
	Пока СтрДлина(СтрСуммаНаличность) < 47 - СтрДлина(СуммаНаличностьФ) Цикл
		СтрСуммаНаличность = СтрСуммаНаличность + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрСуммаНаличность + "=" + СуммаНаличностьФ);
	СуммаВыручка = СуммаПриход - СуммаВозврат;
	СуммаВыручки = СуммаВыручка;
	СуммаВыручка = Формат(СуммаВыручка,"ЧДЦ=2; ЧН=0,00; ЧГ=0");
	СтрВыручка = "ВЫРУЧКА";
	Пока СтрДлина(СтрВыручка) < 47 - СтрДлина(СуммаВыручка) Цикл
		СтрВыручка = СтрВыручка + " ";
	КонецЦикла;
	МассивСтрокДляПечати.Добавить(СтрВыручка + "=" + СуммаВыручка);
	
	МассивСтрокДляПечати.Добавить("ПОДПИСЬ");
	
	ВхПар = Новый Структура;
	ВхПар.Вставить("Строки",МассивСтрокДляПечати);
	Вхпар.Вставить("ТипШрифта",0);
	Ответ = ПечатьТекста(ВхПар,ВыходныеПараметры);

	
	Возврат Ответ;
КонецФункции

Функция КопияПоследнегоЧека(ВыходныеПараметры)
	Логирование(1,"Копия последнего чека","начало");
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ФункцииРаботыСОборудованием

Функция ПРТ_ДобавитьУстройство()
	Если DRV.PortOpen =  1 ТОгда
		DRV.PortOpen = 0;
	КонецЕсли;
	Возврат DRV.PortOpen <> 1;
КонецФункции

Функция ПРТ_Подключить(Модель,ПортНомер,Скорость)
	Ответ = 0;
	
   Попытка
        DRV.CommPort = ПортНомер;             // Номер порта
        DRV.Settings = "19200,N,8,1";      // Параметры порта
        DRV.PortOpen = 1;                     // Открываем порт
		DRV.inputMode = 1;                    // Режим вывода данных
	Исключение
		Возврат -99;
	КонецПопытки;
	
	
	//Команда = ПРТ_ПолучитьКоманду(Модель,"ВыборУстройства");
	//ПРТ_ОтправитьВПорт(Команда);
	//Команда = ПРТ_ПолучитьКоманду(Модель,"Инициализация");
	//ПРТ_ОтправитьВПорт(Команда);
	Команда = ПРТ_ПолучитьКоманду(Модель,"КодоваяСтраницаРус");
	ПРТ_ОтправитьВПорт(Команда);
	Ответ = ПРТ_Статус(Модель);
	
	Возврат Ответ;
	
КонецФункции

Функция ПРТ_Статус(Модель)
	Команда = ПРТ_ПолучитьКоманду(Модель,"Статус");
	ПРТ_ОтправитьВПорт(Команда);
	Данные = ПРТ_ПрочитатьИзПорта(4);
	Если ТипЗнч(Данные) <> Тип("Массив") Тогда
		Возврат -100;
	КонецЕсли;
	Байт1 = DecToAny(Данные[0]);
	Байт2 = DecToAny(Данные[1]);
	Байт3 = DecToAny(Данные[2]);
	Байт4 = DecToAny(Данные[3]);
	//Крышка
	Если Число(Сред(Байт2,6,1)) <> 0 Тогда
		Возврат -1;
	КонецЕсли;
	//Ошибка 
	Если Число(Сред(Байт2,2,1)) <> 0 Тогда
		Возврат -2;
	КонецЕсли;
	//Механика 
	Если Число(Сред(Байт3,6,1)) <> 0 тогда
		Возврат -3;
	КонецЕсли;
	//Автоотрезчик
	Если Число(Сред(Байт3,5,1)) <> 0 тогда
		Возврат -4;
	КонецЕсли;
	//Перегрев 
	Если Число(Сред(Байт3,2,1)) <> 0 ТОгда
		Возврат -5;
	КонецЕсли;
	Ош = Число(Сред(Байт4,2,1)) + Число(Сред(Байт4,3,1)) + Число(Сред(Байт4,5,1)) + Число(Сред(Байт4,6,1));
	//НетБумаги 
	Если Ош > 0 Тогда
		Возврат -6;
	КонецЕсли;
	Возврат 0;
КонецФункции

Процедура ПРТ_ОтправитьВПорт(Данные)
	Пока DRV.OutBufferCount > 0 Цикл
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	DRV.Output = Данные;
КонецПроцедуры

Функция ПРТ_ПрочитатьИзПорта(Кол = 1)
	к = 0;
	ВремяНачала = ТекущаяДата();
	попыткаСвязи = 1;
	ТаймаутОпроса = 5;
	Если ПараметрыТО.Свойство("ТаймаутОпроса") Тогда
		ТаймаутОпроса = ПараметрыТО.ТаймаутОпроса;
	КонецЕсли;
	Пока DRV.InBufferCount < Кол Цикл
 		//:ирПлатформа = Обработки.ирПлатформа.Создать();
		//ирПлатформа.Sleep(0.001);
		//ОбработкаПрерыванияПользователя();
		
		Если ТекущаяДата() - ВремяНачала >= ТаймаутОпроса*попыткаСвязи Тогда
			Если попыткаСвязи > 1 тогда
				Попытка 
					Обработка = ИнтерфейсРМ.ПолучитьОбъектОбработки("Обслуживание_ФР_Атол326");
					Форма = Обработка.ПолучитьФорму("Ожидание");
					Форма.ЭлементыФормы.Текст1.Заголовок = "Установка связи с ККМ";
					Форма.ЭлементыФормы.Текст2.Заголовок = попыткаСвязи;
					Форма.Открыть();
				исключение
				КонецПопытки;
			КонецЕсли;
			попыткаСвязи = попыткаСвязи + 1;
			Если попыткаСвязи % 2 = 0 Тогда
				Команда = ПРТ_ПолучитьКоманду(ПараметрыТО.model,"Статус");
				ПРТ_ОтправитьВПорт(Команда);
			КонецЕсли;
		КонецЕсли;		
		Если попыткаСвязи >= 5 Тогда
			Если Форма.Открыта() тогда
				Форма.Закрыть();
			КонецЕсли;
			Обработка = Неопределено;
			Форма = Неопределено;
			Возврат Неопределено;
		КонецЕсли;
		к = к + 1;
		Если к > 16777216 Тогда
			Возврат Неопределено;
		КонецЕсли;
		//Если ТекущаяДата() - ВремяНачала >= 2 Тогда//10 ТОгда
		//	Команда = ПРТ_ПолучитьКоманду(ПараметрыТО.model,"Статус");
		//	ПРТ_ОтправитьВПорт(Команда);
		//КонецЕсли;
		//Если ТекущаяДата() - ВремяНачала >= 4 Тогда //20 ТОгда
		//	Возврат Неопределено;
		//КонецЕсли;
		//ирКэш.Получить().Sleep(0.03); // 30 мс
	КонецЦикла;
	Данные = DRV.Input;
	Данные = Данные.Выгрузить();
	Возврат Данные;
КонецФункции

Функция ПРТ_ПолучитьКоманду(Модель,Команда)
	//Логирование(0,"ПолучитьКомандуПРТ",Команда);
	ВыхКоманда = ПРТ_ПолучитьКомандуТекст(Модель,Команда);
	//Логирование(0,"ПолучитьКомандуПРТ выход ",ВыхКоманда);
	СтрКоманды = СтрЗаменить(ВыхКоманда,";",Символы.ПС);
	ВыхКоманда = "";
	Для к = 1 по СтрЧислоСтрок(СтрКоманды) Цикл
		ВыхКоманда = ВыхКоманда + Знак(Число(СтрПолучитьСтроку(СтрКоманды,к)));
	КонецЦикла;
	Возврат ВыхКоманда;
КонецФункции

Функция ПРТ_ПолучитьКомандуТекст(Модель,Команда)
	//Логирование(0,"ПолучитьКомандуПРТ",Команда);
	Отбор = Новый Структура;
	Отбор.Вставить("ИдМодели",Модель);
	Отбор.Вставить("ИмяКоманды",Команда);
	СтрТабл = ТаблицаПараметрыСтроки.НайтиСтроки(Отбор);
	Если СтрТабл.Количество() <> 1 Тогда
		Возврат Знак(0);
	КонецЕсли;
	//Логирование(0,"ПолучитьКомандуПРТ выход ",СтрТабл[0].Команда);
	Возврат СтрТабл[0].Команда;
КонецФункции

Функция ПРТ_ОписаниеОшибки(КодОш)
	Возврат СписокОшибок.Получить(КодОш);
КонецФункции

Функция ПРТ_ПечатьСтроки(Строка)
	Строка = Перекодировка(Строка);
	ПРТ_ОтправитьВПорт(Строка);
	//Для к = 1 по СтрДлина(Строка) Цикл
	//	ПРТ_ОтправитьВПорт(Знак(Сред(Строка,к,1)));
	//КонецЦикла;
	ПРТ_ОтправитьВПорт(Знак(10));
	Возврат 0;//ПРТ_Статус(ПараметрыТО.Model);
КонецФункции

Функция ПРТ_ПечатьКлише()
	Команда = ПРТ_ПолучитьКоманду(ПараметрыТО.model,"Шрифт0");
	ПРТ_ОтправитьВПорт(Команда);
	Команда = ПРТ_ПолучитьКоманду(ПараметрыТО.model,"ВыравниваниеЦентр");
	ПРТ_ОтправитьВПорт(Команда);
	СтрокКлише = ПРТ_ПолучитьКомандуТекст(ПараметрыТО.Model,"СтрокКлише");
	к = 1;
	ОтрезкаБыла = Ложь;
	Для каждого эл из СтрокиКлише Цикл
		Строка = СокрЛП(Эл.Значение);
		Ответ = ПРТ_ПечатьСтроки(Строка);
		Если Ответ <> 0 Тогда
			Возврат Ответ;
		КонецЕсли;
		Если к = Число(СтрокКлише) Тогда
			Команда = ПРТ_ПолучитьКоманду(ПараметрыТО.Model,"Отрезка");
			ПРТ_ОтправитьВПорт(Команда);
			ОтрезкаБыла = Истина;
			Прервать;
		КонецЕсли;
		к = к + 1;
	КонецЦикла;
	Если Не ОтрезкаБыла Тогда
		Команда = ПРТ_ПолучитьКоманду(ПараметрыТО.Model,"Отрезка");
		ПРТ_ОтправитьВПорт(Команда);
	КонецЕсли;
	Команда = ПРТ_ПолучитьКоманду(ПараметрыТО.model,"ВыравниваниеЛево");
	ПРТ_ОтправитьВПорт(Команда);
	Возврат ПРТ_Статус(ПараметрыТО.Model);	
КонецФункции

Процедура ПРТ_ПечатьШК(Модель,ТипШК,ВремШтрихКод)
	Если ТипШК = "EAN13" или ТипШК = "EAN8" Тогда
		// Установим выравние по центру
		Команда = ПРТ_ПолучитьКоманду(Модель,"ВыравниваниеЦентр");
		ПРТ_ОтправитьВПорт(Команда);
		
		Команда = ПРТ_ПолучитьКомандуТекст(Модель,ТипШК);
		КомандаДанных = "";
		Для к = 1 по СтрДлина(СокрЛП(ВремШтрихКод)) Цикл
			КомандаДанных = КомандаДанных + Asc(Сред(ВремШтрихКод,к,1)) + ";";
		КонецЦикла;
		Команда = СтрЗаменить(Команда,"Х;",КомандаДанных);
		ТекстКоманды = СтрЗаменить(Команда,";",Символы.ПС);
		Команда = "";
		Для к = 1 по СтрЧислоСтрок(ТекстКоманды) Цикл
			Команда = Команда + Знак(СтрПолучитьСтроку(ТекстКоманды,к));
		КонецЦикла;
		ПРТ_ОтправитьВПорт(Команда);
		// установим вырвнивание по Левому краю
		Команда = ПРТ_ПолучитьКоманду(Модель,"ВыравниваниеЛево");
		ПРТ_ОтправитьВПорт(Команда);
	ИначеЕсли ТипШК = "QR" Тогда
		// Установим выравние по центру
		Команда = ПРТ_ПолучитьКоманду(Модель,"ВыравниваниеЦентр");
		ПРТ_ОтправитьВПорт(Команда);
		
		Команда = ПРТ_ПолучитьКомандуТекст(Модель,ТипШК);
		КомандаДанных = "";
		КолвоДанных = СтрДлина(СокрЛП(ВремШтрихКод));
		//КомандаДанных = Перекодировка(ВремШтрихКод);
		КомандаДанных1 = "";
		Для к = 1 по КолвоДанных Цикл
			КомандаДанных1 = КомандаДанных1 + Asc(Сред(ВремШтрихКод,к,1)) + ";";
		КонецЦикла;
		Команда = СтрЗаменить(Команда,"Х","4");
		ДлинаHEX = DecToAny(КолвоДанных+3,16);
		ДлинаHEX = Прав("0000" + ДлинаHEX,4);
		ДлинаHEX1 = AnyToDec(Лев(ДлинаHEX,2),16);
		ДлинаHEX2 = AnyToDec(Прав(ДлинаHEX,2),16);
		Команда = СтрЗаменить(Команда,"Л",ДлинаHEX2);
		Команда = СтрЗаменить(Команда,"Н",ДлинаHEX1);
		Команда = СтрЗаменить(Команда,"Д;",КомандаДанных1);
		ТекстКоманды = СтрЗаменить(Команда,";",Символы.ПС);
		Команда = "";
		Для к = 1 по СтрЧислоСтрок(ТекстКоманды) Цикл
			Команда = Команда + Знак(СтрПолучитьСтроку(ТекстКоманды,к));
		КонецЦикла;
		Логирование(0,"ШК",Команда);
		Логирование(0,"ШК",ТекстКоманды);
		ПРТ_ОтправитьВПорт(Команда);
		// установим вырвнивание по Левому краю
		Команда = ПРТ_ПолучитьКоманду(Модель,"ВыравниваниеЛево");
		ПРТ_ОтправитьВПорт(Команда);
		// добавить проверку на печать ШК
	КонецЕсли;
КонецПроцедуры

Функция Перекодировка(Текст) 
	Имя = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(Имя,КодировкаТекста.OEM);
	ЗаписьТекста.Записать(Текст);
	ЗаписьТекста.Закрыть();
	
	Чтение = Новый ТекстовыйДокумент;
	Чтение.Прочитать(Имя, "windows-1251");
	Результат1 = Чтение.ПолучитьТекст();
	
	
	Возврат Результат1;
КонецФункции

Функция Знак(Код)
	Возврат sc.eval("Chr("""+Код+""")");
КонецФункции

#КонецОбласти


#КонецЕсли

Результат = Новый Структура("Ошибка,Описание,Подробно,СменаНеОткрыта", Ложь,"","",Ложь);

ИгнорироватьОбщийПароль = Ложь;

УровеньЛогирования = 0;

СписокОшибок = Новый Соответствие;
СписокОшибок.Вставить(0,"Ошибок нет");
СписокОшибок.Вставить(-1,"Крышка открыта");
СписокОшибок.Вставить(-2,"Ошибка");
СписокОшибок.Вставить(-3,"Механическая неисправность");
СписокОшибок.Вставить(-4,"Ошибка отрезчика");
СписокОшибок.Вставить(-5,"Перегрев печатающей головки");
СписокОшибок.Вставить(-6,"Нет бумаги");
СписокОшибок.Вставить(-7,"Ошибка печати ШК");
СписокОшибок.Вставить(-99,"Ошибка открытия порта");
СписокОшибок.Вставить(-100,"Нет ответа от ККМ");

СтрокиКлише = Новый Соответствие;
СтрокиКлише.Вставить(1," ");
СтрокиКлише.Вставить(2," ");
СтрокиКлише.Вставить(3," ");
СтрокиКлише.Вставить(4," ");
СтрокиКлише.Вставить(5," ");
