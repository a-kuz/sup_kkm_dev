
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВсеСсылки;
Перем мБинарныеДанные;
Перем мЧисло;
Перем мСтрока;
Перем мДата;
Перем мБулево;
Перем мNull;

Перем мПредставленияСуффиксов;
Перем мПредставленияПолей;

Перем мКэшРеквизитов;
Перем мПсевдонимТаблицы;
Перем Скрипт Экспорт;
////////////////////////////////////////////////////////////////////////////////
// ГЛОБАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СоздатьПредставления() Экспорт 
	
	Если ПустаяСтрока(Сервер)
		Или ПустаяСтрока(БД)
		Или ПустаяСтрока(Пользователь)
		Или ПустаяСтрока(Пароль) Тогда 
		#Если Клиент Тогда 
		Сообщить("Необходимо заполнить параметры БД!");
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;
	
	Скрипт = СформироватьСкрипт();
	
	Если ПустаяСтрока(Скрипт) Тогда 
		#Если Клиент Тогда 
		Сообщить("Не удалось сформировтаь Script SQL!");
		#КонецЕсли
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		СерверSQL = Новый COMОбъект("ADODB.Connection");
		СерверSQL.ConnectionString =
			"Provider=SQLOLEDB;Data Source=" + Сервер + ";Initial Catalog=" +
			БД + ";Persist Security Info=True;User ID=" +
			Пользователь + ";Password=" + Пароль + ";MARS Connection=True;";
		//
		СерверSQL.Open();
		
		БазаSQL = Новый COMОбъект("ADODB.Command");
		БазаSQL.ActiveConnection = СерверSQL;
		
		Для Каждого ТекущийСкрипт Из Скрипт.Пакет Цикл 
			БазаSQL.CommandText = СокрЛП(ТекущийСкрипт);
			Попытка
				БазаSQL.Execute();
			Исключение
				Сообщить("Не удалось выполнить Script SQL
				|"+ТекущийСкрипт+"
				|, по причине: """ + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + """!");
			КонецПопытки;
		КонецЦикла;
		
		БазаSQL.ActiveConnection.Close();
		БазаSQL = Неопределено;
	Исключение
		#Если Клиент Тогда 
			Сообщить("Не удалось выполнить Script SQL, по причине: """ + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + """!");
		#КонецЕсли
		Возврат Ложь;
	КонецПопытки;
	Возврат ИСтина;
КонецФункции

Функция СформироватьСкрипт() Экспорт 
	
	Если ПустаяСтрока(Сервер)
		Или ПустаяСтрока(БД) Тогда 
		#Если Клиент Тогда 
		Сообщить("Необходимо заполнить параметры БД!");
		#КонецЕсли
		Возврат Новый Структура("Текст, Пакет", "", Новый Массив);
	КонецЕсли;
	
	ПакетСкриптов = Новый Массив;
	
	Если Не Объекты.Строки.Количество() Тогда 
		ОбновитьСписокОбъектов();
	КонецЕсли;
	
	Если мПсевдонимТаблицы = Неопределено Тогда 
		мПсевдонимТаблицы = "_" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "_");
	КонецЕсли;
	
	СтруктураХранения = ПолучитьСтруктуруХранения();
	Если Не СтруктураХранения.Количество() Тогда 
		Возврат Новый Структура("Текст, Пакет", "", Новый Массив);
	КонецЕсли;
	
	СформироватьПредставленияСуффиксов();
	СформироватьОтсутствующиеПредставленияПолей();
	
	мКэшРеквизитов = Новый Соответствие;
	
	//ТекущийСкрипт = ПолучитьМакет("СкриптУдаленияПредставлений").ПолучитьТекст();
	//ПакетСкриптов.Добавить(ТекущийСкрипт);
	
	Скрипт = "
	|USE " + БД + ";
	//|GO
	//|" + ТекущийСкрипт + "
	|GO
	|/*Создадим Представления.*/";
	
	Для Каждого ТекущаяТаблица Из СтруктураХранения Цикл 
		Если Найти(ТекущаяТаблица.ИмяТаблицыХранения, "RefSInf")
			Или Найти(ТекущаяТаблица.ИмяТаблицыХранения, "AccSInf")
			Или Найти(ТекущаяТаблица.ИмяТаблицыХранения, "ChngR")
			Или Найти(ТекущаяТаблица.ИмяТаблицыХранения, "AccumRg") 
			Или Найти(ТекущаяТаблица.ИмяТаблицыХранения, "InfoRgS") Тогда 
			Продолжить;
		КонецЕсли;
		
		ОбновитьКэшРеквизитов(ТекущаяТаблица);
		
		ПоляПредставления = "";
		ПоляВыборки       = "";
		
		ДобавитьПоля(ТекущаяТаблица, ПоляПредставления, ПоляВыборки);
		
		Если ПустаяСтрока(ТекущаяТаблица.ИмяТаблицы) Тогда 
			ИмяТаблицы = СтрЗаменить(ТекущаяТаблица.Метаданные, ".", "_") + "_" + ТекущаяТаблица.Назначение;
		Иначе
			ИмяТаблицы = СтрЗаменить(ТекущаяТаблица.ИмяТаблицы, ".", "_");
		КонецЕсли;
		
		Суффикс = "";
		Если Найти(ТекущаяТаблица.ИмяТаблицыХранения, "AccumRgAggOpt") Тогда 
			Суффикс = СокрЛП(СтрЗаменить(ТекущаяТаблица.ИмяТаблицыХранения, "AccumRgAggOpt", ""));
		ИначеЕсли Найти(ТекущаяТаблица.ИмяТаблицыХранения, "AccumRgAggDims") Тогда 
			Суффикс = СокрЛП(СтрЗаменить(ТекущаяТаблица.ИмяТаблицыХранения, "AccumRgAggDims", ""));
		ИначеЕсли Найти(ТекущаяТаблица.ИмяТаблицыХранения, "AccumRgAggGrid") Тогда 
			Суффикс = СокрЛП(СтрЗаменить(ТекущаяТаблица.ИмяТаблицыХранения, "AccumRgAggGrid", ""));
		ИначеЕсли Найти(ТекущаяТаблица.ИмяТаблицыХранения, "AccumRgAgg") Тогда 
			Суффикс = СокрЛП(СтрЗаменить(ТекущаяТаблица.ИмяТаблицыХранения, "AccumRgAgg", ""));
		КонецЕсли;
		
		ТекущийСкрипт = "
		|CREATE VIEW " + ИмяТаблицы + Суффикс + "
		|	(" + ПоляПредставления + ")
		|AS
		|SELECT" + ПоляВыборки + "
		|FROM
		|	dbo._" + СтрЗаменить(ТекущаяТаблица.ИмяТаблицыХранения, ".", "_") + ";";
		
		ТекущийСкрипт = "IF OBJECT_ID('" + ИмяТаблицы + Суффикс + "') IS NULL
		|	EXECUTE('
		|" + ТекущийСкрипт + "')
		|ELSE 
		|	EXECUTE ('" + СтрЗаменить(ТекущийСкрипт, "CREATE VIEW", "ALTER VIEW") + "')";
		ПакетСкриптов.Добавить(ТекущийСкрипт);
		
		//Скрипт = Скрипт + ТекущийСкрипт + "
		//|GO";
		//
	КонецЦикла;
	ТекущийСкрипт = "
	|IF OBJECT_ID('dbo.v_Storno') IS NOT NULL DROP VIEW dbo.v_Storno";
	ТекущийСкрипт = "
	|IF OBJECT_ID('dbo.v_Storno') IS NOT NULL DROP VIEW dbo.v_Storno";
	ПакетСкриптов.Добавить(ТекущийСкрипт);
	ТекущийСкрипт = "
	|CREATE VIEW dbo.v_Storno
	|AS
	|SELECT
	|  ИдСтроки AS id
	| ,1 AS check_type
	| ,сто.КодСУП kkm_code
	| ,CAST(Заказ.НомерЧека AS INTEGER) check_number
	| ,CAST(Заказ.Номер AS CHAR(17)) order_number
	| ,CAST(CONVERT(NCHAR(8),  DATEADD(YEAR,0,Заказ.Дата), 112) AS INTEGER) keyYYYYMMDD
	| ,REPLACE(CONVERT(NCHAR(5), Заказ.Дата, 114), ':', '') keyHHMM
	| ,CAST(спрТовары.КодСУП AS INTEGER) tov_code
	| ,CAST(КоличествоУдалено AS MONEY) storno_kol
	| ,CAST(Цена AS MONEY) storno_price
	| ,CAST(Цена * КоличествоУдалено AS MONEY) storno_sum
	| ,CAST(Заказ.НомерСмены AS INTEGER) check_smena
	| ,Сотрудники.КодДоступа kassir_code
	|FROM dbo.Документ_Заказ_Товары ЗаказТовары
	|JOIN Документ_Заказ Заказ
	|  ON ЗаказТовары.Ссылка = Заказ.Ссылка
	|JOIN Справочник_ТорговоеОборудование сто
	|  ON Заказ.ККМрабочегоМеста = сто.Ссылка
	|JOIN Справочник_Товары спрТовары
	|  ON ЗаказТовары.Товар = спрТовары.Ссылка
	|JOIN Справочник_Сотрудники Сотрудники
	|  ON ЗаказТовары.Автор = Сотрудники.Ссылка
	|WHERE КоличествоУдалено > 0
	|UNION
	|  SELECT
	|  ИдСтроки AS id
	| ,2 AS check_type
	| ,сто.КодСУП kkm_code
	| ,CAST(Возврат.НомерЧека AS INTEGER) check_number
	| ,CAST(Возврат.Номер AS CHAR(17)) order_number
	| ,CAST(CONVERT(NCHAR(8), Возврат.Дата, 112) AS INTEGER) keyYYYYMMDD
	| ,REPLACE(CONVERT(NCHAR(5), DATEADD(YEAR,0,Возврат.Дата), 114), ':', '') keyHHMM
	| ,CAST(спрТовары.КодСУП AS INTEGER) tov_code
	| ,CAST(КоличествоУдалено AS MONEY) storno_kol
	| ,CAST(Цена AS MONEY) storno_price                                                                                              
	| ,CAST(Цена * КоличествоУдалено AS MONEY) storno_sum
	| ,CAST(Возврат.НомерСмены AS INTEGER) check_smena
	| ,Сотрудники.КодДоступа kassir_code
	|FROM dbo.Документ_Возврат_Товары ВозвратТовары
	|JOIN Документ_Возврат Возврат
	|  ON ВозвратТовары.Ссылка = Возврат.Ссылка
	|JOIN Справочник_ТорговоеОборудование сто
	|  ON Возврат.ККМрабочегоМеста = сто.Ссылка
	|JOIN Справочник_Товары спрТовары
	|  ON ВозвратТовары.Товар = спрТовары.Ссылка
	|JOIN Справочник_Сотрудники Сотрудники
	|  ON ВозвратТовары.Автор = Сотрудники.Ссылка
	|WHERE КоличествоУдалено > 0
	|";
	ПакетСкриптов.Добавить(ТекущийСкрипт);
	Возврат Новый Структура("Текст, Пакет", СокрЛП(Скрипт), ПакетСкриптов);	
КонецФункции

Процедура ОбновитьСписокОбъектов() Экспорт 
	
	Классы = Новый СписокЗначений;
	Если Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13 Тогда 
		Классы.Добавить("Константы",           "Константы");
	КонецЕсли;
	Классы.Добавить("Справочники",             "Справочники");
	Классы.Добавить("Документы",               "Документы");
	Классы.Добавить("ЖурналыДокументов",       "Журналы документов");
	Классы.Добавить("Перечисления",            "Перечисления");
	Классы.Добавить("ПланыОбмена",             "Планы обмена");
	Классы.Добавить("ПланыВидовХарактеристик", "Планы видов характеристик");
	Классы.Добавить("ПланыСчетов",             "Планы счетов");
	Классы.Добавить("ПланыВидовРасчета",       "Планы видов расчета");
	Классы.Добавить("РегистрыСведений",        "Регистры сведений");
	Классы.Добавить("РегистрыНакопления",      "Регистры накопления");
	Классы.Добавить("РегистрыБухгалтерии",     "Регистры бухгалтерии");
	Классы.Добавить("РегистрыРасчета",         "Регистры расчета");
	Классы.Добавить("БизнесПроцессы",          "Бизнес процессы");
	Классы.Добавить("Задачи",                  "Задачи");
	
	ОписаниеТиповСтрока250 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(250));
	
	Объекты.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	Объекты.Колонки.Добавить("Имя",     ОписаниеТиповСтрока250);
	Объекты.Колонки.Добавить("Синоним", ОписаниеТиповСтрока250);
	
	Объекты.Строки.Очистить();
	Для Каждого ЭлементСписка Из Классы Цикл 
		ДанныеКласса = Объекты.Строки.Добавить();
		ДанныеКласса.Пометка = Истина;
		ДанныеКласса.Имя     = ЭлементСписка.Значение;
		ДанныеКласса.Синоним = ЭлементСписка.Представление;
		
		Для Каждого ОбъектМетаданных Из Метаданные[ЭлементСписка.Значение] Цикл 
			ДанныеОбъекта = ДанныеКласса.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, ОбъектМетаданных);
			ДанныеОбъекта.Пометка = Истина;
		КонецЦикла;
		
		ДанныеКласса.Строки.Сортировать("Синоним");
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедуры и функции формирования скрипта.

Функция ПолучитьСтруктуруХранения()
	
	МассивОбъектов = Новый Массив;
	
	Для Каждого ДанныеКласса Из Объекты.Строки Цикл 
		Для Каждого ДанныеОбъекта Из ДанныеКласса.Строки Цикл 
			Если Не ДанныеОбъекта.Пометка Тогда 
				Продолжить;
			КонецЕсли;
			
			МассивОбъектов.Добавить(Метаданные[ДанныеКласса.Имя][ДанныеОбъекта.Имя]);
		КонецЦикла;
	КонецЦикла;
	
	Если МассивОбъектов.Количество() Тогда 
		Возврат ПолучитьСтруктуруХраненияБазыДанных(МассивОбъектов);
	Иначе
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьПредставленияСуффиксов()
	
	мПредставленияСуффиксов = Новый Соответствие;
	мПредставленияСуффиксов.Вставить("_TYPE",  "_Тип");
	мПредставленияСуффиксов.Вставить("_RTRef", "_ТипСсылки");
	мПредставленияСуффиксов.Вставить("_RRRef", "_Ссылка");
	мПредставленияСуффиксов.Вставить("TRef",   "_ТипСсылки");
	мПредставленияСуффиксов.Вставить("RRef",   "_Ссылка");
	мПредставленияСуффиксов.Вставить("_B",     "_БинарныеДанные");
	мПредставленияСуффиксов.Вставить("_N",     "_Число");
	мПредставленияСуффиксов.Вставить("_S",     "_Строка");
	мПредставленияСуффиксов.Вставить("_T",     "_Дата");
	мПредставленияСуффиксов.Вставить("_L",     "_Булево");
	
КонецПроцедуры

Процедура СформироватьОтсутствующиеПредставленияПолей()
	
	мПредставленияПолей = Новый Соответствие;
	
	// Поля таблицы регистрации.
	мПредставленияПолей.Вставить("Node",      "Узел");
	мПредставленияПолей.Вставить("MessageNo", "НомерСообщения");
	мПредставленияПолей.Вставить("ID",        "Ссылка");
	
	// Поля таблицы константы.
	мПредставленияПолей.Вставить("RecordKey",    "КлючЗаписи");
	мПредставленияПолей.Вставить("ConstID",      "Ссылка");
	
	// Поля таблицы документа.
	мПредставленияПолей.Вставить("NumberPrefix", "ПрефиксНомера");
	
	// Поля таблицы плана видов расчета.
	мПредставленияПолей.Вставить("CKRef",       "Ссылка");
	мПредставленияПолей.Вставить("DisplNumber", "ПорядковыйНомер");
	
	// Поля таблицы регистра сведений.
	мПредставленияПолей.Вставить("Recorder", "Регистратор");
	
	// Поля таблицы регистра накоплений.
	мПредставленияПолей.Вставить("Period",      "Период");
	мПредставленияПолей.Вставить("Splitter",    "РазделительИтогов");
	мПредставленияПолей.Вставить("UseSplitter", "ИспользоватьРазделительИтогов");
	мПредставленияПолей.Вставить("PrdBeg",      "ДатаНачала");
	мПредставленияПолей.Вставить("PrdEnd",      "ДатаОкончания");
	мПредставленияПолей.Вставить("Use",         "Использование");
	мПредставленияПолей.Вставить("Level",       "Уровень");
	мПредставленияПолей.Вставить("Version",     "Версия");
	
	// Поля таблицы регистра бухгалтерии.
	мПредставленияПолей.Вставить("Account",    "Счет");
	мПредставленияПолей.Вставить("LineNo",     "НомерСтроки");
	мПредставленияПолей.Вставить("Kind",       "ВидСубконто");
	мПредставленияПолей.Вставить("Correspond", "ВидДвижения");
	
	// Поля таблицы регистра расчета.
	мПредставленияПолей.Вставить("APDateFrom", "ПериодДействияНачало");
	мПредставленияПолей.Вставить("APDateTill", "ПериодДействияКонец");
	
	// Поля таблицы бизнес-процесса.
	мПредставленияПолей.Вставить("RoutePointOrder", "НомерТочкиМаршрута");
	
КонецПроцедуры

Процедура ОбновитьКэшРеквизитов(Таблица)
	
	Если мКэшРеквизитов.Получить(Таблица.Метаданные) <> Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы = ?(ПустаяСтрока(Таблица.ИмяТаблицы) Или Таблица.Назначение = "РегистрацияИзменений", Таблица.Метаданные, Таблица.ИмяТаблицы);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	" + мПсевдонимТаблицы + ".*
	|ИЗ
	|	" + ИмяТаблицы + " КАК " + мПсевдонимТаблицы + "
	|ГДЕ
	|	ЛОЖЬ";
	
	Если Найти(Таблица.Метаданные, "РегистрБухгалтерии.") Тогда 
		МетаданныеОбъекта = Метаданные.РегистрыБухгалтерии[СтрПолучитьСтроку(СтрЗаменить(Таблица.Метаданные, ".", Символы.ПС), 2)];
		Если МетаданныеОбъекта.ПланСчетов.МаксКоличествоСубконто Тогда 
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	" + (мПсевдонимТаблицы + "_1") + ".*,
			|	" + (мПсевдонимТаблицы + "_2") + ".*
			|ИЗ
			|	" + ИмяТаблицы + " КАК " + (мПсевдонимТаблицы + "_1") + "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + ИмяТаблицы + ".Субконто КАК " + (мПсевдонимТаблицы + "_2") + "
			|		ПО ИСТИНА
			|ГДЕ
			|	ЛОЖЬ";
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	мКэшРеквизитов.Вставить(Таблица.Метаданные, Запрос.Выполнить().Колонки);
	
КонецПроцедуры

Процедура ДобавитьПоля(Таблица, ПоляПредставления, ПоляВыборки)
	
	ЭтоРегистрБухгалтерии = Найти(Таблица.Метаданные, "РегистрБухгалтерии.");
	
	Реквизиты = мКэшРеквизитов.Получить(Таблица.Метаданные);
	
	Если Таблица.Назначение = "ТабличнаяЧасть" Тогда 
		ПоляПредставления = "Ссылка, КлючЗаписи";
		
		ПоляВыборки = "
		|	_" + СтрПолучитьСтроку(СтрЗаменить(Таблица.ИмяТаблицыХранения, ".", Символы.ПС), 1) + "_IDRRef,
		|	_KeyField";
	КонецЕсли;
	
	Для Каждого ТекущееПоле Из Таблица.Поля Цикл 
		Если Таблица.Назначение = "ИтогиМеждуСчетами"
			И Найти(ТекущееПоле.ИмяПоляХранения, "Fld")
			И (Найти(ТекущееПоле.ИмяПоляХранения, "Dt") Или Найти(ТекущееПоле.ИмяПоляХранения, "Ct"))
			И ПустаяСтрока(ТекущееПоле.ИмяПоля) Тогда 
			Продолжить; // Исключим поле.
		КонецЕсли;
		
		// Получим имя поля.
		ИмяПоля = Неопределено;
		Если ЭтоРегистрБухгалтерии Тогда 
			Если Найти(ТекущееПоле.ИмяПоляХранения, "TurnoverDt") Тогда 
				ИмяПоля = ТекущееПоле.ИмяПоля + "ДтОборот"
			ИначеЕсли Найти(ТекущееПоле.ИмяПоляХранения, "TurnoverCt") Тогда 
				ИмяПоля = ТекущееПоле.ИмяПоля + "КтОборот"
			ИначеЕсли Найти(ТекущееПоле.ИмяПоляХранения, "Turnover") Тогда 
				ИмяПоля = ТекущееПоле.ИмяПоля + "Оборот"
			ИначеЕсли Найти(ТекущееПоле.ИмяПоляХранения, "Value") Тогда 
				ИмяПоля = "Значение";
			КонецЕсли;
		КонецЕсли;
		
		// Если предыдущие операторы не вернули имя поля.
		Если ИмяПоля = Неопределено Тогда 
			Если ПустаяСтрока(ТекущееПоле.ИмяПоля) Тогда 
				ИмяПоля = мПредставленияПолей.Получить(ТекущееПоле.ИмяПоляХранения);
				Если ИмяПоля = Неопределено Тогда 
					ИмяПоля = ТекущееПоле.ИмяПоляХранения;
				КонецЕсли;
			Иначе
				ИмяПоля = ТекущееПоле.ИмяПоля;
			КонецЕсли;
		КонецЕсли;
		
		// Определим типы поля.
		ТипыПоля = Неопределено;
		Если Реквизиты <> Неопределено Тогда 
			Если Найти(Таблица.Метаданные, "Константа.") И Найти(ТекущееПоле.ИмяПоляХранения, "Fld") Тогда 
				ИмяРеквизита = "Значение";
			Иначе
				ИмяРеквизита = ?(ПустаяСтрока(ТекущееПоле.ИмяПоля), ИмяПоля, ТекущееПоле.ИмяПоля);
			КонецЕсли;
			
			НайденныйРеквизит = Реквизиты.Найти(ИмяРеквизита);
			Если НайденныйРеквизит = Неопределено И ЭтоРегистрБухгалтерии Тогда 
				НайденныйРеквизит = Реквизиты.Найти(ИмяРеквизита + "Дт");
			КонецЕсли;
			
			Если НайденныйРеквизит <> Неопределено Тогда 
				ТипыПоля = НайденныйРеквизит.ТипЗначения.Типы();
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоРегистрБухгалтерии И Найти(ТекущееПоле.ИмяПоляХранения, "Value") Тогда 
			ПредсталениеПоля = "Субконто" + СтрЗаменить(ТекущееПоле.ИмяПоляХранения, "Value", "");
		Иначе
			ПредсталениеПоля = ИмяПоля;
		КонецЕсли;
		
		Суффиксы = ПолучитьСуффиксы(ТекущееПоле, ТипыПоля, Таблица.Назначение);
		Для Каждого Суффикс Из Суффиксы Цикл 
			ПредставлениеСуффикса = "";
			Если Суффиксы.Количество() > 1 Тогда 
				ПредставлениеСуффикса = мПредставленияСуффиксов.Получить(Суффикс);
			КонецЕсли;
			
			ПоляПредставления = ПоляПредставления + ?(ПустаяСтрока(ПоляПредставления), "", ", ") + ПредсталениеПоля + ПредставлениеСуффикса;
			
			ПоляВыборки = ПоляВыборки + ?(ПустаяСтрока(ПоляВыборки), "", ", ") + "
			|	_" + ТекущееПоле.ИмяПоляХранения + Суффикс;
		КонецЦикла;
	КонецЦикла;
	
	Если СтрНайти(Таблица.ИмяТаблицы, "Перечисление.") Тогда
		ПоляВыборки = ПоляВыборки + ", Имя, Синоним";
		ПоляПредставления = ПоляПредставления + ", Имя, Синоним";
		
		Значения = Метаданные.Перечисления[СтрЗаменить(Таблица.Метаданные, "Перечисление.","")].ЗначенияПеречисления;
		СтрЗначения = "";
		Для Каждого Т Из Значения Цикл
			СтрЗначения = СтрЗначения + СтрШаблон("
			|SELECT
			|''%1'' Имя,
			|''%2'' Синоним,
			| %3  Порядок
			|%4", Т.Имя, Т.Синоним, Значения.Индекс(Т),?(Значения.Индекс(т)+1=Значения.Количество(),""," UNION ALL "));
			//СтрЗначения = СтрШаблон("%1 (%2,''%3'',''%4'')%5 ",СтрЗначения, Значения.Индекс(Т), Т.Имя, Т.Синоним, ?(Значения.Индекс(т)+1=Значения.Количество(),"",","))
		КонецЦикла;
 		Таблица.ИмяТаблицыХранения = Таблица.ИмяТаблицыХранения + " JOIN
		|("+СтрЗначения+") as Метаданные  
		|On Порядок = _EnumOrder";                    
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСуффиксы(Поле, ТипыПоля, НазначениеТаблицы = Неопределено)
	
	Суффиксы = Новый Массив;
	
	Если (Поле.ИмяПоляХранения = "Node" И ПустаяСтрока(Поле.ИмяПоля)) Или Поле.ИмяПоляХранения = "Document" Тогда 
		Суффиксы.Добавить("TRef");
		Суффиксы.Добавить("RRef");
	ИначеЕсли Поле.ИмяПоляХранения = "ID"
			И НазначениеТаблицы <> "СтатистикаЗапросов"
			И НазначениеТаблицы <> "СписокАгрегатовРегистровНакопления"
		Или Поле.ИмяПоляХранения = "ParentID"
		Или Поле.ИмяПоляХранения = "DimKind"
		Или Поле.ИмяПоляХранения = "CKRef"
		Или Найти(Поле.ИмяПоляХранения, "Account")
		Или Найти(Поле.ИмяПоляХранения, "Kind") И ТипыПоля = Неопределено Тогда 
		Суффиксы.Добавить("RRef");
	ИначеЕсли Поле.ИмяПоляХранения = "OwnerID" Тогда 
		Если ТипыПоля.Количество() = 2 Тогда 
			Суффиксы.Добавить("RRef");
		Иначе // Несколько владельцев.
			Суффиксы.Добавить("_TYPE");
			Суффиксы.Добавить("_RTRef");
			Суффиксы.Добавить("_RRRef");
		КонецЕсли;
	ИначеЕсли ТипыПоля <> Неопределено Тогда 
		Если ТипыПоля.Количество() = 2 Тогда 
			ТекущийТип = ?(ТипыПоля[0] = мNull, ТипыПоля[1], ТипыПоля[0]);
			Если мВсеСсылки.СодержитТип(ТекущийТип) Тогда 
				Суффиксы.Добавить("RRef");
			КонецЕсли;
		Иначе // Составной тип.
			Если Поле.ИмяПоляХранения <> "Recorder" Тогда 
				Суффиксы.Добавить("_TYPE");
			КонецЕсли;
			
			КоличествоСсылок = 0;
			Для Каждого ТекущийТип Из ТипыПоля Цикл 
				Если ТекущийТип = мNull Тогда 
					Продолжить;
				ИначеЕсли мВсеСсылки.СодержитТип(ТекущийТип) Тогда 
					КоличествоСсылок = КоличествоСсылок + 1;
				ИначеЕсли мБинарныеДанные.СодержитТип(ТекущийТип) Тогда 
					Суффиксы.Добавить("_B");
				ИначеЕсли ТекущийТип = мЧисло Тогда 
					Суффиксы.Добавить("_N");
				ИначеЕсли ТекущийТип = мСтрока Тогда 
					Суффиксы.Добавить("_S");
				ИначеЕсли ТекущийТип = мДата Тогда 
					Суффиксы.Добавить("_T");
				ИначеЕсли ТекущийТип = мБулево Тогда 
					Суффиксы.Добавить("_L");
				КонецЕсли;
			КонецЦикла;
			
			Если Поле.ИмяПоляХранения = "Recorder" Тогда 
				Если КоличествоСсылок = 1 Тогда 
					Суффиксы.Добавить("RRef");
				ИначеЕсли КоличествоСсылок > 1 Тогда 
					Суффиксы.Добавить("TRef");
					Суффиксы.Добавить("RRef");
				КонецЕсли;
			Иначе
				Если КоличествоСсылок = 1 Тогда 
					Суффиксы.Добавить("_RRRef");
				ИначеЕсли КоличествоСсылок > 1 Тогда 
					Суффиксы.Добавить("_RTRef");
					Суффиксы.Добавить("_RRRef");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Суффиксы.Количество() Тогда 
		Суффиксы.Добавить("");
	КонецЕсли;
	
	Возврат Суффиксы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНОЙ ТЕКСТ ПРОГРАММЫ

мВсеСсылки = Метаданные().Реквизиты.Ссылки.Тип;

Типы = Новый Массив;
Типы.Добавить(Тип("ДвоичныеДанные"));
Типы.Добавить(Тип("ХранилищеЗначения"));

мБинарныеДанные = Новый ОписаниеТипов(Типы);

мЧисло  = Тип("Число");
мСтрока = Тип("Строка");
мДата   = Тип("Дата");
мБулево = Тип("Булево");
мNull   = Тип("Null");





