#Если Клиент Тогда
	
#Область ОписаниеПеременных

Перем NativeDraw_ВнешняяКомпонента Экспорт;

Перем МастерТестирования Экспорт;
Перем ГлавнаяФорма Экспорт;
Перем Окно1С;
Перем ПроцессВыходаЗапущен;
Перем РежимТестирования Экспорт;

Перем ВыходОС Экспорт;						// устанавливается в обработке РежимАдминистратора
Перем ВыполнитьДействияПриВозврате Экспорт;	// для отработки в ИнтерфейсРМ.ПриЗакрытииОкна()

Перем ТекКоличество Экспорт;
Перем ДатаОткрытия;

Перем фВводТоваровДоступен Экспорт;
Перем ПротоколРасчетов;
Перем ТекущийРежим Экспорт; // Продажа, Возврат
Перем НадписьСдача Экспорт;
Перем ДопПараметрыИнфо Экспорт; //ДГ+
Перем ГруппыАкций Экспорт; // соответствие. устанавливается при открытии формы
Перем ЛояльностьДанныеЗаказа Экспорт;
//Перем Вес Экспорт;
#КонецОбласти


#Область ПрограммныйИнтерфейс

Процедура ОткрытьМенюОпераций() Экспорт

	СброситьТекущийДокумент();
	ОбработкаРА = ИнтерфейсРМ.ПолучитьОбъектОбработки("РежимАдминистратора");
	Результат = ОбработкаРА.ПолучитьФорму("Форма9").ОткрытьМодально();
	Если Результат = "Возврат" Тогда

	ИначеЕсли Результат = "ВыходОС" Тогда
		ВыходОС = Истина;
		ГлавнаяФорма.Закрыть();
	ИначеЕсли Результат = "ВыходИзРежима" Тогда
		
		ДействияПриВозвратеВФорму();
	ИначеЕсли Результат = "Заблокировать" Тогда
		Заблокировать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборТовараИзМеню() Экспорт 
	Если Не ВводТоваровДоступен() Тогда
		Возврат;
	КонецЕсли;

	ОсновноеМеню = Неопределено;
	ТипЦен = Защита.ПолучитьТипЦен(глРабочееМесто.МестоРеализации);
	ОбработкаПодбора = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПодборТоваров");
	ОбработкаПодбора.ТипЦен = ТипЦен;
		
	ФормаПодбораТоваров = ОбработкаПодбора.ПолучитьРабочуюФорму(ОсновноеМеню);
	Если ФормаПодбораТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ФормаПодбораТоваров.ВладелецФормы = ГлавнаяФорма;
	Если ГлавнаяФорма.ЭлементыФормы.Найти("тпТовары") <> Неопределено Тогда
		ФормаПодбораТоваров.ВерхняяГраницаПоложения	= ГлавнаяФорма.ЭлементыФормы.тпТовары.Верх + 5;
	КонецЕсли; 
				
	ФормаПодбораТоваров.ОткрытьМодально();
КонецПроцедуры

Процедура ОткрытьФормуПоиска()  Экспорт 
	Если Не ВводТоваровДоступен() Тогда
		Возврат;
	КонецЕсли;

	ОбработкаПоиска = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПоискТовара");
	Попытка
		РезультатПоиска = ОбработкаПоиска.ВыполнитьПоиск();
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка выполнения.Ошибка открытия формы поиска", УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		ВыбТов = РезультатПоиска.Товар;
		Если ВыбТов.ЗапросКоличества Тогда
			Если Не ЗначениеЗаполнено(ТекКоличество) Или ТекКоличество = 1 Тогда
				ИзменитьКоличество();
			КонецЕсли;
		КонецЕсли;
		ВводНовойСтроки(ВыбТов, , РезультатПоиска.ШК);
	КонецЕсли;
КонецПроцедуры

Процедура ИзменитьКоличество() Экспорт
	ВведенноеЧисло = ИнтерфейсРМ.ВводЧисла("ВВЕДИТЕ КОЛИЧЕСТВО", "Число", 10, 3, 0);
	Если ВведенноеЧисло <> Неопределено Тогда
		Попытка
			ТекКоличество = Число(ВведенноеЧисло);
		Исключение
			ТекКоличество = 1;
			Возврат;
		КонецПопытки;
	Иначе
		Возврат;
	КонецЕсли;
	
	МаксимальноеКоличество = Константы.МаксимальноеКоличествоВстрокеЧека.Получить();
	МаксимальноеКоличество = ?(МаксимальноеКоличество = 0, 999999999999999, МаксимальноеКоличество);
	Если МаксимальноеКоличество < ТекКоличество Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Слишком большое количество","Введенное Количество больше максимально допустимого","","ОК","",,0);
		ТекКоличество = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура МенюВесов(Вес) Экспорт 
	
	Если Не ВводТоваровДоступен() Тогда
		Возврат;
	КонецЕсли;
	ОбработкаПоиска = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПоискPLU");
	ФормаПоиска = ОбработкаПоиска.ПолучитьФорму("Форма"+глПараметрыРМ.ИнтерфейсТип);
	ФормаПоиска.Вес = Вес;
	Если ФормаПоиска.Открыта() Тогда
		ФормаПоиска.Закрыть();
	КонецЕсли;
	Попытка
		РезультатПоиска = ФормаПоиска.ОткрытьМодально();	
	Исключение
		ЗаписьЖурналаРегистрации("Ошибка выполнения.Ошибка открытия формы поиска", УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		ВыбТов = РезультатПоиска.Товар;
		Если НЕ ВыбТов.ЗапросКоличества Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Неверное количество", "Количество для данного товара не может быть дробным","","ОК","");	
			Возврат;
		КонецЕсли;
		ШК = ШтрихкодСВесом(РезультатПоиска.ШК, Вес);
		ВводНовойСтроки(ВыбТов, Вес, ШК);
		Если не ПустаяСтрока(глПараметрыРМ.ИмяПринтераВесы) Тогда
			НапечататьЦенник(ВыбТов,ШК,Вес);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура МенюЛояльности() Экспорт
	Если Не ВводТоваровДоступен() Тогда
		
	КонецЕсли; 
	
	
	РезультатПоиска = ИнтерфейсРМЛояльность.ОткрытьМенюЛояльности();
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Если ТипЗнч(РезультатПоиска) = Тип("СправочникСсылка.Товары") Тогда
			ВыбТов = РезультатПоиска;
			Если ВыбТов.ЗапросКоличества Тогда
				ИзменитьКоличество();
			Иначе
				ТекКоличество = 1;
			КонецЕсли;
			ВводНовойСтроки(ВыбТов);
		ИначеЕсли РезультатПоиска = Справочники.ДействияЭлементовМеню.ОчиститьКупоны Тогда
			Док1 = ТекущийДокумент.ПолучитьОбъект();
			Если НЕ Док1.ЗаблокированПоФирме(глРабочееМесто.Фирма) Тогда
				Док1.Купоны.Очистить();
				ЗаписатьЗаказ(Док1);
			КонецЕсли;
		ИначеЕсли РезультатПоиска = Справочники.ДействияЭлементовМеню.ОчиститьНомерКартыЛояльности Тогда
			Док1 = ТекущийДокумент.ПолучитьОбъект();
			Если НЕ Док1.ЗаблокированПоФирме(глРабочееМесто.Фирма) Тогда
				Док1.НомерКартыЛояльности = "";
				ЗаписатьЗаказ(Док1);
			КонецЕсли;
			ГлавнаяФорма.ОбновитьОстальное();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура Сторно() Экспорт 
	
	ГлавнаяФорма.ОтключитьОбработчикОжидания("ОбновитьЗаказНаМонитореГостя");
	Если Не ВводТоваровДоступен() Тогда
		Возврат;
	КонецЕсли; 
	
	Попытка
		ЗаписьЖурналаРегистрации("Сторно", УровеньЖурналаРегистрации.Информация,,ТекущийДокумент.Ссылка);	
	Исключение
	КонецПопытки;
	
	ПоследняяСтрока = 0;
	КоличествоСтрок = 0;
	Для Каждого Т Из ТекущийДокумент.Товары Цикл 
		Если Т.Количество И НЕ ЗначениеЗаполнено(Т.ДокументОплаты) Тогда
			ПоследняяСтрока = ТекущийДокумент.Товары.Индекс(Т);
			КоличествоСтрок = КоличествоСтрок + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоСтрок Тогда
		//Если ПоследняяСтрока.фАлкоголь = 1 Тогда
		//	МС = ТекущийДокумент.Товары.НайтиСтроки(Новый Структура("Товар, Количество", ПоследняяСтрока.Товар, 1));
		//	КолСтрокСэтойБутылкой = МС.Количество();
		//	Если КолСтрокСэтойБутылкой > 1 Тогда
		//		ПДФ = ВводПДФ(ПоследняяСтрока.Товар, Ложь);
		//		Если Не ЗначениеЗаполнено(ПДФ) Тогда
		//			Возврат;
		//		КонецЕсли;
		//		
		//		МС = ТекущийДокумент.Товары.НайтиСтроки(Новый Структура("Товар, ПДФ, Количество", ПоследняяСтрока.Товар, ПДФ, 1));
		//		Если МС.Количество() Тогда
		//			ПоследняяСтрока = МС[0];
		//		Иначе
		//			ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Неверный PDF","PDF в чеке не найден","","ОК","",,0);
		//		КонецЕсли;
		//	КонецЕсли;				
		//КонецЕсли;
		
		Док1 = Заказ.ПолучитьОбъект();
		СтрДок = Док1.Товары[ПоследняяСтрока];
		СтрДок.КоличествоУдалено = СтрДок.КоличествоНачальное;
		СтрДок.Количество = 0;
		СтрДок.Сумма = 0;
		//Если ТекущийРежим = "ПРОДАЖА" Тогда
			СтрДок.СуммаРеализации = 0;
		//КонецЕсли;
		ЗаписатьЗаказ(Док1, ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
	Иначе
		
	КонецЕсли;
	глОтсечкаПростоя();
	ГлавнаяФорма.ПодключитьОбработчикОжидания("ОбновитьЗаказНаМонитореГостя", 0.5, Истина);
	//ПоказатьЗаказНаМонитореГостя();
	
КонецПроцедуры

Процедура ВводКартыКлиента(флЗаказОткрыт = Ложь) Экспорт 
	
	Обработка = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводКартыКлиента");
	Форма = Обработка.ПолучитьФорму("Форма9");
	РезОткрытия = Форма.ОткрытьМодально();
	Если ЗначениеЗаполнено(РезОткрытия) Тогда // поищем заказы по карте клиента
		Если ЕстьЗаказыПоПродавцуКарте(,РезОткрытия) Тогда // есть заказ
			флЗаказОткрыт = ОткрытьЗаказПоПродавцуКарте(,РезОткрытия);
		Иначе
			СоздатьЗаказ(глПользователь,РезОткрытия); // Создаем заказ по карте и продавцу
			флЗаказОткрыт = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВводКартыЛояльности() Экспорт 
	
	ЗаказОбъект = Заказ.ПолучитьОбъект();
	РезультатВвода = ИнтерфейсРМЛояльность.ВводКартыЛояльности(ЗаказОбъект);
	Если РезультатВвода.Ошибка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьЗаказ(ЗаказОбъект, ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
	
	Если ЗначениеЗаполнено(РезультатВвода.ТоварКарты) Тогда
		СтрокаТЧ = ЗаказОбъект.Товары.Найти(РезультатВвода.ТоварКарты, "Товар");
		Если СтрокаТЧ = Неопределено Тогда
			ВводНовойСтроки(РезультатВвода.ТоварКарты);
			ЗаказОбъект = Заказ.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
		ЛояльностьКлиент.ОткрытьЗаказ(ЗаказОбъект);
		ЗаписатьЗаказ(ЗаказОбъект, ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
		//Лояльность.ОбновитьПредварительныйРасчетЗаказа(Заказ, глПараметрыРМ.Тест);
	КонецЕсли;
	
	Возврат;
	
	ВопросПриОтмене = Истина;
	СтруктураЗаказа = Новый Структура;
	СтруктураЗаказа.Вставить("НомерКартыЛояльности",Заказ.НомерКартыЛояльности);
	ОтветЛояльности = ЛояльностьКлиент.ВвестиКарту(СтруктураЗаказа);
	Если ОтветЛояльности и НЕ ПустаяСтрока(СтруктураЗаказа.НомерКартыЛояльности) Тогда
		Док1 = Заказ.ПолучитьОбъект();
		Док1.НомерКартыЛояльности = СтруктураЗаказа.НомерКартыЛояльности;
		
		ЛояльностьКлиент.ОткрытьЗаказ(Док1);
		ЗаписатьЗаказ(Док1, ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
		Лояльность.ОбновитьПредварительныйРасчетЗаказа(Заказ, глПараметрыРМ.Тест);
	ИначеЕсли ВопросПриОтмене Тогда  
		
		ДисплейИнфо = "";
		//Если Не ЛояльностьДанныеЗаказа = Неопределено И ЛояльностьДанныеЗаказа.Свойство("display_info") Тогда
		//	
		//КонецЕсли;
		
		ОтветГостя1 = ИнтерфейсРМ.ВопросПредупреждение(
			"Заказ открыт!",
			"Давайте приобретем карту КеГеЛьБУМ",
			ДисплейИнфо,
			"Esc=Отказаться",
			"",
			"Купить карту");
		Если ОтветГостя1 = "Купить карту" Тогда
				
			ЗаказОбъект = Заказ.ПолучитьОбъект();	
				
				
			Если ЛояльностьКлиент.ВвестиКарту(ЗаказОбъект, "Считайте новую карту КеГеЛьБУМ", Истина) Тогда

				Если НЕ ПустаяСтрока(ЗаказОбъект.НомерКартыЛояльности) Тогда
					// добавление карты в список товаров
					ТоварКарты = ИнтерфейсРМ.НайтиТоварПоКоду(Лояльность.ПолучитьКодТовараКарты(ЛояльностьКлиентСервер.ПолучитьТекущийРегион()));
					
					// товар не найден - выход
					Если ТоварКарты = Справочники.Товары.ПустаяСсылка() Тогда
						ЗаказОбъект.НомерКартыЛояльности = "";
						ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","","Не найден товар карты лояльности (код 16020001/16020002)","","Вернуться в чек","");
						ЛояльностьКлиентСервер.Логирование(1, "расчет", "товар карты не найден");
						Возврат;
					КонецЕсли;
					
					// добавление карты в заказ, если ее там еще нет
					ЗаписатьЗаказ(ЗаказОбъект, ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
					СтрокаТЧ = ЗаказОбъект.Товары.Найти(ТоварКарты, "Товар");
					Если СтрокаТЧ = Неопределено Тогда
						ВводНовойСтроки(ТоварКарты);
					КонецЕсли;
				КонецЕсли;
			Иначе
				
			КонецЕсли;
			Возврат;
		Иначе
			ЗаказОбъект = Заказ.ПолучитьОбъект();
			
			ОтветГостя = ИнтерфейсРМ.ВопросПредупреждение(
				"Заказ открыт!",
				"У Вас есть карта КеГеЛьБУМ?",
				"Давайте сразу ее свяжем с Вашим бейджем!
				|Тогда для начисления или списания КеГЛей Вы можете
				|пользоваться только этим бейджем
				|А также Вы сможете воспользоваться
				|своими персональными предложениями!
				|
				|Если Карта предъявлена - прокатайте
				|
				|Если Карты нет - предложите купить, прокатайте и выдайте
				|
				|Если Карта не прокатана, нажмите на одну из кнопок:",
				"Esc=Не хочу приобретать",
				"Забыл карту дома",
				"Позже предъявлю",
				,,,12);
			Если ОтветГостя = "Не хочу приобретать" Тогда
				// больше не спрашивать
				ЗаказОбъект.ОтказОтКартыЛояльности = 1;
			ИначеЕсли ОтветГостя = "Забыл карту дома" Тогда 
				// ПОКА больше не спрашивать
				ЗаказОбъект.ОтказОтКартыЛояльности = 2;
			Иначе
				// спросить позже
				ЗаказОбъект.ОтказОтКартыЛояльности = 0;
			КонецЕсли;
			ЗаписатьЗаказ(ЗаказОбъект, ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// Заблокировать систему
//
Процедура Заблокировать() Экспорт
	
	ГлавнаяФорма.ОтключитьОбработчикОжидания("ПоказатьЗаказНаМонитореГостя");
	ГлавнаяФорма.ОтключитьОбработчикОжидания("ОбновитьЗаказНаМонитореГостя");
	
	ОчиститьСообщенияТО();
	
	Если ЗначениеЗаполнено(глПользователь) Тогда
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.АвторизацияБлокировка, глПользователь);
		глПользователь = Справочники.Сотрудники.ПустаяСсылка();
		Заказ = Документы.Заказ.ПустаяСсылка();
		ТекущийДокумент = Заказ;
		ГлавнаяФорма.ОчиститьЗаказ();
		ГлавнаяФорма.ОбновитьВремя();
	КонецЕсли; 
	
	глФлагБлокировка = Ложь;
	//ДГ+
	ИнтерфейсРМ.ВыводНаИнфоДисплей("УбратьЗаказ", Заказ.Ссылка, Неопределено, Неопределено, Неопределено);
	//ДГ-
	флЗаказОткрыт = Ложь;
	Если Авторизация() Тогда
		// добавляем проверку на открытые заказы
		Если ЕстьЗаказыПоПродавцуКарте(глПользователь) Тогда
			флЗаказОткрыт = ОткрытьЗаказПоПродавцуКарте(глПользователь);
		КонецЕсли;
		Если НЕ флЗаказОткрыт Тогда
			ВводКартыКлиента(флЗаказОткрыт);
		КонецЕсли;
	КонецЕсли;
	Если НЕ флЗаказОткрыт Тогда
		Если НЕ ЗначениеЗаполнено(глПользователь) Тогда
			глПользователь = Неопределено;
			глФлагБлокировка = Истина;
			Заблокировать();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	

	Если не ЗначениеЗаполнено(Заказ.КартаДоступа) ТОгда
		ВводКартыКлиента();		
	КонецЕсли;
	
	ВводКартыЛояльности();
	ВводТоваровДоступен();
	
	Лояльность.ОбновитьПредварительныйРасчетЗаказа(Заказ);
	
	ГлавнаяФорма.ОбновитьВремя();
	
КонецПроцедуры


Процедура Завершить() Экспорт
	ОтвязатьЗаказОтКассира();
	Заблокировать();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из обработчика ПередОткрытием форм этой обработки,
// выполняет инициализацию рабочего места
//
Процедура ДействияПередОткрытиемФормы(ТекущаяФорма, Отказ) Экспорт
	УстановкаОкна1С();
	Если Не РежимТестирования Тогда 
		ГлавныйИнтерфейс.ПереключитьИнтерфейс("РабочееМесто");	
	КонецЕсли;
	
	// тестово
	//РаботаСокнами.ShowCaption(0,1,1);

	
	ГлавнаяФорма = ТекущаяФорма;
	ГлавнаяФорма.Стиль = БиблиотекаСтилей[глПараметрыРМ.ИмяСтиля];
	
	ИнтерфейсРМ.ВыводНаДП("Ожидание");
	
КонецПроцедуры

// Вызывается после открытия формы из ИнтерфейсРМ.ЗапуститьРабочееМесто()
//
Процедура ДействияПослеОткрытия() Экспорт
	РаботаСокнами.Инициализация();			// убрать все панели инструментов и главное меню
	ПодождатьПокаОтработаетИнициализация();	
КонецПроцедуры

// Вызывается из обработчика ПередЗакрытием форм этой обработки,
//
Процедура ДействияПередЗакрытиемФормы(ТекущаяФорма, Отказ) Экспорт
	
	КолвоОкон = глСтекОкон.Количество();
	
	
	Если КолвоОкон > 1 Тогда
		Для н=1 По КолвоОкон-1 Цикл
			//глСтекОкон[0].Закрыть();
			глСтекОкон[н].Форма.Закрыть();
		КонецЦикла;	
		Если Не ВыходОС Тогда
			Отказ = Истина;
			Возврат;		
		КонецЕсли;
	КонецЕсли; 
	
	// этот механизм с процессом выхода нужен чтобы корректно отработало
	// восстановление панелей инструментов при возврате в обычный интерфейс
	Если ПроцессВыходаЗапущен Тогда
		ГлавнаяФорма.ОтключитьОбработчикОжидания("ОбновитьВремя");
		//ГлавнаяФорма.ОтключитьОбработчикОжидания("ОбновитьОстальное");
		ГлавнаяФорма	= Неопределено; // иначе объект обработки остается в памяти и работают обработчики ожидания
		глОбработки.ГлавнаяФорма = Неопределено;
		глРабочееМесто	= Неопределено;
		глПараметрыРМ	= Неопределено;
		глПользователь	= Неопределено;
		Возврат;
	КонецЕсли;
		
	
	
	Если глФлагБлокировка Тогда
		Заблокировать();
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ Авторизация() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если РежимТестирования Тогда
		Текст2 = "Завершить тестирование?";
		Событие = Справочники.События.ВыходРежимТестрования;
	ИначеЕсли глПараметрыРМ.РежимВыхода=0 Тогда
		Текст2 = "Выключить станцию?";
		Событие = Справочники.События.ВыключениеСтанции;
	Иначе  
		Событие = Справочники.События.ВыходОС;
		Если ИнтерфейсРМ.ПроверкаПраваДоступа("ВыходОС") Тогда
			Текст2 = "Завершить работу программы?";
		Иначе
			Текст1="Недостаточно прав!";
			Текст2="Отказано в праве доступа:
			       |""Выход в ОС""";         
			
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК"," ");
			ВыходОС = Ложь;
			Отказ = Истина;
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Текст1 = "Выход";
	Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","","Esc=Нет")="Нет" Тогда
		ВыходОС = Ложь;
		Отказ = Истина;
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли;
	
	// отключение оборудования
	МассивТО = ПолучитьМассивПодключаемогоТО();
	
	Если РежимТестирования Тогда
		ГлавныйИнтерфейс.ПереключитьИнтерфейс("ирРазработчик");
		РаботаСокнами.ShowCaption( Окно1С, 1 );	// вернуть заголовок окна 
		Если глПараметрыРМ.ИнтерфейсРазмерОкна <> -1 Тогда
			РаботаСокнами.ShowSysMenu( Окно1С, 1 );	// убрать/вернуть системное меню окна flag = 0/1
		КонецЕсли; 
	
		ГлавнаяФорма.ПодключитьОбработчикОжидания("ПроцессВыхода",2,Истина);
		ПроцессВыходаЗапущен = Истина;
		Отказ = Истина;
		
		ИнтерфейсРМ.ЗаписьСобытия(Событие, глПользователь, глРабочееМесто);
		
		ОтключитьОбработчикОжидания("глАвтоблокировка");
		// отключение только после последнего события
		//тоВыполнитьПодключениеОтключение("Отключить", Ложь, МассивТО);
		РаботаСокнами.ВернутьПанельЗадач();
		РаботаСокнами.ВернутьМенюИпанели();
	ИначеЕсли Не ПроцессВыходаЗапущен Тогда
		//ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глОбработкаАвтоОбменДанными);		
		ИнтерфейсРМ.ЗаписьСобытия(Событие, глПользователь);
		
		// отключение только после последнего события
		//тоВыполнитьПодключениеОтключение("Отключить", Ложь, МассивТО);
		
		Если Не глРабочееМесто.Тест Тогда
			РаботаСокнами.ShutDown();
		КонецЕсли;
		
		РаботаСокнами.ВернутьПанельЗадач();
		РаботаСокнами.Деструктор();
		Если глОбработки.Свойство("ЭмуляторСканера") Тогда
			глОбработки.ЭмуляторСканера.Деструктор();
			глОбработки.ЭмуляторСканера = Null;
		КонецЕсли;
		глОбработки = Неопределено;
		
		РаботаСокнами = Неопределено;
		ГлавнаяФорма.ПодключитьОбработчикОжидания("ПроцессВыхода",5,Истина);
		
		ПроцессВыходаЗапущен = Истина;
		ГлавнаяФорма.Закрыть();
	Иначе
		
		
	КонецЕсли; 
	
КонецПроцедуры

// Блокировка или вывод плана зала при возврате из других форм
//
Процедура ДействияПриВозвратеВФорму() Экспорт
	
	Если Не ВводТоваровДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	Если глФлагБлокировка ИЛИ глПараметрыРМ.БлокировкаПриВозврате Тогда
		Заблокировать();
	КонецЕсли;
	
	Попытка
	
		ГлавнаяФорма.ВключитьОбработкуСобытий();
	
	Исключение
	
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(глПараметрыРМ.НомерСмены) Тогда
		СменаКассы = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(глПараметрыРМ.НомерСмены) Тогда
	//	Если ВыходОС <> Истина Тогда
	//		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Смена не открыта", "Необходимо открыть смену","","ОК","");
	//		ОткрытьМенюОпераций();
	//	КонецЕсли;
	//КонецЕсли;
	ВыполнитьДействияПриВозврате = Ложь;
	ИнтерфейсРМ.ВыводНаДП("Ожидание");
	
КонецПроцедуры


// Обработка внешних событий
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
	
	глОтсечкаПростоя();
		
	Если Источник = "NativeDraw" Тогда
		Возврат;
	КонецЕсли;
	
	Если найти(Источник,"Штрих АС POS") <> 0 Тогда //"Штрих АС POS" Тогда
		Весы = глТорговоеОборудование.Scale1C;
		Весы.УдалитьСообщение();
		Весы.ПосылкаДанных = Истина;
		ГлавнаяФорма.Вес = Весы.Вес;
		ГлавнаяФорма.ПодключитьОбработчикОжидания("ОбновитьВес",0.1,1);
		Возврат;
	КонецЕсли;
	
	Если глСтекОкон.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	_Знач = ОбработкаВнешнихСобытий.ПолучитьДанные(Источник,Событие,Данные);
	Если НЕ ЗначениеЗаполнено(_Знач) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаказНеВыбран() Тогда
		Возврат;
	КонецЕсли;
	Если Не ВводТоваровДоступен() Тогда
		Возврат;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(глПользователь) Тогда
		// Возможно, это сканированик ШК товара
		ШК = ОбработкаВнешнихСобытий.ПолучитьДанные(Источник, Событие, Данные);
		
		Префикс = Лев(ШК, 2);
		КодТовара = ШК;
		Колво = 0;	
		Шаблон = Справочники.ШаблоныШК.НайтиПоКоду(Префикс);
		
		Если НЕ Шаблон.Пустая() И НЕ Шаблон.ПометкаУдаления И Шаблон.Тип = Справочники.ТипыШаблоновШК.Товар Тогда
			
				
			ВыбТов = Неопределено;
			Каталог = Неопределено;
			Справочники.ШаблоныШК.ПолучитьКодКоличествоИзШК(Префикс, ШК, КодТовара, Колво, ВыбТов, Каталог, глПараметрыРМ.Станция);
			Если ВыбТов = Неопределено Тогда
				ВыбТов = ИнтерфейсРМ.НайтиТоварПоКоду(КодТовара);
			КонецЕсли;
			
		Иначе	
			
			ВыбТов = ИнтерфейсРМ.НайтиТоварПоШтрихКоду(ШК,Колво);
			
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ВыбТов) Тогда
			// ничего				
		ИначеЕсли ТипЗнч(ВыбТов) = Тип("Массив") Тогда
			ВыбТов = ВыбратьТоварИзСписка(ВыбТов);
		ИначеЕсли ВыбТов.ЭтоГруппа Тогда
			МассивТоваров = Новый Массив;
			МассивТоваров.Добавить(ВыбТов);
			ВыбТов = ВыбратьТоварИзСписка(МассивТоваров);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбТов) Тогда
			// тут надо проверить, а нет ли в заказе клона добавляеммого товара
			// (два раза просканировали, отсканировали сразу после взвешивания, и т.п.)
			Если ПроверитьДубльВесовогоТовара(ВыбТов,Колво, ШК) Тогда
				ВводНовойСтроки(ВыбТов,Колво, ШК);
			КонецЕсли;
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	
	Если ТипЗнч(_Знач) = Тип("Строка") Тогда
		Если НЕ ЗначениеЗаполнено(глПользователь) Тогда
			// если система заблокирована, то возможна только авторизация сотрудника
			ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Иначе
			ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.Клиенты");
		КонецЕсли;
		
		ФлагПовтора = Ложь;
		
		_КартаДоступаКлиента = Неопределено;
		_Объект = ИнтерфейсРМ.ИдентификацияПоКарте("Идентификатор_"+_Знач, ТипПривязки, ФлагПовтора, _КартаДоступаКлиента, Истина);
		
		Если ТипЗнч(_Объект) = Тип("Структура") Тогда
			Если _Объект.Тип = Справочники.ТипыШаблоновШК.КартаЛояльности Тогда
				НКЛ = _Объект.Значение;
				НКЛ = СтрЗаменить(НКЛ, ";","");
				НКЛ = СтрЗаменить(НКЛ, "?","");

				Док1 = ТекущийДокумент.ПолучитьОбъект();
				Док1.НомерКартыЛояльности = НКЛ;

				ЗаписатьЗаказ(Док1, ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));

			ИначеЕсли _Объект.Тип = Справочники.ТипыШаблоновШК.Купон Тогда

				Док1 = ТекущийДокумент.ПолучитьОбъект();

				Нов = Док1.Купоны.Добавить();
				Нов.Купон = _Объект.Значение;

				ЗаписатьЗаказ(Док1, ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));

			ИначеЕсли _Объект.Тип = Справочники.ТипыШаблоновШК.КартаДоступа Тогда
				//НомерКартыДоступа = _Объект.Значение;
				//КартаДоступа = Справочники.КартыДоступа.НайтиПоРеквизиту("Идентификатор",НомерКартыДоступа);
				//Если КартаДоступа.Пустая() Тогда
				//	обКартаДоступа = Справочники.КартыДоступа.СоздатьЭлемент();
				//	обКартаДоступа.Код = НомерКартыДоступа;
				//	обКартаДоступа.Наименование = НомерКартыДоступа;
				//	обКартаДоступа.Идентификатор = НомерКартыДоступа;
				//	обКартаДоступа.Записать();
				//	КартаДоступа = обКартаДоступа.Ссылка;
				//	ЗаказСсылка = Документы.Заказ.ПустаяСсылка();
				//Иначе
				//	ЗаказСсылка = ксТрактир.ЗаказПоКартеДоступа(КартаДоступа);				
				//КонецЕсли;
				////:ЗаказСсылка = Документы.Заказ.ПустаяСсылка();
				//
				//Если Не ЗначениеЗаполнено(ЗаказСсылка) Тогда
				//	//:ТекущийДокумент = Документы.Возврат.СоздатьДокумент();
				//	Если ТекущийДокумент.КартаДоступа.Пустая() Тогда
				//		ТекущийДокумент.КартаДоступа = КартаДоступа;
				//		ксТрактир.РегистрацияЗаказаПоКартеДоступа(КартаДоступа, ТекущийДокумент.Ссылка);
				//		ГлавнаяФорма.ОбновитьНадписьИтого();
				//	Иначе
				//		ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Открыт);
				//		ИнициализацияЗаказа(,КартаДоступа);
				//		Возврат;
				//	КонецЕсли;
				//Иначе
				//	ОткрытьЗаказ(ЗаказСсылка);
				//КонецЕсли;
				
			Иначе
				Текст1="Код не найден!";
				Текст2="Код """+КодТовара+""" не найден в справочнике!
				|Попробуйте повторить ввод кода....";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");			
				Возврат;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(_Объект) Тогда
			Если МастерТестирования = Неопределено Тогда
				Текст1="Код не найден!";
				Текст2="Неопознанный штрихкод товара";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");			
				ЗаписьЖурналаРегистрации("Неопознанный штрихкод", УровеньЖурналаРегистрации.Предупреждение, , ТекущийДокумент.Ссылка, """"+ШК+"""");
				Возврат;
			Иначе
				Если _Знач = "1" Тогда
					МастерТестирования.Да();
				ИначеЕсли _Знач = "0" Тогда
					МастерТестирования.Нет();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
			//ИнтерфейсРМ.СменаПользователя(_Объект);
		ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.Клиенты") Тогда
		Иначе
			Сообщить(Строка(_Объект) + " " + ТипЗнч(_Объект));
		КонецЕсли;
	ИначеЕсли ТипЗнч(_Знач) = Тип("ДокументСсылка.Заказ") Тогда
		//ОткрытьЗаказ(_Знач);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Вызывается перед открытием формы из ИнтерфейсРМ.ЗапуститьРабочееМесто()
//
Функция ИнициализацияРабочегоМеста(ТекущееРМ) Экспорт
	глПараметрыРМ = Новый Структура;
	
	// Проверка даты запуска ТТ
	глПараметрыРМ.Вставить("ФайловаяИБ",ПроцедурыОбменаДанными.ОпределитьЭтаИнформационнаяБазаФайловая());
	
	// Инициализация глобальных переменных
	глТорговоеОборудование	= Новый Структура;	// чтобы убрать все лишнее при запуске в режиме тестирования
	глСтекОкон				= Новый Массив;
	глОбработки				= Новый Структура;
	глФлагБлокировка		= Ложь;
	глФлагЗапретБлокировки	= Ложь;
	глПользователь			= Справочники.Сотрудники.ПустаяСсылка();
	
	// Инициализация параметров рабочего места
	РежимТестирования = ЗначениеЗаполнено(ТекущееРМ);
	
	Если РежимТестирования Тогда
		глРабочееМесто = ТекущееРМ;
		
	Иначе
		ПрофильВхода = "\\"+ИмяКомпьютера()+"\"+ИмяПользователя();
		глРабочееМесто = Справочники.РабочиеМеста.НайтиПоРеквизиту("ПрофильВхода",ПрофильВхода);
		
		Если глРабочееМесто.Пустая() Тогда
			РаботаСокнами.РазблокироватьВвод();
			Предупреждение("Рабочее место с профилем входа """+ПрофильВхода+""" отсутствует!
			|Обратитесь к администратору...");
			Возврат Ложь;
		КонецЕсли; 
		
		
		РазностьВремени = ТекущаяДатаНаСервере() - ТекущаяДата();
		РазностьВремени = Макс(РазностьВремени,-РазностьВремени);
		Если РазностьВремени > 800 Тогда
			ЗаписьЖурналаРегистрации("Разность времени с сервером", УровеньЖурналаРегистрации.Ошибка, , ,""+РазностьВремени,);
			//ЗапуститьПриложение("cmd /cdate " + Формат(ТекущаяДатаНаСервере(),"ДФ=dd.MM.yyyy") + " && time " + Формат(ТекущаяДатаНаСервере(),"ДФ=H:mm:ss"));
		КонецЕсли;

		Попытка
			
			Для каждого Соединение Из ПолучитьСоединенияИнформационнойБазы() Цикл
				
				Если Соединение.Пользователь = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				
				Если Не ЗначениеЗаполнено(Соединение.НомерСоединения) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Соединение.НомерСеанса) Тогда
					Продолжить;
				КонецЕсли;
				
				ПрофильСоединения = "\\"+Соединение.ИмяКомпьютера+"\"+Соединение.Пользователь.Имя;
				
				Если Соединение.НомерСоединения <> НомерСоединенияИнформационнойБазы() И ПрофильСоединения = ПрофильВхода Тогда
					Если Сеть.СписокПроцессовЛокально().Количество() > 1 Тогда
						РаботаСокнами.РазблокироватьВвод(); 
						Предупреждение("Рабочее место с профилем входа """+ПрофильВхода+""" запущено в другом сеансе!", 5);
						Возврат Ложь;
					Иначе
						Соединитель = Новый COMObject("V83.COMConnector");
						Агент = Соединитель.ConnectAgent(ПараметрыСеанса.ТекущаяИБ.СерверХост);
						Кластеры = Агент.GetClusters();
						Кластер = Кластеры.GetValue(0);
						
						Агент.Authenticate(Кластер,"","");
						Сеансы = Агент.GetSessions(Кластер).Выгрузить();
						Для Каждого Сеанс Из Сеансы Цикл
							Если Сеанс.SessionID = Соединение.НомерСеанса Тогда
								Агент.TerminateSession(Кластер, Сеанс);	
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
				Если НомерСеансаИнформационнойБазы() <> Сеанс.НомерСеанса Тогда
					Если НРег(Сеанс.ИмяКомпьютера) = НРег(ИмяКомпьютера()) Тогда
						Соединитель = Новый COMObject("V83.COMConnector");
						Агент = Соединитель.ConnectAgent(ПараметрыСеанса.ТекущаяИБ.СерверХост);
						Кластеры = Агент.GetClusters();
						Кластер = Кластеры.GetValue(0);
						
						Агент.Authenticate(Кластер,"","");
						Sessions = Агент.GetSessions(Кластер).Выгрузить();
						Для Каждого Session Из Sessions Цикл
							Если Session.SessionID = Сеанс.НомерСеанса Тогда
								Агент.TerminateSession(Кластер, Session);	
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Исключение
			ЗаписьЖурналаРегистрации("РМ.Ошибка завершения сеанса",УровеньЖурналаРегистрации.Ошибка, ,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли; 
	
	Если глРабочееМесто.ПометкаУдаления Тогда
		Предупреждение("Рабочее место """+глРабочееМесто+""" помечено на удаление!
		|Обратитесь к администратору...");
		Возврат Ложь;
	КонецЕсли;	
	
	// Чтение параметров РМ через форму настройки для контроля соответствия версии и релизу.
	// Заполняется глобальная переменная-структура глПараметрыРМ,
	// ключи структуры соответствуют именам реквизитов формы НастройкаРМ
	
	НастройкаРМ = Справочники.РабочиеМеста.ПолучитьФорму("НастройкаРМ");
	НастройкаРМ.СправочникОбъект = глРабочееМесто.ПолучитьОбъект();
	Если НЕ НастройкаРМ.ПроверкаПараметров() Тогда
		Предупреждение("Рабочее место """+глРабочееМесто+""" не настроено!
						|Обратитесь к администратору...");
		Возврат Ложь;
	КонецЕсли;
	НастройкаРМ.СохранитьПараметры(глПараметрыРМ);
	// интерфейсные объекты можно создавать только после получения параметров РМ
	глОжидание = Обработки.Ожидание.Создать();
	
	// Загрузка внешних компонент
	Если НЕ РежимТестирования Тогда
		глОжидание.Начало("Запуск системы", "Загрузка внешних компонент,
							|поиск ключа защиты...");
							
		Если Не глЗагрузитьВнешниеКомпоненты() Тогда
			глОжидание.Конец();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// ----------------------------------------------------------------------
	// Подключение торгового оборудования
	глОжидание.Начало("Запуск системы", "Подключение торгового оборудования...");
	
	МассивТО = ПолучитьМассивПодключаемогоТО();
	ТаблицаОшибок = Новый ТаблицаЗначений;
	тоВыполнитьПодключениеОтключение("Подключить", Ложь, МассивТО, ТаблицаОшибок);
	
	Для каждого Ошибка Из ТаблицаОшибок Цикл
		Текст1 = Ошибка.ТО.Наименование;
		Текст2 = Ошибка.Описание+Символы.ПС+Ошибка.Подробно;
		Если ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"ОК","","Esc=Выход")="Выход" Тогда
			глОжидание.Конец();
			// На случай если Торговое оборудование подключено с ошибками 
			// и у рабочего места указана настройка выключения компьтера при выходе
			Если НЕ РежимТестирования И глПараметрыРМ.РежимВыхода = 0 Тогда
				Если Не глРабочееМесто.Тест Тогда
					РаботаСокнами.ShutDown();
				КонецЕсли;
				ЗавершитьРаботуСистемы(Ложь);
			Иначе
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	// ----------------------------------------------------------------------
	// если основной режим работы - доставка, то это многое меняет :)
	глДоставкаОсновнойРежим = глВерсия=3 И глПараметрыРМ.ДоставкаЕсть И глПараметрыРМ.ДоставкаРежимИспользования<>1;
	
	// ----------------------------------------------------------------------
	// проверка наличия хотя бы одного элемента в справочнике Сотрудники
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Сотрудники ГДЕ НЕ ПометкаУдаления И НЕ ЭтоГруппа");
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Текст1 = "Нет доступа!";
		Текст2 = "Нужно завести хотя бы одного сотрудника!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		глОжидание.Конец();
		Возврат Ложь;
	КонецЕсли; 
	
	Если глПараметрыРМ.РежимВыхода = 0 Тогда        
		Запрос = Новый Запрос( "ВЫБРАТЬ Ссылка ИЗ Справочник.Сотрудники ГДЕ НЕ ПометкаУдаления И НЕ ЭтоГруппа");
		Выборка = Запрос.Выполнить().Выбрать();
		ЕстьПравоНаВыходОС = Ложь;
		Пока Выборка.Следующий() Цикл
			Если ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ВыходОС,Ложь,Выборка.Ссылка) Тогда
				ЕстьПравоНаВыходОС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьПравоНаВыходОС Тогда
			Текст1 = "Нет доступа!";
			Текст2 = "Нет ни одного сотрудника с правом выхода в ОС!";
			//ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			глОжидание.Конец();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// ----------------------------------------------------------------------
	// проверка текущей смены
	ТекСмена = РегистрыСведений.ТекущиеСмены.Получить(Новый Структура("МестоРеализации", глПараметрыРМ.МестоРеализации )).Смена;
	ТекСменаЗапрос = ИнтерфейсРМ.ТекущаяСменаЗапрос();
	Если ТекСменаЗапрос <> ТекСмена Тогда
		МенеджерЗаписи = РегистрыСведений.ТекущиеСмены.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.МестоРеализации = глПараметрыРМ.МестоРеализации;
		МенеджерЗаписи.Смена = ТекСменаЗапрос;
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( МенеджерЗаписи, "Объект.Записать()" ) Тогда
			глОжидание.Конец();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// ----------------------------------------------------------------------
	// Добавление в глТорговоеОборудование соответствия ГруппПечати и РМ мониторов марок //pr	
	//глТорговоеОборудование.Вставить("СоответствиеМониторРМ", Справочники.РабочиеМеста.ПолучитьСоответствиеМониторРМ());
	
	// ----------------------------------------------------------------------
	// подключение внешней обработки управления формами
	КаталогЛокальныхНастроек = Константы.КаталогЛокальныхНастроек.Получить();
	
	Если НЕ ПустаяСтрока( КаталогЛокальныхНастроек ) Тогда
		ИмяФайла = КаталогЛокальныхНастроек+"\УправлениеФормами.epf";
		Если РаботаСФайлами.ПроверитьСуществованиеФайла( ИмяФайла, , Истина ) Тогда
			глДопУправлениеФормами = ВнешниеОбработки.Создать(ИмяФайла);  
		КонецЕсли;
	КонецЕсли;
	
	// ----------------------------------------------------------------------
	//запись события запуска системы
	ИнтерфейсРМ.ЗаполнитьТаблицуСобытий();
	
	Если РежимТестирования Тогда
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗапускРежимТестирования, , глРабочееМесто);
	Иначе
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗапускРМ);
	КонецЕсли; 
	
	
	глОжидание.Конец();
	
	// пользователь по умолчанию
	Если глПараметрыРМ.ПользовательВходБезАвторизации Тогда
		глПользователь = глПараметрыРМ.ПользовательПоУмолчанию;
	КонецЕсли; 
	
	Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();	
	глПараметрыРМ.Вставить("НомерКассы", глПараметрыРМ.ККМ.КодСУП);	
	//ОткрытьЧек();
	
	Возврат Истина;
КонецФункции         

// Ждет пока отработает поток запущенный в РаботаСокнами.Инициализация(), убирающий панели инструментов,
// иначе не правильно определятся размеры плана зала
Процедура ПодождатьПокаОтработаетИнициализация() Экспорт
	Попытка
		Если НЕ РаботаСокнами.GetMainShowStatusV8() = 1 Тогда
			ГлавнаяФорма.ПодключитьОбработчикОжидания("ПодождатьПокаОтработаетИнициализация",0.3,Истина);
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;	

	// установка фокуса (иногда не возвращается после загрузки плана зала)
	//WshShell.AppActivate(?(ТекущийЯзыкСистемы()="en","1C:Enterprise", "1С:Предприятие") + " - " + ПолучитьЗаголовокСистемы() );
		
	// посылка нажатий работает тоже только после того как все устаканится
	//ИнтерфейсРМ.ЗакрытьОкноСообщений();
	
	// оповещения тоже лучше раньше не выводить
	//ПроверитьОбработкаСобытий();
	//ПодключитьОбработчикОжидания("глОбработкаОчередиСобытий",3);
	
КонецПроцедуры

// Установка размера главного окна 1С и признака "Поверх всех"
//
Процедура УстановкаОкна1С() Экспорт
	
	Окно1С = 0;
	 
	Если глПараметрыРМ.БлокировкаПереднийПлан Тогда
		//РаботаСокнами.OnTop( Окно1С, 1 );		// установтить окно поверх всех окон flag = 0/1
	КонецЕсли; 
	
	Если глПараметрыРМ.ИнтерфейсРазмерОкна = -1 Тогда
		// обычное окно
		глПараметрыРМ.Вставить("ИмяСтиля", "РабочееМесто_CallЦентр");
		
		// Заполнить параметры для экранной клавиатуры
		глПараметрыРМ.Вставить("ШиринаОкна1С", 1024 );
		глПараметрыРМ.Вставить("ВысотаОкна1С", 768 );
		
		Возврат;
	КонецЕсли; 
		
	глПараметрыРМ.Вставить("Окно1С", Окно1С );
	
	Если глПараметрыРМ.ИнтерфейсРазмерОкна = 0 Тогда
		// во весь экран
		Ширина = 0;
		Высота = 0;
		РаботаСокнами.GetWndSize( Окно1С, Ширина, Высота );	// получить ширину и высоту окна
		Если Не РежимТестирования Тогда
			РаботаСокнами.FullScreen( Окно1С );
			Если Не РежимТестирования Тогда
				РаботаСокнами.СкрытьПенельЗадач();
			КонецЕсли;
		КонецЕсли;
		// здесь реальные размеры окна
		глПараметрыРМ.Вставить("ШиринаОкна1С", Ширина );
		глПараметрыРМ.Вставить("ВысотаОкна1С", Высота );
		
		Если Ширина=0 ИЛИ Ширина>=1024 Тогда	// будет использоваться стиль для 1024х768
			Ширина = 1024;
			Высота = 768;
		ИначеЕсли Ширина>=800 Тогда	// будет использоваться стиль для 800х600
			Ширина = 800;
			Высота = 600;
		КонецЕсли;
		
	Иначе
		// конкретный размер
				
		Если глПараметрыРМ.ИнтерфейсТип = 0 Тогда
			Если глПараметрыРМ.ИнтерфейсРазмерОкна = 1 Тогда
				Ширина = 640;
				Высота = 480;
			ИначеЕсли глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
				Ширина = 800;
				Высота = 600;
				
			ИначеЕсли глПараметрыРМ.ИнтерфейсРазмерОкна = 3 Тогда
				Ширина = 1024;
				Высота = 768;
			Иначе
				Ширина = 800;
				Высота = 600;
			КонецЕсли;
			
		ИначеЕсли глПараметрыРМ.ИнтерфейсТип = 1 Тогда
			Если глПараметрыРМ.ИнтерфейсРазмерОкна = 1 Тогда
				Ширина = 240;
				Высота = 260;	// на 60 меньше чтобы не перекрывать панели
			ИначеЕсли глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
				Ширина = 480;
				Высота = 580;
			Иначе
				Ширина = 480;
				Высота = 580;
			КонецЕсли;
			
		ИначеЕсли глПараметрыРМ.ИнтерфейсТип >= 8 Тогда
			
			Если глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
				Ширина = 800;
				Высота = 600;
				Если Не РежимТестирования Тогда
					РаботаСокнами.СкрытьПенельЗадач();
				КонецЕсли;
				
				РаботаСокнами.FullScreen(0)
			КонецЕсли;
			
		КонецЕсли;
		
		РаботаСокнами.УстановитьРазмерОкна( Окно1С, Ширина, Высота );	// установить ширину и высоту окна
		
		// здесь реальные размеры окна
		Если Не РежимТестирования Тогда
			РаботаСокнами.FullScreen( Окно1С );
			РаботаСокнами.СкрытьПенельЗадач();
		КонецЕсли;
		
	КонецЕсли; 
	
	Если глПараметрыРМ.ИнтерфейсТип <> 9 Тогда
		глПараметрыРМ.Вставить("ИмяСтиля", "РабочееМесто_" + ?(глПараметрыРМ.ИнтерфейсТип=1,"КПК", Формат(Ширина,"ЧГ=") +"х"+ Формат(Высота,"ЧГ=") ));
	КонецЕсли;
КонецПроцедуры

// Подключается как обработчик ожидания при выходе из режима тестирования
// Иначе не отрабатывает восстановление панелей инструментов
Процедура ПроцессВыхода() Экспорт
	
	Если РежимТестирования Тогда
		РаботаСокнами.Деструктор();
		РаботаСокнами = Неопределено;
		Если ГлавнаяФорма.Открыта() Тогда
			ГлавнаяФорма.Закрыть();
		КонецЕсли;
	Иначе
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры


// Авторизация сотрудников в системе
// ФлагПоКнопке - признак того, что авторизация происходит по кнопке
//
Функция Авторизация(ФлагПоКнопке=Ложь) Экспорт
	
	Авторизация = ИнтерфейсРМ.ПолучитьОбъектОбработки("Авторизация").ПолучитьФорму( "Форма" + глПараметрыРМ.ИнтерфейсТип );
	Если Авторизация.Открыта() Тогда
		Возврат Ложь;
	КонецЕсли;
	
 	Если ФлагПоКнопке ИЛИ НЕ ЗначениеЗаполнено(глПользователь) Тогда
		ИнтерфейсРМ.СменаПользователя();
		ГлавнаяФорма.ОбновитьВремя();
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(глПользователь) Тогда
		Авторизация();
		Возврат ЗначениеЗаполнено(глПользователь);
	Иначе
		ГлавнаяФорма.ОбновитьВремя();
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(глПользователь);
	
КонецФункции

Процедура СброситьТекущийДокумент() Экспорт
	
	//ДГ+
	ИнтерфейсРМ.ВыводНаИнфоДисплей("УбратьЗаказ", Заказ, Неопределено, Неопределено, Неопределено);
	//ДГ-
	докВозврат = Неопределено;
	ТекущийДокумент = Неопределено;
	Заказ = Неопределено;
	
	ЛояльностьДанныеЗаказа = Неопределено;
	фВводТоваровДоступен = Ложь;
	ГлавнаяФорма.ОчиститьЗаказ();
	ГлавнаяФорма.ОбновитьВремя();
	
КонецПроцедуры

Функция ЗаказНеВыбран() Экспорт 
	
	флЗаказОткрыт = НЕ Заказ.Пустая();
	
	Если НЕ флЗаказОткрыт Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение", "Заказ не выбран!", "Добавление/сторно товаров не возможно.
		|Откройте заказ и попробуйте еще раз.", "", "ОК", "", , Ложь);
		ВводКартыКлиента(флЗаказОткрыт);
	КонецЕсли;
	
	Возврат НЕ флЗаказОткрыт;
	
КонецФункции

Функция ПроверитьБлокировкуЗаказа(ЗаказСсылка) Экспорт 
	
	Фирма = глРабочееМесто.Фирма;
	ДокБлок = ЗаказСсылка.ПолучитьОбъект();
	
	РезультатБлокировки = ДокБлок.ЗаблокироватьРедактированиеПоФирме(Фирма);
	Если Не РезультатБлокировки.Успех Тогда
		
		флОткрытьЗаказ = Ложь;
		
		ПрофильБлок = РезультатБлокировки.КемЗаблокирован;
		Если НЕ ПустаяСтрока(ПрофильБлок) Тогда
			РМ_Блок = ОбщегоНазначенияПовтИсп.НайтиПоРеквизиту("Справочник.РабочиеМеста", "ПрофильВхода", ПрофильБлок);
			Если ЗначениеЗаполнено(РМ_Блок) 
				И НЕ РМ_Блок.Тип = ПредопределенноеЗначение("Перечисление.ТипыРМ.Автокасса")
				И НЕ РМ_Блок.Тип = ПредопределенноеЗначение("Перечисление.ТипыРМ.СтанцияОплаты")
				И НЕ РМ_Блок.Тип = ПредопределенноеЗначение("Перечисление.ТипыРМ.СтанцияОплатыКМ")
				Тогда
				флОткрытьЗаказ = Истина;
			КонецЕсли;
		КонецЕсли;

		Если НЕ флОткрытьЗаказ Тогда
			Текст1="Заказ редактируется!";
			Текст2="Этот заказ редактируется на 
			       |" + ПрофильБлок + "
			       |Редактирование не возможно!";
			
			ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
			СброситьТекущийДокумент();
			Заблокировать();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	ДокБлок.РазблокироватьРедактированиеПоФирме(Фирма);	
	ДокБлок = Неопределено;
	
	Возврат Истина;
	
КонецФункции

// Открытие формы выбранного заказа
//
Функция ОткрытьЗаказ(ЗаказСсылка) Экспорт
	
	Если НЕ ПроверитьБлокировкуЗаказа(ЗаказСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Заказ = ЗаказСсылка;
	ТекущийДокумент = Заказ;
	ТекущийРежим = "ПРОДАЖА";
	фВводТоваровДоступен = Истина;
	ГлавнаяФорма.ОбновитьВремя();
	ПривязатьЗаказККассиру();
	
	//ДГ+
	ДопПараметрыИнфо.СуммаПоСтанцииНач = СуммаРеализации();
	ДопПараметрыИнфо.СброситьНастройки = Ложь;
	ПоказатьЗаказНаМонитореГостя();
	//ДГ-

	Возврат Истина;
	
КонецФункции

Функция ВводНовойСтроки(ВыбТов, Количество = 0, ШК = "") Экспорт
	
	ГлавнаяФорма.ОтключитьОбработчикОжидания("ОбновитьЗаказНаМонитореГостя");
	глОтсечкаПростоя();
	Если Не ЗначениеЗаполнено(ВыбТов) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	
	Если Не ВводТоваровДоступен() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	фАлкоголь = ВыбТов.фАлкоголь;
	ГруппаКонтроля = ВыбТов.ГруппаКонтроляПродажи;
	Если Не ВыполнитьКонтроль(ГруппаКонтроля, фАлкоголь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Количество) Тогда
		Если ЗначениеЗаполнено(ТекКоличество) Тогда
			Количество = ТекКоличество;
			Если Не ВыбТов.ЗапросКоличества Тогда
				Если Количество <> Цел(Количество) Тогда
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Неверное количество", "Количество для данного товара не может быть дробным","","ОК","");	
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Количество = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Количество > 1 И фАлкоголь = 1 Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Неверное количество", "Количество для данного товара 
		|не может быть больше 1 бутылки!","","ОК","");	
		Возврат Неопределено;
	КонецЕсли;

	ПДФ = ПДФ;

	//Если фАлкоголь = 1 Тогда // Крепкий алкоголь
	//	МаксимальноеКоличествоПДФвЧеке = Константы.МаксимальноеКоличествоПДФвЧеке.Получить();
	//	МаксимальноеКоличествоПДФвЧеке = ?(МаксимальноеКоличествоПДФвЧеке, МаксимальноеКоличествоПДФвЧеке, 150);
	//	Если ТекущийДокумент.Товары.НайтиСтроки(Новый Структура("фАлкоголь",1)).Количество() > МаксимальноеКоличествоПДФвЧеке Тогда
	//		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка проверки количества строк алкоголя", "Количество строк, отправляемых в ЕГАИС не может превышать " + МаксимальноеКоличествоПДФвЧеке,"","ОК","");	
	//		Возврат Неопределено;
	//	КонецЕсли;
	//	ПДФ = ВводПДФ(ВыбТов);
	//	Если Не ЗначениеЗаполнено(ПДФ) Тогда
	//		Возврат Неопределено;
	//	КонецЕсли;
	//	Количество = 1;
	//КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ШК) Тогда
		ШК = ОбщегоНазначенияПовтИсп.НайтиПоРеквизиту("Справочник.Штрихкоды", "Товар", ВыбТов, Ложь);
		Если Не ЗначениеЗаполнено(ШК) Тогда
			ШК = " ";
		КонецЕсли;
	КонецЕсли;
	
	ЦенаТовара = ЦенаТовара(ВыбТов).Цена;
	Цена = ЦенаТовара;
	
	МаксимальнаяСумма = Константы.МаксимальнаяСуммаВстрокеЧека.Получить();
	МаксимальнаяСумма = ?(МаксимальнаяСумма, МаксимальнаяСумма, 1000);
	Если МаксимальнаяСумма < Цена*Количество Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Слишком большая сумма строки","Максимальная сумма в строке чека - " + МаксимальнаяСумма + " " + глСимволРубля,"","ОК","",,0);
		Возврат Неопределено;
	КонецЕсли;

	Док1 = ТекущийДокумент.ПолучитьОбъект();
	
	Нов = Док1.Товары.Добавить();
	Нов.ЦенаРеализации = Цена;
	Нов.СуммаРеализации = Цена * Количество;
	
	Нов.Товар 		= ВыбТов;
	Нов.ПДФ 		= ПДФ;
	Нов.Автор 		= глПользователь;
	Нов.фАлкоголь 	= фАлкоголь;
	Нов.Количество 	= Количество;
	Нов.КоличествоНачальное = Количество;
	Нов.Цена 		= Цена;
	Нов.Сумма 		= Нов.Цена * Нов.Количество;
	Нов.ШК 			= ШК;
	Нов.Фирма 		= ФирмаПоТовару(ВыбТов);
	Нов.идСтроки 	= Док1.идСтроки(Нов.НомерСтроки);
	Нов.ВремяДобавления = ТекущаяДатаНаСервере();
	Нов.СтатусОплаты = -1;
	Нов.РабочееМесто = глРабочееМесто;
	
	ТекКоличество = 1;
	ЗаписатьЗаказ(док1);
	
	//ВыводНаДПТекущейСтроки(Нов);
	ГлавнаяФорма.ПодключитьОбработчикОжидания("ОбновитьЗаказНаМонитореГостя", 0.5, Истина);
	//ПоказатьЗаказНаМонитореГостя();
	Возврат Нов.ИдСтроки;
КонецФункции

// повторение но с ссылкой
// заказ1 - объект
Процедура ЗаписатьЗаказ(Заказ1, Статус = Неопределено) Экспорт 
	
	ГлавнаяФорма.ОтключитьОбработчикОжидания("ОбновитьНадписьИтого");
	
	Если НЕ ПроверитьБлокировкуЗаказа(Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Заказ1.НомерКартыЛояльности = Заказ.НомерКартыЛояльности Тогда
		// необходимо проверить, а не было ли по заказу оплаты.
		// если была, то смена карты лояльности недопустима.
		Если ЗаказОплачен(Заказ) Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Предупреждение","Заказ частично или полностью оплачен!","Нельзя сменить карту КеГеЛьБУМ у оплаченного заказа.","","ОК","");
			ГлавнаяФорма.ОбновитьНадписьИтого();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекСтатус = ПолучитьСтатусЗаказа(Заказ);
	Если ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Закрыт") 
		ИЛИ ТекСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Удален") Тогда
		Текст1="Заказ не открыт!";
		Текст2="Этот заказ " + ТекСтатус + ". 
		|Редактирование не возможно!";
		
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
		СброситьТекущийДокумент();
		Заблокировать();
		Возврат;
	КонецЕсли;
	
	Если Заказ1.Смена.Пустая() Тогда
		Заказ1.Смена = ИнтерфейсРМ.ТекущаяСмена();
	КонецЕсли;
	
	Если Статус = Неопределено Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт");
	КонецЕсли;

	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Удален") Тогда
		Для каждого Т Из Заказ1.Товары Цикл
			Т.КоличествоУдалено = Т.КоличествоНачальное;
			Т.Количество = 0;
			Т.СуммаРеализации = 0;
			Т.Сумма = 0;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		ЗаписьЖурналаРегистрации("Изменение статуса заказа", УровеньЖурналаРегистрации.Информация,,ТекущийДокумент.Ссылка, Статус);	
	Исключение
	КонецПопытки;
	
	
	Заказ1.Записать();
	ЛояльностьДанныеЗаказа = ЛояльностьКлиент.ПолучитьДанныеЛояльностиПоЗаказу(Заказ1, "");
	Заказ1.Записать();
	
	СсылкаЗаказ = Заказ.Ссылка;
	Оповестить("ИзменениеЗаказаНаСтанцииСканирования", СсылкаЗаказ, ГлавнаяФорма);
	//ОповеститьОбИзменении(СсылкаЗаказ);
	
	НЗ = РегистрыСведений.ЗаказДопИнф.СоздатьНаборЗаписей();
	НЗ.Отбор.Заказ.Установить(СсылкаЗаказ);
	НЗ.Прочитать();
	
	Если НЗ.Количество() Тогда
		ЗаписьРегистра = НЗ[0];
	Иначе 
		ЗаписьРегистра = НЗ.Добавить();
		ЗаписьРегистра.Заказ = СсылкаЗаказ;
		ЗаписьРегистра.ДатаОткрытия = ДатаОткрытия;
	КонецЕсли;
	
	ЗаписьРегистра.Статус = Статус;
	
	//МЗ = РегистрыСведений.ЗаказДопИнф.СоздатьМенеджерЗаписи();
	//МЗ.Заказ = СсылкаЗаказ;
	//МЗ.Прочитать();
	//МЗ.Статус = Статус;
	
	Если Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт") Тогда
		ЗаписьРегистра.ДатаЗакрытия = ТекущаяДатаНаСервере();
		//МЗ.ДатаЗакрытия = ТекущаяДатаНаСервере();
		
		Если ЗначениеЗаполнено(Заказ1.КартаДоступа) Тогда
			ксТрактир.ОсвободитьКартуДоступа(Заказ1.КартаДоступа);
		КонецЕсли;
	Иначе
		//Если НЕ ЗначениеЗаполнено(МЗ.ДатаОткрытия) Тогда
		//	МЗ.ДатаОткрытия = ДатаОткрытия;
		//КонецЕсли;
		
		Если ЗначениеЗаполнено(Заказ1.КартаДоступа) Тогда
			ксТрактир.РегистрацияЗаказаПоКартеДоступа(Заказ1.КартаДоступа, Заказ1.Ссылка);
		КонецЕсли;

	КонецЕсли;
	
	НЗ.Записать(Истина);	
	
	ПривязатьЗаказККассиру();
	
	//Лояльность.ОбновитьПредварительныйРасчетЗаказа(Заказ, глПараметрыРМ.Тест);       
	ГлавнаяФорма.ПодключитьОбработчикОжидания("ОбновитьНадписьИтого", 0.5, Истина);
	
КонецПроцедуры

#Область МониторГостя

Функция ПоказатьЗаказНаМонитореГостя() Экспорт
	
	Если Заказ.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипКолво = ПолучитьОписаниеТиповЧисла(10,3);
	ТипСумма = ПолучитьОписаниеТиповЧисла(12,2);                                                                              
	
	Попытка
		НомерСтроки = ГлавнаяФорма.ЭлементыФормы.тпТовары.ТекущаяСтрока.НомерСтроки;
	Исключение
		НомерСтроки = Заказ.Товары.Количество();	
	КонецПопытки;
	ДопПараметрыИнфо.НомерСтрокиЗаказа = НомерСтроки;
	ДопПараметрыИнфо.СуммаПоСтанцииНач = СуммаРеализации();
	ДопПараметрыИнфо.СброситьНастройки = Ложь;
	
	ТаблицаЗаказа = Новый ДеревоЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Ном"			, , "№", 5 );	// только для отображения номера строки
	// < КС_ВДВ ------------------------------------------------------------ 
	//ТаблицаЗаказа.Колонки.Добавить("Статус"			, , " ", 3 );
	
	// Новая колонка "Станция" - будет отображаться
	ТаблицаЗаказа.Колонки.Добавить("Станция"		,Новый ОписаниеТипов("СправочникСсылка.Станции"), "Станция", 15);
	ТаблицаЗаказа.Колонки.Добавить("Фирма"			,Новый ОписаниеТипов("СправочникСсылка.Фирмы"), "ФИрма", 15);
	
	// *** Колонка "Статус" хранит статус строки заказа; 
	// *** По умолчанию в табличном поле в этой колонке выводится курс подачи или флажок статуса
	//
	//ТаблицаЗаказа.Колонки.Добавить("Статус"			, , "Марка", 5 ); 	// будем выводить № марки - уже не нужно
	ТаблицаЗаказа.Колонки.Добавить("Статус"			, , " ", 5 ); 			// будем выводить курс для всех статусов; вместо флажков - цвет фона
	ТаблицаЗаказа.Колонки.Добавить("СтатусОплаты"			, , " ", 5 ); 			// будем выводить курс для всех статусов; вместо флажков - цвет фона
	
	// Новая колонка "СтрокаТаблицыЗаказа" - служебная, скрытая.
	// Заполняется только в таблице ТаблицаЗаказаОтбор; в ТаблицаЗаказа она не заполняется.
	// Используется для хранения ссылки на соответствующую строку таблицы ТаблицаЗаказа. 
	ТаблицаЗаказа.Колонки.Добавить("СтрокаТаблицыЗаказа");
	
	ТаблицаЗаказа.Колонки.Добавить("НомерМарки");
	// КС_ВДВ > ------------------------------------------------------------ 
	ТаблицаЗаказа.Колонки.Добавить("ПолеСортировки");				// используется только в процедуре упаковки для сортировки строк
	ТаблицаЗаказа.Колонки.Добавить("АвтоПозиция"	,Новый ОписаниеТипов("Булево") );
	ТаблицаЗаказа.Колонки.Добавить("Товар");
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("Наименование"	,ПолучитьОписаниеТиповСтроки(), , 30 );
	ТаблицаЗаказа.Колонки.Добавить("Количество"		,ТипКолво, "Кол."	, 8 );
	ТаблицаЗаказа.Колонки.Добавить("Удалено"		,ТипКолво, "Удал."	, 5 );
	ТаблицаЗаказа.Колонки.Добавить("УдаленоСейчас"	,ТипКолво);
	ТаблицаЗаказа.Колонки.Добавить("ТипЦен");
	ТаблицаЗаказа.Колонки.Добавить("Цена"			,ТипСумма, "Цена"	, 10 );
	ТаблицаЗаказа.Колонки.Добавить("Сумма"			,ТипСумма, "Сумма"	, 10 );
	ТаблицаЗаказа.Колонки.Добавить("СуммаСкидки"	,ТипСумма);
	ТаблицаЗаказа.Колонки.Добавить("ЦенаРеализации"	,ТипСумма, "Цена"	, 10 );
	ТаблицаЗаказа.Колонки.Добавить("СуммаРеализации",ТипСумма, "Сумма"	, 10 );
	ТаблицаЗаказа.Колонки.Добавить("КГЛ");
	ТаблицаЗаказа.Колонки.Добавить("ГруппаАкции");
	ТаблицаЗаказа.Колонки.Добавить("Категория");
	ТаблицаЗаказа.Колонки.Добавить("ГруппаПечати");
	ТаблицаЗаказа.Колонки.Добавить("Автор");
	ТаблицаЗаказа.Колонки.Добавить("Подача");
	ТаблицаЗаказа.Колонки.Добавить("Подарок"		,Новый ОписаниеТипов("СправочникСсылка.Скидки") );
	ТаблицаЗаказа.Колонки.Добавить("ИдСтроки");
	ТаблицаЗаказа.Колонки.Добавить("Источник");
	ТаблицаЗаказа.Колонки.Добавить("КодПодтверждения");
	ТаблицаЗаказа.Колонки.Добавить("СтатусДопИнф");
	//Z+
	ТаблицаЗаказа.Колонки.Добавить("Порядок");
	ТаблицаЗаказа.Колонки.Добавить("ПорядокСпецифики");
	//ЛояльностьДанныеЗаказа = ЛояльностьКлиент.ПолучитьДанныеЛояльностиПоЗаказу(Заказ.Ссылка);
	
	Для Каждого стТовары Из Заказ.Товары Цикл
		НовСтр = ТаблицаЗаказа.Строки.Добавить();
		НовСтр.Наименование = СокрЛП(Строка(стТовары.Товар));
		ЗаполнитьЗначенияСвойств(НовСтр, стТовары);
		НовСтр.ГруппаАкции = стТовары.ЛояльностьГруппаАкции;
		Если ТипЗнч(ЛояльностьДанныеЗаказа) = Тип ("Структура") Тогда
			Для Каждого Т Из ЛояльностьДанныеЗаказа.СоставЗаказа Цикл // TODO переделать
				Если Т.ИдСтроки = стТовары.ИдСтроки Тогда
					НовСтр.КГЛ = (Формат(Т.КГЛНачислено,"ЧН=' '"));
					//ТекстАкций = ГруппыАкций.Получить(Т.ГруппаАкции);
					//ТекстАкций = ?(ТекстАкций = Неопределено, "", ТекстАкций);
					//НовСтр.ГруппаАкции = Т.ГруппаАкции;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;	
	
	ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ, ТаблицаЗаказа, Неопределено, ДопПараметрыИнфо);
КонецФункции

Функция СуммаРеализации() Экспорт
	Товары = Заказ.Товары;
	СуммаРеализации = 0;
	Для Каждого Т Из Товары Цикл
		Если Т.СтатусОплаты=-1 И глПараметрыРМ.Фирма = Т.Фирма Тогда
			СуммаРеализации = СуммаРеализации + Т.СуммаРеализации;
		КонецЕсли;
	КонецЦикла;
	Возврат СуммаРеализации;
КонецФункции

#КонецОбласти


Функция НомерТекущегоЗаказа() Экспорт
	Попытка
		НомерТекущегоЗаказа = Число(УбратьВсеБуквы(ТекущийДокумент.Номер));
		НомерТекущегоЗаказа = Формат(НомерТекущегоЗаказа, "ЧГ=0");
		Возврат НомерТекущегоЗаказа;
	Исключение
		Если ТипЗнч(ТекущийДокумент) = Тип("Строка") ИЛИ НЕ ЗначениеЗаполнено(ТекущийДокумент) Тогда
			Возврат "";
		Иначе
			Возврат ТекущийДокумент.Номер;
		КонецЕсли;
	КонецПопытки;
КонецФункции

Процедура ОчиститьСообщенияТО() Экспорт 
	
	DRV = глТорговоеОборудование.Scaner1C;
	Пока DRV.DataCount Цикл
		DRV.УдалитьСообщение();
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПривязатьЗаказККассиру()
	ЗаказыПоКассирам = РегистрыСведений.ЗаказыПоКассирам.СоздатьМенеджерЗаписи();
	ЗаказыПоКассирам.Заказ = Заказ;
	ЗаказыПоКассирам.Кассир = глПользователь;
	ЗаказыПоКассирам.Записать(Истина);
КонецПроцедуры

Процедура ОтвязатьЗаказОтКассира()
	ЗаказыПоКассирам = РегистрыСведений.ЗаказыПоКассирам.СоздатьНаборЗаписей();
	ЗаказыПоКассирам.Отбор.Кассир.Установить(глПользователь);
	ЗаказыПоКассирам.Записать();
КонецПроцедуры

Функция ПроверитьДубльВесовогоТовара(Товар, Количество, ШК)
	
	Если НЕ Товар.ЗапросКоличества Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Запрос.УстановитьПараметр("Товар", Товар);
	Запрос.УстановитьПараметр("Количество", Количество);
	Запрос.УстановитьПараметр("ШК", ШК);

	Запрос.Текст = 
	"ВЫБРАТЬ первые 1
	|	ЗаказТовары.Товар КАК Товар
	|ИЗ
	|	Документ.Заказ.Товары КАК ЗаказТовары
	|ГДЕ
	|	ЗаказТовары.Ссылка = &Заказ
	|	И ЗаказТовары.Товар = &Товар
	|	И ЗаказТовары.Количество = &Количество
	|	И ЗаказТовары.ШК = &ШК";
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Добавление весового товара по штрихкоду", 
			"Товар присутствует в заказе", 
			"Сканируемый товар уже присутствует в заказе с идентичным весом. Добавить товар все равно?", 
			"Esc=НЕТ",
			,
			"ДА",
			,,10,,);
		Возврат Ответ = "ДА";
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСтатусЗаказа(ЗаказСсылка)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказДопИнф.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|ГДЕ
	|	ЗаказДопИнф.Заказ = &ЗаказСсылка";
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.ПустаяСсылка");
	КонецЕсли;
	
	ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	ВыборкаЗапроса.Следующий();
	
	Возврат ВыборкаЗапроса.Статус;
КонецФункции

Функция ЗаказОплачен(ЗаказСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказТовары.ДокументОплаты КАК ДокументОплаты
	|ИЗ
	|	Документ.Заказ.Товары КАК ЗаказТовары
	|ГДЕ
	|	ЗаказТовары.Ссылка = &ЗаказСсылка
	|	И НЕ ЗаказТовары.ДокументОплаты = ЗНАЧЕНИЕ(Документ.ПротоколРасчетов.ПустаяСсылка)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	 	
КонецФункции

#Область Весы

Функция КонтрольныйСимвол(ШК)

	Результат   = "";
	Сумма       = 0;
	Коэффициент = 1;
	
	Для Индекс = 1 По 12 Цикл
		ВремКодСимвола = КодСимвола(ШК, Индекс);
		Сумма       = Сумма + Коэффициент * (ВремКодСимвола - 48);
		Коэффициент = 4 - Коэффициент;
	КонецЦикла;
	Сумма     = (10 - Сумма % 10) % 10;
	Результат = Символ(Сумма + 48);
	
	Возврат Результат;
	
КонецФункции 

Функция ШтрихкодСВесом(Знач ШК, Знач Вес) Экспорт 
	
	ШК = Лев(ШК,7) + Прав("00000" + Формат(Вес*1000,"ЧН=0; ЧГ=0"),5);
	ШК = ШК + КонтрольныйСимвол(ШК);
	Возврат ШК;
	
КонецФункции

Процедура НапечататьЦенник(ВыбТов, ШК, Вес) Экспорт 
	Таб = Новый ТабличныйДокумент;
	макет = ПолучитьМакет("Макет");
	ОбластьЭтикетка = макет.ПолучитьОбласть("Строка|Колонка");
	ОбластьЭтикетка.Параметры.Масса = Вес;
	Цена = ЦенаТовара(ВыбТов).Цена;
	ОбластьЭтикетка.Параметры.Цена = Цена;
	ОбластьЭтикетка.Параметры.Сумма = Окр(Число(Цена)*Вес,2);
	ОбластьЭтикетка.Параметры.ДатаВремя = ТекущаяДата();
	ОбластьЭтикетка.Параметры.наименование = ВыбТов.наименование;
	ОбластьЭтикетка.Параметры.Состав = ВыбТов.Номенклатура.ИнформацияДляВесов;//Товар["Состав"];
	ОбластьЭтикетка.Параметры.Фирма = глРабочееМесто.Фирма.НаименованиеЮридическогоЛица;
	ОбластьЭтикетка.Параметры.Адрес = глРабочееМесто.Фирма.Адрес;
	ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиШтрихкодов","КартинкаШтрихкода",ТипВнешнейКомпоненты.Native);
	ВнешняяШК = Новый("AddIn.КартинкаШтрихкода.Barcode");
	Если не ВнешняяШК.ГрафикаУстановлена ТОгда
		ЗаписьЖурналаРегистрации("Ошибка выполнения.Ошибка формирования ШК", УровеньЖурналаРегистрации.Ошибка,,,);
		Возврат;
	КонецЕсли;
	Если ВнешняяШК.НайтиШрифт("Tahoma") Тогда
		ВнешняяШК.Шрифт = "Tahoma";
	Иначе
		// Шрифт Tahoma в системе отсутствует.
		// Обойдем все доступные компоненте шрифты.
		Для Сч = 0 По ВнешняяШК.КоличествоШрифтов -1 Цикл
			// Получим очередной шрифт, доступный компоненте.
			ТекущийШрифт = ВнешняяШК.ШрифтПоИндексу(Сч);
			// Если шрифт доступен
			Если ТекущийШрифт <> Неопределено Тогда
				// Они и будет шрифтом для формирования штрихкода.
				ВнешняяШК.Шрифт = ТекущийШрифт;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ВнешняяШК.РазмерШрифта = 12;
	ВнешняяШК.Ширина = 260;//ОбластьЭтикетка.Рисунки.Штрихкод.Ширина*2;  было 250
	ВнешняяШК.Высота = 90;//ОбластьЭтикетка.Рисунки.Штрихкод.Высота*3;   было 61
	ВнешняяШК.АвтоТип = Ложь;
	ВнешняяШК.ТипКода = 1;
	ВнешняяШК.ОтображатьТекст = Истина;
	//шк = Лев(шк,7) + Прав("00000" + Формат(Вес*1000,"ЧН=0; ЧГ=0"),5);
	ВнешняяШК.ЗначениеКода = ШК;// + КонтрольныйСимвол(ШК);
	
	Если ВнешняяШК.Ширина < ВнешняяШК.МинимальнаяШиринаКода Тогда
		ВнешняяШК.Ширина = ВнешняяШК.МинимальнаяШиринаКода;
	КонецЕсли;
	Если ВнешняяШК.Высота < ВнешняяШК.МинимальнаяВысотаКода Тогда
		ВнешняяШК.Высота = ВнешняяШК.МинимальнаяВысотаКода;
	КонецЕсли;
	
	ОбластьЭтикетка.рисунки.Штрихкод.Картинка = Новый Картинка(ВнешняяШК.ПолучитьШтрихкод());
	Таб.Вывести(ОбластьЭтикетка);
	Таб.ИмяПринтера = глПараметрыРМ.ИмяПринтераВесы;//"TSC TDP-225";
	Таб.АвтоМасштаб = Истина;
	таб.ПолеСверху = 0;  // было 3
	таб.ПолеСлева = 0;
	таб.ПолеСнизу = 0;
	таб.ПолеСправа = 0;
	таб.Напечатать();
КонецПроцедуры

#КонецОбласти

Процедура СоздатьЗаказ(Автор,КартаДоступа)
	
	ДатаОткрытия = ТекущаяДатаНаСервере();
	
	Заказ1 = Документы.Заказ.СоздатьДокумент();
	Заказ1.КартаДоступа = КартаДоступа;
	Заказ1.Дата = ДатаОткрытия;
	Заказ1.Автор = Автор;
	Заказ1.МестоРеализации = глПараметрыРМ.МестоРеализации;
	Заказ1.РабочееМесто = глРабочееМесто;
	Заказ1.Смена = ИнтерфейсРМ.ТекущаяСмена();
	Заказ1.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
	Заказ1.УстановитьНовыйНомер("000");
	Заказ1.Записать();
	Заказ = Заказ1.Ссылка;
	ЗаписатьЗаказ(Заказ1);
	
	//ДГ+
	ДопПараметрыИнфо.СуммаПоСтанцииНач = СуммаРеализации();
	ДопПараметрыИнфо.СброситьНастройки = Ложь;
	ПоказатьЗаказНаМонитореГостя();
	//ДГ-

	фВводТоваровДоступен = Истина;
	ТекущийДокумент = Заказ;
	ГлавнаяФорма.ОбновитьВремя();
	
КонецПроцедуры

//проверка и открытие заказа по продавцу
//
Функция ОткрытьЗаказПоПродавцуКарте(Продавец = Неопределено, КартаДоступа = Неопределено)
	//Заказ = Документы.Заказ.СоздатьДокумент();
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОткрытыеЗаказыПоКартам.Заказ КАК Заказ,
	               |	ОткрытыеЗаказыПоКартам.КартаДоступа КАК КартаДоступа
	               |ИЗ
	               |	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	               |ГДЕ
	               |	ОткрытыеЗаказыПоКартам.ТекущийАвтор = &параметр";
	Если Продавец = Неопределено и КартаДоступа <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ОткрытыеЗаказыПоКартам.ТекущийАвтор = &параметр","ОткрытыеЗаказыПоКартам.КартаДоступа = &параметр");
		Запрос.УстановитьПараметр("параметр",КартаДоступа);
	Иначе
		Запрос.УстановитьПараметр("параметр",Продавец);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Продавец <> Неопределено и Выборка.Количество() = 0 Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПоКассирам.Заказ КАК Заказ
		               |ИЗ
		               |	РегистрСведений.ЗаказыПоКассирам КАК ЗаказыПоКассирам
		               |ГДЕ
		               |	ЗаказыПоКассирам.Кассир = &Кассир";
		Запрос.УстановитьПараметр("Кассир",Продавец);
		Выборка = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	Если Выборка.Количество() <> 0 ТОгда
		Выборка.Следующий();
		Возврат ОткрытьЗаказ(Выборка.Заказ);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// проверяет есть ли открытые заказы по продавцу
//
Функция ЕстьЗаказыПоПродавцуКарте(Продавец = Неопределено, КартаДоступа = Неопределено) 
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОткрытыеЗаказыПоКартам.Заказ КАК Заказ,
	               |	ОткрытыеЗаказыПоКартам.КартаДоступа КАК КартаДоступа
	               |ИЗ
	               |	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	               |ГДЕ
	               |	ОткрытыеЗаказыПоКартам.ТекущийАвтор = &параметр";
	Если Продавец = Неопределено и КартаДоступа <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ОткрытыеЗаказыПоКартам.ТекущийАвтор = &параметр","ОткрытыеЗаказыПоКартам.КартаДоступа = &параметр");
		Запрос.УстановитьПараметр("параметр",КартаДоступа);
	Иначе
		Запрос.УстановитьПараметр("параметр",Продавец);
	КонецЕсли;
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() и Продавец <> Неопределено Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЗаказыПоКассирам.Заказ КАК Заказ
		               |ИЗ
		               |	РегистрСведений.ЗаказыПоКассирам КАК ЗаказыПоКассирам
		               |ГДЕ
		               |	ЗаказыПоКассирам.Кассир = &Кассир";
		Запрос.УстановитьПараметр("Кассир",Продавец);
		Рез = Запрос.Выполнить();
	КонецЕсли;
	Возврат не Рез.Пустой();
		
КонецФункции

// Формирование массива подключаемого на РМ торгового оборудования 
//
Функция ПолучитьМассивПодключаемогоТО()
	
	МассивТО = Новый Массив;
	
	Если глПараметрыРМ.ДПЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.ДП);
	КонецЕсли;
	
	Если глПараметрыРМ.ИнфоДисплейЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.ИнфоДисплей);
	КонецЕсли;
	
	Если глПараметрыРМ.ВесыЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.Весы);
	КонецЕсли;
	
	ЕстьСчитыватель = Ложь;
	Для каждого ТО Из глПараметрыРМ.СписокСУ Цикл
		МассивТО.Добавить(ТО.Значение);
		Если Найти("РидерМК,Проксимити,ПроксимитиPERCo", ТО.Значение.КодМодели) Тогда
			ЕстьСчитыватель = Истина;
		КонецЕсли; 
	КонецЦикла;
	глПараметрыРМ.Вставить("ЕстьСчитыватель", ЕстьСчитыватель);
	
	Если глПараметрыРМ.СпецКВЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.СпецКВ);
	КонецЕсли;
	
	Если глВерсия=3 Тогда
		Для каждого ТО Из глПараметрыРМ.СписокКЭП Цикл
			МассивТО.Добавить(ТО.Значение);
		КонецЦикла;
		
		Если глПараметрыРМ.РегистрацияСобытийВидеоЕсть Тогда
			МассивТО.Добавить(глПараметрыРМ.РегистрацияСобытийВидеонаблюдение);
		КонецЕсли; 
	КонецЕсли; 
	
	// ККМ и Принтеры не занимают порты постоянно, поэтому для корректной проверки подключаем их после сканеров
	// и прочих дисплеев, которые захватывают порт на все время работы
	Если глПараметрыРМ.ККМЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.ККМ);
	КонецЕсли;
	
	Если глПараметрыРМ.ККМЕстьДоп Тогда
		Для каждого ТО Из глПараметрыРМ.ККМСписокДоп Цикл
			МассивТО.Добавить(ТО.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаГП Из глПараметрыРМ.ГруппыПечати.Строки Цикл
		Если НЕ СтрокаГП.ПроверкаСвязи Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаГП.Принтер) Тогда
			Принтер = СтрокаГП.Принтер;
		Иначе
			Попытка
				Принтер = СтрокаГП.Группа.Оборудование[0].Принтер;
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли; 
		
		МассивТО.Добавить(Принтер);
	КонецЦикла;
	
	Если глПараметрыРМ.ПечатьСчета Тогда
		МассивТО.Добавить(глПараметрыРМ.ПечатьСчетаПринтер);
	КонецЕсли; 
	
	Возврат МассивТО;
КонецФункции

Функция ФирмаПоТовару(Товар)
	
	Возврат глПараметрыРМ.Фирма;
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	ТоварыПоФирмам.Фирма
	//|ИЗ
	//|	РегистрСведений.ТоварыПоФирмам КАК ТоварыПоФирмам
	//|ГДЕ
	//|	ТоварыПоФирмам.ИнформационнаяБаза = &ИнформационнаяБаза
	//|	И ТоварыПоФирмам.ВидМеню = &ВидМеню");	
	//Запрос.УстановитьПараметр("ВидМеню", Товар.Владелец);
	//Запрос.УстановитьПараметр("ИнформационнаяБаза", ПараметрыСеанса.ТекущаяИБ);
	//тзФирмаИзРегистра = Запрос.Выполнить().Выгрузить(); 
	//Если тзФирмаИзРегистра.Количество() Тогда
	//	Возврат тзФирмаИзРегистра[0][0];
	//Иначе
	//	Возврат Константы.ОсновноеМестоРеализации.Получить().Фирма;
	//КонецЕсли;
	
КонецФункции

Функция ВводТоваровДоступен()
	
	Возврат фВводТоваровДоступен;
	
	//Попытка
	//	Если Не фВводТоваровДоступен Тогда
	//		
	//		Если ТекущийДокумент.Заблокирован Тогда
	//			Заголовок = "Заказ заблокирован, обратитесь в ОТК";
	//			ТекстОшибки = "Добавление позиций и сторнирование в заблокированном заказе 
	//			|недоступно!";
	//		ИначеЕсли Не ПротоколРасчетов.Пустая() И ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) И Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
	//			Заголовок = "Заказ был отправлен в ЕГАИС";
	//			ТекстОшибки = "Пробейте чек или обратитесь в ОТК"
	//		Иначе
	//			Заголовок = "Заказ оплачен";
	//			ТекстОшибки = "Заказ был оплачен. Добавление позиций и сторнирование в оплаченном заказе 
	//			|недоступно!";
	//		КонецЕсли;
	//		
	//		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Заголовок, ТекстОшибки, "", "ОК", "", , , );
	//		ГлавнаяФорма.ПодключитьОбработчикОжидания("Оплата", 0.2, 1);
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//	Возврат Истина;
	//Исключение
	//	Возврат Истина;
	//КонецПопытки;
	
КонецФункции

// Выбор конкретного товара для ввода из списка предложенных
//
Функция ВыбратьТоварИзСписка(МассивТоваров)
	
	Возврат МассивТоваров[0];
	МассивТоваров = РазвернутьМассивТоваров(МассивТоваров);
	
	Если МассивТоваров.Количество()=0 Тогда
		Возврат Справочники.Товары.ПустаяСсылка();
	ИначеЕсли МассивТоваров.Количество()=1 Тогда
		Возврат МассивТоваров[0];
	Иначе	
		Возврат ИнтерфейсРМ.ВыборИзСписка(МассивТоваров);
	КонецЕсли;
	
КонецФункции

// В исходном списке могут быть и товары "не в продаже" и группы,
// надо из него получить полный список всех товаров "в продаже"
Функция РазвернутьМассивТоваров(МассивТоваров)
	
	МассивДляВыбора = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка ИЗ Справочник.Товары
	|ГДЕ Ссылка В ИЕРАРХИИ (&МассивТоваров) И НЕ ЭтоГруппа И НЕ ПометкаУдаления И ЕстьВПродаже
	|
	|УПОРЯДОЧИТЬ ПО Порядок");
	
	Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивДляВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	
	Если МассивДляВыбора.Количество()=0 Тогда
		Текст1="Нет доступа!";
		
		Если МассивТоваров.Количество()=1 Тогда
			Тов = МассивТоваров[0];
			Если Тов.ЭтоГруппа Тогда
				Текст2="В группе """+Тов.Наименование+""" ничего нет в продаже...";
			Иначе
				Текст2="Товара """+Тов.Наименование+""" нет в продаже...";
			КонецЕсли;
		Иначе
			Текст2="Среди выбранных товаров ничего нет в продаже...";
		КонецЕсли;
		
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
	КонецЕсли;
	
	Возврат МассивДляВыбора;
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

Процедура ГлавнаяФорма_ЗавершитьРаботуСистемы() Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СУП ККМ

// Выводит диалог ввода возраста, если по заказу возраст еще не запрашивался
//
// Параметры:
//  Заказ  				- ДокументОбъект.Заказ
//	МинимальныйВозраст  - Число - минимальный возраст, лет
//
// Возвращаемое значение:
//   Булево
//
Функция КонтрольВозвраста(ГруппаКонтроля, фАлкоголь)
	МинимальныйВозраст = МинимальныйВозраст(ГруппаКонтроля);
	ПервыйВводДаты = Ложь;
	ДатаРождения = Заказ.ДатаРождения;
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		ПервыйВводДаты = Истина;
		ДатаРождения = ИнтерфейсРМ.ВводДаты("Введите дату рождения покупателя");
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Контроль возраста", "Ошибка ввода даты", "Некорректная дата.
		|Дата вводится в формате `23.06.1989`","","ОК","");
		ДатаРождения = '00010101';
		Возврат Ложь
	КонецЕсли;
	
	Если ДатаРождения < Дата(1880,1,1) Тогда // Надеюсь, не будет более "взрослых" покупателей
		ИнтерфейсРМ.ВопросПредупреждение("Контроль возраста", "> 140 лет", "Некорректная дата.
		|Дата вводится в формате `23.06.1989`","","ОК","");
		Заказ.ДатаРождения = '00010101';
		Возврат Ложь;
	КонецЕсли;
	
	Если ДобавитьМесяц(ДатаРождения, 12 * МинимальныйВозраст) > ТекущаяДатаНаСервере() Тогда 
		ИнтерфейсРМ.ВопросПредупреждение("Контроль возраста", "Продажа данного товара запрещена", "Покупателю меньше " + МинимальныйВозраст + " лет." ,"","ОК","");
		//Заказ.ДатаРождения = '00010101';
		Возврат Ложь;
	ИначеЕсли ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Алкоголь и фАлкоголь = 1 Тогда
		//Заказ.ДатаРождения = ДатаРождения;
		Возврат Не ПервыйВводДаты;
	Иначе
		//Заказ.ДатаРождения = ДатаРождения;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ()

Функция ЗначениеПараметраОграничения(ПараметрОграниченийПродаж, ГруппаКонтроля)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗначенияПараметровОграниченийПродажи.ЗначениеПараметраОграничения
	|ИЗ
	|	РегистрСведений.ЗначенияПараметровОграниченийПродажи КАК ЗначенияПараметровОграниченийПродажи
	|ГДЕ
	|	ЗначенияПараметровОграниченийПродажи.КодГруппыОграниченияПродажи = &КодГруппыОграниченияПродажи
	|	И ЗначенияПараметровОграниченийПродажи.ГруппаКонтроляПродажи = &ГруппаКонтроляПродажи
	|	И ЗначенияПараметровОграниченийПродажи.ПараметрОграниченийПродаж = &ПараметрОграниченийПродаж");
	Запрос.УстановитьПараметр("КодГруппыОграниченияПродажи", ПараметрыСеанса.ТекущаяИБ.КодГруппыОграниченияПродажи);
	Запрос.УстановитьПараметр("ГруппаКонтроляПродажи", ГруппаКонтроля);
	Запрос.УстановитьПараметр("ПараметрОграниченийПродаж", ПараметрОграниченийПродаж);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда Возврат Неопределено Иначе Возврат Рез.Выгрузить()[0][0] КонецЕсли;
	
КонецФункции

Функция МинимальныйВозраст(ГруппаКонтроля)
	
	МинимальныйВозраст = ЗначениеПараметраОграничения(Справочники.ПараметрыОграниченийПродаж.МинимальныйВозраст, ГруппаКонтроля);
	Если МинимальныйВозраст = Неопределено Тогда МинимальныйВозраст = 0 КонецЕсли;
	Попытка
		МинимальныйВозраст = Число(МинимальныйВозраст);
	Исключение
		МинимальныйВозраст = 18;
	КонецПопытки;
	
	Если ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Алкоголь ИЛИ ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Сигареты Тогда
		МинимальныйВозраст = Макс(18, МинимальныйВозраст);
	КонецЕсли;
	
	Возврат МинимальныйВозраст;
	
КонецФункции

Функция ВремяПродажиВрамках(ГруппаКонтроля)
	Результат = Ложь;
	// Время хранится строкой, в формате "8-21" (или "8:30-21:30")
	ВремяПродажи = ЗначениеПараметраОграничения(Справочники.ПараметрыОграниченийПродаж.ЧасыПродажи, ГруппаКонтроля);
	Если ВремяПродажи = Неопределено Тогда ВремяПродажи = "" КонецЕсли;
	ПозицияДефиса = СтрНайти(ВремяПродажи, "-");
	Если ПозицияДефиса > 1 Тогда
		ВремяС = Лев(ВремяПродажи, ПозицияДефиса - 1);
		ВремяПо = Сред(ВремяПродажи, ПозицияДефиса + 1);
		ВремяС = ВремяИзСтроки(ВремяС);
		ВремяПо = ВремяИзСтроки(ВремяПо);
		ТекВремя = ВремяИзДаты(ТекущаяДатаНаСервере());
		
		Результат = ЗначениеВДиапазоне(ТекВремя, ВремяС, ВремяПо);
		Если Не Результат Тогда
			//ИнтерфейсРМ.ВопросПредупреждение("Ошибка проверки времени", "Проверка времени", "Продажа " + ГруппаКонтроля + " возможна только в период " + ВремяПродажи,"" ,"ОК" ,"");	
			ТекстСообщения = "Действует ограничение времени розничной продажи алкогольной продукции.
							 |Сторнируйте чек - возможна продажа только безалкогольной продукции.";
			Если ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Энергетики Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "алкогольной продукции", "энергетиков");
			КонецЕсли;
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "В чеке есть блокированный товар!", ТекстСообщения,"" ,"ОК" ,"");	
		ИначеЕсли Не ЗначениеВДиапазоне(ТекВремя, ВремяС, ВремяПо - 300) Тогда	// за 5 минут
			ТекстСообщения = "Действует ограничение времени розничной продажи алкогольной продукции. 
							 |Возможна продажа только безалкогольной продукции.";
			Если ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Энергетики Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "алкогольной продукции", "энергетиков");
			КонецЕсли;
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Запрещена продажа товара!", ТекстСообщения,"" ,"ОК" ,"");	
			Результат = Ложь;
		Иначе
			ПредупреждатьОбОграниченииПродажи = Константы.ПредупреждатьОбОграниченииПродажи.Получить(); // параметр в минутах
			Если Не ЗначениеЗаполнено(ПредупреждатьОбОграниченииПродажи) Тогда
				ПредупреждатьОбОграниченииПродажи = 15;
			КонецЕсли;
			ВремяПо2 = ВремяПо - ПредупреждатьОбОграниченииПродажи * 60;
			Если Не ЗначениеВДиапазоне(ТекВремя, ВремяС, ВремяПо2) Тогда
				МинутДоБлокировки = Цел(((ВремяПо - 300) - ТекВремя) / 60);
				СловоМинут = СтрРазделить(ЧислоПрописью(МинутДоБлокировки, , "минуту, минуты, минут,ж")," ")[1];
				ТекстСообщения = СтрШаблон("Внимание! Через %1 %2 продажа алкогольной продукции будет запрещена.", МинутДоБлокировки, СловоМинут);
				Если ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Энергетики Тогда
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "алкогольной продукции", "энергетиков");
				КонецЕсли;
				ИнтерфейсРМ.ВопросПредупреждение("Время продажи", СтрШаблон("До наступления блокировки осталось %1 %2", МинутДоБлокировки, СловоМинут), 
												 				  ТекстСообщения, "", "ОК", "");	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка проверки времени", "Проверка времени", "Не задано допостимое время продажи для " + ГруппаКонтроля,,"ОК","");
		Результат = Ложь;
	КонецЕсли;

	Возврат Результат;
КонецФункции

Функция ВыполнитьКонтрольПоТекущемуДокументу() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 0 ЗНАЧЕНИЕ(Справочник.ГруппыКонтроляПродажи.ПустаяСсылка) ГруппаКонтроля, 0 фАлкоголь");
	ТаблицаКонтроля = Запрос.Выполнить().Выгрузить();
	Для Каждого Т Из ТекущийДокумент.Товары Цикл
		Нов = ТаблицаКонтроля.Добавить();
		Нов.ГруппаКонтроля = Т.Товар.ГруппаКонтроляПродажи;
		Нов.фАлкоголь = Т.фАлкоголь;		
	КонецЦикла;
	ТаблицаКонтроля.Свернуть("ГруппаКонтроля");
	Для Каждого Т Из ТаблицаКонтроля Цикл
		Если Не ВыполнитьКонтроль(Т.ГруппаКонтроля, 2) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Выполняет контроль по алгоритму группы контроля
//
// Параметры:
//  ГруппаКонтроля	- СправочникСсылка.ГруппыКонтроляПродажи
//
// Возвращаемое значение:
//   Булево   		- результат контрольной проверки
//
Функция ВыполнитьКонтроль(ГруппаКонтроля, фАлкоголь) Экспорт
	Результат = Истина;
	
	Если ТекущийРежим = "ВОЗВРАТ" Тогда
		Возврат Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ГруппаКонтроля) И Не ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.НетКонтроля Тогда
		
		Результат = ВремяПродажиВрамках(ГруппаКонтроля);
		Если Результат Тогда 
			Результат = КонтрольВозвраста(ГруппаКонтроля, фАлкоголь);
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции 

#Область УДАЛИТЬ

Процедура ИнициализацияЗаказа(ПриОткрытии = Ложь, КартаДоступа = Неопределено) Экспорт
	докВозврат = Неопределено;
	ТекущийДокумент = Неопределено;
КонецПроцедуры 

Процедура ИнициализацияВозврата() Экспорт
	Заказ = Неопределено;
	ТекущийДокумент = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВозвратДопИнф.Статус,
	|	ВозвратДопИнф.ПротоколРасчетов,
	|	ВозвратДопИнф.Возврат.НомерЧека НомерЧека,
	|	ВозвратДопИнф.Возврат.НомерСмены НомерСмены, Возврат, Возврат.Заблокирован Заблокирован
	|ИЗ
	|	РегистрСведений.ВозвратДопИнф КАК ВозвратДопИнф
	|ГДЕ
	|	(ВозвратДопИнф.Статус = &СтатусОткрыт
	|			ИЛИ ВозвратДопИнф.Статус = &СтатусЗакрыт
	|				И НЕ ВозвратДопИнф.ПротоколРасчетов.Фискализирован
	|			ИЛИ ВозвратДопИнф.Возврат.Заблокирован)
	|	И ВозвратДопИнф.Возврат.Смена = &Смена
	|	И ВозвратДопИнф.Возврат.РабочееМесто = &РабочееМесто
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратДопИнф.ДатаОткрытия УБЫВ");
	Запрос.УстановитьПараметр("СтатусОткрыт", ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
	Запрос.УстановитьПараметр("СтатусЗакрыт", ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Закрыт"));
	Запрос.УстановитьПараметр("РабочееМесто", глРабочееМесто);
	Запрос.УстановитьПараметр("Смена", ИнтерфейсРМ.ТекущаяСмена());
	Рез = Запрос.Выполнить();
	ПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка();
	ДатаОткрытия = ТекущаяДатаНаСервере();
	Если Рез.Пустой() Тогда
		докВозврат = Документы.Возврат.СоздатьДокумент();  
		докВозврат.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
		докВозврат.Дата = ТекущаяДатаНаСервере();
		докВозврат.Автор = глПользователь;
		докВозврат.МестоРеализации = глПараметрыРМ.МестоРеализации;
		докВозврат.РабочееМесто = глРабочееМесто;
		докВозврат.Смена = ИнтерфейсРМ.ТекущаяСмена();
		докВозврат.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
		докВозврат.ККМрабочегоМеста = глПараметрыРМ.ККМ;
		докВозврат.УстановитьНовыйНомер();
		фВводТоваровДоступен = Истина;
		
	Иначе
		ДанныеВозврата = Рез.Выгрузить()[0];
		докВозврат = ДанныеВозврата.Возврат.ПолучитьОбъект();
		докВозврат.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
		Если ЗначениеЗаполнено(ДанныеВозврата.ПротоколРасчетов) Тогда
		
			ПротоколРасчетов = ДанныеВозврата.ПротоколРасчетов;
		
		КонецЕсли; 
		Если ДанныеВозврата.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Закрыт") ИЛИ ДанныеВозврата.Заблокирован Тогда
			фВводТоваровДоступен = Ложь;
		Иначе
			фВводТоваровДоступен = Истина;
			Если Не ПротоколРасчетов.Пустая() Тогда
				Если ПротоколРасчетов.Протокол.Итог("СуммаФакт") Тогда 
					фВводТоваровДоступен = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		глПараметрыРМ.Вставить("НомерТекущегоЧека", ДанныеВозврата.НомерЧека);
	КонецЕсли;
	ТекущийДокумент = докВозврат;
	ГлавнаяФорма.ОбновитьНадписьИтого();
КонецПроцедуры 

Процедура ПроинициализироватьЗаказЕслиНеПроинициализирован() Экспорт
	Попытка
		ЭтоНовый = ТекущийДокумент.ЭтоНовый();
	Исключение
		ТекКоличество = 1;
		//Если ТекущийРежим = "ВОЗВРАТ" Тогда
		//	ИнициализацияВозврата();
		//Иначе
			ИнициализацияЗаказа();	
		//КонецЕсли;
	КонецПопытки;
КонецПроцедуры

Функция ПроверитьЗаказНаВылетВоВремяФискализации()
	////:Заказ = Документы.Заказ.СоздатьДокумент();
	////:ПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка();
	//Если Не Заказ.НомерЧека Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Если Не ЗначениеЗаполнено(ПротоколРасчетов) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	////ОткрытьЧек();
	//НомерТекущегоЧека = 0; НомерТекущейСмены = 0;
	//Если Не глПараметрыРМ.Свойство("НомерТекущегоЧека", НомерТекущегоЧека) Тогда НомерТекущегоЧека = 0 КонецЕсли;
	//Если Не глПараметрыРМ.Свойство("НомерСмены", НомерТекущейСмены) Тогда НомерТекущейСмены = 0 КонецЕсли;
	//
	//Если Заказ.НомерЧека < НомерТекущегоЧека и Заказ.НомерСмены = НомерТекущейСмены Тогда
	//	//{ Получим сумму выручки от ФН
	//	ККМ=глПараметрыРМ.ККМ.ПолучитьОбъект();
	//	Обработка_ККМ=Обработка_ККМ;
	//	ИнициализацияТО(ККМ, Обработка_ККМ,глПараметрыРМ);
	//	Параметры = Новый Структура;
	//	ПараметрыВыходные = Новый Структура;
	//	Попытка
	//		Обработка_ККМ.ВыполнитьКоманду("Выручка", Параметры, ПараметрыВыходные);
	//		СуммаВыручка = Число(ПараметрыВыходные.СуммаВыручка);
	//	Исключение
	//		ЗаписьЖурналаРегистрации("Заказ.Ошибка при получении суммы выручки от ФН", УровеньЖурналаРегистрации.Ошибка,,Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//		Возврат Ложь;
	//	КонецПопытки;
	//	//}
	//	РасчетнаяВыручкаЗаКассовуюСмену = РасчетнаяВыручкаЗаКассовуюСмену();
	//	обПротокол = ПротоколРасчетов.ПолучитьОбъект();
	//	Если обПротокол.Протокол.Итог("СуммаФакт") И обПротокол.Проведен Тогда
	//		РасчетнаяВыручкаЗаКассовуюСмену = РасчетнаяВыручкаЗаКассовуюСмену - обПротокол.Протокол.Итог("СуммаФакт");
	//	КонецЕсли;
	//	РазницаВыручек = СуммаВыручка - РасчетнаяВыручкаЗаКассовуюСмену; РазницаВыручек = Sqrt(Pow(РазницаВыручек,2));
	//	Если РазницаВыручек <= 0.1 Тогда
	//		ЗаписьЖурналаРегистрации("Заказ.Автоматическое закрытие после вылета во время фискализации не произведено", УровеньЖурналаРегистрации.Примечание,, Заказ.Ссылка, "РазницаВыручек = " + РазницаВыручек);			
	//		Возврат Ложь;
	//	КонецЕсли;
	//	
	//Иначе
	//	
	//	обПротокол = ПротоколРасчетов.ПолучитьОбъект();
	//	
	//	//{ Проверим, была ли оплата по безналу
	//	СтрокаБезнал = обПротокол.Протокол.Найти(Справочники.ВариантыОплаты.Карта);
	//	Если СтрокаБезнал <> Неопределено Тогда
	//		Если Не СтрокаБезнал.СуммаФакт Тогда
	//			ИнтерфейсРМ.ВопросПредупреждение("Итоги по банку", "Сверка итогов", "Сейчас произойдет автоматическая сверка по сбербанку", "", "ОК", "");
	//			ОтчетыККМ = Обработки.ОтчетыККМ.Создать();
	//			СуммаПоБанку = ВыручкаПоБанкуЗаСмену();
	//			СуммаПоБанку = СуммаПоБанку + СтрокаБезнал.Сумма;
	//			Если ОтчетыККМ.СуммаПоБНТекущая(СуммаПоБанку) Тогда
	//				ЗаписьЖурналаРегистрации("Заказ.Автоматическое закрытие после вылета во время фискализации", УровеньЖурналаРегистрации.Примечание,, Заказ.Ссылка);			
	//				обПротокол.Протокол.ЗагрузитьКолонку(обПротокол.Протокол.ВыгрузитьКолонку("Сумма"), "СуммаФакт");	
	//				обПротокол.ИтогСуммаФакт = обПротокол.Протокол.Итог("СуммаФакт");
	//				обПротокол.Записать(РежимЗаписиДокумента.Проведение);
	//				ТекущийДокумент.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
	//				ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Закрыт);
	//				ИнициализацияЗаказа();
	//				Возврат Истина;
	//			Иначе
	//				Возврат Ложь;
	//			КонецЕсли;
	//		Иначе
	//			Возврат Ложь;
	//		КонецЕсли;
	//	Иначе
	//		Возврат Ложь;
	//	КонецЕсли;
	//	//}
	//КонецЕсли;
	//обПротокол = ПротоколРасчетов.ПолучитьОбъект();	
	//ЗаписьЖурналаРегистрации("Заказ.Автоматическое закрытие после вылета во время фискализации", УровеньЖурналаРегистрации.Примечание,, Заказ.Ссылка);			
	//обПротокол.Протокол.ЗагрузитьКолонку(обПротокол.Протокол.ВыгрузитьКолонку("Сумма"), "СуммаФакт");
	//обПротокол.Фискализирован = Истина;
	//обПротокол.ИтогСуммаФакт = обПротокол.Протокол.Итог("СуммаФакт");
	//обПротокол.ОтветФН = обПротокол.ОтветФН + Символы.ПС + "Автоматически закрыт после вылета во время фискализации";
	//обПротокол.Записать(РежимЗаписиДокумента.Проведение);
	//
	//ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Закрыт);
	//Лояльность.ЗаписатьВСПУЛ(Заказ.Ссылка);		
	//
	//ИнициализацияЗаказа();
	//Возврат Истина;

КонецФункции

Функция РасчетнаяВыручкаЗаКассовуюСмену()
	ТЗ = Обработки.ФормированиеОтчетовФО.ТаблицаОперативнойРеализации(ИнтерфейсРМ.ТекущаяСмена(),1);
	
	ТЗ.Свернуть("КассоваяСмена", "СуммаФакт");
	ОтборПоРМ = Новый Структура("КассоваяСмена", Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы());
	СтрокиПоРМ = ТЗ.НайтиСтроки(ОтборПоРМ);
	Если СтрокиПоРМ.Количество() Тогда
		СуммаВыручки = СтрокиПоРМ[0].СуммаФакт;
	Иначе
		СуммаВыручки = 0;
	КонецЕсли;
	Возврат СуммаВыручки;
КонецФункции

Функция ВыручкаПоБанкуЗаСмену()
	ТЗ = Обработки.ФормированиеОтчетовФО.ТаблицаОперативнойРеализации(ИнтерфейсРМ.ТекущаяСмена(),1);
	
	ТЗ.Свернуть("ККМ, ВариантОплаты", "СуммаФакт");
	ОтборПоРМ = Новый Структура("ККМ, ВариантОплаты", глПараметрыРМ.ККМ, Справочники.ВариантыОплаты.Карта);
	СтрокиПоРМ = ТЗ.НайтиСтроки(ОтборПоРМ);
	Если СтрокиПоРМ.Количество() Тогда
		СуммаВыручки = СтрокиПоРМ[0].СуммаФакт;
	Иначе
		СуммаВыручки = 0;
	КонецЕсли;
	Возврат СуммаВыручки;
КонецФункции

Функция ПроверитьПДФ()
	Для каждого Т Из ТекущийДокумент.Товары Цикл
		Если Т.Количество И Т.фАлкоголь = 1 Тогда
			РезультатПроверки = Алкоголь.ПроверитьПДФ(Т.ПДФ, Новый Массив, Т.Товар, ТекущийРежим = "ВОЗВРАТ", Заказ);
			Если РезультатПроверки.Успех Тогда
			Иначе
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",РезультатПроверки.ОшибкаЗаголовок,РезультатПроверки.ОшибкаТекст + "
				|" + Т.Товар,"","ОК","",,0);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Процедура Оплата() Экспорт

КонецПроцедуры

Процедура ВозвратОплаты() Экспорт

КонецПроцедуры

Функция ВводПДФ(Товар, ИсключатьПДФчека = Истина) Экспорт
	Если Ложь Тогда Заказ = Документы.Заказ.СоздатьДокумент() КонецЕсли;
	МассивПДФчека = Новый Массив;
	Если ИсключатьПДФчека Тогда
		Для каждого Т Из ТекущийДокумент.Товары Цикл
			Если Т.Количество Тогда
				МассивПДФчека.Добавить(Т.ПДФ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Обработка = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводПДФ");
	Обработка.ЭтоВозврат = ТекущийРежим = "ВОЗВРАТ";
	Форма = Обработка.ПолучитьФорму("Форма"+глПараметрыРМ.ИнтерфейсТип);
	Форма.Товар = Товар;
	Форма.ПДФЧека = МассивПДФчека;
	Возврат Форма.ОткрытьМодально();
КонецФункции

Процедура ОткрытьЧек() Экспорт
	Если Найти(глПараметрыРМ.ККМ, "автономная") Тогда
		НомерЧека = 999;
		НомерСмены = 999;	
		глПараметрыРМ.Вставить("НомерТекущегоЧека", НомерЧека);
		глПараметрыРМ.Вставить("НомерСмены",  НомерСмены);
		Возврат;
	КонецЕсли;
	
	ККМ=глПараметрыРМ.ККМ.ПолучитьОбъект();
	Обработка_ККМ=Обработка_ККМ;
	ИнициализацияТО(ККМ, Обработка_ККМ,глПараметрыРМ);
	Параметры = Новый Структура;
	Параметры.Вставить("Кассир", Строка(глПользователь));
	Параметры.Вставить("ТипЧека", Ложь);
	ПараметрыВыходные = Новый Массив;
	Попытка
		Р = Обработка_ККМ.ВыполнитьКоманду("ПолучитьТекущееСостояние", Параметры, ПараметрыВыходные);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если ПараметрыВыходные.Количество() > 2 Тогда
		глПараметрыРМ.Вставить("НомерТекущегоЧека", ПараметрыВыходные.НомерЧека);
		глПараметрыРМ.Вставить("НомерСмены",  ПараметрыВыходные.НомерСмены);
	КонецЕсли;
	ПоказатьОшибкуККМ(ПараметрыВыходные);
	
КонецПроцедуры

Функция НомерТекущейСмены() Экспорт
	НомерТекущейСмены = НомерТекущейСмены;
	глПараметрыРМ.Свойство("НомерСмены", НомерТекущейСмены);
	Если Не ЗначениеЗаполнено(НомерТекущейСмены) Тогда
		ОткрытьЧек();
	КонецЕсли;
	Если ТипЗнч(глПараметрыРМ.НомерСмены) = Тип("Число") Тогда
		Возврат Формат(глПараметрыРМ.НомерСмены, "ЧГ=0");
	КонецЕсли;

	Возврат глПараметрыРМ.НомерСмены;
КонецФункции

Функция НомерТекущегоЧека() Экспорт
	НомерТекущегоЧека = 0;
	глПараметрыРМ.Свойство("НомерТекущегоЧека", НомерТекущегоЧека);
	Если НомерТекущегоЧека = Неопределено Тогда 
		ОткрытьЧек();
		глПараметрыРМ.Свойство("НомерТекущегоЧека", НомерТекущегоЧека);
	КонецЕсли;
	Если ТипЗнч(НомерТекущегоЧека) = Тип("Число") Тогда
		Возврат Формат(НомерТекущегоЧека, "ЧГ=0");
	КонецЕсли;
	Возврат НомерТекущегоЧека;
КонецФункции

// Если РМ долго не запускали и накопилось много оповещений, то их можно не показывать
//
Процедура ПроверитьОбработкаСобытий()

	Если глВерсия = 1 ИЛИ (глПараметрыРМ.ОповещенияОтключить И НЕ глПараметрыРМ.СтопЛистПоказыватьОповещения) Тогда
		Возврат;
	КонецЕсли;	
	          	
	Отбор = Новый Структура("РабочееМесто", глРабочееМесто);
	ВыборкаСобытий = РегистрыСведений.ОбработкаСобытий.Выбрать(,ТекущаяДата(),Отбор);
	н = 0;
	Пока ВыборкаСобытий.Следующий() Цикл
		Если ВыборкаСобытий.ТипСобытия = Перечисления.ТипыСобытий.Сообщение И глПараметрыРМ.ОповещенияОтключить ИЛИ 
			 ВыборкаСобытий.ТипСобытия = Перечисления.ТипыСобытий.СтопЛист	И НЕ глПараметрыРМ.СтопЛистПоказыватьОповещения ИЛИ 
			 ВыборкаСобытий.ТипСобытия = Перечисления.ТипыСобытий.МониторМарок
		Тогда
			Продолжить;
		КонецЕсли;	
		н = н + 1;
	КонецЦикла;
	Если н = 0 Тогда
		Возврат
	КонецЕсли; 
	
	Текст1 = "Оповещения";
	Текст2 = "Количество сообщений за время простоя: " + н + Символы.ПС + "Показать?";
	Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","","Esc=Нет");
	
	ИнтерфейсРМ.ОбработкаОчередиСобытий(глРабочееМесто, Ответ="Нет");
	
КонецПроцедуры

// Открытие режима администратора
//
Процедура ОткрытьРежимАдминистратора() Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
	КонецЕсли;
	
	РежимАдминистратора = ИнтерфейсРМ.ПолучитьОбъектОбработки("РежимАдминистратора").ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип);
	РежимАдминистратора.Открыть();
	
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

// < КС_ВДВ -------------------------------------------------------------------- 
Процедура ВыдатьКартуЛояльности() Экспорт

	Если НЕ Авторизация() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ВводКлиента", Истина) Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	ОбработкаВвод = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводКлиента");
	ОбработкаВвод.ВводНового = Истина;
	ОбработкаВвод.ПолучитьФорму().Открыть();
	
	глОтсечкаПростоя();
	
	ВыполнитьДействияПриВозврате = Истина;

КонецПроцедуры // КС_ВДВ > -------------------------------------------------------------------- 

// < КС_ВДВ -------------------------------------------------------------------- 
Процедура ЗаменаКартыЛояльности() Экспорт

	Если НЕ Авторизация() Тогда
		Возврат;
	КонецЕсли;
	                
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ЗаменаКартыКеГеЛьБУМ", Истина) Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	ОбработкаВвод = ИнтерфейсРМ.ПолучитьОбъектОбработки("ЗаменаКартыКеГеЛьБУМ");
	ФормаОткрыта = ОбработкаВвод.ОткрытьФормуЗаменыКарты();
	
	Если НЕ ФормаОткрыта Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	глОтсечкаПростоя();
	
	ВыполнитьДействияПриВозврате = Истина;

КонецПроцедуры // КС_ВДВ > -------------------------------------------------------------------- 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ОткрытьМониторЗаказов() Экспорт 

	Если НЕ Авторизация() Тогда
		Возврат;
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;	
	КонецЕсли; 
	
	МониторМарок = ИнтерфейсРМ.ПолучитьОбъектОбработки("МониторМарок").ПолучитьФорму();
	Если МониторМарок.ПараметрыНастройки = Неопределено Тогда
		
		Если глПараметрыРМ.НастройкиМонитораМарокСписок.Количество() = 0 Тогда
		    Текст1 = "Монитор марок";
			Текст2 = "Не указана настройка монитора марок"+Символы.ПС+""""+глРабочееМесто.Наименование+"""";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли; 
		
		НастройкиОбъект = глПараметрыРМ.НастройкиМонитораМарокСписок[0].Значение.ПолучитьОбъект();
		Если НастройкиОбъект = Неопределено Тогда
			Текст1 = "Монитор марок";
			Текст2 = "Ошибка в настройках монитора марок"+Символы.ПС+""""+глРабочееМесто.Наименование+"""";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли;	
		
		МониторМарок.ПараметрыНастройки = НастройкиОбъект.ПолучитьСтруктуруПараметров();
	КонецЕсли;
	МониторМарок.Открыть();
	
	глОтсечкаПростоя();
	
	ВыполнитьДействияПриВозврате = Истина;

КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// Создает новый заказ по кнопке или путем считывания карты доступа
//
Процедура СоздатьНовыйЗаказ(ОбъектВвода=Неопределено, ФлагПоКарте=Ложь,ЗакрытьФормы=Ложь) Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
		
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
		
	ИначеЕсли НЕ ФлагПоКарте И глПараметрыРМ.ЗапретРучногоОткрытияЗаказов И 
		НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ИгнорЗапретВводаПаролей) Тогда
		Текст1="Нет доступа!";
		Текст2="Открытие заказов возможно только с помощью карт доступа!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		
		ДействияПриВозвратеВФорму();
		Возврат;
		
	КонецЕсли; 
	
	Если глПараметрыРМ.ЭтоCallЦентр Тогда
		ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("ЗаявкаНаДоставку");
		ФормаЗаказа = ОбработкаЗаказ.ПолучитьФорму("Форма");
		ФормаЗаказа.Открыть();
		
	Иначе
		ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("Заказ");
		ОбработкаЗаказ.Доставка = глДоставкаОсновнойРежим;
		
		Если НЕ глДоставкаОсновнойРежим Тогда
			Если НЕ ОбработкаЗаказ.СоздатьНовый(ОбъектВвода,,Истина) Тогда
				ДействияПриВозвратеВФорму();
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
		
		Если НЕ ЗакрытьФормы Тогда	
			ОбработкаЗаказ.ОткрытьРабочуюФормуЗаказа();
		КонецЕсли;	
		
	КонецЕсли; 
	
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

// Открытие списка  открытых заказов
//
Процедура ОткрытьСписокЗаказов() Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	ЖурналЗаказов = ИнтерфейсРМ.ПолучитьОбъектОбработки("ЖурналЗаказов").ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип);
	ЖурналЗаказов.Открыть();
	
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

// Открытие режима администратора
//
Процедура ОткрытьСтопЛист() Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли;
		
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

// Выбор посадочного места на плане зала или считыванием карты доступа
//
Процедура ОбработкаВыбораПосадочногоМеста(ВыбМесто, ФлагПоКарте=Ложь)
	
	Если НЕ ФлагПоКарте И глПараметрыРМ.ЗапретРучногоОткрытияЗаказов И 
		НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ИгнорЗапретВводаПаролей) Тогда
		Текст1="Нет доступа!";
		Текст2="Открытие заказов возможно только с помощью карт доступа!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(ВыбМесто.МестоРеализации) И ВыбМесто.МестоРеализации<>глПараметрыРМ.МестоРеализации Тогда
		Текст1 = "Нет доступа!";
		Текст2 = НаимПосадочногоМеста(ВыбМесто)+" относится к другому месту реализации!
				|Обратитесь к администратору...";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
		
	КонецЕсли;
	
	МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( ВыбМесто );
	
	Если МассивЗаказов.Количество()=0 Тогда
	Иначе
		ОткрытьЗаказ( МассивЗаказов[0] );
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыводНаДПТекущейСтроки(СтрокаТовар) Экспорт
	Текст1 = лев(СтрокаТовар.Товар.Наименование,20) + Символы.ПС;
	Текст2 = "" + СтрокаТовар.Количество + СтрокаТовар.Товар.ЕдиницаИзмерения + " ";
	СтрДлина2 = СтрДлина(Текст2);
	Текст2 = Текст2 + Прав("                    =" + СтрокаТовар.Сумма, 20 - СтрДлина2);
	Текст = Текст1 + Текст2;
	ИнтерфейсРМ.ВыводНаДП("ВывестиТекст", Текст);
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ПроцессВыходаЗапущен		= Ложь;
ВыходОС						= Ложь;
ВыполнитьДействияПриВозврате= Ложь;

//Заказ = Документы.Заказ.СоздатьДокумент();
//Заказ.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
фВводТоваровДоступен = Истина;

ТекущийРежим = "ПРОДАЖА";
ТекущийДокумент = Заказ;
ЛояльностьДанныеЗаказа = Неопределено;
//ДГ+
ДопПараметрыИнфо	= Новый Структура("НомерСтрокиЗаказа, СуммаПоСтанцииНач, СброситьНастройки");
//ДГ-

#КонецОбласти

#КонецЕсли