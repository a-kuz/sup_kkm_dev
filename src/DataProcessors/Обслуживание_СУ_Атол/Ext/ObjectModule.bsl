
#Если Клиент Тогда

Перем ПараметрыТО Экспорт;   // Параметры торгового оборудования.
Перем Результат Экспорт;     // Результат выполнения действия.
Перем DRV Экспорт;           // Объект драйвера торгового оборудования.

Перем КодыМоделей Экспорт;	 // Структура кодов моделей.
Перем СтрокаИменСвойств Экспорт;

// Производит инициализацию торгового оборудования.
//
Процедура Инициализация() Экспорт
	
	Если НЕ ЗагрузитьДрайвер() Тогда
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Ошибка загрузки драйвера!";
		Результат.Подробно	= "Программе не удалось загрузить драйвер устройств ввода...";
		Возврат;
	КонецЕсли; 
	
	СтрокаИменСвойств = "";
	
	ПрочитатьПараметр("CurrentDeviceNumber", 1);
	ПрочитатьПараметр("PortNumber"	, 1);
	ПрочитатьПараметр("BaudRate"	, 7);
	ПрочитатьПараметр("DataBits"	, 4);
	ПрочитатьПараметр("Parity"		, 0);
	ПрочитатьПараметр("StopBits"	, 0);
	ПрочитатьПараметр("Sensitive"	, 30);
	ПрочитатьПараметр("Prefix"		, "");
	ПрочитатьПараметр("Suffix"		, "");
	
	// заполнение списка моделей
	КодыМоделей = Новый Структура;
	КодыМоделей.Вставить("СканерШК"				,0);
	КодыМоделей.Вставить("РидерМК"				,1);
	КодыМоделей.Вставить("Проксимити"			,6);
	КодыМоделей.Вставить("ПроксимитиPERCo"		,8);
	КодыМоделей.Вставить("ПроксимитиParsec"		,11);
	КодыМоделей.Вставить("ПроксиIronLogicZ2"	,13);
	КодыМоделей.Вставить("ПроксимитиCoreRFID"	,14);
	КодыМоделей.Вставить("ПроксиАрсеналПС01"	,15);
	
КонецПроцедуры

// Загружает драйвер ТО.
//
// Возвращаемое значение:
//  Истина - драйвер загружен, ложь - нет.
//
Функция ЗагрузитьДрайвер()
	
	Если глТорговоеОборудование.Свойство("Scaner1C",DRV) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Попытка 
		ПодключитьВнешнююКомпоненту("AddIn.Scaner45");
		ЗагрузитьВнешнююКомпоненту("Scaner1C.dll");
		DRV = Новый("AddIn.Scaner45");
	Исключение
		Попытка
			DRV = Новый COMОбъект("AddIn.Scaner45");
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецПопытки;
	
	глТорговоеОборудование.Вставить("Scaner1C", DRV);
	
	Возврат Истина;
КонецФункции

// Выполняет чтение параметра ТО.
//
// Параметры:
//  ИмяПараметра        - имя параметра,
//  ЗначениеПоУмолчанию - значение по умолчанию для данного параметра.
//
// Возвращаемое значение:
//  Значение параметра или значение по умолчанию
//
Процедура ПрочитатьПараметр(ИмяПараметра,ЗначениеПоУмолчанию)
	
	Если НЕ ПараметрыТО.Свойство(ИмяПараметра) Тогда
		ПараметрыТО.Вставить(ИмяПараметра,ЗначениеПоУмолчанию);
	КонецЕсли; 
	
	ЭтотОбъект[ИмяПараметра] = ПараметрыТО[ИмяПараметра];
	
КонецПроцедуры

// Выполняет действие с ТО.
//
// Параметры:
//  Действие - имя действия,
//  ПараметрыДействия - произвольный набор параметров, туда же присваивается возвращаемое значение функции.
//
Функция ВыполнитьДействие(Действие,ПараметрыДействия) Экспорт
	
	Если Действие = "Подключить" Тогда
		Подключить();
		
	ИначеЕсли Действие = "Отключить" Тогда
		Отключить();
		
	ИначеЕсли Действие = "ОчиститьОчередь" Тогда	
		ОчиститьОчередь();
		
	Иначе
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Неизвестная команда!";
		Результат.Подробно	= "Команда """+Действие+""" не определена для "+ТО.Наименование;
		
	КонецЕсли;
	
	Возврат ПараметрыДействия;
	
КонецФункции

// Выполняет подключение ТО.
//
// Возвращаемое значение:
//  Истина - есть ошибка, ложь - нет.
//
Процедура Подключить() Экспорт
	
	Пока DRV.DeviceCount < CurrentDeviceNumber Цикл
        DRV.AddDevice();
	КонецЦикла;
	
	УстановитьСвойстваДрайвера();
	
	DRV.OldVersion			= 0;
	DRV.DataEventEnabled	= 1;
	DRV.AutoDisable			= 1;
	
	DRV.DeviceEnabled		= 1;
	Ошибка();
	
КонецПроцедуры

// Выполняет отключение ТО.
//
// Возвращаемое значение:
//  Истина - есть ошибка, ложь - нет.
//
Процедура Отключить() Экспорт
	
	DRV.CurrentDeviceNumber	= CurrentDeviceNumber;
	DRV.DeviceEnabled		= 0;
	Ошибка();
	
КонецПроцедуры

Процедура ОчиститьОчередь() Экспорт 
	
	Пока DRV.DataCount Цикл
		DRV.УдалитьСообщение();
	КонецЦикла;
	
КонецПроцедуры


// Описание процедуры
//
Процедура УстановитьСвойстваДрайвера() Экспорт
	
	// Свойства для работы с ЛУ
	DRV.CurrentDeviceNumber	= CurrentDeviceNumber;
	DRV.CurrentDeviceName  	= Лев(ТО.Наименование,20);
	
	// Параметры связи
	//DRV.Model				= КодыМоделей[ТО.КодМодели];
	DRV.PortNumber			= PortNumber;
	
	DRV.Prefix				= Prefix;
	DRV.Suffix				= Suffix;
	
	Если DRV.PortNumber=100 Тогда
		// чувствительность клавиатуры
		DRV.Sensitive		= Sensitive;
	Иначе
		// параметры СОМ порта
		DRV.BaudRate		= BaudRate;
		DRV.DataBits		= DataBits;
		DRV.Parity			= Parity;
		DRV.StopBits		= StopBits;
	КонецЕсли;
	
КонецПроцедуры
 
// Описание процедуры
//
Процедура ПрочитатьСвойстваДрайвера() Экспорт
	
	// Свойства для работы с ЛУ
	CurrentDeviceNumber	= DRV.CurrentDeviceNumber;
	
	// Параметры связи
	PortNumber			= DRV.PortNumber;
	
	Prefix				= DRV.Prefix;
	Suffix				= DRV.Suffix;
	
	Если DRV.PortNumber=100 Тогда
		// чувствительность клавиатуры
		Sensitive		= DRV.Sensitive;
	Иначе
		// параметры СОМ порта
		BaudRate		= DRV.BaudRate;
		DataBits		= DRV.DataBits;
		Parity			= DRV.Parity;
		StopBits		= DRV.StopBits;
	КонецЕсли;
	
КонецПроцедуры
 
// Выполняет обработку ошибок ТО.
//
// Возвращаемое значение:
//  Истина - есть ошибка, ложь - нет.
//
Функция Ошибка()
	
	ResultCode			= DRV.ResultCode;
	ResultDescription	= DRV.ResultDescription;
	
	Если DRV.ResultCode = 0 Тогда
		Возврат Ложь;
		
	Иначе
		ЗаписьЖурналаРегистрации("Торговое оборудование.Ошибка",
		УровеньЖурналаРегистрации.Предупреждение,
		,
		ТО.Ссылка,
		Строка(DRV.ResultCode)+" - "+DRV.ResultDescription);
		
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Ошибка драйвера: "+DRV.ResultCode;
		Результат.Подробно	= СокрЛП(DRV.ResultDescription);
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Результат = Новый Структура("Ошибка,Описание,Подробно",Ложь,"","");

#КонецЕсли

