
Перем ПараметрыТО Экспорт;   // Параметры торгового оборудования.
Перем Результат Экспорт;     // Результат выполнения действия.
Перем DRV Экспорт;           // Драйвер

Перем Пароль, ИгнорироватьОбщийПароль;
Перем КодыМоделей;
Перем ТаблицаПараметрыСтроки;
Перем МаксДлинаСтроки;

#Если Клиент Тогда

// Производит инициализацию торгового оборудования.
//
Процедура Инициализация() Экспорт
	
	Если НЕ ЗагрузитьДрайвер() Тогда
		Возврат;
	КонецЕсли; 
	
	ПрочитатьПараметр("НеФискальныйРежим"	, Ложь );
	ПрочитатьПараметр("PortNumber"			, 1 );
	ПрочитатьПараметр("BaudRate"			, 6 );
	ПрочитатьПараметр("MachineName"			, "" );
	ПрочитатьПараметр("Timeout"		        , 50 );
	ПрочитатьПараметр("Password"    		, "" );
	ПрочитатьПараметр("ФлагОбщийПароль"		, Ложь );
	Если СокрП(ТО.КодВида)="ПРН" Тогда
		ПрочитатьПараметр("ФлагПечатьПД"	, Ложь );
		ПрочитатьПараметр("КолвоСтрокНаЛист", 30 );
		Если КолвоСтрокНаЛист=0 Тогда
			КолвоСтрокНаЛист=30;
		КонецЕсли;
		ПрочитатьПараметр("СимволовВСтроке"	 , 48 );
		ПрочитатьПараметр("ОтступСверху"     , 0 );
	Иначе
		ПрочитатьПараметр("ПечатьШапкиФД"       , Ложь );
		ПрочитатьПараметр("ТаблицаШапкиФД"      , "");
	КонецЕсли;
	
	ЗаполнитьПараметрыСтроки();
	
КонецПроцедуры

// Загружает драйвер ТО.
//
// Возвращаемое значение:
//  Истина - драйвер загружен, ложь - нет.
//
Функция ЗагрузитьДрайвер()
	
	Если глТорговоеОборудование.Свойство("DrvFR",DRV) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Попытка 
	//	ПодключитьВнешнююКомпоненту("AddIn.DrvFr1C");
		ЗагрузитьВнешнююКомпоненту("DrvFR.dll");
		DRV = Новый ("AddIn.Drvfr");
	Исключение
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Ошибка загрузки драйвера!";
		Результат.Подробно	= "Программе не удалось загрузить компоненту DrvFR.dll";
		Возврат Ложь;
	КонецПопытки;
	
	глТорговоеОборудование.Вставить("DrvFR", DRV);
	
	Возврат Истина;
КонецФункции

// Выполняет чтение параметра ТО.
//
// Параметры:
//  ИмяПараметра        - имя параметра,
//  ЗначениеПоУмолчанию - значение по умолчанию для данного параметра.
//
// Возвращаемое значение:
//  Значение параметра или значение по умолчанию
//
Процедура ПрочитатьПараметр(ИмяПараметра,ЗначениеПоУмолчанию)
	
	Если НЕ ПараметрыТО.Свойство(ИмяПараметра) Тогда
		ПараметрыТО.Вставить(ИмяПараметра,ЗначениеПоУмолчанию);
	КонецЕсли; 
	
	ЭтотОбъект[ИмяПараметра] = ПараметрыТО[ИмяПараметра];
	
КонецПроцедуры

// Выполняет действие с ТО.
//
// Параметры:
//  Действие - имя действия,
//  ПараметрыДействия - произвольный набор параметров
//
Процедура ВыполнитьДействие( Действие, ПараметрыДействия=Неопределено ) Экспорт
	
	ПараметрыДействия.Свойство("Пароль",Пароль);
	
	Если НЕ ПараметрыДействия.Свойство("ИгнорироватьОбщийПароль",ИгнорироватьОбщийПароль) Тогда
		ИгнорироватьОбщийПароль = Ложь;
	КонецЕсли; 
	
	Если Действие = "Подключить" Тогда
		Подключить();
		Отключить();
		
	ИначеЕсли Действие = "Отключить" Тогда
		Отключить();
		
	ИначеЕсли Действие = "Регистрация" Тогда
		РегистрацияНаККМ( ПараметрыДействия.ТаблицаЗадания );
		Отключить();
		
	ИначеЕсли Действие = "Печать" Тогда
		КолвоКопий = 1;
		Если НЕ ПараметрыДействия.Свойство("КолвоКопий",КолвоКопий) Тогда
			КолвоКопий = 1;
		КонецЕсли;
		
		Если ФлагПечатьПД Тогда
			ПечатьПД( ПараметрыДействия.ТаблицаЗадания, КолвоКопий );
		Иначе
			Печать( ПараметрыДействия.ТаблицаЗадания, КолвоКопий );
		КонецЕсли;
		
		Отключить();
		
	ИначеЕсли Действие="Отчет" Тогда
		ПолучитьОтчет(ПараметрыДействия.ТипОтчета);
		Отключить();
		
	ИначеЕсли Действие="СинхронизироватьВремя" Тогда
		СинхронизироватьВремя();
		Отключить();
		
	ИначеЕсли Действие="ОткрытьСмену" Тогда
		//ОткрытьСмену(); не известно как
		
	Иначе
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Неизвестная команда!";
		Результат.Подробно	= "Команда """+Действие+""" не определена для "+ТО.Наименование;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка ошибок
//
Функция Ошибка() Экспорт
	
	Если DRV.ResultCode = 8 Тогда			// не поддерживается в данной модели
		Возврат Ложь;
	ИначеЕсли DRV.ResultCode = 55  Тогда	// не поддерживается в данной  реализации ФР
		Возврат Ложь;
	ИначеЕсли DRV.ResultCode = 80 Тогда		// Идет печать предыдущей команды
		Возврат Ложь;
	КонецЕсли;
		
	Если DRV.ResultCode <> 0 Тогда
		
		ЗаписьЖурналаРегистрации("Торговое оборудование.Ошибка", УровеньЖурналаРегистрации.Ошибка, ТО.Метаданные(), ТО.Ссылка, DRV.ResultCodeDescription);
		
		Результат.Ошибка = Истина;
		Результат.Описание = "Ошибка ККМ: "+DRV.ResultCode;
		Результат.Подробно = DRV.ResultCodeDescription;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Установка параметров подключения
//
Функция Подключить(БезПроверок=Ложь, ПарольСА=Неопределено) Экспорт
	
	Результат.Ошибка = Ложь;
	
	Если ПарольСА=Неопределено Тогда
		ОбщийПароль	= ?(ПустаяСтрока(Password),0,Число(Password));
		DRV.Password = ?(ФлагОбщийПароль И НЕ ИгнорироватьОбщийПароль ИЛИ Пароль=Неопределено, ОбщийПароль, Число(Пароль));
	Иначе
		DRV.Password = ПарольСА;
	КонецЕсли; 
	
	// Параметры связи
	DRV.ComNumber	= PortNumber;
	DRV.BaudRate	= BaudRate;
	DRV.Timeout		= Timeout;
	DRV.ComputerName= MachineName;
	
	DRV.Connect();
	Если Ошибка() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// У драйвера компании "Штрих" нет такого свойства
	Если Найти("ШтрихLightФРК,ЭлвесФРК",СокрЛП(ТО.КодМодели))>0 Тогда 
		МаксДлинаСтроки = 32;
	ИначеЕсли Найти("ШтрихФРК01,ШтрихФР02,ШтрихФР03,ЭлвесМиниФРФ",СокрЛП(ТО.КодМодели))>0 Тогда 
		МаксДлинаСтроки = 36;
	ИначеЕсли  Найти("Штрих950К,MStarTK",СокрЛП(ТО.КодМодели))>0 Тогда
		МаксДлинаСтроки = 40;
	ИначеЕсли  Найти("ШтрихМиниФРК,ШтрихКомбо,ШтрихМФРК",СокрЛП(ТО.КодМодели))>0 Тогда
		МаксДлинаСтроки = 48;
	Иначе
		МаксДлинаСтроки = 36;
	КонецЕсли;
	
	DRV.GetECRStatus();
	Если Ошибка() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка наличия бумаги в ККМ
	Если DRV.ECRAdvancedMode=1 Тогда		// пассивное отсутствие бумаги
		Результат.Ошибка = Истина;
		Результат.Описание = "Ошибка ККМ";
		Результат.Подробно = "Закончилась бумага...";
		Возврат Ложь;
	ИначеЕсли  DRV.ECRAdvancedMode=3 Тогда 	// после активного отсутствия бумаги
		DRV.ContinuePrint();
		Возврат ?( Ошибка(),Ложь,Истина);
	КонецЕсли;
	
	Если БезПроверок=1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// проверка соответствия времени
	Д1 = Дата(Год(DRV.Date), Месяц(DRV.Date), День(DRV.Date), Час(DRV.Time), Минута(DRV.Time), Секунда(DRV.Time)) ;
	Д2=ТекущаяДата();
	
	// в секундах
	РазницаВремени = Д2-Д1;
	РазницаВремени = ?(РазницаВремени<0,-РазницаВремени,РазницаВремени) / 60;
	Если РазницаВремени>5 Тогда
		Результат.Ошибка = Истина;
		Результат.Описание = "Ошибка ККМ";
		Результат.Подробно = "Время ККМ отличается от системного времени более, чем на 5 минут...";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Отключение драйвера
//
Процедура Отключить() Экспорт
	
	DRV.Disconnect();
	
КонецПроцедуры

// Синхронизация времени ККМ с системным
//
Процедура СинхронизироватьВремя()
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	// на другие сутки время не переводим
	Если ТекущаяДата() > КонецДня(Дата(DRV.Date)) ИЛИ 
		ТекущаяДата() < НачалоДня(Дата(DRV.Date)) Тогда
		
		Предупреждение("Ошибка времени" + Символы.ПС + "Нельзя перевести время на другие сутки!");
		
		Возврат;
	КонецЕсли;

	Если Дата(DRV.Date) <> НачалоДня(ТекущаяДата()) Тогда
		DRV.Date=Строка(ТекущаяДата());
		DRV.SetDate();
		DRV.ConfirmDate();
		Если Ошибка() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	DRV.Time = Формат(ТекущаяДата(),"ДЛФ=В");
	DRV.SetTime();
	
	Ошибка();
	
КонецПроцедуры

// Форматирование строк
//
Функция ДополнитьСтроку(Стр, ДлинаСтроки, Выравнивание=0, СтрДоб=" ")
	
	ТекДлинаСтроки = СтрДлина(Стр);
	
	Если ТекДлинаСтроки >= ДлинаСтроки Тогда
		Если Выравнивание=2 Тогда	// по правому краю
			Возврат Прав(Стр, ДлинаСтроки);
		Иначе
			Возврат Лев(Стр, ДлинаСтроки);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьСлева	=0;
	ДобавитьСправа	=0;
	
	Если Выравнивание=0 Тогда		// по левому краю
		ДобавитьСправа=ДлинаСтроки-ТекДлинаСтроки;
		
	ИначеЕсли Выравнивание=2 Тогда	// по правому краю
		ДобавитьСлева =ДлинаСтроки-ТекДлинаСтроки;
		
	Иначе							// по центру
		ДобавитьСлева =Цел((ДлинаСтроки-ТекДлинаСтроки)/2);
		ДобавитьСправа=ДлинаСтроки-ТекДлинаСтроки-ДобавитьСлева;
		
	КонецЕсли;
	
	Для н=1 По ДобавитьСлева Цикл
		Стр=СтрДоб+Стр;
	КонецЦикла;
	
	Для н=1 По ДобавитьСправа Цикл
		Стр=Стр+СтрДоб;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

// Перенос строк по словам
//
Функция ПереносСтрок(ИсходнаяСтрока,ФрмДлина)
	
	// сначала получим список слов исходной строки
	СписокСлов = Новый Массив;
	Стр=СокрЛП(ИсходнаяСтрока)+" ";
	
	Пока ЗначениеЗаполнено(Стр) Цикл
		н=Найти(Стр," ");
		СписокСлов.Добавить(Лев(Стр,н-1));
		Стр=Сред(Стр,н+1);
	КонецЦикла;
	
	// а теперь отформатируем под нужную длину
	СписокСтрок = Новый Массив;
	
	нс=0;
	Пока нс<=СписокСлов.Количество()-1 Цикл
		
		Стр="";
		Пока СтрДлина(Стр+СписокСлов[нс]) + ?(Стр="",0,1) <= ФрмДлина Цикл
			
			Стр=Стр+?(Стр="",""," ")+СписокСлов[нс];
			
			нс=нс+1;
			Если нс>СписокСлов.Количество()-1 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДлинаСтроки=СтрДлина(Стр)+?(Стр="",0,1);
		
		Если нс<=СписокСлов.Количество()-1 И ДлинаСтроки < Цел(ФрмДлина/2)+1 Тогда
			// строка заполнена меньше чем на половину, а следующее слово уже не помещается - 
			// обрезаем его и переносим остаток
			Слово=СписокСлов[нс];
			
			Стр=Стр+?(Стр="",""," ")+Лев(Слово,ФрмДлина-ДлинаСтроки-1)+"-";
			СписокСлов.Вставить(нс+1,Сред(Слово,ФрмДлина-ДлинаСтроки));
			
			нс=нс+1;
		КонецЕсли;
		
		СписокСтрок.Добавить(Стр);
	КонецЦикла;
	
	Возврат СписокСтрок;
КонецФункции

// задержка выполнения
//
Процедура Задержка(ВремяМСек)
	
	Отсечка=РаботаСокнами.GetTimer();
	Пока РаботаСокнами.GetTimer()-Отсечка < ВремяМСек Цикл
	КонецЦикла;
	
КонецПроцедуры

// Выполнение конкретных действий на ККМ
//
Функция ВыполнитьДействиеККМ(Тип, Параметры)
	Перем Department;
	
	Если      Тип="Строка" Тогда
		СтрПечати		=Строка(Параметры.Caption);
		Выравнивание	=Число(Параметры.Alignment);
		Перенос			=Число(Параметры.TextWrap);
		
		Если (НЕ Перенос) ИЛИ (СтрДлина(СтрПечати)<=МаксДлинаСтроки) Тогда
			DRV.StringForPrinting = ДополнитьСтроку(СтрПечати, МаксДлинаСтроки, Выравнивание, " ");
			DRV.PrintString();
		Иначе
			СписокСтрок=ПереносСтрок(СтрПечати,МаксДлинаСтроки);
			Для каждого СтрПечати Из СписокСтрок Цикл
				DRV.StringForPrinting=ДополнитьСтроку(СтрПечати, МаксДлинаСтроки, Выравнивание, " ");
				DRV.PrintString();
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Тип="Картинка" Тогда
		// не умеет
		Возврат Истина;
		
	ИначеЕсли Тип="ШтрихКод" Тогда
		Barcode = Строка(Параметры.Caption);
		Если  НЕ ПустаяСтрока(Barcode) Тогда
			DRV.Barcode = Лев(Barcode,12);  // здесь надо без КС
			Задержка(100);
			DRV.PrintBarcode();
		КонецЕсли;
		
	ИначеЕсли Тип="Внесение" Тогда
		DRV.Summ1=Число(Параметры.Summ);
		DRV.CashIncome();
		
	ИначеЕсли Тип="Выплата" Тогда
		DRV.Summ1=Число(Параметры.Summ);		
		DRV.CashOutcome();
		
	ИначеЕсли Тип="ОткрытьЧекПродажа" Тогда
		// чек открывается автоматически при первой регистрации
		Возврат Истина;
		
	ИначеЕсли Тип="ОткрытьЧекВозврат" Тогда
		// чек открывается автоматически при первой регистрации
		Возврат Истина;
		
	ИначеЕсли Тип="ЗакрытьЧек" Тогда
		Параметры.Свойство("Summ1",DRV.Summ1);
		Параметры.Свойство("Summ2",DRV.Summ2);
		Параметры.Свойство("Summ3",DRV.Summ3);
		Параметры.Свойство("Summ4",DRV.Summ4);
		DRV.DiscountOnCheck=0;
		DRV.StringForPrinting="";
		DRV.CloseCheck();
		
	ИначеЕсли Тип="ОтменаЧека" Тогда
		DRV.CancelCheck();
		
	ИначеЕсли Тип="Регистрация" Тогда
		Name		=Лев(Параметры.Name,40);
		Price		=Число(Параметры.Price);
		Quantity	=Число(Параметры.Quantity);		Если Quantity=0 Тогда Quantity=1; КонецЕсли;
		Параметры.Свойство("Department",Department);	Если Department=0 Тогда Department=1; КонецЕсли;
		
		DRV.StringForPrinting	=Name;
		DRV.Price				=Price;
		DRV.Quantity			=Quantity;
		DRV.Department			=Department;
		DRV.Sale();
		
	ИначеЕсли Тип="Возврат" Тогда
		Name		=Лев(Параметры.Name,40);
		Price		=Число(Параметры.Price);
		Quantity	=Число(Параметры.Quantity);		Если Quantity=0 Тогда Quantity=1; КонецЕсли;
		Параметры.Свойство("Department",Department);	Если Department=0 Тогда Department=1; КонецЕсли;
		
		DRV.StringForPrinting	=Name;
		DRV.Price				=Price;
		DRV.Quantity			=Quantity;
		DRV.Department			=Department;
		DRV.ReturnSale();
		
	ИначеЕсли Тип="Оплата" Тогда
		// нет такого, оплата разносится при закрытии чека
		Возврат Истина;
		
	ИначеЕсли Тип="Сигнал" Тогда
		КолвоПовторов	=Число(Параметры.КолвоПовторов);
		ТипСигнала		=Число(Параметры.ТипСигнала);
		Для н=1 По КолвоПовторов Цикл
			DRV.Beep();
			Задержка(500);
		КонецЦикла;
		
	ИначеЕсли Тип="ЧастичнаяОтрезка" Тогда
		// принудительная частичная отрезка внутри задания
		DRV.CutType=1;  // неполная отрезка
		DRV.CutCheck();
		
	КонецЕсли;
	
	Если DRV.ResultCode=80 Тогда
		// Идет печать предыдущей команды - надо повторить попытку
		Задержка(100);
		Возврат ВыполнитьДействиеККМ(Тип, Параметры);
	КонецЕсли;
	
	Если Ошибка() Тогда
		DRV.CancelCheck();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Процедура печати чека
//
Процедура РегистрацияНаККМ(ТаблицаЗадания)
	
	Если НЕ Подключить() Тогда
		Возврат;
	КонецЕсли;
	
	// проверка состояния последнего чека (GetECRStatus() вызывается в Подключить())
	Если DRV.ECRMode=8 Тогда
		DRV.CancelCheck();
		Если Ошибка() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если DRV.ECRMode=3 Тогда
		Результат.Ошибка = Истина;
		Результат.Описание = "Ошибка ККМ";
		Результат.Подробно = "Смена превысила 24 часа...";
		Возврат;
	КонецЕсли;
	
	Если ПечатьШапкиФД=1 Тогда
		ИндексСтроки = 1;
		Для Каждого  СтрокаШапкиФД Из ТаблицаШапкиФД Цикл
			Задание = ТаблицаЗадания.Вставить(ИндексСтроки);
			Задание.Данные		=СтрокаШапкиФД.Данные;
			Задание.ТипДанных	=СтрокаШапкиФД.ТипДанных;
			Задание.Параметры	=СтрокаШапкиФД.Параметры;
			ИндексСтроки = ИндексСтроки+1;
		КонецЦикла;
	КонецЕсли;
	
	Если НеФискальныйРежим Тогда
		ПреобразоватьЗаданиеВНефискальное(ТаблицаЗадания);
		Печать(ТаблицаЗадания);
		Возврат;
	КонецЕсли; 
	
	СтрПечати="";
	Для каждого Задание Из ТаблицаЗадания Цикл
		ТипДанных=Задание.ТипДанных;
		
		Если (ТипДанных="Строка") ИЛИ (ТипДанных="ШтрихКод") ИЛИ (ТипДанных="Картинка") Тогда
			Параметры = СформироватьСтруктуруПараметровСтроки(Задание.Данные, Задание.Параметры);
			
			СтрПечати=СтрПечати+Параметры.Caption;
			Если Параметры.TextNewLine=0 Тогда
				Продолжить;
			КонецЕсли;
			Параметры.Caption = СтрПечати;
			СтрПечати="";
			
		Иначе
			Параметры=Задание.Параметры;
		КонецЕсли;
		
		Если НЕ ВыполнитьДействиеККМ(ТипДанных,Параметры) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заменяет в таблице задания фискальные команды печатью строк
//
Процедура ПреобразоватьЗаданиеВНефискальное(ТаблицаЗадания)
	
	Задание = ТаблицаЗадания.Вставить(0);
	Задание.Данные    = "НЕФИСКАЛЬНЫЙ ЧЕК";
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Центр,ПереводСтроки";
	
	ИтогоСуммаЧека		= 0;
	ИтогоСуммаОплаты	= 0;
	ИндексСтроки		= 0;
	
	Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
		
		Задание = ТаблицаЗадания[ИндексСтроки];
		Тип = Задание.ТипДанных;
		
		Если Тип="Внесение" Тогда
			СтрВправо = "="+Формат( Задание.Параметры.Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку("ВНЕСЕНИЕ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
		ИначеЕсли Тип="Выплата" Тогда
			СтрВправо = "="+Формат( Задание.Параметры.Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку("ВЫПЛАТА", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
		ИначеЕсли Тип="ОткрытьЧекПродажа" Тогда
			Задание.ТипДанных = "Пропустить";
			
		ИначеЕсли Тип="ОткрытьЧекВозврат" Тогда
			Задание.Данные    = "ВОЗВРАТ";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
		ИначеЕсли Тип="ЗакрытьЧек" Тогда
			Если ИтогоСуммаОплаты > ИтогоСуммаЧека Тогда
				СтрВправо = "="+Формат( ИтогоСуммаОплаты - ИтогоСуммаЧека, "ЧЦ=15;ЧДЦ=2");
				Задание.Данные    = ДополнитьСтроку("СДАЧА", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
				Задание.ТипДанных = "Строка";
				Задание.Параметры = "Право,ПереводСтроки";
				Задание = ТаблицаЗадания.Добавить();
			КонецЕсли; 
			
			Задание.Данные    = "НЕФИСКАЛЬНЫЙ ЧЕК";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Центр,ПереводСтроки";
			
		ИначеЕсли Тип="Регистрация" ИЛИ Тип="Возврат" Тогда
			Price		=Число(Задание.Параметры.Price);
			Quantity	=Число(Задание.Параметры.Quantity);
			
			Задание.Данные    = "="+Формат( Price*Quantity, "ЧЦ=15;ЧДЦ=2" );
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
			ИтогоСуммаЧека = ИтогоСуммаЧека + Price*Quantity;
			
		ИначеЕсли Тип="Оплата" Тогда
			Summ		=Число(Задание.Параметры.Summ);
			TypeClose	=Макс(1,Число(Задание.Параметры.TypeClose)) - 1;	// в драйвере наличные - 0, а у нас 1
			
			Если ИтогоСуммаОплаты = 0 Тогда
				СтрВправо = "="+Формат(ИтогоСуммаЧека, "ЧЦ=15;ЧДЦ=2");
				Задание.Данные    = ДополнитьСтроку("ИТОГ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
				Задание.ТипДанных = "Строка";
				Задание.Параметры = "Право,ПереводСтроки";
				
				ИндексСтроки = ИндексСтроки + 1;
				Задание = ТаблицаЗадания.Вставить(ИндексСтроки);
			КонецЕсли;
			
			СтрВлево  = ?(TypeClose=0, "НАЛИЧНЫМИ", "ТИП ОПЛАТЫ "+TypeClose);
			СтрВправо = "="+Формат(Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку(СтрВлево, МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
			ИтогоСуммаОплаты = ИтогоСуммаОплаты + Summ;
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Задание = ТаблицаЗадания.Добавить();
	СтрВправо = Формат( ТекущаяДата(), "ДФ=дд-ММ-гг")+" "+Формат( ТекущаяДата(), "ДФ=ЧЧ:мм");
	Задание.Данные    = ДополнитьСтроку("#0001", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,ПереводСтроки";
	
	Задание = ТаблицаЗадания.Добавить();
	СтрВправо = "0000001 ";
	Задание.Данные    = ДополнитьСтроку(" ККМ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,ПереводСтроки";
	
КонецПроцедуры
 
// Нефискальная печать задания
//
Процедура Печать(ТаблицаЗадания, КолвоКопий=1)
	
	Перем ТипДанных,Параметры;
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Для н=1 По КолвоКопий Цикл
		
		ИндексСтроки = 0;
		Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
			
			Если НЕ СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,ТипДанных,Параметры,"Строка,ШтрихКод,Картинка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ВыполнитьДействиеККМ(ТипДанных,Параметры) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		DRV.CutType=1;  // неполная отрезка
		DRV.CutCheck();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатьПД(ТаблицаЗадания, КолвоКопий=1)
	
	Перем Параметры;
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	DRV.ConfigureStandardSlipDocument();	// в соответствии с параметрами из таблиц ФР-а
	Если Ошибка() Тогда
		Возврат;
	КонецЕсли;
	
	Для н=1 По КолвоКопий Цикл
		
		ИндексСтроки = 0;
		Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
			
			DRV.ClearSlipDocumentBuffer();
			Если Ошибка() Тогда
				Возврат;
			КонецЕсли;
			
			НомСтр=0;
			Пока СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,,Параметры,"Строка") Цикл
				НомСтр=НомСтр+1;
				DRV.StringNumber=НомСтр+ОтступСверху;
				DRV.StringForPrinting=ДополнитьСтроку(Параметры.Caption, ПараметрыТО.СимволовВСтроке, Число(Параметры.Alignment), " ");
				DRV.FillSlipDocumentWithUnfiscalInfo();
				
				Если НомСтр=КолвоСтрокНаЛист Тогда
					Прервать
				КонецЕсли;
			КонецЦикла;
			
			DRV.InfoType=0;				// только нефискальная информация
			DRV.IsClearUnfiscalInfo=0;	// очитстить буфер после печати
			DRV.PrintSlipDocument();
			
			Пока  DRV.ResultCode=198 Цикл
				Текст1 = "Вставьте бумагу!";
				Текст2 = "Вставьте бумагу и нажмите <ОК>" +Символы.ПС+ "Для отмены печати нажмите <Отмена>";
				Если ИнтерфейсРМ.ВопросПредупреждение("Предупреждение", Текст1, Текст2, "ОК","","Esc=Отмена") = "Отмена" Тогда
					Результат.Ошибка = Истина;
					Результат.Описание = "";
					Возврат;
				КонецЕсли;
				
				DRV.PrintSlipDocument();
			КонецЦикла;
			
			DRV.GetShortECRStatus();
			Если Ошибка() Тогда
				DRV.ClearSlipDocumentBuffer();
				Возврат;
			КонецЕсли;
			
			//ждем пока идет печать ПД
			Пока DRV.ECRMode=14 Цикл
				Задержка(2000);  // меньше нельзя, иногда выдает "Нет связи"
				DRV.GetShortECRStatus();
				Если Ошибка() Тогда
					DRV.ClearSlipDocumentBuffer();
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,ТипДанных="",Параметры,СтрТипыДанных)
	
	СтрПечати="";
	Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
		
		Задание = ТаблицаЗадания[ИндексСтроки];
		
		ТипДанных=Задание.ТипДанных;
		Если Найти(СтрТипыДанных,ТипДанных)=0 Тогда  
			ИндексСтроки = ИндексСтроки + 1;
			Если ТипДанных = "ЧастичнаяОтрезка" Тогда
				Возврат Истина;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Параметры = СформироватьСтруктуруПараметровСтроки(Задание.Данные, Задание.Параметры);
		
		СтрПечати=СтрПечати+Параметры.Caption;
		Если Параметры.TextNewLine=0 Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		Параметры.Caption = СтрПечати;
		ИндексСтроки = ИндексСтроки + 1;
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// Формирование отчетов ККМ
//
Процедура ПолучитьОтчет(ТипОтчета)
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	DRV.GetECRStatus();
	Если Ошибка() Тогда
		Возврат;
	КонецЕсли;
	
	// проверка состояния последнего чека
	Если DRV.ECRMode=8 Тогда
		DRV.CancelCheck();
		Если Ошибка() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОтчета="Z" Тогда
		//Если DRV.EcrMode = 4 Тогда // смена закрыта
		//	Результат.СменаНеОткрыта = Истина;
		//Иначе	
			DRV.PrintReportWithCleaning();
			Ошибка();
		//КонецЕсли;
		
	ИначеЕсли ТипОтчета="X" Тогда
		DRV.PrintReportWithoutCleaning();
		Ошибка();
	ИначеЕсли ТипОтчета="ПоСекциям" Тогда
		DRV.PrintDepartmentReport();
		Ошибка();
	Иначе 
		Результат.Ошибка=Истина;
		Результат.Описание = "Ошибка ККМ";
		Результат.Подробно = "Тип отчета не поддерживается данной моделью ККМ";
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу значений из макета "ПараметрыСтроки"
//
Процедура ЗаполнитьПараметрыСтроки()
	
	ТаблицаПараметрыСтроки = Новый ТаблицаЗначений;
	ТаблицаПараметрыСтроки.Колонки.Добавить("ИдПарам");
	ТаблицаПараметрыСтроки.Колонки.Добавить("СтрЗнач");
	ТаблицаПараметрыСтроки.Колонки.Добавить("ЧислЗач");
	
	Таб = ПолучитьМакет("ПараметрыСтроки");
	
	Для НомСтр=1 По Таб.ВысотаТаблицы Цикл
		
		ИдПарам = Таб.Область(НомСтр,1).Текст;
		Если НЕ ЗначениеЗаполнено(ИдПарам) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСтроки = ТаблицаПараметрыСтроки.Добавить();
		ПараметрыСтроки.ИдПарам = ИдПарам;
		ПараметрыСтроки.СтрЗнач = Врег(Таб.Область(НомСтр,2).Текст);
		ПараметрыСтроки.ЧислЗач = Число(Таб.Область(НомСтр,3).Текст);
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует строку параметров в структуру, используя таблицу параметров
//
Функция СформироватьСтруктуруПараметровСтроки(Знач СтрПечати, Знач СтрПараметры)
	
	СтруктураПараметров = Новый Структура;
	
	Если СтрПечати="СтрОтчерк" Тогда
		СтрПечати="==================================================";
	ИначеЕсли СтрПечати="СтрЧерта" Тогда
		СтрПечати="--------------------------------------------------";
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Caption",СтрПечати);
	
	РазделительСтрок = Символы.ПС + Символы.ВК;
	СтрПараметры = СтрЗаменить(СтрПараметры, РазделительСтрок,"");	// убираем лишние переводы строк
	СтрПараметры = СтрЗаменить(СтрПараметры, ",", РазделительСтрок);
	
	Для н=1 По СтрЧислоСтрок(СтрПараметры) Цикл
		
		Парам = СтрПолучитьСтроку(СтрПараметры,н);
		
		Если Лев(Парам,8)="ВысотаШК" Тогда
			ЧислЗач = Число(Сред(Парам,9))*10;
			СтруктураПараметров.Вставить("BarCodeHeight", ЧислЗач);
		Иначе
			ПараметрыСтроки = ТаблицаПараметрыСтроки.Найти(Врег(Парам), "СтрЗнач");
			Если ПараметрыСтроки <> Неопределено Тогда
				СтруктураПараметров.Вставить(ПараметрыСтроки.ИдПарам, ПараметрыСтроки.ЧислЗач);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ПараметрыСтроки Из ТаблицаПараметрыСтроки Цикл
		
		Если НЕ СтруктураПараметров.Свойство(ПараметрыСтроки.ИдПарам) Тогда
			СтруктураПараметров.Вставить(ПараметрыСтроки.ИдПарам, ПараметрыСтроки.ЧислЗач);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
КонецФункции

#КонецЕсли

Результат = Новый Структура("Ошибка,Описание,Подробно,СменаНеОткрыта", Ложь,"","",Ложь);
