// Хранит массив страниц в форме.
Перем МассивСтраниц;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Завершает мастер настройки торгового объекта.
//
Процедура Финиш()
	
	Если НЕ КодыНовыхЭлементовУникальны() Тогда
		Возврат;
	КонецЕсли;
	
	Если СоздатьНачальныйОбразБазы Тогда
		Попытка
			УстановитьМонопольныйРежим(Истина);
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Сообщить("Создание начального образа возможно только в монопольном режиме!");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	ИнфБаза = ИнформационнаяБаза;
	
	Если ПереключательИБ = 1 Тогда
		
		Сообщить("Создание элемента справочника ""Информационные базы"".");
		
		ИБ = Справочники.ИнформационныеБазы.СоздатьЭлемент();
		ИБ.Наименование 												 = ИБ_Наименование;
		Если ЗначениеЗаполнено(ИБ_Код) Тогда
			ИБ.Код                                                       = ИБ_Код;
		КонецЕсли;
		//ИБ.РазрешенВводШК 												 = ИБ_РазрешенВводШК;			
		//ИБ.ПрефиксШКРИБ 												 = ИБ_ПрефиксШК;
		//ИБ.ДиапазонНачало 												 = ИБ_ДиапазонНачало;
		//ИБ.ДиапазонКонец 												 = ИБ_ДиапазонКонец;
		ИБ.ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте         = ИБ_ИнтервалДляОпросаРегламентныхЗаданийВФайловомВарианте;
		ИБ.ИспользоватьМеханизмАвтоматическогоОбменаДанными              = ИБ_ИспользоватьМеханизмАвтоматическогоОбменаДанными;
		ИБ.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте = ИБ_ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте;
		//ИБ.СоздаватьЗадачуОбновленияКонфигурацииБД                       = ИБ_СоздаватьЗадачуОбновленияКонфигурацииБД;
		//ИБ.ИсполнительЗадачиОбновления                                   = ИБ_ИсполнительЗадачиОбновления;
		
		Попытка
			ИБ.Записать();
			ИнфБаза = Иб.Ссылка;
			ИБ_Код = ИнфБаза.Код;
		Исключение
			Сообщить(ОписаниеОшибки());
			Сообщить("Не удалось создать информационную базу.");
			Возврат;
		КонецПопытки;	
		
		Сообщить("Создание узла плана обмена.");
		
		Узел                       = ПланыОбмена.Основной.СоздатьУзел();
		Узел.Код                   = ИБ_Код;
		Узел.Наименование          = ИБ_Наименование;
		Узел.Центр                 = ИБ_Центр;
		Узел.ИнформационнаяБаза    = ИнфБаза;
		Узел.Записать();
		
	КонецЕсли;

	// Обработка справочника места реализации
	Если ПереключательМестоРеализации = 0 Тогда
		СпрМР = МестоРеализации.ПолучитьОбъект();
		СпрМР.ИнформационнаяБаза    = ИнфБаза;
		СпрМР.КаталогиТоваров.Очистить();
		
	Иначе
		Сообщить("Создание элемента справочника ""Места реализации"".");
		СпрМР = Справочники.МестаРеализации.СоздатьЭлемент();
		СпрМР.Код                   = КодТорговыйОбъект;
		СпрМР.Наименование          = НаименованиеТорговыйОбъект;
		СпрМР.ТипЦен				= ТипЦен;
		
	КонецЕсли;
	
	Для каждого ЭлементСписка Из СписокКаталогов Цикл
		Если ЭлементСписка.Пометка Тогда
			СпрМР.КаталогиТоваров.Добавить().Каталог = ЭлементСписка.Значение;
		КонецЕсли; 
	КонецЦикла; 	
	
	Попытка
		СпрМР.Записать();
		УправлениеРИБ.УстановитьПараметрыРИБ();
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Сообщить("Не удалось создать место реализации.");
		Возврат;
		
	КонецПопытки;
	
	//ФормаТорговогоОбъекта = СпрМР.ПолучитьФорму();
	//
	//Если НЕ ОбъектКопирования.Пустая() Тогда
	//	ФормаТорговогоОбъекта.ПараметрОбъектКопирования = ОбъектКопирования;
	//КонецЕсли;
	//
	//ФормаТорговогоОбъекта.ОткрытьМодально();
	
	Если СоздатьНачальныйОбразБазы Тогда
		
		Сообщить("Создание начального образа.");
		
		Попытка
			ПланыОбмена.СоздатьНачальныйОбраз(Узел, "File = """ + Каталог + """");
			Предупреждение("Создание начального образа завершено!");
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	
	КонецЕсли;
	
	Если СоздатьНастройкуОбмена Тогда
		
		Форма = Справочники.НастройкиОбменаДанными.ПолучитьФормуНовогоЭлемента();
		Форма.УзелИнформационнойБазы = Узел.Ссылка;
		Форма.Открыть();
		
	КонецЕсли;
		
	// Откючение монопольного режима.
	УстановитьМонопольныйРежим(Ложь);
	
	Закрыть();
	
КонецПроцедуры
  
// Управляет доступностью элементов формы.
//
Процедура УправлениеДоступностью()
	
	ИмяТекСтраницы = ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя;
	ЭлементыФормы.ГиперссылкаНазад.Доступность  = Истина;
	ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
	
	Если ИмяТекСтраницы = "ТорговыйОбъект" Тогда
		
		Если ПереключательМестоРеализации = 0 И ЗначениеЗаполнено(МестоРеализации) Тогда
		    ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
		ИначеЕсли ПереключательМестоРеализации = 1 И ЗначениеЗаполнено(НаименованиеТорговыйОбъект) И ЗначениеЗаполнено(КодТорговыйОбъект) Тогда
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
		Иначе
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяТекСтраницы = "ТорговыйОбъект1" Тогда
		
		//Если НЕ ИБ_РазрешенВводШК ИЛИ ЗначениеЗаполнено(ИБ_ПрефиксШК) Тогда
		//	ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
		//Иначе
		//	ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
		//КонецЕсли;
		
	ИначеЕсли ИмяТекСтраницы = "Финиш" Тогда
		
		Если Не СоздатьНачальныйОбразБазы ИЛИ ЗначениеЗаполнено(Каталог) Тогда
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
		Иначе
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
		КонецЕсли;
	
	ИначеЕсли ИмяТекСтраницы = "ИнформационнаяБаза" Тогда
		
		Если ПереключательИБ = 0 И НЕ ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
		КонецЕсли;
		
		ЭлементыФормы.ГиперссылкаНазад.Доступность = Ложь;
					
	ИначеЕсли ИмяТекСтраницы = "ПараметрыИБ" Тогда 	
		
		Если НЕ ЗначениеЗаполнено(ИБ_Наименование) ИЛИ НЕ ЗначениеЗаполнено(ИБ_Код) Тогда
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ГиперссылкаВперед.Доступность = Истина;
		КонецЕсли;			
		
	КонецЕсли;
	
	//Если ИБ_РазрешенВводШК Тогда
	//	ЭлементыФормы.ПрефиксШК.Доступность = Истина;
	//Иначе
	//	ЭлементыФормы.ПрефиксШК.Доступность = Ложь;
	//КонецЕсли;
	
	Если СоздатьНачальныйОбразБазы Тогда
		ЭлементыФормы.Каталог.Доступность = Истина;
	Иначе
		ЭлементыФормы.Каталог.Доступность = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.НадписьИнформационнаяБаза.Доступность = НЕ ПереключательИБ;
	ЭлементыФормы.ИнформационнаяБаза.Доступность        = НЕ ПереключательИБ;
	ЭлементыФормы.НадписьШагиПараметрыИБ.Доступность    = ПереключательИБ;
	ЭлементыФормы.НадписьШагиСозданиеИБ1.Доступность    = ПереключательИБ;
	ЭлементыФормы.НадписьШагиСозданиеИБ.Доступность     = ПереключательИБ;
	
	ЭлементыФормы.НадписьМестоРеализации.Доступность	= НЕ ПереключательМестоРеализации;
	ЭлементыФормы.МестоРеализации.Доступность    	    = НЕ ПереключательМестоРеализации;
	ЭлементыФормы.НадписьНаименование.Видимость			= ПереключательМестоРеализации;
	ЭлементыФормы.НаименованиеТорговыйОбъект.Видимость	= ПереключательМестоРеализации;
	ЭлементыФормы.НадписьКод.Видимость					= ПереключательМестоРеализации;
	ЭлементыФормы.КодТорговыйОбъект.Видимость			= ПереключательМестоРеализации;
	ЭлементыФормы.Надпись4.Видимость					= ПереключательМестоРеализации;
	ЭлементыФормы.НадписьТипЦен.Видимость				= ПереключательМестоРеализации;
	ЭлементыФормы.ТипЦен.Видимость						= ПереключательМестоРеализации;
	
	
	Если (ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя = "ТорговыйОбъект2" И ПереключательИБ = 0) 
		ИЛИ (ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя = "СозданиеИБ") Тогда
		ЭлементыФормы.ГиперссылкаВперед.Заголовок = "Готово";
	Иначе
		ЭлементыФормы.ГиперссылкаВперед.Заголовок = "Далее";
	КонецЕсли;

								
КонецПроцедуры

// Управляет отметкой незаполненного в форме.
//
Процедура УправлениеОтметкойНезаполненного()
	
	//Если ИБ_РазрешенВводШК И Не ЗначениеЗаполнено(ИБ_ПрефиксШК) Тогда
	//	ЭлементыФормы.ПрефиксШК.ОтметкаНезаполненного = Истина;
	//Иначе
	//	ЭлементыФормы.ПрефиксШК.ОтметкаНезаполненного = Ложь;
	//КонецЕсли;
	
	Если СоздатьНачальныйОбразБазы И Не ЗначениеЗаполнено(Каталог) Тогда
		ЭлементыФормы.Каталог.ОтметкаНезаполненного = Истина;
	Иначе
		ЭлементыФормы.Каталог.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
		
КонецПроцедуры

// Получает массив страниц в зависимости от настроек базы.
//
// Возвращаемое значение:
//  Массив, содержащий имена страниц.
//
Функция ПолучитьМассивСтраниц()
	
	РеальныйМассивСтраниц = Новый Массив;
	
	Для Каждого ЭлементМассива Из МассивСтраниц Цикл
		
		РеальныйМассивСтраниц.Добавить(ЭлементМассива);
		
	КонецЦикла;
	
	Возврат РеальныйМассивСтраниц;
	
КонецФункции

// Выполняет движение на шаг вперед или назад.
//
// Параметры:
//  Шаг - +/- 1.
//
Процедура ВыполнитьДвижение(Шаг)
	
	ИмяТекСтраницы = ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя;
	РеальныйМассивСтраниц = ПолучитьМассивСтраниц();	
	ИндексЭлемента = РеальныйМассивСтраниц.Найти(ИмяТекСтраницы);
	
	Если ИндексЭлемента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ИмяТекСтраницы = "ИнформационнаяБаза" И ПереключательИБ = 0 И Шаг = 1) Тогда
		
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТорговыйОбъект;
				
	ИначеЕсли (ИмяТекСтраницы = "ТорговыйОбъект" И ПереключательИБ = 0 И Шаг = -1) Тогда
		
		ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ИнформационнаяБаза;
				
	ИначеЕсли (ИмяТекСтраницы = "ТорговыйОбъект2" И ПереключательИБ = 0 И Шаг = 1)
		ИЛИ (ИмяТекСтраницы = "СозданиеИБ" И Шаг = 1) Тогда
		
		Финиш();
		
	Иначе
		
		ИндексЭлемента = ИндексЭлемента + Шаг;
	
		Если ИндексЭлемента >= 0 И ИндексЭлемента <= РеальныйМассивСтраниц.ВГраница() Тогда
			ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы[РеальныйМассивСтраниц[ИндексЭлемента]];
		КонецЕсли;

	КонецЕсли;    		
	
	Для Каждого ЭлементМассива Из МассивСтраниц Цикл
		
		Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя = ЭлементМассива Тогда
			ЭлементыФормы["НадписьШаги" + ЭлементМассива].Шрифт = Новый Шрифт(ЭлементыФормы["НадписьШаги" + ЭлементМассива].Шрифт, , , Истина);
		Иначе
			ЭлементыФормы["НадписьШаги" + ЭлементМассива].Шрифт = Новый Шрифт(ЭлементыФормы["НадписьШаги" + ЭлементМассива].Шрифт, , , Ложь);
		КонецЕсли;
			
	КонецЦикла;
	
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница.Имя = "ПараметрыИБ" Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПереключательЦентр;
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

// Функция проверяет уникальность кода информационной базы
//
Функция КодИБУникален()
	
	КодУникален = Ложь;
	
	Если НЕ ПустаяСтрока(ИБ_Код) Тогда
			
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Код", ИБ_Код);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ИнформационныеБазы.Ссылка
		|ИЗ
		|	Справочник.ИнформационныеБазы КАК ИнформационныеБазы
		|ГДЕ
		|	ИнформационныеБазы.Код = &Код";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Предупреждение("Код """ + ИБ_Код + """ принадлежит информационной базе """ + Выборка.Ссылка + """.
				|Введите другой код.");
		Иначе
			КодУникален	= Истина;
		КонецЕсли;
			
	Иначе
		Предупреждение("Не заполнен код информационной базы.");
	КонецЕсли;
	
	Возврат КодУникален;
	
КонецФункции

// Функция проверяет уникальность кода торгового объекта
//
Функция КодТорговогоОбъектаУникален()
	
	Если ПереключательМестоРеализации = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Если ПустаяСтрока(КодТорговыйОбъект) Тогда
	    Предупреждение("Не заполнен код торгового объекта.");
		Возврат Ложь;
		
	ИначеЕсли НЕ ПустаяСтрока(КодТорговыйОбъект) Тогда
		СпрСсылка = Справочники.МестаРеализации.НайтиПоКоду(КодТорговыйОбъект);
		Если НЕ СпрСсылка.Пустая() Тогда		
				Предупреждение("Код """ + КодТорговыйОбъект + """ принадлежит торговому объекту """ + СпрСсылка + """.
				|Введите другой код.");
			Возврат Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция проверяет уникальность кодов для торгового объекта, информационной базы и узла обмена
Функция КодыНовыхЭлементовУникальны()
	
	КодыУникальны = Истина;
	
	
	СпрСсылка = Справочники.МестаРеализации.НайтиПоКоду(КодТорговыйОбъект);
	Если НЕ СпрСсылка.Пустая() Тогда		
		КодыУникальны = Ложь;
		Сообщить("Код """ + КодТорговыйОбъект + """ принадлежит торговому объекту """ + СпрСсылка + """. Введите другой код торгового объекта.", СтатусСообщения.Важное);
	КонецЕсли;
	
	Если ПереключательИБ = 1 Тогда
		СпрСсылка = Справочники.ИнформационныеБазы.НайтиПоКоду(ИБ_Код);
		Если НЕ СпрСсылка.Пустая() Тогда		
			КодыУникальны = Ложь;
			Сообщить("Код """ + ИБ_Код + """ принадлежит информационной базе """ + СпрСсылка + """. Введите другой код информационной базы.", СтатусСообщения.Важное);
		КонецЕсли;
		
		Если КодыУникальны Тогда
			СпрСсылка = ПланыОбмена.Основной.НайтиПоКоду(ИБ_Код);
			Если НЕ СпрСсылка.Пустая() Тогда		
				КодыУникальны = Ложь;
				Сообщить("Код """ + ИБ_Код + """ принадлежит узлу обмена """ + СпрСсылка + """. Введите другой код информационной базы.", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат КодыУникальны;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ВызовИзСправочника Тогда
		
		Предупреждение("Данная обработка вызывается из других процедур конфигурации.
					   |Вручную ее вызывать запрещено.");
		Отказ = Истина;
		
	КонецЕсли;
	
	Если НЕ ОбъектКопирования.Пустая() Тогда
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	// Установим текущую страницу формы.
	ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы[МассивСтраниц[0]];
	
	УправлениеДоступностью();
	
	Выборка = Справочники.КаталогиТоваров.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.ПометкаУдаления Тогда
			СписокКаталогов.Добавить(Выборка.Ссылка,,Истина);
		КонецЕсли; 
	КонецЦикла; 
	
	ТипЦен = Справочники.ТипыЦен.Розничная;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении поля ввода НаименованиеТорговыйОбъект.
//
Процедура НаименованиеТорговыйОбъектПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода КодТорговыйОбъект.
//
Процедура КодТорговыйОбъектПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

// Обработчик события АвтоПодборТекст поля ввода КодТорговыйОбъект.
//
Процедура КодТорговыйОбъектАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	Если Не ПустаяСтрока(Текст) И ЗначениеЗаполнено(НаименованиеТорговыйОбъект) Тогда
		ЭлементыФормы.ГиперссылкаВперед.Доступность = истина;
	Иначе
		ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
	КонецЕсли;
			
КонецПроцедуры

// Обработчик события ПриИзменении переключателя Центр.
//
Процедура ПереключательЦентрПриИзменении(Элемент)
	
	Если ИБ_Центр Тогда
		ИБ_РазрешенВводШК = Истина;
	КонецЕсли;
	
	УправлениеОтметкойНезаполненного();
	УправлениеДоступностью();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода РазрешенВводШК.
//
Процедура РазрешенВводШКПриИзменении(Элемент)
	
	УправлениеОтметкойНезаполненного();
	УправлениеДоступностью();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода ПрефиксШК.
//
Процедура ПрефиксШКПриИзменении(Элемент)
	
	УправлениеОтметкойНезаполненного();
	УправлениеДоступностью();
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста поля ввода ПрефиксШК.
//
Процедура ПрефиксШКАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		ЭлементыФормы.ГиперссылкаВперед.Доступность = истина;
	Иначе
		ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Нажатие гиперссылки Назад.
//
Процедура ГиперссылкаНазадНажатие(Элемент)
	
	ВыполнитьДвижение(-1);
	
КонецПроцедуры

// Обработчик события Нажатие гиперссылки Вперед.
//
Процедура ГиперссылкаВпередНажатие(Элемент)
	
	Успех = Истина;
	
	Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ПараметрыИБ Тогда
		
		Успех = КодИБУникален();
		
	ИначеЕсли ЭлементыФормы.ПанельОсновная.ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ТорговыйОбъект Тогда
	
		Успех = КодТорговогоОбъектаУникален();
		
	КонецЕсли;
	
	Если Успех Тогда
		ВыполнитьДвижение(1);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении флажка СоздатьНачальныйОбраз.
//
Процедура СоздатьНачальныйОбразБазыПриИзменении(Элемент)
	
	УправлениеДоступностью();
	УправлениеОтметкойНезаполненного();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Каталог.
//
Процедура КаталогПриИзменении(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	УправлениеДоступностью();
	УправлениеОтметкойНезаполненного();
	
КонецПроцедуры

// Обработчик события НачалоВыбора поля ввода Каталог.
//
Процедура КаталогНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСФайлами.ВыбратьКаталог(Элемент.Значение);
	УправлениеДоступностью();
	УправлениеОтметкойНезаполненного();

КонецПроцедуры

// Обработчик события Открытие поля ввода Каталог.
//
Процедура КаталогОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение(Элемент.Значение);

КонецПроцедуры

// Обработчик события ПриИзменении переключателя ПереключательИБ
//
Процедура ПереключательИБПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры


Процедура ИнформационнаяБазаПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
	Если ЗначениеЗаполнено(ИнформационнаяБаза) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнформационнаяБаза);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Основной.Центр
		|ИЗ
		|	ПланОбмена.Основной КАК Основной
		|ГДЕ
		|	Основной.ИнформационнаяБаза = &ИнформационнаяБаза";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ИБ_Центр = Выборка.Центр;
		Иначе
			ИБ_Центр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИБ_НаименованиеПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура ИБ_КодПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура ИБ_КодАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) И ЗначениеЗаполнено(ИБ_Наименование) Тогда
		ЭлементыФормы.ГиперссылкаВперед.Доступность = истина;
	Иначе
		ЭлементыФормы.ГиперссылкаВперед.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ТипЦенОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


Процедура ПереключательМестоРеализацииПриИзменении(Элемент)
	
	УправлениеДоступностью();
    ПерезаполнитьСписокКаталогов();
	
КонецПроцедуры


Процедура МестоРеализацииПриИзменении(Элемент)
	
	УправлениеДоступностью();
	ПерезаполнитьСписокКаталогов();

КонецПроцедуры

Процедура ПерезаполнитьСписокКаталогов()
	
	Если ПереключательМестоРеализации = 0 И ЗначениеЗаполнено(МестоРеализации) Тогда
		СписокКаталогов.ЗаполнитьПометки(Ложь);
		Для Каждого СтрокаТаблицыКаталогов ИЗ МестоРеализации.КаталогиТоваров Цикл
			ТекСтрокаКаталога = СписокКаталогов.НайтиПоЗначению(СтрокаТаблицыКаталогов.Каталог);
			ТекСтрокаКаталога.Пометка = Истина;
		КонецЦикла;
		
	Иначе
		СписокКаталогов.ЗаполнитьПометки(Истина);
		
	КонецЕсли;	
	
КонецПроцедуры	


МассивСтраниц = Новый Массив;

МассивСтраниц.Добавить("ИнформационнаяБаза");
МассивСтраниц.Добавить("ПараметрыИБ");
МассивСтраниц.Добавить("ТорговыйОбъект");
МассивСтраниц.Добавить("ТорговыйОбъект2");
МассивСтраниц.Добавить("СозданиеИБ");

