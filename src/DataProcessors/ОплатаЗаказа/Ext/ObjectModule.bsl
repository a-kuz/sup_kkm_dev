
#Если Клиент Тогда

Перем ОбработкаЗаказ Экспорт;
Перем ВариантОплаты Экспорт;
Перем ТаблицаЗаказа;
Перем ФормаОплаты, ЭлементыФормы;

Перем ККМ,СписокДопККМ;
Перем ФлагЗавершения, ФлагОткрытия, ФлагДроби, ДробнаяЧасть;
Перем ОплаченнаяСумма,ТаблицаГруппыОплаты;
Перем ПротоколРасчетов1;
Перем МассивВариантовОплат;
Перем БылВариантОплаты, ДопустимаяСумма;
Перем ПредоплатаСуммаДобавки;
Перем НакопленияКлиента;
Перем ФлагНеплательщикБыл,ФлагБезналБыл,ФлагБонусБыл;
Перем БылоЗначениеВвода;
Перем ТранзакцииПС;
Перем ТипКарты, БылКлиент; //+Румба

// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
// Вызывается каждый раз при получении объекта обработки.
// Здесь надо прописать сброс реквизитов и переменных в начальные значения
Процедура УстановкаНачальныхЗначений() Экспорт
	
	ФлагОткрытия	= Истина;	
	ФлагЗавершения	= 0;
	ФлагДроби		= Ложь;
	ДробнаяЧасть	= 0.1;	
	
	СуммаПредоплаты	= 0;
	СуммаБонусов	= 0;
	
	ФлагУспешнойЗаписи	= Ложь;
	ФлагУспешнойОплаты	= Ложь;

	ФлагНеплательщикБыл = Ложь;
	ФлагБезналБыл		= Ложь;
	ФлагБонусБыл		= Ложь;

	БылВариантОплаты = Справочники.ВариантыОплаты.ПустаяСсылка();

	ПротоколРасчетов.Очистить();
	ПротоколРасчетов1 = ПротоколРасчетов.ВыгрузитьКолонки();

	ТранзакцииПС = Новый ТаблицаЗначений;
	ТранзакцииПС.Колонки.Добавить("ТипОперации");
	ТранзакцииПС.Колонки.Добавить("Номер");
	ТранзакцииПС.Колонки.Добавить("Карта");
	ТранзакцииПС.Колонки.Добавить("Сумма");
	ТранзакцииПС.Колонки.Добавить("Отменена");
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Вызывается из обработчика ПередОткрытием форм этой обработки,
// выполняет инициализацию рабочего места
//
Процедура ДействияПередОткрытиемФормы(ТекущаяФорма, Отказ) Экспорт
	
	ФормаОплаты = ТекущаяФорма;
	ЭлементыФормы = ФормаОплаты.ЭлементыФормы;
	
	ЗапрещенныеТипыОплат = Новый Массив;
	Если СуммаПредоплаты<>0 Тогда
		ЗапрещенныеТипыОплат.Добавить(Перечисления.ТипыОплаты.Безнал);
		ЗапрещенныеТипыОплат.Добавить(Перечисления.ТипыОплаты.Неплательщик);
		ЗапрещенныеТипыОплат.Добавить(Перечисления.ТипыОплаты.Бонусы);
		ЗапрещенныеТипыОплат.Добавить(Перечисления.ТипыОплаты.НаНомер);
		ЗапрещенныеТипыОплат.Добавить(Перечисления.ТипыОплаты.НаФолио);
	КонецЕсли; 
	
	Если глВерсия>1 И (НЕ Константы.РумбаИнтерфейсВкл.Получить() ИЛИ ЗначениеЗаполнено(Заказ.Клиент)) Тогда
		// при закрытии на номер или на фолио, в заказ подставляется клиент
		// если клиент уже указан то менять его нельзя
		ЗапрещенныеТипыОплат.Добавить(Перечисления.ТипыОплаты.НаНомер);
		ЗапрещенныеТипыОплат.Добавить(Перечисления.ТипыОплаты.НаФолио);
	КонецЕсли; 
	
	МассивВариантовОплат = ИнтерфейсРМ.ПолучитьРазрешенныеВариантыОплаты(Заказ.Клиент, ЗапрещенныеТипыОплат);
	
	Если МассивВариантовОплат.Количество()=0 Тогда
		Текст1="Недостаточно прав!";
		Текст2="Не доступен ни один вариант оплаты!";
		Если НЕ ФоновыйРежим Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ФоновыйРежим И МассивВариантовОплат.Найти(ВариантОплаты) = Неопределено Тогда
		Текст1="Недостаточно прав!";
		Текст2="Вариант оплаты не доступен!";
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаказа = Заказ.Товары.Выгрузить();
	//--------------------------------------------------------------------
	Если ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Закрыт Тогда
		Если НЕ ЗаполнитьПротоколНедозакрытогоЗаказа() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		СуммаКОплате = 0;
		
	ИначеЕсли СуммаПредоплаты=0 Тогда
		ЗаполнитьПредоплату();
		
		
		// если Заказ по брони с предоплатой, и предоплата больше суммы заказа
		ПрименитьПредоплатуПоБрони1();
		
		ОплаченнаяСумма	= ПротоколРасчетов.Итог("Сумма");
		СуммаКОплате	= Заказ.ИтоговаяСумма - ОплаченнаяСумма;
		
		Протокол = ПротоколРасчетов.Добавить();
		Протокол.Действие		= Перечисления.ДействияПриОплате.Заказ;
		Протокол.Сумма			= Заказ.ИтоговаяСумма;
		Протокол.ВариантОплаты	= "руб.";
		Протокол.Остаток		= СуммаКОплате;
		ДобавитьВПротокол1(Протокол);
		
		Если СуммаКОплате<0 И НЕ ДобавитьВозвратАванса()Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
		// если Заказ по брони с предоплатой, и предоплата меньше или равна сумме заказа
		ПрименитьПредоплатуПоБрони2();
		
	Иначе
		ОплаченнаяСумма	= 0;
		СуммаКОплате	= СуммаПредоплаты;
		Протокол = ПротоколРасчетов.Добавить();
		Протокол.Действие		= Перечисления.ДействияПриОплате.Аванс;
		Протокол.Сумма			= СуммаКОплате;
		Протокол.ВариантОплаты	= "руб.";
		Протокол.Остаток		= СуммаКОплате;
		ДобавитьВПротокол1(Протокол);
		
	КонецЕсли;
	
	//--------------------------------------------------------------------
	ККМ = глПараметрыРМ.ККМ;
	Если глПараметрыРМ.ККМЕстьДоп И ЗначениеЗаполнено(глПараметрыРМ.ККМСписокДоп) Тогда
		СписокДопККМ = глПараметрыРМ.ККМСписокДоп.Скопировать();
		СписокДопККМ.Вставить(0,ККМ);
	КонецЕсли; 
	
	ОпределитьГруппыОплаты();
	
	Если ТаблицаГруппыОплаты.Количество()=0 Тогда
		Текст1="Нет доступа!";
		Текст2="Заказ уже закрыт или удален...";
		Если НЕ ФоновыйРежим Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли;
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли ТаблицаГруппыОплаты.Количество()=1 Тогда
		ККМ = ТаблицаГруппыОплаты[0].ККМ;
		ЭлементыФормы.КнопкаККМ.Заголовок = ККМ.Наименование;
	Иначе
		ЭлементыФормы.КнопкаККМ.Заголовок = "Раздельная регистрация!!!";
	КонецЕсли;
	
	//--------------------------------------------------------------------
	ЗначениеВвода		= СуммаКОплате;	
	БылоЗначениеВвода	= ЗначениеВвода;
	
	Если ФоновыйРежим Тогда
	
		//глОжидание.Начало("Печать чека...",
		//				"Идет запись данных и печать чека на ККМ.
		//				|Пожалуйста, подождите...");
		
		Если ЗначениеЗаполнено(ВариантОплаты.Скидка) Тогда
			ОбработкаЗаказ.РасчетПоЗаказуПолный(ВариантОплаты.Скидка);
			ПослеПримененияСкидкиНаВариантОплаты();
		КонецЕсли;
		
		ДобавитьВПротокол();
		ЗаписатьОплату();
		
		//глОжидание.Конец();
		
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если СуммаКОплате>0 Тогда
		
		НакопленияКлиента = НакопленияКлиента(Заказ.Клиент);
		НакопленияКлиента.СуммаБезнал = НакопленияКлиента.СуммаБезнал + Заказ.Клиент.ГлубинаКредита;
		
		ВыбВариантОплаты = ?( ЗначениеЗаполнено(Заказ.Клиент.ОсновнойВариантОплаты), Заказ.Клиент.ОсновнойВариантОплаты,
																					глПараметрыРМ.ОплатаОсновнойВариант );
		
		Если МассивВариантовОплат.Найти(ВыбВариантОплаты)=Неопределено Тогда
			ВыбВариантОплаты = МассивВариантовОплат[0];
		КонецЕсли;
		
		ЭлементыФормы.ПанельСумма.ТекущаяСтраница = ЭлементыФормы.ПанельСумма.Страницы.Оплата;
		ФормаОплаты.ТекущийЭлемент = ЭлементыФормы.ЗначениеВвода;
		
		ВыборВариантаОплаты(ВыбВариантОплаты);
		
		// если нет накопленных бонусов, то убираем панель информации о них
		Если глВерсия=1 ИЛИ НакопленияКлиента.СуммаБонусов=0 Тогда
			ЭлементыФормы.ПанельБонусы.Свертка = РежимСверткиЭлементаУправления.Верх;
			ФормаОплаты.Высота = ФормаОплаты.Высота - (ЭлементыФормы.ПанельБонусы.Высота + 1);
		Иначе
			ЭлементыФормы.тБонусыКлиент.Заголовок = "Сумма бонусов ("+Заказ.Клиент.Наименование+")";
			ЭлементыФормы.тБонусыСумма .Заголовок = ФорматСумм(НакопленияКлиента.СуммаБонусов);
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ПанельБонусы.Свертка = РежимСверткиЭлементаУправления.Верх;
		ФормаОплаты.Высота = ФормаОплаты.Высота - (ЭлементыФормы.ПанельБонусы.Высота + 1);
		
		ЭлементыФормы.ПанельСумма.ТекущаяСтраница = ЭлементыФормы.ПанельСумма.Страницы.Сдача;
		ЭлементыФормы.НадписьСуммаСдачи.Заголовок = Формат(-ЗначениеВвода,"ЧДЦ=2; ЧН=");
		ФормаОплаты.ТекущийЭлемент = ЭлементыФормы.КнопкаОК;
		ФлагЗавершения = 1;
		
	КонецЕсли;
	
	ТипКарты = ""; //+Румба
	// сохраним значение клиента в заказе, на случай если нажмут "Отмена"
	// клиент мог поменяттся в процессе выбора типа оплаты "на номер"
	БылКлиент = Заказ.Клиент;
	
КонецПроцедуры
 
// Вызывается из обработчика ПередЗакрытием форм этой обработки,
// выполняет инициализацию рабочего места
//
Процедура ДействияПередЗакрытиемФормы(ТекущаяФорма, Отказ) Экспорт
	
	Если НЕ ФлагУспешнойЗаписи Тогда
		
		//Вернем прежнего клиента
		// клиент мог поменятся при выборе типа оплаты "на номер" или "на фолио"
		// если нажали кнопку "Отмена", то надо все вернуть назад
		Если Заказ.Клиент <> БылКлиент Тогда
			Заказ.Клиент = БылКлиент;
			Заказ.Записать();
		КонецЕсли; 
		
		// если оплата не записана но были транзакции платежной системы, то надо их отменить
		Для Каждого ТранзакцияПС Из ТранзакцииПС Цикл
			
			Если ТранзакцияПС.Отменена Тогда
				Продолжить;
			КонецЕсли; 
			
			ТипОперации = ?(ТранзакцияПС.ТипОперации = "Оплата", "ОтменаОплаты", "ОтменаВозврата");
			
			Если НЕ Защита.ЗапросПлатежнойСистемы(ТипОперации, ТранзакцияПС.Сумма, Заказ.Смена.Номер, Заказ.Номер, ТранзакцияПС.Номер, ТранзакцияПС.Карта, ВариантОплаты) Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			ТранзакцияПС.Отменена = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МОДУЛЯ

Процедура Сброс() Экспорт
	
	Если ФлагЗавершения<>0 Тогда
		Если ФлагЗавершения=2 Тогда
			ФормаОплаты.Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ФлагДроби		= Ложь;
	ДробнаяЧасть	= 0.1;
	ЗначениеВвода	= 0;
	
	глОтсечкаПростоя();
	
КонецПроцедуры

Процедура Точка() Экспорт
	
	Если ФлагЗавершения<>0 Тогда
		Если ФлагЗавершения=2 Тогда
			ФормаОплаты.Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ФлагОткрытия Тогда
		Сброс();
		ФлагОткрытия = Ложь;
	КонецЕсли;
	
	ФлагДроби = Истина;
	
	глОтсечкаПростоя();
	
КонецПроцедуры
 
Процедура НажатиеКнопки(СтрКнопки) Экспорт
	
	Если ФлагЗавершения<>0 Тогда
		Если ФлагЗавершения=2 Тогда
			ФормаОплаты.Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ФлагОткрытия Тогда
		Сброс();
		ФлагОткрытия = Ложь;
	КонецЕсли;
	
	НовЗнач = ЗначениеВвода;
	
	Если НЕ ФлагДроби Тогда
		НовЗнач = НовЗнач * ?(СтрКнопки="00",100,10) + Число(СтрКнопки);	
	Иначе
		НовЗнач = НовЗнач + Число(СтрКнопки) * ДробнаяЧасть;
		ДробнаяЧасть = ДробнаяЧасть * 0.1;
	КонецЕсли;
	
	Если ЭлементыФормы.ЗначениеВвода.ТипЗначения.ПривестиЗначение(НовЗнач) = НовЗнач Тогда
		ЗначениеВвода = НовЗнач;
	КонецЕсли; 
	
	глОтсечкаПростоя();
	
КонецПроцедуры

Процедура ДобавитьВПротокол()
	
	Если ЗначениеВвода=0 Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеВвода>0 Тогда
		_Действие	= Перечисления.ДействияПриОплате.Взнос;
		_Вариант	= ВариантОплаты;
		
	ИначеЕсли ЗначениеВвода<0 Тогда
		_Действие	= Перечисления.ДействияПриОплате.Сдача;
		_Вариант	= "руб.";
		
	КонецЕсли;
	
	Протокол = ПротоколРасчетов.Добавить();
	Протокол.Действие		= _Действие;
	Протокол.Сумма			= ЗначениеВвода;
	Протокол.ВариантОплаты	= _Вариант;
	Протокол.Остаток		= ПротоколРасчетов[ПротоколРасчетов.Количество()-2].Остаток - ЗначениеВвода;
	Протокол.ТипКарты		= ТипКарты;
	ТипКарты = "";
	
	ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
						?(ЗначениеВвода>0, Строка(_Вариант), "Сдача:")	,Модуль(ЗначениеВвода),
						"К ОПЛАТЕ:"										,Протокол.Остаток);
	
	ДобавитьВПротокол1(Протокол);
	
КонецПроцедуры

Процедура ДобавитьВПротокол1(СтрокаПротокола)
	
	ЗаполнитьЗначенияСвойств( ПротоколРасчетов1.Добавить(), СтрокаПротокола );
	
КонецПроцедуры

// Варианты оплаты не должны повторяться, кроме сертификатов.
// Безнал и Бонус могут быть только один раз, даже под разными вариантами оплаты.
Процедура ИсключениеИзСпискаВариантовОплаты(ВыбВариант) 
	
	Если глВерсия>1 И ВыбВариант.Тип = Перечисления.ТипыОплаты.Сертификат Тогда
		Возврат;
	КонецЕсли;
	
	н=0;
	Пока н<=МассивВариантовОплат.ВГраница() Цикл
		
		Если МассивВариантовОплат[н] = ВыбВариант ИЛИ 
			 (ВыбВариант.Тип = Перечисления.ТипыОплаты.Безнал ИЛИ глВерсия>1 И ВыбВариант.Тип = Перечисления.ТипыОплаты.Бонусы) И
			 МассивВариантовОплат[н].Тип = ВыбВариант.Тип Тогда
			 
			МассивВариантовОплат.Удалить(н);
			
		Иначе
			н=н+1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВернутьсяВПолеВвода()
	
	ФормаОплаты.ТекущийЭлемент = ЭлементыФормы.ЗначениеВвода;
	ФлагОткрытия = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьПредоплату()
	
	Если ЗаказДопИнф.ПротоколРасчетов.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаПротокола Из ЗаказДопИнф.ПротоколРасчетов.Протокол Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаПротокола.ВариантОплаты) Тогда
			Продолжить;
		КонецЕсли; 
		
		Протокол = ПротоколРасчетов.Добавить();
		Протокол.Действие		= СтрокаПротокола.Действие;
		Протокол.Сумма			= СтрокаПротокола.СуммаФакт;
		Протокол.ВариантОплаты	= СтрокаПротокола.ВариантОплаты;
		Протокол.Остаток		= 0;
	КонецЦикла; 
	
	ПротоколРасчетов.Свернуть("Действие,ВариантОплаты", "Сумма,Остаток");
	
КонецПроцедуры

Функция ЗаполнитьПротоколНедозакрытогоЗаказа()
	
	ДокСсылка = ЗаказДопИнф.ПротоколРасчетов;
	Если ДокСсылка.Пустая() Тогда
		Текст1="Ошибка ИБ";
		Текст2="Протокол расчетов не найден!
				|Обратитесь к администратору...";	
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат Ложь;
	КонецЕсли;
	
	ОплаченнаяСумма = 0;
	ФлагПредоплата = Истина;
	
	Для каждого СтрокаПротокола Из ДокСсылка.Протокол Цикл
		
		Протокол = ПротоколРасчетов.Добавить();
		Протокол.Действие		=СтрокаПротокола.Действие;
		Протокол.Сумма			=СтрокаПротокола.Сумма;
		Протокол.ВариантОплаты	=СтрокаПротокола.ВариантОплаты;
		Протокол.Остаток		=СтрокаПротокола.Остаток;
		
		Если Протокол.Действие = Перечисления.ДействияПриОплате.Аванс Тогда
			ОплаченнаяСумма = ОплаченнаяСумма + Протокол.Сумма;
			
		ИначеЕсли Протокол.Действие = Перечисления.ДействияПриОплате.Заказ Тогда
			ФлагПредоплата = Ложь;
			
		КонецЕсли;
		
		Если НЕ ФлагПредоплата Тогда
			ДобавитьВПротокол1(Протокол);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

Функция ДобавитьВозвратАванса()

	ИндексСтроки = ПротоколРасчетов.Количество()-1;
	Пока ИндексСтроки>=0 И СуммаКОплате<0 Цикл
		СтрокаПротокола = ПротоколРасчетов[ИндексСтроки];
		
		Если СтрокаПротокола.Действие = Перечисления.ДействияПриОплате.Взнос Тогда
			СуммаВозврата = Мин(-СуммаКОплате, СтрокаПротокола.Сумма);
			
			Если СтрокаПротокола.ВариантОплаты.Тип=Перечисления.ТипыОплаты.Карта Тогда
				СсылочныйНомер	= "";
				ДанныеКарты		= "";
				ТипОперации		= "Возврат";
				
				Если НЕ Защита.ЗапросПлатежнойСистемы(ТипОперации, СуммаВозврата, Заказ.Смена.Номер, Заказ.Номер, СсылочныйНомер, ДанныеКарты, СтрокаПротокола.ВариантОплаты) Тогда
					Возврат Ложь;
					
				ИначеЕсли ЗначениеЗаполнено(ДанныеКарты) Тогда
					ТранзакцияПС = ТранзакцииПС.Добавить();
					ТранзакцияПС.ТипОперации= ТипОперации;
					ТранзакцияПС.Номер		= СсылочныйНомер;
					ТранзакцияПС.Карта		= ДанныеКарты;
					ТранзакцияПС.Сумма		= СуммаВозврата;
					ТранзакцияПС.Отменена	= Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Протокол = ПротоколРасчетов.Добавить();
			Протокол.Действие		= Перечисления.ДействияПриОплате.ВозвратАванса;
			Протокол.Сумма			= -СуммаВозврата;
			Протокол.ВариантОплаты	= СтрокаПротокола.ВариантОплаты;
			
			СуммаКОплате = СуммаКОплате + СуммаВозврата;
			Протокол.Остаток		= СуммаКОплате;
			
			ДобавитьВПротокол1(Протокол);
		КонецЕсли; 
		
		ИндексСтроки = ИндексСтроки - 1;
	КонецЦикла; 
	
	Возврат Истина;
КонецФункции

Процедура ПрименитьПредоплатуПоБрони1()

	ПредоплатаСуммаДобавки = 0;
	
	Если глВерсия = 1 ИЛИ НЕ ЗначениеЗаполнено(Заказ.Бронь) ИЛИ НЕ ЗначениеЗаполнено(глПараметрыРМ.БроньПредоплатаВариантОплаты) Тогда
		Возврат;
	КонецЕсли; 
	
	Если глПараметрыРМ.БроньПредоплатаРежимВозврата = 0 Тогда
		// разница возвращается, добивать заказ не надо
		Возврат;
	КонецЕсли; 
	
	НакопленияКлиента = НакопленияКлиента(Заказ.Бронь.Клиент, Заказ.Бронь);
	БроньСуммаПредоплаты = НакопленияКлиента.СуммаБезнал;
	
	Если БроньСуммаПредоплаты <= Заказ.ИтоговаяСумма Тогда
		// заказ больше предоплаты
		Возврат;
	КонецЕсли; 
	
	ПредоплатаСуммаДобавки = БроньСуммаПредоплаты - Заказ.ИтоговаяСумма;
	Если глПараметрыРМ.БроньПредоплатаРежимВозврата = 1 Тогда
		// добиваем товаром
		ДобСтрокаЗаказа = ТаблицаЗаказа.Добавить();
		ДобСтрокаЗаказа.Товар			= глПараметрыРМ.БроньПредоплатаТовар;
		ДобСтрокаЗаказа.Количество		= 1;
		ДобСтрокаЗаказа.Цена			= ПредоплатаСуммаДобавки;
		ДобСтрокаЗаказа.Сумма			= ПредоплатаСуммаДобавки;
		ДобСтрокаЗаказа.ЦенаРеализации	= ПредоплатаСуммаДобавки;
		ДобСтрокаЗаказа.СуммаРеализации = ПредоплатаСуммаДобавки;
		
		ГруппаОплаты = ДобСтрокаЗаказа.Товар.Категория.ГруппаОплаты;
		ДобСтрокаЗаказа.ГруппаОплаты	= ?(ЗначениеЗаполнено(ГруппаОплаты), ГруппаОплаты, Константы.ОсновнаяГруппаОплаты.Получить());
		ДобСтрокаЗаказа.Статус			= Перечисления.СтатусыПозицийЗаказа.Заказано;
		
	ИначеЕсли Заказ.ИтоговаяСумма > 0 Тогда
		// добиваем суммовой наценкой
		НераспределеннаяСумма = ПредоплатаСуммаДобавки;
		ПоследняяСтрока = Неопределено;
		Для каждого СтрокаЗаказа Из ТаблицаЗаказа Цикл
			Если СтрокаЗаказа.Количество = 0 Тогда
				Продолжить;
			КонецЕсли; 
			ПоследняяСтрока = СтрокаЗаказа;
			Добавка = Окр(ПредоплатаСуммаДобавки * СтрокаЗаказа.СуммаРеализации / Заказ.ИтоговаяСумма, 2);
			СтрокаЗаказа.СуммаРеализации = СтрокаЗаказа.СуммаРеализации + Добавка;
			СтрокаЗаказа.ЦенаРеализации = СтрокаЗаказа.СуммаРеализации / СтрокаЗаказа.Количество;
			
			НераспределеннаяСумма = НераспределеннаяСумма - Добавка;
		КонецЦикла; 
		
		Если НераспределеннаяСумма<>0 И ПоследняяСтрока <> Неопределено Тогда
			ПоследняяСтрока.СуммаРеализации = ПоследняяСтрока.СуммаРеализации + НераспределеннаяСумма;
			ПоследняяСтрока.ЦенаРеализации = ?(ПоследняяСтрока.Количество = 0, 0, ПоследняяСтрока.СуммаРеализации / ПоследняяСтрока.Количество);
		КонецЕсли; 
		
	КонецЕсли;
	
	Заказ.ИтоговаяСумма = ТаблицаЗаказа.Итог("СуммаРеализации");
	
КонецПроцедуры
 
Процедура ПрименитьПредоплатуПоБрони2()

	Если глВерсия = 1 ИЛИ НЕ ЗначениеЗаполнено(Заказ.Бронь) ИЛИ НЕ ЗначениеЗаполнено(глПараметрыРМ.БроньПредоплатаВариантОплаты) Тогда
		Возврат;
	КонецЕсли; 
	
	НакопленияКлиента = НакопленияКлиента(Заказ.Бронь.Клиент, Заказ.Бронь);
	БроньСуммаПредоплаты = НакопленияКлиента.СуммаБезнал;
	Если БроньСуммаПредоплаты <= 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ВыборВариантаОплаты(глПараметрыРМ.БроньПредоплатаВариантОплаты);
	
	ЗначениеВвода = Мин(СуммаКОплате, БроньСуммаПредоплаты);	
	
	ОК();
	
КонецПроцедуры

Процедура ВыборВариантаОплаты(ВыбВариант=Неопределено) Экспорт
	
	Если ФлагЗавершения<>0 Тогда
		Если ФлагЗавершения=2 Тогда
			ФормаОплаты.Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ВыбВариант=Неопределено Тогда
		ВыбВариант = ИнтерфейсРМ.ВыборИзСписка(МассивВариантовОплат);
		Если ВыбВариант=Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПодтверждениеДоступа(ВыбВариант) Тогда
		ВернутьсяВПолеВвода();
		Возврат;
	КонецЕсли;
	
	// сумма разрешенная к закрытию данным вариантом оплаты м.б. ограничена
	ЕстьОграничениеСуммы = Ложь;
	Текст2 = "";
	ОпределитьДопустимуюСумму(ВыбВариант, ЕстьОграничениеСуммы, Текст2);
	
	Если ДопустимаяСумма <= 0 Тогда
		Если ЗначениеЗаполнено(Текст2) Тогда
			Текст1="Нет доступа!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли; 
		ВариантОплаты = Неопределено;
		ЭлементыФормы.КнопкаВариантОплаты.Заголовок = "Вариант оплаты...";
		ВернутьсяВПолеВвода();
		Возврат;
	КонецЕсли;
	
	ВариантОплаты = ВыбВариант;
	ЭлементыФормы.КнопкаВариантОплаты.Заголовок = ВариантОплаты.Наименование;
	
	//---------------------------------------------------------------
	// Скидка на вариант оплаты
	// Работает только если полная оплата одним взносом, иначе очень затруднительно
	Если глВерсия>1 И СуммаПредоплаты=0 И СуммаКОплате=Заказ.ИтоговаяСумма И ВариантОплаты.Скидка<>БылВариантОплаты.Скидка Тогда
		
		ОбработкаЗаказ.РасчетПоЗаказуПолный(ВариантОплаты.Скидка);
		ПослеПримененияСкидкиНаВариантОплаты();
		
	КонецЕсли;
	
	//---------------------------------------------------------------
	
	Если ЕстьОграничениеСуммы Тогда
		//ЭлементыФормы.тДопустимаяСумма.Заголовок = "Максимум: "+ФорматСумм(ДопустимаяСумма);
		ЗначениеВвода = Мин(ДопустимаяСумма, СуммаКОплате);
	Иначе
		//ЭлементыФормы.тДопустимаяСумма.Заголовок = "";
		ЗначениеВвода = СуммаКОплате;
	КонецЕсли;
	
	БылоЗначениеВвода = ЗначениеВвода;
	БылВариантОплаты = ВариантОплаты;
	
	Если глВерсия>1 И ВыбВариант.Тип = Перечисления.ТипыОплаты.Сертификат Тогда
		ОК();
	Иначе
		ВернутьсяВПолеВвода();
	КонецЕсли;
	
КонецПроцедуры

Функция ПодтверждениеДоступа(ВыбВариант)
	
	Если ВыбВариант.УровеньДоступа = Перечисления.УровниДоступа.РегистрацияСотрудника Тогда
		
		Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ПодтверждениеНеплательщика") Тогда
			ВыбСотрудник = ИнтерфейсРМ.ИдентификацияПользователя();
			Если ВыбСотрудник = Неопределено Тогда
				Возврат Ложь;
			ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ПодтверждениеНеплательщика", Истина, ВыбСотрудник) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВыбВариант.УровеньДоступа = Перечисления.УровниДоступа.РегистрацияКлиента Тогда
		
		ВыбКлиент = ИнтерфейсРМ.ИдентификацияКлиента();
		Если ВыбКлиент = Неопределено Тогда
			Возврат Ложь;
		ИначеЕсли ВыбКлиент<>Заказ.Клиент Тогда
			Текст1="Нет доступа!";
			Текст2="Необходима повторная идентификация клиента...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат Ложь;
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ОпределитьДопустимуюСумму(ВыбВариант, ЕстьОграничениеСуммы, Текст2)
	
	ДопустимаяСумма = 10000000000;
	
	// сначала проверим остаток по безналу и бонусы
	Если ВыбВариант.Тип = Перечисления.ТипыОплаты.Безнал Тогда
		
		ЕстьОграничениеСуммы = Истина;
		//ДопустимаяСумма = Макс(0, Мин(ДопустимаяСумма, НакопленияКлиента.СуммаБезнал) );
		//
		//Если ДопустимаяСумма = 0 Тогда
		//	Текст2="Кредит платежной карты клиента исчерпан!";
		//	Возврат;
		//КонецЕсли;
		
	ИначеЕсли глВерсия>1 И ВыбВариант.Тип=Перечисления.ТипыОплаты.Бонусы Тогда
		
		ЕстьОграничениеСуммы = Истина;
		ДопустимаяСумма = Макс(0, Мин(ДопустимаяСумма, НакопленияКлиента.СуммаБонусов) );
		
		Если ДопустимаяСумма = 0 Тогда
			Текст2="У клиента нет накопленных бонусов!";
			Возврат;
		КонецЕсли;
		
	ИначеЕсли глВерсия>1 И ВыбВариант.Тип = Перечисления.ТипыОплаты.Сертификат Тогда
		ЕстьОграничениеСуммы = Истина;
		ДопустимаяСумма = ВыбВариант.НоминалСертификата;
		
			
			
	КонецЕсли;
	
	// теперь возможное ограничение суммы по категориям товаров, ограничение безнала и неплательщика за период
	// используется также в печати предварительного счета
	//Защита.РасчетСуммыНаНеплательщикаБезнал(Заказ, ВыбВариант, ЕстьОграничениеСуммы, ДопустимаяСумма, ТаблицаЗаказа, Текст2);
	
КонецПроцедуры

Процедура ПослеПримененияСкидкиНаВариантОплаты()
	
	// если скидка применилась, устанавливаем признак изменения заказа
	ОбработкаЗаказ.Модифицирован = ОбработкаЗаказ.ТаблицаСкидок.Найти(Перечисления.ТипыСкидок.НаВариантОплаты, "Тип") <> Неопределено;
	
	СуммаКОплате = Заказ.ИтоговаяСумма;
	
	ПротоколРасчетов[0].Сумма	= СуммаКОплате;
	ПротоколРасчетов[0].Остаток	= СуммаКОплате;
	ПротоколРасчетов1[0].Сумма	= СуммаКОплате;
	ПротоколРасчетов1[0].Остаток= СуммаКОплате;
	
КонецПроцедуры
 
Процедура ВыборККМ() Экспорт
	
	Если ФлагЗавершения=2 Тогда
		ФормаОплаты.Закрыть();
		Возврат;
	КонецЕсли;
	
	Если СуммаКОплате>0 Тогда
		ФормаОплаты.ТекущийЭлемент = ЭлементыФормы.ЗначениеВвода;
	КонецЕсли;
	
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ВыборККМ") ИЛИ НЕ ЗначениеЗаполнено(СписокДопККМ) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбККМ = ИнтерфейсРМ.ВыборИзСписка(СписокДопККМ);
	Если ВыбККМ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ККМ = ВыбККМ;  
	ЭлементыФормы.КнопкаККМ.Заголовок = ККМ.Наименование;
	
	Для каждого ГруппыОплаты Из ТаблицаГруппыОплаты Цикл
		ГруппыОплаты.ККМ = ВыбККМ;
	КонецЦикла;
	
	ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ОплатаВыборККМ, Заказ.Ссылка, ККМ.Наименование);
	
КонецПроцедуры
 
Процедура ОпределитьГруппыОплаты()
	
	//ИспользоватьГруппыОплаты = Константы.ИспользоватьГруппыОплаты.Получить() И ОплаченнаяСумма=0 И СуммаПредоплаты=0;
	ИспользоватьГруппыОплаты = Константы.ИспользоватьГруппыОплаты.Получить();
	
	ТаблицаГруппыОплаты = Новый ТаблицаЗначений;
	ТаблицаГруппыОплаты.Колонки.Добавить("Группа");
	ТаблицаГруппыОплаты.Колонки.Добавить("ККМ");
	ТаблицаГруппыОплаты.Колонки.Добавить("Сумма", ПолучитьОписаниеТиповЧисла() );
	ТаблицаГруппыОплаты.Колонки.Добавить("Протокол");
	
	// если заказ уже закрыт, то значит это повторная попытка печати чеков
	// надо восстановить картину по уже записанным протоколам
	Если ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Закрыт Тогда
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ПротоколРасчетов.Ссылка,
		|	ПротоколРасчетов.ГруппаОплаты,
		|	ПротоколРасчетов.ИтогСуммаФакт
		|ИЗ
		|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
		|ГДЕ
		|	ПротоколРасчетов.Заказ = &Заказ
		|	И ПротоколРасчетов.ККМ = ЗНАЧЕНИЕ(Справочник.ТорговоеОборудование.ПустаяСсылка)
		|	И НЕ ПротоколРасчетов.Неучетный
		|");
		
		Запрос.УстановитьПараметр("Заказ",Заказ.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ГруппыОплаты = ТаблицаГруппыОплаты.Добавить();
			ГруппыОплаты.Группа		= ?(ИспользоватьГруппыОплаты, Выборка.ГруппаОплаты, Неопределено);
			ГруппыОплаты.ККМ		= ?(ИспользоватьГруппыОплаты, ККМГруппыОплаты(ГруппыОплаты.Группа), ККМ);
			ГруппыОплаты.Сумма		= Выборка.ИтогСуммаФакт;
			ГруппыОплаты.Протокол	= Выборка.Ссылка;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	// если группы оплаты не используются, то делаем фиктивную запись для совместимости алгоритма
	Если НЕ ИспользоватьГруппыОплаты ИЛИ СуммаПредоплаты<>0 ИЛИ ОплаченнаяСумма<>0 Тогда
		ГруппыОплаты = ТаблицаГруппыОплаты.Добавить();
		ГруппыОплаты.Группа		= ?(ИспользоватьГруппыОплаты, Константы.ОсновнаяГруппаОплаты.Получить(), Неопределено);
		ГруппыОплаты.ККМ		= ?(ИспользоватьГруппыОплаты, ККМГруппыОплаты(ГруппыОплаты.Группа), ККМ);
		Возврат;
	КонецЕсли;
	
	// реальные группы оплаты
	Для каждого СтрокаЗаказа Из ТаблицаЗаказа Цикл
		Если СтрокаЗаказа.Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппыОплаты = ТаблицаГруппыОплаты.Добавить();
		ГруппыОплаты.Группа	= СтрокаЗаказа.ГруппаОплаты;
		Если НЕ ЗначениеЗаполнено(ГруппыОплаты.Группа) Тогда
			ГруппыОплаты.Группа = Константы.ОсновнаяГруппаОплаты.Получить();
		КонецЕсли; 
		ГруппыОплаты.ККМ	= ККМГруппыОплаты(ГруппыОплаты.Группа);
		ГруппыОплаты.Сумма	= СтрокаЗаказа.СуммаРеализации;
		
	КонецЦикла;
	
	ТаблицаГруппыОплаты.Свернуть("Группа,ККМ,Протокол","Сумма");
	
КонецПроцедуры

Функция ККМГруппыОплаты(Группа)
	
	СтрокаГруппы = глПараметрыРМ.ККМГруппыОплаты.Найти(Группа,"Группа");
	
	Возврат ?(СтрокаГруппы=Неопределено, ККМ, СтрокаГруппы.ККМ);
КонецФункции

Процедура ОК() Экспорт
	Перем допСтроки;
	Если ФлагЗавершения=1 Тогда
		ФлагЗавершения=2;
		
		глОжидание.Начало("Печать чека...",
						"Идет запись данных и печать чека на ККМ.
						|Пожалуйста, подождите...");
		
		Если ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Закрыт Тогда
			ПечатьЧековПоГруппам();
		Иначе
			ДобавитьВПротокол(); // сдача, если есть
			ЗаписатьОплату();
		КонецЕсли;
		
		глОжидание.Конец();
		
		Если НЕ глПараметрыРМ.ОплатаНеЗакрыватьСразу Тогда
			//Если глПараметрыРМ.ЗКП = 0 тогда
				ФормаОплаты.Закрыть();
			//КонецЕсли;
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ФлагЗавершения=2 Тогда
		ФормаОплаты.Закрыть();
		Возврат;
		
	КонецЕсли;
	
	Если ВариантОплаты = Неопределено Тогда
		ВыборВариантаОплаты();
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеВвода<0 Тогда //Мясновъ - даем возможность закрывать с 0-м
		ВернутьсяВПолеВвода();
		Возврат;
	КонецЕсли;
	
	Если ВариантОплаты.Тип<>Перечисления.ТипыОплаты.Нал И ЗначениеВвода>СуммаКОплате Тогда
		Текст1="Превышение суммы!";
		Текст2="Указанная сумма больше, чем нужно внести!";		
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		ВернутьсяВПолеВвода();
		Возврат;
	КонецЕсли;
	
	// если применилась скидка на вариант оплаты, но сумму уменьшили, то скидку надо отменить
	Если СуммаПредоплаты=0 И ОбработкаЗаказ.Модифицирован И ЗначениеВвода < СуммаКОплате Тогда
		Текст1="Внимание!";
		Текст2="Скидка на вариант оплаты не действует при частичной оплате!";
		Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"ОК","","Esc=Отмена") = "Отмена" Тогда
			ВернутьсяВПолеВвода();
			Возврат;
		КонецЕсли;
		
		ОбработкаЗаказ.РасчетПоЗаказуПолный();
		ПослеПримененияСкидкиНаВариантОплаты();
	КонецЕсли; 
	
	Если ПротоколРасчетов1.Найти(ВариантОплаты, "ВариантОплаты") <> Неопределено Тогда
		//Текст1="Нет доступа!";
		//Текст2="Варианты оплаты не могут повторяться!";
		//ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		//ВернутьсяВПолеВвода();
		//Возврат;
		
	ИначеЕсли НЕ ФоновыйРежим И ЗначениеВвода > ДопустимаяСумма Тогда
		Текст1="Превышение суммы!";
		Текст2="Указанная сумма больше, чем можно закрыть этим вариантом оплаты!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		ВернутьсяВПолеВвода();
		Возврат;
		
	КонецЕсли; 
	
	Если ВариантОплаты.Тип=Перечисления.ТипыОплаты.Карта Или ВариантОплаты.Тип=Перечисления.ТипыОплаты.Безнал Тогда
		Сумма			= ЗначениеВвода;
		СсылочныйНомер	= "";
		ДанныеКарты		= "";
		ТипОперации		= "Оплата";
		
		Если НЕ Защита.ЗапросПлатежнойСистемы(ТипОперации, Сумма, Заказ.Смена.Номер, Заказ.Номер, СсылочныйНомер, ДанныеКарты, ВариантОплаты, ) Тогда
			ВернутьсяВПолеВвода();
			Возврат;
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеКарты) ИЛИ ЗначениеЗаполнено(СсылочныйНомер) Тогда
			ТранзакцияПС = ТранзакцииПС.Добавить();
			ТранзакцияПС.ТипОперации= ТипОперации;
			ТранзакцияПС.Номер		= СсылочныйНомер;
			ТранзакцияПС.Карта		= ДанныеКарты;
			ТранзакцияПС.Сумма		= Сумма;
			ТранзакцияПС.Отменена	= Ложь;
			
		КонецЕсли;
		//конецесли;
	КонецЕсли;
	
	ИсключениеИзСпискаВариантовОплаты(ВариантОплаты);
	РаспределитьСуммуПоТаблицеЗаказа(ЗначениеВвода, ВариантОплаты);
	
	ДобавитьВПротокол();
	СуммаКОплате		= СуммаКОплате - ЗначениеВвода;
	ЗначениеВвода		= СуммаКОплате;
	БылоЗначениеВвода	= ЗначениеВвода;
	
	Если СуммаКОплате>0 Тогда
		ВариантОплаты = Неопределено;
		ЭлементыФормы.КнопкаВариантОплаты.Заголовок = "Вариант оплаты...";
		ЭлементыФормы.тДопустимаяСумма.Заголовок = "";
		ВернутьсяВПолеВвода();
		
	Иначе
		ЭлементыФормы.ПанельСумма.ТекущаяСтраница = ЭлементыФормы.ПанельСумма.Страницы.Сдача;
		ЭлементыФормы.НадписьСуммаСдачи.Заголовок = Формат(-ЗначениеВвода,"ЧДЦ=2; ЧН=");
		ФлагЗавершения = 1;
		
		ФормаОплаты.ТекущийЭлемент = ЭлементыФормы.КнопкаОК;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура РаспределитьСуммуПоТаблицеЗаказа(Знач СуммаОплаты, ВариантОплаты)
	
	Если ТаблицаЗаказа = Неопределено ИЛИ ЗначениеЗаполнено(ПредоплатаСуммаДобавки) Тогда
		Возврат;
	КонецЕсли; 
	
	МассивКатегорий = ВариантОплаты.ДопустимыеКатегории.ВыгрузитьКолонку("Категория");
	
	Для каждого СтрокаЗаказа Из ТаблицаЗаказа Цикл
		Если ПроверитьЗначениеПоСписку(СтрокаЗаказа.Товар.Категория, ВариантОплаты.ТипОграниченияКатегорий, МассивКатегорий) Тогда
			СуммаПоСтроке = Мин(СтрокаЗаказа.СуммаРеализации, СуммаОплаты);
			//СтрокаЗаказа.СуммаРеализации = СтрокаЗаказа.СуммаРеализации - СуммаПоСтроке;
			СтрокаЗаказа.СуммаРеализации = СуммаПоСтроке;
			СуммаОплаты = СуммаОплаты - СуммаПоСтроке;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
Процедура ЗаписатьОплату()
	
	Перем ДокПротокол;
	
	НачатьТранзакцию();
	
	//---------------------------------------------------------------
	// Запись Заказа если применилась скидка на вариант оплаты
	Если ОбработкаЗаказ.Модифицирован Тогда
		
		Если НЕ ОбработкаЗаказ.ЗаписатьЗаказ(Истина) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		// бонусы тоже надо пересчитать, поскольку они считаются от сумм с учетом скидок
		//СуммаБонусов = Защита.РасчетБонусов(Заказ, ОбработкаЗаказ.ТаблицаЗаказа);
		
	КонецЕсли;
	
	//---------------------------------------------------------------
	Если ЗаказДопИнф.ПротоколРасчетов.Пустая() Тогда
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДокПротокол, "Объект = Документы.ПротоколРасчетов.СоздатьДокумент()", ФоновыйРежим ) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
	Иначе
		ДокПротокол = ЗаказДопИнф.ПротоколРасчетов.ПолучитьОбъект();
	КонецЕсли;
	
	ВОстаткеМинус = Ложь;
	ВОстаткеНоль = Ложь;
	Для каждого Протокол1 Из ПротоколРасчетов1 Цикл
		
		// проверка на корректность протокола расчетов из-за непонятных глюков 
		// задвоения записей у некоторых клиентов
		Если ВОстаткеНоль Тогда
			// больше записей в протоколе быть не должно
			ЗаписьЖурналаРегистрации("Оплата заказа.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, "В протоколе расчетов некорректные записи.");
			Текст1="Ошибка оплаты!";
			Текст2="В протоколе расчетов некорректные записи!
					|Повторите ввод оплаты...";		
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			ОтменитьТранзакцию();
			Возврат;
			
		ИначеЕсли ВОстаткеМинус И НЕ(Протокол1.Действие=Перечисления.ДействияПриОплате.Сдача ИЛИ Протокол1.Действие=Перечисления.ДействияПриОплате.ВозвратАванса) Тогда
			// после отрицательного остатка должна быть сдача
			ЗаписьЖурналаРегистрации("Оплата заказа.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, "В протоколе расчетов некорректные записи.");
			Текст1="Ошибка оплаты!";
			Текст2="В протоколе расчетов некорректные записи!
					|Повторите ввод оплаты...";		
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		ДокПротоколСтрока = ДокПротокол.Протокол.Добавить();
		ДокПротоколСтрока.Действие		= Протокол1.Действие;
		ДокПротоколСтрока.Сумма			= Протокол1.Сумма;
		ДокПротоколСтрока.ВариантОплаты	= Протокол1.ВариантОплаты;
		ДокПротоколСтрока.Остаток		= Протокол1.Остаток;
		Если ЗначениеЗаполнено(ДокПротоколСтрока.ВариантОплаты) Тогда
			ДокПротоколСтрока.СуммаФакт	= Протокол1.Сумма;
		КонецЕсли; 
		ДокПротоколСтрока.ТипКарты		= Протокол1.ТипКарты; //+Румба - сохраним тип карты
		
		Если Протокол1.Остаток=0 Тогда
			ВОстаткеНоль = Истина;
		ИначеЕсли Протокол1.Остаток<0 Тогда
			ВОстаткеМинус = Истина;
		КонецЕсли; 
	КонецЦикла;
	
	// если последнее действие - сдача, то надо уменьшить фактическую сумму наличных, внесенную перед этим
	Если ДокПротоколСтрока.Действие = Перечисления.ДействияПриОплате.Сдача Тогда
		СуммаСдачи = -ДокПротоколСтрока.Сумма;
		
		н = ДокПротокол.Протокол.Количество()-2;
		Пока СуммаСдачи>0 И н>0 Цикл
			ДокПротоколСтрока = ДокПротокол.Протокол[н];
			Если ДокПротоколСтрока.ВариантОплаты.Тип = Перечисления.ТипыОплаты.Нал Тогда
				ВычСум						= Мин( СуммаСдачи, ДокПротоколСтрока.СуммаФакт );
				ДокПротоколСтрока.СуммаФакт	= ДокПротоколСтрока.СуммаФакт - ВычСум;
				СуммаСдачи					= СуммаСдачи - ВычСум;
			КонецЕсли; 
			н = н - 1;
		КонецЦикла; 
		
	КонецЕсли; 
	
	//---------------------------------
	ТекДата = ТекущаяДата();
	
	ДокПротокол.Номер		= Заказ.Номер;
	ДокПротокол.Дата		= ТекДата;
	ДокПротокол.Автор		= глПользователь;
	ДокПротокол.Смена		= ИнтерфейсРМ.ТекущаяСмена();
	ДокПротокол.Заказ		= Заказ.Ссылка;
	ДокПротокол.Клиент		= Заказ.Клиент;
	ДокПротокол.МестоРеализации=Заказ.МестоРеализации;
	ДокПротокол.ИтогСуммаФакт = ДокПротокол.Протокол.Итог("СуммаФакт");
	
	
	Если ТаблицаГруппыОплаты.Количество()=1 Тогда
		// нет разделения по группам оплаты
		ДокПротокол.Неучетный	= СуммаПредоплаты<>0;	// внесение предоплаты записываем как неучетный, чтобы не попадал в недозакрытые
		ДокПротокол.ГруппаОплаты = ТаблицаГруппыОплаты[0].Группа;
		Если глВерсия>1 Тогда
			ДокПротокол.СуммаБонусов = СуммаБонусов;
		КонецЕсли;
		ДокПротокол.Записать(РежимЗаписиДокумента.Проведение);
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДокПротокол, "Объект.Записать(РежимЗаписиДокумента.Проведение)", ФоновыйРежим ) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		ТаблицаГруппыОплаты[0].Протокол = ДокПротокол.Ссылка;
		ОсновнойПротокол = ДокПротокол.Ссылка;
		
	Иначе
		// в случае раздельной оплаты этот протокол записываем как фиктивный,
		// только для показа в заказе
		ДокПротокол.ККМ				= 0;
		ДокПротокол.ГруппаОплаты	= 0;
		ДокПротокол.Неучетный		= Истина;
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДокПротокол, "Объект.Записать()", ФоновыйРежим ) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
		
		ОсновнойПротокол = ДокПротокол.Ссылка;
		
		// и создаем протоколы для каждой группы оплаты
		ТабСводка = Новый ТаблицаЗначений;
		ТабСводка.Колонки.Добавить("ВариантОплаты");
		ТабСводка.Колонки.Добавить("Сумма"			, ПолучитьОписаниеТиповЧисла(12,2) );
		ТабСводка.Колонки.Добавить("ОстатокСумма"	, ПолучитьОписаниеТиповЧисла(12,2) );
		МассивСтрок = Новый Массив;
		Для каждого ДокПротоколСтрока Из ДокПротокол.Протокол Цикл
			Если ЗначениеЗаполнено(ДокПротоколСтрока.ВариантОплаты) Тогда
				Сводка = ТабСводка.Добавить();
				Сводка.ВариантОплаты	= ДокПротоколСтрока.ВариантОплаты;
				Сводка.Сумма			= ДокПротоколСтрока.СуммаФакт;
				Сводка.ОстатокСумма		= ДокПротоколСтрока.СуммаФакт;
			КонецЕсли; 
		КонецЦикла;
		
		ТабСводка.Свернуть("ВариантОплаты","Сумма, ОстатокСумма");
		
		Для каждого ГруппыОплаты Из ТаблицаГруппыОплаты Цикл
			
			Коэф = ?( ТаблицаГруппыОплаты.Итог("Сумма")=0, 0, ГруппыОплаты.Сумма / ТаблицаГруппыОплаты.Итог("Сумма") );
			
			Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДокПротокол, "Объект = Документы.ПротоколРасчетов.СоздатьДокумент()", ФоновыйРежим ) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
			ДокПротокол.Номер		= Заказ.Номер;
			ДокПротокол.Дата		= ТекДата;
			ДокПротокол.Автор		= глПользователь;
			ДокПротокол.Смена		= ИнтерфейсРМ.ТекущаяСмена();
			ДокПротокол.Заказ		= Заказ.Ссылка;
			ДокПротокол.Клиент		= Заказ.Клиент;
			ДокПротокол.МестоРеализации=Заказ.МестоРеализации;
			
			ДокПротокол.ККМ			=0;						// ККМ запишем после пробития чека
			ДокПротокол.ГруппаОплаты=ГруппыОплаты.Группа;
			Если глВерсия>1 Тогда
				Если ТаблицаГруппыОплаты.Индекс(ГруппыОплаты) = 0 Тогда
					// сумму бонусов делить не нужно, записываем ее целиком в первый протокол
					ДокПротокол.СуммаБонусов = СуммаБонусов;
				КонецЕсли; 
			КонецЕсли;
			
			Для н=0 По ТабСводка.Количество()-1 Цикл
				
				Сводка = ТабСводка.Получить(н);
				
				ДокПротоколСтрока = ДокПротокол.Протокол.Добавить();
				ДокПротоколСтрока.ВариантОплаты = Сводка.ВариантОплаты;
				
				Если ТаблицаГруппыОплаты.Индекс(ГруппыОплаты) = ТаблицаГруппыОплаты.Количество()-1 Тогда
					ДокПротоколСтрока.Сумма	= Сводка.ОстатокСумма;
				ИначеЕсли н = ТабСводка.Количество()-1 Тогда
					ДокПротоколСтрока.Сумма	= ГруппыОплаты.Сумма - ДокПротокол.Протокол.Итог("Сумма");
					Сводка.ОстатокСумма		= Сводка.ОстатокСумма - ДокПротоколСтрока.Сумма;
				Иначе		
					ДокПротоколСтрока.Сумма	= Мин( Окр(Сводка.Сумма*Коэф,2), ГруппыОплаты.Сумма - ДокПротокол.Протокол.Итог("Сумма") );
					Сводка.ОстатокСумма		= Сводка.ОстатокСумма - ДокПротоколСтрока.Сумма;
				КонецЕсли;
				ДокПротоколСтрока.СуммаФакт	= ДокПротоколСтрока.Сумма;
				
			КонецЦикла;
			
			ДокПротокол.ИтогСуммаФакт = ДокПротокол.Протокол.Итог("СуммаФакт");
			
			Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДокПротокол, "Объект.Записать(РежимЗаписиДокумента.Проведение)", ФоновыйРежим ) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ГруппыОплаты.Протокол = ДокПротокол.Ссылка;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СуммаПредоплаты=0 Тогда
		ЗаказДопИнф.Статус				= Перечисления.СтатусыЗаказа.Закрыт;
		ЗаказДопИнф.ДатаЗакрытия		= ОсновнойПротокол.Дата;
	КонецЕсли;
	ЗаказДопИнф.ПротоколРасчетов		= ОсновнойПротокол;
	
	Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ЗаказДопИнф, "Объект.Записать()", ФоновыйРежим ) Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли; 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Если СуммаПредоплаты=0 Тогда // когда закрывается заказ, т.е. ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Закрыт;
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(Заказ.Ссылка);
		
		Если  БлюдоВыдали Тогда
		
			Если НЕ ксТрактир.СнятьМаркиСУчета("Заказ", МассивЗаказов) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если НЕ ксТрактир.ОсвободитьКартуДоступаОтЗаказа(Заказ.Ссылка) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	// КС_ВДВ > ------------------------------------------------------------ 
	
	// Заполнение времени готовности и времени подачи по дате закрытия заказа
	//Если СуммаПредоплаты=0 Тогда
	//	ЗаполнитьВремяГотовностиИВремяВыдачиПоЗаказу(ТекДата);
	//КонецЕсли;
	Если глВерсия>1 И Константы.РаботаСПодтверждениямиПозицийЗаказа.Получить() И СуммаПредоплаты=0 Тогда
		ЗаполнитьВремяГотовностиИВремяВыдачиПоЗаказу(ТекДата);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПредоплатаСуммаДобавки) Тогда
		
		Заказ.Товары.Загрузить(ТаблицаЗаказа);
		Если глПараметрыРМ.БроньПредоплатаРежимВозврата = 2 Тогда
			СтрокаСкидки = Заказ.Скидки.Добавить();
			СтрокаСкидки.Скидка = глПараметрыРМ.БроньПредоплатаНаценка;
			СтрокаСкидки.Сумма	= ПредоплатаСуммаДобавки;
			СтрокаСкидки.Тип	= Перечисления.ТипыСкидок.НаЗаказ;
		КонецЕсли; 
			
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( Заказ, "Объект.Записать()", ФоновыйРежим ) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли; 
	
	КонецЕсли; 
	
	//--------------------------------------
	// печать чеков
	Если СуммаПредоплаты=0 Тогда
		
		ЗафиксироватьТранзакцию();
		ФлагУспешнойЗаписи = Истина;
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ОплатаЗафиксирована, Заказ.Ссылка);
		
		ПечатьЧековПоГруппам();
		
	Иначе
		
		Если НЕ ПечатьЧека("Предоплата", СуммаПредоплаты, ПротоколРасчетов1, ККМ) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		ФлагУспешнойЗаписи = Истина;
		ФлагУспешнойОплаты = Истина;
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ОплатаВнесенаПредоплата, Заказ.Ссылка, СуммаПредоплаты);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьЧека(Действие, Сумма, Протокол, ККМ, ГруппаОплаты=Неопределено,Текст1="")
	
	ОбработкаПечати = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПечатьЧека");
	ОбработкаПечати.ККМ = ККМ;
	ОбработкаПечати.Заказ = Заказ.Ссылка;
	ОбработкаПечати.ЗаказДопИнф = ЗаказДопИнф;
	ОбработкаПечати.ФоновыйРежим = ФоновыйРежим;
	ОбработкаПечати.Текст1 = Текст1;
	
	Если Действие="Продажа" Тогда
		Если Найти(ККМ.КодМодели, "77Ф") + Найти(ККМ.КодМодели, "25Ф")  Тогда
			ЧекПрошел = ОбработкаПечати.Фискализация(Протокол, Сумма, ГруппаОплаты);
			ОбработкаПечати.ПечатьЧека(Протокол, Сумма, ГруппаОплаты);
		Иначе
			ЧекПрошел = ОбработкаПечати.ПечатьЧека(Протокол, Сумма, ГруппаОплаты);
		КонецЕсли;
	Иначе
		ЧекПрошел = ОбработкаПечати.ПечатьПредоплаты(Протокол, Сумма);
	КонецЕсли;
	
	Если НЕ ЧекПрошел Тогда
		Текст1 = ОбработкаПечати.Текст1;
		Текст2 = ОбработкаПечати.Текст2;
		Возврат Ложь;
	КонецЕсли;
	
	ИнтерфейсРМ.ЗаписьСобытия( Справочники.События.ОплатаПечатьЧека, Заказ.Ссылка, ККМ.Наименование );
	
	Возврат Истина;
КонецФункции

// Процедура заполняет время готовности и время подачи у тех документов ПодтверждениеГотовности, 
// у которых они не заполнены при включенном соответствующем флаге ПодтверждениеГотовностиИВыдачиПриОплатаЗаказа
//
Процедура ЗаполнитьВремяГотовностиИВремяВыдачиПоЗаказу(ВремяЗакрытия)

	Если глВерсия = 1 Тогда
		Возврат;
	КонецЕсли;
	
	// < КС_ВДВ ------------------------------------------------------------ 
	//Если НЕ Константы.ПодтверждениеГотовностиИВыдачиПриОплатаЗаказа.Получить() Тогда
	Если НЕ (Константы.ПодтверждениеГотовностиИВыдачиПриОплатаЗаказа.Получить() 
		//ИЛИ глПараметрыРМ.ЗКП
		) 
		Тогда
	// КС_ВДВ > ------------------------------------------------------------ 
		Возврат;
	КонецЕсли;
	
	// Подготовить список РМ мониторов марок для уведомления
	//СоответствиеМониторРМ	= Справочники.РабочиеМеста.ПолучитьСоответствиеМониторРМ();
	// Проверка есть ли кого уведомлять
	Если НЕ глТорговоеОборудование.Свойство("СоответствиеМониторРМ") Тогда
		глТорговоеОборудование.Вставить("СоответствиеМониторРМ", Справочники.РабочиеМеста.ПолучитьСоответствиеМониторРМ());
	КонецЕсли;	
	
	Если глТорговоеОборудование.СоответствиеМониторРМ.Количество() > 0 Тогда
		МониторыМарок = Новый СписокЗначений;
		УведомитьМониторыМарок = Истина;
	Иначе
		УведомитьМониторыМарок = Ложь;
	КонецЕсли;			
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЗаказТоварыДопИнф.Заказ,
		|	ЗаказТоварыДопИнф.ИдСтроки
		|ИЗ
		|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
		|ГДЕ
		|    ЗаказТоварыДопИнф.Заказ = &Заказ
		|    И НЕ ЗаказТоварыДопИнф.Статус =&Статус
		|";

	Запрос.УстановитьПараметр("Заказ", Заказ.Ссылка);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПозицийЗаказа.Выдано);

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Заказ		= Выборка.Заказ;
		МенеджерЗаписи.ИдСтроки		= Выборка.ИдСтроки;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.Заказ			= МенеджерЗаписи.Заказ;
			МенеджерЗаписи.ИдСтроки			= МенеджерЗаписи.ИдСтроки;
			
			МенеджерЗаписи.ВремяДозаказ		= МенеджерЗаписи.ВремяДозаказ;
			МенеджерЗаписи.ВремяЗаказано	= МенеджерЗаписи.ВремяЗаказано;
			МенеджерЗаписи.Статус			= Перечисления.СтатусыПозицийЗаказа.Выдано;
			
			МенеджерЗаписи.КодПодтверждения	= МенеджерЗаписи.КодПодтверждения;
			МенеджерЗаписи.РабочееМесто		= МенеджерЗаписи.РабочееМесто;
			МенеджерЗаписи.Подача			= МенеджерЗаписи.Подача;
			МенеджерЗаписи.ГруппаПечати		= МенеджерЗаписи.ГруппаПечати;
			МенеджерЗаписи.АвторЗаказано	= МенеджерЗаписи.АвторЗаказано;
			МенеджерЗаписи.АвторГотово		= МенеджерЗаписи.АвторГотово;
			МенеджерЗаписи.Товар			= МенеджерЗаписи.Товар;
            МенеджерЗаписи.Количество		= МенеджерЗаписи.Количество;
			МенеджерЗаписи.ИдСтрокиВладельца= МенеджерЗаписи.ИдСтрокиВладельца;
			МенеджерЗаписи.НомерМарки		= МенеджерЗаписи.НомерМарки;

			Если ЗначениеЗаполнено(МенеджерЗаписи.ВремяГотово)  Тогда
				МенеджерЗаписи.ВремяГотово	= МенеджерЗаписи.ВремяГотово;
			Иначе
				МенеджерЗаписи.ВремяГотово	= ВремяЗакрытия;
				
				// Добавить РМ монитор марок в список для уведомления
				Если УведомитьМониторыМарок И ЗначениеЗаполнено(МенеджерЗаписи.ГруппаПечати) 
					И (МенеджерЗаписи.ГруппаПечати.Тип = Перечисления.ТипыГруппПечати.Монитор 
					ИЛИ МенеджерЗаписи.ГруппаПечати.Тип = Перечисления.ТипыГруппПечати.МониторПринтер) Тогда
					
					// Получить список РМ мониторов марок где есть группа печати из МенеджераЗаписи
					СписокМониторовМарок = глТорговоеОборудование.СоответствиеМониторРМ.Получить(МенеджерЗаписи.ГруппаПечати);
					Если СписокМониторовМарок <> Неопределено Тогда
						Для Каждого МониторМарок Из СписокМониторовМарок Цикл
							// Добавить РМ монитора марок в список для уведомления если его там еще нет
							Если МониторыМарок.НайтиПоЗначению(МониторМарок.Значение) = Неопределено Тогда
								МониторыМарок.Добавить(МониторМарок.Значение);
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;
					
				КонецЕсли;
				
 			КонецЕсли;	

			Если ЗначениеЗаполнено(МенеджерЗаписи.ВремяВыдано) Тогда
				МенеджерЗаписи.ВремяВыдано	= МенеджерЗаписи.ВремяВыдано;
			Иначе
				МенеджерЗаписи.ВремяВыдано	= ВремяЗакрытия;
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			
		КонецЕсли;	
		
		
	КонецЦикла;
	
	//// Уведомить РМ мониторов марок по списку
	//Если УведомитьМониторыМарок И МониторыМарок.Количество() > 0 Тогда
	//	Защита.ОтправаитьУведомлениеРММониторы(МониторыМарок);
	//КонецЕсли;		
	
КонецПроцедуры

Процедура ПечатьЧековПоГруппам() экспорт
	ФлагУспешнойОплаты = Истина;
	
	Для каждого ГруппыОплаты Из ТаблицаГруппыОплаты Цикл
		
		ДокПротокол = ГруппыОплаты.Протокол.ПолучитьОбъект();
		
		Если НЕ ДокПротокол.ККМ.Пустая() Тогда
			Продолжить;
		ИначеЕсли НЕ ПечатьЧека("Продажа", ОплаченнаяСумма, ?(ОплаченнаяСумма=0, ГруппыОплаты.Протокол.Протокол, ПротоколРасчетов1), ГруппыОплаты.ККМ, ГруппыОплаты.Группа,ПодвалЧека) Тогда
			ФлагУспешнойОплаты = Ложь;
			Продолжить;
		КонецЕсли;
		
		ДокПротокол.ККМ = ГруппыОплаты.ККМ;
		
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДокПротокол, "Объект.Записать()", ФоновыйРежим ) Тогда
			Текст1="Ошибка записи!";
			Текст2="Заказ переходит в ""Недозакрытые"", его надо будет закрыть на автономную ККМ";
			Если НЕ ФоновыйРежим Тогда
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ФлагУспешнойОплаты И НЕ ФоновыйРежим Тогда
		
		Текст1="Оплата не зарегистрирована!";
		Текст2="Повторить попытку регистрации?
				|(можно зайти в закрытый заказ позже и повторить попытку)";
		Если ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"Повтор","","Esc=Отмена")="Повтор" Тогда
			ПечатьЧековПоГруппам();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

