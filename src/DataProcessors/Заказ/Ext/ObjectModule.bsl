#Если Клиент Тогда
	
	Перем ФормаЗаказа Экспорт;          		// форма из которой идет работа с заказом
	Перем Заблокирован Экспорт;			// признак открытия заказа на другой станции
	Перем КемЗаблокирован;
	Перем СменаОткрыта Экспорт;			// статус проверки смены при открытии заказа
	Перем КолвоЗаказов Экспорт;			// количество открытых заказов, доступных для листания
	Перем ФормаПодбораТоваров Экспорт;	// форма открытая для подбора товаров (меню)
	Перем ВысотаТаблицыЗаказа;
	Перем ШиринаТаблицыЗаказа;
	
	Перем ЕстьДозаказ Экспорт;
	Перем ЕстьУдаление Экспорт;
	Перем СтатусДозаказ Экспорт;
	Перем СтатусЗаказано Экспорт;
	Перем СтатусГотово Экспорт;
	Перем СтатусУдалено;
	Перем СтатусОтложено Экспорт;
	Перем СтатусТарифВкл;
	// < КС_ВДВ ------------------------------------------------------------ 
	Перем СтатусВыдано; 
	// < КС_ВДВ ------------------------------------------------------------ 
	
	Перем ИспользоватьЗаказТоварыДопИнф Экспорт;// Глобальная переменная использование регистра ЗаказТоварыДопИнф
	Перем ТаблицаПодач;
	Перем ТекущаяПодача Экспорт;		// ссылка на строку ТаблицаПодач; экспорт для формы подбора
	Перем РазделятьПодачи;
	Перем РазделятьДозаказы;
	Перем ИспользоватьКурсы Экспорт;	// Для работы с табличной частию
	Перем ПодтверждениеВыдачи Экспорт;	// Для работы с табличной частью
	Перем ПодтверждениеГотовностиПриВыдачи Экспорт;
	
	Перем ТаблицаУдалений;
	Перем РучнаяСкидка;
	Перем ПартнерСкидки;
	Перем ИспользоватьГруппыОплаты;
	Перем ОсновнаяГруппаОплаты;
	//Перем ОбработкаРасчетыПоТарифу;
	Перем ТипКолво, ТипСумма;
	Перем НомерКлюча;
	Перем ГСЧ;
	
	Перем АктивныеАбонементы Экспорт;
	
	Перем МониторыМарок;			// Список РМ мониторов марок для уведомлений
	Перем УведомитьМониторыМарок;	// 
	Перем СоответствиеКодПодтвержденияНомерМарки;
	Перем НовыйЗаказ; // Заказ открыт впервые (получен через СоздатьНовый())
	
	Перем ИспользоватьРекомендации;		// На РМ работают с рекомендациями
	Перем СписокРекомендаций Экспорт;	// Список рекомендаций к текущему заказу
	
	// < КС_ВДВ ------------------------------------------------------------ 
	
	Перем СтанцияОтбор Экспорт; 			// Текущая станция, используемая для отбора строка заказа в ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа
	Перем ОтветЛояльности Экспорт;
	Перем ДанныеЛояльности Экспорт;
	Перем ТаблицаАкций Экспорт;
	
	// Используются для вычисления суммы по вновь набираемым позициям в текущем сеансе работы с заказом
	Перем тзСуммыПоСтанциямНач Экспорт; 	// Содержит итоговые суммы по станциям до начала редактирования
	Перем СтанцияОтборСуммаНач Экспорт; 	// Сумма заказа по СтанцияОтбор до начала редактирования
	//
	Перем СледующийНомерПодачиНач;			// Следующий номер подачи на момент открытия заказа. 
	Перем ТекущийМаксНомерПодачи;           // Текущий номер подачи
	
	Перем ПейджерКВыдаче;					// Необходимо выдать при печати марок
	Перем ВыданныеПейджерыСтр Экспорт; 		// Строка из номером выданных пейджеров через запятую
	
	Перем ЦветДозаказ;
	Перем ЦветЗаказано;						// Цвета выделения ячеек в колонке "Статус" ("Марка")
	Перем ЦветГотово;
	Перем ЦветВыдано;
	Перем ЦветДругое;
	Перем ЦветТекстаДозаказ;
	Перем ЦветТекстаСтатус;
	
	Перем ДопПараметрыИнфо;					// Для оптимизации
	
	Перем УстановитьРежимВыдачиЗаказа Экспорт; // Определяет: нужно ли установить режим выдачи в мониторе марок после закрытия заказа
	
	Перем ТаблицаПеревязки;
	
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Функция РазностьТЗ(Знач ТЗ, Знач ВычитаемаяТЗ, Знач ГруппируемыеКолонки, Знач СуммируемаяКолонка) Экспорт
		Перем ЭтотОбъект, Результат;
		
		Для каждого Т Из ВычитаемаяТЗ Цикл
			СтруктураОтбор = Новый Структура(ГруппируемыеКолонки);
			ЗаполнитьЗначенияСвойств(СтруктураОтбор, Т);
			МС = ТЗ.НайтиСтроки(СтруктураОтбор);	
			Для Каждого СМС Из МС Цикл
				СМС[СуммируемаяКолонка] = Макс(СМС[СуммируемаяКолонка] - Т[СуммируемаяКолонка],0);
				Т[СуммируемаяКолонка] = Т[СуммируемаяКолонка] - СМС[СуммируемаяКолонка];
				Если Т[СуммируемаяКолонка] = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Возврат ТЗ;
	КонецФункции
	
	// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
	// Вызывается каждый раз при получении объекта обработки.
	// Здесь надо прописать сброс реквизитов и переменных в начальные значения
	Процедура УстановкаНачальныхЗначений() Экспорт
		
		//--------------------------------------------------
		ТипКолво = ПолучитьОписаниеТиповЧисла(10,0);
		ТипСумма = ПолучитьОписаниеТиповЧисла(12,2);
		
		ТаблицаЗаказа.Колонки.Добавить("Ном"			, , "№", 5 );	// только для отображения номера строки
		// < КС_ВДВ ------------------------------------------------------------ 
		//ТаблицаЗаказа.Колонки.Добавить("Статус"			, , " ", 3 );
		
		// Новая колонка "Станция" - будет отображаться
		ТаблицаЗаказа.Колонки.Добавить("Станция"		,Новый ОписаниеТипов("СправочникСсылка.Станции"), "Станция", 15);
		
		// *** Колонка "Статус" хранит статус строки заказа; 
		// *** По умолчанию в табличном поле в этой колонке выводится курс подачи или флажок статуса
		//
		//ТаблицаЗаказа.Колонки.Добавить("Статус"			, , "Марка", 5 ); 	// будем выводить № марки - уже не нужно
		ТаблицаЗаказа.Колонки.Добавить("Статус"			, , " ", 5 ); 			// будем выводить курс для всех статусов; вместо флажков - цвет фона
		
		// Новая колонка "СтрокаТаблицыЗаказа" - служебная, скрытая.
		// Заполняется только в таблице ТаблицаЗаказаОтбор; в ТаблицаЗаказа она не заполняется.
		// Используется для хранения ссылки на соответствующую строку таблицы ТаблицаЗаказа. 
		ТаблицаЗаказа.Колонки.Добавить("СтрокаТаблицыЗаказа");
		
		ТаблицаЗаказа.Колонки.Добавить("НомерМарки");
		// КС_ВДВ > ------------------------------------------------------------ 
		ТаблицаЗаказа.Колонки.Добавить("ПолеСортировки");				// используется только в процедуре упаковки для сортировки строк
		ТаблицаЗаказа.Колонки.Добавить("АвтоПозиция"	,Новый ОписаниеТипов("Булево") );
		ТаблицаЗаказа.Колонки.Добавить("Товар");
		ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
		ТаблицаЗаказа.Колонки.Добавить("Наименование"	,ПолучитьОписаниеТиповСтроки(), , 30 );
		ТаблицаЗаказа.Колонки.Добавить("Количество"		,ТипКолво, "Кол."	, 8 );
		ТаблицаЗаказа.Колонки.Добавить("Удалено"		,ТипКолво, "Удал."	, 5 );
		ТаблицаЗаказа.Колонки.Добавить("УдаленоСейчас"	,ТипКолво);
		ТаблицаЗаказа.Колонки.Добавить("ТипЦен");
		ТаблицаЗаказа.Колонки.Добавить("Цена"			,ТипСумма, "Цена"	, 10 );
		ТаблицаЗаказа.Колонки.Добавить("Сумма"			,ТипСумма, "Сумма"	, 10 );
		ТаблицаЗаказа.Колонки.Добавить("СуммаСкидки"	,ТипСумма);
		ТаблицаЗаказа.Колонки.Добавить("ЦенаРеализации"	,ТипСумма, "Цена"	, 10 );
		ТаблицаЗаказа.Колонки.Добавить("СуммаРеализации",ТипСумма, "Сумма"	, 10 );
		ТаблицаЗаказа.Колонки.Добавить("Категория");
		ТаблицаЗаказа.Колонки.Добавить("ГруппаПечати");
		ТаблицаЗаказа.Колонки.Добавить("Автор");
		ТаблицаЗаказа.Колонки.Добавить("Подача");
		ТаблицаЗаказа.Колонки.Добавить("Подарок"		,Новый ОписаниеТипов("СправочникСсылка.Скидки") );
		ТаблицаЗаказа.Колонки.Добавить("ИдСтроки");
		ТаблицаЗаказа.Колонки.Добавить("Источник");
		ТаблицаЗаказа.Колонки.Добавить("КодПодтверждения");
		ТаблицаЗаказа.Колонки.Добавить("СтатусДопИнф");
//Z+
		ТаблицаЗаказа.Колонки.Добавить("Порядок");
		ТаблицаЗаказа.Колонки.Добавить("ПорядокСпецифики");
//Z-
		
		Если глВерсия=3 Тогда
			ТаблицаЗаказа.Колонки.Добавить("Тариф");
			ТаблицаЗаказа.Колонки.Добавить("МаксСумма"	,ТипСумма);
			ТаблицаЗаказа.Колонки.Добавить("МаксВремя"	,ТипСумма);
			ТаблицаЗаказа.Колонки.Добавить("КомУстройство");
			ТаблицаЗаказа.Колонки.Добавить("РасчетыПоТарифу");
			ТаблицаЗаказа.Колонки.Добавить("ДокРасчетыПоТарифу");
			ТаблицаЗаказа.Колонки.Добавить("ФлагИзменениеВремени", Новый ОписаниеТипов("Булево") );
			ТаблицаЗаказа.Колонки.Добавить("ПараметрыАбонемента");
			
			//ОбработкаРасчетыПоТарифу = Обработки.РасчетыПоТарифу.ПолучитьФорму();
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		// ТаблицаЗаказаОтбор - эта новая таблица используется как источник данных 
		// для табличного поля ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.
		// См. процедуру ДействияПередОткрытиемФормы.
		//
		// В ТаблицаЗаказаОтбор будут находиться строки, отфильтрованные по Станции
		// А в ТаблицаЗаказа по-прежнему будут все строки заказа.
		//
		// Все расчеты/изменения по заказу по-прежнему оперируют с табл. ТаблицаЗаказа;
		// в ТаблицаЗаказаОтбор они не вносят изменений.
		// Затем измененные/добавленные данные переносятся в ТаблицаЗаказаОтбор, 
		// если эти строки должны в ней присутствовать (если удовлетворяю условию отбора по станции).
		//
		ТаблицаЗаказаОтбор = ТаблицаЗаказа.Скопировать();
		
		// Для сумм заказа по станциям на начало редактирования заказа
		тзСуммыПоСтанциямНач = Новый ТаблицаЗначений;
		тзСуммыПоСтанциямНач.Колонки.Добавить("Станция", Новый ОписаниеТипов("СправочникСсылка.Станции"));
		тзСуммыПоСтанциямНач.Колонки.Добавить("Сумма", ТипСумма);
		
		СтанцияОтборСуммаНач = 0;
		УстановитьРежимВыдачиЗаказа = Ложь;
		// КС_ВДВ > ------------------------------------------------------------ 
		
		//--------------------------------------------------
		ТаблицаСкидок.Колонки.Добавить("Тип");
		ТаблицаСкидок.Колонки.Добавить("Скидка");
		ТаблицаСкидок.Колонки.Добавить("Текст");
		ТаблицаСкидок.Колонки.Добавить("Сумма"	,ТипСумма);
		ТаблицаСкидок.Колонки.Добавить("Подарки");						// таблица с товарами из набора подарков
		
		//--------------------------------------------------
		ТаблицаКатегорий.Колонки.Добавить("Категория");
		ТаблицаКатегорий.Колонки.Добавить("Сумма"		,ТипСумма);
		
		//--------------------------------------------------
		ТаблицаУдалений = Новый ДеревоЗначений;
		ТаблицаУдалений.Колонки.Добавить("Товар");
		ТаблицаУдалений.Колонки.Добавить("Количество"	,ТипКолво);
		ТаблицаУдалений.Колонки.Добавить("Сумма"		,ТипСумма);
		ТаблицаУдалений.Колонки.Добавить("Причина");
		ТаблицаУдалений.Колонки.Добавить("ГруппаПечати");
		ТаблицаУдалений.Колонки.Добавить("ТипЦен");
		
		ТаблицаПеревязки=Новый ТаблицаЗначений;	
		ТаблицаПеревязки.Колонки.Добавить("НомерСтроки",ТипКолво);
		ТаблицаПеревязки.Колонки.Добавить("НомерСтрокиСпец",ТипКолво);
		ТаблицаПеревязки.Колонки.Добавить("НПП",ТипКолво);
		ТаблицаПеревязки.Колонки.Добавить("Код",Новый ОписаниеТипов("Строка"));
		ТаблицаПеревязки.Колонки.Добавить("Количество",ТипКолво);
		ТаблицаПеревязки.Колонки.Добавить("Цена",ТипСумма);
		ТаблицаПеревязки.Колонки.Добавить("Сумма",ТипСумма);
		ТаблицаПеревязки.Колонки.Добавить("Наименование",Новый ОписаниеТипов("Строка"));
		ТаблицаПеревязки.Колонки.Добавить("ИДСтроки",Новый ОписаниеТипов("Строка"));
		ТаблицаПеревязки.Колонки.Добавить("НоваяЦена",ТипСумма);
		ТаблицаПеревязки.Колонки.Добавить("НоваяСумма",ТипСумма);
		ТаблицаПеревязки.Колонки.Добавить("Специфика",ПолучитьОписаниеТиповЧисла(1,0));
		ТаблицаПеревязки.Колонки.Добавить("ПДФ",Новый ОписаниеТипов("Строка"));
		
		Если ФормаЗаказа <> Неопределено Тогда
			Если ФормаЗаказа.Открыта() Тогда
				ФормаЗаказа.Закрыть();
			КонецЕсли;
		КонецЕсли;
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
	
	// Инициализация реквизитов обработки и переменных модуля,
	// вызывается из тела модуля
	Процедура ИнициализацияРеквизитов()
		
		//--------------------------------------------------
		СтатусДозаказ	= Перечисления.СтатусыПозицийЗаказа.Дозаказ;
		СтатусЗаказано	= Перечисления.СтатусыПозицийЗаказа.Заказано;
		СтатусГотово	= Перечисления.СтатусыПозицийЗаказа.Готово;
		СтатусУдалено	= Перечисления.СтатусыПозицийЗаказа.Удалено;
		СтатусОтложено	= Перечисления.СтатусыПозицийЗаказа.Отложено;
		СтатусТарифВкл	= Перечисления.СтатусыПозицийЗаказа.ТарифВкл;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		СтатусВыдано	= Перечисления.СтатусыПозицийЗаказа.Выдано;
		
		ЦветДозаказ		= Новый Цвет(128,0,128);	// бардовый
		ЦветЗаказано 	= Новый Цвет(255,128,128);	// красный
		ЦветГотово 		= Новый Цвет(255,255,128);	// желтый
		ЦветВыдано 		= Новый Цвет(128,255,128);	// зеленый	
		ЦветДругое		= Новый Цвет(255,255,255);	// белый
		
		ЦветТекстаДозаказ 	= Новый Цвет(255,255,255);	// белый
		ЦветТекстаСтатус	= Новый Цвет(0,0,0); 		// черный
		
		ДопПараметрыИнфо	= Новый Структура("НомерСтрокиЗаказа, СуммаПоСтанцииНач, СброситьНастройки");
		// КС_ВДВ > ------------------------------------------------------------ 
		
		Если глВерсия>1 И Константы.РаботаСПодтверждениямиПозицийЗаказа.Получить() Тогда
			ИспользоватьЗаказТоварыДопИнф			= Истина;
			СоответствиеКодПодтвержденияНомерМарки	= Новый Соответствие;
			// Соответствие ГруппыПечати - Список РМ мониторов марок где используются эти группы
			//СоответствиеМониторРМ	= Справочники.РабочиеМеста.ПолучитьСоответствиеМониторРМ();
			// Список РМ Мониторы марок для уведомлений
			МониторыМарок			= Новый СписокЗначений;
			// Признак работы с РМ мониторы марок
			УведомитьМониторыМарок = ?(глТорговоеОборудование.Свойство("СоответствиеМониторРМ"), глТорговоеОборудование.СоответствиеМониторРМ.Количество() > 0, Ложь);
		Иначе
			ИспользоватьЗаказТоварыДопИнф			= Ложь;
			// Признак работы с РМ мониторы марок
			УведомитьМониторыМарок					= Ложь;
		КонецЕсли;
		
		ИспользоватьГруппыОплаты			= Константы.ИспользоватьГруппыОплаты.Получить();
		ОсновнаяГруппаОплаты				= Константы.ОсновнаяГруппаОплаты.Получить();
		
		// Разделение по подачам используется, помимо курсов подач, и для разделения дозаказов.
		ИспользоватьКурсы					= ?(глПараметрыРМ=Неопределено ИЛИ Доставка ИЛИ НЕ ИспользоватьЗаказТоварыДопИнф, Ложь, глПараметрыРМ.ЗаказИспользоватьКурсы);
		ПодтверждениеВыдачи					= ?(ИспользоватьЗаказТоварыДопИнф, Константы.ПодтверждениеВыдачи.Получить(), Ложь);
		ПодтверждениеГотовностиПриВыдачи	= ?(ИспользоватьЗаказТоварыДопИнф, Константы.ПодтверждениеГотовностиПриВыдачиБлюда.Получить(), Ложь);
		ИспользоватьРекомендации			= ?(глПараметрыРМ=Неопределено, Ложь, глПараметрыРМ.ЗаказИспользоватьРекомендации);
		СписокРекомендаций					= Неопределено;
		
		//--------------------------------------------------
		ОпределитьТаблицуПодач();
		
		НомерКлюча = СтрЗаменить( Константы.КлючЗащиты_НомерКлюча.Получить(), Символы.НПП, "");
		ГСЧ = Новый ГенераторСлучайныхЧисел();
		
		// Создается новый заказ
		НовыйЗаказ		= Ложь;
		
		УстановкаНачальныхЗначений();
		
		ПолучитьРекомендации(Ложь);
		
	КонецПроцедуры
	
	Процедура ОпределитьТаблицуПодач()
		
		//РазделятьДозаказы = НЕ Доставка И глВерсия>1 И Константы.РазделятьДозаказы.Получить();
		// с 18-го релиза разделение дозаказов нужно всегда для работы монитора кухни
		//РазделятьДозаказы = глВерсия>1 И Константы.РаботаСПодтверждениямиПозицийЗаказа.Получить();
		РазделятьДозаказы = ИспользоватьЗаказТоварыДопИнф;
		
		//pr Разделение по подачам используется, помимо курсов подач, и для разделения дозаказов. (вынесено в переменную)
		//ИспользоватьКурсы = ?(глПараметрыРМ=Неопределено ИЛИ Доставка ИЛИ глВерсия=1, Ложь, глПараметрыРМ.ЗаказИспользоватьКурсы);
		//РазделятьПодачи = ИспользоватьЗаказТоварыДопИнф И (РазделятьДозаказы ИЛИ ИспользоватьКурсы);
		РазделятьПодачи = ИспользоватьЗаказТоварыДопИнф;
		
		ТаблицаПодач = Новый ТаблицаЗначений;
		ТаблицаПодач.Колонки.Добавить("Номер", ПолучитьОписаниеТиповЧисла(2,0));
		ТаблицаПодач.Колонки.Добавить("Время");
		ТаблицаПодач.Колонки.Добавить("Статус");
		ТаблицаПодач.Колонки.Добавить("ДокСсылка");// Оставлено для заказов с документами Подача
		Если НЕ РазделятьПодачи Тогда
			// используется фиктивная подача
			ТекущаяПодача = ТаблицаПодач.Добавить();
			ТекущаяПодача.Номер = 0;
		КонецЕсли; 
		
	КонецПроцедуры
	
	// Определяет какая нужна форма заказа и открывает ее
	//
	
	// Определяет какая нужна форма заказа и открывает ее
	//
	Функция ОткрытьРабочуюФормуЗаказа(ВладелецФормы = Неопределено) Экспорт
		глПользователь = Неопределено;
		ИнтерфейсРМ.СменаПользователя();
		
		Если ФормаЗаказа = Неопределено Тогда
			ФормаЗаказа = ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип);
		ИначеЕсли ФормаЗаказа.Открыта() Тогда
			ФормаЗаказа.Закрыть();			
		КонецЕсли;
		
		ФормаЗаказа.Открыть();
		
		Если глПараметрыРМ.ЗаказМенюАвтоОткрытие Тогда
			ПодборТоваров(Ложь);
		КонецЕсли; 
		
		
		ФормаЗаказа.ВладелецФормы = ВладелецФормы;
		
		
	КонецФункции


	// Вызывается из обработчика ПередОткрытием форм этой обработки,
	//
	Процедура ДействияПередОткрытиемФормы(ТекущаяФорма, Отказ) Экспорт
		
		Если ФормаЗаказа = Неопределено Тогда 
			ФормаЗаказа = ТекущаяФорма;          	
		КонецЕсли;
		Если глПараметрыРМ.Свойство("ИмяСтиля") Тогда
			ФормаЗаказа.Стиль = БиблиотекаСтилей[глПараметрыРМ.ИмяСтиля];
		КонецЕсли;;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		// В ТаблицаЗаказа будут все строки заказа.
		// В ТаблицаЗаказаОтбор будут строки, отфильтрованные по Станции
		//
		ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.Данные = "ТаблицаЗаказаОтбор";
		// КС_ВДВ > ------------------------------------------------------------ 
		
		//----------------------------------------------------------
		// оформление таблицы заказа
		ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа;
		ТабПолеТЗ.СоздатьКолонки();
		
		// список колонок, которые могут отображаться (соответствует списку в настройке РМ)
		ЗаказСписокКолонок = Новый Массив;
		ЗаказСписокКолонок.Добавить("Ном");
		ЗаказСписокКолонок.Добавить("Статус");
		ЗаказСписокКолонок.Добавить("Количество");
		ЗаказСписокКолонок.Добавить("Удалено");
		ЗаказСписокКолонок.Добавить("Цена");
		ЗаказСписокКолонок.Добавить("Сумма");
		ЗаказСписокКолонок.Добавить("ЦенаРеализации");
		ЗаказСписокКолонок.Добавить("СуммаРеализации");
		
		// уберем все не нужные колонки
		Для каждого КолонкаТЗ Из ТабПолеТЗ.Колонки Цикл
			// < КС_ВДВ ------------------------------------------------------------ 
			Если КолонкаТЗ.Имя="Станция" Тогда
				Продолжить; // колонка всегда видима, как и "Наименование"
			КонецЕсли;	
			// КС_ВДВ > ------------------------------------------------------------ 
			Если КолонкаТЗ.Имя<>"Наименование" И 
				(ЗаказСписокКолонок.Найти(КолонкаТЗ.Имя)=Неопределено ИЛИ 
				глПараметрыРМ.НевидимыеКолонкиЗаказа.Найти(КолонкаТЗ.Имя)<>Неопределено) Тогда
				
				КолонкаТЗ.Видимость = Ложь;
			КонецЕсли; 
		КонецЦикла;
		
		Если глПараметрыРМ.ЗаказШрифтОсновной.Вид <> ВидШрифта.АвтоШрифт Тогда
			ТабПолеТЗ.ШрифтШапки = глПараметрыРМ.ЗаказШрифтОсновной;
		КонецЕсли; 
		
		ТабПолеТЗ.Колонки[0].ОтображатьИерархию = Ложь;
		ТабПолеТЗ.Колонки.Статус.ГоризонтальноеПоложениеВКолонке = ГоризонтальноеПоложение.Центр;
		ТабПолеТЗ.Колонки.Статус.КартинкиСтрок = БиблиотекаКартинок.ТаблицаЗаказаСтатусы;
		
		Если ТабПолеТЗ.Колонки.Цена.Видимость И ТабПолеТЗ.Колонки.ЦенаРеализации.Видимость Тогда
			ТабПолеТЗ.Колонки.ЦенаРеализации.ТекстШапки = "Со скидкой";
		КонецЕсли; 
		Если ТабПолеТЗ.Колонки.Сумма.Видимость И ТабПолеТЗ.Колонки.СуммаРеализации.Видимость Тогда
			ТабПолеТЗ.Колонки.СуммаРеализации.ТекстШапки = "К оплате";
		КонецЕсли; 
		
		Если глПараметрыРМ.ЗаказСпецификиПоказыватьЗаказанное Тогда
			// < КС_ВДВ ------------------------------------------------------------ 
			//Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
			Для каждого СтрокаТовара Из ТаблицаЗаказаОтбор.Строки Цикл
				// КС_ВДВ > ------------------------------------------------------------ 
				ТабПолеТЗ.Развернуть(СтрокаТовара, Истина);
			КонецЦикла;
		КонецЕсли; 
		
		//----------------------------------------------------------
		
		
		ИнтерфейсАдмина.ОбновлениеПризнакаНаличияВПродаже(Истина);
		
		Если РежимПредЗаказ Тогда
			
			РазделятьДозаказы = Ложь;
			// В режиме предварительного заказа курсы подачи ПОКА не работают
			РазделятьПодачи = Ложь;
			// используется фиктивная подача
			ТекущаяПодача = ТаблицаПодач.Добавить();
			ТекущаяПодача.Номер = 0;
			
		ИначеЕсли НЕ Доставка Тогда
			
			ПолучитьДоступныеЗаказы();
			
			ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
			"ЗАКАЗ N "+Число(Заказ.Номер)	,,
			"ИТОГО:"	,Заказ.ИтоговаяСумма);
		КонецЕсли;
		
	КонецПроцедуры
	
	// Вызывается из обработчика ПередЗакрытием форм этой обработки,
	//
	Процедура ДействияПередЗакрытиемФормы(ТекущаяФорма, Отказ) Экспорт
		
		Если глФлагБлокировка И Модифицирован Тогда
			
			Отказ = Истина;
			глФлагБлокировка = Ложь;
			
			БылПользователь = глПользователь;
			глПользователь = Справочники.Сотрудники.ПустаяСсылка();	// чтобы не сработала повторно автоблокировка
			глПользователь = ИнтерфейсРМ.ИдентификацияПользователя();
			
			Пока НЕ( глПользователь=БылПользователь ИЛИ 
				ИнтерфейсРМ.ПроверкаПользователяСмены() И ИнтерфейсРМ.ПроверкаПраваДоступа("ОтменаАвтоблокировкиВЗаказе", Истина, , Заказ.Автор) ) Цикл
				
				глПользователь = ИнтерфейсРМ.ИдентификацияПользователя();
				
			КонецЦикла;
			
			Возврат;
		КонецЕсли;
		
		Отказ = НЕ ВыходИзЗаказа();
		
		Если НЕ Отказ Тогда
			Оповестить("ВыходИзЗаказа", ?(Заказ = Неопределено, Неопределено, Заказ.Ссылка) );
			//ФормаЗаказа = Неопределено; // иначе объект обработки остается в памяти и работают обработчики ожидания
			ИнтерфейсРМ.ВыводНаДП("Ожидание");
		КонецЕсли; 
		
	КонецПроцедуры
	
	// Описание процедуры
	//
	Функция ВыходИзЗаказа() Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат Истина;
		КонецЕсли; 
		
		Если Заказ = Неопределено ИЛИ Заказ.Ссылка.Пустая() Тогда
			Возврат Истина;
		КонецЕсли; 
		
		Отказ = Ложь;
		
		
		Если Модифицирован Тогда
			
			Текст1="Записать заказ?";
			Текст2="Сохранить или нет изменения в заказе?";
			Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","Нет","Esc=Отмена");
			
			Если Ответ="Да" Тогда
				
				// < КС_ВДВ ------------------------------------------------------------ 
				// Назначение очередности
				Если НЕ Доставка Тогда
					Если НЕ ПередПечатьюМарок() Тогда
						Возврат Ложь; // не назначили очередность выдачи товаров
					КонецЕсли; 
				КонецЕсли; 
				// КС_ВДВ > ------------------------------------------------------------ 
				
				// доставка сохраняется без печати марок
				Если Доставка Тогда
					Если НЕ ДоставкаПроверкаЗаполнения() Тогда
						Возврат Ложь;
					КонецЕсли;
					// после печати марок запись заказа должна быть в любом случае
				ИначеЕсли НЕ ПечатьМарок() Тогда
					Отказ = Истина;
				КонецЕсли;
				
				Если НЕ ЗаписатьЗаказ() Тогда
					Отказ = Истина;
				КонецЕсли;
				
				// < КС_ВДВ ------------------------------------------------------------ 
				ЕстьМаркиКВыдаче = ВыполнитьРегистрациюМарок();
				
				// Если заказ был открыть из Монитора Марок,
				// то установим в нем режим выдачи с фильтром по заказу
				УстановитьРежимВыдачиЗаказа = (ЕстьМаркиКВыдаче И РежимМонитор);
				// КС_ВДВ > ------------------------------------------------------------ 
				
			ИначеЕсли Ответ = "Нет" Тогда  
				ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказОтказОтЗаписи, Заказ.Ссылка, УбратьВсеБуквы(Заказ.Номер));
				
				// Удаляем только если не повторное открытие
				Если НовыйЗаказ Тогда
					УдалитьПустойЗаказ();
				КонецЕсли;
				
			Иначе
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ Отказ Тогда
			// нельзя наливать
			КомандаНаливайке("ЗаказЗакрыт");
			
			Если НЕ Заказ.Ссылка.Пустая() Тогда
				Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма);
				Заказ.Разблокировать();
			КонецЕсли; 
			
		КонецЕсли; 
		
		Возврат НЕ Отказ;
	КонецФункции
	
	// Удаляет заказ если в нем нет уже заказанных позиций
	//
	Процедура УдалитьПустойЗаказ(БезПроверок=Ложь) Экспорт
		
		Если НЕ БезПроверок Тогда
			Если Защита.СуммаВнесеннойПредоплаты(Заказ, ЗаказДопИнф) > 0 Тогда
				// была внесена предоплата по лимитной карте
				Возврат;
			ИначеЕсли Заказ.Товары.Количество()<>0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли; 
		
		Если Заказ.Модифицированность() Тогда
			Заказ.Прочитать();	// иначе нельзя удалить
		КонецЕсли; 
		
		// < КС_ВДВ -------------------------------------------------------------------- 
		МассивКарт = ксТрактир.КартыДоступаПоЗаказу(Заказ.Ссылка);
		
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(Заказ.Ссылка);
		ксТрактир.СнятьМаркиСУчета("Заказ", МассивЗаказов);
		// КС_ВДВ > -------------------------------------------------------------------- 	
		
		ИнтерфейсРМ.ПопыткаДействияСОбъектом( Заказ, "Объект.Удалить()" );
		
		ИнтерфейсРМ.ПопыткаДействияСОбъектом( ЗаказДопИнф, "Объект.Удалить()" );
		
		// < КС_ВДВ -------------------------------------------------------------------- 
		Для К = 0 По МассивКарт.Количество() - 1 Цикл
			ксТрактир.ОсвободитьКартуДоступа(МассивКарт[К]);
		КонецЦикла; 
		// КС_ВДВ > -------------------------------------------------------------------- 	
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// СОЗДАТЬ, ПРОЧИТАТЬ, ЗАПИСАТЬ
	
	// Создание нового заказа
	//
	// Параметры:
	//	ОбъектВвода	- ссылка на посадочное место или клиента, для которого создается заказ
	//
	// Возвращаемое значение:
	//	Булево		- создан или нет
	//
	Функция СоздатьНовый(ОбъектВвода=Неопределено, ПриРазделении=Ложь,ЗакрытьФормы=Ложь) Экспорт
		
		СменаОткрыта = ИнтерфейсРМ.ПроверкаСмены();
		
		Если НЕ СменаОткрыта Тогда
			Возврат Ложь;
		ИначеЕсли глВерсия>1 И ФормаЗаказа = ПолучитьФорму("Доставка") Тогда
			Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ДоставкаВводНовыхЗаказов", Истина) Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ВводНовыхЗаказов", Истина) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПосадочноеМесто = Неопределено;
		Клиент			= Неопределено;
		КолвоПосетителей= 0;
		
		Если ЗначениеЗаполнено(ОбъектВвода) Тогда
			Если ТипЗнч(ОбъектВвода) = Тип("СправочникСсылка.ПосадочныеМеста") Тогда
				ПосадочноеМесто = ОбъектВвода;
			ИначеЕсли ТипЗнч(ОбъектВвода) = Тип("СправочникСсылка.Клиенты") Тогда
				Клиент = ОбъектВвода;
			ИначеЕсли ТипЗнч(ОбъектВвода) = Тип("Число") Тогда
				КолвоПосетителей = ОбъектВвода;	// может быть задано при разделении
			КонецЕсли;
			
			Доставка = Ложь;
			
		ИначеЕсли ФормаЗаказа = Неопределено Тогда;
			Доставка = глДоставкаОсновнойРежим;
			
		КонецЕсли;
		
		ЛимитнаяКарта = ?(глВерсия=3, глПараметрыРМ.ЛимитныеКарты, Ложь );
		
		//Если НЕ ЗначениеЗаполнено(ПосадочноеМесто) И НЕ Доставка Тогда
		//	
		//	Если глПараметрыРМ.ЗаказЗапросПосадки ИЛИ ЛимитнаяКарта Тогда
		//		ДоставкаВозможна = глВерсия=3 И глПараметрыРМ.ДоставкаЕсть И ФормаЗаказа = Неопределено И НЕ ПриРазделении И
		//		ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ДоставкаВводНовыхЗаказов);
		//		
		//		ПосадочноеМесто = ИнтерфейсРМ.ВыборПосадочногоМеста(ЛимитнаяКарта, ДоставкаВозможна);
		//	Иначе
		//		ПосадочноеМесто = глПараметрыРМ.ЗаказМестоПоУмолчанию;
		//	КонецЕсли; 
		//	
		//	Если НЕ ЗначениеЗаполнено(ПосадочноеМесто) Тогда
		//		Возврат Ложь;
		//	КонецЕсли;
		//	
		//	Если ПосадочноеМесто = "Доставка" Тогда
		//		Доставка = Истина;
		//	КонецЕсли; 
		//	
		//КонецЕсли;
		
		// < КС_ВДВ -------------------------------------------------------------------- 
		КартаДоступаКлиента = Неопределено;
		// КС_ВДВ > -------------------------------------------------------------------- 
		ПосадочноеМесто = Справочники.ПосадочныеМеста.ПоУмолчанию;
		Если Доставка Тогда
			КолвоПосетителей = 1;
		Иначе
			
			Если глВерсия=3 И ПосадочноеМесто.ЛимитнаяКарта <> ЛимитнаяКарта Тогда
				Текст1="Нет доступа!";
				Текст2="Тип посадочного места не соответствует настройке рабочего места...";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат Ложь;
			КонецЕсли;
			
			Если НЕ ОфициантКМесту(ПосадочноеМесто, глПользователь) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			
				Если НЕ ЗначениеЗаполнено(Клиент) И ЗначениеЗаполнено(ПосадочноеМесто.Клиент) Тогда
					Клиент = ПосадочноеМесто.Клиент;
				КонецЕсли;
				
				Если КолвоПосетителей=0  Тогда
					Если глПараметрыРМ.ЗаказЗапросКолвоПосетителей Тогда
						КолвоПосетителей = ИнтерфейсРМ.ВводЧисла("Количество посетителей", "Число", 3, 0, 1);
						Если КолвоПосетителей=0 ИЛИ КолвоПосетителей=Неопределено Тогда
							Возврат Ложь;
						КонецЕсли;
					Иначе
						КолвоПосетителей = 1;
					КонецЕсли;
				КонецЕсли; 
				
			
			Если глПараметрыРМ.ЗаказКлиентЗапросПриВводеНового И НЕ ЗначениеЗаполнено(Клиент) Тогда
				// < КС_ВДВ -------------------------------------------------------------------- 
				//Клиент = ИнтерфейсРМ.ИдентификацияКлиента( ,глПараметрыРМ.ЗаказКлиентЗапретПустого);
				ИнтерфейсРМ.ВыводНаИнфоДисплей("Приглашение", Неопределено, Неопределено, Неопределено, Неопределено);
				Клиент = ИнтерфейсРМ.ИдентификацияКлиента( ,глПараметрыРМ.ЗаказКлиентЗапретПустого, , КартаДоступаКлиента);
				ИнтерфейсРМ.ВыводНаИнфоДисплей("Реклама", Неопределено, Неопределено, Неопределено, Неопределено);
				// КС_ВДВ > -------------------------------------------------------------------- 
				Если Клиент=Неопределено Тогда
					Возврат Ложь;
				КонецЕсли; 
			КонецЕсли; 
			
			//Z+
			Если Не ЗначениеЗаполнено(КартаДоступаКлиента) Тогда
				Если ТипЗнч(Клиент)=Тип("СправочникСсылка.Клиенты") и Клиент<>Справочники.Клиенты.ПустаяСсылка() Тогда
					КартаДоступаКлиента=Справочники.КартыДоступа.НайтиПоРеквизиту("Привязка", Клиент);
					Если КартаДоступаКлиента=Справочники.КартыДоступа.ПустаяСсылка() Тогда
						КартаДоступаКлиента=Неопределено;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			//Z-
			
			// < КС_ВДВ -------------------------------------------------------------------- 
			Если КартаДоступаКлиента = Неопределено Тогда
				Текст1="Нет карты!";
				Текст2="Карта клиента не найдена!";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат Ложь;
			КонецЕсли; 
			
			ЗаказПоКарте = ксТрактир.ЗаказПоКартеДоступа(КартаДоступаКлиента);
			Если ЗаказПоКарте <> Неопределено Тогда
				Текст1="Повторный заказ!";
				Текст2="По указанной карте существует открытый заказ №"+УбратьВсеБуквы(ЗаказПоКарте.Номер)+" от "+ЗаказПоКарте.Дата+"!";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат Ложь;
			КонецЕсли;
			
			//Если глПараметрыРМ.ЗКП Тогда
			//	Если НЕ( ВыполнитьПроверкуПовторногоПитания( КартаДоступаКлиента) ) Тогда
			//		Возврат Ложь;
			//	КонецЕсли;
			//КонецЕсли;	
			// КС_ВДВ > -------------------------------------------------------------------- 
			
		КонецЕсли; 
		
		//-------------------------------
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( Заказ, "Объект = Документы.Заказ.СоздатьДокумент()" ) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		глПользователь = Неопределено;
		ИнтерфейсРМ.СменаПользователя();
		
		Заказ.Дата					= ТекущаяДата();
		Заказ.Автор					= глПользователь;
		Заказ.Смена					= ИнтерфейсРМ.ТекущаяСмена();
		Заказ.МестоРеализации		= глПараметрыРМ.МестоРеализации;
		Заказ.ПосадочноеМесто		= ПосадочноеМесто;
		Заказ.Клиент				= Клиент;
		// < КС_ВДВ ------------------------------------------------------------ 
		Заказ.КартаДоступа			= КартаДоступаКлиента;
		Если КартаДоступаКлиента.ТипКарты = Перечисления.ТипыКартДоступа.Постоянная тогда
			Заказ.КартаЛояльности = КартаДоступаКлиента;
			Заказ.НомерКартыЛояльности = КартаДоступаКлиента.Идентификатор;
		КонецЕсли;
		// КС_ВДВ > ------------------------------------------------------------ 
		Заказ.КоличествоПосетителей	= КолвоПосетителей;
		Заказ.Доставка				= Доставка;
		
		НачатьТранзакцию();
		
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( Заказ, "Объект.Записать()" ,,,Заказ.Ссылка) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли; 
		
		ЗаказДопИнф = РегистрыСведений.ЗаказДопИнф.СоздатьМенеджерЗаписи();
		ЗаказДопИнф.Заказ		= Заказ.Ссылка;
		ЗаказДопИнф.ДатаОткрытия= Заказ.Дата;
		ЗаказДопИнф.Статус		= Перечисления.СтатусыЗаказа.Открыт;
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ЗаказДопИнф, "Объект.Записать()" ,,,Заказ.Ссылка) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли; 
		
		Если Доставка Тогда
			ДоставкаДопИнф = РегистрыСведений.ДоставкаДопИнф.СоздатьМенеджерЗаписи();
			ДоставкаДопИнф.Период	= Заказ.Дата;
			ДоставкаДопИнф.Заказ	= Заказ.Ссылка;
			Если ЗначениеЗаполнено(Заказ.ВнешнийНомер) Тогда
				ДоставкаДопИнф.Статус	= Перечисления.СтатусыДоставки.Загружен;
			Иначе
				ДоставкаДопИнф.Статус	= Перечисления.СтатусыДоставки.Открыт;
			КонецЕсли;
			ДоставкаДопИнф.Автор	= глПользователь;
			Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДоставкаДопИнф, "Объект.Записать()" ) Тогда
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли; 
		
		// < КС_ВДВ -------------------------------------------------------------------- 
		// Привязка заказа к карте доступа
		Если КартаДоступаКлиента <> Неопределено Тогда
			
			ОткрЗаказыПоКартам = РегистрыСведений.ОткрытыеЗаказыПоКартам.СоздатьНаборЗаписей();
			
			ОткрЗаказыПоКартам.Отбор.КартаДоступа.Установить(КартаДоступаКлиента);
			
			НоваяЗаписьРег = ОткрЗаказыПоКартам.Добавить();
			НоваяЗаписьРег.КартаДоступа = КартаДоступаКлиента;
			НоваяЗаписьРег.Заказ = Заказ.Ссылка; 
			
			Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ОткрЗаказыПоКартам, "Объект.Записать(Истина)" ) Тогда
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли; 
		// КС_ВДВ > -------------------------------------------------------------------- 
		
		ЗафиксироватьТранзакцию();
		
		Заказ .Заблокировать();
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказНовый, Заказ.Ссылка, УбратьВсеБуквы(Заказ.Номер), НаимПосадочногоМеста(Заказ.ПосадочноеМесто) );
		
		//-------------------------------
		ТаблицаЗаказа.Строки.Очистить();
		// < КС_ВДВ ------------------------------------------------------------ 
		ТаблицаЗаказаОтбор.Строки.Очистить();
		// КС_ВДВ > ------------------------------------------------------------ 
		ТаблицаКатегорий.Очистить();
		ТаблицаСкидок.Очистить();
		РучнаяСкидка = Неопределено;
		ПартнерСкидки = Неопределено;
		
		ОпределитьТаблицуПодач();
		Если РазделятьПодачи Тогда
			ТекущаяПодача = НайтиДобавитьПодачу(1, СтатусДозаказ);
		КонецЕсли; 
		
		// < КС_ВДВ ------------------------------------------------------------ 
		СледующийНомерПодачиНач = 1; // Заказ новый
		ТекущийМаксНомерПодачи  = СледующийНомерПодачиНач;
		
		ПейджерКВыдаче  = Неопределено;
		// КС_ВДВ > ------------------------------------------------------------ 
		
		Заблокирован	= Ложь;
		Модифицирован	= Истина;
		ЕстьДозаказ		= Ложь;
		ЕстьУдаление	= Ложь;
		
		ТипЦен = Защита.ПолучитьТипЦен(Заказ.МестоРеализации);
		
		Если ЛимитнаяКарта Тогда
			Если Заказ.ПосадочноеМесто.СуммаМинимальнойПредоплаты > 0 Тогда
				Если НЕ ВнестиПредоплату() Тогда
					УдалитьПустойЗаказ(Истина);
					Возврат Ложь;
				КонецЕсли;
				Если НЕ глПараметрыРМ.ЛимитныеКартыОткрыватьЗаказПослеПредоплаты Тогда
					Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма);
					Заказ.Разблокировать();
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
//Z+		
		Если ЗакрытьФормы Тогда
			Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма);
			Заказ.Разблокировать();
		КонецЕсли;
//Z-		
		 
		
		// обязательные позиции
		Для каждого СтрокаТЧ Из Заказ.ПосадочноеМесто.АвтоТовары Цикл
			Колво = ?(СтрокаТЧ.ПоКоличествуПосетителей, Заказ.КоличествоПосетителей, 0);
			ВводНовойСтроки(СтрокаТЧ.Товар, Колво, Истина, ?(глВерсия=3,Заказ.ПосадочноеМесто.КоммутироемоеУстройство, Неопределено) );
		КонецЦикла; 
		
		// можно наливать
		КомандаНаливайке("ЗаказОткрыт");
		
		// Создается новый заказ
		НовыйЗаказ	= Истина;
		
		ПолучитьРекомендации(Ложь);
		
		// Отобразить изменения на ИнфоДисплее
		// < КС_ВДВ ------------------------------------------------------------ 
		//ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ.Ссылка, ТаблицаЗаказа, СписокРекомендаций);		
		Если НЕ ЗакрытьФормы Тогда
			ВыводЗаказаНаИнфоДисплей(Истина);
		КонецЕсли;	
		// КС_ВДВ > ------------------------------------------------------------ 
		
				Возврат Истина;	
	КонецФункции
	
	// Чтение заказа
	//
	Функция ПрочитатьЗаказ(ТолькоДляЗаписи=Ложь) Экспорт
		
		// < КС_ВДВ ------------------------------------------------------------ 
		СтанцияОтбор = Неопределено;
		Если ЗначениеЗаполнено(глРабочееМесто.Станция) Тогда
			//:глРабочееМесто = Справочники.РабочиеМеста.ПустаяСсылка();
			Если глРабочееМесто.Тип = Перечисления.ТипыРМ.Производство Тогда
				СтанцияОтбор = глРабочееМесто.Станция;
			КонецЕсли;
		КонецЕсли; 
		
		ВыданныеПейджерыСтр = ИнформацияОВыданныхПейджерах();
		
		СтанцияОтборСуммаНач = 0;
		УстановитьРежимВыдачиЗаказа = Ложь;
		// КС_ВДВ > ------------------------------------------------------------ 
		
		ЗаказДопИнф.Заказ = Заказ.Ссылка;
		ЗаказДопИнф.Прочитать();
		
		Доставка = Заказ.Доставка;
		Если Доставка Тогда
			ПолучитьПоследнийСтатусДоставки(Заказ.Ссылка);
		КонецЕсли;
		
		СменаОткрыта = ИнтерфейсРМ.ПроверкаСмены(Ложь, Заказ.МестоРеализации);
		Заблокирован = Ложь;
		
		Если ФоновыйРежим Тогда
			Если ЗаказДопИнф.Статус <> Перечисления.СтатусыЗаказа.Открыт Тогда
				Текст1="Нет доступа!";
				Текст2="Заказ уже закрыт.";
				Возврат Ложь;
			ИначеЕсли Заказ.ЕстьПресчет Тогда
				Текст1="Нет доступа!";
				Текст2="Распечатан предварительный счет.";
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Если Заказ.МестоРеализации <> глПараметрыРМ.МестоРеализации Тогда
				Текст1="Нет доступа!";
				Текст2="Этот заказ принадлежит другому месту реализации.";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат Ложь;
				
			ИначеЕсли ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Открыт И  
				НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(?(Заказ.Доставка,"Доставка","")+"ДоступОткрытыеЗаказы", Истина, , Заказ.Автор) Тогда
				Возврат Ложь;
				
			ИначеЕсли ЗаказДопИнф.Статус <> Перечисления.СтатусыЗаказа.Открыт И 
				НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(?(ЗначениеЗаполнено(ЗаказДопИнф.ПротоколРасчетов.ККМ), "ЖурналЗакрытых", "ЖурналНедоЗакрытых"), Истина, , Заказ.Автор) Тогда
				Возврат Ложь;
				
			КонецЕсли; 
		КонецЕсли; 
		
		Если ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Открыт И НЕ СменаОткрыта Тогда
			Текст1="Ошибка смены!";
			Текст2="С момента открытия смены прошло более 24 часов!
			|Возможен только просмотр...";
			
			Если ФоновыйРежим Тогда
				Возврат Ложь;
			ИначеЕсли ТолькоДляЗаписи Тогда
				ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
				Возврат Ложь;
			ИначеЕсли ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"ОК","","Esc=Отмена")="Отмена" Тогда
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли НЕ ИнтерфейсРМ.ЗаблокироватьОбъект(Заказ,КемЗаблокирован) Тогда
			Текст1="Заказ редактируется!";
			Текст2="Этот заказ редактируется на 
			|"+КемЗаблокирован+"
			|Возможен только просмотр...";
			
			Если ФоновыйРежим Тогда
				Возврат Ложь;
			Иначе
				Выбор = ИнтерфейсРМ.СообщитьСброситьЗаказНаАвтокассе(КемЗаблокирован, Текст1, Текст2, ТолькоДляЗаписи);
				Если Выбор = -1 Тогда
					Возврат Ложь;
				ИначеЕсли Выбор = 1 Тогда
					Возврат ПрочитатьЗаказ(ТолькоДляЗаписи);
				КонецЕсли; 
			//ИначеЕсли ТолькоДляЗаписи Тогда
			//	ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
			//	Возврат Ложь;
			//ИначеЕсли ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"ОК","","Esc=Отмена")="Отмена" Тогда
			//	Возврат Ложь;
			КонецЕсли;
			
			Заблокирован = Истина;
			
		КонецЕсли;
		
		//----------------------------------------------
		ОпределитьТаблицуПодач();
		
		ЕстьДозаказ	= Ложь;
		ЕстьУдаление= Ложь;
		
		ТипЦен = Защита.ПолучитьТипЦен(Заказ.МестоРеализации);
		
		ТаблицаЗаказа.Строки.Очистить();
		
		
		Если ИспользоватьЗаказТоварыДопИнф Тогда
			СоответствиеИдСтроки = ПолучитьСтруктуруЗаказТоварыДопИнф();
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		СледующийНомерПодачиНач = МаксимальныйНомерПодачиПоСтанции(глРабочееМесто.Станция) + 1;
		ТекущийМаксНомерПодачи  = СледующийНомерПодачиНач;
		
		ПейджерКВыдаче = Неопределено;
		// КС_ВДВ > ------------------------------------------------------------ 
		
		Для каждого СтрокаДок Из Заказ.Товары Цикл
			
			СтрокаТовара = ТаблицаЗаказа.Строки.Добавить();
			СтрокаТовара.Автор					= СтрокаДок.Автор;
			СтрокаТовара.АвтоПозиция			= СтрокаДок.АвтоПозиция;
			СтрокаТовара.Товар					= СтрокаДок.Товар;
			СтрокаТовара.Наименование			= СтрокаДок.Товар.Наименование;
			СтрокаТовара.Количество				= СтрокаДок.Количество;
			СтрокаТовара.Удалено				= СтрокаДок.КоличествоУдалено;
			СтрокаТовара.ТипЦен					= СтрокаДок.ТипЦен;
			СтрокаТовара.Цена					= СтрокаДок.Цена;
			СтрокаТовара.Сумма					= СтрокаДок.Сумма;
			СтрокаТовара.ЦенаРеализации			= СтрокаДок.ЦенаРеализации;
			СтрокаТовара.СуммаРеализации		= СтрокаДок.СуммаРеализации;
			СтрокаТовара.Категория				= СтрокаДок.Товар.Категория;
			СтрокаТовара.Статус					= СтрокаДок.Статус;
			СтрокаТовара.ИдСтроки				= СтрокаДок.ИдСтроки;
			СтрокаТовара.Источник				= СтрокаДок.Источник;
			
			Если ИспользоватьЗаказТоварыДопИнф Тогда
				ЗаказТоварыДопИнф = СоответствиеИдСтроки[СтрокаДок.ИдСтроки];
				Если ЗаказТоварыДопИнф <> Неопределено Тогда
					СтрокаТовара.КодПодтверждения	= ЗаказТоварыДопИнф.КодПодтверждения;
					СтрокаТовара.СтатусДопИнф		= ЗаказТоварыДопИнф.Статус;
					// < КС_ВДВ ------------------------------------------------------------ 
					СтрокаТовара.Станция			= ЗаказТоварыДопИнф.Станция;
					СтрокаТовара.НомерМарки			= ЗаказТоварыДопИнф.НомерМарки;
					// КС_ВДВ > ------------------------------------------------------------ 
				КонецЕсли; 
			КонецЕсли;
			
			СтрокаТовара.ГруппаПечати			= СтрокаДок.ГруппаПечати;
			Если НЕ ЗначениеЗаполнено(СтрокаТовара.ГруппаПечати) Тогда
				СтрокаТовара.ГруппаПечати		= СтрокаДок.Товар.ГруппаПечати;
			КонецЕсли; 
			
			Если глВерсия>1 Тогда
				СтрокаТовара.Подарок = СтрокаДок.Подарок;
			КонецЕсли;
			
			Если РазделятьПодачи Тогда
				Если СтрокаТовара.Статус = СтатусДозаказ Тогда
					// < КС_ВДВ ------------------------------------------------------------ 
					//ТекущаяПодача = НайтиДобавитьПодачу(1, СтатусДозаказ);
					ТекущаяПодача = НайтиДобавитьПодачу(СледующийНомерПодачиНач, СтатусДозаказ);
					// КС_ВДВ > ------------------------------------------------------------ 
					
				ИначеЕсли ЗаказТоварыДопИнф <> Неопределено Тогда
					ТекущаяПодача = НайтиДобавитьПодачу(ЗаказТоварыДопИнф.Подача, СтрокаТовара.Статус, ЗаказТоварыДопИнф.ВремяЗаказано);
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаДок.Подача) Тогда
					// оставлено для совместимости со старыми заказами
					ДокПодача = СтрокаДок.Подача;
					ТекущаяПодача = НайтиДобавитьПодачу(ДокПодача.Номер, ДокПодача.Статус, ДокПодача.Дата, ДокПодача);
				Иначе
					// Если ни чего не нашли...
					// < КС_ВДВ ------------------------------------------------------------ 
					//ТекущаяПодача = НайтиДобавитьПодачу(1, СтатусДозаказ);
					ТекущаяПодача = НайтиДобавитьПодачу(СледующийНомерПодачиНач, СтатусДозаказ);
					// КС_ВДВ > ------------------------------------------------------------ 
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТовара.Подача	= ТекущаяПодача;
			
			Если СтрокаТовара.Статус = СтатусДозаказ Тогда
				ЕстьДозаказ = Истина;
			ИначеЕсли СтрокаТовара.Статус = СтатусУдалено Тогда
				ЕстьУдаление = Истина;
			КонецЕсли; 
			
			Если ФоновыйРежим И НЕ ЗначениеЗаполнено(Заказ.ВнешнийНомер) И СтрокаТовара.Статус = СтатусДозаказ Тогда
				// заказ из мобильного приложения, надо подставить актуальную цену
				СтрокаТовара.ТипЦен	= ТипЦен;
				СтруктураЦены = ЦенаТовара(СтрокаТовара.Товар, СтрокаТовара.ТипЦен);
				СтрокаТовара.Цена = ПересчетВалют(СтруктураЦены.Цена, СтруктураЦены.Валюта);
				РасчетПоСтроке(СтрокаТовара);
			КонецЕсли; 
			
			
		КонецЦикла;
		
		Если глВерсия>1 Тогда
			
			Если РазделятьПодачи Тогда
				// < КС_ВДВ ------------------------------------------------------------ 
				//ТекущаяПодача = НайтиДобавитьПодачу(1, СтатусДозаказ);
				ТекущаяПодача = НайтиДобавитьПодачу(СледующийНомерПодачиНач, СтатусДозаказ);
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЕсли;
			
			// специфики в отдельной ТЧ, привязка по номеру строки товара
			ТаблицаСпецифик = Заказ.Специфики.Выгрузить();
			ТаблицаСпецифик.Колонки.Добавить("СтрокаТаблицыЗаказа");
			Для каждого СтрокаДок Из ТаблицаСпецифик Цикл
				Если СтрокаДок.НомерСтрокиСпецифики = 0 Тогда
					СтрокаТовара = ТаблицаЗаказа.Строки[СтрокаДок.НомерСтрокиТовара-1];
				Иначе
					СтрокаТовара = ТаблицаСпецифик[СтрокаДок.НомерСтрокиСпецифики-1].СтрокаТаблицыЗаказа;
				КонецЕсли; 
				СтрокаСпецифик = СтрокаТовара.Строки.Добавить();
				СтрокаСпецифик.Товар				= СтрокаДок.Специфика;
				СтрокаСпецифик.Наименование			= СтрДополнитьСправа("",(СтрокаСпецифик.Уровень()-1)*3) + " - "+СтрокаДок.Специфика.Наименование;
				СтрокаСпецифик.Статус				= СтрокаТовара.Статус;
				СтрокаСпецифик.ИдСтроки				= СтрокаДок.ИдСтроки;
				СтрокаСпецифик.Цена					= СтрокаДок.Цена;
				СтрокаСпецифик.ЦенаРеализации		= СтрокаДок.ЦенаРеализации;
				
				Если ИспользоватьЗаказТоварыДопИнф Тогда
					ЗаказТоварыДопИнф = СоответствиеИдСтроки[СтрокаДок.ИдСтроки];
					Если ЗаказТоварыДопИнф <> Неопределено Тогда
						СтрокаСпецифик.КодПодтверждения	= ЗаказТоварыДопИнф.КодПодтверждения;
						СтрокаСпецифик.СтатусДопИнф		= ЗаказТоварыДопИнф.Статус;
						// < КС_ВДВ ------------------------------------------------------------ 
						СтрокаСпецифик.Станция			= ЗаказТоварыДопИнф.Станция;
						СтрокаСпецифик.НомерМарки		= ЗаказТоварыДопИнф.НомерМарки;
						// КС_ВДВ > ------------------------------------------------------------ 
					КонецЕсли; 	
				КонецЕсли;
				
				СтрокаСпецифик.ГруппаПечати			= СтрокаДок.ГруппаПечати;
				
				Если НЕ ЗначениеЗаполнено(СтрокаСпецифик.ГруппаПечати) Тогда
					СтрокаСпецифик.ГруппаПечати	= СтрокаСпецифик.Товар.ГруппаПечати;
				КонецЕсли;
				
				СтрокаСпецифик.Подача	= СтрокаТовара.Подача;
//Z+				
				СтрокаСпецифик.Порядок=?(ксТрактир.ОбщаяСпецифика(СтрокаДок.Специфика),3,?(СтрокаДок.Специфика.ЕстьЦена,1,2));//?(СтрокаДок.Специфика.ЕстьЦена,1,?(ксТрактир.ОбщаяСпецифика(СтрокаДок.Специфика),3,2));
				СпрГруппа=СтрокаДок.Специфика;
				Пока 1=1 Цикл
					Если НЕ ЗначениеЗаполнено(СпрГруппа.Родитель) Тогда
						Прервать;
					КонецЕсли;	
					СпрГруппа=СпрГруппа.Родитель;
					Если СпрГруппа.Уровень()=1 Тогда
						Прервать;
					КонецЕсли;		
					Если СпрГруппа.Родитель=0 Тогда
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				СтрокаСпецифик.ПорядокСпецифики=СпрГруппа.Порядок*1000+СтрокаДок.Специфика.Порядок;
				СтрокаТовара.Строки.Сортировать("Порядок,ПорядокСпецифики,ИДСтроки");			
//Z-				
				СтрокаДок.СтрокаТаблицыЗаказа = СтрокаСпецифик;
			КонецЦикла;
			// < КС_ВДВ ------------------------------------------------------------ 
			ЗаполнитьТаблицуЗаказаОтбор();
			
			тзСуммыПоСтанциямНач.Очистить();
			
			Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
				СтрокаСтанция = тзСуммыПоСтанциямНач.Добавить();
				СтрокаСтанция.Станция = СтрокаТовара.Станция;
				СтрокаСтанция.Сумма   = СтрокаТовара.СуммаРеализации;
			КонецЦикла; 
			
			тзСуммыПоСтанциямНач.Свернуть("Станция", "Сумма");
			
			СтанцияОтборСуммаНач = ПолучитьСуммуНачПоСтанцииОтбор();
			// КС_ВДВ > ------------------------------------------------------------ 
			
			// разворачиваем специфики, если нужно
			Если НЕ ФоновыйРежим И глПараметрыРМ.ЗаказСпецификиПоказыватьЗаказанное И ФормаЗаказа<>Неопределено Тогда
				ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа;
				// < КС_ВДВ ------------------------------------------------------------ 
				//Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
				Для каждого СтрокаТовара Из ТаблицаЗаказаОтбор.Строки Цикл
					// КС_ВДВ > ------------------------------------------------------------ 
					ТабПолеТЗ.Развернуть(СтрокаТовара, Истина);
				КонецЦикла;
			КонецЕсли; 
			
		КонецЕсли; 
		
		//----------------------------------------------
		ТаблицаСкидок.Очистить();
		РучнаяСкидка = Неопределено;
		ПартнерСкидки = Неопределено;
		
		Для каждого СтрокаДок Из Заказ.Скидки Цикл
			СтрокаСкидки = ТаблицаСкидок.Добавить();
			СтрокаСкидки.Тип	= СтрокаДок.Тип;
			СтрокаСкидки.Скидка = СтрокаДок.Скидка;
			СтрокаСкидки.Сумма	= СтрокаДок.Сумма;
			
			//Защита.УстановитьТекстСкидки(СтрокаСкидки);
			Если СтрокаСкидки.Тип = Перечисления.ТипыСкидок.Ручная Тогда
				РучнаяСкидка = СтрокаСкидки.Скидка;
				Если глВерсия=3 Тогда
					ПартнерСкидки= СтрокаДок.Партнер;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла;
		
		//----------------------------------------------
		Модифицирован	= Ложь;
		ТекущийКурс		= 1;
		ЛимитнаяКарта	= ?(глВерсия=3, Заказ.ПосадочноеМесто.ЛимитнаяКарта, Ложь );
		
		//----------------------------------------------
		Если НЕ ФоновыйРежим Тогда
						
			ЗаполнитьТаблицуКатегорий();
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказВход, Заказ.Ссылка, УбратьВсеБуквы(Заказ.Номер) );
		КонецЕсли;
		
		// Заказ открыт повторно
		НовыйЗаказ	= Ложь;
		
		ПолучитьРекомендации(Ложь);
		
		// Отобразить изменения на ИнфоДисплее
		// < КС_ВДВ ------------------------------------------------------------ 
		//ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ.Ссылка, ТаблицаЗаказа, СписокРекомендаций);	
		ВыводЗаказаНаИнфоДисплей(Истина);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		Возврат Истина;
	КонецФункции
	
	// Запись заказа
	//
	
	// Запись заказа
	//
	Функция ЗаписатьЗаказ(ИзОплаты=Ложь) Экспорт
		
		Если НЕ Модифицирован Тогда
			Возврат Истина;
		КонецЕсли; 
		
		УпаковкаТаблицыЗаказа();
		
		Если НЕ ИзОплаты Тогда
			РасчетПоЗаказуПолный();
		КонецЕсли; 
		
		Если НЕ Доставка И НЕ ФоновыйРежим И (ЕстьДозаказ ИЛИ ЕстьУдаление) Тогда
			// записывать можно только то, что распечатано !
			// поэтому позиции, по которым не прошла печать марок, на время записи надо убрать,
			// рассчитать заказ без них, а потом вернуть все на место
			КопияТаблицыЗаказа = ТаблицаЗаказа.Скопировать();
			
			ИндексСтроки=0;
			Пока ИндексСтроки <= ТаблицаЗаказа.Строки.Количество()-1 Цикл
				СтрокаЗаказа = ТаблицаЗаказа.Строки[ИндексСтроки];
				
				Если СтрокаЗаказа.Статус = СтатусДозаказ Тогда
					ТаблицаЗаказа.Строки.Удалить(СтрокаЗаказа);
					
				Иначе
					Если СтрокаЗаказа.Статус = СтатусУдалено Тогда
						СтрокаЗаказа.Количество		= СтрокаЗаказа.Количество	 + СтрокаЗаказа.УдаленоСейчас;
						СтрокаЗаказа.Удалено		= СтрокаЗаказа.Удалено		 - СтрокаЗаказа.УдаленоСейчас;
						РасчетПоСтроке(СтрокаЗаказа);
					КонецЕсли; 
					
					ИндексСтроки = ИндексСтроки + 1;
				КонецЕсли; 
				
			КонецЦикла;
			
			РасчетПоЗаказуПолный();
			
			// < КС_ВДВ ------------------------------------------------------------ 
			ЗаполнитьТаблицуЗаказаОтбор();
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли;
		


		//----------------------------------------------
		НачатьТранзакцию();
				
		Заказ.ЕстьДозаказ = Ложь;
		Заказ.РабочееМесто = глРабочееМесто;
		Заказ.ККМрабочегоМеста = глПараметрыРМ.ККМ;
		
		Заказ.Товары.Очистить();
		Если глВерсия>1 Тогда
			Заказ.Специфики.Очистить();
			ТекДата = ТекущаяДатаНаСервере();
			ВремяСекунд = Формат(ТекДата-НачалоДня(ТекДата),"ЧГ=");
		КонецЕсли;
		
		Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
			СтрокаДок = Заказ.Товары.Добавить();
			СтрокаДок.Автор				= СтрокаТовара.Автор;
			СтрокаДок.АвтоПозиция		= СтрокаТовара.АвтоПозиция;
			СтрокаДок.Товар				= СтрокаТовара.Товар;
			СтрокаДок.Количество		= СтрокаТовара.Количество;
			СтрокаДок.КоличествоУдалено	= СтрокаТовара.Удалено;
			СтрокаДок.ТипЦен			= СтрокаТовара.ТипЦен;
			СтрокаДок.Цена				= СтрокаТовара.Цена;
			СтрокаДок.Сумма				= СтрокаТовара.Сумма;
			СтрокаДок.ЦенаРеализации	= СтрокаТовара.ЦенаРеализации;
			СтрокаДок.СуммаРеализации	= СтрокаТовара.СуммаРеализации;
			СтрокаДок.Статус			= СтрокаТовара.Статус;
			СтрокаДок.ГруппаПечати		= СтрокаТовара.ГруппаПечати;
			
			// Если ИдСтроки отсутствует то создаем
			Если НЕ ЗначениеЗаполнено(СтрокаТовара.ИдСтроки) Тогда
				СтрокаТовара.ИдСтроки	= НовыйИДСтрокиЗаказа(, СтрокаДок.НомерСтроки);
				// < КС_ВДВ ------------------------------------------------------------ 
				ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаТовара);
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЕсли;	
			СтрокаДок.ИдСтроки			= СтрокаТовара.ИдСтроки;
			СтрокаДок.Источник			= СтрокаТовара.Источник;
			
			Если глВерсия>1 Тогда
				СтрокаДок.Подарок		= СтрокаТовара.Подарок;
			КонецЕсли;
			
			Если ИспользоватьГруппыОплаты Тогда
				ГруппаОплаты = СтрокаДок.Товар.Категория.ГруппаОплаты;
				СтрокаДок.ГруппаОплаты = ?(ЗначениеЗаполнено(ГруппаОплаты), ГруппаОплаты, ОсновнаяГруппаОплаты);
			КонецЕсли; 
			
			// Если существует документ подача записываем номер иначе ссылку на документ
			Если РазделятьПодачи И ЗначениеЗаполнено(СтрокаТовара.Подача.ДокСсылка) Тогда
				СтрокаДок.Подача = СтрокаТовара.Подача.ДокСсылка;
			КонецЕсли; 
			
			Если глВерсия>1 Тогда
				
				// Режим подтверждения Заказ, Подача или Позиция (должен определяться до получения кода подтверждения для корректной работы специфик)
				РежимПодтверждения	= СтрокаТовара.ГруппаПечати.РежимПодтверждения;
				Если РежимПодтверждения = 1 И НЕ ИспользоватьКурсы Тогда
					РежимПодтверждения = 0;
				КонецЕсли; 
				
				// Добавить информацию в регистр ЗаказТоварыДопИнф и оповестить монитор
				Если ИспользоватьЗаказТоварыДопИнф Тогда
					РегистрЗаказТоварыДопИнфДобавить(СтрокаТовара, РежимПодтверждения, ТекДата, ВремяСекунд);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТовара.Строки) Тогда
					СтрокаТовара.Строки.Сортировать("Порядок,ПорядокСпецифики,ИДСтроки");
					ЗаписатьСпецифики(СтрокаТовара, СтрокаДок, РежимПодтверждения, РежимПодтверждения, ТекДата, ВремяСекунд, СтрокаТовара.Количество);
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаТовара.Статус = СтатусДозаказ И НЕ Заказ.ЕстьДозаказ Тогда
				Заказ.ЕстьДозаказ = Истина;
			КонецЕсли; 
		КонецЦикла;
		
		//----------------------------------------------
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( Заказ, "Объект.Записать()",,,Заказ.Ссылка) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ Доставка И НЕ ФоновыйРежим И (ЕстьДозаказ ИЛИ ЕстьУдаление) Тогда
			ТаблицаЗаказа = КопияТаблицыЗаказа;






			РасчетПоЗаказуПолный();
			
			// < КС_ВДВ ------------------------------------------------------------ 
			ЗаполнитьТаблицуЗаказаОтбор();
			// КС_ВДВ > ------------------------------------------------------------ 

			
			Если глВерсия>1 И ФормаЗаказа<>Неопределено Тогда
				ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа;
				// < КС_ВДВ ------------------------------------------------------------ 
				//Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
				Для каждого СтрокаТовара Из ТаблицаЗаказаОтбор.Строки Цикл
					// КС_ВДВ > ------------------------------------------------------------ 
					Если СтрокаТовара.Статус = СтатусДозаказ ИЛИ глПараметрыРМ.ЗаказСпецификиПоказыватьЗаказанное Тогда
						ТабПолеТЗ.Развернуть(СтрокаТовара, Истина);
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли; 
			
		Иначе
			
			Если Не ЕстьДозаказ И Доставка И Модифицирован Тогда
				//ВнешнийЗаказ.ЗаписатьСтатусДоставки(Заказ.Ссылка, Перечисления.СтатусыДоставки.Принят);
				//ВнешнийЗаказ.ВыгрузитьСтатусДоставки(Заказ.Ссылка);
			Конецесли;			
			// не было ошибок при печати марок
			Модифицирован = Ложь;
			
			Если глВерсия>1 И НЕ (Заказ.Бронь.Пустая() ИЛИ Заказ.Бронь.Закрыто) Тогда

				Бронь = Заказ.Бронь.ПолучитьОбъект();
				Бронь.Закрыто = Истина;
				Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( Бронь, "Объект.Записать(РежимЗаписиДокумента.Проведение)" ) Тогда
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли;
		
		// Уведомить РМ мониторов марок по списку
		Если УведомитьМониторыМарок И МониторыМарок.Количество() > 0 Тогда
			//Защита.ОтправаитьУведомлениеРММониторы(МониторыМарок);
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();



		
		Если СоответствиеКодПодтвержденияНомерМарки <> Неопределено Тогда
			СоответствиеКодПодтвержденияНомерМарки.Очистить();
		КонецЕсли;
		
		Возврат Истина;
		
	КонецФункции

	// Заполнить специфики в документ и записать в регистр ЗаказТоварыДопИнф
	// Так как могут быть вложенные специфики с разными ГруппамиПечати,
	// нужно отслеживать первоначальную ГруппуПечати
	//
	Процедура ЗаписатьСпецифики(ПереченьСпецифик, СтрокаДок, РежимПодтвержденияОбщий, РежимПодтвержденияСпецифики, ТекДата, ВремяСекунд, Количество =0, НомерСтрокиСпецифики=0)
		
		СтрокиСпецифик = ПереченьСпецифик.Строки;
		
		Для каждого СтрокаСпецифики Из СтрокиСпецифик Цикл
			СтрокаДокСпец = Заказ.Специфики.Добавить();
			СтрокаДокСпец.НомерСтрокиТовара		= СтрокаДок.НомерСтроки;
			СтрокаДокСпец.НомерСтрокиСпецифики	= НомерСтрокиСпецифики;
			СтрокаДокСпец.Специфика				= СтрокаСпецифики.Товар;
			СтрокаДокСпец.ГруппаПечати			= СтрокаСпецифики.ГруппаПечати;
			СтрокаДокСпец.ГруппаОплаты			= СтрокаДок.ГруппаОплаты;
			СтрокаДокСпец.Количество			= СтрокаДок.Количество;
			СтрокаДокСпец.Цена					= СтрокаСпецифики.Цена;
			СтрокаДокСпец.ЦенаРеализации		= СтрокаДокСпец.Цена;
			// Если ИдСтроки отсутствует то создаем
			Если НЕ ЗначениеЗаполнено(СтрокаСпецифики.ИдСтроки) Тогда
				СтрокаСпецифики.ИдСтроки	= НовыйИДСтрокиЗаказа(, СтрокаДокСпец.НомерСтроки);
				// < КС_ВДВ ------------------------------------------------------------ 
				ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаСпецифики);
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЕсли;	
			СтрокаДокСпец.ИдСтроки			= СтрокаСпецифики.ИдСтроки;
			
			// Если есть своя группа печати определяем режим подтверждения для специфики
			Если ЗначениеЗаполнено(СтрокаСпецифики.ГруппаПечати) Тогда		
				РежимПодтвержденияСпецифики	= СтрокаСпецифики.ГруппаПечати.РежимПодтверждения;
				Если РежимПодтвержденияСпецифики = 1 И НЕ РежимПодтвержденияСпецифики Тогда
					РежимПодтвержденияСпецифики = 0;
				КонецЕсли;
			КонецЕсли;
			
			// Добавить информацию в регистр ЗаказТоварыДопИнф и оповестить монитор
			Если ИспользоватьЗаказТоварыДопИнф Тогда
				РегистрЗаказТоварыДопИнфДобавить(СтрокаСпецифики, РежимПодтвержденияСпецифики, ТекДата, ВремяСекунд, Ложь, ПереченьСпецифик.ИдСтроки, Количество);
			КонецЕсли;
			
			// вложенные специфики
			Если ЗначениеЗаполнено(СтрокаСпецифики.Строки) Тогда 
				Если ЗначениеЗаполнено(СтрокаСпецифики.ГруппаПечати) Тогда
					РежимПодтвержденияСпецифики	= СтрокаСпецифики.ГруппаПечати.РежимПодтверждения;
					Если РежимПодтвержденияСпецифики = 1 И НЕ РежимПодтвержденияСпецифики Тогда
						РежимПодтвержденияСпецифики = 0;
					КонецЕсли;
				ИначеЕсли РежимПодтвержденияОбщий <> РежимПодтвержденияСпецифики Тогда
					РежимПодтвержденияСпецифики = РежимПодтвержденияОбщий;
				КонецЕсли;
				ЗаписатьСпецифики(СтрокаСпецифики, СтрокаДок, РежимПодтвержденияОбщий, РежимПодтвержденияСпецифики, ТекДата, ВремяСекунд, Количество, СтрокаДокСпец.НомерСтроки)
			КонецЕсли;
		КонецЦикла; 
		
	КонецПроцедуры
	
	// Упаковка таблицы заказа по кнопке или при записи
	//
	// Параметры:
	//	Параметр1	- описание параметра
	//
	Процедура УпаковкаТаблицыЗаказа(ПоКнопке=Ложь) Экспорт
		
		Если НЕ Модифицирован ИЛИ РежимПредЗаказ Тогда
			Возврат;
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		УпаковкаМодифицирован = Ложь;
		// КС_ВДВ > ------------------------------------------------------------ 
		
		// надо просуммировать количество по одинаковым позициям, с учетом статуса, 
		// признака "Отдельной строкой", и с проверкой состава специфик
		Инд1 = 0;
		Пока Инд1 <= ТаблицаЗаказа.Строки.Количество()-1 Цикл
			
			СтрТов1 = ТаблицаЗаказа.Строки[Инд1];
			// для сортировки заказанных позиций вверх, остальных по порядку подачи
			Если СтрТов1.Товар.Разделитель Тогда
				Инд1 = Инд1 + 1;
				Продолжить;
			КонецЕсли; 
			
			Инд2 = Инд1 + 1;
			Пока Инд2 <= ТаблицаЗаказа.Строки.Количество()-1 Цикл
				
				СтрТов2 = ТаблицаЗаказа.Строки[Инд2];
				Если СтрТов2.Товар.Разделитель Тогда
					Прервать;
				КонецЕсли; 
				
				Если СтрТов1.Товар = СтрТов2.Товар И НЕ СтрТов1.Товар.ОтдельнойСтрокой
					И СтрТов1.Статус		= СтрТов2.Статус
					И СтрТов1.Автор			= СтрТов2.Автор
					И СтрТов1.Цена			= СтрТов2.Цена
					
					И ?(ЗначениеЗаполнено(СтрТов1.Подача.ДокСсылка), 
					СтрТов1.Подача.ДокСсылка= СтрТов2.Подача.ДокСсылка, 
					СтрТов1.Подача.Номер	= СтрТов2.Подача.Номер)
					И СтрТов1.КодПодтверждения	= СтрТов2.КодПодтверждения					
					И СтрТов1.Подарок		= СтрТов2.Подарок
					И ложь //Защита.КонтрольнаяСтрокаСпецифики(СтрТов1.Строки) = Защита.КонтрольнаяСтрокаСпецифики(СтрТов2.Строки)
					// < КС_ВДВ ------------------------------------------------------------ 
					И СтрТов1.Станция		= СтрТов2.Станция
					// КС_ВДВ > ------------------------------------------------------------ 
					
					Тогда
					
					СтрТов1.Количество = СтрТов1.Количество + СтрТов2.Количество;
					РасчетПоСтроке(СтрТов1);
					
					ТаблицаЗаказа.Строки.Удалить(СтрТов2);
					
					// < КС_ВДВ ------------------------------------------------------------ 
					УпаковкаМодифицирован = Истина;
					// КС_ВДВ > ------------------------------------------------------------ 
				Иначе
					Инд2 = Инд2 + 1;
				КонецЕсли; 
				
			КонецЦикла; 
			
			Инд1 = Инд1 + 1;
		КонецЦикла; 
		
		Если ПоКнопке Тогда
			РасчетПоЗаказуПолный();
		КонецЕсли; 
		
		// < КС_ВДВ ------------------------------------------------------------ 
		Если УпаковкаМодифицирован Тогда
			ЗаполнитьТаблицуЗаказаОтбор();
			
			// После заполнения все строки в ТаблицаЗаказаОтбор свёрнутые - нужно развернуть
			РазвернутьСпецифики();
		КонецЕсли; 
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецПроцедуры
	
	// Переход к вводу нового заказа после оплаты или по кнопке
	//
	Процедура ОткрытьНовыйЗаказ() Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат;
		КонецЕсли; 
		
		// в случае отказа от записи пустого заказа, текущий заказ удаляется
		ПосадочноеМесто = ?(глПараметрыРМ.ЗаказРежимЛистания=0 И НЕ ЛимитнаяКарта И НЕ Доставка, Заказ.ПосадочноеМесто, Неопределено);
		
		Если НЕ ВыходИзЗаказа() Тогда
			Возврат;
			
		ИначеЕсли НЕ СоздатьНовый( ПосадочноеМесто ) Тогда
			Если ФормаЗаказа <> Неопределено Тогда
				ФормаЗаказа.Закрыть();
			КонецЕсли;
			Возврат;
			
		КонецЕсли;
		
		ПолучитьДоступныеЗаказы();
		
		ИнтерфейсАдмина.ОбновлениеПризнакаНаличияВПродаже(Истина);
		
		Если НЕ Доставка И глПараметрыРМ.ЗаказМенюАвтоОткрытие И ФормаПодбораТоваров = Неопределено Тогда
			ПодборТоваров(Ложь);
		КонецЕсли; 
		
		ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
		"ЗАКАЗ N "+Число(Заказ.Номер)	,,
		"ИТОГО:"	,Заказ.ИтоговаяСумма);
		
	КонецПроцедуры
	
	// Листание открытых заказов
	//
	Процедура ОткрытьСледующийЗаказ(Направление) Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат;
		КонецЕсли; 
		
		// в случае отказа от записи пустого заказа, текущий заказ удаляется
		ТекЗаказ		= Заказ.Ссылка;
		ПосадочноеМесто = Заказ.ПосадочноеМесто;
		
		Если НЕ ВыходИзЗаказа() Тогда
			Возврат;
		КонецЕсли; 
		
		ДоступныеЗаказы = ПолучитьДоступныеЗаказы(ПосадочноеМесто);
		ИнтерфейсАдмина.ОбновлениеПризнакаНаличияВПродаже(Истина);
		
		Индекс = ДоступныеЗаказы.Найти(ТекЗаказ);
		Если Индекс=Неопределено Тогда
			ИндексСледЗаказа = ?(Направление=1, 0, ДоступныеЗаказы.Количество()-1 );
		Иначе
			ИндексСледЗаказа = Индекс + Направление;
		КонецЕсли;
		
		Если ИндексСледЗаказа<0 ИЛИ ИндексСледЗаказа > ДоступныеЗаказы.Количество()-1 Тогда
			Текст1="Нет доступа!";
			Текст2="Больше доступных заказов нет...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Если НЕ ЗначениеЗаполнено(ТекЗаказ.Номер) Тогда
				Модифицирован = Ложь;
				Если ФормаЗаказа <> Неопределено Тогда
					ФормаЗаказа.Закрыть();
				КонецЕсли;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Заказ = ДоступныеЗаказы[ИндексСледЗаказа].ПолучитьОбъект();
		
		Если НЕ ПрочитатьЗаказ() Тогда
			
			Если ТекЗаказ.Пустая() Тогда
				Если ФормаЗаказа <> Неопределено Тогда
					ФормаЗаказа.Закрыть();
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
			Заказ = ТекЗаказ.ПолучитьОбъект();
			Если НЕ ПрочитатьЗаказ() Тогда
				Если ФормаЗаказа <> Неопределено Тогда
					ФормаЗаказа.Закрыть();
				КонецЕсли;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
		"ЗАКАЗ N "+Число(Заказ.Номер)	,,
		"ИТОГО:"	,Заказ.ИтоговаяСумма);
	КонецПроцедуры
	
	// Описание функции
	//
	Функция ПолучитьДоступныеЗаказы(ПосадочноеМесто=Неопределено)
		
		Если Доставка Тогда
			Возврат Новый Массив;
		КонецЕсли; 
		
		Если глПараметрыРМ.ЗаказРежимЛистания=0 Тогда	// внутри пос.места
			Если ПосадочноеМесто=Неопределено Тогда
				ПосадочноеМесто = Заказ.ПосадочноеМесто;
			КонецЕсли; 
			МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов(ПосадочноеМесто);
			
		Иначе
			МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов();
			ПравоДоступОткрытыеЗаказы = ПланыВидовХарактеристик.ПраваДоступа.ДоступОткрытыеЗаказы;
			н = 0;
			Пока н <= МассивЗаказов.Количество()-1 Цикл
				Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПравоДоступОткрытыеЗаказы, , , МассивЗаказов[н].Автор) Тогда
					МассивЗаказов.Удалить(н);
				Иначе
					н = н + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли; 
		
		// переменная нужна для показа информации в форме
		КолвоЗаказов = МассивЗаказов.Количество();
		
		Возврат МассивЗаказов;
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	// ПЕЧАТЬ МАРОК
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Выполняет установку курсов по новым строкам заказа.
	// Если возвращает Ложь, то установка очередности не была выполнена пользователем.
	// И переходить к печати марок (и записи заказа) нельзя.
	//
	Функция ПередПечатьюМарок() Экспорт 
		// Выбор очередности = Назначение курсов
		// Выбор нужно делать до упаковки таблицы заказа. Иначе одинаковые строки
		// сольются в одну; и им уже не назначить разную очередность.
		
		Если РежимПредЗаказ Тогда
			Возврат Истина;
		КонецЕсли;
		

		Если НЕ (ксТрактир.ЭтоРМСтанция() И ИспользоватьКурсы) Тогда
			Возврат Истина; // очередность назначается только на станции
		КонецЕсли;
		
		// Проверки как и в функции ПечатьМарок
		Если НЕ( ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НеЗаблокирован") И 
			ВыполнитьПроверку("ПроверкаСкидки") 
			) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		ТекСтанция = глРабочееМесто.Станция;
		
	
				
		// Выданный пейджер по станции
		МассивПейджеров = ксТрактир.ВыданныеПейджеры(Заказ.Ссылка, ТекСтанция);
		ТекПейджер = ?(МассивПейджеров.Количество() > 0, МассивПейджеров[0], Неопределено);
		
		// Выбор очередности в форме
		ОбработкаВыборОчередности 	= ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборОчередности");
		РезультатВыбора				= ОбработкаВыборОчередности.ВыполнитьВыборОчередности(ФормаЗаказа, Заказ.Ссылка, ТаблицаЗаказа, ТекСтанция, ТекПейджер, СледующийНомерПодачиНач, СтанцияОтборСуммаНач);
		
		Если НЕ РезультатВыбора.ВыборСделан Тогда
			// После открытия формы назначения очередности заказ на мониторе гостя отображен в режиме назначения очередности.
			// Необходимо вывести заказ в режиме редактирования 
			ВыводЗаказаНаИнфоДисплей();
			
			Возврат Ложь; // пользователь нажал кнопку "Отмена" в форме выбора
		КонецЕсли; 
		
		// Заполним курсы в ТаблицаЗаказа
		ТаблицаОчередность      = РезультатВыбора.ТаблицаТовары;
		ТекущийМаксНомерПодачи  = СледующийНомерПодачиНач;
		
		Для каждого СтрокаОчередность Из ТаблицаОчередность Цикл
			
			СтрокаТовара = СтрокаОчередность.СтрокаТаблицыЗаказа;
			Курс         = СтрокаОчередность.Курс;
			
			Если СтрокаТовара = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ТекущийМаксНомерПодачи = Макс(Курс, ТекущийМаксНомерПодачи);
			
			ТекущаяПодача = НайтиДобавитьПодачу(Курс, СтатусДозаказ);
			СтрокаТовара.Подача = ТекущаяПодача;
			
			ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаТовара);
			
		КонецЦикла; 
		
		// Пейджер
		Если РезультатВыбора.Пейджер <> Неопределено Тогда
			ПейджерКВыдаче = РезультатВыбора.Пейджер;	
		КонецЕсли; 
		
		Возврат Истина;
		
	КонецФункции 
	
	// КС_ВДВ > ------------------------------------------------------------ 
	
	// Печать марок дозаказа или удаления
	//
	Функция ПечатьМарок(ПоКнопке=Ложь) Экспорт;
		
		Если РежимПредЗаказ Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ( ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НеЗаблокирован") И 
			ВыполнитьПроверку("ПроверкаСкидки") 
			) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Если Модифицирован Тогда
			// нужно для проверки лимита и определения подарков
			УпаковкаТаблицыЗаказа();
			РасчетПоЗаказуПолный();
			
					
			Если НЕ ЕстьУдаление И глВерсия>1 И НЕ ДобавитьПодарки() Тогда
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли; 
		
		Если НЕ( ЕстьДозаказ ИЛИ ЕстьУдаление) Тогда
			Если ПоКнопке Тогда
				// < КС_ВДВ ------------------------------------------------------------ 
				// Так как марки физически не распечатываются, то незачем печатать и
				// дополнительные сообщения к уже заказанным позициям.
				// Также при сохранении пустого заказа не будет появляться сообщение,
				// что "Нет дозаказа!", т.к. доп.сообщения печатаются только к измененным строкам.
				
				//// печать доп. сообщения по уже заказанной позиции или курсу
				//СтрокаЗаказа = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
				//Если глВерсия>1 И ЗначениеЗаполнено(СтрокаЗаказа) Тогда
				//	ПечатьДопСообщения(СтрокаЗаказа);
				//Иначе
				//	Текст1="Нет дозаказа!";
				//	Текст2="Не было ни дозаказа ни удаления...";
				//	ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				//КонецЕсли; 
				
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЕсли;
			
			Возврат Истина;
		КонецЕсли; 
		
		Если ЕстьДозаказ Тогда
			// запрос посадочного места перед печатью марок, если надо и если это первый дозаказ
			Если глПараметрыРМ.ЗаказЗапросПосадкиПередПечатьюМарок И 
				Заказ.ПосадочноеМесто=глПараметрыРМ.ЗаказМестоПоУмолчанию И 
				ТаблицаЗаказа.Строки[0].Статус = СтатусДозаказ Тогда
				
				ИзменитьМесто();
			КонецЕсли;
			
			// проверим еще раз стоп-лист и наличие в продаже вообще
			Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
				Если СтрокаТовара.Статус <> СтатусДозаказ Тогда
					Продолжить;
				КонецЕсли;
				
				ОстатокТовара = 0;
				Если НЕ СтрокаТовара.Товар.ЕстьВПродаже Тогда
					Текст1="Нет доступа!";
					Текст2="Товара """+СтрокаТовара.Товар.Наименование+""" нет в продаже!";
					Если НЕ ФоновыйРежим Тогда
						ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
					КонецЕсли; 
					Возврат Ложь;
					
				ИначеЕсли ТоварВСтопе(СтрокаТовара.Товар, ОстатокТовара) Тогда
					
					Если ОстатокТовара = 0 Тогда
						Текст1="Нет доступа!";
						Текст2="Товар """+СтрокаТовара.Товар.Наименование+""" в Стоп-листе!";
						Если НЕ ФоновыйРежим Тогда
							ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
						КонецЕсли; 
						Возврат Ложь;
						
					ИначеЕсли СтрокаТовара.Количество > ОстатокТовара Тогда
						Текст1="Нет доступа!";
						Текст2="Товара """+СтрокаТовара.Товар.Наименование+"""
						|осталось всего "+ОстатокТовара;
						Если НЕ ФоновыйРежим Тогда
							ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
						КонецЕсли; 
						Возврат Ложь;
						
					КонецЕсли; 
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		Если НЕ ФоновыйРежим Тогда
			Если ЗначениеЗаполнено(ПейджерКВыдаче) Тогда
				РезультатСтр = ксТрактир.РегистрацияВыдачиПейджера(Заказ.Ссылка, глРабочееМесто.Станция, ПейджерКВыдаче);
				
				Если НЕ ПустаяСтрока(РезультатСтр) Тогда
					Текст1 = "Контроль выдачи пейджера!";
					Текст2 = РезультатСтр;
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");	
					
					// Сообщили о проблеме. Прерывать печать марок не будем.
					//Возврат Ложь;
				Иначе	
					ПейджерКВыдаче = Неопределено;
				КонецЕсли; 
				
				ВыданныеПейджерыСтр = ИнформацияОВыданныхПейджерах();
			КонецЕсли; 
		КонецЕсли; 
		
		
		// КС_ВДВ > ------------------------------------------------------------ 
		
		//Если НЕ ФоновыйРежим Тогда
		//	глОжидание.Начало("Выполняется печать...",
		//	"Идет печать заданий на сервис-принтерах.
		//	|Пожалуйста, подождите...");
		//КонецЕсли; 
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказПечатьМарок, Заказ.Ссылка );
		
		ГруппыПечатиОтказы = ПечатьМарокВыполнить();
		
		Если ЕстьДозаказ Тогда
			ЕстьДозаказ = НЕ ГруппыПечатиОтказы.Количество() = 0;
			
			Если РазделятьПодачи Тогда
				// < КС_ВДВ ------------------------------------------------------------ 
				//ТекущаяПодача = НайтиДобавитьПодачу(1, СтатусДозаказ);
				
				СледующийНомерПодачиНач = ТекущийМаксНомерПодачи + 1; // меньше этого значения нельзя установить курс
				ТекущийМаксНомерПодачи  = СледующийНомерПодачиНач;
				ТекущаяПодача = НайтиДобавитьПодачу(ТекущийМаксНомерПодачи, СтатусДозаказ);
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЕсли;
			
		Иначе
			ЕстьУдаление = НЕ ГруппыПечатиОтказы.Количество() = 0;
			
			СоздатьДокументыУдаления(ГруппыПечатиОтказы);
			
		КонецЕсли;
		
		Если НЕ ФоновыйРежим Тогда
			//глОжидание.Конец();
		КонецЕсли; 
		
		// после печати марок всегда идет запись Заказа
		Модифицирован = Истина;
		
		Возврат ГруппыПечатиОтказы.Количество()=0;
	КонецФункции
	
	// Формирование таблицы печати, отправка задания, отметки о выполнении печати
	//
	Функция ПечатьМарокВыполнить()
		
		ТекДата = ТекущаяДата();
		
		ТаблицаПечати = Новый ДеревоЗначений;
		ТаблицаПечати.Колонки.Добавить("ГруппаПечати");
		ТаблицаПечати.Колонки.Добавить("Подача");
		ТаблицаПечати.Колонки.Добавить("Товар");
		ТаблицаПечати.Колонки.Добавить("Количество",	ТипКолво);
		ТаблицаПечати.Колонки.Добавить("КодПодтверждения");
		
		Если глВерсия=3 Тогда
			ТаблицаПечати.Колонки.Добавить("Тариф");
			ТаблицаПечати.Колонки.Добавить("МаксСумма", ТипСумма);
			ТаблицаПечати.Колонки.Добавить("МаксВремя", ТипСумма);
			ТаблицаПечати.Колонки.Добавить("РасчетыПоТарифу");
		КонецЕсли;
		
		Если ЕстьДозаказ И РазделятьПодачи Тогда
			
			Для каждого Подача Из ТаблицаПодач Цикл
				
				// чтобы разделить дозаказы, подачу записываем как заказанную
				Подача.Статус = СтатусЗаказано;
			КонецЦикла;
			
		КонецЕсли;
		
		ГруппыПечатиРазделителя = Новый Массив;
		ВремяСекунд = Формат(ТекущаяДата()-НачалоДня(ТекущаяДата()),"ЧГ=");
		
		Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
			
			Если СтрокаТовара.Статус = СтатусДозаказ Тогда
				
				Если глВерсия>1 Тогда
					// Режим подтверждения Заказ, Подача или Позиция (должен определяться до получения кода подтверждения для корректной работы специфик)
					РежимПодтверждения	= СтрокаТовара.ГруппаПечати.РежимПодтверждения;
					Если РежимПодтверждения = 1 И НЕ ИспользоватьКурсы Тогда
						РежимПодтверждения = 0;
					КонецЕсли; 
					
					// Если нет КодПодтверждения то создаем 
					Если ИспользоватьЗаказТоварыДопИнф И НЕ ЗначениеЗаполнено(СтрокаТовара.КодПодтверждения) Тогда				
						СтрокаТовара.КодПодтверждения = ПолучитьКодПодтвержденияИзСтроки(СтрокаТовара, РежимПодтверждения, ВремяСекунд); 
					КонецЕсли;
				КонецЕсли;
				
				
				// печать дозаказа
				Если СтрокаТовара.Товар.Разделитель Тогда
					ДобавитьРазделительВТаблицуПечати(ТаблицаПечати, СтрокаТовара, ГруппыПечатиРазделителя);
					ГруппыПечатиРазделителя.Очистить();
					Продолжить;
				КонецЕсли; 
				
				
				СтрокаТП = НайтиДобавитьСтрокуТаблицыПечати(ТаблицаПечати, СтрокаТовара.ГруппаПечати, СтрокаТовара.Подача.Номер, , СтрокаТовара.КодПодтверждения);
				СтрокаТП.Товар				= СтрокаТовара.Товар;
				СтрокаТП.Количество			= СтрокаТовара.Количество;
				СтрокаТП.КодПодтверждения	= СтрокаТовара.КодПодтверждения;
				
				Если ИнтерфейсРМ.ЭтоТариф(СтрокаТовара.Товар) Тогда
					СтрокаТП.Тариф			=СтрокаТовара.Тариф;
					СтрокаТП.МаксСумма		=СтрокаТовара.МаксСумма;
					СтрокаТП.МаксВремя		=СтрокаТовара.МаксВремя;
					СтрокаТП.РасчетыПоТарифу=СтрокаТовара.РасчетыПоТарифу;
				КонецЕсли;
				
				Если ГруппыПечатиРазделителя.Найти(СтрокаТовара.ГруппаПечати) = Неопределено Тогда
					ГруппыПечатиРазделителя.Добавить(СтрокаТовара.ГруппаПечати);
				КонецЕсли; 
				
			ИначеЕсли НЕ ЕстьДозаказ И СтрокаТовара.Статус = СтатусУдалено Тогда
				// печать отмены
				СтрокаТП = НайтиДобавитьСтрокуТаблицыПечати(ТаблицаПечати, СтрокаТовара.ГруппаПечати);
				СтрокаТП.Товар			= СтрокаТовара.Товар;
				СтрокаТП.Количество		= СтрокаТовара.УдаленоСейчас;
				
			КонецЕсли; 
			
			Если глВерсия>1 Тогда
				// специфики
				ДобавитьСпецификиВТаблицуПечати(СтрокаТовара, ТаблицаПечати, СтрокаТП, СтрокаТовара, РежимПодтверждения, ВремяСекунд);
			КонецЕсли;
			
		КонецЦикла;
		
		//-------------------------------------
		// процедуры формирования заданий для принтеров вынесены в обработку ПечатьЗаказа
		ОбработкаПечати = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПечатьЗаказа");
		ОбработкаПечати.Заказ = Заказ;
		// < КС_ВДВ ------------------------------------------------------------ 
		ОбработкаПечати.ВиртуальнаяПечать = Истина;
		// КС_ВДВ > ------------------------------------------------------------ 
		ОбработкаПечати.ФоновыйРежим = ФоновыйРежим;
		
		Если ЕстьДозаказ Тогда
			ГруппыПечатиОтказы	= ОбработкаПечати.ПечатьМарокДозаказ( ТаблицаПечати, СоответствиеКодПодтвержденияНомерМарки);
		Иначе
			ГруппыПечатиОтказы	= ОбработкаПечати.ПечатьМарокОтмена( ТаблицаПечати );
		КонецЕсли;
		
		Текст1 = ОбработкаПечати.Текст1;
		Текст2 = ОбработкаПечати.Текст2;
		
		//-------------------------------------
		// ставим отметки о выполнении печати и сворачиваем специфики, если нужно
		НадоСвернутьЗаказанное = НЕ глПараметрыРМ.ЗаказСпецификиПоказыватьЗаказанное И ФормаЗаказа<>Неопределено;
		Если НадоСвернутьЗаказанное Тогда
			ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа;
		КонецЕсли; 
		
		// запомним успешно распечатанные строки для печати информации по дозаказу
		СтрокиДозаказа = Новый Массив;
		
		Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
			
			Если ГруппыПечатиОтказы.Найти(СтрокаТовара.ГруппаПечати) = Неопределено Тогда
				Если СтрокаТовара.Статус = СтатусДозаказ Тогда
					
					СтрокиДозаказа.Добавить( СтрокаТовара );
					КомандаНаливайке( "Добавить", СтрокаТовара.Товар, СтрокаТовара.Количество );
					
					Если ИнтерфейсРМ.ЭтоТариф(СтрокаТовара.Товар) Тогда
						// тарификация
						Если НЕ ЗначениеЗаполнено(СтрокаТовара.РасчетыПоТарифу) Тогда
							// надо разобраться с расчетами по тарифу
							Если СтрокаТовара.МаксСумма>0 Тогда
								// ограничение по сумме
								//ОбработкаРасчетыПоТарифу.РассчитатьПоТарифуПоСумме(СтрокаТовара.Тариф, СтрокаТовара.РасчетыПоТарифу, , , СтрокаТовара.МаксСумма);
								РасчетПоСтроке(СтрокаТовара);
								СтрокаТовара.Статус = СтатусЗаказано;
								
							ИначеЕсли СтрокаТовара.МаксВремя>0 Тогда
								// ограничение по времени
								//ОбработкаРасчетыПоТарифу.РассчитатьПоТарифу(СтрокаТовара.Тариф, СтрокаТовара.РасчетыПоТарифу, , ,СтрокаТовара.МаксВремя);
								РасчетПоСтроке(СтрокаТовара);
								СтрокаТовара.Статус = СтатусЗаказано;
								
							Иначе // надо просто запустить отсчет времени
								//ОбработкаРасчетыПоТарифу.РассчитатьПоТарифу(СтрокаТовара.Тариф, СтрокаТовара.РасчетыПоТарифу);
								СтрокаТовара.Статус = СтатусТарифВкл;
								
							КонецЕсли;
							
							СтрокаТовара.ФлагИзменениеВремени = Истина;
							
						ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТовара.РасчетыПоТарифу[0].Время2) Тогда
							СтрокаТовара.Статус = СтатусТарифВкл;
						Иначе
							СтрокаТовара.Статус = СтатусЗаказано;
						КонецЕсли;
						
					Иначе
						СтрокаТовара.Статус = СтатусЗаказано;
					КонецЕсли;
					
				ИначеЕсли НЕ ЕстьДозаказ И СтрокаТовара.Статус = СтатусУдалено Тогда
					КомандаНаливайке( "Удалить", СтрокаТовара.Товар, СтрокаТовара.УдаленоСейчас );
					СтрокаТовара.Статус = СтатусЗаказано;
					СтрокаТовара.УдаленоСейчас = 0;
					
				КонецЕсли;
			КонецЕсли;
			
			ПозицияЗаказанаПолностью = СтрокаТовара.Статус=СтатусЗаказано;
			// специфики
			ПроставитьСтатусыВСпецификах(СтрокаТовара, ГруппыПечатиОтказы, ПозицияЗаказанаПолностью);
			
			// < КС_ВДВ ------------------------------------------------------------ 
			//Если НадоСвернутьЗаказанное И ПозицияЗаказанаПолностью Тогда
			//	ТабПолеТЗ.Свернуть(СтрокаТовара);
			//КонецЕсли; 
			// КС_ВДВ > ------------------------------------------------------------ 
			
		КонецЦикла;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		ЗаполнитьТаблицуЗаказаОтбор();
		
		// После заполнения все строки в ТаблицаЗаказаОтбор свёрнутые - нужно развернуть
		РазвернутьСпецифики();
		// КС_ВДВ > ------------------------------------------------------------ 
		
		// печать информации по дозаказу
		Если глПараметрыРМ.ПечатьСчетаДозаказ Тогда
			ОбработкаПечати.ПечатьИнформацииПоДозаказу(СтрокиДозаказа);
		КонецЕсли; 
		
		ОбновитьОстатокСтопЛиста(СтрокиДозаказа);
		
		Возврат ГруппыПечатиОтказы;
	КонецФункции
	
	Функция НайтиДобавитьСтрокуТаблицыПечати(ТаблицаПечати, ГруппаПечати, Подача=Неопределено, Товар=Неопределено, КодПодтверждения = Неопределено)
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//СтрокаГП = ТаблицаПечати.Строки.Найти(ГруппаПечати, "ГруппаПечати");
		
		// Марки нужно создавать не только с разбивкой по группам печати, но и с учетом курса (подачи)
		ПараметрыМарки = Новый Структура("ГруппаПечати, Подача", ГруппаПечати, Подача);
		
		МассивГП = ТаблицаПечати.Строки.НайтиСтроки(ПараметрыМарки, Ложь);
		СтрокаГП = ?(МассивГП.Количество() > 0, МассивГП[0], Неопределено);
		// КС_ВДВ > ------------------------------------------------------------ 
		Если СтрокаГП = Неопределено Тогда
			СтрокаГП = ТаблицаПечати.Строки.Добавить();
			СтрокаГП.ГруппаПечати			= ГруппаПечати;
			// < КС_ВДВ ------------------------------------------------------------ 
			СтрокаГП.Подача					= Подача;
			// КС_ВДВ > ------------------------------------------------------------ 
			СтрокаГП.КодПодтверждения		= КодПодтверждения;
		КонецЕсли; 
		
		СтрокаПодачи = СтрокаГП.Строки.Найти(Подача, "Подача");
		Если СтрокаПодачи = Неопределено Тогда
			СтрокаПодачи = СтрокаГП.Строки.Добавить();
			СтрокаПодачи.Подача				= Подача;
			СтрокаПодачи.КодПодтверждения	= КодПодтверждения;
		КонецЕсли; 
		
		Если Товар=Неопределено Тогда
			Возврат СтрокаПодачи.Строки.Добавить();
		КонецЕсли; 
		
		СтрокаТовара = СтрокаПодачи.Строки.Найти(Товар, "Товар");
		Если СтрокаТовара = Неопределено Тогда
			Возврат СтрокаПодачи.Строки.Добавить();
		Иначе
			Возврат СтрокаТовара;
		КонецЕсли; 
		
	КонецФункции
	
	Процедура ДобавитьРазделительВТаблицуПечати(ТаблицаПечати, СтрокаТовара, ГруппыПечатиРазделителя)
		
		Если ЗначениеЗаполнено(СтрокаТовара.ГруппаПечати) Тогда
			СтрокаТП = НайтиДобавитьСтрокуТаблицыПечати(ТаблицаПечати, СтрокаТовара.ГруппаПечати, СтрокаТовара.Подача.Номер, , СтрокаТовара.КодПодтверждения);
			СтрокаТП.Товар				= СтрокаТовара.Товар;
			СтрокаТП.Количество			= СтрокаТовара.Количество;
			СтрокаТП.КодПодтверждения	= СтрокаТовара.КодПодтверждения;
		Иначе
			Для каждого ГруппаПечати Из ГруппыПечатиРазделителя Цикл
				СтрокаТП = НайтиДобавитьСтрокуТаблицыПечати(ТаблицаПечати, ГруппаПечати, СтрокаТовара.Подача.Номер, , СтрокаТовара.КодПодтверждения);
				СтрокаТП.Товар				= СтрокаТовара.Товар;
				СтрокаТП.Количество			= СтрокаТовара.Количество;
				СтрокаТП.КодПодтверждения	= СтрокаТовара.КодПодтверждения;
			КонецЦикла; 
		КонецЕсли; 
		
	КонецПроцедуры
	
	Процедура ДобавитьСпецификиВТаблицуПечати(СтрокаТовара, ТаблицаПечати, СтрокаТП, СтрокаТовараИсходная, РежимПодтверждения, ВремяСекунд)
		
		Для каждого СтрокаСпецифики Из СтрокаТовара.Строки Цикл
			
			Если СтрокаСпецифики.Статус = СтатусДозаказ Тогда
				// печать дозаказа
				// если у специфики указана группа печати, то она идет в марке отдельной позицией
				Если ЗначениеЗаполнено(СтрокаСпецифики.ГруппаПечати) Тогда
					РежимПодтверждения	= СтрокаСпецифики.ГруппаПечати.РежимПодтверждения;
					Если РежимПодтверждения = 1 И НЕ ИспользоватьКурсы Тогда
						РежимПодтверждения = 0;
					КонецЕсли; 
					
					// Если отсутствует КодПодтверждения то создаем 
					Если ИспользоватьЗаказТоварыДопИнф И НЕ ЗначениеЗаполнено(СтрокаСпецифики.КодПодтверждения) Тогда
						СтрокаСпецифики.КодПодтверждения = ПолучитьКодПодтвержденияИзСтроки(СтрокаСпецифики, РежимПодтверждения, ВремяСекунд); 
						// < КС_ВДВ ------------------------------------------------------------ 
						ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаСпецифики);
						// КС_ВДВ > ------------------------------------------------------------ 
					КонецЕсли;
					
					СтрокаТПСпец = НайтиДобавитьСтрокуТаблицыПечати(ТаблицаПечати, СтрокаСпецифики.ГруппаПечати, СтрокаТовараИсходная.Подача.Номер, СтрокаСпецифики.Товар, СтрокаСпецифики.КодПодтверждения);
				Иначе
					
					// Если отсутствует КодПодтверждения то создаем 
					Если ИспользоватьЗаказТоварыДопИнф И НЕ ЗначениеЗаполнено(СтрокаСпецифики.КодПодтверждения) Тогда
						//СтрокаСпецифики.КодПодтверждения = СтрокаТовараИсходная.КодПодтверждения; 
						СтрокаСпецифики.КодПодтверждения = СтрокаСпецифики.Родитель.КодПодтверждения; 
						// < КС_ВДВ ------------------------------------------------------------ 
						ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаСпецифики);
						// КС_ВДВ > ------------------------------------------------------------ 
					КонецЕсли;
					
					СтрокаТПСпец = СтрокаТП.Строки.Найти(СтрокаСпецифики.Товар, "Товар");
					Если СтрокаТПСпец = Неопределено Тогда
						СтрокаТПСпец = СтрокаТП.Строки.Добавить();
					КонецЕсли; 
				КонецЕсли; 
				СтрокаТПСпец.Товар				= СтрокаСпецифики.Товар;
				СтрокаТПСпец.Количество			= СтрокаТПСпец.Количество + СтрокаТовараИсходная.Количество;
				СтрокаТПСпец.КодПодтверждения	= СтрокаСпецифики.КодПодтверждения;
				
			ИначеЕсли НЕ ЕстьДозаказ И СтрокаСпецифики.Статус = СтатусУдалено И ЗначениеЗаполнено(СтрокаСпецифики.ГруппаПечати) Тогда
				// отмены печатаем только для самостоятельных специфик
				СтрокаТПСпец = НайтиДобавитьСтрокуТаблицыПечати(ТаблицаПечати, СтрокаСпецифики.ГруппаПечати);
				СтрокаТПСпец.Товар				= СтрокаСпецифики.Товар;
				СтрокаТПСпец.Количество			= СтрокаСпецифики.УдаленоСейчас;
			КонецЕсли; 
			
			// вложенные специфики
			ДобавитьСпецификиВТаблицуПечати(СтрокаСпецифики, ТаблицаПечати, СтрокаТПСпец, СтрокаТовараИсходная, РежимПодтверждения, ВремяСекунд)
			
		КонецЦикла; 
		
	КонецПроцедуры
	
	Процедура ПроставитьСтатусыВСпецификах(СтрокаТовара, ГруппыПечатиОтказы, ПозицияЗаказанаПолностью)
		
		Для каждого СтрокаСпецифики Из СтрокаТовара.Строки Цикл
			
			Если СтрокаСпецифики.Статус = СтатусЗаказано Тогда
				Продолжить;
				
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаСпецифики.ГруппаПечати) Тогда
				// обычные специфики, ставим статус как у основной позиции (только без статуса удалено)
				СтрокаСпецифики.Статус			= ?(СтрокаТовара.Статус = СтатусЗаказано, СтатусЗаказано, СтатусДозаказ);
				СтрокаСпецифики.УдаленоСейчас	= СтрокаТовара.УдаленоСейчас;
				// < КС_ВДВ ------------------------------------------------------------ 
				ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаСпецифики);
				// КС_ВДВ > ------------------------------------------------------------ 
				
			ИначеЕсли ГруппыПечатиОтказы.Найти(СтрокаСпецифики.ГруппаПечати)=Неопределено Тогда
				// для самостоятельных определяем по группе печати
				СтрокаСпецифики.Статус = СтатусЗаказано;
				СтрокаСпецифики.УдаленоСейчас = 0;
				// < КС_ВДВ ------------------------------------------------------------ 
				ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаСпецифики);
				// КС_ВДВ > ------------------------------------------------------------ 
				
			КонецЕсли;
			
			ПозицияЗаказанаПолностью = ПозицияЗаказанаПолностью И СтрокаСпецифики.Статус=СтатусЗаказано;
			
			// вложенные специфики
			ПроставитьСтатусыВСпецификах(СтрокаСпецифики, ГруппыПечатиОтказы, ПозицияЗаказанаПолностью);
			
		КонецЦикла;
		
	КонецПроцедуры
	
	// Добавляет в заказ подарочные позиции, определенные при расчете скидок
	//
	Функция ДобавитьПодарки()
		
		Для каждого СтрокаСкидки Из ТаблицаСкидок Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСкидки.Подарки) Тогда
				Продолжить;
			КонецЕсли; 
			
			ПодарокНаВыбор = СтрокаСкидки.Скидка.ПодарокНаВыбор;
			ВыбТоварПодарка = Неопределено;
			
			// сначала проверим какие подарки уже были добавлены
			// для подарка на выбор нужна возможность перевыбора, поэтому удаленное количество не учитываем
			СтрокиИспользованныеПодарки = ТаблицаЗаказа.Строки.НайтиСтроки( Новый Структура("Подарок", СтрокаСкидки.Скидка) );
			
			Для каждого СтрокаЗаказаПодарок Из СтрокиИспользованныеПодарки Цикл
				ИспользованноеКолво = СтрокаЗаказаПодарок.Количество + ?(ПодарокНаВыбор, 0, СтрокаЗаказаПодарок.Удалено);
				
				Для каждого СтрокаПодарка Из СтрокаСкидки.Подарки Цикл
					Если ПодарокНаВыбор ИЛИ СтрокаЗаказаПодарок.Товар = СтрокаПодарка.Товар Тогда
						СтрокаПодарка.Количество = СтрокаПодарка.Количество - ИспользованноеКолво;
						СтрокаПодарка.Сумма		= СтрокаПодарка.Цена * СтрокаПодарка.Количество;
						Если ПодарокНаВыбор И СтрокаПодарка.Количество<=0 Тогда
							ВыбТоварПодарка = СтрокаПодарка.Товар;
						КонецЕсли; 
					КонецЕсли; 
				КонецЦикла;
				
			КонецЦикла; 
			
			// из оставшихся подарков надо либо выбрать один, либо добавить все
			Если ПодарокНаВыбор И ВыбТоварПодарка = Неопределено Тогда
				Если ФоновыйРежим Тогда
					Текст2 = НаимПосадочногоМеста(Заказ.ПосадочноеМесто) + "- сработал подарок на выбор!" + Символы.ПС + "Такой заказ можно ввести только с обычного терминала.";
					Возврат Ложь;
				КонецЕсли; 
				ВыбТоварПодарка = ИнтерфейсРМ.ВыборИзСписка(СтрокаСкидки.Подарки.ВыгрузитьКолонку("Товар"));
				Если ВыбТоварПодарка = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли; 
			КонецЕсли; 
			
			Для каждого СтрокаПодарка Из СтрокаСкидки.Подарки Цикл
				
				Если СтрокаПодарка.Количество<=0 Тогда
					Продолжить;
				ИначеЕсли ПодарокНаВыбор И СтрокаПодарка.Товар <> ВыбТоварПодарка Тогда
					Продолжить;
				КонецЕсли; 
				
				СтрокаЗаказа = ТаблицаЗаказа.Строки.Добавить();
				СтрокаЗаказа.Статус			= СтатусДозаказ;
				// < КС_ВДВ ------------------------------------------------------------ 
				СтрокаЗаказа.Станция		= глРабочееМесто.Станция;
				// КС_ВДВ > ------------------------------------------------------------ 
				СтрокаЗаказа.Автор			= глПользователь;
				СтрокаЗаказа.Товар			= СтрокаПодарка.Товар;
				СтрокаЗаказа.Наименование	= СтрокаПодарка.Товар.Наименование;
				СтрокаЗаказа.Цена			= 0;
				СтрокаЗаказа.Количество		= СтрокаПодарка.Количество;
				СтрокаЗаказа.Категория		= СтрокаПодарка.Товар.Категория;
				СтрокаЗаказа.ГруппаПечати	= СтрокаПодарка.Товар.ГруппаПечати;
				СтрокаЗаказа.Подача			= ТекущаяПодача;
				// по этому реквизиту будем отличать позиции-скидки
				СтрокаЗаказа.Подарок		= СтрокаСкидки.Скидка;
				
				Модифицирован	= Истина;
				ЕстьДозаказ		= Истина;
				
				Если НЕ ФоновыйРежим Тогда
					// о добавлении подарка надо сообщить
					ТекстСообщения = "!!! Добавлен ПОДАРОК !!!" + Символы.ПС + СтрокаЗаказа.Наименование + " х " + СтрокаЗаказа.Количество;
					ИдСообщения = Число( Строка(ТаблицаЗаказа.Строки.Индекс(СтрокаЗаказа)) + Заказ.Номер );
					
					ИнтерфейсРМ.ВывестиОповещение(ТекстСообщения, ИдСообщения);
				КонецЕсли; 
				
				// < КС_ВДВ ------------------------------------------------------------ 
				ДобавитьСтрокуЗаказаОтбор(СтрокаЗаказа);			
				// КС_ВДВ > ------------------------------------------------------------ 
				
			КонецЦикла; 
			
		КонецЦикла;
		
		ПолучитьРекомендации(Ложь);
		
		// Отобразить изменения на ИнфоДисплее
		// < КС_ВДВ ------------------------------------------------------------ 
		//ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ.Ссылка, ТаблицаЗаказа, СписокРекомендаций);	
		ВыводЗаказаНаИнфоДисплей();
		// КС_ВДВ > ------------------------------------------------------------ 
		
		Возврат Истина;
	КонецФункции
	
	// Создание документов "Удаление", фиксирующих удаление позиций заказа
	//
	Процедура СоздатьДокументыУдаления(ГруппыПечатиОтказы)
		
		ТекущаяСмена = ИнтерфейсРМ.ТекущаяСмена();
		
		н=0;
		Пока н<=ТаблицаУдалений.Строки.Количество()-1 Цикл
			
			СтрокаУдаление = ТаблицаУдалений.Строки[н];
			
			Если ГруппыПечатиОтказы.Найти(СтрокаУдаление.ГруппаПечати) <> Неопределено Тогда
				н=н+1;
				Продолжить;
			КонецЕсли;
			
			ДокУдаление = Документы.Удаление.СоздатьДокумент();
			ДокУдаление.Дата			= ТекущаяДата();
			ДокУдаление.Автор			= глПользователь;
			ДокУдаление.Смена			= ТекущаяСмена;
			ДокУдаление.Заказ			= Заказ.Ссылка;
			ДокУдаление.МестоРеализации	= Заказ.МестоРеализации;
			ДокУдаление.ПосадочноеМесто	= Заказ.ПосадочноеМесто;
			ДокУдаление.Товар			= СтрокаУдаление.Товар;
			ДокУдаление.Количество		= СтрокаУдаление.Количество;
			ДокУдаление.Сумма			= СтрокаУдаление.Сумма;
			ДокУдаление.Причина			= СтрокаУдаление.Причина;
			ДокУдаление.ТипЦен			= СтрокаУдаление.ТипЦен;
			
			Если ИспользоватьГруппыОплаты Тогда
				ГруппаОплаты = ДокУдаление.Товар.Категория.ГруппаОплаты;
				ДокУдаление.ГруппаОплаты = ?(ЗначениеЗаполнено(ГруппаОплаты), ГруппаОплаты, ОсновнаяГруппаОплаты);
			КонецЕсли; 
			
			Для каждого СтрокаУдалениеСпецифика Из СтрокаУдаление.Строки Цикл
				ДокУдаление.Специфики.Добавить().Специфика = СтрокаУдалениеСпецифика.Товар;
			КонецЦикла; 
			
			Если ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДокУдаление, "Объект.Записать()" ) Тогда
				ТаблицаУдалений.Строки.Удалить(н);
			Иначе
				н=н+1;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецПроцедуры
	
	// Печать сообщения по строке специфики
	//
	Процедура ПечатьДопСообщения(ВыбСтрокаЗаказа)
		
		ПравоНаСообщениеПроизвольное= ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.СообщениеНаКухнюПроизвольное, , , Заказ.Автор);
		ПравоНаСообщениеШаблон		= ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.СообщениеНаКухнюШаблон, , , Заказ.Автор);
		
		Если НЕ (ПравоНаСообщениеПроизвольное ИЛИ ПравоНаСообщениеШаблон) Тогда
			Текст1="Нет доступа!";
			Текст2="Нет прав на отправку дополнительных сообщений в этом заказе!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли; 
		
		Форма = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводСообщения").ПолучитьФорму();
		Форма.ЗапретРедактирования	= НЕ ПравоНаСообщениеПроизвольное;
		
		РежимСообщения = Форма.ОткрытьМодально();
		
		Если РежимСообщения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаПечати = Новый ДеревоЗначений;
		ТаблицаПечати.Колонки.Добавить("ГруппаПечати");
		ТаблицаПечати.Колонки.Добавить("Подача");
		ТаблицаПечати.Колонки.Добавить("Товар");
		ТаблицаПечати.Колонки.Добавить("Количество",	ТипКолво);
		ТаблицаПечати.Колонки.Добавить("КодПодтверждения");
		
		Пока ВыбСтрокаЗаказа.Уровень() > 0 Цикл
			ВыбСтрокаЗаказа = ВыбСтрокаЗаказа.Родитель;
		КонецЦикла;
		
		Если РежимСообщения = "Подача" Тогда
			Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
				Если СтрокаТовара.Подача = ВыбСтрокаЗаказа.Подача И НЕ СтрокаТовара.Товар.Разделитель Тогда
					СтрокаТП = НайтиДобавитьСтрокуТаблицыПечати(ТаблицаПечати, СтрокаТовара.ГруппаПечати, СтрокаТовара.Подача.Номер);
					СтрокаТП.Товар			= СтрокаТовара.Товар;
					СтрокаТП.Количество		= СтрокаТовара.Количество;
				КонецЕсли; 
			КонецЦикла;
		Иначе
			СтрокаТП = НайтиДобавитьСтрокуТаблицыПечати(ТаблицаПечати, ВыбСтрокаЗаказа.ГруппаПечати, ВыбСтрокаЗаказа.Подача.Номер);
			СтрокаТП.Товар			= ВыбСтрокаЗаказа.Товар;
			СтрокаТП.Количество		= ВыбСтрокаЗаказа.Количество;
		КонецЕсли;
		
		глОжидание.Начало("Выполняется печать...",
		"Идет печать заданий на сервис-принтерах.
		|Пожалуйста, подождите...");
		
		// процедуры формирования заданий для принтеров вынесены в обработку ПечатьЗаказа
		ОбработкаПечати = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПечатьЗаказа");
		ОбработкаПечати.Заказ = Заказ;
		// < КС_ВДВ ------------------------------------------------------------ 
		ОбработкаПечати.ВиртуальнаяПечать = Истина;
		// КС_ВДВ > ------------------------------------------------------------ 
		ОбработкаПечати.ПечатьДопСообщения(ТаблицаПечати, Форма.ТекстСообщения);
		
		глОжидание.Конец();
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ЛОЯЛЬНОСТЬ
	
	Процедура ПрименитьЛояльность(Заказ, ЕстьДеньРожденияВЗаказе)
		
		СтруктураАСКов = Неопределено;
		ДеньРождения_Лимит = Константы.Лояльность_ДеньРождения_Лимит.Получить();
		ДеньРождения_Товар = Константы.Лояльность_ДеньРождения.Получить();
				
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Заказ.Ссылка);
		
		//////////////////////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА АКЦИИ ДЕНЬ РОЖДЕНИЕ
		
		СтрДеньРождения = "";
		ДеньРожденияВТечениеМесяца = ложь;
		Если ЕстьДеньРожденияВЗаказе = -1 тогда
			ДеньРождения = ложь;
			Если ДанныеЛояльностиПоЗаказу<>Неопределено И ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения) тогда
				ДатаРожденияВЭтомГоду = Дата(Формат(Заказ.Дата,"ДФ=гггг")+Формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДФ=ММдд"));
				Если ДатаРожденияВЭтомГоду >= НачалоДня(Заказ.Дата-86400*6) и ДатаРожденияВЭтомГоду <= КонецДня(Заказ.Дата) тогда
					//день рождения
					ДеньРождения = истина;
				иначеЕсли ДатаРожденияВЭтомГоду < ДобавитьМесяц(Заказ.Дата,1) и ДатаРожденияВЭтомГоду > Заказ.Дата тогда
					ДеньРожденияВТечениеМесяца = истина;
				КонецЕсли;
			КонецЕсли;
		иначе
			ДеньРождения = истина;
		КонецЕсли;
			
		Если ДеньРождения тогда //если определили факт дня рождения, проверим заказы за последний год !?
			
			УжеНачисленоЗаДеньРождения = ложь;
			
			Если Заказ.ИтоговаяСумма >= ДеньРождения_Лимит тогда  //проверим условие на сумму заказа
				УсловиеНаРазмерСуммыЗаказа = истина;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаказТовары.Ссылка,
				|	ЗаказТовары.Количество,
				|	ЗаказТовары.Ссылка.НомерКартыЛояльности,
				|	ЗаказДопИнф.Статус
				|ИЗ
				|	Документ.Заказ.Товары КАК ЗаказТовары
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
				|		ПО ЗаказТовары.Ссылка = ЗаказДопИнф.Заказ
				|ГДЕ
				|	ЗаказДопИнф.Статус = &Статус
				|	И ЗаказТовары.Ссылка.Дата > &Дата1
				|	И ЗаказТовары.Ссылка.Ссылка <> &ТекущийЗаказ
				|	И ЗаказТовары.Товар = &ТоварПОДАРОК
				|	И ЗаказТовары.Количество > 0
				|	И ЗаказТовары.Ссылка.НомерКартыЛояльности = &НомерКарты";
				
				Запрос.УстановитьПараметр("Дата1", ДобавитьМесяц(Заказ.Дата,-11));
				Запрос.УстановитьПараметр("НомерКарты", Заказ.НомерКартыЛояльности);
				Запрос.УстановитьПараметр("ТоварПодарок", ДеньРождения_Товар);
				Запрос.УстановитьПараметр("ТекущийЗаказ", Заказ.ссылка);
				Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыЗаказа.Закрыт);
				
				Если Не Запрос.Выполнить().Пустой() тогда
					//если по текущей карте были заказы с начислением за день рождения
					УжеНачисленоЗаДеньРождения = истина;
					Если ЕстьДеньРожденияВЗаказе > -1 тогда
						////если в заказ уже добавлен товар за день рождения, найдем и удалим его
						//пСтрока = Заказ.Товары.Получить(ЕстьДеньРожденияВЗаказе);
						//пСтрока.Количество = 0;
						//пСтрока.КоличествоУдалено = 1;
						
						ИнтерфейсРМ.ВопросПредупреждение("Предупреждение","Уже были начисления за День Рождения",
						"    По текущей карте есть проведенные заказы,"+Символы.ПС+
						"    в которых были начисления КеГЛей за День Рождения."+Символы.ПС+
						"    Бонус за День Рождения необходимо удалить из заказа.","ОК","","",,,,10);
						возврат;
					КонецЕсли;
				КонецЕсли;
			иначе
				УсловиеНаРазмерСуммыЗаказа = ложь;
			конецЕсли;
			
			Если УсловиеНаРазмерСуммыЗаказа и Не УжеНачисленоЗаДеньРождения тогда
				Если ЕстьДеньРожденияВЗаказе = -1 тогда
					// Определили что надо поздравить человека с днем рождения, но про это еще никто не знает
					Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос","День Рождения ?",
					"    Здравствуйте, "+ДанныеЛояльностиПоЗаказу.ФИО + Символы.ПС + 
					"________________________________________________________________________"+ Символы.ПС +
					"    С Днем Рождения - " + ?(ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения),формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДЛФ=ДД"),"(нет данных)")+Символы.ПС + 
					"   В Ваш день рождения ресторан Кухня Полли дарит Вам подарок - 500КеГЛей!"+Символы.ПС+
					"________________________________________________________________________","ДА","","НЕТ",,,,10);
					
					Если Ответ = "ДА" тогда
						СтрокаЗаказа = ТаблицаЗаказа.Строки.Добавить();
						СтрокаЗаказа.Статус			= СтатусЗаказано;
						СтрокаЗаказа.Станция		= глРабочееМесто.Станция;
						СтрокаЗаказа.Автор			= глПользователь;
						СтрокаЗаказа.Товар			= ДеньРождения_Товар;
						СтрокаЗаказа.Наименование	= СтрокаЗаказа.Товар.Наименование;
						СтрокаЗаказа.ТипЦен			= ТипЦен;
						СтрокаЗаказа.Количество		= 1;
						СтрокаЗаказа.Категория		= СтрокаЗаказа.Товар.Категория;
						СтрокаЗаказа.ГруппаПечати	= СтрокаЗаказа.Товар.ГруппаПечати;
						СтрокаЗаказа.Подача			= ТекущаяПодача;
						ЗаполнитьТаблицуЗаказаОтбор();
						
						Модифицирован = истина;
						//ОбновитьСтрокиТоваровТаблицыЗаказаОтбор();
						ЗаписатьЗаказ();
						Возврат;
					КонецЕсли;
					УсловиеНаРазмерСуммыЗаказа = ложь; //отказались от дня рождения :)
				КонецЕсли;
				
			КонецЕсли;
			
			СтрДеньРождения = 
			"________________________________________________________________________"+ Символы.ПС +
			"День Рождения - " + ?(ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения),формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДЛФ=ДД"),"(нет данных)")+"!"+Символы.ПС;
			Если УсловиеНаРазмерСуммыЗаказа и не УжеНачисленоЗаДеньРождения тогда
				СтрДеньРождения = СтрДеньРождения + "В Ваш день рождения ресторан Кухня Полли дарит Вам подарок - 500 КеГЛей!"+Символы.ПС;
			ИначеЕсли УжеНачисленоЗаДеньРождения тогда
				СтрДеньРождения = СтрДеньРождения + "Подарок 500 КеГЛей уже БЫЛ НАЧИСЛЕН РАНЕЕ."+Символы.ПС;
			иначеЕсли не УсловиеНаРазмерСуммыЗаказа тогда
				СтрДеньРождения = СтрДеньРождения + 
				//" Отпразднуйте свой День рождения с рестораном Кухня Полли!"+Символы.ПС+
				" При заказе от 800 рублей в Ваш день рождения или в течение 6 дней после"+Символы.ПС+
				" ресторан Кухня Полли дарит Вам подарок – 500 КеГЛей! "+Символы.ПС;
			КонецЕсли;
			
			СтрДеньРождения = СтрДеньРождения +"________________________________________________________________________"+ Символы.ПС;
		ИначеЕсли ДеньРожденияВТечениеМесяца тогда
			СтрДеньРождения = 
			"________________________________________________________________________"+ Символы.ПС +
			"День Рождения - " + ?(ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения),формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДЛФ=ДД"),"(нет данных)")+"!"+Символы.ПС+
			" Отпразднуйте свой День рождения с рестораном Кухня Полли!"+Символы.ПС+
			" При заказе от 800 рублей в Ваш день рождения или в течение 6 дней после"+Символы.ПС+
			" ресторан Кухня Полли дарит Вам подарок – 500 КеГЛей! "+Символы.ПС +
			"________________________________________________________________________"+ Символы.ПС;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////////////////
		// ОТПРАВКА ЗАПРОСА СЕРВИСУ ЛОЯЛЬНОСТИ
				
		// Формирование запроса сервису Лояльности
		ОшибкаЛояльности = Ложь;
		ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONПоЗаказу_КП_Протокол3("PRESALE", Заказ, Заказ.ТипЧекаЛояльность, ДанныеЛояльностиПоЗаказу, СтруктураАСКов);
		Если ПараметрыЗапроса.Ошибка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
			//ОбработкаОшибокЛОЛ(ЗаказОбъект, 1, "Нет связи с принтером кассы");
			
			ОшибкаЛояльности = Истина;						
		КонецЕсли;
		
		// Отправка запроса сервису Лояльности
		Если НЕ ОшибкаЛояльности Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "отправка запроса (Режим=центр,текст="+ПараметрыЗапроса.ТекстЗапроса+")");
			Если ЗначениеЗаполнено(Заказ.РабочееМесто) Тогда
				Тест = Заказ.РабочееМесто.Тест;
			Иначе
				Тест = Истина;
			КонецЕсли;
			ОтветСервера = Лояльность.ОтправитьЧекНаОбработку_Протокол3(ПараметрыЗапроса.ТекстЗапроса, 0, Тест);
				
			Если ОтветСервера.Ошибка Тогда
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "Извините нет связи");
				ОписаниеОшибки = "";
				Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
					ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации("Лояльность.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, ОписаниеОшибки);
				
				ОшибкаЛояльности = Истина;				
			КонецЕсли;
		КонецЕсли;
		
		// Разбор ответа сервиса Лояльности
		Если НЕ ОшибкаЛояльности Тогда
			Попытка
				ОтветЛояльности = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
			Исключение
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "Ошибка разбора ответа сервиса");
				ОшибкаЛояльности = Истина;
			КонецПопытки;
		КонецЕсли;
		
		// Проверка критических ошибок сервиса лояльности
		Если НЕ ОшибкаЛояльности Тогда
			Если ОтветЛояльности.err = -1 Тогда			
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "Ошибка сервиса лояльности");
				ОшибкаЛояльности = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОшибкаЛояльности Тогда
			
			Текст1 = "КеГеЛьБУМ";
			Текст2 = "Ошибка сервера лояльности. КеГЛи будут начислены"+Символы.ПС+"автоматически позднее с учетом действующих акций";
			Кнопка1 = "Начислить позже";
			Кнопка2 = "";
			Кнопка3 = "Вернуться в чек";
			
			Текст2 = Текст2 + Символы.ПС + 
			СтрДеньРождения +
			//"________________________________________________________________________"+ Символы.ПС +
			//ОтветЛояльности.Информация + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			"Сумма Вашего заказа – "+Заказ.ИтоговаяСумма+" рублей" + Символы.ПС + 
			//"________________________________________________________________________"+ Символы.ПС +
			//"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.Начислено1 + " КеГЛей"  + 
			Символы.ПС; 
			Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ ПОЗЖЕ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
			
			Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
				// Это спул
				Заказ.ОбработанСистемойЛояльности = -1;
				ЗаписьЖурналаРегистрации("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "Выбрана оплата без лояльности");
			иначе
				//не обработали, но хотим еще раз попробовать
				Заказ.ОбработанСистемойЛояльности = 0;
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ОтветЛояльности.err>0 тогда
			
			Ответ = ОбработкаОшибокСервисаЛояльности(Заказ, ОтветЛояльности.err, ОтветЛояльности.err_msg);
			
			Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
				// Это спул
				Заказ.ОбработанСистемойЛояльности = -1;
				ЗаписьЖурналаРегистрации("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "Выбрана оплата без лояльности");
			иначе
				//не обработали, но хотим еще раз попробовать
				Заказ.ОбработанСистемойЛояльности = 0;
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ОтветЛояльности.order.card_number="" тогда	
			
			Ответ = "НАЧИСЛИТЬ";
			
		ИначеЕсли ОтветЛояльности.order.card_status=1 тогда
			
			Текст1 = "списания запрещены";
			
			Текст2 = "Здравствуйте, "+ДанныеЛояльностиПоЗаказу.ФИО + Символы.ПС + 
			СтрДеньРождения +
			"ВОЗМОЖНО ТОЛЬКО НАЧИСЛЕНИЕ !!!" + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			"Сумма Вашего заказа – "+Заказ.ИтоговаяСумма+" рублей" + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.order.n_kgl_add + " КеГЛей"  + Символы.ПС; 
			
			Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
		
		Иначе			

			Если ОтветЛояльности.order.s_kgl_rem=0 тогда // нет возможности списать
				МожноСписывать = ложь;
				Текст1 = "Начисляем КеГЛи";
			Иначе
				МожноСписывать = истина;
				Текст1 = "Начислить или списать КеГЛи?";
			КонецЕсли;			
			
			Текст2 = "Здравствуйте, "+ДанныеЛояльностиПоЗаказу.ФИО + Символы.ПС + 
			СтрДеньРождения +
			//"           "+
			ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
			"Баланс Вашей карты "+ДанныеЛояльностиПоЗаказу.Баланс + " КеГЛей" + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			"В случае НАЧИСЛЕНИЯ:" + Символы.ПС + 
			"    Сумма Вашего заказа – "+ОтветЛояльности.order.n_sum+" рублей                   " + Символы.ПС + 
			"    Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.order.n_kgl_add + " КеГЛей"  + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			"В случае СПИСАНИЯ:" + Символы.ПС;
			Если МожноСписывать тогда 
				Текст2 = Текст2 +
				"    Сумма КеГЛей, которая будет списана – " + ОтветЛояльности.order.s_kgl_rem + " КеГЛей"  + Символы.ПС +
				"    Доплата за часть заказа, на которую не хватило КеГЛей – " + ОтветЛояльности.order.s_sum + " руб.," + Символы.ПС +
				"    Сумма КеГЛей, которая будет доначислена – " + ОтветЛояльности.order.s_kgl_add + " КеГЛей" + Символы.ПС;
			иначе
				Текст2 = Текст2 + 
				"    Недостаточно КеГЛей на карте для списания."
			КонецЕсли;
			ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ",?(можноСписывать,"СПИСАТЬ",""),"ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
		КонецЕсли;
		
		Если ответ = "ВОЗВРАТ" тогда
			возврат;
		КонецЕсли;
		
		Если ответ= "СПИСАТЬ" ИЛИ ответ= "НАЧИСЛИТЬ" Тогда
			Если ответ= "СПИСАТЬ" Тогда
				Заказ.ТипЧекаЛояльность = 2;
				Заказ.ПодвалЧека = ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.print_s);
				СтрокиЗаказа = ОтветЛояльности.order.order_str_s;
			иначе
				Заказ.ТипЧекаЛояльность = 1;
				Заказ.ПодвалЧека = ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.print_n);
				СтрокиЗаказа = ОтветЛояльности.order.order_str_n;
			КонецЕсли;
			
			Для каждого ТекущаяСтрока Из СтрокиЗаказа Цикл
				Если ТекущаяСтрока.str_type <> "T" Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаЗаказа = Заказ.Товары.Найти(ТекущаяСтрока.str_no, "ИДСтроки");
				Если СтрокаЗаказа <> Неопределено Тогда
					
					СтрокаЗаказа.ЦенаРеализации = ТекущаяСтрока.price_fact;
					СтрокаЗаказа.СуммаРеализации= ТекущаяСтрока.strsum_fact;
					
				Иначе
					
					ЗаписьЖурналаРегистрации("Лояльность.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, "Некорректный ответ лояльности");
					
					Текст1 = "КеГеЛьБУМ";
					Текст2 = "Ошибка сервера лояльности. КеГЛи будут начислены"+Символы.ПС+"автоматически позднее с учетом действующих акций";
										
					Текст2 = Текст2 + Символы.ПС + 
					СтрДеньРождения +
					"________________________________________________________________________"+ Символы.ПС +
					ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
					"________________________________________________________________________"+ Символы.ПС +
					"Сумма Вашего заказа – "+Заказ.ИтоговаяСумма+" рублей" + Символы.ПС + 
					//"________________________________________________________________________"+ Символы.ПС +
					//"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.Начислено1 + " КеГЛей"  + 
					Символы.ПС; 
					Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ ПОЗЖЕ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
					
					//Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос","Повторить запрос ?",
					//"не удалось обработать ответ от системы лояльности."+Символы.ПС+
					//"ДА - повторить запрос"+Символы.ПС+
					//"НЕТ - закрыть чек без лояльности"+Символы.ПС+
					//"Для начисления КеГЛей по текущему чеку"+Символы.ПС+
					//"обратитесь в службу поддержки КеГеЛьБУМ","ДА","НЕТ","",ГоризонтальноеПоложение.Лево);
					Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
						// Это спул
						Заказ.ОбработанСистемойЛояльности = -1;
						ЗаписьЖурналаРегистрации("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "Выбрана оплата без лояльности");
					иначе
						//не обработали, но хотим еще раз попробовать
						Заказ.ОбработанСистемойЛояльности = 0;
					КонецЕсли;
					
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого ТекущаяСтрока Из СтрокиЗаказа Цикл
				Если ТекущаяСтрока.str_type <> "S" Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаЗаказа = Заказ.Товары.Найти(ТекущаяСтрока.str_t_no, "ИДСтроки");
				СтрокаСпецифики = Заказ.Специфики.Найти(ТекущаяСтрока.str_no, "ИДСтроки");
				Если СтрокаЗаказа <> Неопределено И СтрокаСпецифики <> Неопределено Тогда					
					
					СтрокаЗаказа.СуммаРеализации = СтрокаЗаказа.СуммаРеализации + ТекущаяСтрока.strsum_fact;
					
					СтрокаСпецифики.ЦенаРеализации = ТекущаяСтрока.price_fact;
					
				Иначе
					
					ЗаписьЖурналаРегистрации("Лояльность.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, "Некорректный ответ лояльности");
					
					Текст1 = "КеГеЛьБУМ";
					Текст2 = "Ошибка сервера лояльности. КеГЛи будут начислены"+Символы.ПС+"автоматически позднее с учетом действующих акций";
										
					Текст2 = Текст2 + Символы.ПС + 
					СтрДеньРождения +
					"________________________________________________________________________"+ Символы.ПС +
					ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
					"________________________________________________________________________"+ Символы.ПС +
					"Сумма Вашего заказа – "+Заказ.ИтоговаяСумма+" рублей" + Символы.ПС + 
					//"________________________________________________________________________"+ Символы.ПС +
					//"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.Начислено1 + " КеГЛей"  + 
					Символы.ПС; 
					Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ ПОЗЖЕ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
					
					//Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос","Повторить запрос ?",
					//"не удалось обработать ответ от системы лояльности."+Символы.ПС+
					//"ДА - повторить запрос"+Символы.ПС+
					//"НЕТ - закрыть чек без лояльности"+Символы.ПС+
					//"Для начисления КеГЛей по текущему чеку"+Символы.ПС+
					//"обратитесь в службу поддержки КеГеЛьБУМ","ДА","НЕТ","",ГоризонтальноеПоложение.Лево);
					Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
						// Это спул
						Заказ.ОбработанСистемойЛояльности = -1;
						ЗаписьЖурналаРегистрации("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "Выбрана оплата без лояльности");
					иначе
						//не обработали, но хотим еще раз попробовать
						Заказ.ОбработанСистемойЛояльности = 0;
					КонецЕсли;
					
					Возврат;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ответ= "СПИСАТЬ" Тогда
				Заказ.ИтоговаяСумма = ОтветЛояльности.order.s_sum;
			иначе
				Заказ.ИтоговаяСумма = ОтветЛояльности.order.n_sum;
			КонецЕсли;
			
		КонецЕсли;
		Заказ.ОбработанСистемойЛояльности = 1;

	КонецПроцедуры
	
	Процедура ПрименитьЛояльность_СТАРАЯВЕРСИЯ(Заказ, ЕстьДеньРожденияВЗаказе)
		
		СтруктураАСКов = Неопределено;
		ДеньРождения_Лимит = Константы.Лояльность_ДеньРождения_Лимит.Получить();
		ДеньРождения_Товар = Константы.Лояльность_ДеньРождения.Получить();
				
		ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Заказ.Ссылка);
		
		//////////////////////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА АКЦИИ ДЕНЬ РОЖДЕНИЕ
		
		СтрДеньРождения = "";
		ДеньРожденияВТечениеМесяца = ложь;
		Если ЕстьДеньРожденияВЗаказе = -1 тогда
			ДеньРождения = ложь;
			Если ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения) тогда
				ДатаРожденияВЭтомГоду = Дата(Формат(Заказ.Дата,"ДФ=гггг")+Формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДФ=ММдд"));
				Если ДатаРожденияВЭтомГоду >= НачалоДня(Заказ.Дата-86400*6) и ДатаРожденияВЭтомГоду <= КонецДня(Заказ.Дата) тогда
					//день рождения
					ДеньРождения = истина;
				иначеЕсли ДатаРожденияВЭтомГоду < ДобавитьМесяц(Заказ.Дата,1) и ДатаРожденияВЭтомГоду > Заказ.Дата тогда
					ДеньРожденияВТечениеМесяца = истина;
				КонецЕсли;
			КонецЕсли;
		иначе
			ДеньРождения = истина;
		КонецЕсли;
			
		Если ДеньРождения тогда //если определили факт дня рождения, проверим заказы за последний год !?
			
			УжеНачисленоЗаДеньРождения = ложь;
			
			Если Заказ.ИтоговаяСумма >= ДеньРождения_Лимит тогда  //проверим условие на сумму заказа
				УсловиеНаРазмерСуммыЗаказа = истина;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	ЗаказТовары.Ссылка,
				|	ЗаказТовары.Количество,
				|	ЗаказТовары.Ссылка.НомерКартыЛояльности,
				|	ЗаказДопИнф.Статус
				|ИЗ
				|	Документ.Заказ.Товары КАК ЗаказТовары
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
				|		ПО ЗаказТовары.Ссылка = ЗаказДопИнф.Заказ
				|ГДЕ
				|	ЗаказДопИнф.Статус = &Статус
				|	И ЗаказТовары.Ссылка.Дата > &Дата1
				|	И ЗаказТовары.Ссылка.Ссылка <> &ТекущийЗаказ
				|	И ЗаказТовары.Товар = &ТоварПОДАРОК
				|	И ЗаказТовары.Количество > 0
				|	И ЗаказТовары.Ссылка.НомерКартыЛояльности = &НомерКарты";
				
				Запрос.УстановитьПараметр("Дата1", ДобавитьМесяц(Заказ.Дата,-11));
				Запрос.УстановитьПараметр("НомерКарты", Заказ.НомерКартыЛояльности);
				Запрос.УстановитьПараметр("ТоварПодарок", ДеньРождения_Товар);
				Запрос.УстановитьПараметр("ТекущийЗаказ", Заказ.ссылка);
				Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыЗаказа.Закрыт);
				
				Если Не Запрос.Выполнить().Пустой() тогда
					//если по текущей карте были заказы с начислением за день рождения
					УжеНачисленоЗаДеньРождения = истина;
					Если ЕстьДеньРожденияВЗаказе > -1 тогда
						////если в заказ уже добавлен товар за день рождения, найдем и удалим его
						//пСтрока = Заказ.Товары.Получить(ЕстьДеньРожденияВЗаказе);
						//пСтрока.Количество = 0;
						//пСтрока.КоличествоУдалено = 1;
						
						ИнтерфейсРМ.ВопросПредупреждение("Предупреждение","Уже были начисления за День Рождения",
						"    По текущей карте есть проведенные заказы,"+Символы.ПС+
						"    в которых были начисления КеГЛей за День Рождения."+Символы.ПС+
						"    Бонус за День Рождения необходимо удалить из заказа.","ОК","","",,,,10);
						возврат;
					КонецЕсли;
				КонецЕсли;
			иначе
				УсловиеНаРазмерСуммыЗаказа = ложь;
			конецЕсли;
			
			Если УсловиеНаРазмерСуммыЗаказа и Не УжеНачисленоЗаДеньРождения тогда
				Если ЕстьДеньРожденияВЗаказе = -1 тогда
					// Определили что надо поздравить человека с днем рождения, но про это еще никто не знает
					Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос","День Рождения ?",
					"    Здравствуйте, "+ДанныеЛояльностиПоЗаказу.ФИО + Символы.ПС + 
					"________________________________________________________________________"+ Символы.ПС +
					"    С Днем Рождения - " + ?(ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения),формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДЛФ=ДД"),"(нет данных)")+Символы.ПС + 
					"   В Ваш день рождения ресторан Кухня Полли дарит Вам подарок - 500КеГЛей!"+Символы.ПС+
					"________________________________________________________________________","ДА","","НЕТ",,,,10);
					
					Если Ответ = "ДА" тогда
						СтрокаЗаказа = ТаблицаЗаказа.Строки.Добавить();
						СтрокаЗаказа.Статус			= СтатусЗаказано;
						СтрокаЗаказа.Станция		= глРабочееМесто.Станция;
						СтрокаЗаказа.Автор			= глПользователь;
						СтрокаЗаказа.Товар			= ДеньРождения_Товар;
						СтрокаЗаказа.Наименование	= СтрокаЗаказа.Товар.Наименование;
						СтрокаЗаказа.ТипЦен			= ТипЦен;
						СтрокаЗаказа.Количество		= 1;
						СтрокаЗаказа.Категория		= СтрокаЗаказа.Товар.Категория;
						СтрокаЗаказа.ГруппаПечати	= СтрокаЗаказа.Товар.ГруппаПечати;
						СтрокаЗаказа.Подача			= ТекущаяПодача;
						ЗаполнитьТаблицуЗаказаОтбор();
						
						Модифицирован = истина;
						//ОбновитьСтрокиТоваровТаблицыЗаказаОтбор();
						ЗаписатьЗаказ();
						Возврат;
					КонецЕсли;
					УсловиеНаРазмерСуммыЗаказа = ложь; //отказались от дня рождения :)
				КонецЕсли;
				
			КонецЕсли;
			
			СтрДеньРождения = 
			"________________________________________________________________________"+ Символы.ПС +
			"День Рождения - " + ?(ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения),формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДЛФ=ДД"),"(нет данных)")+"!"+Символы.ПС;
			Если УсловиеНаРазмерСуммыЗаказа и не УжеНачисленоЗаДеньРождения тогда
				СтрДеньРождения = СтрДеньРождения + "В Ваш день рождения ресторан Кухня Полли дарит Вам подарок - 500 КеГЛей!"+Символы.ПС;
			ИначеЕсли УжеНачисленоЗаДеньРождения тогда
				СтрДеньРождения = СтрДеньРождения + "Подарок 500 КеГЛей уже БЫЛ НАЧИСЛЕН РАНЕЕ."+Символы.ПС;
			иначеЕсли не УсловиеНаРазмерСуммыЗаказа тогда
				СтрДеньРождения = СтрДеньРождения + 
				//" Отпразднуйте свой День рождения с рестораном Кухня Полли!"+Символы.ПС+
				" При заказе от 800 рублей в Ваш день рождения или в течение 6 дней после"+Символы.ПС+
				" ресторан Кухня Полли дарит Вам подарок – 500 КеГЛей! "+Символы.ПС;
			КонецЕсли;
			
			СтрДеньРождения = СтрДеньРождения +"________________________________________________________________________"+ Символы.ПС;
		ИначеЕсли ДеньРожденияВТечениеМесяца тогда
			СтрДеньРождения = 
			"________________________________________________________________________"+ Символы.ПС +
			"День Рождения - " + ?(ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ДатаРождения),формат(ДанныеЛояльностиПоЗаказу.ДатаРождения,"ДЛФ=ДД"),"(нет данных)")+"!"+Символы.ПС+
			" Отпразднуйте свой День рождения с рестораном Кухня Полли!"+Символы.ПС+
			" При заказе от 800 рублей в Ваш день рождения или в течение 6 дней после"+Символы.ПС+
			" ресторан Кухня Полли дарит Вам подарок – 500 КеГЛей! "+Символы.ПС +
			"________________________________________________________________________"+ Символы.ПС;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////////////////
		// ОТПРАВКА ЗАПРОСА СЕРВИСУ ЛОЯЛЬНОСТИ
				
		// Формирование запроса сервису Лояльности
		ОшибкаЛояльности = Ложь;
		ПараметрыЗапроса = ЛояльностьКлиентСервер.СформироватьJSONПоЗаказу_КП_Протокол3("PRESALE", Заказ, Заказ.ТипЧекаЛояльность,, СтруктураАСКов);
		Если ПараметрыЗапроса.Ошибка Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "ошибка формирования JSON("+ПараметрыЗапроса.ТекстОшибки+")");
			//ОбработкаОшибокЛОЛ(ЗаказОбъект, 1, "Нет связи с принтером кассы");
			
			ОшибкаЛояльности = Истина;						
		КонецЕсли;
		
		// Отправка запроса сервису Лояльности
		Если НЕ ОшибкаЛояльности Тогда
			ЛояльностьКлиентСервер.Логирование(1, "расчет", "отправка запроса (Режим=центр,текст="+ПараметрыЗапроса.ТекстЗапроса+")");
			Если ЗначениеЗаполнено(Заказ.РабочееМесто) Тогда
				Тест = Заказ.РабочееМесто.Тест;
			Иначе
				Тест = Истина;
			КонецЕсли;
			ОтветСервера = Лояльность.ОтправитьЧекНаОбработку_Протокол3(ПараметрыЗапроса.ТекстЗапроса, 0, Тест);
				
			Если ОтветСервера.Ошибка Тогда
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "Извините нет связи");
				ОписаниеОшибки = "";
				Если ТипЗнч(ОтветСервера) = Тип("Структура") Тогда
					ОтветСервера.Свойство("Ответ", ОписаниеОшибки);
				КонецЕсли;
				
				ЗаписьЖурналаРегистрации("Лояльность.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, ОписаниеОшибки);
				
				ОшибкаЛояльности = Истина;				
			КонецЕсли;
		КонецЕсли;
		
		// Разбор ответа сервиса Лояльности
		Если НЕ ОшибкаЛояльности Тогда
			Попытка
				ОтветЛояльности = ЛояльностьКлиентСервер.РазборJSON(ОтветСервера.Ответ);
			Исключение
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "Ошибка разбора ответа сервиса");
				ОшибкаЛояльности = Истина;
			КонецПопытки;
		КонецЕсли;
		
		// Проверка критических ошибок сервиса лояльности
		Если НЕ ОшибкаЛояльности Тогда
			Если ОтветЛояльности.err = -1 Тогда			
				ЛояльностьКлиентСервер.Логирование(1, "расчет", "Ошибка сервиса лояльности");
				ОшибкаЛояльности = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ОшибкаЛояльности Тогда
			
			Текст1 = "КеГеЛьБУМ";
			Текст2 = "Ошибка сервера лояльности. КеГЛи будут начислены"+Символы.ПС+"автоматически позднее с учетом действующих акций";
			Кнопка1 = "Начислить позже";
			Кнопка2 = "";
			Кнопка3 = "Вернуться в чек";
			
			Текст2 = Текст2 + Символы.ПС + 
			СтрДеньРождения +
			//"________________________________________________________________________"+ Символы.ПС +
			//ОтветЛояльности.Информация + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			"Сумма Вашего заказа – "+Заказ.ИтоговаяСумма+" рублей" + Символы.ПС + 
			//"________________________________________________________________________"+ Символы.ПС +
			//"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.Начислено1 + " КеГЛей"  + 
			Символы.ПС; 
			Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ ПОЗЖЕ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
			
			Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
				// Это спул
				Заказ.ОбработанСистемойЛояльности = -1;
				ЗаписьЖурналаРегистрации("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "Выбрана оплата без лояльности");
			иначе
				//не обработали, но хотим еще раз попробовать
				Заказ.ОбработанСистемойЛояльности = 0;
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ОтветЛояльности.err>0 тогда
			
			Ответ = ОбработкаОшибокСервисаЛояльности(Заказ, ОтветЛояльности.err, ОтветЛояльности.err_msg);
			
			Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
				// Это спул
				Заказ.ОбработанСистемойЛояльности = -1;
				ЗаписьЖурналаРегистрации("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "Выбрана оплата без лояльности");
			иначе
				//не обработали, но хотим еще раз попробовать
				Заказ.ОбработанСистемойЛояльности = 0;
			КонецЕсли;
			
			Возврат;
			
		ИначеЕсли ОтветЛояльности.order.card_status=1 тогда
			
			Текст1 = "списания запрещены";
			
			Текст2 = "Здравствуйте, "+ДанныеЛояльностиПоЗаказу.ФИО + Символы.ПС + 
			СтрДеньРождения +
			"ВОЗМОЖНО ТОЛЬКО НАЧИСЛЕНИЕ !!!" + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			"Сумма Вашего заказа – "+Заказ.ИтоговаяСумма+" рублей" + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.order.n_kgl_add + " КеГЛей"  + Символы.ПС; 
			
			Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
		
		Иначе			

			Если ОтветЛояльности.order.s_kgl_rem=0 тогда // нет возможности списать
				МожноСписывать = ложь;
				Текст1 = "Начисляем КеГЛи";
			Иначе
				МожноСписывать = истина;
				Текст1 = "Начислить или списать КеГЛи?";
			КонецЕсли;			
			
			Текст2 = "Здравствуйте, "+ДанныеЛояльностиПоЗаказу.ФИО + Символы.ПС + 
			СтрДеньРождения +
			//"           "+
			ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			"В случае НАЧИСЛЕНИЯ:" + Символы.ПС + 
			"    Сумма Вашего заказа – "+ОтветЛояльности.order.n_sum+" рублей                   " + Символы.ПС + 
			"    Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.order.n_kgl_add + " КеГЛей"  + Символы.ПС + 
			"________________________________________________________________________"+ Символы.ПС +
			"В случае СПИСАНИЯ:" + Символы.ПС;
			Если МожноСписывать тогда 
				Текст2 = Текст2 +
				"    Сумма КеГЛей, которая будет списана – " + ОтветЛояльности.order.s_kgl_rem + " КеГЛей"  + Символы.ПС +
				"    Доплата за часть заказа, на которую не хватило КеГЛей – " + ОтветЛояльности.order.s_sum + " руб.," + Символы.ПС +
				"    Сумма КеГЛей, которая будет доначислена – " + ОтветЛояльности.order.s_kgl_add + " КеГЛей" + Символы.ПС;
			иначе
				Текст2 = Текст2 + 
				"    Недостаточно КеГЛей на карте для списания."
			КонецЕсли;
			ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ",?(можноСписывать,"СПИСАТЬ",""),"ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
		КонецЕсли;
		
		Если ответ = "ВОЗВРАТ" тогда
			возврат;
		КонецЕсли;
		
		Если ответ= "СПИСАТЬ" ИЛИ ответ= "НАЧИСЛИТЬ" Тогда
			Если ответ= "СПИСАТЬ" Тогда
				Заказ.ТипЧекаЛояльность = 2;
				Заказ.ПодвалЧека = ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.print_s);
				//СтрокиЗаказа = ОтветЛояльности.order.order_str_s;
				
				СтрокиЗаказа = ПолучитьТаблицуОтветаСервисаЛояльности(ОтветЛояльности.order.order_str_s);
			иначе
				Заказ.ТипЧекаЛояльность = 1;
				Заказ.ПодвалЧека = ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.print_n);
				//СтрокиЗаказа = ОтветЛояльности.order.order_str_n;
				
				СтрокиЗаказа = ПолучитьТаблицуОтветаСервисаЛояльности(ОтветЛояльности.order.order_str_n);
			КонецЕсли;
					
			Запрос=Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Ответ.Количество КАК Количество,
			|	Ответ.НомерСтрокиЗаказа КАК НПП,
			|	Ответ.Цена КАК НоваяЦена,
			|	Ответ.Сумма КАК НоваяСумма
			|ПОМЕСТИТЬ Ответ1
			|ИЗ
			|	&Ответ КАК Ответ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Перевязка.НомерСтроки КАК НомерСтроки,
			|	Перевязка.Количество КАК Количество,
			|	Перевязка.Цена КАК Цена,
			|	Перевязка.Сумма КАК Сумма,
			|	Перевязка.НПП КАК НПП,
			|	Перевязка.НоваяЦена КАК НоваяЦена,
			|	Перевязка.НоваяСумма КАК НоваяСумма,
			|	Перевязка.Специфика КАК Специфика,
			|	Перевязка.НомерСтрокиСпец КАК НомерСтрокиСпец
			|ПОМЕСТИТЬ Перевязка1
			|ИЗ
			|	&Перевязка КАК Перевязка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	влож.НомерСтроки КАК НомерСтроки,
			|	влож.Количество КАК Количество,
			|	влож.Цена КАК Цена,
			|	влож.Сумма КАК Сумма,
			|	влож.НПП КАК НПП,
			|	ВЫБОР
			|		КОГДА влож.Специфика = 0
			|			ТОГДА влож.НоваяЦена
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК НоваяЦена,
			|	влож.НоваяСумма КАК НоваяСумма,
			|	влож.Специфика КАК Специфика,
			|	влож.НомерСтрокиСпец КАК НомерСтрокиСпец
			|ИЗ
			|	(ВЫБРАТЬ
			|		Перевязка.НомерСтроки КАК НомерСтроки,
			|		Перевязка.Количество КАК Количество,
			|		Перевязка.Цена КАК Цена,
			|		Перевязка.Сумма КАК Сумма,
			|		Перевязка.НПП КАК НПП,
			|		Ответ.НоваяЦена КАК НоваяЦена,
			|		Ответ.НоваяСумма КАК НоваяСумма,
			|		Перевязка.Специфика КАК Специфика,
			|		Перевязка.НомерСтрокиСпец КАК НомерСтрокиСпец
			|	ИЗ
			|		Перевязка1 КАК Перевязка
			|			ЛЕВОЕ СОЕДИНЕНИЕ Ответ1 КАК Ответ
			|			ПО Перевязка.НПП = Ответ.НПП) КАК влож
			//|			ПО ПОДСТРОКА(Перевязка.НПП,1,200) = ПОДСТРОКА(Ответ.НПП,1,200)) КАК влож
			|ИТОГИ
			|	СУММА(НоваяЦена),
			|	СУММА(НоваяСумма)
			|ПО
			|	НомерСтроки";
			Запрос.УстановитьПараметр("Ответ",СтрокиЗаказа);
			Запрос.УстановитьПараметр("Перевязка",ТаблицаПеревязки);
			Результат=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока Результат.Следующий() Цикл
				Заказ.Товары[Результат.НомерСтроки-1].ЦенаРеализации = Результат.НоваяЦена;
				Заказ.Товары[Результат.НомерСтроки-1].СуммаРеализации= Результат.НоваяСумма;
				Выборка=Результат.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если Выборка.Специфика=1 Тогда
						Заказ.Специфики[Выборка.НомерСтрокиСпец-1].ЦенаРеализации = Выборка.НоваяСумма;
					КонецЕсли;	
				КонецЦикла;
			КонецЦикла;	
			Заказ.ИтоговаяСумма = Заказ.Товары.Итог("СуммаРеализации");
								
			//Для каждого Строка из СтрокиЗаказа цикл
			//	Если Строка.str_type <> "T" Тогда
			//		Продолжить;
			//	КонецЕсли;
			//	
			//	СтрокаЗаказа = Заказ.Товары.Найти(Строка.str_no,"ИДСтроки");
			//	Если СтрокаЗаказа=Неопределено Тогда
			//		ЗаписьЖурналаРегистрации("Лояльность.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, "Некорректный ответ лояльности");
			//		
			//		Текст1 = "КеГеЛьБУМ";
			//		Текст2 = "Ошибка сервера лояльности. КеГЛи будут начислены"+Символы.ПС+"автоматически позднее с учетом действующих акций";
			//							
			//		Текст2 = Текст2 + Символы.ПС + 
			//		СтрДеньРождения +
			//		"________________________________________________________________________"+ Символы.ПС +
			//		ЛояльностьКлиентСервер.МассивВСтроку(ОтветЛояльности.order.display_info) + Символы.ПС + 
			//		"________________________________________________________________________"+ Символы.ПС +
			//		"Сумма Вашего заказа – "+Заказ.ИтоговаяСумма+" рублей" + Символы.ПС + 
			//		//"________________________________________________________________________"+ Символы.ПС +
			//		//"Сумма КеГЛей, которая будет начислена – " + ОтветЛояльности.Начислено1 + " КеГЛей"  + 
			//		Символы.ПС; 
			//		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "НАЧИСЛИТЬ ПОЗЖЕ","","ВОЗВРАТ",ГоризонтальноеПоложение.Лево,,,10);
			//		
			//		//Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос","Повторить запрос ?",
			//		//"не удалось обработать ответ от системы лояльности."+Символы.ПС+
			//		//"ДА - повторить запрос"+Символы.ПС+
			//		//"НЕТ - закрыть чек без лояльности"+Символы.ПС+
			//		//"Для начисления КеГЛей по текущему чеку"+Символы.ПС+
			//		//"обратитесь в службу поддержки КеГеЛьБУМ","ДА","НЕТ","",ГоризонтальноеПоложение.Лево);
			//		Если Ответ = "НАЧИСЛИТЬ ПОЗЖЕ" Тогда //Если ответ = "НЕТ" тогда
			//			// Это спул
			//			Заказ.ОбработанСистемойЛояльности = -1;
			//			ЗаписьЖурналаРегистрации("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "Выбрана оплата без лояльности");
			//		иначе
			//			//не обработали, но хотим еще раз попробовать
			//			Заказ.ОбработанСистемойЛояльности = 0;
			//		КонецЕсли;
			//		
			//		Возврат;
			//	Иначе
			//		СтрокаЗаказа.ЦенаРеализации = Строка.price_fact;
			//		СтрокаЗаказа.СуммаРеализации = Строка.strsum_fact;
			//		СтрокаЗаказа.ЛояльностьСтатус = Строка.loyality_status;
			//		СтрокаЗаказа.ЛояльностьСтатусАкции = Строка.action_status;
			//	КонецЕсли;	
			//КонецЦикла;	
			//ТабСводная=Новый ТаблицаЗначений;
			//ТабСводная=ТаблицаПеревязки.Скопировать();
			//ТабСводная.Свернуть("НомерСтроки,ИДСтроки","НоваяСумма");
			//Для Каждого ТабСтрока из ТабСводная Цикл
			//	НайтиЦену=ТаблицаПеревязки.НайтиСтроки(Новый Структура("НомерСтроки,Специфика",ТабСтрока.НомерСтроки,0));
			//	НоваяЦена=0;
			//	Если НайтиЦену.Количество()>0 Тогда
			//		НоваяЦена=НайтиЦену[0].НоваяЦена;
			//	Иначе
			//		НоваяЦена=0;
			//	КонецЕсли;	
			//	Заказ.Товары[СтрПеревязки.НомерСтроки-1].ЦенаРеализации = НоваяЦена;
			//	Заказ.Товары[СтрПеревязки.НомерСтроки-1].СуммаРеализации= ТабСтрока.НоваяСумма;
			//	
			//	
			//	//Заказ.Товары[Строка.НомерСтрокиЗаказа-1].ЦенаРеализации = Строка.Цена;
			//	//Заказ.Товары[Строка.НомерСтрокиЗаказа-1].СуммаРеализации= Строка.Сумма;
			//КонецЦикла;
			//Заказ.ИтоговаяСумма = Заказ.Товары.Итог("СуммаРеализации");
			Если ответ= "СПИСАТЬ" Тогда
				Заказ.ИтоговаяСумма = ОтветЛояльности.order.s_sum;
			иначе
				Заказ.ИтоговаяСумма = ОтветЛояльности.order.n_sum;
			КонецЕсли;
			
		КонецЕсли;
		Заказ.ОбработанСистемойЛояльности = 1;
	//КонецЕсли;
	
		//иначе
		//	ЗаписьЖурналаРегистрации("Лояльность.Ошибка", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, "Не нашли файл ответа: "+имяФайлаОтвета);
		//	ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос","Повторить запрос ?",
		//	"не удалось получить ответ от системы лояльности."+Символы.ПС+
		//	"ДА - повторить запрос"+Символы.ПС+
		//	"НЕТ - закрыть чек без лояльности"+Символы.ПС+
		//	"Для начисления КеГЛей по текущему чеку"+Символы.ПС+
		//	"обратитесь в службу поддержки КеГеЛьБУМ","ДА","НЕТ","",ГоризонтальноеПоложение.Лево,,,10);
		//	Если ответ = "НЕТ" тогда
		//		Заказ.ОбработанСистемойЛояльности = -1;
		//		ЗаписьЖурналаРегистрации("Лояльность.Обмен", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "Выбрана оплата без лояльности");
		//	иначе
		//		//не обработали, но хотим еще раз попробовать
		//		Заказ.ОбработанСистемойЛояльности = 0;
		//	КонецЕсли;
		//	
		
		//КонецЕсли;
		
		
	КонецПроцедуры
		
	Функция ОбработкаОшибокСервисаЛояльности(ЗаказОбъект, КодОшибки, ТекстОшибки = "")
	
	Если	КодОшибки = 1 Тогда
		//Проект и ТТ для ККМ не определены - актуально ли?
		//Акция Вода в подарок - отдельным чеком
		//Данный сертификат не существует
		//Каждый сертификат отдельным чеком
		
		Текст1 = "КеГеЛьБУМ";
		Текст2 = ТекстОшибки;
		Кнопка1 = "";
		Кнопка2 = "ВОЗВРАТ";
		Кнопка3 = "";
		
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ", Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
	ИначеЕсли	КодОшибки = 2 Тогда
		//Карта не принадлежит системе КеГеЛьБУМ
		Текст1 = "КеГеЛьБУМ";
		Текст2 = "Неверный номер карты КеГеЛьБУМ";
		Кнопка1 = "";
		Кнопка2 = "ВОЗВРАТ";
		Кнопка3 = "";
		ЗаказОбъект.НомерКартыЛояльности = "";
		
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ", Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
	ИначеЕсли	КодОшибки = 102 Тогда
		//сертификат только с картой
		Текст1 = "КеГеЛьБУМ";
		Текст2 = "Неверный номер карты КеГеЛьБУМ";
		Кнопка1 = "";
		Кнопка2 = "ВОЗВРАТ";
		Кнопка3 = "";
		ЗаказОбъект.НомерКартыЛояльности = "";
		
		ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","","Применение персонифицированного сертификата возможно только совместно с картой КеГеЛьБУМ","","ОК","");
		//Если ВвестиКарту(ЗаказОбъект,,Истина) Тогда
		//	Ответ = "Продолжить";
		//Иначе
			Ответ = "ВОЗВРАТ";
		//КонецЕсли;
	Иначе
		Текст1 = "КеГеЛьБУМ";
		Текст2 = ТекстОшибки;
		Кнопка1 = "";
		Кнопка2 = "ВОЗВРАТ";
		Кнопка3 = "";
		
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ", Текст1, Текст2, Кнопка1, Кнопка2, Кнопка3,,Ложь);
	КонецЕсли;
	
	Ответ = ?(Ответ = Неопределено, "ВОЗВРАТ", Ответ);
	
	Возврат Ответ;
	
КонецФункции

	Функция ПолучитьТаблицуОтветаСервисаЛояльности(СтрокиОтветаЛояльности)
	ТипКолво = ПолучитьОписаниеТиповЧисла(10,0);
	ТипСумма = ПолучитьОписаниеТиповЧисла(12,2);
	
	ТаблицаОтвета = Новый ТаблицаЗначений;
	ТаблицаОтвета.Колонки.Добавить("НомерСтрокиЗаказа", ТипКолво);//Новый ОписаниеТипов("Строка"));
	ТаблицаОтвета.Колонки.Добавить("Количество", ТипКолво);
	ТаблицаОтвета.Колонки.Добавить("Цена", ТипСумма);
	ТаблицаОтвета.Колонки.Добавить("Сумма", ТипСумма);
	
	Для каждого ТекущаяСтрока Из СтрокиОтветаЛояльности Цикл
		Если ТекущаяСтрока.str_type <> "T" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОтвета.Добавить();
		НоваяСтрока.НомерСтрокиЗаказа = ТекущаяСтрока.str_no;
		НоваяСтрока.Количество = ТекущаяСтрока.quantity;
		НоваяСтрока.Цена = ТекущаяСтрока.price_fact;
		НоваяСтрока.Сумма = ТекущаяСтрока.strsum_fact;
	КонецЦикла;
	
	Возврат ТаблицаОтвета;
КонецФункции

	Функция ИзменитьКартуЛояльности(Знач пНомерКартыЛояльности = Неопределено) Экспорт
		Если пНомерКартыЛояльности = Неопределено Тогда
			пНомерКартыЛояльности = ИнтерфейсРМ.ВводЧисла("Карта лояльности", "Число",20,,,,"Карта лояльности");
			пНомерКартыЛояльности = Формат(пНомерКартыЛояльности, "ЧГ=0");
		КонецЕсли;
		
		
		Если не ЗначениеЗаполнено(пНомерКартыЛояльности) тогда
			//НомерКартыЛояльности = Заказ.НомерКартыЛояльности;
			возврат -1;
		КонецЕсли;
		
		Если Лев(пНомерКартыЛояльности,14) = "Идентификатор_" Тогда
			//считали с помощью карт ридера
			Заказ.НомерКартыЛояльности = Сред(пНомерКартыЛояльности,15);
		Иначе
			Заказ.НомерКартыЛояльности = пНомерКартыЛояльности;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Заказ.РабочееМесто) Тогда
			Тест = Заказ.РабочееМесто.Тест;
		Иначе
			Тест = Истина;
		КонецЕсли;
		ДанныеЛояльности = ЛояльностьКлиент.ПроверкаКарты_КП(Заказ.НомерКартыЛояльности, Тест);
		Если ДанныеЛояльности.Ошибка Тогда
			Если ДанныеЛояльности.Свойство("НомерКарты") Тогда
				Заказ.НомерКартыЛояльности = ДанныеЛояльности.НомерКарты;
			Иначе
				Заказ.НомерКартыЛояльности = "";
			КонецЕсли;
			Заказ.ИмяГостя = "";
			Заказ.ДатаРождения = Дата(1,1,1);
			ЗаказДопИнф.ДатаАвторизации = Дата(1,1,1);
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка проверки номера карты КеГеЛьБУМ",ДанныеЛояльности.ТекстОшибки,"","ОК","");
			ДанныеЛояльности = Неопределено;
			Лояльность.УдалитьДанныеЛояльностиПоЗаказу(Заказ.Ссылка); // Удаляем доп. данные, если уже были определены
			Возврат -1;
		ИначеЕсли ПустаяСтрока(ДанныеЛояльности.НомерКарты) Тогда
			Заказ.НомерКартыЛояльности = "";
			Заказ.ИмяГостя = "";
			Заказ.ДатаРождения = Дата(1,1,1);
			ЗаказДопИнф.ДатаАвторизации = Дата(1,1,1);
			ДанныеЛояльности = Неопределено;
			Лояльность.УдалитьДанныеЛояльностиПоЗаказу(Заказ.Ссылка); // Удаляем доп. данные, если уже были определены
		Иначе
			ЗаполнитьЗначенияСвойств(Заказ, ДанныеЛояльности);
			Если ДанныеЛояльности.Свойство("НомерКарты") Тогда
				Заказ.НомерКартыЛояльности = ДанныеЛояльности.НомерКарты;
			Иначе
				Заказ.НомерКартыЛояльности = "";
			КонецЕсли;
			ЗаказДопИнф.ДатаАвторизации = ТекущаяДата();
			Лояльность.ЗаписатьДанныеЛояльностиПоЗаказу(Заказ.Ссылка, ДанныеЛояльности);
		КонецЕсли;
		
		Если Не ПустаяСтрока(Заказ.НомерКартыЛояльности) Тогда
			КартаДоступа = Справочники.КартыДоступа.НайтиПоРеквизиту("Идентификатор",Заказ.НомерКартыЛояльности);			
			Если КартаДоступа.Пустая() Тогда
				Заказ.КартаЛояльности = Неопределено;
			иначе
				Заказ.КартаЛояльности = КартаДоступа;
			КонецЕсли;
		Иначе
			Заказ.КартаЛояльности = Неопределено;
		КонецЕсли;
		 
		Заказ.ПодвалЧека					= "";
		Заказ.ТипЧекаЛояльность				= 0;
		Заказ.ОбработанСистемойЛояльности 	= 0;
		
		возврат 1;
	КонецФункции
	
	////////////////////////////////////////////////////////////////////////////////
	// ОПЛАТА, ПЕЧАТЬ СЧЕТА
	
	// Описание процедуры
	//
	Процедура Оплата()  Экспорт
		
		Если НЕ глПараметрыРМ.ККМЕсть Тогда
			Текст1="Нет доступа!";
			Текст2="Данное рабочее место не является кассовым -
			|оплата невозможна!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли;
		
		Если НЕ ВыполнитьПроверку("НеЗаблокирован") Тогда
			Возврат;
		КонецЕсли; 
		
		Если Не ЗаказДопИнф.ПротоколРасчетов.Пустая() Тогда
			Если ЗаказДопИнф.ПротоколРасчетов.Фискализирован Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ЗаказУжеБылЗакрыт = ЗаказДопИнф.Статус=Перечисления.СтатусыЗаказа.Закрыт;
		Если ЗаказУжеБылЗакрыт Тогда
			// повторная попытка - больше никаких проверок не надо
			СуммаБонусов = 0;
			РезультатПроверкиПейджеров = Новый Структура("БлюдоВыдали,ПейджерыСданы,ОтмененоПользователем",Истина,Истина,Ложь);
		Иначе
			РезультатПроверкиПейджеров = ВыполнитьПроверкуПейджеров();
		КонецЕсли;
		
		Если Истина Тогда
			
			Если 
				Не (ВыполнитьПроверку("ПроверкаСменыОплата")И 
				ВыполнитьПроверку("ПроверкаСкидки")
				) Тогда
				Возврат;
			КонецЕсли; 
			
			// < КС_ВДВ ------------------------------------------------------------ 
			// Дополнительные проверки
			
			
			Если НЕ( РезультатПроверкиПейджеров.ПейджерыСданы ) Или 
				( РезультатПроверкиПейджеров.ОтмененоПользователем )	Тогда
				Возврат;
			КонецЕсли; 
			
			Если РезультатПроверкиПейджеров.БлюдоВыдали Тогда
				
				//Если НЕ глПараметрыРМ.ЗКП Тогда
				Если НЕ( ВыполнитьПроверкуНевыданныхТоваров() ) Тогда
					Возврат;
				КонецЕсли;
				//КонецЕсли;	
			КонецЕсли;
			// КС_ВДВ > ------------------------------------------------------------ 
			
			Если ЛимитнаяКарта И НЕ Заказ.ПосадочноеМесто.ЗапретДовнесенияПредоплаты Тогда
				Текст1="Закрыть или довнести?";
				Текст2="Закрыть заказ или довнести сумму на карту?";
				Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Закрыть","Внести","Esc=Отмена");
				Если Ответ="Отмена" Тогда
					Возврат;
				ИначеЕсли Ответ="Внести" Тогда
					ВнестиПредоплату(Истина);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Доставка И НЕ глПараметрыРМ.ОплатаАвтоПечатьМарок И
				НЕ( ВыполнитьПроверку("НетУдалений")	И 
				ВыполнитьПроверку("НетДозаказа") 
				) Тогда
				Возврат;
			КонецЕсли; 
			
			Если Заказ.ИтоговаяСумма<0 Тогда
				Текст1="Нет доступа!";
				Текст2="Неверная итоговая сумма в заказе -
				|оплата невозможна!";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат;
				
			ИначеЕсли ТаблицаЗаказа.Строки.Количество()=0 И Защита.СуммаВнесеннойПредоплаты(Заказ, ЗаказДопИнф)=0 Тогда
				Текст1="Нет доступа!";
				Текст2="Заказ пустой - оплачивать нечего!";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат;
				
			КонецЕсли;
			
			// после печати марок запись заказа должна быть в любом случае
			Отказ = Ложь;
			Если Не ЗаказУжеБылЗакрыт Тогда
				Если НЕ ПечатьМарок() Тогда
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ПересчетПоТарифам(Истина) Тогда
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗаписатьЗаказ() Тогда
					Отказ = Истина;
				КонецЕсли;
				Если Отказ Тогда
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
			
			
			ОбработкаОплаты = ИнтерфейсРМ.ПолучитьОбъектОбработки("Оплата");
			ОбработкаОплаты.Заказ = Заказ;
			НомерКартыЛояльности = Заказ.НомерКартыЛояльности;
			
			
			ПротоколРасчетов = ЗаказДопИнф.ПротоколРасчетов;
			
			ОбработкаОплаты.ОткрытьЧек();	
			Заказ.Записать();
			
			// Сохраняем состояние заказа (ДокументОбъект.Заказ) на момент до применения лояльности	
			ЗаказXDTO = СериализаторXDTO.ЗаписатьXDTO(Заказ);
			
			Если Не ЗаказУжеБылЗакрыт Тогда
			//{ применим лояльность
			
			
			// МясновЪ =============================================================
			Если Заказ.НомерКартыЛояльности = "" тогда
				
				Текст1 = "У Вас есть карта КеГеЛьБУМ ?";
				
				Текст2 = "Уточните у клиента наличие карты лояльности КеГеЛьБУМ";
				
				ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "ДА","","НЕТ");
				Если ответ = "ДА" тогда
					Если ИзменитьКартуЛояльности() <> 1 тогда
						//если не указали номер карты - возвращаемся в заказ, т.е. обязательно должны что то указать, либо сказать что нет карты
						возврат;
					КонецЕсли;
				Иначе
					Текст1 = "Желаете приобрести карту КеГеЛьБУМ ?";
					
					Текст2 = "Уточните у клиента желание приобрести карту КеГеЛьБУМ";
					
					ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "ДА","","НЕТ");
					Если ответ = "ДА" тогда
						
						Если ИзменитьКартуЛояльности() <> 1 тогда
							//если не указали номер карты - возвращаемся в заказ, т.е. обязательно должны что то указать, либо сказать что нет карты
							возврат;
						КонецЕсли;
						//
						//
						//Если НЕ ВвестиКарту(ЗаказОбъект, "Считайте новую карту КеГеЛьБУМ", Истина) Тогда
						//	Возврат ВозвратВЧек(СтруктураВозврата);
						//КонецЕсли;
						
						Если НЕ ПустаяСтрока(Заказ.НомерКартыЛояльности) Тогда
							// добавление карты в список товаров
							
							ТоварКарты = Лояльность.ПолучитьТоварКарта(Лояльность.ПолучитьКодТовараКарты(ПредопределенноеЗначение("Справочник.Регионы.Р77")));
							
							// товар не найден - выход
							Если ТоварКарты = Справочники.Товары.ПустаяСсылка() Тогда
								Заказ.НомерКартыЛояльности = "";
								ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","","Не найден товар карты лояльности (код 16020001/16020002)","","Вернуться в чек","");
								ЛояльностьКлиентСервер.Логирование(1, "расчет", "товар карты не найден");
								Возврат;
							КонецЕсли;
							
							// добавление карты в заказ, если ее там еще нет
							СтрокаТЧ = Заказ.Товары.Найти(ТоварКарты, "Товар");
							Если СтрокаТЧ = Неопределено Тогда
								БылДозаказ = ЕстьДозаказ;
								ВводНовойСтроки(ТоварКарты, 1);
								ЕстьДозаказ = БылДозаказ;
								
								// здесь факт розлива уже свершенный, поэтому надо сразу записать позицию как заказанную
								СтрокаЗаказа = ТаблицаЗаказа.Строки[ТаблицаЗаказа.Строки.Количество()-1];
								СтрокаЗаказа.Статус = СтатусЗаказано;
								//ВводНовойСтроки(ТоварКарты, 1, Истина);
								ЗаписатьЗаказ();
							КонецЕсли;
						Иначе
							// карту не ввели - выход
							Возврат;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЕстьДеньРожденияВЗаказе = -1;
			//сбрасываем ранее примененные скидки
			Для каждого СтрЗаказа из Заказ.Товары цикл
				СтрЗаказа.СуммаРеализации 	= СтрЗаказа.Сумма;
				СтрЗаказа.ЦенаРеализации	= СтрЗаказа.Цена;
				
				Если СтрЗаказа.Товар = константы.Лояльность_ДеньРождения.Получить() и СтрЗаказа.Количество > 0 тогда
					Если ЕстьДеньРожденияВЗаказе>0 тогда
						// т.е. несколько раз выбрали День Рождения
						Текст1 = "дубли товара С ДНЕМ РОЖДЕНИЯ";
						
						Текст2 = " В заказе несколько строк с товаром <"+СтрЗаказа.Товар+">"+символы.ПС+
						" удалите лишние строки";
						
						ответ = ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Текст1, Текст2, "ОК","","");
						
						возврат;
					КонецЕсли;
					ЕстьДеньРожденияВЗаказе = Заказ.Товары.Индекс(СтрЗаказа);
				КонецЕсли;
			КонецЦикла;
			
			Заказ.ИтоговаяСумма = Заказ.Товары.Итог("СуммаРеализации");
			Заказ.ИтогоСумма = Заказ.Товары.Итог("Сумма");
			Заказ.ОбработанСистемойЛояльности = 0;
			Заказ.ТипЧекаЛояльность = 0;
			Заказ.ПодвалЧека = "";
			
			ДеньРождения_Лимит = Константы.Лояльность_ДеньРождения_Лимит.Получить();
			Если ЕстьДеньРожденияВЗаказе > -1 тогда
				Если Заказ.ИтогоСумма < ДеньРождения_Лимит тогда
					Текст1="некорректный заказ";
					Текст2="Нельзя применять бонус за День Рождения, если сумма заказа меньше "+ДеньРождения_Лимит;
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
					возврат;
				КонецЕсли;
			КонецЕсли;
			
			Заказ.Товары.ЗагрузитьКолонку(Заказ.Товары.ВыгрузитьКолонку("Цена"),"ЦенаРеализации");
			
			
			ПрименитьЛояльность(Заказ, ЕстьДеньРожденияВЗаказе);
			Если ЗначениеЗаполнено(Заказ.НомерКартыЛояльности) Тогда
				НомерКартыЛояльности = Заказ.НомерКартыЛояльности;
			КонецЕсли;
			Если Заказ.ОбработанСистемойЛояльности = 0 тогда
				//возвращаемся в заказ
				возврат;
			КонецЕсли;
			
			Заказ.Записать();
			//КонецЕсли;
			//} Лояльность
		КонецЕсли;				
		
		ОбработкаОплаты = ИнтерфейсРМ.ПолучитьОбъектОбработки("Оплата");
		Если ЗаказДопИнф.ПротоколРасчетов.Пустая() Тогда
			ОбработкаОплаты.Заказ = Заказ;
			ОбработкаОплаты.Товары = Заказ.Товары;
			ОбработкаОплаты.ИнициализироватьПротокол();	
			Иначе
				ОбработкаОплаты.Заказ = Заказ;
				ОбработкаОплаты.Товары = Заказ.Товары;
				ОбработкаОплаты.ПротоколРасчетов = ЗаказДопИнф.ПротоколРасчетов.ПолучитьОбъект();
			КонецЕсли;
			
			ФормаОплаты = ОбработкаОплаты.ПолучитьФорму("Форма"+глПараметрыРМ.ИнтерфейсТип);
			Попытка
				РезультатОплаты = ФормаОплаты.ОткрытьМодально();
			Исключение
				РезультатОплаты = Неопределено;
				ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("Заказ.Ошибка в процессе оплаты", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, ПодробноеПредставлениеОшибки);
			КонецПопытки;
			ЗаписьЖурналаРегистрации("Получен результат оплаты", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.Заказ, Заказ.Ссылка, "РезультатОплаты = " + ЗначениеВСтрокуВнутр(РезультатОплаты));
			
			
			Если РезультатОплаты = Неопределено Тогда // Закрыли по Esc или крестик в окне оплаты
				Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма);
				Заказ.Разблокировать();
				Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
				Заказ.НомерКартыЛояльности = НомерКартыЛояльности;
				ЗаписатьЗаказСоСтатусом(ЗаказДопИнф.Статус);
				Возврат;
			КонецЕсли;
			
			Если РезультатОплаты.СделанаОтменаОплатыКартой Тогда // 
				ЗаписатьЗаказСоСтатусом(Перечисления.СтатусыЗаказа.Открыт);
				Возврат;
			ИначеЕсли РезультатОплаты.Успех Тогда
				ИнтерфейсРМ.ВыводНаИнфоДисплей("ЗаказОплачен");
				ЗаказДопИнф.ПротоколРасчетов = ОбработкаОплаты.ПротоколРасчетов.Ссылка;
				Заказ.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
				ЗаписатьЗаказСоСтатусом(Перечисления.СтатусыЗаказа.Закрыт);
				Если Не глПараметрыРМ.Свойство("НомерТекущегоЧека") Тогда
					глПараметрыРМ.Вставить("НомерТекущегоЧека", 9999);
				КонецЕсли;
				ПечатьЧека("Продажа", Заказ.ИтоговаяСумма, ПротоколРасчетов.Протокол, глПараметрыРМ.ККМ, Справочники.ГруппыОплаты.ПустаяСсылка(), Заказ.ПодвалЧека);
				
			ИначеЕсли РезультатОплаты.Неудача Тогда
				ЗаказДопИнф.ПротоколРасчетов = ОбработкаОплаты.ПротоколРасчетов.Ссылка;
				Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма);
				Заказ.Разблокировать();
				ЗаписатьЗаказСоСтатусом(Перечисления.СтатусыЗаказа.Закрыт);
				Возврат
			ИначеЕсли РезультатОплаты.Отмена Тогда
				Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма);
				Заказ.Разблокировать();
				ЗаписьЖурналаРегистрации("Заказ.Востановление состояния заказа при отмене оплат",УровеньЖурналаРегистрации.Предупреждение,,Заказ.Ссылка, "Товары: " + Символы.ПС + ЗначениеВСтрокуВнутр(Заказ.Товары.Выгрузить()));
				Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
				Заказ.НомерКартыЛояльности = НомерКартыЛояльности;
				ЗаписатьЗаказСоСтатусом(ЗаказДопИнф.Статус);
				Возврат
			Иначе
				Возврат;	
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Заказ.ПодвалЧека) тогда
				Инфа = ИнтерфейсРМ.ПолучитьОбъектОбработки("ИнформацияДляКлиента").ПолучитьФорму( "Форма" + глПараметрыРМ.ИнтерфейсТип );
				Попытка
					Если ЗначениеЗаполнено(ДанныеЛояльности) тогда
						Инфа.ТекстСообщения = ДанныеЛояльности.ФИО + Символы.ПС + Заказ.ПодвалЧека;
					иначе
						Инфа.ТекстСообщения = Заказ.ПодвалЧека;
					КонецЕсли;
				исключение
					Инфа.ТекстСообщения = Заказ.ПодвалЧека;
				КонецПопытки;
				
				Инфа.ОткрытьМодально();
			КонецЕсли;
			
			ДанныеЛояльности = Неопределено;
			
			Пока глПараметрыРМ.ПечатьСчетаОкончательный И НЕ ПечатьСчета(Истина) И ФормаЗаказа<>Неопределено Цикл
				Текст1="Счет не напечатан!";
				Текст2="Проверьте электропитание и наличие бумаги в принтере...";
				Если ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"Повтор","","Esc=Отмена")="Отмена" Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ Доставка И ФормаЗаказа<>Неопределено Тогда
				Если глПараметрыРМ.ОплатаАвтоНовый И НЕ ЗаказУжеБылЗакрыт Тогда
					ОткрытьНовыйЗаказ();
				Иначе
					ФормаЗаказа.Закрыть();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецПроцедуры
	
	Функция ПечатьЧека(Действие, Сумма, Протокол, ККМ, ГруппаОплаты=Неопределено,Текст1="")
	
	ОбработкаПечати = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПечатьЧека");
	ОбработкаПечати.ККМ = ККМ;
	ОбработкаПечати.Заказ = Заказ.Ссылка;
	ОбработкаПечати.ЗаказДопИнф = ЗаказДопИнф;
	ОбработкаПечати.ФоновыйРежим = ФоновыйРежим;
	ОбработкаПечати.Текст1 = Текст1;
	
	
	ЧекПрошел = ОбработкаПечати.ПечатьЧека(Протокол, Сумма, ГруппаОплаты);
	
	Если НЕ ЧекПрошел Тогда
		Текст1 = ОбработкаПечати.Текст1;
		Текст2 = ОбработкаПечати.Текст2;
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат Ложь;
	КонецЕсли;
	
	ИнтерфейсРМ.ЗаписьСобытия( Справочники.События.ОплатаПечатьЧека, Заказ.Ссылка, ККМ.Наименование );
	
	Возврат Истина;
КонецФункции

	
	Процедура ЗаписатьЗаказСоСтатусом(Статус)
	//:Заказ = Документы.Заказ.СоздатьДокумент();
	Если Статус = Перечисления.СтатусыЗаказа.Удален Тогда
		Для каждого Т Из Заказ.Товары Цикл
			Т.КоличествоУдалено = Т.КоличествоНачальное;
			Т.Количество = 0;
			Т.СуммаРеализации = 0;
			Т.Сумма = 0;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		ЗаписьЖурналаРегистрации("Изменение статуса заказа", УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка, Статус);	
	Исключение
	КонецПопытки;  
	
	Если Заказ.Смена.Пустая() Тогда
		Заказ.Смена = ИнтерфейсРМ.ТекущаяСмена();
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыЗаказа.Открыт Тогда
		ЗаказДопИнф.ДатаЗакрытия = Дата(1,1,1);
	Иначе
		ЗаказДопИнф.ДатаЗакрытия = ТекущаяДатаНаСервере();
	КонецЕсли;
	Заказ.Записать();	
	ЗаказДопИнф.Статус = Статус;
	ЗаказДопИнф.Записать(Истина)
	
КонецПроцедуры

	
	// Описание процедуры
	//
	Функция ВнестиПредоплату(Довнесение=Ложь)
		
		Если НЕ глПараметрыРМ.ККМЕсть Тогда
			Текст1="Нет доступа!";
			Текст2="Данное рабочее место не является кассовым -
			|ввод предоплаты невозможен!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат Ложь;
		КонецЕсли;
		
		СуммаПредоплаты = Заказ.ПосадочноеМесто.СуммаМинимальнойПредоплаты;
		
		Если Довнесение ИЛИ Заказ.ПосадочноеМесто.ЗапросСуммыПредоплаты Тогда
			
			ВведеннаяСумма = ИнтерфейсРМ.ВводЧисла("Сумма предоплаты:", "Число", 12, 2, ?(НЕ Довнесение, СуммаПредоплаты, 0) );
			
			Если ВведеннаяСумма=0 ИЛИ ВведеннаяСумма=Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если НЕ Довнесение И ВведеннаяСумма < СуммаПредоплаты Тогда
				Текст1="Ошибка!";
				Текст2="Предоплата по этой карте минимум " + ФорматСумм(СуммаПредоплаты);
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат Ложь;
			КонецЕсли;
			
			СуммаПредоплаты = ВведеннаяСумма;
		КонецЕсли;
		
		ОбработкаОплаты = ИнтерфейсРМ.ПолучитьОбъектОбработки("ОплатаЗаказа").ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип);
		ОбработкаОплаты.ОбработкаЗаказ	= ЭтотОбъект;
		ОбработкаОплаты.Заказ			= Заказ;
		ОбработкаОплаты.ЗаказДопИнф		= ЗаказДопИнф;
		ОбработкаОплаты.СуммаПредоплаты	= СуммаПредоплаты;
		
		ОбработкаОплаты.ОткрытьМодально();
		
		Возврат ОбработкаОплаты.ФлагУспешнойОплаты;
	КонецФункции
	
	// Печать предварительного счета по кнопке, окончательного после оплаты, 
	// или повторная печать из закрытого заказа
	//
	Функция ПечатьСчета(ПриОплате=Ложь) Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат Ложь;
		ИначеЕсли ТаблицаЗаказа.Строки.Количество()=0 Тогда
			Возврат Истина;
		ИначеЕсли НЕ глПараметрыРМ.ПечатьСчета Тогда
			Возврат Истина;
		КонецЕсли;
		
		Действие = ?( ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Открыт, "Пресчет", "Счет" );
		
		Если Действие="Пресчет" Тогда
			
			Если НЕ( ВыполнитьПроверку("ПроверкаСмены")	И 
				ВыполнитьПроверку("НетПресчета")	И 
				ВыполнитьПроверку("НеЗаблокирован") И 
				ВыполнитьПроверку("НетДозаказа")	И 
				ВыполнитьПроверку("НетУдалений")	И 
				ВыполнитьПроверку("ПроверкаСкидки") И
				ВыполнитьПроверку("Право.ПечатьПресчета") 
				) Тогда
				Возврат Ложь;
			КонецЕсли; 
			
			Если ТаблицаЗаказа.Строки.Итог("Количество")=0 Тогда
				Текст1="Нет доступа!";
				Текст2="Нет позиций для печати...";
				Если НЕ ФоновыйРежим Тогда
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				КонецЕсли; 
				Возврат Ложь;
			КонецЕсли;
			
			Если глПараметрыРМ.ПечатьСчетаПресчетНеблокировать Тогда
				// пересчет без остановки
				ПересчетПоТарифам();
			Иначе
				Если НЕ ФоновыйРежим Тогда
					Текст1="Печать пресчета!";
					Текст2="Внимание!
					|После печати предварительного счета заказ нельзя будет изменить без администратора!";
					Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"ОК","","Esc=Отмена")="Отмена" Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
				// пересчет с остановкой
				Если НЕ ПересчетПоТарифам(Истина) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗаписатьЗаказ() Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Если Заказ.ИтоговаяСумма<0 Тогда
				Текст1="Неверный итог!";
				Текст2="Неверная итоговая сумма в заказе -
				|предварительный счет распечатан не будет...";
				Если НЕ ФоновыйРежим Тогда
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				КонецЕсли; 
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		//-------------------------------------
		Если НЕ ФоновыйРежим Тогда
			глОжидание.Начало("Выполняется печать...",
			"Идет печать заданий на сервис-принтерах.
			|Пожалуйста, подождите...");
		КонецЕсли;
		
		ОбработкаПечати = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПечатьЗаказа");
		ОбработкаПечати.Заказ			 = Заказ;
		ОбработкаПечати.ЗаказДопИнф		 = ЗаказДопИнф;
		ОбработкаПечати.ПротоколРасчетов = ЗаказДопИнф.ПротоколРасчетов;
		ОбработкаПечати.ФоновыйРежим	 = ФоновыйРежим;
		
		ПечатьОК = ОбработкаПечати.ПечатьСчета( Действие );
		
		Текст1 = ОбработкаПечати.Текст1;
		Текст2 = ОбработкаПечати.Текст2;
		
		Если НЕ ФоновыйРежим Тогда
			глОжидание.Конец();
		КонецЕсли;
		
		Если НЕ ПечатьОК Тогда
			Возврат Ложь;
		КонецЕсли;
		//-------------------------------------
		
		Если Действие="Пресчет" Тогда
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказПечатьПредварительногоСчета,Заказ.Ссылка);
			Если НЕ глПараметрыРМ.ПечатьСчетаПресчетНеблокировать Тогда
				Заказ.ЕстьПресчет = Истина;
				ИнтерфейсРМ.ПопыткаДействияСОбъектом( Заказ, "Объект.Записать()" ,,,Заказ.Ссылка);
			КонецЕсли;
			
			Если НЕ Доставка И ФормаЗаказа<>Неопределено И глПараметрыРМ.ПечатьСчетаПресчетВыход Тогда
				ФормаЗаказа.Закрыть();
			КонецЕсли; 
			
		ИначеЕсли НЕ ПриОплате Тогда
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказПовторнаяПечатьСчета,Заказ.Ссылка);
			
		КонецЕсли;
		
		Возврат Истина;
	КонецФункции
	
	// Отмена предварительного счета
	//
	Процедура ОтменаПречека() Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат;
		ИначеЕсли НЕ Заказ.ЕстьПресчет Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ( ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НеЗаблокирован")И 
			ВыполнитьПроверку("Право.ОтменаПресчета") 
			) Тогда
			Возврат;
		КонецЕсли; 
		
		Текст1="Внимание!";
		Текст2="Вы уверены, что хотите отменить предварительный счет?";
		Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","","Esc=Нет") = "Нет" Тогда
			Возврат;
		КонецЕсли;
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказОтменаПредварительногоСчета,Заказ.Ссылка);
		
		Заказ.ЕстьПресчет = Ложь;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом( Заказ, "Объект.Записать()" );
		
	КонецПроцедуры  
	
	////////////////////////////////////////////////////////////////////////////////
	// ДАЗАКАЗ, УДАЛЕНИЕ
	
	// Ввод новой строки в заказ
	//
	
	////////////////////////////////////////////////////////////////////////////////
	// ДАЗАКАЗ, УДАЛЕНИЕ
	
	// Ввод новой строки в заказ
	//
	Процедура ВводНовойСтроки( ВыбТов, Колво=0, АвтоПозиция=Ложь, Знач ВыбКомУстройство=Неопределено ) Экспорт
		
		глОтсечкаПростоя();
		
		Если НЕ ЗначениеЗаполнено(ВыбТов) Тогда
			Возврат;
			
		ИначеЕсли (ВыбТов.ПометкаУдаления ИЛИ НЕ ВыбТов.ЕстьВПродаже) И НЕ АвтоПозиция И НЕ РежимПредЗаказ Тогда
			Текст1="Нет доступа!";
			Текст2="Товара """+ВыбТов.Наименование+""" нет в продаже...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
			
		КонецЕсли;
		
		ОстатокТовара = 0;
		Если НЕ РежимПредЗаказ И ТоварВСтопе(ВыбТов, ОстатокТовара) Тогда
			Если ОстатокТовара = 0 Тогда
				Текст1="Нет доступа!";
				Текст2="Товар """+ВыбТов.Наименование+""" в Стоп-листе!";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат;
			Иначе
				Текст1="Внимание!";
				Текст2="Товара """+ВыбТов.Наименование+"""
				|осталось всего "+ОстатокТовара;
				ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ИнтерфейсРМ.ЭтоТариф(ВыбТов)  Тогда
			
			Если РежимПредЗаказ Тогда
				Текст1="Нет доступа!";
				Текст2="Тарифицируемую позицию в предварительный заказ добавить нельзя...";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат;
			КонецЕсли;
			
			Цена=0;
			Количество=0;
			
			Если НЕ ЗначениеЗаполнено(ВыбКомУстройство) Тогда
				ВыбКомУстройство = ВыборКомУстройства(ВыбТов);
				Если ВыбКомУстройство=Неопределено Тогда
					Если АвтоПозиция Тогда
						// нельзя отказаться от ввода
						ВводНовойСтроки( ВыбТов, Колво, АвтоПозиция, ВыбКомУстройство );
					КонецЕсли;
					Возврат;
				КонецЕсли;
			КонецЕсли;
						
		Иначе
			
			Если Колво<>0 Тогда
				Количество = Колво;
				
			ИначеЕсли ВыбТов.ЗапросКоличества Тогда
				
				НаимТовара = ВыбТов.Наименование + " ("+ВыбТов.ЕдиницаИзмерения.Наименование+")";
				
				Если Цел(ВыбТов.КратностьКоличества) <> ВыбТов.КратностьКоличества Тогда
					Длина		= 10;
					Точность	= 3;
				Иначе
					Длина		= 6;
					Точность	= 0;
				КонецЕсли;
				
				Колво = ИнтерфейсРМ.ВводЧисла(НаимТовара, "Число", Длина, Точность, Макс(1,ВыбТов.КратностьКоличества), ВыбТов.КратностьКоличества);
				
				Если Колво=0 ИЛИ Колво=Неопределено Тогда
					Если АвтоПозиция Тогда
						// нельзя отказаться от ввода
						Текст1="Обязательная позиция!";
						Текст2="Нельзя отказаться от ввода обязательной позиции...";
						ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
						ВводНовойСтроки( ВыбТов, , АвтоПозиция );
					КонецЕсли;
					Возврат;
				КонецЕсли;
				
				Количество = Колво;
				
			Иначе
				Количество = Макс(1, ВыбТов.КратностьКоличества );
				
			КонецЕсли;  
			
			СтруктураЦены = ЦенаТовара(ВыбТов, ТипЦен);
			Цена = ПересчетВалют(СтруктураЦены.Цена, СтруктураЦены.Валюта);
			
		КонецЕсли;
		
		СтрокаЗаказа = ТаблицаЗаказа.Строки.Добавить();
		СтрокаЗаказа.Статус			= СтатусДозаказ;
		// < КС_ВДВ ------------------------------------------------------------ 
		Если глПараметрыРМ.Тип = Перечисления.ТипыРМ.Производство Тогда
			СтрокаЗаказа.Станция		= глРабочееМесто.Станция;
		КонецЕсли;
		// КС_ВДВ > ------------------------------------------------------------ 
		СтрокаЗаказа.Автор			= глПользователь;
		СтрокаЗаказа.АвтоПозиция	= АвтоПозиция;
		СтрокаЗаказа.Товар			= ВыбТов;
		СтрокаЗаказа.Наименование	= ВыбТов.Наименование;
		СтрокаЗаказа.ТипЦен			= ТипЦен;
		СтрокаЗаказа.Цена			= Цена;
		СтрокаЗаказа.Количество		= Количество;
		СтрокаЗаказа.Категория		= ВыбТов.Категория;
		СтрокаЗаказа.ГруппаПечати	= ВыбТов.ГруппаПечати;
		СтрокаЗаказа.Подача			= ТекущаяПодача;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		СтрокаЗаказаОтбор = ДобавитьСтрокуЗаказаОтбор(СтрокаЗаказа);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//Если НЕ ПроверитьДобавитьСпецифику(СтрокаЗаказа) Тогда
		Если НЕ ПроверитьДобавитьСпецифику(СтрокаЗаказа,Неопределено,?(Автопозиция,Ложь,Истина),АвтоПозиция) Тогда
			// КС_ВДВ > ------------------------------------------------------------ 
			ТаблицаЗаказа.Строки.Удалить(СтрокаЗаказа);
			// < КС_ВДВ ------------------------------------------------------------ 
			Если СтрокаЗаказаОтбор <> Неопределено Тогда
				ТаблицаЗаказаОтбор.Строки.Удалить(СтрокаЗаказаОтбор);
			КонецЕсли; 
			// КС_ВДВ > ------------------------------------------------------------ 
			Если АвтоПозиция Тогда
				// нельзя отказаться от ввода
				Текст1="Обязательная позиция!";
				Текст2="Нельзя отказаться от ввода обязательной позиции...";
				ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
				ВводНовойСтроки( ВыбТов, , АвтоПозиция );





			КонецЕсли;
			ВыводЗаказаНаИнфоДисплей();
			Возврат;
		КонецЕсли; 
		





		Если ФормаЗаказа <> Неопределено Тогда
			ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа;
			// < КС_ВДВ ------------------------------------------------------------ 
			//ТабПолеТЗ.ТекущаяСтрока = СтрокаЗаказа;
			//ТабПолеТЗ.Развернуть(СтрокаЗаказа, Истина);
			ТабПолеТЗ.ТекущаяСтрока = СтрокаЗаказаОтбор;
			ТабПолеТЗ.Развернуть(СтрокаЗаказаОтбор, Истина);
			
			Если СтрокаЗаказаОтбор.Строки.Количество()>0 тогда
				ТабПолеТЗ.ТекущаяСтрока = СтрокаЗаказаОтбор.Строки.Получить(СтрокаЗаказаОтбор.Строки.Количество()-1);
				ТабПолеТЗ.ТекущаяСтрока = СтрокаЗаказаОтбор;
			КонецЕсли;
			
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли; 
		
		Оповестить("Дозаказ",ВыбТов);	// для формы подбора
		
		РасчетПоСтроке(СтрокаЗаказа);
		РасчетПоЗаказу();
		
		Модифицирован	= Истина;
		ЕстьДозаказ		= Истина;
		
		Если НЕ РежимПредЗаказ Тогда
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказДозаказ, Заказ.Ссылка, ВыбТов.Код, ВыбТов.Наименование, СтрокаЗаказа.Количество, СтрокаЗаказа.Цена, СтрокаЗаказа.Сумма );
			
			ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
			СтрокаЗаказа.Наименование	,СтрокаЗаказа.Сумма,
			"ИТОГО:"					,Заказ.ИтоговаяСумма);
		КонецЕсли; 
		
		
		ПолучитьРекомендации(Ложь);
		
		// Отобразить изменения на ИнфоДисплее
		// < КС_ВДВ ------------------------------------------------------------ 
		//ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ.Ссылка, ТаблицаЗаказа, СписокРекомендаций);
		ВыводЗаказаНаИнфоДисплей();
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецПроцедуры
	
	// Открытие формы подбора товаров
	//
	Процедура ПодборТоваров(ВыводПредупреждения=Истина, ОсновноеМеню=Неопределено) Экспорт
		
		Если НЕ(ВыполнитьПроверку("ЗаказОткрыт"		,ВыводПредупреждения) И 
			ВыполнитьПроверку("ПроверкаСмены"	,ВыводПредупреждения) И 
			ВыполнитьПроверку("НетПресчета"		,ВыводПредупреждения) И 
			ВыполнитьПроверку("НеЗаблокирован"	,ВыводПредупреждения) И 
			ВыполнитьПроверку("НетУдалений"		,ВыводПредупреждения) И  
			ВыполнитьПроверку("Право.Дозаказ"	,ВыводПредупреждения)
			) Тогда
			Возврат;
		КонецЕсли; 
		
		Если ФормаПодбораТоваров <> Неопределено Тогда
			// меню уже открыто, выбираем другое меню
			ФормаПодбораТоваров.ВыборМеню();
			Возврат;
		КонецЕсли; 
		
		// обновим меню
		ИнтерфейсАдмина.ОбновлениеПризнакаНаличияВПродаже(Истина);
		// Получим ТипЦен если пусто
		Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда
			ТипЦен = Защита.ПолучитьТипЦен(?(ЗначениеЗаполнено(Заказ.МестоРеализации), Заказ.МестоРеализации, глРабочееМесто.МестоРеализации));
		КонецЕсли;
		
		ОбработкаПодбора = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПодборТоваров");
		ОбработкаПодбора.ТипЦен = ТипЦен;
		
		ФормаПодбораТоваров = ОбработкаПодбора.ПолучитьРабочуюФорму(ОсновноеМеню);
		Если ФормаПодбораТоваров = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		ФормаПодбораТоваров.ВладелецФормы	= ФормаЗаказа;
		Если ФормаЗаказа.ЭлементыФормы.Найти("ПанельШапка") <> Неопределено Тогда
			ФормаПодбораТоваров.ВерхняяГраницаПоложения	= ФормаЗаказа.ЭлементыФормы.ПанельШапка.Высота + 5;
		КонецЕсли; 
		
		// заполним текущий дозаказ
		// < КС_ВДВ ------------------------------------------------------------ 
		//Инд = ТаблицаЗаказа.Строки.Количество() - 1;
		Инд = ТаблицаЗаказаОтбор.Строки.Количество() - 1;
		// КС_ВДВ > ------------------------------------------------------------ 
		Если Инд >= 0 Тогда
			// чтобы из подбора корректно работало удаление надо спозиционировать на последнюю строку
			// < КС_ВДВ ------------------------------------------------------------ 
			//ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = ТаблицаЗаказа.Строки[Инд];
			ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = ТаблицаЗаказаОтбор.Строки[Инд];
			// КС_ВДВ > ------------------------------------------------------------ 
			Пока Инд >= 0 Цикл
				// < КС_ВДВ ------------------------------------------------------------ 
				//СтрокаТовара = ТаблицаЗаказа.Строки[Инд];
				СтрокаТовара = ТаблицаЗаказаОтбор.Строки[Инд];
				// КС_ВДВ > ------------------------------------------------------------ 
				Если СтрокаТовара.Статус <> СтатусДозаказ Тогда
					Прервать;
				КонецЕсли; 
				ФормаПодбораТоваров.Дозаказ.Вставить(0).Товар = СтрокаТовара.Товар;
				Инд = Инд - 1;
			КонецЦикла; 
		КонецЕсли; 
		
		ФормаПодбораТоваров.Открыть();
		
		// видоизменение формы заказа в зависимости от настройки меню
		глПараметрыРМ.Вставить("Окно1СИзменено", Ложь);
		ЭлементФормыТаблицаЗаказа	= ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа;
		ВысотаТаблицыЗаказа			= ЭлементФормыТаблицаЗаказа.Высота;
		ШиринаТаблицыЗаказа			= ЭлементФормыТаблицаЗаказа.Ширина;
		
		Если ФормаПодбораТоваров.ПараметрыНастройки.ПоложениеОкна = "Низ" Тогда
			
			Если ФормаПодбораТоваров.ПараметрыНастройки.СвободноеОкно Или Истина Тогда
				
				ВысотаДоМеню = глПараметрыРМ.ВысотаОкна1С - ФормаПодбораТоваров.ПараметрыОкна.Высота;
				
				Если ФормаПодбораТоваров.ПараметрыОкна.Ширина = глПараметрыРМ.ШиринаОкна1С И ВысотаДоМеню > 570 Тогда
					// уменьшаем окно 1С по высоте
					РаботаСокнами.SetWndSize( глПараметрыРМ.Окно1С, глПараметрыРМ.ШиринаОкна1С, ВысотаДоМеню );	// установить ширину и высоту окна
					глПараметрыРМ.Окно1СИзменено = Истина;
				Иначе
					// уменьшаем таблицу заказа так, чтобы была видна панель с кнопками
					ЭлементФормыТаблицаЗаказа.Высота	= ЭлементФормыТаблицаЗаказа.Высота - ФормаПодбораТоваров.ПараметрыОкна.Высота;
				КонецЕсли;
			Иначе
				// уменьшаем таблицу заказа так, чтобы таблица заказа не перекрывалась меню
				ЭлементФормыТаблицаЗаказа.Высота = ФормаПодбораТоваров.ПараметрыОкна.Верх - ЭлементФормыТаблицаЗаказа.Верх;
			КонецЕсли; 
			
		ИначеЕсли ФормаПодбораТоваров.ПараметрыНастройки.ПоложениеОкна = "Право" Тогда
			
			Если ФормаПодбораТоваров.ПараметрыНастройки.СвободноеОкно Тогда
				
				ШиринаДоМеню = глПараметрыРМ.ШиринаОкна1С - ФормаПодбораТоваров.ПараметрыОкна.Ширина;
				
				Если ФормаПодбораТоваров.ПараметрыОкна.Высота = глПараметрыРМ.ВысотаОкна1С И ШиринаДоМеню > 800 Тогда
					// уменьшаем окно 1С по ширине
					РаботаСокнами.SetWndSize( глПараметрыРМ.Окно1С, ШиринаДоМеню, глПараметрыРМ.ВысотаОкна1С );	// установить ширину и высоту окна
					глПараметрыРМ.Окно1СИзменено = Истина;
				Иначе
					// уменьшаем таблицу заказа так, чтобы была видна панель с кнопками
					ЭлементФормыТаблицаЗаказа.Ширина = ЭлементФормыТаблицаЗаказа.Ширина - ФормаПодбораТоваров.ПараметрыОкна.Ширина;
				КонецЕсли;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецПроцедуры
	
	Процедура ПриЗакрытииМеню() Экспорт
		
		Если глПараметрыРМ.Окно1СИзменено Тогда
			РаботаСокнами.SetWndSize( глПараметрыРМ.Окно1С, глПараметрыРМ.ШиринаОкна1С, глПараметрыРМ.ВысотаОкна1С );	// установить ширину и высоту окна
			глПараметрыРМ.Окно1СИзменено = Ложь;
		КонецЕсли; 
		
		Если ФормаЗаказа <> Неопределено Тогда
			ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.Высота	= ВысотаТаблицыЗаказа;
			ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.Ширина	= ШиринаТаблицыЗаказа;
		КонецЕсли; 
		
		ФормаПодбораТоваров = Неопределено;
		
	КонецПроцедуры
	
	// Описание процедуры
	//
	// Параметры:
	//	Параметр1	- описание параметра
	//
	Процедура ОбработкаПодбораТовара(ЗначениеВыбора) Экспорт
		
		Если НЕ( ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован")	И 
			ВыполнитьПроверку("НетУдалений")	И 
			ВыполнитьПроверку("Право.Дозаказ") 
			) Тогда
			Возврат;
		КонецЕсли; 
		
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.Товары") Тогда
			
			ВводНовойСтроки(ЗначениеВыбора);
			
		ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Массив") Тогда
			
			МассивТоваров = РазвернутьМассивТоваров(ЗначениеВыбора);
			Для каждого Товар Из МассивТоваров Цикл
				ВводНовойСтроки(Товар);
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Ввод товара по коду или штрих-коду
	//
	Функция ВводПоКоду(КодТовара=Неопределено, Молча = Ложь) Экспорт
		
		Если НЕ(ВыполнитьПроверку("ЗаказОткрыт"		) И 
			ВыполнитьПроверку("ПроверкаСмены"	) И 
			ВыполнитьПроверку("НетПресчета"		) И 
			ВыполнитьПроверку("НеЗаблокирован"	) И 
			ВыполнитьПроверку("НетУдалений"		) И 
			ВыполнитьПроверку("Право.Дозаказ"	) 
			) Тогда
			Возврат Истина;
		КонецЕсли; 
		
		Если КодТовара=Неопределено Тогда
			
			КодТовара = ИнтерфейсРМ.ВводЧисла("Код или штрих-код", "Строка", 13);
			Если КодТовара = Неопределено Тогда
				Возврат Истина;
			КонецЕсли; 
			
			КодТовара = СокрЛП(КодТовара);
			ФлагПовтора = Истина;
			
		Иначе
			ФлагПовтора = Ложь;
		КонецЕсли; 
		
		Колво = 0;
		
		Если Лев(КодТовара,14) = "Идентификатор_" Тогда
			
			ШК = СокрЛП(Сред(КодТовара,15));
			
			//Префикс = Число(Лев(ШК,2));
			Префикс = Лев(ШК,2);
			
			Если НЕ Справочники.ШаблоныШК.НайтиПоКоду(Префикс).Пустая() И НЕ Справочники.ШаблоныШК.НайтиПоКоду(Префикс).ПометкаУдаления Тогда	
				
				Справочники.ШаблоныШК.ПолучитьКодКоличествоИзШК(Префикс, ШК, КодТовара, Колво);
				
				ВыбТов = ИнтерфейсРМ.НайтиТоварПоКоду(КодТовара);
				
			Иначе	
				
				ВыбТов = ИнтерфейсРМ.НайтиТоварПоШтрихКоду(ШК,Колво);
				
			КонецЕсли;	
			
			Если НЕ ЗначениеЗаполнено(ВыбТов) И НЕ ФлагПовтора И НЕ глПараметрыРМ.ЕстьСчитыватель Тогда
				// Это вызов из обработки внешнего события!
				// Если нет считывателя карт, то возможно используются карты доступа со ШК, что будет проверено далее
				Возврат Ложь;
			КонецЕсли; 
			
		ИначеЕсли СтрДлина(КодТовара) > 5 Тогда
			ВыбТов = ИнтерфейсРМ.НайтиТоварПоШтрихКоду(КодТовара,Колво)
			
		Иначе
			ВыбТов = ИнтерфейсРМ.НайтиТоварПоКоду(КодТовара);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыбТов) Тогда
			Текст1="Код не найден!";
			Текст2="Код """+КодТовара+""" не найден в справочнике!
			|Попробуйте повторить ввод кода....";
			Если Молча=Ложь Тогда
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			КонецЕсли;
			Возврат Ложь;
			
		ИначеЕсли ТипЗнч(ВыбТов) = Тип("Массив") Тогда
			ВыбТов = ВыбратьТоварИзСписка(ВыбТов);
			
		ИначеЕсли ВыбТов.ЭтоГруппа Тогда
			МассивТоваров = Новый Массив;
			МассивТоваров.Добавить(ВыбТов);
			ВыбТов = ВыбратьТоварИзСписка(МассивТоваров);
			
		КонецЕсли;
		
		Если ВыбТов = Неопределено Тогда
			Возврат Истина;
		КонецЕсли; 
		
		ВводНовойСтроки(ВыбТов,Колво);
		
		Если ФлагПовтора Тогда
			Возврат ВводПоКоду();
		КонецЕсли;
		
		Возврат Истина;
	КонецФункции
	
	// Выбор конкретного товара для ввода из списка предложенных
	//
	Функция ВыбратьТоварИзСписка(МассивТоваров)
		
		МассивТоваров = РазвернутьМассивТоваров(МассивТоваров);
		
		Если МассивТоваров.Количество()=0 Тогда
			Возврат Справочники.Товары.ПустаяСсылка();
		ИначеЕсли МассивТоваров.Количество()=1 Тогда
			Возврат МассивТоваров[0];
		Иначе	
			Возврат ИнтерфейсРМ.ВыборИзСписка(МассивТоваров);
		КонецЕсли;
		
	КонецФункции
	
	// В исходном списке могут быть и товары "не в продаже" и группы,
	// надо из него получить полный список всех товаров "в продаже"
	Функция РазвернутьМассивТоваров(МассивТоваров)
		
		МассивДляВыбора = Новый Массив;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ Ссылка ИЗ Справочник.Товары
		|ГДЕ Ссылка В ИЕРАРХИИ (&МассивТоваров) И НЕ ЭтоГруппа И НЕ ПометкаУдаления И ЕстьВПродаже
		|
		|УПОРЯДОЧИТЬ ПО Порядок");
		
		Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивДляВыбора.Добавить(Выборка.Ссылка);
		КонецЦикла; 
		
		Если МассивДляВыбора.Количество()=0 Тогда
			Текст1="Нет доступа!";
			
			Если МассивТоваров.Количество()=1 Тогда
				Тов = МассивТоваров[0];
				Если Тов.ЭтоГруппа Тогда
					Текст2="В группе """+Тов.Наименование+""" ничего нет в продаже...";
				Иначе
					Текст2="Товара """+Тов.Наименование+""" нет в продаже...";
				КонецЕсли;
			Иначе
				Текст2="Среди выбранных товаров ничего нет в продаже...";
			КонецЕсли;
			
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли;
		
		Возврат МассивДляВыбора;
	КонецФункции
	
	
	// Изменение количества в текущей строке заказа
	//
	Процедура ИзменитьКоличество() Экспорт
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//СтрокаЗаказа = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
		СтрокаЗаказаОтбор = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
		СтрокаЗаказа = ?(СтрокаЗаказаОтбор <> Неопределено, СтрокаЗаказаОтбор.СтрокаТаблицыЗаказа, Неопределено);






		// КС_ВДВ > ------------------------------------------------------------ 
		
		Если СтрокаЗаказа = Неопределено Тогда
			Возврат;
		ИначеЕсли СтрокаЗаказа.Уровень() > 0 Тогда
			Возврат;
			
		ИначеЕсли ИнтерфейсРМ.ЭтоТариф(СтрокаЗаказа.Товар) Тогда
			ЗапросВремениПоТарифу(СтрокаЗаказа);
			Возврат;
			
					
		ИначеЕсли НЕ( ВыполнитьПроверку("ЗаказОткрыт")
			И ВыполнитьПроверку("ПроверкаСмены")
			И ВыполнитьПроверку("НетПресчета")
			И ВыполнитьПроверку("НеЗаблокирован")
			) Тогда
			Возврат;
			
			// < КС_ВДВ ------------------------------------------------------------ 
		ИначеЕсли НЕ ВыполнитьПроверкуПоСтанции(СтрокаЗаказа) Тогда
			Возврат; //Корректировка возможна только по строкам, добавленным на текущий станции.
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли;
		
		Если Цел(СтрокаЗаказа.Товар.КратностьКоличества) <> СтрокаЗаказа.Товар.КратностьКоличества Тогда
			Длина		= 10;
			Точность	= 3;
		Иначе
			Длина		= 6;
			Точность	= 0;
		КонецЕсли;
		
		Колво = ИнтерфейсРМ.ВводЧисла("Количество", "Число", Длина, Точность, СтрокаЗаказа.Количество, СтрокаЗаказа.Товар.КратностьКоличества);




		
		Если Колво=СтрокаЗаказа.Количество ИЛИ Колво=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаЗаказа.Статус = СтатусДозаказ Тогда
			
			Если Колво=0 Тогда
				Если СтрокаЗаказа.АвтоПозиция Тогда
					Текст1="Нет доступа!";
					Текст2="Нельзя удалить обязательную позицию заказа...";
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
					Возврат;
				КонецЕсли;
				
				УдалитьНеЗаказанное(СтрокаЗаказа);
				
			Иначе
				СтрокаЗаказа.Количество = Колво;
				РасчетПоСтроке(СтрокаЗаказа);
				
				// < КС_ВДВ ------------------------------------------------------------ 
				ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаЗаказа, СтрокаЗаказаОтбор);
				// КС_ВДВ > ------------------------------------------------------------ 
				
				Если НЕ РежимПредЗаказ Тогда
					ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказИзменениеКоличестваНезаказаннойПозиции, Заказ.Ссылка, СтрокаЗаказа.Товар.Код, СтрокаЗаказа.Товар.Наименование, СтрокаЗаказа.Количество);
				КонецЕсли;
				
			КонецЕсли;
			
			РасчетПоЗаказу();
			Модифицирован = Истина;
			
			Если НЕ РежимПредЗаказ Тогда
				ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
				"Изменение количества..."	,,
				"ИТОГО:"					,Заказ.ИтоговаяСумма);
			КонецЕсли;
			
		Иначе
			// изменение кол-ва у заказанной позиции
			Если Колво > СтрокаЗаказа.Количество  Тогда
				Если НЕ( ВыполнитьПроверку("НетУдалений")
					И ВыполнитьПроверку("Право.Дозаказ") 
					) Тогда
					Возврат;
				КонецЕсли; 
				
				ВводНовойСтроки(СтрокаЗаказа.Товар, Колво - СтрокаЗаказа.Количество);	
				
			Иначе
				УдалитьСтроку(СтрокаЗаказа.Количество - Колво);
			КонецЕсли;
			
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		ВыводЗаказаНаИнфоДисплей();
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецПроцедуры	
	// Удаление текущей строки заказа
	//
	Процедура УдалитьСтроку(Колво=0, ИзПодбора=Ложь) Экспорт
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//СтрокаЗаказа = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
		СтрокаЗаказаОтбор = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
		СтрокаЗаказа = ?(СтрокаЗаказаОтбор <> Неопределено, СтрокаЗаказаОтбор.СтрокаТаблицыЗаказа, Неопределено);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		Если СтрокаЗаказа = Неопределено Тогда
			Возврат;
			
		ИначеЕсли НЕ( ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован")
			) Тогда
			Возврат;
			
			// < КС_ВДВ ------------------------------------------------------------ 
		ИначеЕсли НЕ ВыполнитьПроверкуПоСтанции(СтрокаЗаказа) Тогда
			Возврат; //Корректировка возможна только по строкам, добавленным на текущий станции.
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли;
		
		Если СтрокаЗаказа.Уровень() > 0 И ИзПодбора Тогда
			// из формы подбора удаляем не специфику а сразу позицию
			СтрокаЗаказа = СтрокаЗаказа.Родитель;
		КонецЕсли;
		
		Если СтрокаЗаказа.Уровень() > 0 Тогда
			Если СтрокаЗаказа.Статус = СтатусДозаказ Тогда
				УдалитьСпецифику(СтрокаЗаказа);
			Иначе
				Текст1="Нет доступа!";
				Текст2="Нельзя удалить уже заказанную специфику!";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат;
			КонецЕсли;
			
		ИначеЕсли СтрокаЗаказа.Статус <> СтатусДозаказ Тогда
			Если НЕ УдалитьЗаказанное(СтрокаЗаказа,,Колво) Тогда
				Возврат;
			КонецЕсли;
			
		ИначеЕсли СтрокаЗаказа.АвтоПозиция Тогда 
			Текст1="Нет доступа!";
			Текст2="Нельзя удалить обязательную позицию заказа!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
			
		Иначе
			УдалитьНеЗаказанное(СтрокаЗаказа);
			
		КонецЕсли;
		
		РасчетПоЗаказу();
		Модифицирован = Истина;
		
		Если НЕ РежимПредЗаказ Тогда
			ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
			"Удаление..."	,,
			"ИТОГО:"		,Заказ.ИтоговаяСумма);
		КонецЕсли;
		
		ПолучитьРекомендации(Ложь);
		
		// Отобразить изменения на ИнфоДисплее
		// < КС_ВДВ ------------------------------------------------------------ 
		//ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ.Ссылка, ТаблицаЗаказа, СписокРекомендаций);							
		ВыводЗаказаНаИнфоДисплей();
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецПроцедуры
	
	// Удаление еще не заказанной позиции
	//
	Процедура УдалитьНеЗаказанное(СтрокаЗаказа)
		
		Если НЕ РежимПредЗаказ Тогда
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказУдалениеНезаказаннойПозиции, Заказ.Ссылка, СтрокаЗаказа.Товар.Код, СтрокаЗаказа.Товар.Наименование, СтрокаЗаказа.Количество);
		КонецЕсли;
		
		Родитель = ?(СтрокаЗаказа.Родитель = Неопределено, ТаблицаЗаказа, СтрокаЗаказа.Родитель);
		
		ИндексТекСтроки = Родитель.Строки.Индекс(СтрокаЗаказа);
		
		// < КС_ВДВ ------------------------------------------------------------ 
		СтрокаЗаказаОтбор = ПолучитьСтрокуЗаказаОтбор(СтрокаЗаказа);
		РодительОтбор = ?(СтрокаЗаказаОтбор.Родитель = Неопределено, ТаблицаЗаказаОтбор, СтрокаЗаказаОтбор.Родитель);
		
		ИндексТекСтрокиОтбор = РодительОтбор.Строки.Индекс(СтрокаЗаказаОтбор);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		// корректное удаление строки дерева
		//Родитель.Строки.Удалить(СтрокаЗаказа);
		УдалитьСтрокуДерева(Родитель, СтрокаЗаказа);
		
		// < КС_ВДВ ------------------------------------------------------------ 
		Если (РодительОтбор <> Неопределено) И (СтрокаЗаказаОтбор <> Неопределено) Тогда
			УдалитьСтрокуДерева(РодительОтбор, СтрокаЗаказаОтбор);
		КонецЕсли; 
		// КС_ВДВ > ------------------------------------------------------------ 
		
		Оповестить("УдалениеДозаказа");	// для формы подбора
		
		ЕстьДозаказ = ТаблицаЗаказа.Строки.Найти(СтатусДозаказ,"Статус",Истина) <> Неопределено;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//Если Родитель.Строки.Количество() > 0 Тогда
		//	ИндексТекСтроки = Мин( ИндексТекСтроки, Родитель.Строки.Количество()-1 );
		//	ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = Родитель.Строки[ИндексТекСтроки];
		//КонецЕсли; 
		
		Если РодительОтбор.Строки.Количество() > 0 Тогда
			ИндексТекСтрокиОтбор = Мин( ИндексТекСтрокиОтбор, РодительОтбор.Строки.Количество()-1 );
			ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = РодительОтбор.Строки[ИндексТекСтрокиОтбор];
		КонецЕсли; 
		// КС_ВДВ > ------------------------------------------------------------ 
		
		ПолучитьРекомендации(Ложь);
		
		// Отобразить изменения на ИнфоДисплее
		// < КС_ВДВ ------------------------------------------------------------ 
		//ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ.Ссылка, ТаблицаЗаказа, СписокРекомендаций);	
		ВыводЗаказаНаИнфоДисплей();
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецПроцедуры
	
	// Удаление строки - специфики
	//
	Процедура УдалитьСпецифику(СтрокаСпецифик)
		
		СтрокаТовара = СтрокаСпецифик.Родитель;
		ИндексТекСтроки = СтрокаТовара.Строки.Индекс(СтрокаСпецифик);
		
		// < КС_ВДВ ------------------------------------------------------------ 
		СтрокаСпецификОтбор = ПолучитьСтрокуЗаказаОтбор(СтрокаСпецифик);
		
		СтрокаТовараОтбор = СтрокаСпецификОтбор.Родитель;
		ИндексТекСтрокиОтбор = СтрокаТовараОтбор.Строки.Индекс(СтрокаСпецификОтбор);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		// корректное удаление строки дерева
		//СтрокаТовара.Строки.Удалить(СтрокаСпецифик);
		УдалитьСтрокуДерева(СтрокаТовара, СтрокаСпецифик);
		
		// < КС_ВДВ ------------------------------------------------------------ 
		Если (СтрокаТовараОтбор <> Неопределено) И (СтрокаСпецификОтбор <> Неопределено) Тогда
			УдалитьСтрокуДерева(СтрокаТовараОтбор, СтрокаСпецификОтбор);
		КонецЕсли;
		// КС_ВДВ > ------------------------------------------------------------ 
		
		ВыбТов = СтрокаТовара.Товар;
		АвтоПозиция = СтрокаТовара.АвтоПозиция;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		// Будем контролировать все специфики по товару
		СтрокаТовара = ПолучитьСтрокуТовара(СтрокаТовара);
		АвтоПозиция = СтрокаТовара.АвтоПозиция;
		ВыбТов = СтрокаТовара.Товар;
		// КС_ВДВ > ------------------------------------------------------------ 
		Если НЕ ПроверитьДобавитьСпецифику(СтрокаТовара) Тогда
			// отказались от выбора обязательной специфики
			Если СтрокаТовара.Статус = СтатусДозаказ Тогда
				УдалитьНеЗаказанное(СтрокаТовара);
				
				Если АвтоПозиция Тогда
					// нельзя отказаться от ввода
					Текст1="Обязательная позиция!";
					Текст2="Нельзя отказаться от ввода обязательной позиции!";
					ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
					ВводНовойСтроки( ВыбТов, , АвтоПозиция );
				КонецЕсли;
				
			Иначе
				Пока НЕ ПроверитьДобавитьСпецифику(СтрокаТовара) Цикл
					// нельзя отказаться от ввода
					Текст1="Обязательная специфика!";
					Текст2="Нельзя отказаться от ввода обязательной специфики!";
					ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
				КонецЦикла; 
				
			КонецЕсли;
			
			Возврат;
		КонецЕсли; 
		
		РасчетПоСтроке(СтрокаТовара);
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//Если СтрокаТовара.Строки.Количество()=0 Тогда
		//	ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = СтрокаТовара;
		//Иначе
		//	ИндексТекСтроки = Мин( ИндексТекСтроки, СтрокаТовара.Строки.Количество()-1 );
		//	ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = СтрокаТовара.Строки[ИндексТекСтроки];
		//КонецЕсли; 
		
		Если СтрокаТовараОтбор.Строки.Количество()=0 Тогда
			ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = СтрокаТовараОтбор;
		Иначе
			ИндексТекСтрокиОтбор = Мин( ИндексТекСтрокиОтбор, СтрокаТовараОтбор.Строки.Количество()-1 );
			ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = СтрокаТовараОтбор.Строки[ИндексТекСтрокиОтбор];
		КонецЕсли; 
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецПроцедуры
	
	// Удаление заказанной позиции
	//
	Функция УдалитьЗаказанное(СтрокаЗаказа, ПричинаУдаления=Неопределено, Колво=0)
		
		Если СтрокаЗаказа.Количество=0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если ПричинаУдаления=Неопределено Тогда
			
			Если НЕ( ВыполнитьПроверку("Право.УдалениеПозиций")	И 
				ВыполнитьПроверку("НетДозаказа") 
				) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			
			Если Колво=0 Тогда
				Если Цел(СтрокаЗаказа.Товар.КратностьКоличества) <> СтрокаЗаказа.Товар.КратностьКоличества Тогда
					Длина		= 10;
					Точность	= 3;
				Иначе
					Длина		= 6;
					Точность	= 0;
				КонецЕсли;
				
				УдаляемоеКолво = ИнтерфейсРМ.ВводЧисла("Удаляемое количество", "Число", Длина, Точность, СтрокаЗаказа.Количество, СтрокаЗаказа.Товар.КратностьКоличества);
				
				Если УдаляемоеКолво=0 ИЛИ УдаляемоеКолво=Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
				
			Иначе
				УдаляемоеКолво = Колво;
				
			КонецЕсли; 
			
			Если СтрокаЗаказа.АвтоПозиция Тогда
				Если УдаляемоеКолво >= СтрокаЗаказа.Количество Тогда
					Текст1="Нет доступа!";
					Текст2="Нельзя удалить обязательную позицию заказа!";
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
					Возврат Ложь;	
				КонецЕсли;
				
			ИначеЕсли УдаляемоеКолво > СтрокаЗаказа.Количество Тогда
				Текст1="Ошибка!";
				Текст2="Нельзя удалить количество большее, чем есть в заказе!";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат Ложь;
				
			КонецЕсли;
			
			// выбор причины
			ВыбПричина = ИнтерфейсРМ.ВыборПричиныОтказа(Перечисления.ТипыПричинУдалений.Удаление);
			Если ВыбПричина=Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			УдаляемоеКолво	= ?(Колво=0, СтрокаЗаказа.Количество, Колво);
			ВыбПричина		= ПричинаУдаления;
		КонецЕсли; 
		
		
		СтрокаЗаказа.Статус			= СтатусУдалено;
		СтрокаЗаказа.Количество		= СтрокаЗаказа.Количество	 - УдаляемоеКолво;
		СтрокаЗаказа.Удалено		= СтрокаЗаказа.Удалено		 + УдаляемоеКолВо;
		СтрокаЗаказа.УдаленоСейчас	= СтрокаЗаказа.УдаленоСейчас + УдаляемоеКолВо;
		
		Если ИнтерфейсРМ.ЭтоТариф(СтрокаЗаказа.Товар) Тогда
			СтрокаЗаказа.ФлагИзменениеВремени = Истина;
		КонецЕсли; 
		
		РасчетПоСтроке(СтрокаЗаказа);
		ЕстьУдаление = Истина;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаЗаказа);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		//данные для документа "Удаление"
		СтрокаУдаления = ТаблицаУдалений.Строки.Добавить();
		СтрокаУдаления.Товар		= СтрокаЗаказа.Товар;
		СтрокаУдаления.Количество	= УдаляемоеКолво;
		СтрокаУдаления.Причина		= ВыбПричина;
		СтрокаУдаления.ГруппаПечати	= СтрокаЗаказа.ГруппаПечати;
		СтрокаУдаления.Сумма		= УдаляемоеКолво * СтрокаЗаказа.Цена;
		СтрокаУдаления.ТипЦен		= СтрокаЗаказа.ТипЦен;
		
		УдалитьЗаказанныеСпецифики(СтрокаЗаказа, СтрокаУдаления);
		
		Если ПричинаУдаления=Неопределено Тогда
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказУдалениеЗаказаннойПозиции, Заказ.Ссылка, СтрокаЗаказа.Товар.Код, СтрокаЗаказа.Товар.Наименование, УдаляемоеКолво, ВыбПричина);
		КонецЕсли; 
		
		Возврат Истина;
	КонецФункции
	
	Процедура УдалитьЗаказанныеСпецифики(СтрокаТовара, СтрокаУдаления)
		
		Для каждого СтрокаСпецифики Из СтрокаТовара.Строки Цикл
			СтрокаСпецифики.Статус			= СтатусУдалено;
			СтрокаСпецифики.УдаленоСейчас	= СтрокаТовара.УдаленоСейчас;
			
			// < КС_ВДВ ------------------------------------------------------------ 
			ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаСпецифики);
			// КС_ВДВ > ------------------------------------------------------------ 
			
			//данные для документа "Удаление"
			УдалениеСпецифик = СтрокаУдаления.Строки.Добавить();
			УдалениеСпецифик.Товар			= СтрокаСпецифики.Товар;
			
			// вложенные специфики
			УдалитьЗаказанныеСпецифики(СтрокаСпецифики, СтрокаУдаления);
		КонецЦикла;
		
	КонецПроцедуры
	
	// Удаление заказа из журнала
	//
	Процедура УдалитьВсеЗаказанное() Экспорт
		
		Если НЕ( (Заказ.Доставка ИЛИ ВыполнитьПроверку("НетПресчета"))	И 
			ВыполнитьПроверку("НеЗаблокирован")
			) Тогда
			Возврат;
		КонецЕсли;
		
		// если в заказе уже все удалили построчно, то из журнала останется только поставить статус
		Если ТаблицаЗаказа.Строки.Итог("Количество")=0 Тогда
			НаимПричиныУдаления = "Удалены все позиции";
		Иначе
			// выбор причины
			ВыбПричина = ИнтерфейсРМ.ВыборПричиныОтказа(Перечисления.ТипыПричинУдалений.Удаление);
			Если ВыбПричина=Неопределено Тогда
				Возврат;
			КонецЕсли;
			// удаление всех позиций, позиции дозаказа (могут быть в доставке) просто удаляем 
			СтрокиДозаказа = Новый Массив;
			Для каждого СтрокаЗаказа Из ТаблицаЗаказа.Строки Цикл
				Если СтрокаЗаказа.Статус = СтатусДозаказ Тогда
					СтрокиДозаказа.Добавить(СтрокаЗаказа);
				Иначе
					УдалитьЗаказанное(СтрокаЗаказа, ВыбПричина);
				КонецЕсли; 
			КонецЦикла; 
			Для каждого СтрокаЗаказа Из СтрокиДозаказа Цикл
				// < КС_ВДВ ------------------------------------------------------------
				СтрокаЗаказаОтбор = ПолучитьСтрокуЗаказаОтбор(СтрокаЗаказа);
				// КС_ВДВ > ------------------------------------------------------------ 
				ТаблицаЗаказа.Строки.Удалить(СтрокаЗаказа);
				// < КС_ВДВ ------------------------------------------------------------ 
				Если СтрокаЗаказаОтбор <> Неопределено Тогда
					ТаблицаЗаказаОтбор.Строки.Удалить(СтрокаЗаказаОтбор);
				КонецЕсли; 
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЦикла; 
			
			ЕстьДозаказ = Ложь;
			Модифицирован = Истина;
			
			ЕстьОтказы = НЕ ПечатьМарок();
			ЗаписатьЗаказ();	// записывается только то, что распечаталось
			
			Если ЕстьОтказы Тогда
				Возврат;
			КонецЕсли;
			
			НаимПричиныУдаления = ВыбПричина.Наименование;
		КонецЕсли; 
		
		// запись статуса заказа в регистр сведений
		ЗаказДопИнф.Статус		 = Перечисления.СтатусыЗаказа.Удален;
		ЗаказДопИнф.ДатаЗакрытия = ТекущаяДата();
		ИнтерфейсРМ.ПопыткаДействияСОбъектом( ЗаказДопИнф, "Объект.Записать()" );
		
		// < КС_ВДВ ------------------------------------------------------------ 
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(Заказ.Ссылка);
		ксТрактир.СнятьМаркиСУчета("Заказ", МассивЗаказов);
		
		ксТрактир.ОсвободитьКартуДоступаОтЗаказа(Заказ.Ссылка);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		//Если Заказ.Доставка И ДоставкаДопИнф.Статус <> Перечисления.СтатусыДоставки.Отказ Тогда
		//	ВнешнийЗаказ.ЗаписатьСтатусДоставки(Заказ.Ссылка, Перечисления.СтатусыДоставки.Отказ);
		//КонецЕсли; 
		//
		//Если ЗначениеЗаполнено(Заказ.ВнешнийНомер) Тогда
		//	ПолучитьПоследнийСтатусДоставки(Заказ.Ссылка);// pr отправлялся пустой статус при фоновой печати (проверить все)
		//	ВнешнийЗаказ.ВыгрузитьДокумент(Заказ.Ссылка, ДоставкаДопИнф);
		//КонецЕсли;
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказУдалениеНеПустого, Заказ.Ссылка, УбратьВсеБуквы(Заказ.Номер), НаимПричиныУдаления);
		
		// если заказ по брони, то надо снять признак
		Если глВерсия>1 И ЗначениеЗаполнено(Заказ.Бронь) Тогда
			БроньОбъект = Заказ.Бронь.ПолучитьОбъект();
			БроньОбъект.Закрыто = Ложь;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом( БроньОбъект, "Объект.Записать()" ,,,Заказ.Ссылка);
		КонецЕсли; 
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// РАСЧЕТЫ СУММ И СКИДОК
	
	// Расчет сумм по строке заказа
	//
	Процедура РасчетПоСтроке(СтрокаЗаказа)
		
		Если ИнтерфейсРМ.ЭтоТариф(СтрокаЗаказа.Товар) Тогда
			
			Если СтрокаЗаказа.Статус=СтатусУдалено И СтрокаЗаказа.Количество=0 Тогда
				// если позицию удалили целиком, то таблица расчетов все равно остается
				// поэтому просто обнуляем
				СтрокаЗаказа.Сумма		= 0;
				СтрокаЗаказа.Цена		= 0;
			Иначе
				СтрокаЗаказа.Количество = СтрокаЗаказа.РасчетыПоТарифу.Итог("Количество");
				СтрокаЗаказа.Сумма		= ПересчетВалют( СтрокаЗаказа.РасчетыПоТарифу.Итог("Сумма"), СтрокаЗаказа.Тариф.Валюта);
				СтрокаЗаказа.Цена		= ?(СтрокаЗаказа.Количество=0, 0, СтрокаЗаказа.Сумма / СтрокаЗаказа.Количество);
				// сумму в итоге округляем по общему правилу
				СтрокаЗаказа.Сумма 		= ОкруглитьЧисло(СтрокаЗаказа.Сумма, СтрокаЗаказа.Категория.ПравилоОкругления);
			КонецЕсли;
			
		Иначе
			СтрокаЗаказа.Сумма = ОкруглитьЧисло(СтрокаЗаказа.Количество*(СтрокаЗаказа.Цена+СтрокаЗаказа.Строки.Итог("Цена")), СтрокаЗаказа.Категория.ПравилоОкругления);
		КонецЕсли; 
		
		СтрокаЗаказа.ЦенаРеализации	= СтрокаЗаказа.Цена;
		СтрокаЗаказа.СуммаРеализации= СтрокаЗаказа.Сумма;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаЗаказа);	
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецПроцедуры
	
	// Расчет итоговых сумм по заказу
	//
	Процедура РасчетПоЗаказу()
		
		Если НЕ РежимПредЗаказ Тогда
			Заказ.ИтоговаяСумма = ТаблицаЗаказа.Строки.Итог("СуммаРеализации");
			Заказ.ИтогоСумма = ТаблицаЗаказа.Строки.Итог("Сумма");
		КонецЕсли;
		
		Если НЕ ФоновыйРежим Тогда
			ЗаполнитьТаблицуКатегорий();
		КонецЕсли; 
		
	КонецПроцедуры
	
	// заполнение таблицы сумм по категориям
	//
	Процедура ЗаполнитьТаблицуКатегорий()
		
		ТаблицаКатегорий.Очистить();
		Для каждого СтрокаЗаказа Из ТаблицаЗаказа.Строки Цикл
			Если СтрокаЗаказа.СуммаРеализации=0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаКатегорий = ТаблицаКатегорий.Найти(СтрокаЗаказа.Категория,"Категория");
			Если СтрокаКатегорий=Неопределено Тогда
				СтрокаКатегорий = ТаблицаКатегорий.Добавить();
				СтрокаКатегорий.Категория = СтрокаЗаказа.Категория;
			КонецЕсли;
			
			СтрокаКатегорий.Сумма = СтрокаКатегорий.Сумма + СтрокаЗаказа.СуммаРеализации;
		КонецЦикла;
		
		ТаблицаКатегорий.Сортировать("Категория");
		
	КонецПроцедуры
	
	// Расчет итоговых сумм по заказу с учетом всех скидок
	//
	Процедура РасчетПоЗаказуПолный( СкидкаНаВариантОплаты=Неопределено ) Экспорт
		
		РасчетПоЗаказу();		
		
		// < КС_ВДВ ------------------------------------------------------------ 
		ОбновитьСтрокиТоваровТаблицыЗаказаОтбор();
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ПРОЧЕЕ
	
	// Стандартное оформление строки заказа в соответствии с настройками РМ
	//
	Процедура ОформлениеСтрокиЗаказа(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
		
		СтрокаТовара = ДанныеСтроки;
		КартинкаСтрокиТовара = 0;
		
		Если ДанныеСтроки.Уровень()=0 Тогда
			// < КС_ВДВ ------------------------------------------------------------ 
			//ОформлениеСтроки.Ячейки.Ном.Текст = ТаблицаЗаказа.Строки.Индекс(ДанныеСтроки)+1;
			ОформлениеСтроки.Ячейки.Ном.Текст = ТаблицаЗаказаОтбор.Строки.Индекс(ДанныеСтроки)+1;
			// КС_ВДВ > ------------------------------------------------------------ 
			ШрифтСтроки = глПараметрыРМ.ЗаказШрифтОсновной;
		Иначе
			ШрифтСтроки = глПараметрыРМ.ЗаказШрифтСпецифик;
			Пока ЗначениеЗаполнено(СтрокаТовара.Родитель) Цикл
				СтрокаТовара = СтрокаТовара.Родитель;
			КонецЦикла; 
		КонецЕсли; 
		
		Колво = СтрокаТовара.Количество;
		
		Если ШрифтСтроки.Вид = ВидШрифта.АвтоШрифт Тогда
			ШрифтСтроки = ОформлениеСтроки.Шрифт;
		КонецЕсли; 
		
		Если Колво=0 И НЕ(ДанныеСтроки.Статус = СтатусДозаказ ИЛИ ДанныеСтроки.Статус = СтатусТарифВкл) Тогда
			ШрифтСтроки = Новый Шрифт(ШрифтСтроки,,,,,,Истина);	// зачеркнутый
		КонецЕсли; 
		
		ОформлениеСтроки.Шрифт = ШрифтСтроки;
		
		// чересполосица по дозаказам и подачам
		Если глПараметрыРМ.ЗаказВыделятьДозаказы И ДанныеСтроки.Статус <> СтатусДозаказ Тогда
			ПодачаЧетная = (ТаблицаПодач.Индекс(СтрокаТовара.Подача)+1) % 2 = 0;
			ФонСтроки = ?(ПодачаЧетная, глПараметрыРМ.ЗаказВыделятьДозаказыЦветЧет, глПараметрыРМ.ЗаказВыделятьДозаказыЦветНечет);
			Если ФонСтроки.Вид <> ВидЦвета.АвтоЦвет Тогда
				ОформлениеСтроки.ЦветФона = ФонСтроки;
			КонецЕсли; 
		КонецЕсли; 
		
		// статус
		ЯчейкаСтатус = ОформлениеСтроки.Ячейки.Статус;
		
		Если ДанныеСтроки.Статус = СтатусДозаказ Тогда
			ЯчейкаСтатус.ОтображатьКартинку	= Ложь;
			//pr ПоказатьПодачу = глВерсия>1 И глПараметрыРМ.ЗаказИспользоватьКурсы И ДанныеСтроки.Уровень()=0 И НЕ РежимПредЗаказ;
			ПоказатьПодачу = глВерсия>1 И ИспользоватьЗаказТоварыДопИнф И ИспользоватьКурсы И ДанныеСтроки.Уровень()=0 И НЕ РежимПредЗаказ;
			// < КС_ВДВ ------------------------------------------------------------ 
			//Если НЕ ПоказатьПодачу Тогда
			//	ЯчейкаСтатус.ОтображатьТекст	= Ложь;
			//Иначе
			//	ЯчейкаСтатус.ОтображатьТекст	= Истина;
			//	ЯчейкаСтатус.Текст		= ДанныеСтроки.Подача.Номер;
			//	ЯчейкаСтатус.ЦветФона	= Новый Цвет(128,0,128);	// бардовый
			//	ЯчейкаСтатус.ЦветТекста = Новый Цвет(255,255,255);	// белый
			//КонецЕсли; 
			
			// *** Здесь выводился № марки ***
			//ЯчейкаСтатус.ОтображатьТекст	= Истина;
			//ЯчейкаСтатус.Текст 			= "";
			//ЯчейкаСтатус.ЦветФона			= ЦветДругое;
			
			// *** Здесь выводится курс подачи ***
			ЯчейкаСтатус.ОтображатьТекст	= Истина;
			
			Если ДанныеСтроки.Уровень() = 0 Тогда
				ЯчейкаСтатус.Текст = ДанныеСтроки.Подача.Номер;
			Иначе
				ЯчейкаСтатус.Текст = "";
			КонецЕсли; 
			
			ЯчейкаСтатус.ЦветФона			= ЦветДозаказ;
			ЯчейкаСтатус.ЦветТекста 		= ЦветТекстаДозаказ;
			
			// *** Здесь выводится курс подачи ***
			//Если НЕ ПоказатьПодачу Тогда
			//	ЯчейкаСтатус.ОтображатьТекст	= Ложь;
			//Иначе
			//	ЯчейкаСтатус.ОтображатьТекст	= Истина;
			//	ЯчейкаСтатус.Текст				= ДанныеСтроки.Подача.Номер;
			//	ЯчейкаСтатус.ЦветФона			= ЦветДозаказ;
			//	ЯчейкаСтатус.ЦветТекста 		= ЦветТекстаДозаказ;
			//КонецЕсли; 
			// КС_ВДВ > ------------------------------------------------------------ 
		Иначе
			// < КС_ВДВ ------------------------------------------------------------ 
			//ЯчейкаСтатус.ОтображатьТекст	= Ложь;
			//ЯчейкаСтатус.ОтображатьКартинку	= Истина;
			//
			//Если ДанныеСтроки.Статус = СтатусУдалено Тогда
			//	ЯчейкаСтатус.ИндексКартинки = 1;
			//ИначеЕсли ДанныеСтроки.СтатусДопИнф = Перечисления.СтатусыПозицийЗаказа.Готово Тогда 
			//	ЯчейкаСтатус.ИндексКартинки = 4;
			//ИначеЕсли ДанныеСтроки.СтатусДопИнф = Перечисления.СтатусыПозицийЗаказа.Выдано Тогда
			//	ЯчейкаСтатус.ИндексКартинки = 5;
			//ИначеЕсли ДанныеСтроки.Статус = СтатусЗаказано Тогда
			//	ЯчейкаСтатус.ИндексКартинки = 0;
			////ИначеЕсли ДанныеСтроки.Статус = СтатусУдалено Тогда
			////	ЯчейкаСтатус.ИндексКартинки = 1;
			//ИначеЕсли ДанныеСтроки.Статус = СтатусТарифВкл Тогда
			//	ЯчейкаСтатус.ИндексКартинки = 2;
			//ИначеЕсли ДанныеСтроки.Статус = СтатусОтложено Тогда
			//	ЯчейкаСтатус.ИндексКартинки = 3;// Картинка отсутствует
			//КонецЕсли; 
			
			ЯчейкаСтатус.ОтображатьТекст	= Истина;
			ЯчейкаСтатус.ОтображатьКартинку	= Ложь;
			
			// *** Здесь выводился № марки ***
			//Если ДанныеСтроки.Уровень() = 0 Тогда
			//	ЯчейкаСтатус.Текст = ДанныеСтроки.НомерМарки;
			//Иначе
			//	ЯчейкаСтатус.Текст = "";
			//КонецЕсли; 
			
			// *** Здесь выводится курс подачи ***
			Если ДанныеСтроки.Уровень() = 0 Тогда
				ЯчейкаСтатус.Текст = ДанныеСтроки.Подача.Номер;
			Иначе
				ЯчейкаСтатус.Текст = "";
			КонецЕсли; 
			
			Если ДанныеСтроки.Статус = СтатусУдалено Тогда
				ЯчейкаСтатус.ЦветФона	= ЦветДругое;
			ИначеЕсли ДанныеСтроки.СтатусДопИнф = СтатусГотово Тогда 
				ЯчейкаСтатус.ЦветФона	= ЦветГотово;
			ИначеЕсли ДанныеСтроки.СтатусДопИнф = СтатусВыдано Тогда
				ЯчейкаСтатус.ЦветФона	= ЦветВыдано; 
			ИначеЕсли ДанныеСтроки.СтатусДопИнф = СтатусЗаказано Тогда
				Если Колво=0 Тогда
					// здесь зачеркнутый текст - в строке товара нет количества
					ЯчейкаСтатус.ЦветФона	= ЦветДругое;
				Иначе	
					ЯчейкаСтатус.ЦветФона	= ЦветЗаказано;
				КонецЕсли; 
			Иначе
				ЯчейкаСтатус.ЦветФона	= ЦветДругое;
			КонецЕсли; 
			
			ЯчейкаСтатус.ЦветТекста = ЦветТекстаСтатус;	
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли; 
		
				
		// подсветка акций
		//Если ДанныеСтроки.Уровень()=0 Тогда
			ЯчейкаТовар = ОформлениеСтроки.Ячейки.Наименование;
			Отбор = новый Структура("Номенклатура",ДанныеСтроки.Товар.Номенклатура);
			пСтроки = ТаблицаАкций.НайтиСтроки(Отбор);
			Если пСтроки.Количество()>0 тогда
				Если ЗначениеЗаполнено(пСтроки[0].ВидАкции) тогда
					ЯчейкаТовар.ЦветФона = пСтроки[0].ВидАкции.ЦветФона.Получить(); 
				КонецЕсли;
			КонецЕсли;
		//КонецЕсли;
		
		Если ТипЗнч(ДанныеСтроки.Товар)=Тип("СправочникСсылка.Специфики") и ксТрактир.ОбщаяСпецифика(ДанныеСтроки.Товар) Тогда
			ОформлениеСтроки.Ячейки.Наименование.ЦветТекста=WebЦвета.Синий;
		КонецЕсли;	
		
		
	КонецПроцедуры
	
	// Выполняет необходимые проверки перед всеми действиями в заказе,
	// в случае невозможности действия выводит соответствующее сообщение
	//
	// Параметры:
	//	ВидПроверки	- строка, вид проверки
	//
	// Возвращаемое значение:
	//	Булево		- результат проверки
	//
	Функция ВыполнитьПроверку(ВидПроверки, ВыводПредупреждения=Истина) Экспорт
		
		// в режиме пред.заказа проверок нет
		Если РежимПредЗаказ Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ФоновыйРежим Тогда
			ВыводПредупреждения = Ложь;
		КонецЕсли; 
		
		Результат = Истина;
		
		Если ВидПроверки="ЗаказОткрыт" Тогда
			Результат = ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Открыт;
			Текст1="Нет доступа!";
			Текст2="Заказ уже оплачен или удален...";
			
		ИначеЕсли ВидПроверки="ПроверкаСмены" Тогда
			Результат = СменаОткрыта;
			Текст1="Ошибка смены!";
			Текст2="Для редактирования заказа необходимо закрыть смену и открыть новую...";
			
		ИначеЕсли ВидПроверки="ПроверкаСменыОплата" Тогда
			Результат = ИнтерфейсРМ.ПроверкаСмены(Ложь);
			Текст1="Ошибка смены!";
			Текст2="Для оплаты заказа необходимо закрыть смену и открыть новую...";
			
		ИначеЕсли ВидПроверки="НетПресчета" Тогда
			Результат = НЕ Заказ.ЕстьПресчет;
			Текст1="Нет доступа!";
			Текст2="Распечатан предварительный счет...";
			
		ИначеЕсли ВидПроверки="НеЗаблокирован" Тогда
			Результат = НЕ Заблокирован;
			Текст1="Нет доступа!";
			Если ЗначениеЗаполнено(КемЗаблокирован) тогда
				Текст2="Этот заказ редактируется на 
				|"+КемЗаблокирован+"
				|Возможен только просмотр...";
			иначе
				Текст2="Заказ редактируется другим пользователем...";
			КонецЕсли;
			
		ИначеЕсли ВидПроверки="НетДозаказа" Тогда
			Результат = НЕ ЕстьДозаказ;
			Текст1="Нет доступа!";
			Текст2="Сначала необходимо распечатать марки на добавленные блюда (товары)...";
			
		ИначеЕсли ВидПроверки="НетУдалений" Тогда
			Результат = НЕ ЕстьУдаление;
			Текст1="Нет доступа!";
			Текст2="Сначала необходимо распечатать удаленные позиции...";
			
		ИначеЕсли Лев(ВидПроверки,6) = "Право." Тогда
			
			ПравоДоступа	= Сред(ВидПроверки,7);
			
			// Если Доставка то нужно получить другие права по соответствию
			Если Заказ.Доставка Тогда
				ПравоДоступа	= Справочники.НаборыПравДоступа.ПолучитьСоответствующееПраво(ПравоДоступа);
			КонецЕсли;
			
			Результат = ИнтерфейсРМ.ПроверкаПраваДоступа(ПравоДоступа, ВыводПредупреждения, глПользователь, Заказ.Автор, ?(Доставка, ДоставкаДопИнф.Статус, Неопределено));
			
			// предупреждение выводится в функции проверки права
			ВыводПредупреждения = Ложь;
			
		ИначеЕсли ВидПроверки="ПроверкаСкидки" Тогда
			//Результат = ПроверкаСкидки();
			
		КонецЕсли;
		
		Если НЕ Результат И ВыводПредупреждения Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли; 
		
		Возврат Результат;
	КонецФункции
	
	// проверка, нет ли на выбранном месте открытых заказов другого официанта
	//
	Функция ОфициантКМесту(ПровМесто,ПровСотрудник)
		
		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Заказ ИЗ РегистрСведений.ЗаказДопИнф
		|ГДЕ Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
		|	И Заказ.ПосадочноеМесто = &ПосадочноеМесто
		|	И НЕ Заказ.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("ПосадочноеМесто"	, ПровМесто);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если глВерсия=3 И ПровМесто.ЛимитнаяКарта Тогда
				Текст1="Нет доступа!";
				Текст2="На эту карту уже есть открытый заказ...";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат Ложь;
				
			ИначеЕсли ПровМесто.ЗапретНесколькихЗаказов Тогда
				Текст1="Нет доступа!";
				Текст2="На этом посадочном месте уже есть открытый заказ...";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат Ложь;
				
				//ИначеЕсли Выборка.Заказ.Автор <> ПровСотрудник Тогда
				//	Текст1="Нет доступа!";
				//	Текст2="На этом посадочном месте уже есть открытый заказ,
				//			|введенный другим сотрудником...";
				//	ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				//	Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
	КонецФункции 
	
	// Изменение курса подачи или отметить выдачу
	//
	Процедура ИзменитьКурс(РаботаСВыдачей = Ложь) Экспорт
		
		Если глВерсия=1 ИЛИ НЕ ИспользоватьКурсы И НЕ ПодтверждениеВыдачи Тогда 
			Возврат;
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//СтрокаЗаказа = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
		СтрокаЗаказаОтбор = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
		СтрокаЗаказа = ?(СтрокаЗаказаОтбор <> Неопределено, СтрокаЗаказаОтбор.СтрокаТаблицыЗаказа, Неопределено);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		// < КС_ВДВ ------------------------------------------------------------ 
		// Курсы и выдача идут только по строке заказа (не по специфике).
		// Поэтому сразу определим правильную строку.
		
		СтрокаЗаказа = ПолучитьСтрокуТовара(СтрокаЗаказа);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		Если СтрокаЗаказа = Неопределено ИЛИ СтрокаЗаказа.Количество = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		Если СтрокаЗаказа = Неопределено Тогда
			Возврат;
		ИначеЕсли НЕ( 
			ВыполнитьПроверку("НетПресчета") И 
			ВыполнитьПроверку("НеЗаблокирован")
			) Тогда
			Возврат;
			// < КС_ВДВ ------------------------------------------------------------ 
		ИначеЕсли НЕ ВыполнитьПроверкуПоСтанции(СтрокаЗаказа) Тогда
			Возврат; //Корректировка возможна только по строкам, добавленным на текущий станции.
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли;
		
		СтрокаТовара = ?(СтрокаЗаказа.Уровень()=0, СтрокаЗаказа, СтрокаЗаказа.Родитель);
		
		Если ИспользоватьКурсы И (СтрокаТовара.Статус=СтатусДозаказ ИЛИ СтрокаТовара.Статус=СтатусОтложено) Тогда
			ИзменитьКурсПозиции(СтрокаТовара);
			Возврат;
		КонецЕсли;	
		
		Если ИспользоватьЗаказТоварыДопИнф И РаботаСВыдачей Тогда
			ТекСтатус = РегистрыСведений.ЗаказТоварыДопИнф.Получить(Новый Структура("Заказ,ИдСтроки", Заказ.Ссылка, СтрокаТовара.ИдСтроки)).Статус;
			
			Если ПодтверждениеВыдачи  И ЗначениеЗаполнено(ТекСтатус) И (ТекСтатус = СтатусГотово ИЛИ (ПодтверждениеГотовностиПриВыдачи И ТекСтатус = СтатусЗаказано)) Тогда
				ОтметитьВыдачу(СтрокаТовара);
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		
		Текст1="Нет доступа!";
		Текст2="К этой позиции нет курсов и выдачи...";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
		
		
	КонецПроцедуры
	
	// Изменение курса подачи
	//
	Процедура ИзменитьКурсПозиции(СтрокаТовара)
		
		Курс = ИнтерфейсРМ.ВводЧисла("Подача", "Число", 2, 0, ТекущаяПодача.Номер);
		
		Если Курс=Неопределено ИЛИ Курс=0 Тогда
			Возврат;
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		Если Курс < СледующийНомерПодачиНач Тогда
			Текст1="Неверный курс!";
			Текст2="Курс ("+Курс+") меньше, чем начальный курс ("+СледующийНомерПодачиНач+")...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли; 
		
		ТекущийМаксНомерПодачи = Макс(Курс, ТекущийМаксНомерПодачи);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		ТекущаяПодача = НайтиДобавитьПодачу(Курс, СтатусДозаказ);
		СтрокаТовара.Подача = ТекущаяПодача;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаТовара);
		// КС_ВДВ > ------------------------------------------------------------ 
	КонецПроцедуры
	
	// Описание процедуры
	//
	Функция НайтиДобавитьПодачу(НомерПодачи, Статус, ВремяПодачи=Неопределено, ДокСсылка=Неопределено)
		
		ВыбПодача = Неопределено;
		Для каждого Подача Из ТаблицаПодач Цикл
			Если Подача.Статус=Статус И ?(ДокСсылка=Неопределено, Подача.Номер=НомерПодачи, Подача.ДокСсылка=ДокСсылка) И ?(ВремяПодачи=Неопределено, Истина, Подача.Время=ВремяПодачи) Тогда
				ВыбПодача = Подача;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ВыбПодача=Неопределено Тогда
			ВыбПодача = ТаблицаПодач.Добавить();
		КонецЕсли; 
		
		ВыбПодача.Номер		= НомерПодачи;
		ВыбПодача.Статус	= Статус;
		ВыбПодача.Время		= ВремяПодачи;
		ВыбПодача.ДокСсылка	= ДокСсылка;
		
		Возврат ВыбПодача;
	КонецФункции
	
	// Выбор специфики
	//
	Процедура ВыборСпецифики(ФлагОбщая=Ложь, СтрокаЗаказа=Неопределено) Экспорт
		
		Если глВерсия=1 Тогда   
			Возврат;
		КонецЕсли;
		
		Если СтрокаЗаказа = Неопределено Тогда
			// < КС_ВДВ ------------------------------------------------------------ 
			//СтрокаЗаказа = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
			СтрокаЗаказаОтбор = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
			СтрокаЗаказа = ?(СтрокаЗаказаОтбор <> Неопределено, СтрокаЗаказаОтбор.СтрокаТаблицыЗаказа, Неопределено);
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли;
		
		Если СтрокаЗаказа = Неопределено Тогда
			Возврат;
			
		ИначеЕсли НЕ РежимПредЗаказ И 
			НЕ( ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован") И 
			ВыполнитьПроверку("НетУдалений") 	И 
			ВыполнитьПроверку("Право.Дозаказ") 
			) Тогда
			Возврат;
			
			// < КС_ВДВ ------------------------------------------------------------ 
		ИначеЕсли НЕ ВыполнитьПроверкуПоСтанции(СтрокаЗаказа) Тогда
			Возврат; //Корректировка возможна только по строкам, добавленным на текущий станции.
			// КС_ВДВ > ------------------------------------------------------------ 
			
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//Если Защита.ВыборСпецифики(ФормаЗаказа, ФлагОбщая, СтрокаЗаказа) Тогда
		//	ЕстьДозаказ = Истина;
		//	Модифицирован = Истина;
		//КонецЕсли; 
		
		Способ = 1;
		
		Если Способ = 0 Тогда
			Если ВыполнитьВыборСпецификВФорме(ФормаЗаказа, ФлагОбщая, СтрокаЗаказа) Тогда
				ЕстьДозаказ = Истина;
				Модифицирован = Истина;
			КонецЕсли; 
			
		Иначе	
			// выбор через обработку "ВыборСпецифик" 
			Если ВыполнитьВыборСпецификВФорме(ФормаЗаказа, ФлагОбщая, СтрокаЗаказа) Тогда
				ЕстьДозаказ = Истина;
				Модифицирован = Истина;
			КонецЕсли; 
		КонецЕсли; 
		
		ВыводЗаказаНаИнфоДисплей();
		
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецПроцедуры
	
	// Описание процедуры
	//
	Функция ПроверитьДобавитьСпецифику(СтрокаТовара, ВыбСпецифика=Неопределено, ОбязательноОткрыватьФорму=Ложь,АвтоПозиция=Ложь)
		// < КС_ВДВ ------------------------------------------------------------ 
		//Функция ПроверитьДобавитьСпецифику(СтрокаТовара, ВыбСпецифика=Неопределено)
		// КС_ВДВ > ------------------------------------------------------------ 
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//Возврат Защита.ПроверитьДобавитьСпецифику(ФормаЗаказа, СтрокаТовара, ВыбСпецифика);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		// < КС_ВДВ ------------------------------------------------------------ 
		Способ = 1;
		
		Если Способ = 0 Тогда
			//Возврат Защита.ПроверитьДобавитьСпецифику(ФормаЗаказа, СтрокаТовара, ВыбСпецифика);
		Иначе	
			ОбработкаВыборСпецифик = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборСпецифик");
			
			Если НЕ ОбязательноОткрыватьФорму Тогда
				// проверим выполнение условий по спецификам без открытия формы выбора
				РезультатВыбора = ОбработкаВыборСпецифик.ВыполнитьВыборСпецифик(СтрокаТовара, Истина, АвтоПозиция);	
				
				Если РезультатВыбора.Контроль Тогда
					// условия не нарушены; подчистим лишние (пустые) группы-специфики в заказе
					ОбновитьСпецификиПоСтрокеТовара(СтрокаТовара, РезультатВыбора.Специфики);
					Возврат РезультатВыбора.Контроль;	
				Иначе	
					// нарушены условия по спецификам - открываем форму для пользователя
					ОбязательноОткрыватьФорму = Истина;
				КонецЕсли; 
			КонецЕсли; 	
			
			РезультатВыбора = ОбработкаВыборСпецифик.ВыполнитьВыборСпецифик(СтрокаТовара);
			
			Если РезультатВыбора.Контроль Тогда
				ОбновитьСпецификиПоСтрокеТовара(СтрокаТовара, РезультатВыбора.Специфики);
//				СтрокаТовара.Строки.Сортировать("Порядок,ПорядокСпецифик");
				Если ФормаЗаказа <> Неопределено Тогда
					//СтрокаТовара.Строки.Сортировать("Цена");
					СтрокаТовараОтбор = ПолучитьСтрокуЗаказаОтбор(СтрокаТовара);
					
					// разворачиваем специфики
					ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа;
					ТабПолеТЗ.ТекущаяСтрока = СтрокаТовараОтбор;
					ТабПолеТЗ.Развернуть(СтрокаТовараОтбор, Истина);
				КонецЕсли; 
			КонецЕсли; 
//			ВыводЗаказаНаИнфоДисплей();
			Возврат РезультатВыбора.Контроль;
			
		КонецЕсли; 
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецФункции
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Процедура ВыводЗаказаНаИнфоДисплей(СброситьНастройки = Ложь) Экспорт
		
		// Отобразить изменения на ИнфоДисплее
		//ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ.Ссылка, ТаблицаЗаказа, СписокРекомендаций);
		
		Если НЕ глПараметрыРМ.ИнфоДисплейЕсть Тогда
			Возврат;
		КонецЕсли; 
		
		// Индекс текущей строки с товаром
		Если ФормаЗаказа <> Неопределено Тогда
			СтрокаЗаказаОтбор = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
			СтрокаЗаказа = ?(СтрокаЗаказаОтбор <> Неопределено, СтрокаЗаказаОтбор.СтрокаТаблицыЗаказа, Неопределено);
			Если СтрокаЗаказа <> Неопределено Тогда
				СтрокаЗаказа = ПолучитьСтрокуТовара(СтрокаЗаказа);
			КонецЕсли; 
		КонецЕсли;	
		
		ДопПараметрыИнфо.НомерСтрокиЗаказа = ?(СтрокаЗаказа <> Неопределено, ТаблицаЗаказа.Строки.Индекс(СтрокаЗаказа)+1, ТаблицаЗаказа.Строки.Количество());
		ДопПараметрыИнфо.СуммаПоСтанцииНач = СтанцияОтборСуммаНач;
		ДопПараметрыИнфо.СброситьНастройки = СброситьНастройки;
		
		ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ.Ссылка, ТаблицаЗаказа, СписокРекомендаций, ДопПараметрыИнфо);
		
	КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Уменьшает в новом наборе специфик (ДеревоНовыхСпецифик) значения в колонке "Количество"
	// у тех специфик, которые уже заказаны (Cтатус <> СтатусДозаказ).
	Процедура УчестьУжеЗаказанныеСпецифики(СтрокаСпецифик, ДеревоНовыхСпецифик)
		
		Инд = СтрокаСпецифик.Строки.Количество()-1;
		
		Пока Инд > -1 Цикл
			
			СтрокаСущСпецифики = СтрокаСпецифик.Строки[Инд];
			
			СтрокаНовСпецифики = ДеревоНовыхСпецифик.Строки.Найти(СтрокаСущСпецифики.Товар, "Специфика", Истина);
			
			Если (СтрокаНовСпецифики <> Неопределено) И (СтрокаСущСпецифики.Статус <> СтатусДозаказ) Тогда
				// уменьшим количество доступных специфик в новом наборе
				СтрокаНовСпецифики.Количество = Макс(0, СтрокаНовСпецифики.Количество - 1);
			КонецЕсли;
			
			// обрабатываем вложенные строки
			УчестьУжеЗаказанныеСпецифики(СтрокаСущСпецифики, ДеревоНовыхСпецифик);
			
			Инд = Инд - 1;
		КонецЦикла; 		
		
	КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Внимание. В дереве значений ДеревоНовыхСпецифик будет изменяться значение в колонке "Количество".
	// 
	// Результат (Булево) - флаг модификации заказ
	Функция УдалитьОтсутствующиеСпецифики(СтрокаСпецифик, ДеревоНовыхСпецифик)
		
		Модиф = Ложь;
		
		Инд = СтрокаСпецифик.Строки.Количество()-1;
		
		Пока Инд > -1 Цикл
			
			СтрокаСущСпецифики = СтрокаСпецифик.Строки[Инд];
			
			СтрокаНовСпецифики = ДеревоНовыхСпецифик.Строки.Найти(СтрокаСущСпецифики.Товар, "Специфика", Истина);
			
			// удаляем специфику из заказа, если это дозаказ и выполняется одно из следующих условий:
			// 1. текущей специфики нет в новом наборе специфик
			// 2. в новом наборе специфика есть, но их количество меньше чем в заказе 
			Если (СтрокаСущСпецифики.Статус = СтатусДозаказ) И 
				((СтрокаНовСпецифики = Неопределено) ИЛИ ((НЕ СтрокаНовСпецифики.ЭтоГруппа) И (СтрокаНовСпецифики.Количество = 0))) Тогда
				
				Если НЕ ксТрактир.ОбщаяСпецифика(СтрокаСущСпецифики.Товар) Тогда 
					СтрокаСпецификОтбор     = ПолучитьСтрокуЗаказаОтбор(СтрокаСпецифик);
					СтрокаСущСпецификиОтбор = ПолучитьСтрокуЗаказаОтбор(СтрокаСущСпецифики);
					
					УдалитьСтрокуДерева(СтрокаСпецифик, СтрокаСущСпецифики);
					
					Если (СтрокаСпецификОтбор <> Неопределено) И (СтрокаСущСпецификиОтбор <> Неопределено) Тогда
						УдалитьСтрокуДерева(СтрокаСпецификОтбор, СтрокаСущСпецификиОтбор);	
					КонецЕсли; 
					
					Модиф = Истина;
				КонецЕсли; 	
				
			Иначе
				
				// Для специфик со статусом Статус <> СтатусДозаказ количество уже было уменьшено в процедуре УчестьУжеЗаказанныеСпецифики.
				// Поэтому здесь уменьшаем кол-во только по строкам со статусом Статус = СтатусДозаказ
				Если (СтрокаНовСпецифики <> Неопределено) И (СтрокаСущСпецифики.Статус = СтатусДозаказ)  Тогда
					// Уменьшим количество доступных специфик в новом наборе
					СтрокаНовСпецифики.Количество = Макс(0, СтрокаНовСпецифики.Количество - 1);
				КонецЕсли; 
				
				// обрабатываем вложенные строки
				ФлУдалено = УдалитьОтсутствующиеСпецифики(СтрокаСущСпецифики, ДеревоНовыхСпецифик);
				Модиф = Модиф ИЛИ ФлУдалено;
			КонецЕсли;
			
			Инд = Инд - 1;
		КонецЦикла; 
		
		Возврат Модиф;
		
	КонецФункции // < КС_ВДВ ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Результат (Булево) - флаг модификации заказ
	Функция ДобавитьНовыеСпецифики(СтрокаЗаказа, ДеревоНовыхСпецифик)
		
		Модиф = Ложь;
		ПарамПоиска = Новый Структура("Товар", Неопределено);
		Если ТипЗнч(ДеревоНовыхСпецифик)=Тип("СправочникСсылка.Специфики") Тогда
			Если СтрокаЗаказа.Строки.Найти("Товар",ДеревоНовыхСпецифик)=Неопределено Тогда
				СтрокаСпец               = СтрокаЗаказа.Строки.Добавить();
				СтрокаСпец.Статус        = СтатусДозаказ;
				СтрокаСпец.Станция       = ?(глПараметрыРМ.Тип = Перечисления.ТипыРМ.Производство, глРабочееМесто.Станция, Неопределено);
				СтрокаСпец.Товар         = ДеревоНовыхСпецифик;
				СтрокаСпец.Наименование  = СтрДополнитьСправа("",(СтрокаСпец.Уровень()-1)*3) + " - "+ДеревоНовыхСпецифик.Наименование;
				СтрокаСпец.ГруппаПечати  = ДеревоНовыхСпецифик.ГруппаПечати;
				Если СтрокаСпец.Товар.ЕстьЦена тогда
					Отбор = Новый Структура("ТипЦен,Номенклатура", Справочники.ТипыЦен.Розничная,СтрокаСпец.Товар.Номенклатура);
					СтруктураЦены = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ПолучитьРабочуюДату(), Отбор);
					СтрокаСпец.Цена = ПересчетВалют(СтруктураЦены.Цена, СтруктураЦены.Валюта);
				иначе
					СтрокаСпец.Цена = 0;
				КонецЕсли;
				//СтрокаСпец.Цена			 = 0;
				СтрокаСпец.Количество	 = 0;
				СтрокаСпец.Порядок		 = ?(ксТрактир.ОбщаяСпецифика(ДеревоНовыхСпецифик),3,?(ДеревоНовыхСпецифик.ЕстьЦена,1,2));//?(ДеревоНовыхСпецифик.ЕстьЦена,1,?(ксТрактир.ОбщаяСпецифика(ДеревоНовыхСпецифик),3,2)); 
				СпрГруппа=ДеревоНовыхСпецифик;
				Пока 1=1 Цикл
					Если НЕ ЗначениеЗаполнено(СпрГруппа.Родитель) Тогда
						Прервать;
					КонецЕсли;	
					СпрГруппа=СпрГруппа.Родитель;
					Если СпрГруппа.Уровень()=1 Тогда
						Прервать;
					КонецЕсли;		
					Если СпрГруппа.Родитель=0 Тогда
						Прервать;
					КонецЕсли;	
				КонецЦикла;	
				
				СтрокаСпец.ПорядокСпецифики=СпрГруппа.Порядок*1000+ДеревоНовыхСпецифик.Порядок;
				
				//ДобавитьСтрокуЗаказаОтбор(СтрокаСпец);
				Модиф=Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДеревоНовыхСпецифик)=Тип("Массив") тогда
			Для Каждого НоваяСпецифика из ДеревоНовыхСпецифик Цикл
				Если СтрокаЗаказа.Строки.Найти(НоваяСпецифика,"Товар")=Неопределено Тогда
					СтрокаСпец               = СтрокаЗаказа.Строки.Добавить();
					СтрокаСпец.Статус        = СтатусДозаказ;
					СтрокаСпец.Станция       = ?(глПараметрыРМ.Тип = Перечисления.ТипыРМ.Производство, глРабочееМесто.Станция, Неопределено);
					СтрокаСпец.Товар         = НоваяСпецифика;
					СтрокаСпец.Наименование  = СтрДополнитьСправа("",(СтрокаСпец.Уровень()-1)*3) + " - "+НоваяСпецифика.Наименование;
					СтрокаСпец.ГруппаПечати  = НоваяСпецифика.ГруппаПечати;
					Если НоваяСпецифика.ЕстьЦена тогда
						Отбор = Новый Структура("ТипЦен,Номенклатура", Справочники.ТипыЦен.Розничная,НоваяСпецифика.Номенклатура);
						СтруктураЦены = РегистрыСведений.ЦеныНоменклатуры.ПолучитьПоследнее(ПолучитьРабочуюДату(), Отбор);
						СтрокаСпец.Цена = ПересчетВалют(СтруктураЦены.Цена, СтруктураЦены.Валюта);
					иначе
						СтрокаСпец.Цена = 0;
					КонецЕсли;
					СтрокаСпец.Количество	 = 0;
					СтрокаСпец.Порядок		 = ?(ксТрактир.ОбщаяСпецифика(НоваяСпецифика),3,?(НоваяСпецифика.ЕстьЦена,1,2));//?(НоваяСпецифика.ЕстьЦена,1,?(ксТрактир.ОбщаяСпецифика(НоваяСпецифика),3,2)); 
					СпрГруппа=НоваяСпецифика;
					Пока 1=1 Цикл
						Если НЕ ЗначениеЗаполнено(СпрГруппа.Родитель) Тогда
							Прервать;
						КонецЕсли;	
						СпрГруппа=СпрГруппа.Родитель;
						Если СпрГруппа.Уровень()=1 Тогда
							Прервать;
						КонецЕсли;		
						Если СпрГруппа.Родитель=0 Тогда
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
				
					СтрокаСпец.ПорядокСпецифики = СпрГруппа.Порядок*1000+НоваяСпецифика.Порядок;
				КонецЕсли;
			КонецЦикла;	
			Модиф=Истина;
		Иначе	
			Для каждого СтрокаДереваНовыхСпецифик Из ДеревоНовыхСпецифик.Строки Цикл
				
				// для групп Количество = 0, поэтому сделаем для них 1.
				// для специфик-элементов может быть больше одного, если это позволяют настройки
				КолПозиций = ?(СтрокаДереваНовыхСпецифик.Количество = 0, 1, СтрокаДереваНовыхСпецифик.Количество);
				
				ПарамПоиска.Товар = СтрокаДереваНовыхСпецифик.Специфика;
				СтрокиСпец = СтрокаЗаказа.Строки.НайтиСтроки(ПарамПоиска, Ложь);
				
				ДобавитьПозиций = КолПозиций - СтрокиСпец.Количество();
				Если ДобавитьПозиций > 0 Тогда
					Для К = 1 По ДобавитьПозиций Цикл
						СтрокаСпец               = СтрокаЗаказа.Строки.Добавить();
						СтрокаСпец.Статус        = СтатусДозаказ;
						СтрокаСпец.Станция       = ?(глПараметрыРМ.Тип = Перечисления.ТипыРМ.Производство, глРабочееМесто.Станция, Неопределено);
						СтрокаСпец.Товар         = СтрокаДереваНовыхСпецифик.Специфика;
						СтрокаСпец.Наименование  = СтрДополнитьСправа("",(СтрокаСпец.Уровень()-1)*3) + " - "+СтрокаДереваНовыхСпецифик.Специфика.Наименование;
						СтрокаСпец.ГруппаПечати  = СтрокаДереваНовыхСпецифик.Специфика.ГруппаПечати;
						СтрокаСпец.Цена			 = СтрокаДереваНовыхСпецифик.Цена;
						СтрокаСпец.Порядок		 = ?(ксТрактир.ОбщаяСпецифика(СтрокаДереваНовыхСпецифик.Специфика),3,?(СтрокаДереваНовыхСпецифик.Специфика.ЕстьЦена,1,2));//?(СтрокаДереваНовыхСпецифик.Специфика.ЕстьЦена,1,?(ксТрактир.ОбщаяСпецифика(СтрокаДереваНовыхСпецифик.Специфика),3,2)); 
						СпрГруппа=СтрокаДереваНовыхСпецифик.Специфика;
						Пока 1=1 Цикл
							Если НЕ ЗначениеЗаполнено(СпрГруппа.Родитель) Тогда
								Прервать;
							КонецЕсли;	
							СпрГруппа=СпрГруппа.Родитель;
							Если СпрГруппа.Уровень()=1 Тогда
								Прервать;
							КонецЕсли;		
							Если СпрГруппа.Родитель=0 Тогда
								Прервать;
							КонецЕсли;	
						КонецЦикла;	
						
						СтрокаСпец.ПорядокСпецифики = СпрГруппа.Порядок*1000+СтрокаДереваНовыхСпецифик.Специфика.Порядок;
						ДобавитьСтрокуЗаказаОтбор(СтрокаСпец);
						
						Модиф = Истина;
					КонецЦикла; 
				Иначе	
					СтрокаСпец = СтрокиСпец[0];
				КонецЕсли; 
				
				ФлДобавлено = ДобавитьНовыеСпецифики(СтрокаСпец, СтрокаДереваНовыхСпецифик);
				
				Модиф = Модиф ИЛИ ФлДобавлено;
			КонецЦикла; 
		КонецЕсли;
		Возврат Модиф;
		
	КонецФункции // < КС_ВДВ ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Результат (Булево) - флаг модификации заказ
	Функция ОбновитьСпецификиПоСтрокеТовара(СтрокаТовара, ДеревоСпецифик)
		
		// сначала удалим из заказа специфики, которых не оказалось в выборе
		ДеревоСпецификКопия = ДеревоСпецифик.Скопировать(); 
		УчестьУжеЗаказанныеСпецифики(СтрокаТовара, ДеревоСпецификКопия);
		
		ФлУдалено =  УдалитьОтсутствующиеСпецифики(СтрокаТовара, ДеревоСпецификКопия);
		
		// добавить новые специфики
		ФлДобавлено = ДобавитьНовыеСпецифики(СтрокаТовара, ДеревоСпецифик);
		
		Возврат ФлУдалено ИЛИ ФлДобавлено;
		
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Функция ПолучитьСтрокуТовара(СтрокаЗаказа)
		
		Если СтрокаЗаказа.Родитель = Неопределено Тогда
			Возврат СтрокаЗаказа;
		Иначе
			Возврат ПолучитьСтрокуТовара(СтрокаЗаказа.Родитель);
		КонецЕсли; 
		
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Процедура ИсправитьСтрокуСОбщейСпецификой(СтрокаЗаказа)
		
		Для каждого СтрокаЗаказаСпец Из СтрокаЗаказа.Строки Цикл
			
			Если ксТрактир.ОбщаяСпецифика(СтрокаЗаказаСпец.Товар) Тогда
				
				// если это новая строка, то станция не была заполнена
				Если НЕ ЗначениеЗаполнено(СтрокаЗаказаСпец.Станция) Тогда
					СтрокаЗаказаСпец.Станция = глРабочееМесто.Станция;
				КонецЕсли; 	
				
				Если (СтанцияОтбор = Неопределено) ИЛИ (СтрокаЗаказаСпец.Станция = СтанцияОтбор) Тогда
					// эта строка должна быть в ТаблицаЗаказаОтбор - проверим
					НайденнаяСтрока = ТаблицаЗаказаОтбор.Строки.Найти(СтрокаЗаказаСпец, "СтрокаТаблицыЗаказа", Истина);
					
					Если НайденнаяСтрока = Неопределено Тогда
						// добавляем
						ДобавитьСтрокуЗаказаОтбор(СтрокаЗаказаСпец);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
			// обрабатываем вложенные строки
			ИсправитьСтрокуСОбщейСпецификой(СтрокаЗаказаСпец);
		КонецЦикла; 
		
	КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Функция ВыполнитьВыборСпецификВФорме(ФормаЗаказа, ФлагОбщая, СтрокаЗаказа)
		
		// стандартный выбор Трактира для общих специфик
		//Если ФлагОбщая Тогда
		//	Если ТипЗнч(СтрокаЗаказа.Товар)=Тип("СправочникСсылка.Специфики") Тогда
		//		СтрокаЗаказа=СтрокаЗаказа.Родитель;
		//	КонецЕсли;	
		//	Модиф = Защита.ВыборСпецифики(ФормаЗаказа, ФлагОбщая, СтрокаЗаказа);
		//	
		//	Если Модиф Тогда
		//		// Добавили новую специфику - значит, нужно обработать эту строку:
		//		// 1) Указать в строке "Станцию"; 2) Добавить строку в ТаблицаЗаказаОтбор 
		//		ИсправитьСтрокуСОбщейСпецификой(СтрокаЗаказа);
		//	КонецЕсли; 
		//	
		//	Возврат Модиф;
		//КонецЕсли; 
		СтрокаТовара = ПолучитьСтрокуТовара(СтрокаЗаказа);
		Модиф = Ложь;
		НайтиСтатусТовара=РегистрыСведений.ЗаказТоварыДопИнф.Получить(Новый Структура("Заказ,ИдСтроки",Заказ.Ссылка,СтрокаТовара.ИдСтроки)).Статус;
		Если ЗначениеЗаполнено(НайтиСтатусТовара) Тогда
			Текст="Нельзя добавлять специфику в записанном заказе. Удалите блюдо и создайте его заново!!!";
			Заголовок="Нет доступа!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Заголовок,Текст,"","ОК","");
			Возврат Модиф;
		КонецЕсли;	
			
		Если ФлагОбщая Тогда
			СтрокаТовара = ПолучитьСтрокуТовара(СтрокаЗаказа);
			//Модиф = Защита.ВыборСпецифики(ФормаЗаказа, ФлагОбщая, СтрокаЗаказа);
			
			ГруппаОбщих=Константы.ГруппаОбщихСпецифик.Получить();
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			             |	Специфики.Ссылка
			             |ИЗ
			             |	Справочник.Специфики КАК Специфики
			             |ГДЕ
			             |	НЕ Специфики.ЭтоГруппа
			             |	И НЕ Специфики.ПометкаУдаления
						 |	//Убрать 
						 |	//Группа
			             |
			             |УПОРЯДОЧИТЬ ПО
			             |	Специфики.Порядок";
			Если ЗначениеЗаполнено(ГруппаОбщих) Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"//Группа","И Специфики.Ссылка В ИЕРАРХИИ(&ГруппаОбщих)");				 
				Запрос.УстановитьПараметр("ГруппаОбщих",ГруппаОбщих);
			КонецЕсли;
			МассивПомеченных=Новый Массив;
			//МассивПомеченных=СтрокаТовара.Строки.ВыгрузитьКолонку("Товар");
			Для Каждого СтрТ из СтрокаТовара.Строки Цикл
				Если ксТрактир.ОбщаяСпецифика(СтрТ.Товар) Тогда
					МассивПомеченных.Добавить(СтрТ.Товар);
				КонецЕсли;
			КонецЦикла;	
			
			Если МассивПомеченных.Количество()<>0 Тогда
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"//Убрать","И НЕ Специфики.Ссылка В (&Помеченные)");
				Запрос.УстановитьПараметр("Помеченные",МассивПомеченных);
			КонецЕсли;	
			МассивВыбора=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			РезультатВыбора=ИнтерфейсРМ.ВыборИзСписка(МассивВыбора, Истина, МассивПомеченных,"Выбор специфики", "Специфики приготовления");
			Модиф=Ложь;
			Если (ТипЗнч(РезультатВыбора)=Тип("СправочникСсылка.Специфики") и ЗначениеЗаполнено(РезультатВыбора)) или (ТипЗнч(РезультатВыбора)=Тип("Массив") и РезультатВыбора.Количество()>0) Тогда
				Модиф=ДобавитьНовыеСпецифики(СтрокаТовара, РезультатВыбора);
				РасчетПоСтроке(СтрокаЗаказа);
			КонецЕсли;
			Если Модиф Тогда
				ИсправитьСтрокуСОбщейСпецификой(СтрокаТовара);
			КонецЕсли; 
			
			Если ФормаЗаказа <> Неопределено Тогда
				СтрокаТовараОтбор = ПолучитьСтрокуЗаказаОтбор(СтрокаТовара);
				СтрокаТовараОтбор.Строки.Сортировать("Порядок,ПорядокСпецифики");
				ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа;
				ТабПолеТЗ.ТекущаяСтрока = СтрокаТовараОтбор;
				ТабПолеТЗ.Развернуть(СтрокаТовараОтбор, Истина);
				
				Если СтрокаТовараОтбор.Строки.Количество() Тогда
					ТабПолеТЗ.ТекущаяСтрока = СтрокаТовараОтбор.Строки.Получить(СтрокаТовараОтбор.Строки.Количество()-1);
					ТабПолеТЗ.ТекущаяСтрока = СтрокаТовараОтбор;
				КонецЕсли;
				
			КонецЕсли; 
			Возврат Модиф;                 
		КонецЕсли; 
		
		// выбор специфик через форму выбора
		//Модиф = Ложь;
		//
		//СтрокаТовара = ПолучитьСтрокуТовара(СтрокаЗаказа);
		
		Если (СтрокаТовара.Количество = 0) И (СтрокаТовара.Удалено + СтрокаТовара.УдаленоСейчас > 0) Тогда // в типовом варианте это можно сделать...
			Текст1="Нет доступа!";
			Текст2="Нельзя добавлять специфику к удаленному товару!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат Модиф;		
		КонецЕсли; 
		
		ОбработкаВыборСпецифик = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборСпецифик");
		РезультатВыбора = ОбработкаВыборСпецифик.ВыполнитьВыборСпецифик(СтрокаТовара,,,СтрокаЗаказа);
		
		Если РезультатВыбора.ВыборСделан И РезультатВыбора.Контроль Тогда
			Модиф = ОбновитьСпецификиПоСтрокеТовара(СтрокаТовара, РезультатВыбора.Специфики);
//Z+			
			СтрокаТовара.Строки.Сортировать("Порядок,ПорядокСпецифики");
			РасчетПоСтроке(СтрокаТовара);
		КонецЕсли; 
		
		Если ФормаЗаказа <> Неопределено Тогда
			//СтрокаТовара.Строки.Сортировать("Цена");
			СтрокаТовараОтбор = ПолучитьСтрокуЗаказаОтбор(СтрокаТовара);
			СтрокаТовараОтбор.Строки.Сортировать("Порядок,ПорядокСпецифики");
			// разворачиваем специфики
			ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа;
			ТабПолеТЗ.ТекущаяСтрока = СтрокаТовараОтбор;
			ТабПолеТЗ.Развернуть(СтрокаТовараОтбор, Истина);
			
				Если СтрокаТовараОтбор.Строки.Количество() Тогда
				ТабПолеТЗ.ТекущаяСтрока = СтрокаТовараОтбор.Строки.Получить(СтрокаТовараОтбор.Строки.Количество()-1);
			КонецЕсли;
			ТабПолеТЗ.ТекущаяСтрока = СтрокаТовараОтбор;
		КонецЕсли; 
		
		Возврат Модиф;
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	// Ввод ручной скидки
	//
	Процедура ВводРучнойСкидки() Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ( ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован")	И 
			ВыполнитьПроверку("Право.ВводРучнойСкидки") 
			) Тогда
			Возврат;
		КонецЕсли;	
		
		МассивСкидок = ОтборРучныхСкидок();
		Если МассивСкидок.Количество()=0 Тогда
			Текст1="Нет доступа!";
			Текст2="Нет доступных ручных скидок...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли;
		
		Если НЕ( глВерсия=1 ИЛИ глПараметрыРМ.СкидкиДоступРучные ) Тогда
			Текст1="Нет доступа!";
			Текст2="На этом рабочем месте использование ручных скидок запрещено...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли;
		
		ВыбСкидка = ИнтерфейсРМ.ВыборИзСписка(МассивСкидок);
		Если ВыбСкидка=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если глВерсия=3 И ВыбСкидка.ВыборПартнера Тогда
			ВыбПартнер = ИнтерфейсРМ.ВыборИзСписка("Справочник.ПартнерыСкидок");
			Если ВыбПартнер=Неопределено Тогда
				Возврат;
			КонецЕсли;
			ПартнерСкидки = ВыбПартнер;
		Иначе
			ПартнерСкидки = Неопределено;
		КонецЕсли;
		
		РучнаяСкидка = ВыбСкидка;
		Модифицирован = Истина;
		
		РасчетПоЗаказуПолный();
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказРучнаяСкидка, Заказ.Ссылка, ВыбСкидка, ВыбСкидка.Наименование+" ("+ПредставлениеСкидки(ВыбСкидка)+")");
		
		ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
		ПредставлениеСкидки(ВыбСкидка)	,,
		"ИТОГО:"			,Заказ.ИтоговаяСумма);
		
	КонецПроцедуры
	
	// Описание процедуры
	//
	Процедура ОтменаРучнойСкидки() Экспорт
		
		Если НЕ ЗначениеЗаполнено(РучнаяСкидка) Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ( ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован")	И 
			ВыполнитьПроверку("Право.ОтменаРучнойСкидки") 
			) Тогда
			Возврат;
		КонецЕсли;	
		
		РучнаяСкидка = Неопределено;
		ПартнерСкидки = Неопределено;
		Модифицирован = Истина;
		
		РасчетПоЗаказуПолный();
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказРучнаяСкидкаОтмена, Заказ.Ссылка);
		
		ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
		"Отмена	скидки"		,,
		"ИТОГО:"			,Заказ.ИтоговаяСумма);
		
	КонецПроцедуры
	
	// Возвращает массив ручных скидок, доступных текущему пользователю
	//
	Функция ОтборРучныхСкидок()
		
		МассивСкидок = Новый Массив;
		
		ПользовательПраваДоступа = глПользователь.ПраваДоступа.Найти(глПараметрыРМ.МестоРеализации, "МестоРеализации");
		Если ПользовательПраваДоступа = Неопределено Тогда
			Возврат МассивСкидок;
		КонецЕсли;
		
		// выборка скидок в соотвтетствии с ограничениями по наборам прав
		Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Ссылка, Наименование ИЗ Справочник.Скидки
		|ГДЕ 
		|	НЕ Ссылка.ПометкаУдаления "+?(глВерсия=1, "", "И Ручная")+"
		|	И Ссылка.ПользователиТипОграничения = ЗНАЧЕНИЕ(Перечисление.ТипыОграниченийПоСписку.Нет)
		|	 
		|ОБЪЕДИНИТЬ
		|	 
		|ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	Ссылка, Ссылка.Наименование ИЗ Справочник.Скидки.ДопустимыеГруппыПользователей
		|ГДЕ 
		|	НЕ Ссылка.ПометкаУдаления "+?(глВерсия=1, "", "И Ссылка.Ручная")+"
		|	И ( Ссылка.ПользователиТипОграничения = ЗНАЧЕНИЕ(Перечисление.ТипыОграниченийПоСписку.Включить)
		|		И НаборПрав = &НаборПрав
		|		ИЛИ
		|		Ссылка.ПользователиТипОграничения = ЗНАЧЕНИЕ(Перечисление.ТипыОграниченийПоСписку.Исключить)
		|		И НаборПрав <> &НаборПрав
		|	 )
		|
		|УПОРЯДОЧИТЬ ПО Наименование
		|");
		
		Запрос.УстановитьПараметр("НаборПрав", ПользовательПраваДоступа.НаборПрав);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивСкидок.Добавить(Выборка.Ссылка);
		КонецЦикла; 
		
		Возврат МассивСкидок;
	КонецФункции
	
	// Выбор клиента
	//
	Процедура ВыборКлиента(КодКлиента=Неопределено) Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ( ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован")	И 
			ВыполнитьПроверку("Право.ВыборКлиента") 
			) Тогда
			Возврат;
		КонецЕсли;	
		
		Если ТипЗнч(КодКлиента) = Тип("СправочникСсылка.Клиенты") Тогда
			ВыбКлиент = КодКлиента;
		Иначе	
			ВыбКлиент = ИнтерфейсРМ.ИдентификацияКлиента(КодКлиента, глПараметрыРМ.ЗаказКлиентЗапретПустого);
		КонецЕсли;
		
		Если ВыбКлиент=Неопределено ИЛИ ВыбКлиент=Заказ.Клиент Тогда
			Возврат;
			
		ИначеЕсли ВыбКлиент.Пустая() Тогда
			Текст1="Убрать клиента?";
			Текст2="Вы уверены, что хотите убрать клиента из заказа?";
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","","Esc=Нет") = "Нет" Тогда
				Возврат;
			КонецЕсли;
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказОтменаКлиента, Заказ.Ссылка, Заказ.Клиент.Код, Заказ.Клиент.Наименование);
			
		Иначе
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказВыборКлиента, Заказ.Ссылка, ВыбКлиент.Код, ВыбКлиент.Наименование);
			
		КонецЕсли;
		
		Заказ.Клиент=ВыбКлиент;
		Модифицирован = Истина;
		
		Если глВерсия>1 Тогда
			РасчетПоЗаказуПолный();
		КонецЕсли;
		
		ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
		Заказ.Клиент.Наименование	,,
		"ИТОГО:"					,Заказ.ИтоговаяСумма);
		
	КонецПроцедуры
	
		
	// Изменение посадочного места
	//
	Процедура ИзменитьМесто(ВызовИзЖурнала=Ложь, ПосадочноеМесто=Неопределено) Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ( (ВызовИзЖурнала ИЛИ ВыполнитьПроверку("ЗаказОткрыт")) И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован")	И 
			ВыполнитьПроверку("Право.ИзменениеМеста") 
			) Тогда
			Возврат;
		КонецЕсли;	
		
		Если ЛимитнаяКарта Тогда
			Текст1="Нет доступа!";
			Текст2="Нельзя изменить лимитную карту...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Заказ.ПосадочноеМесто.АвтоТовары) Тогда
			Текст1="Нет доступа!";
			Текст2="Нельзя изменить посадочное место с обязательной позицией...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли;
		
		Если ПосадочноеМесто=Неопределено Тогда
			ПосадочноеМесто = ИнтерфейсРМ.ВыборПосадочногоМеста(Ложь);
		КонецЕсли; 
		
		Если ПосадочноеМесто=Неопределено ИЛИ ПосадочноеМесто=Заказ.ПосадочноеМесто Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Открыт Тогда
			
			Если НЕ ОфициантКМесту(ПосадочноеМесто, Заказ.Автор) Тогда
				Возврат;
			ИначеЕсли ВызовИзЖурнала И ЗначениеЗаполнено(ПосадочноеМесто.АвтоТовары) Тогда
				Текст1="Нет доступа!";
				Текст2="Нельзя изменить на посадочное место с обязательной позицией...";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат;
			КонецЕсли;
			ЕстьБронь = Ложь;
			//ЕстьБронь = ЗащитаСервер.ПроверитьБронь(ПосадочноеМесто);
			Если ЗначениеЗаполнено(ЕстьБронь) Тогда
				
				Комментарий="Место забронировано!
				|
				|Бронь № "+ЕстьБронь.Номер+"
				|Время: "+Формат(ЕстьБронь.ВремяНачала,"ДФ=дд.ММ.гг,ЧЧ:мм")+" - "+Формат(ЕстьБронь.ВремяКонца,"ДФ=дд.ММ.гг,ЧЧ:мм")+"
				|"+?(ЗначениеЗаполнено(ЕстьБронь.ВремяЗапрета), "Заказы запрещены с "+Формат(ЕстьБронь.ВремяЗапрета,"ДФ=дд.ММ.гг,ЧЧ:мм")+Символы.ПС, "")+"
				|на имя: "+ЕстьБронь.КлиентСтр+"
				|"+ЕстьБронь.Комментарий;
				
				ИнтерфейсРМ.Подсказка(НаимПосадочногоМеста(ПосадочноеМесто), Комментарий);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		НаимМестоБыло  = Заказ.ПосадочноеМесто.Наименование;
		НаимМестоСтало = ПосадочноеМесто.Наименование;
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказСменаПосадочногоМеста, Заказ.Ссылка, НаимМестоБыло, НаимМестоСтало );
		
		Заказ.ПосадочноеМесто = ПосадочноеМесто;
		Модифицирован = Истина;
		
		Если ВызовИзЖурнала Тогда
			Если глВерсия>1 И ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Открыт Тогда
				// могут измениться скидки, поэтому запишем полностью
				ЗаписатьЗаказ();
			Иначе
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ,"Объект.Записать()",,,Заказ.Ссылка);
			КонецЕсли;
			
		Иначе
			ПолучитьДоступныеЗаказы();
			
			// обязательные позиции
			Для каждого СтрокаТЧ Из ПосадочноеМесто.АвтоТовары Цикл
				Колво = ?(СтрокаТЧ.ПоКоличествуПосетителей, Заказ.КоличествоПосетителей, 0);
				ВводНовойСтроки(СтрокаТЧ.Товар, Колво, Истина, ?(глВерсия=3,Заказ.ПосадочноеМесто.КоммутироемоеУстройство, Неопределено) );
			КонецЦикла;
			
			Если глВерсия>1 Тогда
				РасчетПоЗаказуПолный();
			КонецЕсли;
			
			ИнтерфейсРМ.ВыводНаДП("ВывестиТекст",
			НаимМестоСтало	,,
			"ИТОГО:"	,Заказ.ИтоговаяСумма);
		КонецЕсли;
		
	КонецПроцедуры

	// Изменение автора (официанта)
	//
	Процедура ИзменитьАвтора(ВызовИзЖурнала=Ложь) Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ( (ВызовИзЖурнала ИЛИ ВыполнитьПроверку("ЗаказОткрыт")) И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован")	И 
			ВыполнитьПроверку("Право.ИзменениеАвтора") 
			) Тогда
			Возврат;
		КонецЕсли;	
		
		Если ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Открыт Тогда
			// в открытом заказе можно выбрать только из допущенных в смену
			МассивСотрудников = ИнтерфейсРМ.СоставСмены();
			н = МассивСотрудников.Найти(Заказ.Автор);
			Если н <> Неопределено Тогда
				МассивСотрудников.Удалить(н);
			КонецЕсли; 
			
		Иначе
			// в закрытом можно поменять на любого
			МассивСотрудников = Новый Массив;
			
			Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Сотрудники
			|ГДЕ НЕ ЭтоГруппа И НЕ ПометкаУдаления И НЕ Ссылка = &ТекущийАвтор
			|УПОРЯДОЧИТЬ ПО Наименование");
			
			Запрос.УстановитьПараметр("ТекущийАвтор", Заказ.Автор);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивСотрудников.Добавить(Выборка.Ссылка);
			КонецЦикла; 
			
		КонецЕсли;
		
		Если МассивСотрудников.Количество()=0 Тогда
			Текст1="Нет доступа!";
			Текст2="Нет других доступных сотрудников...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли;
		
		НовыйАвтор = ИнтерфейсРМ.ВыборИзСписка(МассивСотрудников);
		СтарыйАвтор = Заказ.Автор;
		Если НовыйАвтор=Неопределено ИЛИ НовыйАвтор=СтарыйАвтор Тогда
			Возврат;
		КонецЕсли;
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказСменаОфицианта, Заказ.Ссылка, СтарыйАвтор, НовыйАвтор);
		
		// замена в текущем заказе
		Заказ.Автор = НовыйАвтор;
		
		Если ЗаказДопИнф.Статус <> Перечисления.СтатусыЗаказа.Открыт Тогда
			// сюда мы можем попасть только при вызове из журнала закрытых заказов
			// просто записываем изменение
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ,"Объект.Записать()");
			Возврат;
		КонецЕсли;
		
		Если Модифицирован Тогда
			// могли измениться скидки, поэтому запишем все
			Если НЕ ЗаписатьЗаказ() Тогда
				Заказ.Автор = СтарыйАвтор;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		Иначе
			Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ,"Объект.Записать()") Тогда
				Заказ.Автор = СтарыйАвтор;
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// замена официанта во всех открытых заказах текущего посадочного места
		Запрос = Новый Запрос("ВЫБРАТЬ Заказ ИЗ РегистрСведений.ЗаказДопИнф
		|ГДЕ Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
		|	И Заказ.ПосадочноеМесто = &ПосадочноеМесто
		|	И НЕ Заказ = &ТекущийЗаказ
		|	И НЕ Заказ.ПометкаУдаления");
		
		Запрос.УстановитьПараметр("ПосадочноеМесто"	, Заказ.ПосадочноеМесто);
		Запрос.УстановитьПараметр("ТекущийЗаказ"	, Заказ.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		НачатьТранзакцию();
		
		Пока Выборка.Следующий() Цикл
			
			Док = Выборка.Заказ.ПолучитьОбъект();
			Док.Автор = НовыйАвтор;
			Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом(Док,"Объект.Записать()") Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
			
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказСменаОфицианта, Док.Ссылка, СтарыйАвтор, НовыйАвтор);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		Если НЕ ВызовИзЖурнала И НЕ ВыполнитьПроверку("Право.ДоступОткрытыеЗаказы") Тогда
			Если ФормаЗаказа <> Неопределено Тогда
				ФормаЗаказа.Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецПроцедуры
	
	// Назначить автора заказу если еще не присвоен
	//
	Процедура НазначитьАвтора(ТекАвтор = Неопределено) Экспорт
		
		Если Заказ.Автор <> Справочники.Сотрудники.ПустаяСсылка() Тогда
			Возврат;		
		КонецЕсли;
		
		Если ТекАвтор <> Неопределено Тогда
			Заказ.Автор = ТекАвтор;
		ИначеЕсли глПользователь <> Неопределено Тогда
			Заказ.Автор = глПользователь;
		КонецЕсли;	
		
	КонецПроцедуры
	
	// Ввод количества посетителей
	//
	Процедура ИзменитьКолвоГостей(ВызовИзЖурнала=Ложь) Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ( (ВызовИзЖурнала ИЛИ ВыполнитьПроверку("ЗаказОткрыт")) И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован")	И 
			ВыполнитьПроверку("Право.ИзменениеКолваГостей") 
			) Тогда
			Возврат;
		КонецЕсли;	
		
		Колво = ИнтерфейсРМ.ВводЧисла("Кол-во посетителей", "Число", 3, 0, Заказ.КоличествоПосетителей);
		
		Если Колво=Неопределено ИЛИ Колво=0 ИЛИ Колво=Заказ.КоличествоПосетителей Тогда
			Возврат;
		КонецЕсли;
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказКоличествоГостей, Заказ.Ссылка, Заказ.КоличествоПосетителей, Колво);
		
		Заказ.КоличествоПосетителей = Колво;
		Модифицирован = Истина;
		
		Если ВызовИзЖурнала Тогда
			// просто записываем изменение
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ,"Объект.Записать()");
		КонецЕсли;
		
	КонецПроцедуры
	
	// Открывает обработку разделения заказа
	//
	Процедура РазделитьЗаказ() Экспорт
		
		Если РежимПредЗаказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ЛимитнаяКарта  Тогда
			Текст1="Внимание!";
			Текст2="Разделение заказа по лимитной карте невозможно...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;	
		КонецЕсли;
		
		Если НЕ (ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован") И 
			ВыполнитьПроверку("НетДозаказа")	И  
			ВыполнитьПроверку("НетУдалений")	И 
			ВыполнитьПроверку("Право.РазделениеЗаказа")	
			) Тогда
			Возврат;
		КонецЕсли;
		
		ОбработкаРазделения = ИнтерфейсРМ.ПолучитьОбъектОбработки("РазделениеЗаказа");
		ОбработкаРазделения.Заказ = Заказ;
		
		ТаблицаПереноса = ОбработкаРазделения.ТаблицаПереноса;
		Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
			Если СтрокаТовара.Количество = 0 ИЛИ СтрокаТовара.АвтоПозиция Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПереноса = ТаблицаПереноса.Добавить();
			СтрокаПереноса.Товар		= СтрокаТовара.Товар;
			СтрокаПереноса.Цена			= СтрокаТовара.Цена;
			СтрокаПереноса.Количество	= СтрокаТовара.Количество;
			СтрокаПереноса.Остаток		= СтрокаТовара.Количество;
			СтрокаПереноса.ИндексИсходнойСтроки	= ТаблицаЗаказа.Строки.Индекс(СтрокаТовара);
		КонецЦикла;
		
		Если ТаблицаПереноса.Количество()=0 Тогда
			Текст1="Нечего переносить!";
			Текст2="Нет позиций, которые можно перенести в другой заказ...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли;
		
		Если ФормаПодбораТоваров <> Неопределено Тогда
			// если меню открыто, то оно будет мешать
			ФормаПодбораТоваров.Закрыть();
		КонецЕсли; 
		
		ОбработкаРазделения.ПолучитьФорму(,ФормаЗаказа).Открыть();
		
	КонецПроцедуры
	
	// Вызывается из обработки разделения, переносит выбранные позиции.
	// Отдельная процедура нужна только потому что обработка разделения 
	// Открывается не модально (из-за режима рабочего стола)
	Процедура ОбработкаРазделенияЗаказа(ВыбЗаказ, ТаблицаПереноса, КоличествоПосетителей) Экспорт
	
		// перенос в выбранный заказ будем делать через отдельную копию обработки Заказ
		ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("Заказ", "Разделение");
		Если ВыбЗаказ.Пустая() Тогда
			Если Не ОбработкаЗаказ.СоздатьНовый(КоличествоПосетителей, Истина) Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ОбработкаЗаказ.Заказ = ВыбЗаказ.ПолучитьОбъект();
			Если НЕ ОбработкаЗаказ.ПрочитатьЗаказ(Истина) Тогда
				Возврат;
			КонецЕсли;
			ОбработкаЗаказ.Заказ.КоличествоПосетителей = ОбработкаЗаказ.Заказ.КоличествоПосетителей + КоличествоПосетителей;
		КонецЕсли;
		
		Заказ.КоличествоПосетителей = Макс(1, Заказ.КоличествоПосетителей - КоличествоПосетителей);
		
		НачатьТранзакцию();
		
		Для каждого СтрокаПереноса Из ТаблицаПереноса Цикл
			Если СтрокаПереноса.Перенести = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// удаляем из текущего заказа
			СтрокаТовара = ТаблицаЗаказа.Строки[СтрокаПереноса.ИндексИсходнойСтроки];
			СтрокаТовара.Количество	= СтрокаТовара.Количество	- СтрокаПереноса.Перенести;
			//СтрокаТовара.Удалено	= СтрокаТовара.Удалено		+ СтрокаПереноса.Перенести;
			РасчетПоСтроке(СтрокаТовара);
			
			// < КС_ВДВ ------------------------------------------------------------ 
			ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаТовара);
			// КС_ВДВ > ------------------------------------------------------------ 
			
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказУдалениеПриРазделении, Заказ.Ссылка, СтрокаТовара.Товар.Код, СтрокаТовара.Товар.Наименование, СтрокаПереноса.Перенести, СтрокаТовара.Цена, ОбработкаЗаказ.Заказ.Ссылка);
			
			// добавляем в выбранный
			СтрокаТовара1 = ОбработкаЗаказ.ТаблицаЗаказа.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара1, СтрокаТовара);
			СтрокаТовара1.Количество		= СтрокаПереноса.Перенести;
			
			Ст = ?(СтрокаТовара1.Родитель = Неопределено, ОбработкаЗаказ.ТаблицаЗаказа.Строки.Индекс(СтрокаТовара1), СтрокаТовара1.Родитель.Строки.Индекс(СтрокаТовара1));
			СтрокаТовара1.ИдСтроки			= НовыйИДСтрокиЗаказа(, Ст);
			
			РасчетПоСтроке(СтрокаТовара1);
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказДобавлениеПриРазделении, ОбработкаЗаказ.Заказ.Ссылка, СтрокаТовара.Товар.Код, СтрокаТовара.Товар.Наименование, СтрокаПереноса.Перенести, СтрокаТовара.Цена, Заказ.Ссылка);
			
			// Перенести значения записи из старого регистра в новый
			Если ИспользоватьЗаказТоварыДопИнф Тогда
				ЗаполнитьРегистрЗаказТоварыДопИнфПриРазделении(ОбработкаЗаказ.Заказ, СтрокаТовара1, СтрокаТовара.ИдСтроки, СтрокаТовара1.Количество);
			КонецЕсли;
			
			// копируем специфики
			//СкопироватьСпецифики(ОбработкаЗаказ.Заказ, СтрокаТовара, СтрокаТовара1, СтрокаТовара1.Количество);
			СкопироватьСпецифики(ОбработкаЗаказ.Заказ.Ссылка, СтрокаТовара, СтрокаТовара1, СтрокаТовара1.Количество, ОбработкаЗаказ.ТаблицаЗаказа);
			
			РасчетПоСтроке(СтрокаТовара1); //повторно пересчитываем строку после добавления специфик
		КонецЦикла; 
		
		// записываем текущий заказ
		Модифицирован = Истина;
		Если НЕ ЗаписатьЗаказ() Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// записываем заказ в который перенесли
		ОбработкаЗаказ.Модифицирован = Истина;
		Если НЕ ОбработкаЗаказ.ЗаписатьЗаказ() Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// Уведомить РМ мониторов марок по списку
		Если УведомитьМониторыМарок И МониторыМарок.Количество() > 0 Тогда
			//Защита.ОтправаитьУведомлениеРММониторы(МониторыМарок);
		КонецЕсли;	
		
		ЗафиксироватьТранзакцию();
		
		ОбработкаЗаказ.Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма);
		ОбработкаЗаказ.Заказ.Разблокировать();
		
	КонецПроцедуры
	
	Процедура СкопироватьСпецифики(НовыйЗаказСсылка, СтрокаТовара, СтрокаТовара1, Количество, ТаблицаЗаказаНовая)
		
		Для каждого СтрокаСпецифики Из СтрокаТовара.Строки Цикл
			
			СтрокаСпецифики1 = СтрокаТовара1.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСпецифики1, СтрокаСпецифики);
			Ст = ?(СтрокаСпецифики1.Родитель = Неопределено, ТаблицаЗаказаНовая.Строки.Индекс(СтрокаСпецифики1), СтрокаСпецифики1.Родитель.Строки.Индекс(СтрокаСпецифики1));
			СтрокаСпецифики1.ИдСтроки			= НовыйИДСтрокиЗаказа(, Ст);
			// Перенести значения записи из старого регистра в новый
			Если ИспользоватьЗаказТоварыДопИнф Тогда
				ЗаполнитьРегистрЗаказТоварыДопИнфПриРазделении(НовыйЗаказСсылка, СтрокаСпецифики1, СтрокаСпецифики.ИдСтроки, Количество);
			КонецЕсли;
			
			// вложенные специфики
			СкопироватьСпецифики(НовыйЗаказСсылка, СтрокаСпецифики, СтрокаСпецифики1, Количество, ТаблицаЗаказаНовая);
		КонецЦикла; 
		
	КонецПроцедуры
	
	
	// Заполнить новый регистр из старого
	//
	Процедура ЗаполнитьРегистрЗаказТоварыДопИнфПриРазделении(ЗаказНовый, СтрокаТовараНовая, ИдСтрокиДо, Количество)
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказТоварыДопИнф.Заказ,
		|	ЗаказТоварыДопИнф.ИдСтроки,
		|	ЗаказТоварыДопИнф.ВремяДозаказ,
		|	ЗаказТоварыДопИнф.ВремяЗаказано,
		|	ЗаказТоварыДопИнф.ВремяГотово,
		|	ЗаказТоварыДопИнф.ВремяВыдано,
		|	ЗаказТоварыДопИнф.Статус,
		|	ЗаказТоварыДопИнф.КодПодтверждения,
		|	ЗаказТоварыДопИнф.РабочееМесто,
		|// < КС_ВДВ ------------------------------------------------------------ 
		|	ЗаказТоварыДопИнф.Станция,
		|// КС_ВДВ > ------------------------------------------------------------ 
		|	ЗаказТоварыДопИнф.Подача,
		|	ЗаказТоварыДопИнф.ГруппаПечати,
		|	ЗаказТоварыДопИнф.АвторЗаказано,
		|	ЗаказТоварыДопИнф.АвторГотово,
		|	ЗаказТоварыДопИнф.Товар,
		|	ЗаказТоварыДопИнф.Количество,
		|	ЗаказТоварыДопИнф.КоличествоУдалено,
		|	ЗаказТоварыДопИнф.ИдСтрокиВладельца,
		|	ЗаказТоварыДопИнф.НомерМарки
		|ИЗ
		|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
		|ГДЕ
		|	ЗаказТоварыДопИнф.Заказ = &Заказ
		|	И ЗаказТоварыДопИнф.ИдСтроки = &ИдСтроки
		|");
                                
		Запрос.УстановитьПараметр("Заказ"	, Заказ.Ссылка);
		Запрос.УстановитьПараметр("ИдСтроки", ИдСтрокиДо);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;	
		
		МенеджерЗаписи = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьМенеджерЗаписи();
		
		Выборка.Следующий();
		
		МенеджерЗаписи.Заказ					= ЗаказНовый.Ссылка;
		МенеджерЗаписи.ИдСтроки					= СтрокаТовараНовая.ИдСтроки;
		МенеджерЗаписи.ВремяДозаказ				= Выборка.ВремяДозаказ;
		МенеджерЗаписи.ВремяЗаказано			= Выборка.ВремяЗаказано;
		МенеджерЗаписи.ВремяГотово				= Выборка.ВремяГотово;
		МенеджерЗаписи.ВремяВыдано				= Выборка.ВремяВыдано;
		МенеджерЗаписи.Статус					= Выборка.Статус;
		МенеджерЗаписи.КодПодтверждения			= Выборка.КодПодтверждения;
		МенеджерЗаписи.РабочееМесто				= Выборка.РабочееМесто;
		// < КС_ВДВ ------------------------------------------------------------ 
		МенеджерЗаписи.Станция					= Выборка.Станция;
		// КС_ВДВ > ------------------------------------------------------------ 
		МенеджерЗаписи.Подача					= Выборка.Подача;
		МенеджерЗаписи.ГруппаПечати				= Выборка.ГруппаПечати;
		МенеджерЗаписи.АвторЗаказано			= Выборка.АвторЗаказано;
		МенеджерЗаписи.АвторГотово				= Выборка.АвторГотово;
		МенеджерЗаписи.Товар					= Выборка.Товар;
		МенеджерЗаписи.Количество				= Количество;
		МенеджерЗаписи.КоличествоУдалено		= 0;
		МенеджерЗаписи.НомерМарки				= Выборка.НомерМарки;
		
		Если СтрокаТовараНовая.Родитель <> Неопределено Тогда
			МенеджерЗаписи.ИдСтрокиВладельца	= СтрокаТовараНовая.Родитель.ИдСтроки;
		КонецЕсли;
		МенеджерЗаписи.Записать();
		
		// Добавить РМ монитор марок в список для оповещения
		Если УведомитьМониторыМарок И ЗначениеЗаполнено(Выборка.ГруппаПечати) Тогда
//			Защита.СозданиеСпискаМониторыМарокДляУведомления(Выборка.ГруппаПечати, МониторыМарок); 	
		КонецЕсли;
		
		
	КонецПроцедуры
	
	Функция ТоварВСтопе(Товар, ОстатокТовара)
		
		Если глВерсия=1 Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		СтруктураРесурсов = РегистрыСведений.СтопЛист.ПолучитьПоследнее( , Новый Структура("Товар,ИнформационнаяБаза",Товар,ПараметрыСеанса.ТекущаяИБ) );
		
		ОстатокТовара = СтруктураРесурсов.Остаток;
		
		Возврат СтруктураРесурсов.вСтопе;
	КонецФункции
	
	Процедура ОбновитьОстатокСтопЛиста(СтрокиДозаказа)
		
		Если глВерсия=1 Тогда
			Возврат;
		КонецЕсли; 
		
		ТаблицаСтопЛиста = Новый ТаблицаЗначений;
		ТаблицаСтопЛиста.Колонки.Добавить("Товар");
		ТаблицаСтопЛиста.Колонки.Добавить("Остаток");
		
		Для каждого СтрокаТовара Из СтрокиДозаказа Цикл
			ОстатокТовара = 0;
			Если ТоварВСтопе(СтрокаТовара.Товар, ОстатокТовара) И ОстатокТовара > 0 Тогда
				СтрокаСтопЛиста = ТаблицаСтопЛиста.Добавить();
				СтрокаСтопЛиста.Товар	= СтрокаТовара.Товар;
				СтрокаСтопЛиста.Остаток	= Макс(0, ОстатокТовара - СтрокаТовара.Количество);
			КонецЕсли; 
		КонецЦикла; 
		
		Если ТаблицаСтопЛиста.Количество() = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		СтопЛист = Документы.СтопЛист.СоздатьДокумент();
		СтопЛист.ДополнительныеСвойства.Вставить("Новый");
		СтопЛист.Дата	= ТекущаяДата();
		СтопЛист.Автор	= глПользователь;
		СтопЛист.Заказ	= Заказ.Ссылка;
		СтопЛист.ИнформационнаяБаза = ПараметрыСеанса.ТекущаяИБ;
		
		Для каждого СтрокаСтопЛиста Из ТаблицаСтопЛиста Цикл
			СтрокаДок = СтопЛист.Товары.Добавить();
			СтрокаДок.Товар		= СтрокаСтопЛиста.Товар;
			СтрокаДок.вСтопе	= Истина;
			СтрокаДок.Остаток	= СтрокаСтопЛиста.Остаток;
		КонецЦикла; 
		
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом(СтопЛист,"Объект.Записать()") Тогда
			Текст1="Внимание!";
			Текст2="Остаток товара в стоп-листе не обновлен!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли; 
		
		// выгрузим для колцентра, если надо
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ВНЕШНИЕ СОБЫТИЯ, НАЛИВАЙКА
	
	// Обработка внешних событий
	//
	Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
		
		_Знач = ОбработкаВнешнихСобытий.ПолучитьДанные(Источник,Событие,Данные);
		Если НЕ ЗначениеЗаполнено(_Знач) Тогда
			Возврат;
		КонецЕсли;
		Если Источник = "NativeDraw" Тогда
			Возврат
		КонецЕсли;
		

		Если Источник="BarCodeScaner" Тогда
			
			ТоварНайден = ВводПоКоду("Идентификатор_"+_Знач, Истина);
			
			Если НЕ ТоварНайден Тогда
				ОбработкаКартыДоступа("Идентификатор_"+_Знач);
			КонецЕсли; 
			
		ИначеЕсли (Источник="MagneticStripeCardReader") ИЛИ (Лев(Источник,11)="RadioReader") Тогда
			ОбработкаКартыДоступа("Идентификатор_"+_Знач);
					
		КонецЕсли;
		
		
	КонецПроцедуры
	
	// Описание процедуры
	//
	Процедура ОбработкаКартыДоступа(ИдентификаторКарты)
		
		ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.Клиенты, СправочникСсылка.ПосадочныеМеста");
		ФлагПовтора = Ложь;
		_Объект = ИнтерфейсРМ.ИдентификацияПоКарте(ИдентификаторКарты, ТипПривязки, ФлагПовтора);
		
		Если НЕ ЗначениеЗаполнено(_Объект) Тогда
			Возврат;
			
		ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
			Если ИнтерфейсРМ.ПроверкаПользователяСмены(_Объект) Тогда
				ИнтерфейсРМ.СменаПользователя(_Объект);
			КонецЕсли; 
			
		ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.ПосадочныеМеста") Тогда
			ИзменитьМесто(Ложь, _Объект);
			
		ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.Клиенты") Тогда
			ВыборКлиента(_Объект);
		ИначеЕсли ТипЗнч(_Объект) = Тип("Структура") Тогда
			Если _Объект.Тип = Справочники.ТипыШаблоновШК.КартаЛояльности Тогда
				Если НЕ( ВыполнитьПроверку("ЗаказОткрыт",Ложь)	И 
					ВыполнитьПроверку("НеЗаблокирован", Ложь)
					) Тогда
					Возврат;
				КонецЕсли; 

				НКЛ = _Объект.Значение;
				НКЛ = СтрЗаменить(НКЛ, ";","");
				НКЛ = СтрЗаменить(НКЛ, "?","");
				ИзменитьКартуЛояльности(НКЛ);
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Обработка команд специализированной клавиатуры
	//
	Процедура ОбработкаСпецКлавиатуры(ЭлементРаскладки)
		
		Если НЕ( ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НетПресчета")	И 
			ВыполнитьПроверку("НеЗаблокирован")	И 
			ВыполнитьПроверку("НетУдалений")	И 
			ВыполнитьПроверку("Право.Дозаказ") 
			) Тогда
			Возврат;
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(ЭлементРаскладки.МассивТоваров) Тогда
			Возврат;
		КонецЕсли; 
		
		МассивТоваров = РазвернутьМассивТоваров(ЭлементРаскладки.МассивТоваров);
		
		Если МассивТоваров.Количество()=1 ИЛИ ЭлементРаскладки.ДобавлятьВсеПозицииСразу Тогда
			Для каждого Товар Из МассивТоваров Цикл
				ВводНовойСтроки(Товар);
			КонецЦикла; 
			
		Иначе
			Товар = ВыбратьТоварИзСписка(МассивТоваров);
			Если Товар <> Неопределено Тогда
				ВводНовойСтроки(Товар);
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецПроцедуры
	
	Процедура ОбработкаНаливайки(НомерПозиции)
		
		Позиция = Справочники.ПозицииНаливайки.НайтиПоКоду(НомерПозиции);
		
		Если Позиция = Неопределено Тогда
			Возврат;
		ИначеЕсли НЕ ЗначениеЗаполнено(Позиция.Товар) Тогда
			Возврат;
		КонецЕсли;
		
		БылДозаказ = ЕстьДозаказ;
		ВводНовойСтроки(Позиция.Товар, 1);
		ЕстьДозаказ = БылДозаказ;
		
		// здесь факт розлива уже свершенный, поэтому надо сразу записать позицию как заказанную
		СтрокаЗаказа = ТаблицаЗаказа.Строки[ТаблицаЗаказа.Строки.Количество()-1];
		СтрокаЗаказа.Статус = СтатусЗаказано;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаЗаказа);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		ЗаписатьЗаказ();
		
	КонецПроцедуры
	
	Процедура КомандаНаливайке( Событие, ВыбТов=Неопределено, Колво=0 )
		
		Если НЕ глПараметрыРМ.НаливайкаЕсть Тогда
			Возврат;
		КонецЕсли;
		
		Парам = Новый Структура;
		
		Если глПараметрыРМ.НаливайкаРежимРаботы = 0 Тогда
			// по факту, т.е. при открытии заказа мы разрешаем наливать все позиции 
			// а добавляются они по внешнему событию
			Если Событие="ЗаказОткрыт" И 
				ВыполнитьПроверку("ЗаказОткрыт"		,Ложь) И 
				ВыполнитьПроверку("ПроверкаСмены"	,Ложь) И 
				ВыполнитьПроверку("НетПресчета"		,Ложь) И 
				ВыполнитьПроверку("НеЗаблокирован"	,Ложь) И 
				ВыполнитьПроверку("Право.Дозаказ"	,Ложь) Тогда
				
				Действие = "РазрешитьВсе";
				
			ИначеЕсли Событие="ЗаказЗакрыт" Тогда
				Действие = "ЗапретитьВсе";
				
			Иначе
				Возврат;
			КонецЕсли;
			
		Иначе
			// разрешенные позиции
			Если Событие="Добавить" ИЛИ Событие="Удалить" Тогда
				
				Позиция = Справочники.ПозицииНаливайки.НайтиПоРеквизиту( "Товар", ВыбТов );
				
				Если Позиция.Пустая() Тогда
					Возврат;
					
				ИначеЕсли Позиция.ЭтоКоктейль Тогда
					ТаблицаПозиций = Новый ТаблицаЗначений;
					ТаблицаПозиций.Колонки.Добавить("НомерПозиции");
					ТаблицаПозиций.Колонки.Добавить("Количество");
					
					Для каждого СтрокаКоктейля Из Позиция.СоставКоктейля Цикл
						СтрокаТаблицыПозиций = ТаблицаПозиций.Добавить();
						СтрокаТаблицыПозиций.НомерПозиции	= СтрокаКоктейля.Позиция.Код;
						СтрокаТаблицыПозиций.Количество		= СтрокаКоктейля.Количество;
					КонецЦикла; 
					
					Действие = Событие + "ТаблицуПозиций";
					Парам.Вставить("ТаблицаПозиций", ТаблицаПозиций);
					
				Иначе
					Действие = Событие + "Позицию";
					Парам.Вставить("НомерПозиции", Позиция.Код);
					
				КонецЕсли;
				
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЕсли; 
		
		Парам.Вставить("Количество", Колво);
		
		Результат = глПараметрыРМ.Наливайка.ПолучитьОбъект().ВыполнитьДействие(Действие, Парам);
		
		Если Результат.Ошибка Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Результат.Описание, Результат.Подробно, "","ОК","");
		КонецЕсли;
		
	КонецПроцедуры  
	
	////////////////////////////////////////////////////////////////////////////////
	// ТАРИФИКАЦИЯ
	
	Процедура ЗапросВремениПоТарифу(СтрокаЗаказа, БезРасчетов=Ложь)
		//
		//ОбработкаРасчетыПоТарифу.Заказ				= Заказ.Ссылка;
		//ОбработкаРасчетыПоТарифу.СтрокаЗаказа		= СтрокаЗаказа;
		//ОбработкаРасчетыПоТарифу.ТаблицаУдалений	= ТаблицаУдалений;
		//
		//ОбработкаРасчетыПоТарифу.РежимПросмотра =	НЕ БезРасчетов И 
		//НЕ( ВыполнитьПроверку("ЗаказОткрыт"			, Ложь)	И 
		//ВыполнитьПроверку("ПроверкаСмены"		, Ложь)	И 
		//ВыполнитьПроверку("НетПресчета"			, Ложь)	И 
		//ВыполнитьПроверку("НеЗаблокирован"		, Ложь) И
		//ВыполнитьПроверку("Право.ИзмВремениТарифа", Ложь)
		//);
		//
		//НажалиОК = ОбработкаРасчетыПоТарифу.ОткрытьМодально() = "ОК";
		//
		//Если БезРасчетов ИЛИ НЕ НажалиОК Тогда
		//	Возврат;
		//КонецЕсли; 
		//
		//Модифицирован = Истина;
		//РасчетПоСтроке(СтрокаЗаказа);
		//
		//Если СтрокаЗаказа.Статус = СтатусУдалено Тогда
		//	ЕстьУдаление = Истина;
		//КонецЕсли; 
		//
		//Если СтрокаЗаказа.Статус=СтатусЗаказано И ЗначениеЗаполнено(СтрокаЗаказа.КомУстройство) И СтрокаЗаказа.ФлагИзменениеВремени Тогда
		//	// при изменении времени уже определенной тарификации записываем заказ по полной программе
		//	// чтобы при необходимости вкл/выкл коммутатор
		//	ЗаписатьЗаказ();
		//Иначе
		//	РасчетПоЗаказу();
		//КонецЕсли;
		
	КонецПроцедуры
	
	Функция ВыборКомУстройства(ВыбТов)
		
		КоммутироемоеУстройство = ВыбТов.КоммутироемоеУстройство;
		
		Если КоммутироемоеУстройство.Пустая() ИЛИ НЕ КоммутироемоеУстройство.ЭтоГруппа Тогда
			Возврат КоммутироемоеУстройство;
		КонецЕсли;
		
		МассивКомУстройств = Новый Массив;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ Ссылка ИЗ Справочник.КоммутируемыеУстройства
		|ГДЕ
		|	НЕ ЭтоГруппа И НЕ ПометкаУдаления
		|	И Родитель = &ГруппаКомУстройств 
		|
		|УПОРЯДОЧИТЬ ПО Код
		|");
		
		Запрос.УстановитьПараметр("ГруппаКомУстройств", КоммутироемоеУстройство);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивКомУстройств.Добавить(Выборка.Ссылка);
		КонецЦикла; 
		
		Если НЕ глПараметрыРМ.КЭПВыбиратьКомУстройствоПоНомеру Тогда
			Возврат ИнтерфейсРМ.ВыборИзСписка(МассивКомУстройств);
		КонецЕсли;
		
		// выбор по номеру
		НомерКомУстройства = ИнтерфейсРМ.ВводЧисла("№ устройства", "Число", 5, 0);
		
		Если НомерКомУстройства=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Для каждого КомУстройство Из МассивКомУстройств Цикл
			Если КомУстройство.Код = НомерКомУстройства Тогда
				Возврат КомУстройство;
			КонецЕсли; 
		КонецЦикла; 
		
		Текст1="Ошибка!";
		Текст2="Введен неверный номер устройства!
		|Повторите ввод...";
		
		Если ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"Повтор","","Esc=Отмена")="Повтор" Тогда 
			Возврат ВыборКомУстройства(ВыбТов);
		КонецЕсли;
		
		Возврат Неопределено;
	КонецФункции 
	
	Функция СоздатьТаблицуРасчетовПоТарифу()
		
		//Возврат ОбработкаРасчетыПоТарифу.ТаблицаРасчетов.ВыгрузитьКолонки();
		
	КонецФункции
	
	Процедура ПрочитатьТарификацию(СтрокаДок, СтрокаТовара)
		
		ДокРасчетыПоТарифу = СтрокаДок.РасчетыПоТарифу;
		Если НЕ ЗначениеЗаполнено(ДокРасчетыПоТарифу) Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТовара.ДокРасчетыПоТарифу = ДокРасчетыПоТарифу;
		СтрокаТовара.Тариф				= ДокРасчетыПоТарифу.Тариф;
		СтрокаТовара.КомУстройство		= ДокРасчетыПоТарифу.КоммутироемоеУстройство;
		СтрокаТовара.МаксВремя			= ДокРасчетыПоТарифу.МаксВремя;
		СтрокаТовара.МаксСумма			= ДокРасчетыПоТарифу.МаксСумма;
		СтрокаТовара.РасчетыПоТарифу	= ДокРасчетыПоТарифу.ТаблицаРасчетов.Выгрузить();
		
		Если ЗначениеЗаполнено(СтрокаТовара.КомУстройство) Тогда
			СтрокаТовара.Наименование = СтрокаТовара.Наименование+" ("+СтрокаТовара.КомУстройство.Наименование+")";
		КонецЕсли;
		
	КонецПроцедуры
	
	Функция ЗаписатьТарификацию(СтрокаДок, СтрокаТовара)
		
		РасчетыПоТарифу = СтрокаТовара.РасчетыПоТарифу;
		Если НЕ ЗначениеЗаполнено(РасчетыПоТарифу) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ДокРасчетыПоТарифу = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТовара.ДокРасчетыПоТарифу) Тогда
			ДокРасчетыПоТарифу = СтрокаТовара.ДокРасчетыПоТарифу.ПолучитьОбъект();
		КонецЕсли;
		// ПолучитьОбъект() из пустой ссылки возвращает Неопределено
		Если ДокРасчетыПоТарифу = Неопределено Тогда
			ДокРасчетыПоТарифу = Документы.РасчетыПоТарифу.СоздатьДокумент();
			ДокРасчетыПоТарифу.Дата = ТекущаяДата();
		КонецЕсли;
		
		ВремяНач = РасчетыПоТарифу[0].Время1;
		ВремяКон = РасчетыПоТарифу[РасчетыПоТарифу.Количество()-1].Время2;
		
		Если СтрокаТовара.Статус=СтатусЗаказано И СтрокаТовара.Количество=0 Тогда
			// позиция была удалена
			Если ВремяКон > ТекущаяДата() Тогда
				// время конца больше текущего времени - надо остановить сейчас
				ВремяКон = НачалоМинуты(ТекущаяДата());
			КонецЕсли;
		КонецЕсли;
		
		ДокРасчетыПоТарифу.ВремяНачала				= ВремяНач;
		ДокРасчетыПоТарифу.ВремяКонца				= ВремяКон;
		ДокРасчетыПоТарифу.Тариф					= СтрокаТовара.Тариф;
		ДокРасчетыПоТарифу.КоммутироемоеУстройство	= СтрокаТовара.КомУстройство;
		ДокРасчетыПоТарифу.МаксВремя				= СтрокаТовара.МаксВремя;
		ДокРасчетыПоТарифу.МаксСумма				= СтрокаТовара.МаксСумма;
		
		ДокРасчетыПоТарифу.ТаблицаРасчетов.Загрузить( РасчетыПоТарифу );
		
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДокРасчетыПоТарифу, "Объект.Записать()" ) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СтрокаТовара.ДокРасчетыПоТарифу = ДокРасчетыПоТарифу.Ссылка;
		СтрокаДок.РасчетыПоТарифу		= ДокРасчетыПоТарифу.Ссылка;
		
		Если СтрокаТовара.ФлагИзменениеВремени Тогда
			Если НЕ ОтправитьЗаданиеНаКоммутатор(СтрокаТовара.ДокРасчетыПоТарифу) Тогда
				Возврат Ложь;
			КонецЕсли; 
			СтрокаТовара.ФлагИзменениеВремени = Ложь;
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаТовара);
		// КС_ВДВ > ------------------------------------------------------------ 	
		
		Возврат Истина;
	КонецФункции
	
	Функция ОтправитьЗаданиеНаКоммутатор(ДокРасчетыПоТарифу)
		
		КомУстройство = ДокРасчетыПоТарифу.КоммутироемоеУстройство;
		Если НЕ ЗначениеЗаполнено(КомУстройство) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Коммутатор = КомУстройство.Коммутатор;
		Если НЕ ЗначениеЗаполнено(Коммутатор) Тогда
			Возврат Истина;
		КонецЕсли;
		
		ПараметрыДействия = Новый Структура;
		ПараметрыДействия.Вставить("ИдСобытия"		, ДокРасчетыПоТарифу.Номер);
		ПараметрыДействия.Вставить("НомерКанала"	, КомУстройство.НомерКанала);
		ПараметрыДействия.Вставить("ВремяНач"		, ДокРасчетыПоТарифу.ВремяНачала);
		ПараметрыДействия.Вставить("ВремяКон"		, ДокРасчетыПоТарифу.ВремяКонца);
		
		Результат = Коммутатор.ПолучитьОбъект().ВыполнитьДействие("ПоставитьВОчередь", ПараметрыДействия);
		
		Если Результат.Ошибка Тогда
			Ответ = ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Результат.Описание, Результат.Подробно, "Повтор","ОК","Esc=Отмена");
			Если Ответ = "Отмена" Тогда
				Возврат Ложь;
			ИначеЕсли Ответ = "Повтор" Тогда
				Возврат ОтправитьЗаданиеНаКоммутатор(ДокРасчетыПоТарифу);
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
	КонецФункции
	
	Функция ПересчетПоТарифам(ФлагОстановить=Ложь)
		
		Если глВерсия<3 Тогда
			Возврат Истина;
		КонецЕсли;
		
		МассивСтрок = ТаблицаЗаказа.Строки.НайтиСтроки( Новый Структура("Статус", СтатусТарифВкл) );
		Если МассивСтрок.Количество()=0 Тогда
			Возврат Истина;
		КонецЕсли; 
		
		Если ФлагОстановить Тогда
			Текст1="Тарификация!";
			Текст2="Внимание! Тарификация будет остановлена!";
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"ОК","","Esc=Отмена")="Отмена" Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ЕстьИзменения = Ложь;
		ТекВремя = НачалоМинуты(ТекущаяДата());
		
		Для каждого СтрокаЗаказа Из МассивСтрок Цикл
			
			РасчетыПоТарифу = СтрокаЗаказа.РасчетыПоТарифу;
			Время1 = РасчетыПоТарифу[0].Время1;
			Время2 = РасчетыПоТарифу[РасчетыПоТарифу.Количество()-1].Время2;
			
			Если ТекВремя < Время1 Тогда
				// время начала еще не наступило
				// в таблице только одна строка с неустановленным временем конца, 
				// установим Время2 < Время1, тогда задание будет отменено сервером коммутаторов
				Если ФлагОстановить Тогда
					РасчетыПоТарифу[0].Время2 = ТекВремя;
				КонецЕсли;
				
			ИначеЕсли Время2 < ТекВремя Тогда
				// текущее время больше уже рассчитанного
				//ОбработкаРасчетыПоТарифу.РассчитатьПоТарифу(СтрокаЗаказа.Тариф, РасчетыПоТарифу, ,ТекВремя);
				
				РасчетПоСтроке(СтрокаЗаказа);
				ЕстьИзменения = Истина;
				
				// < КС_ВДВ ------------------------------------------------------------ 
				ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаЗаказа);
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЕсли;
			
			Если ФлагОстановить Тогда
				СтрокаЗаказа.Статус = СтатусЗаказано;
				СтрокаЗаказа.ФлагИзменениеВремени = Истина;
				Модифицирован = Истина;
				
				// < КС_ВДВ ------------------------------------------------------------ 
				ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаЗаказа);
				// КС_ВДВ > -----------------------------------------------------------
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьИзменения И НЕ ФлагОстановить Тогда
			// если с остановкой, то расчет будет сразу после ПересчетПоТарифам при записи
			РасчетПоЗаказуПолный();
		КонецЕсли;
		
		Возврат Истина;
	КонецФункции
	 	
	////////////////////////////////////////////////////////////////////////////////
	// ПРЕДВАРИТЕЛЬНЫЙ ЗАКАЗ
	
	Процедура ЗаполнитьЗаказПоБрони(Бронь)
		
		Заказ.Бронь = Бронь;
		Заказ.Интернет = Бронь.Интернет;
		
		Для каждого СтрокаДок Из Бронь.Товары Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДок.Товар) ИЛИ СтрокаДок.Количество=0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТовара = ТаблицаЗаказа.Строки.Добавить();
			СтрокаТовара.Автор			= глПользователь;
			СтрокаТовара.Товар			= СтрокаДок.Товар;
			СтрокаТовара.Наименование	= СтрокаДок.Товар.Наименование;
			СтрокаТовара.Количество		= СтрокаДок.Количество;
			СтрокаТовара.Цена			= СтрокаДок.Цена;
			СтрокаТовара.Категория		= СтрокаДок.Товар.Категория;
			СтрокаТовара.Статус			= СтатусДозаказ;
			// < КС_ВДВ ------------------------------------------------------------ 
			СтрокаТовара.Станция		= глРабочееМесто.Станция;
			// КС_ВДВ > ------------------------------------------------------------ 
			СтрокаТовара.ГруппаПечати	= СтрокаДок.Товар.ГруппаПечати;
			
			СтрокаТовара.Подача	= ТекущаяПодача;
			
			РасчетПоСтроке(СтрокаТовара);
			
			// < КС_ВДВ ------------------------------------------------------------ 
			ДобавитьСтрокуЗаказаОтбор(СтрокаТовара);
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЦикла;
		
		// специфики в отдельной ТЧ, привязка по номеру строки товара
		Для каждого СтрокаДок Из Бронь.Специфики Цикл
			СтрокаТовара = ТаблицаЗаказа.Строки[СтрокаДок.НомерСтрокиТовара-1];
			СтрокаСпецифик = СтрокаТовара.Строки.Добавить();
			СтрокаСпецифик.Товар		= СтрокаДок.Специфика;
			СтрокаСпецифик.Наименование	= СтрДополнитьСправа("",(СтрокаСпецифик.Уровень()-1)*3) + " - "+СтрокаДок.Специфика.Наименование;
			СтрокаСпецифик.Статус		= СтатусДозаказ;
			СтрокаСпецифик.ГруппаПечати	= СтрокаДок.Специфика.ГруппаПечати;
			//СтрокаСпецифик.Цена			= СтрокаДок.Цена;
			// < КС_ВДВ ------------------------------------------------------------ 
			СтрокаСпецифик.Станция		= глРабочееМесто.Станция;
			
			ДобавитьСтрокуЗаказаОтбор(СтрокаСпецифик);
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЦикла;
		
		ЕстьДозаказ = Истина;
		
		РасчетПоЗаказуПолный();
		
		ПолучитьРекомендации(Ложь);
		
		// Отобразить изменения на ИнфоДисплее
		// < КС_ВДВ ------------------------------------------------------------ 
		//ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ.Ссылка, ТаблицаЗаказа, СписокРекомендаций);	
		ВыводЗаказаНаИнфоДисплей();
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецПроцедуры
	
	Процедура ПроверитьПредоплатуПоБрони()
		
		Если глВерсия = 1 ИЛИ НЕ ЗначениеЗаполнено(Заказ.Бронь) Тогда
			Возврат;
		ИначеЕсли глПараметрыРМ.БроньПредоплатаРежимВозврата = 0 Тогда
			Возврат;
		КонецЕсли; 
		
		БроньСуммаПредоплаты = НакопленияКлиента(Заказ.Бронь.Клиент, Заказ.Бронь).СуммаБезнал;
		Если БроньСуммаПредоплаты <= Заказ.ИтоговаяСумма Тогда
			Возврат;
		КонецЕсли; 
		
		Если глПараметрыРМ.БроньПредоплатаРежимВозврата = 1 Тогда
			// на сумму разницы добавить товар
			
		Иначе
			// на сумму разницы добавить наценку
			
		КонецЕсли; 
		
	КонецПроцедуры
	
	Процедура ВернутьПредоплатуПоБрони()
		
		Если глВерсия = 1 ИЛИ НЕ ЗначениеЗаполнено(Заказ.Бронь) Тогда
			Возврат;
		ИначеЕсли глПараметрыРМ.БроньПредоплатаРежимВозврата <> 0 Тогда
			Возврат;
		КонецЕсли; 
		
		БроньСуммаПредоплаты = НакопленияКлиента(Заказ.Бронь.Клиент, Заказ.Бронь).СуммаБезнал;
		Пока БроньСуммаПредоплаты > 0 Цикл
			
			ВводНачислений = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводНачислений");
			ВводНачислений.ЗнакОперации = -1;
			ВводНачислений.Клиент		= Заказ.Бронь.Клиент;
			ВводНачислений.КлиентСтр	= Заказ.Бронь.КлиентСтр;
			ВводНачислений.ДокОснование = Заказ.Бронь;
			ВводНачислений.СуммаОперации= БроньСуммаПредоплаты;
			
			ВводНачислений.ПолучитьФорму().ОткрытьМодально();
			
			БроньСуммаПредоплаты = НакопленияКлиента(Заказ.Бронь.Клиент, Заказ.Бронь).СуммаБезнал;
		КонецЦикла; 
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ДОСТАВКА
	
	Функция ДоставкаПроверкаЗаполнения() Экспорт
		
		Если Заказ.Ссылка.Пустая() Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		ФлагОшибки = Ложь;
		
		Если НЕ ЗначениеЗаполнено(Заказ.Клиент) Тогда
			ФлагОшибки = Истина;
			Текст2 = "Не указан клиент!";
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Заказ.Адрес) Тогда
			ФлагОшибки = Истина;
			Текст2 = "Не указан адрес доставки!";
			
		ИначеЕсли НЕ ЗначениеЗаполнено(Заказ.Телефон) Тогда
			ФлагОшибки = Истина;
			Текст2 = "Не указан телефон клиента!";
			
		ИначеЕсли ТаблицаЗаказа.Строки.Количество()=0 Тогда
			ФлагОшибки = Истина;
			Текст2 = "Не указаны товары для доставки!";
			
		КонецЕсли; 
		
		Если ФлагОшибки Тогда
			Текст1="Заказ не заполнен!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли; 
		
		Возврат НЕ ФлагОшибки;
	КонецФункции
	
	Функция ДоставкаПечатьМарок(ПоКнопкеПечать=Ложь) Экспорт
		
		//// Повторная попытка расчитать заказ
		//ЗаказУжеБылЗакрыт = ЗаказДопИнф.Статус=Перечисления.СтатусыЗаказа.Закрыт;
		//Если ЗаказУжеБылЗакрыт Тогда
		//	Возврат Истина;
		//КонецЕсли;	
		//
		//Если НЕ ФоновыйРежим И НЕ ДоставкаПроверкаЗаполнения() Тогда
		//	Возврат Ложь;
		//КонецЕсли; 
		//
		//БылДозаказ = ЕстьДозаказ ИЛИ ЕстьУдаление;
		//
		//// Если автор не определен, присваеваем текущего
		//НазначитьАвтора(глПользователь);
		//
		//// после печати марок запись заказа должна быть в любом случае
		//ПечатьПрошла = ПечатьМарок(ПоКнопкеПечать);
		//ЗаписатьЗаказ();
		//
		//Если БылДозаказ И ПечатьПрошла Тогда
		//	Если ТаблицаЗаказа.Строки.Итог("Количество")=0 Тогда
		//		УдалитьВсеЗаказанное();
		//	Иначе
		//		//ВнешнийЗаказ.ЗаписатьСтатусДоставки(Заказ.Ссылка, Перечисления.СтатусыДоставки.Принят);
		//		Если ЗначениеЗаполнено(Заказ.ВнешнийНомер) Тогда
		//			ПолучитьПоследнийСтатусДоставки(Заказ.Ссылка);// pr отправлялся пустой статус при фоновой печати (проверить все)
		//			ВнешнийЗаказ.ВыгрузитьДокумент(Заказ.Ссылка, ДоставкаДопИнф);
		//			//ПроверитьОбновлениеВнешнегоЗаказа();
		//		КонецЕсли;
		//	КонецЕсли; 
		//КонецЕсли; 
		//
		Возврат 1;
	КонецФункции
	
	Процедура ПолучитьПоследнийСтатусДоставки(ТекЗаказ, ОбновитьВФорме = Истина, ТекСтатус = Неопределено) Экспорт
		
		Если НЕ ОбновитьВФорме Тогда
			ТекСтатус = РегистрыСведений.ДоставкаДопИнф.ПолучитьПоследнее(, Новый Структура("Заказ",ТекЗаказ)).Статус;
			Возврат;
		КонецЕсли;
		
		ТабСрезПоследних = РегистрыСведений.ДоставкаДопИнф.СрезПоследних(, Новый Структура("Заказ",ТекЗаказ));
		ПоследняяДата = ?(ТабСрезПоследних.Количество()=0, ТекущаяДата(), ТабСрезПоследних[0].Период);
		
		ДоставкаДопИнф.Заказ = ТекЗаказ;
		ДоставкаДопИнф.Период = ПоследняяДата;
		ДоставкаДопИнф.Прочитать();
		
	КонецПроцедуры
	
	Процедура ДобавитьСпецификиВТаблицуЗаказа(СтрокиСпецифик, СтрокаТаблицы)
		
		Для каждого СтрокаСпецифик Из СтрокиСпецифик Цикл
			СтрокаТаблицыСпецифики = СтрокаТаблицы.Строки.Добавить();
			СтрокаТаблицыСпецифики.Товар				= СтрокаСпецифик.Товар;
			СтрокаТаблицыСпецифики.Наименование			= СтрДополнитьСправа("",(СтрокаСпецифик.Уровень()-1)*3) + " - "+СтрокаСпецифик.Товар.Наименование;
			СтрокаТаблицыСпецифики.Статус				= Перечисления.СтатусыПозицийЗаказа.Дозаказ;
			СтрокаТаблицыСпецифики.ИдСтроки				= СтрокаСпецифик.ИдСтроки;
			// < КС_ВДВ ------------------------------------------------------------ 
			ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаТаблицыСпецифики);
			// КС_ВДВ > ------------------------------------------------------------ 
			
			// вложенные специфики
			Если ЗначениеЗаполнено(СтрокаСпецифик.Строки) Тогда
				ДобавитьСпецификиВТаблицуЗаказа(СтрокаСпецифик.Строки, СтрокаТаблицыСпецифики);
			КонецЕсли;
		КонецЦикла; 
		
	КонецПроцедуры
	
	Процедура ПроверитьОбновлениеВнешнегоЗаказа() Экспорт
		
		КонецПроцедуры
	
	Процедура ДоставкаЖурналЗаказовВыбор(Знач ВыбЗаказ) Экспорт
		
		ТекЗаказ = ?(Заказ = Неопределено, Неопределено, Заказ.Ссылка);
		
		Если НЕ ВыходИзЗаказа() Тогда
			Возврат;
		КонецЕсли; 
		
		Заказ = ВыбЗаказ.ПолучитьОбъект();
		
		Если НЕ ПрочитатьЗаказ() Тогда
			
			Если ТекЗаказ = Неопределено Тогда
				Заказ = Неопределено;
			Иначе
				Заказ = ТекЗаказ.ПолучитьОбъект();
				ПрочитатьЗаказ();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ДОПОЛНИТЕЛЬНАЯ ИНФОРМАЦИЯ ПО СТРОКАМ (ДопИнф)
	
	// Добавить запись в регистр
	//
	Процедура РегистрЗаказТоварыДопИнфДобавить(СтрокаТовара, РежимПодтверждения, ТекДата, ВремяСекунд = 0, ЭтоТовар = Истина, ИдСтрокиВладельца = неопределено, КоличествоВладельца = 0)
		
		// Проверка на возможность записи конкретной строки заказа
		//Если НЕ (СтрокаТовара.Статус = СтатусДозаказ ИЛИ СтрокаТовара.Статус = СтатусЗаказано) ИЛИ ЭтоТовар И СтрокаТовара.Товар.Разделитель Тогда
		Если НЕ (СтрокаТовара.Статус = СтатусДозаказ ИЛИ СтрокаТовара.Статус = СтатусЗаказано) ИЛИ ЭтоТовар И НЕ ЗначениеЗаполнено(СтрокаТовара.Товар.ГруппаПечати) Тогда // pr Товар разделитель все равно нужно писать в регистр
			Возврат;
		КонецЕсли;	
		
		// Определяем количество (Товар/ специфика)
		Количество = ?(ЭтоТовар, СтрокаТовара.Количество, КоличествоВладельца);
		
		// Метки для менеджера записи
		ПозицияЗаказана			= СтрокаТовара.Статус = СтатусЗаказано;
		ЕстьЗапись				= Ложь;
		ПозицияУжеЗаказывалась	= Ложь;
		ИзмененилосьКоличество	= Ложь;
		ЕстьНомерМарки			= Ложь;
		БылСтатус				= Перечисления.СтатусыПозицийЗаказа.ПустаяСсылка();
		
		// Если отсутствует ИдСтроки то создаем
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.ИдСтроки) Тогда
			Ст = ?(СтрокаТовара.Родитель = Неопределено, ТаблицаЗаказа.Строки.Индекс(СтрокаТовара), СтрокаТовара.Родитель.Строки.Индекс(СтрокаТовара));
			
			СтрокаТовара.ИдСтроки = НовыйИДСтрокиЗаказа(, Ст); 
		КонецЕсли;	
		
		// Если отсутствует КодПодтверждения то создаем
		Если НЕ ЗначениеЗаполнено(СтрокаТовара.КодПодтверждения) Тогда
			СтрокаТовара.КодПодтверждения = ПолучитьКодПодтвержденияИзСтроки(СтрокаТовара, РежимПодтверждения, ВремяСекунд);
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаТовара);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		МенеджерЗаписи = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Заказ				= Заказ.Ссылка;
		МенеджерЗаписи.ИдСтроки				= СтрокаТовара.ИдСтроки;
		
		МенеджерЗаписи.Прочитать();
		
		// Заполнение меток для менеджера записи
		Если МенеджерЗаписи.Выбран() Тогда
			ЕстьЗапись				= Истина;
			ПозицияУжеЗаказывалась	= ЗначениеЗаполнено(МенеджерЗаписи.ВремяЗаказано);
			ИзмененилосьКоличество	= МенеджерЗаписи.Количество <> Количество;
			ЕстьНомерМарки			= ЗначениеЗаполнено(МенеджерЗаписи.НомерМарки);
			БылСтатус 				= МенеджерЗаписи.Статус;
		КонецЕсли;	
		
		//Если НЕ МенеджерЗаписи.Выбран() Тогда
		Если НЕ ЕстьЗапись Тогда
			МенеджерЗаписи.Заказ					= Заказ.Ссылка;
			МенеджерЗаписи.ИдСтроки					= СтрокаТовара.ИдСтроки;
			МенеджерЗаписи.ВремяДозаказ				= ТекДата;
			// Позиция уже заказана (печать прошла) проставляем "заказано"
			Если ПозицияЗаказана Тогда
				МенеджерЗаписи.ВремяЗаказано		= ТекДата;
				МенеджерЗаписи.АвторЗаказано		= глПользователь;
				
				// Добавить РМ монитор марок в список для оповещения
				Если УведомитьМониторыМарок И ЗначениеЗаполнено(СтрокаТовара.ГруппаПечати) Тогда
//					Защита.СозданиеСпискаМониторыМарокДляУведомления(СтрокаТовара.ГруппаПечати, МониторыМарок); 	
				КонецЕсли;
				
			КонецЕсли;
			МенеджерЗаписи.Статус					= СтрокаТовара.Статус;
			МенеджерЗаписи.КодПодтверждения			= СтрокаТовара.КодПодтверждения;
			МенеджерЗаписи.РабочееМесто				= глРабочееМесто;
			// < КС_ВДВ ------------------------------------------------------------ 
			МенеджерЗаписи.Станция					= СтрокаТовара.Станция;
			// КС_ВДВ > ------------------------------------------------------------ 
			МенеджерЗаписи.ГруппаПечати				= СтрокаТовара.ГруппаПечати;
			МенеджерЗаписи.Товар					= СтрокаТовара.Товар;
			
			// Если есть то добавляем НомерМарки
			НомерМарки = СоответствиеКодПодтвержденияНомерМарки[СтрокаТовара.КодПодтверждения];
			// Проставляем подачу только товару
			Если ЭтоТовар Тогда
				МенеджерЗаписи.Подача				= СтрокаТовара.Подача.Номер;
			иначе
				//если это специфика, найдем номер марки товара
				Запрос = новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
				|	ЗаказТоварыДопИнф.НомерМарки
				|ИЗ
				|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
				|ГДЕ
				|	ЗаказТоварыДопИнф.Заказ = &Заказ
				|	И ЗаказТоварыДопИнф.ИдСтроки = &ИдСтроки");
				Запрос.УстановитьПараметр("Заказ",Заказ.Ссылка);
				Запрос.УстановитьПараметр("ИдСтроки",ИдСтрокиВладельца);
				Выборка = Запрос.Выполнить();
				Если не Выборка.Пустой() тогда
					Выборка = Выборка.Выбрать();
					выборка.Следующий();
					НомерМарки = Выборка.НомерМарки;
				конецЕсли;
			КонецЕсли;
			МенеджерЗаписи.Количество				= Количество;
			МенеджерЗаписи.ИдСтрокиВладельца		= ИдСтрокиВладельца;
			
			Если НомерМарки <> Неопределено Тогда
				МенеджерЗаписи.НомерМарки			= НомерМарки;
			КонецЕсли; 			
			
			Если не ЗначениеЗаполнено(МенеджерЗаписи.Станция) Или не глПараметрыРМ.Тип = Перечисления.ТипыРМ.Производство Тогда //если станция не определена, т.е. добавили на ХОстес или Кассе
				МенеджерЗаписи.ВремяВыдано			= ТекДата;
				МенеджерЗаписи.ВремяГотово			= ТекДата;
				МенеджерЗаписи.Статус				= Перечисления.СтатусыПозицийЗаказа.Выдано;
			КонецЕсли;
			
			МенеджерЗаписи.Записать();
			
		ИначеЕсли ИзмененилосьКоличество ИЛИ (ПозицияЗаказана И НЕ ПозицияУжеЗаказывалась) Тогда
			
			МенеджерЗаписи.Заказ					= МенеджерЗаписи.Заказ;
			МенеджерЗаписи.ИдСтроки					= МенеджерЗаписи.ИдСтроки;
				
			МенеджерЗаписи.ВремяДозаказ				= МенеджерЗаписи.ВремяДозаказ;
			// При перезаписи проверять
			Если ПозицияЗаказана Тогда
				МенеджерЗаписи.ВремяЗаказано		= ?(ПозицияУжеЗаказывалась, МенеджерЗаписи.ВремяЗаказано, ТекДата);
				МенеджерЗаписи.АвторЗаказано		= ?(ПозицияУжеЗаказывалась, МенеджерЗаписи.АвторЗаказано, глПользователь);
				
				// < КС_ВДВ ------------------------------------------------------------ 
				//Если БыстрыйТовар Тогда
				//	МенеджерЗаписи.ВремяГотово		= ?(ПозицияУжеЗаказывалась, МенеджерЗаписи.ВремяГотово, ТекДата);
				//	МенеджерЗаписи.АвторГотово		= ?(ПозицияУжеЗаказывалась, МенеджерЗаписи.АвторГотово, глПользователь);
				//КонецЕсли; 
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЕсли;
			МенеджерЗаписи.КодПодтверждения			= МенеджерЗаписи.КодПодтверждения;
			МенеджерЗаписи.РабочееМесто				= МенеджерЗаписи.РабочееМесто;
			// < КС_ВДВ ------------------------------------------------------------ 
			МенеджерЗаписи.Станция					= МенеджерЗаписи.Станция;
			// КС_ВДВ > ------------------------------------------------------------ 
			МенеджерЗаписи.Подача					= МенеджерЗаписи.Подача;
			МенеджерЗаписи.ГруппаПечати				= МенеджерЗаписи.ГруппаПечати;
			МенеджерЗаписи.АвторГотово				= МенеджерЗаписи.АвторГотово;
			МенеджерЗаписи.Товар					= МенеджерЗаписи.Товар;
			Если ПозицияУжеЗаказывалась И МенеджерЗаписи.Количество > Количество Тогда// Статус удалено только если позиция уже заказывалась
				Если глПараметрыРМ.Тип = Перечисления.ТипыРМ.Производство Тогда
					МенеджерЗаписи.Статус				= СтатусЗаказано;	
				Иначе
					МенеджерЗаписи.Статус				= БылСтатус;	
				КонецЕсли;
				
				МенеджерЗаписи.КоличествоУдалено	= МенеджерЗаписи.Количество - Количество;
			Иначе
				МенеджерЗаписи.Статус				= СтрокаТовара.Статус;
			КонецЕсли;                      		
			МенеджерЗаписи.Количество				= Количество;
			МенеджерЗаписи.ИдСтрокиВладельца		= МенеджерЗаписи.ИдСтрокиВладельца;
			
			Если ЕстьНомерМарки Тогда
				МенеджерЗаписи.НомерМарки			= МенеджерЗаписи.НомерМарки;
			Иначе
				// Если есть то добовляем НомерМарки
				НомерМарки = СоответствиеКодПодтвержденияНомерМарки[СтрокаТовара.КодПодтверждения];
				Если НомерМарки <> Неопределено Тогда
					МенеджерЗаписи.НомерМарки		= НомерМарки;
				КонецЕсли; 
			КонецЕсли;
			
			// Добавить РМ монитор марок в список для оповещения
			Если УведомитьМониторыМарок И ЗначениеЗаполнено(МенеджерЗаписи.ГруппаПечати) Тогда
//				Защита.СозданиеСпискаМониторыМарокДляУведомления(МенеджерЗаписи.ГруппаПечати, МониторыМарок); 	
			КонецЕсли;
			
			Если Количество Тогда
			
				МенеджерЗаписи.Записать();	
			ИначеЕсли ПозицияУжеЗаказывалась Тогда
				МенеджерЗаписи.Удалить();
			Иначе 
				Попытка
				
					МенеджерЗаписи.Удалить();
				
				Исключение
				
				КонецПопытки; 
			КонецЕсли; 
			
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Получаем структуру данных из регистра ЗаказТоварыДопИнф к ИдСтроки
	// 
	Функция ПолучитьСтруктуруЗаказТоварыДопИнф() Экспорт
		
		СоответствиеИдСтроки = Новый Соответствие;
		
		// Получаем из регистра список ШК, подачи и время по этому заказу 
		Запрос = Новый Запрос("
		|ВЫБРАТЬ	
		|	ИдСтроки,
		|	КодПодтверждения,
		|	Подача,
		|	Статус,
		|// < КС_ВДВ ------------------------------------------------------------ 
		|	Станция,
		|	НомерМарки,
		|// КС_ВДВ > ------------------------------------------------------------ 
		|	ВремяЗаказано
		|ИЗ	РегистрСведений.ЗаказТоварыДопИнф
		|ГДЕ Заказ = &Заказ
		|");
		Запрос.УстановитьПараметр("Заказ",Заказ.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаказТоварыДопИнф = Новый Структура;
			ЗаказТоварыДопИнф.Вставить("КодПодтверждения"	, Выборка.КодПодтверждения);
			ЗаказТоварыДопИнф.Вставить("Подача"				, Выборка.Подача);
			ЗаказТоварыДопИнф.Вставить("ВремяЗаказано"		, Выборка.ВремяЗаказано);
			ЗаказТоварыДопИнф.Вставить("Статус"				, Выборка.Статус);
			// < КС_ВДВ ------------------------------------------------------------ 
			ЗаказТоварыДопИнф.Вставить("Станция"			, Выборка.Станция);
			ЗаказТоварыДопИнф.Вставить("НомерМарки"			, Выборка.НомерМарки);
			// КС_ВДВ > ------------------------------------------------------------ 
			СоответствиеИдСтроки.Вставить(Выборка.ИдСтроки, ЗаказТоварыДопИнф);
		КонецЦикла;	
		
		Возврат СоответствиеИдСтроки;
	КонецФункции
	
	// Сформировать код подтверждения
	//
	Функция ПолучитьКодПодтвержденияИзСтроки(СтрокаТовара, РежимПодтверждения = 0, ВремяСекунд = 0)	
		
		// Количество секунд с начало дня
		Если ВремяСекунд = 0 Тогда
			ВремяСекунд = Формат(ТекущаяДата()-НачалоДня(ТекущаяДата()),"ЧГ=")
		КонецЕсли;	
		
		// Номер заказа как 1 часть кода подтверждения
		НомерЗаказа			= Строка(Формат(Число(Заказ.Номер),"ЧГ="));
		
		// Количество знаков для формирования 2 части кода подтверждения
		КолДопЗнаковМарки	= 10 - СтрДлина(НомерЗаказа);
		
		// Формируем код подтверждения 1 часть + сформированная 2 часть
		Если РежимПодтверждения = 0 Тогда
			КодПодтверждения = НомерЗаказа + Прав("0000000000" + Строка(ВремяСекунд) + Прав("00" + СтрокаТовара.ГруппаПечати.Код,2),КолДопЗнаковМарки); 
		ИначеЕсли РежимПодтверждения = 1 Тогда
			КодПодтверждения = НомерЗаказа + Прав("0000000000" + Строка(ВремяСекунд) + Прав("00" + СтрокаТовара.ГруппаПечати.Код,2) + Прав("0" + ?(ЗначениеЗаполнено(СтрокаТовара.Подача), СтрокаТовара.Подача.Номер, ТекущаяПодача.Номер), 1),КолДопЗнаковМарки);
		Иначе
			Если НЕ ЗначениеЗаполнено(СтрокаТовара.ИдСтроки) Тогда
				Ст = ?(СтрокаТовара.Родитель = Неопределено, ТаблицаЗаказа.Строки.Индекс(СтрокаТовара), СтрокаТовара.Родитель.Строки.Индекс(СтрокаТовара));
				
				СтрокаТовара.ИдСтроки = НовыйИДСтрокиЗаказа(, Ст); 
				// < КС_ВДВ ------------------------------------------------------------ 
				ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаТовара);
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЕсли;	
			// < КС_ВДВ ------------------------------------------------------------ 
			//КодПодтверждения = НомерЗаказа + Прав("0000000000" + СтрокаТовара.ИдСтроки,КолДопЗнаковМарки);
			
			Если СтрокаТовара.Уровень() > 0 Тогда
				// Для специфик не нужен отдельный код подтверждения! 
				// Берём код из строки товара.
				СтрокаКорень     = ПолучитьСтрокуТовара(СтрокаТовара);
				КодПодтверждения = НомерЗаказа + Прав("0000000000" + СтрокаКорень.ИдСтроки,КолДопЗнаковМарки);
			Иначе			
				КодПодтверждения = НомерЗаказа + Прав("0000000000" + СтрокаТовара.ИдСтроки,КолДопЗнаковМарки);
			КонецЕсли; 
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли;	
		
		Возврат КодПодтверждения;
		
	КонецФункции
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Процедура ПодтвердитьВыдачуСпецифик(СтрокиСпецифик)
		
		Для каждого СтрокаСпецифик Из СтрокиСпецифик Цикл
			
			//Защита.ПодтверждениеВыдачи(СтрокаСпецифик.ИдСтроки, Заказ.Ссылка, Истина);
			Защита.ПодтверждениеВыдачи(СтрокаСпецифик.ИдСтроки, Заказ.Ссылка); // убран третий параметр, чтобы не появлялись всплавающие окна
			
			Если ЗначениеЗаполнено(СтрокаСпецифик.Строки) Тогда
				ПодтвердитьВыдачуСпецифик(СтрокаСпецифик.Строки)
			КонецЕсли;	
		КонецЦикла; 
		
	КонецПроцедуры // < КС_ВДВ ------------------------------------------------------------ 
	
	// Отметить выдачу
	//
	Процедура ОтметитьВыдачу(СтрокаТовара,ВыводПредупреждения=Истина)
		Если ВыводПредупреждения Тогда
			Текст1="Подтвердить выдачу?";
			Текст2="Подтвердить выдачу "+СтрокаТовара.Товар.Наименование+"?";
			фПодтвердитьВыдачу = ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","","Esc=Нет") = "Да";	
		Иначе
			фПодтвердитьВыдачу = Истина;
		КонецЕсли; 
		Если фПодтвердитьВыдачу Тогда		
			// < КС_ВДВ ------------------------------------------------------------ 
			//Защита.ПодтверждениеВыдачи(СтрокаТовара.ИдСтроки, Заказ.Ссылка, Истина);
			Защита.ПодтверждениеВыдачи(СтрокаТовара.ИдСтроки, Заказ.Ссылка); // убран третий параметр, чтобы не появлялись всплавающие окна
			// КС_ВДВ > ------------------------------------------------------------ 
			
			// < КС_ВДВ ------------------------------------------------------------ 
			// Подтверждение выдачи у специфик. 
			// Почему-то в Защита.ПодтверждениеВыдачи не подтверждается выдача специфик!
			ПодтвердитьВыдачуСпецифик(СтрокаТовара.Строки);
			// КС_ВДВ > ------------------------------------------------------------ 
			ПерезаполнитьСтатусыПозиций();
			// < КС_ВДВ ------------------------------------------------------------ 
			ксТрактир.ОбработкаПриПолнойВыдачеМарки(СтрокаТовара.ИдСтроки, Заказ.Ссылка);
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли;
		
	КонецПроцедуры
	
	// Перезаполнить статусы позиций в табличной части
	//
	Процедура ПерезаполнитьСтатусыПозиций() Экспорт
		
		СоответствиеИдСтроки = ПолучитьСтруктуруЗаказТоварыДопИнф();
		ПерезаполнениеСтатусовПозиций(СоответствиеИдСтроки, ТаблицаЗаказа.Строки);
		
	КонецПроцедуры
	
	Процедура ПерезаполнениеСтатусовПозиций(СоответствиеИдСтроки, ОбрабатываемыеСтроки)
		
		Для каждого СтрокаТовара Из ОбрабатываемыеСтроки Цикл
			ЗаказТоварыДопИнф = СоответствиеИдСтроки[СтрокаТовара.ИдСтроки];
			Если ЗаказТоварыДопИнф <> Неопределено Тогда
				СтрокаТовара.КодПодтверждения	= ЗаказТоварыДопИнф.КодПодтверждения;
				СтрокаТовара.СтатусДопИнф		= ЗаказТоварыДопИнф.Статус;
				// < КС_ВДВ ------------------------------------------------------------ 
				ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаТовара);
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТовара.Строки) Тогда
				ПерезаполнениеСтатусовПозиций(СоответствиеИдСтроки, СтрокаТовара.Строки)
			КонецЕсли;	
		КонецЦикла;
		
	КонецПроцедуры
	
	////////////////////////////////////////////////////////////////////////////////
	// ТРАКТИРЪ: МОБАЙЛ
	
	// Печать QRкода для идентификации заказа в Трактиръ-мобайл
	//
	Процедура ПечатьQRкода() Экспорт
		
		Если НЕ(  ВыполнитьПроверку("ЗаказОткрыт")	И 
			ВыполнитьПроверку("ПроверкаСмены")	И 
			ВыполнитьПроверку("НеЗаблокирован") И 
			ВыполнитьПроверку("Право.ПечатьQRкодаЗаказа") 
			) Тогда
			Возврат;
		КонецЕсли; 
		
		Если НЕ Заказ.ТрактиръМобайл Тогда
			Заказ.ТрактиръМобайл = Истина;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом( Заказ, "Объект.Записать()" );
			НовыйЗаказ = Ложь;
		КонецЕсли; 
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказПечатьQRкода,Заказ.Ссылка);
		
		Если НЕ ФоновыйРежим Тогда
			глОжидание.Начало("Выполняется печать...",
			"Идет печать заданий на сервис-принтерах.
			|Пожалуйста, подождите...");
		КонецЕсли;
		
		ОбработкаПечати = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПечатьЗаказа");
		ОбработкаПечати.Заказ			 = Заказ;
		ОбработкаПечати.ЗаказДопИнф		 = ЗаказДопИнф;
		ОбработкаПечати.ПротоколРасчетов = ЗаказДопИнф.ПротоколРасчетов;
		ОбработкаПечати.ФоновыйРежим	 = ФоновыйРежим;
		
		ПечатьОК = ОбработкаПечати.ПечатьQRкода();
		
		Текст1 = ОбработкаПечати.Текст1;
		Текст2 = ОбработкаПечати.Текст2;
		
		Если НЕ ФоновыйРежим Тогда
			глОжидание.Конец();
		КонецЕсли;
		
		Если НЕ ПечатьОК Тогда
			Возврат;
		КонецЕсли;
		
		Если глПараметрыРМ.ТрактиръМобайлПечатьQRКодаАвтоВыход И ФормаЗаказа <> Неопределено Тогда
			ФормаЗаказа.Закрыть();
		КонецЕсли;
		
	КонецПроцедуры
	
	Процедура ДобавитьДозаказВФоне(ТаблицаДозаказа) Экспорт
		
		Для каждого СтрокаДозаказа Из ТаблицаДозаказа.Строки Цикл
			
			// если вдруг повторно пришли какие-то строки
			Если ТаблицаЗаказа.Строки.Найти(СтрокаДозаказа.ИдСтроки, "ИдСтроки") <> Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			Товар = СтрокаДозаказа.Товар;
			// тарифицируемые и абонементы нельзя!!!
			Если глВерсия = 3 И Товар.Тип <> Перечисления.ТипыТоваров.Товар Тогда
				Продолжить;
			КонецЕсли; 
			
			СтруктураЦены = ЦенаТовара(Товар, ТипЦен);
			Цена = ПересчетВалют(СтруктураЦены.Цена, СтруктураЦены.Валюта);
			
			СтрокаЗаказа = ТаблицаЗаказа.Строки.Добавить();
			СтрокаЗаказа.Статус			= СтатусДозаказ;
			// < КС_ВДВ ------------------------------------------------------------ 
			СтрокаЗаказа.Станция		= глРабочееМесто.Станция;
			// КС_ВДВ > ------------------------------------------------------------ 
			СтрокаЗаказа.Товар			= Товар;
			СтрокаЗаказа.ТипЦен			= ТипЦен;
			СтрокаЗаказа.Цена			= Цена;
			СтрокаЗаказа.Количество		= СтрокаДозаказа.Количество;
			СтрокаЗаказа.Категория		= Товар.Категория;
			СтрокаЗаказа.ГруппаПечати	= Товар.ГруппаПечати;
			СтрокаЗаказа.Подача			= ТекущаяПодача;
			СтрокаЗаказа.ИдСтроки		= СтрокаДозаказа.ИдСтроки;
			СтрокаЗаказа.Источник		= СтрокаДозаказа.Источник;
			// < КС_ВДВ ------------------------------------------------------------ 
			СтрокаЗаказаОтбор = ДобавитьСтрокуЗаказаОтбор(СтрокаЗаказа);
			// КС_ВДВ > ------------------------------------------------------------ 
			
			Для каждого СтрокаДозаказаСпецифик Из СтрокаДозаказа.Строки Цикл
				СтрокаСпецифик = СтрокаЗаказа.Строки.Добавить();
				СтрокаСпецифик.Статус		= СтатусДозаказ;
				СтрокаСпецифик.Товар		= СтрокаДозаказаСпецифик.Товар;
				СтрокаСпецифик.ГруппаПечати	= СтрокаДозаказаСпецифик.Товар.ГруппаПечати;
				СтрокаСпецифик.Цена			= СтрокаДозаказаСпецифик.Цена;
				// < КС_ВДВ ------------------------------------------------------------ 
				ДобавитьСтрокуЗаказаОтбор(СтрокаСпецифик);
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЦикла;
			
			РасчетПоСтроке(СтрокаЗаказа);
			
			// < КС_ВДВ ------------------------------------------------------------ 
			ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаЗаказа, СтрокаЗаказаОтбор);
			// КС_ВДВ > ------------------------------------------------------------ 
			
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ТрактиръМобайлДозаказ, Заказ.Ссылка, Товар.Код, Товар.Наименование, СтрокаЗаказа.Количество, СтрокаЗаказа.Цена, СтрокаЗаказа.Сумма );
			
			Модифицирован	= Истина;
			ЕстьДозаказ		= Истина;
		КонецЦикла; 
		
	КонецПроцедуры
	
	Функция НовыйИДСтрокиЗаказа(Префикс = "t", ТекНомерСтроки = 0) Экспорт
		
		//Ид = Префикс + НомерКлюча +"_"+ Формат(ТекущаяДата() - Дата(1970,1,1), "ЧГ=") + Формат(ТекНомерСтроки, "ЧГ=") + ГСЧ.СлучайноеЧисло(1,999);
		Ид = Строка(Новый УникальныйИдентификатор);  
		Ид = СтрЗаменить(Ид, "-","");
		Ид = Прав(Ид, 30); 		
		Ид = прав(Формат(HexToDec(Ид), "ЧГ=0"),30);
		Возврат Ид;
	КонецФункции
	
	// Функция переводит шестнадцатеричное число в десятичное
	// Параметры: _Hex     - Строка              - Шестнадцатеричное число
	// Возвращаемое значение: Число   - Десятичное число
	//
	Функция HexToDec(Знач _Hex)
		
		База = 16;
		_Hex = СокрЛП(_Hex);
		СтаршаяСтепень = СтрДлина(_Hex) - 1;
		Результат = 0;
		счСимволов = 1;
		
		Пока СтаршаяСтепень >= 0 Цикл
			_HexСимвол = Сред(_Hex, счСимволов, 1);
			Представление = Найти("0123456789abcdef", _HexСимвол) - 1;
			Результат = Результат + Представление * Pow(База, СтаршаяСтепень);
			СтаршаяСтепень = СтаршаяСтепень - 1;
			СчСимволов = СчСимволов + 1;
		КонецЦикла;
		
		Возврат Результат;
		
	КонецФункции // HexToDec()

	
	////////////////////////////////////////////////////////////////////////////////
	// Рекомендации
	
	// Получить список рекомендаций
	// Если режим выбора то выбрать
	//
	Процедура ПолучитьРекомендации(РежимВыбора = Истина) Экспорт 
		
		Если НЕ ИспользоватьРекомендации Тогда
			Возврат;
		КонецЕсли;
		
		// Список заказанных позиций
		СписокТоваров = ТаблицаЗаказа.Строки.ВыгрузитьКолонку("Товар");
		
		// Создать список заказанных товаров и групп к котороым они пренадлежат
		СписокТоваровГрупп = Новый СписокЗначений;
		Если СписокТоваров.Количество() > 0 ТОгда
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	Товары.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка В(&СписокТоваров)
			|	И НЕ Товары.ПометкаУдаления
			|ИТОГИ ПО
			|	Ссылка ТОЛЬКО ИЕРАРХИЯ");
			Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
			СписокТоваровГрупп.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		КонецЕсли;
		СписокТоваровГрупп.Добавить(Справочники.Товары.ПустаяСсылка(), "ПО УМОЛЧАНИЮ");
		
		// Получить выборку рекомендуемых товаров и групп
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Рекомендации.Что КАК Что,
		|	Рекомендации.КЧему КАК КЧему,
		|	Рекомендации.Описание КАК Описание
		|ИЗ
		|	РегистрСведений.Рекомендации КАК Рекомендации
		|ГДЕ
		|	Рекомендации.КЧему В (&СписокТоваровГрупп)
		|	И НЕ Рекомендации.Что В (&СписокТоваровГрупп) 
		|	И НЕ Рекомендации.Что.ПометкаУдаления
		|	И (Рекомендации.КЧему = Значение(Справочник.Товары.ПустаяСсылка) ИЛИ НЕ Рекомендации.КЧему.ПометкаУдаления)
		|УПОРЯДОЧИТЬ ПО
		|	Рекомендации.КЧему.Наименование,
		|	Рекомендации.Что.Наименование");
		Запрос.УстановитьПараметр("СписокТоваровГрупп", СписокТоваровГрупп);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			СписокРекомендаций = Неопределено;
			Возврат;
		КонецЕсли;	
		
		ТаблицаРекомендаций = Результат.Выгрузить();
		
		// Таблицу рекомендаций перевести в список для выбора
		СписокРекомендаций = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из ТаблицаРекомендаций Цикл
			ЭлементСписка = СписокРекомендаций.НайтиПоЗначению(СтрокаТаблицы.Что);
			Если ЭлементСписка = Неопределено Тогда
				//СписокРекомендаций.Добавить(СтрокаТаблицы.Что, "Рекомендуется " + ?(РаботаемПоПустойСсылке, "по умолчанию", "к: " + Строка(СтрокаТаблицы.КЧему)));
				СписокРекомендаций.Добавить(СтрокаТаблицы.Что, "Рекомендуем к: " + ?(ЗначениеЗаполнено(СтрокаТаблицы.КЧему), Строка(СтрокаТаблицы.КЧему), " ПО УМОЛЧАНИЮ"));
			Иначе
				ЭлементСписка.Представление = ЭлементСписка.Представление + ", " + ?(ЗначениеЗаполнено(СтрокаТаблицы.КЧему), Строка(СтрокаТаблицы.КЧему), " ПО УМОЛЧАНИЮ");
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ РежимВыбора Тогда
			Возврат;
		КонецЕсли;	
		
		// Выбрать рекомендуемое из списка
		МассивВыбранных = Новый Массив;
		ВыбТовар = ИнтерфейсРМ.ВыборИзСписка(СписокРекомендаций, Истина, МассивВыбранных, "Рекомендуемые блюда", "Доступные значения");
		Если ВыбТовар = Неопределено Тогда
			СписокРекомендаций = Неопределено;
			Возврат;
		КонецЕсли; 
		
		// Добавить в заказ выбранные позиции
		Если ВыбТовар.Количество() = 1 Тогда
			НовыйТовар = ВыбТовар[0];
			// Если это группа нужно выбрать из элементов
			Если НовыйТовар.ЭтоГруппа Тогда
				НовыйТовар = ВыбратьТоварИзГруппы(НовыйТовар);
			КонецЕсли;	
			ВводНовойСтроки(НовыйТовар);
		Иначе	
			Для Каждого СтрТовар Из ВыбТовар Цикл
				НовыйТовар = СтрТовар;
				// Если это группа нужно выбрать из элементов
				Если НовыйТовар.ЭтоГруппа Тогда
					НовыйТовар = ВыбратьТоварИзГруппы(НовыйТовар);
				КонецЕсли;	
				ВводНовойСтроки(НовыйТовар, 1);
			КонецЦикла;
		КонецЕсли;
		
		СписокРекомендаций = Неопределено;
		
	КонецПроцедуры
	
	// Выбор 1го товара из группы
	//
	Функция ВыбратьТоварИзГруппы(НовыйТовар)
		
		ТекГруппа = НовыйТовар;
		
		// Получить выборку элементов из группы
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Товары.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка В ИЕРАРХИИ(&ГруппаТоваров)
		|	И НЕ Товары.ЭтоГруппа
		|	И НЕ Товары.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	Товары.Наименование");
		Запрос.УстановитьПараметр("ГруппаТоваров", ТекГруппа);
		
		Результат = Запрос.Выполнить();
		
		// Если выборка пуста то не добавляем
		Если Результат.Пустой() Тогда
			Возврат Неопределено;
		КонецЕсли;	
		
		// Выгрузить результат запроса в список
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
		// Если в списке один элемент возвращаем сразу
		Если СписокВыбора.Количество() = 1 Тогда
			Возврат СписокВыбора[0].Значение;
		КонецЕсли;	
		
		// Выбираем из списка элементов
		Возврат ИнтерфейсРМ.ВыборИзСписка(СписокВыбора, , , "Выбор из группы: " + ТекГруппа, "Доступные значения");
		
	КонецФункции
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Процедура ДобавитьПодчиненныеСтроки(СтрокаЗаказа, СтрокаЗаказаОтбор)
		
		Для каждого СтрокаСпецифик Из СтрокаЗаказа.Строки Цикл
			
			СтрокаСпецификОтбор = ДобавитьСтрокуЗаказаОтбор(СтрокаСпецифик, СтрокаЗаказаОтбор);
			
			ДобавитьПодчиненныеСтроки(СтрокаСпецифик, СтрокаСпецификОтбор);
		КонецЦикла; 
		
	КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Функция ИнформацияОВыданныхПейджерах()
		
		МассивВыданных = ксТрактир.ВыданныеПейджеры(Заказ.Ссылка, СтанцияОтбор);
		
		ВыданныеПейджерыСтр = "";
		
		Для К = 0 По МассивВыданных.Количество()-1 Цикл
			ВыданныеПейджерыСтр = ВыданныеПейджерыСтр + ?(ПустаяСтрока(ВыданныеПейджерыСтр), "", ", ") + СокрЛП(МассивВыданных[К].Наименование);
		КонецЦикла; 
		
		Возврат " "+ВыданныеПейджерыСтр;
		
	КонецФункции 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Функция ОбновитьИнформациюОВыданныхПейджерах() Экспорт
		
		ВыданныеПейджерыСтр = ИнформацияОВыданныхПейджерах();
		
	КонецФункции 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Процедура УстановитьФильтрПоСтанции() Экспорт
		
		ЗаполнитьТаблицуЗаказаОтбор();
		
		// После заполнения все строки в ТаблицаЗаказаОтбор свёрнутые - нужно развернуть
		РазвернутьСпецифики();
		
		СтанцияОтборСуммаНач = ПолучитьСуммуНачПоСтанцииОтбор();
		
		ВыданныеПейджерыСтр = ИнформацияОВыданныхПейджерах();
		
	КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Процедура ЗаполнитьТаблицуЗаказаОтбор()
		
		ТаблицаЗаказаОтбор.Строки.Очистить();
		
		Если СтанцияОтбор = Неопределено или СтанцияОтбор.ПоказыватьВесьЗаказ = истина Тогда
			// Копируем все строки без отбора
			Для каждого СтрокаЗаказа Из ТаблицаЗаказа.Строки Цикл
				
				СтрокаЗаказаОтбор = ДобавитьСтрокуЗаказаОтбор(СтрокаЗаказа, ТаблицаЗаказаОтбор);
				
				ДобавитьПодчиненныеСтроки(СтрокаЗаказа, СтрокаЗаказаОтбор);
			КонецЦикла; 
			
		Иначе
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Станция", СтанцияОтбор);	
			
			// Считаем, что специфики по товару привязаны к той же станции, что и сам товар
			МассивСтрокТоваров = ТаблицаЗаказа.Строки.НайтиСтроки(ПараметрыОтбора, Ложь);
			
			Для К = 0 По МассивСтрокТоваров.Количество() - 1 Цикл
				
				СтрокаЗаказа = МассивСтрокТоваров[К];
				СтрокаЗаказаОтбор = ДобавитьСтрокуЗаказаОтбор(СтрокаЗаказа, ТаблицаЗаказаОтбор);
				
				ДобавитьПодчиненныеСтроки(СтрокаЗаказа, СтрокаЗаказаОтбор);
			КонецЦикла; 
		КонецЕсли; 
		
	КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Обновление строк по товарам в таблице ТаблицаЗаказаОтбор
	// Новые строки не добавляет. Специфики не меняет.
	Процедура ОбновитьСтрокиТоваровТаблицыЗаказаОтбор()
		
		Для каждого СтрокаЗаказа Из ТаблицаЗаказа.Строки Цикл
			
			ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаЗаказа);
			
		КонецЦикла; 
		
	КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Процедура РазвернутьСпецифики()
		
		Если ФормаЗаказа <> Неопределено Тогда
			ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа;
			ПоказыватьЗаказанные = глПараметрыРМ.ЗаказСпецификиПоказыватьЗаказанное;
			
			Для каждого СтрокаТовара Из ТаблицаЗаказаОтбор.Строки Цикл
				Если (СтрокаТовара.Статус=СтатусДозаказ) ИЛИ (ПоказыватьЗаказанные) Тогда
					ТабПолеТЗ.Развернуть(СтрокаТовара, Истина);
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
		
	КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Функция ДобавитьСтрокуЗаказаОтбор(СтрокаЗаказа, РодительОтбор=Неопределено)
		
		Если РодительОтбор = Неопределено Тогда
			РодительОтбор = ?(СтрокаЗаказа.Родитель = Неопределено, ТаблицаЗаказаОтбор, ПолучитьСтрокуЗаказаОтбор(СтрокаЗаказа.Родитель));
		КонецЕсли; 
		
		СтрокуЗаказаОтбор = РодительОтбор.Строки.Добавить();
		
		// копируем значения колонок...
		ЗаполнитьЗначенияСвойств(СтрокуЗаказаОтбор, СтрокаЗаказа);
		
		// ... и ссылку !!!
		СтрокуЗаказаОтбор.СтрокаТаблицыЗаказа = СтрокаЗаказа;
		
		Возврат СтрокуЗаказаОтбор; 
		
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Процедура ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаЗаказа, ВыбСтрокаЗаказаОтбор=Неопределено)
		
		СтрокуЗаказаОтбор = ?(ВыбСтрокаЗаказаОтбор = Неопределено, ПолучитьСтрокуЗаказаОтбор(СтрокаЗаказа), ВыбСтрокаЗаказаОтбор);
		
		Если СтрокуЗаказаОтбор = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		
		// копируем значения колонок...
		ЗаполнитьЗначенияСвойств(СтрокуЗаказаОтбор, СтрокаЗаказа);
		
		// ... и ссылку !!!
		СтрокуЗаказаОтбор.СтрокаТаблицыЗаказа = СтрокаЗаказа;
		
	КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Функция ПолучитьСтрокуЗаказаОтбор(СтрокаЗаказа)
		
		Возврат ТаблицаЗаказаОтбор.Строки.Найти(СтрокаЗаказа, "СтрокаТаблицыЗаказа", Истина);
		
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Функция ПолучитьСуммуНачПоСтанцииОтбор()
		
		Если СтанцияОтбор = Неопределено Тогда
			СуммаНач = тзСуммыПоСтанциямНач.Итог("Сумма");
		Иначе
			СтрокаСтанция = тзСуммыПоСтанциямНач.Найти(СтанцияОтбор, "Станция");
			СуммаНач = ?(СтрокаСтанция = Неопределено, 0, СтрокаСтанция.Сумма);
		КонецЕсли;
		
		Возврат СуммаНач;
		
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Корректировка возможна только по строкам, добавленным на текущий станции.
	// Возвращает Истина, если строку заказа можно редактировать
	Функция ВыполнитьПроверкуПоСтанции(СтрокаЗаказа, ВыводПредупреждения=Истина)
		
		// в режиме пред.заказа проверок нет
		Если РежимПредЗаказ Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ФоновыйРежим Тогда
			ВыводПредупреждения = Ложь;
		КонецЕсли; 
		
		Результат = Истина;
		
		Если ксТрактир.ЭтоРМСтанция() Тогда
			
			Результат = СтрокаЗаказа.Станция = глРабочееМесто.Станция;
			Текст1="Нет доступа!";
			Текст2="Эта строка была добавлена на другой станции...";
			
			Если НЕ Результат И ВыводПредупреждения Тогда
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			КонецЕсли; 
			
		КонецЕсли; 
		
		Возврат Результат;
		
	КонецФункции 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Определяем максимальный номер подачи по указанной станции в сохраненном заказе
	// 
	Функция МаксимальныйНомерПодачиПоСтанции(ВыбСтанция)
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ЗаказТоварыДопИнф.Подача), 0) КАК МаксПодача
		|ИЗ
		|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
		|ГДЕ
		|	ЗаказТоварыДопИнф.Заказ = &Заказ
		|	И ЗаказТоварыДопИнф.Станция = &Станция");
		Запрос.УстановитьПараметр("Заказ",   Заказ.Ссылка);
		Запрос.УстановитьПараметр("Станция", ВыбСтанция);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.МаксПодача;
		Иначе
			Возврат 0;
		КонецЕсли; 
		
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Процедура ОпределитьПараметрыОкнаОчередности(ПараметрыОкна, МинШирина, МинВысота) Экспорт
		
		Если ФормаЗаказа = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВерхнийЭлемент = ФормаЗаказа.ЭлементыФормы.ПанельШапка;
		НижнийЭлемент  = ФормаЗаказа.ЭлементыФормы.ПанельСтатусЗаказа;
		
		ШиринаОкнаЗаказа = ФормаЗаказа.Ширина;
		
		ПараметрыОкна.Центр  = Истина;
		ПараметрыОкна.Верх   = ВерхнийЭлемент.Верх;
		ПараметрыОкна.Ширина = Макс(МинШирина, Цел(ШиринаОкнаЗаказа*0.7)); // 70% от ширины экрана
		ПараметрыОкна.Лево	 = Макс(1, Цел((ШиринаОкнаЗаказа - ПараметрыОкна.Ширина) / 2));
		ПараметрыОкна.Высота = Макс(МинВысота, (НижнийЭлемент.Верх + НижнийЭлемент.Высота) - ВерхнийЭлемент.Верх);
		
		ОтступПоВертикали = 10;
		Если ПараметрыОкна.Высота - 2*ОтступПоВертикали > МинВысота Тогда
			// сделаем ещё отступы сверху и снизу
			ПараметрыОкна.Высота = ПараметрыОкна.Высота - 2*ОтступПоВертикали;
			ПараметрыОкна.Верх   = ПараметрыОкна.Верх + ОтступПоВертикали;
		КонецЕсли; 
		
	КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Функция ВыполнитьПроверкуПовторногоПитания( ВыбКартаДоступа)
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказДопИнф.Заказ КАК Заказ,
		|	ЗаказДопИнф.Заказ.Дата КАК Дата,
		|	ЗаказДопИнф.Заказ.ИтоговаяСумма КАК Сумма,
		|	1 КАК КоличЗаказов
		|ИЗ
		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		|ГДЕ
		|	ЗаказДопИнф.ДатаОткрытия МЕЖДУ &НачПериода И &КонПериода
		|	И ЗаказДопИнф.ПротоколРасчетов <> &ПустойПротокол
		|	И ЗаказДопИнф.Заказ.КартаДоступа = &КартаДоступа
		|	И НЕ ЗаказДопИнф.ПротоколРасчетов.Неучетный
		|	И НЕ ЗаказДопИнф.ПротоколРасчетов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|ИТОГИ
		|	СУММА(Сумма),
		|	СУММА(КоличЗаказов)
		|ПО
		|	ОБЩИЕ";
		
		
		ТекДата = ТекущаяДата();
		
		Запрос.УстановитьПараметр("НачПериода", 		НачалоДня(ТекДата));
		Запрос.УстановитьПараметр("КонПериода", 		КонецДня(ТекДата));
		Запрос.УстановитьПараметр("КартаДоступа", 		ВыбКартаДоступа);
		Запрос.УстановитьПараметр("ПустойПротокол", 	Документы.ПротоколРасчетов.ПустаяСсылка());
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли; 
		
		ВыборкаИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаИтог.Следующий();
		
		ОбщаяСумма = Формат(ВыборкаИтог.Сумма, "ЧЦ=15; ЧДЦ=2; ЧН=");
		ОбнаруженоЗаказов = ?(ВыборкаИтог.КоличЗаказов = 1, "обнаружен", "обнаружено") +" "+ВыборкаИтог.КоличЗаказов+" "+ксТрактир.ФормаМЧ("заказ","заказа","заказов",ВыборкаИтог.КоличЗаказов);
		
		Выборка = ВыборкаИтог.Выбрать();
		Если Выборка.Следующий() Тогда
			ПоследнийЗаказ = " "+?(ВыборкаИтог.КоличЗаказов = 1, "Заказ был создан", "Последний заказ создан")+" в "+Формат(Выборка.Дата, "ДФ=Ч:мм")+".";
		Иначе
			ПоследнийЗаказ = "";
		КонецЕсли; 
		
		Текст1 = "Повторное питание?";
		Текст2 = "За "+Формат(ТекДата, "ДФ=dd.MM.yy")+" "+ОбнаруженоЗаказов+" на сумму "+ОбщаяСумма+Символы.НПП+"руб."+ПоследнийЗаказ;
		Результат = (ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "Да","","Esc=Нет")= "Да");
		
		Возврат Результат;
		
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------
	Функция ВыполнитьПроверкуПейджеров(ВыводПредупреждения=Истина)
		
		// в режиме пред.заказа проверок нет
		Если РежимПредЗаказ Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ФоновыйРежим Тогда
			ВыводПредупреждения = Ложь;
		КонецЕсли; 
		БлюдоВыдали = "Да";
		ТаблицаВыданных = ксТрактир.ВыданныеПейджерыПодробно(Заказ.Ссылка);
		
		ЕстьМарки = ксТрактир.ПоЗаказуЕстьМарки(Заказ.Ссылка);
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(Заказ.Ссылка);
		ПейджерыСданы = (ТаблицаВыданных.Количество() = 0);
		Если ЕстьМарки Тогда
			БлюдоВыдали = ИнтерфейсРМ.ВопросПредупреждение("Вопрос гостю","Есть невыданные блюда","Блюда приготовили и выдали?", "Да","Нет", "Esc=Отмена");	
			Если БлюдоВыдали = "Да" Тогда
				ПейджерыСданы = (ТаблицаВыданных.Количество() = 0);
				Для Каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
					ОтметитьВыдачу(СтрокаТовара,Ложь);
				КонецЦикла;
				
				ксТрактир.СнятьМаркиСУчета("Заказ", МассивЗаказов);
				
			ИначеЕсли БлюдоВыдали = "Нет" Тогда
				ПейджерыСданы = Истина;

				Для каждого Т Из ТаблицаВыданных Цикл
					
					Если НЕ ксТрактир.ПолностьюОбработан("Заказ", МассивЗаказов, Т.Станция).ВсеОбработаны Тогда
						//ПейджерыСданы = Ложь;
					КонецЕсли;
						
				КонецЦикла; 
			Иначе
				Возврат Новый Структура("ПейджерыСданы, БлюдоВыдали, ОтмененоПользователем",Истина,Истина,Истина);	
			КонецЕсли;			
		Иначе 
			Если ВыполнитьПроверкуНевыданныхТоваров(Ложь) = Ложь Тогда
				БлюдоВыдали = "Да";
				Если БлюдоВыдали="Да" Тогда
					
					Для Каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
						ОтметитьВыдачу(СтрокаТовара,Ложь);
					КонецЦикла;
					
					ксТрактир.СнятьМаркиСУчета("Заказ", МассивЗаказов);
		            ПейджерыСданы = (ТаблицаВыданных.Количество() = 0);
				ИНаче
					ПейджерыСданы = Истина;				
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли; 
			
		Если НЕ ПейджерыСданы И ВыводПредупреждения Тогда
						
			СтрПейджеры = "";
			Для каждого СтрокаВыданный Из ТаблицаВыданных Цикл

				
				СтрПейджеры = СтрПейджеры + ?(ПустаяСтрока(СтрПейджеры), "", Символы.ПС) + СокрЛП(СтрокаВыданный.Станция) + ": №" + СокрЛП(СтрокаВыданный.Пейджер);
				
			КонецЦикла; 
			
			Текст1="ВОЗВРАТ ПЕЙДЖЕРА";

			Текст2 = "Гость должен сдать пейджер" + ?(ТаблицаВыданных.Количество()>1,"ы №"," №") + "
			|" + СтрПейджеры + "
			|Продолжить?";
			
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"ДА","","НЕТ",,,,,Заказ.Ссылка) = "ДА" Тогда
				МассивСЗаказом = Новый Массив;
				МассивСЗаказом.Добавить(Заказ.Ссылка);
				ксТрактир.ВозвратПейджеровПоЗаказам(МассивСЗаказом,,Ложь);
				ПейджерыСданы = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Новый Структура("ПейджерыСданы, БлюдоВыдали, ОтмененоПользователем", ПейджерыСданы, БлюдоВыдали = "Да", БлюдоВыдали = "Отмена");
		
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Функция ВыполнитьПроверкуНевыданныхТоваров(ВыводПредупреждения=Истина)
		
		// в режиме пред.заказа проверок нет
		Если РежимПредЗаказ Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если НЕ (ИспользоватьЗаказТоварыДопИнф И ПодтверждениеВыдачи) Тогда
			Возврат Истина;
		КонецЕсли;	
		
		Если ФоновыйРежим Тогда
			ВыводПредупреждения = Ложь;
		КонецЕсли; 
		
		Результат = Истина;
		
		// Получаем из регистра актуальные статусы 
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Заказ",Заказ.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказТоварыДопИнф.ИдСтроки,
		|	ЗаказТоварыДопИнф.Статус,
		|	ЗаказТоварыДопИнф.Количество
		|ИЗ
		|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
		|ГДЕ
		|	ЗаказТоварыДопИнф.Заказ = &Заказ";
		
		тзДопИнф = Запрос.Выполнить().Выгрузить();
		
		Для каждого СтрокаТовара Из ТаблицаЗаказа.Строки Цикл
			
			СтрокаДопИнф = тзДопИнф.Найти(СтрокаТовара.ИдСтроки, "ИдСтроки");
			
			Если СтрокаТовара.Количество = 0 Тогда
				// значит, это что-то удаленное
				Продолжить;
			КонецЕсли;

			
			Если СтрокаДопИнф = Неопределено Тогда
				// Это новая строка ещё даже не записана в базу
				Результат = Ложь;
				Прервать;
			КонецЕсли;	
			
			//Если СтрокаДопИнф.Количество = 0 Тогда
			//	// значит, это что-то удаленное
			//	Продолжить;
			//КонецЕсли;
			
						
			ТекСтатус = СтрокаДопИнф.Статус;
			
			Если (ТекСтатус = СтатусГотово ИЛИ (ПодтверждениеГотовностиПриВыдачи И ТекСтатус = СтатусЗаказано)) Тогда
				// Этот товар можно выдать
				Результат = Ложь;
				Прервать;
			КонецЕсли; 
		КонецЦикла;	
		
		Если НЕ Результат И ВыводПредупреждения Тогда
			Текст1="Есть невыданные блюда!";
			Текст2="Перед оплатой необходимо пометить блюда
			|как выданные.";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли; 	
		
		Возврат Результат;
		
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Регистрация новых марок в регистре "Марки"
	// Возвращает флаг (Булево) наличия готовых к выдаче марок, в только что зарегистрированных марках.
	// 
	Функция ВыполнитьРегистрациюМарок() Экспорт 
		
		Если РежимПредЗаказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ (ИспользоватьЗаказТоварыДопИнф) Тогда
			Возврат Ложь;
		КонецЕсли;	
		
		Если НЕ ксТрактир.ЭтоРМСтанция() Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Если ЗаказДопИнф.Статус=Перечисления.СтатусыЗаказа.Закрыт Тогда
			Возврат Ложь; // заказ уже закрыт
		КонецЕсли; 
		
		ЕстьМаркиКВыдаче = ксТрактир.РегистрацияНовыхМарок(Заказ.Ссылка, глРабочееМесто.Станция);
		
		Возврат ЕстьМаркиКВыдаче;
		
	КонецФункции // КС_ВДВ > ------------------------------------------------------------ 
	
	
	////////////////////////////////////////////////////////////////////////////////
	// ТЕЛО МОДУЛЯ
	
	ИнициализацияРеквизитов();
	
#КонецЕсли
