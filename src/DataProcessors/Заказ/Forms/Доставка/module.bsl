
Перем НомерЗаказа, ПосадочноеМесто;	// для оптимизации обновления отображения
Перем РежимЗакрытых; // для журнала  
Перем ТаблицаКурьеров; // для работы с курьерами  
Перем ПеремещениеПоЖурналу; // для перемещения по журналу вверх - вниз.
Перем ЖурналПоискПо; // Отбор по журналу
Перем ПанельСтраницаЖернала; // ПанельЖурналИстория активна страница журнала
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЖИДАНИЯ

// чтобы часики тикали
//
Процедура ОбновитьДатуВремя()
	
	ЭлементыФормы.тТекущаяДатаВремя.Заголовок = Формат(ТекущаяДата(),"ДЛФ=ДВ");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)	
		
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ДоставкаДоступОткрытыеЗаказы, Истина, , ?(Заказ = Неопределено, Неопределено, Заказ.Автор)) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТипКолво = ПолучитьОписаниеТиповЧисла(10,0,Истина);
	ТипСумма = ПолучитьОписаниеТиповЧисла(12,2);
	
	ТаблицаКурьеров = Новый ТаблицаЗначений;
	ТаблицаКурьеров.Колонки.Добавить("Курьер");
	ТаблицаКурьеров.Колонки.Добавить("КолвоЗаказов"	,Новый ОписаниеТипов("Число"));
	 
	ИсторияКлиента.Колонки.Добавить("ЗаказТовар"	,,"Заказ / товар"	,30);
	ИсторияКлиента.Колонки.Добавить("Количество"	,ТипКолво, "Кол."	, 5 );
	ИсторияКлиента.Колонки.Добавить("Сумма"			,ТипСумма, "Сумма"	, 10 );
   	ЭлементыФормы.ИсторияКлиента.СоздатьКолонки();
	
	Если Заказ = Неопределено ИЛИ Заказ.Ссылка.Пустая() Тогда
		ОбновитьЗаказыКурьеры();
	Иначе
		ОбновитьЗаказыКурьеры(Заказ.Ссылка, Заказ.Курьер);
	КонецЕсли;
		
	Если ТаблицаКурьеров.Количество()=0 Тогда
		Текст1 = "Внимание!";
		Текст2 = "В состав смены не внесен ни один курьер!";
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
	КонецЕсли; 
	
	ДействияПередОткрытиемФормы(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ДействияПередЗакрытиемФормы(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// периодически обновляемые надписи
	ОбновитьДатуВремя();
	ПодключитьОбработчикОжидания("ОбновитьДатуВремя", 1);
	
	//----------------------------------------------------------
	ТабПолеТС = ЭлементыФормы.ТаблицаСкидок;
	ТабПолеТС.СоздатьКолонки();
	
	ТабПолеТС.Колонки.Текст.ШрифтТекста = ШрифтыСтиля.Шрифт8;
	ТабПолеТС.Колонки.Текст.Ширина		= 15;
	ТабПолеТС.Колонки.Сумма.ШрифтТекста = ШрифтыСтиля.Шрифт8ж;
	ТабПолеТС.Колонки.Сумма.Ширина		= 10;
	
	Для каждого КолонкаСкидок Из ТабПолеТС.Колонки Цикл
		Если КолонкаСкидок.Имя<>"Текст" И КолонкаСкидок.Имя<>"Сумма" Тогда
			КолонкаСкидок.Видимость = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	//----------------------------------------------------------
	ЭлементыФормы.ПанельПоискНаКарте.Свертка = РежимСверткиЭлементаУправления.Право;
	
	ПанельСтраницаЖернала = Истина;
	
	ТекущийЭлемент = ЭлементыФормы.КлиентКод;
	
	РежимЗакрытых			= Ложь;
	ПеремещениеПоЖурналу	= Ложь;
	ЖурналПоискПо			= Неопределено;
	
	ПолучитьРекомендации(Ложь);
	
	// вызов должен быть в конце обработчика
	ИнтерфейсРМ.ПриОткрытииОкна(ЭтаФорма);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ИнтерфейсРМ.ПриЗакрытииОкна();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	глОтсечкаПростоя();
	
	Если Заказ = Неопределено ИЛИ Заказ.Ссылка.Пустая() Тогда
		ЭлементыФормы.тШапкаКОплате	.Заголовок = "";
		
		ЭлементыФормы.тНомерЗаказа		.Заголовок = "Выберите заказ";
		ЭлементыФормы.КнопкаКлиент		.Заголовок = "";
		ЭлементыФормы.КнопкаАдрес		.Заголовок = "";
		ЭлементыФормы.КнопкаТелефон		.Заголовок = "";
		ЭлементыФормы.тСуммаВсего		.Заголовок = "";
		ЭлементыФормы.тСуммаИтого		.Заголовок = "";
		ЭлементыФормы.тСтрИнфо			.Заголовок = "";
		ЭлементыФормы.КнопкаКолвоГостей	.Заголовок = "чел.";
		ЭлементыФормы.тСтрИнфо.Гиперссылка	= Ложь;
		ЭлементыФормы.тСтрИнфо.БегущаяСтрока= РежимБегущейСтроки.НеИспользовать;		
		
		ТаблицаЗаказа.Строки.Очистить();
		
		ИсторияЗаказа.Отбор.Заказ.Установить(Документы.Заказ.ПустаяСсылка());
		
	Иначе
		
		ЭлементыФормы.тШапкаКОплате			.Заголовок	= "К оплате: " + ФорматСумм(Заказ.ИтоговаяСумма);
		ЭлементыФормы.тНомерЗаказа			.Заголовок	= "Заказ № " + Заказ.Номер + ?(ЗначениеЗаполнено(Заказ.ВнешнийНомер), "/"+Заказ.ВнешнийНомер, "") + ?(Модифицирован, "*", "");
		ЭлементыФормы.КнопкаКлиент			.Заголовок	= ?(ЗначениеЗаполнено(Заказ.Клиент), Заказ.Клиент.Наименование+?(ЗначениеЗаполнено(Заказ.Клиент.ДопИнформация)," ("+Заказ.Клиент.ДопИнформация+")",""), "< Клиент не указан >");
		ЭлементыФормы.КнопкаКлиент			.Шрифт		= Новый Шрифт(ЭлементыФормы.КнопкаКлиент.Шрифт,,,,,,Заказ.Клиент.ЧерныйСписок);
		ЭлементыФормы.КнопкаАдрес			.Заголовок	= ?(ЗначениеЗаполнено(Заказ.Адрес), Заказ.Адрес.Представление+?(ЗначениеЗаполнено(Заказ.Адрес.Комментарий)," ("+Заказ.Адрес.Комментарий+")",""), "< Адрес не указан >");
		ЭлементыФормы.КнопкаТелефон			.Заголовок	= ?(ЗначениеЗаполнено(Заказ.Телефон), Заказ.Телефон.Представление+?(ЗначениеЗаполнено(Заказ.Телефон.Комментарий)," ("+Заказ.Телефон.Комментарий+")",""), "< Телефон не указан >");
		ЭлементыФормы.КнопкаТелефон			.Видимость	= ЗначениеЗаполнено(Заказ.Клиент);
		ЭлементыФормы.КнопкаТелефонОткрыть	.Видимость	= ЗначениеЗаполнено(Заказ.Клиент);
		ЭлементыФормы.КнопкаВводТелефона	.Видимость	= НЕ ЗначениеЗаполнено(Заказ.Клиент);
		ЭлементыФормы.КнопкаКолвоГостей		.Заголовок	= Строка(Заказ.КоличествоПосетителей);
		
		СуммаБезСкидок = ТаблицаЗаказа.Строки.Итог("Сумма");
		ИтоговаяСумма  = СуммаБезСкидок + ТаблицаСкидок.Итог("Сумма");
		// ИтоговаяСумма должна совпадать с Заказ.ИтоговаяСумма
		// здесь так выводится для визуального контроля правильности распределения скидок
		ЭлементыФормы.тСуммаВсего		.Заголовок = ФорматСумм(СуммаБезСкидок);
		ЭлементыФормы.тСуммаИтого		.Заголовок = ФорматСумм(ИтоговаяСумма);
		
		Если ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Открыт И НЕ СменаОткрыта Тогда
			ЭлементыФормы.тСтрИнфо.Гиперссылка		= Ложь;
			ЭлементыФормы.тСтрИнфо.БегущаяСтрока	= РежимБегущейСтроки.НеИспользовать;
			ЭлементыФормы.тСтрИнфо.Заголовок = "ОШИБКА СМЕНЫ";
			ЦветСтрИнфо = ЦветаСтиля.ЦветТекста1;
	
		ИначеЕсли Заблокирован Тогда
			ЭлементыФормы.тСтрИнфо.Гиперссылка		= Ложь;
			ЭлементыФормы.тСтрИнфо.БегущаяСтрока	= РежимБегущейСтроки.НеИспользовать;
			ЭлементыФормы.тСтрИнфо.Заголовок = "РЕДАКТИРУЕТСЯ";
			ЦветСтрИнфо = ЦветаСтиля.ЦветТекста1;
			
		Иначе
			
			ЕстьРекомендации	= СписокРекомендаций <> Неопределено;
			ЭлементыФормы.тСтрИнфо.Гиперссылка		= ЕстьРекомендации;
			ЭлементыФормы.тСтрИнфо.БегущаяСтрока	= ?(ЕстьРекомендации, РежимБегущейСтроки.Нормально, РежимБегущейСтроки.НеИспользовать);				
			ЭлементыФормы.тСтрИнфо.Заголовок		= ?(ЕстьРекомендации, "Есть рекомендации!", Строка(ДоставкаДопИнф.Статус) + Символы.ПС + 
																								Формат(ДоставкаДопИнф.Период,"ДФ='дд.ММ ЧЧ:мм'") + Символы.ПС + 
																								ДоставкаДопИнф.Автор);
			ЦветСтрИнфо = ЦветаСтиля.ЦветТекста4;
			
		КонецЕсли;
		
		ЭлементыФормы.тСтрИнфо.ЦветТекста = ЦветСтрИнфо;
		
		ИсторияЗаказа.Отбор.Заказ.Установить(Заказ.Ссылка);
		
	КонецЕсли;
	
	ЭлементыФормы.тПользователь.Заголовок = глПользователь.Наименование;
	
	Флаг = ДоступностьКонтактнойИнфы();
	ЭлементыФормы.КнопкаАдрес.Доступность			= Флаг;
	ЭлементыФормы.КнопкаАдресОткрыть.Доступность	= Флаг;
	ЭлементыФормы.КнопкаТелефон.Доступность			= Флаг;
	ЭлементыФормы.КнопкаТелефонОткрыть.Доступность	= Флаг;
	ЭлементыФормы.Комментарий.ТолькоПросмотр		= НЕ Флаг;
	ЭлементыФормы.КнопкаЭкраннаяКлава.Доступность	= Флаг;
	ЭлементыФормы.КнопкаПоискНаКарте.Доступность	= Флаг;
	
	
	//---------------------------------------------------
	ПолучитьПоследнийСтатусДоставки(Заказ.Ссылка);
	
	Если НЕ ПеремещениеПоЖурналу Тогда
		ОбновитьЗаказыКурьеры();
	Иначе	
		ПеремещениеПоЖурналу = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ОбработкаПодбораТовара( ЗначениеВыбора );
	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	//ТекущаяФорма = глСтекОкон[0];
	ТекущаяФорма = глСтекОкон[0].Форма;
	Если НЕ( ТекущаяФорма=ЭтаФорма ИЛИ ТекущаяФорма=ФормаПодбораТоваров ) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСтатусыПозицийЗаказа" Тогда
		
		Если ТаблицаЗаказа.Строки.Найти(Параметр, "КодПодтверждения", Истина)  = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПерезаполнитьСтатусыПозиций();
	КонецЕсли; 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ТаблицаЗаказаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СтрокаТовара = ДанныеСтроки;
	
	Если ДанныеСтроки.Уровень()=0 Тогда
		ОформлениеСтроки.Ячейки.Ном.Текст = ТаблицаЗаказа.Строки.Индекс(ДанныеСтроки)+1;
		
		ШрифтСтроки = глПараметрыРМ.ЗаказШрифтОсновной;
		Колво = ДанныеСтроки.Количество;
	Иначе
		ОформлениеСтроки.Ячейки.Товар.Текст = СтрДополнитьСправа("",(ДанныеСтроки.Уровень()-1)*3) + " - " + ДанныеСтроки.Товар.Наименование;
		ШрифтСтроки = глПараметрыРМ.ЗаказШрифтСпецифик;
		Пока ЗначениеЗаполнено(СтрокаТовара.Родитель) Цикл
			СтрокаТовара = СтрокаТовара.Родитель;
		КонецЦикла; 
		Колво = СтрокаТовара.Количество;
		//Колво = ДанныеСтроки.Родитель.Количество;
	КонецЕсли; 
	
	Если ШрифтСтроки.Вид = ВидШрифта.АвтоШрифт Тогда
		ШрифтСтроки = ОформлениеСтроки.Шрифт;
	КонецЕсли;                                                               
	
	Если Колво=0 И 
		НЕ( ДанныеСтроки.Статус = Перечисления.СтатусыПозицийЗаказа.Дозаказ ИЛИ
		ДанныеСтроки.Статус = Перечисления.СтатусыПозицийЗаказа.ТарифВкл ) Тогда
		ШрифтСтроки = Новый Шрифт(ШрифтСтроки,,,,,,Истина);	// зачеркнутый
	КонецЕсли; 
	
	ОформлениеСтроки.Шрифт = ШрифтСтроки;
	
	ЯчейкаСтатус = ОформлениеСтроки.Ячейки.Статус;
	ЯчейкаСтатус.ОтображатьТекст	= Ложь;
	Если ДанныеСтроки.Статус = Перечисления.СтатусыПозицийЗаказа.Дозаказ Тогда
		ЯчейкаСтатус.ОтображатьКартинку	= Ложь;
	Иначе
		ЯчейкаСтатус.ОтображатьКартинку	= Истина;
		
		
		Если ДанныеСтроки.СтатусДопИнф = Перечисления.СтатусыПозицийЗаказа.Готово Тогда 
			ЯчейкаСтатус.ИндексКартинки = 4;
		ИначеЕсли ДанныеСтроки.СтатусДопИнф = Перечисления.СтатусыПозицийЗаказа.Выдано Тогда
			ЯчейкаСтатус.ИндексКартинки = 5;
		ИначеЕсли ДанныеСтроки.Статус = Перечисления.СтатусыПозицийЗаказа.Заказано Тогда
			ЯчейкаСтатус.ИндексКартинки = 0;
		ИначеЕсли ДанныеСтроки.Статус = Перечисления.СтатусыПозицийЗаказа.Удалено Тогда
			ЯчейкаСтатус.ИндексКартинки = 1;
		ИначеЕсли ДанныеСтроки.Статус = Перечисления.СтатусыПозицийЗаказа.ТарифВкл Тогда
			ЯчейкаСтатус.ИндексКартинки = 2;
		ИначеЕсли ДанныеСтроки.Статус = Перечисления.СтатусыПозицийЗаказа.Отложено Тогда
			ЯчейкаСтатус.ИндексКартинки = 3;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТаблицаЗаказаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ИзменитьКоличество();
	
КонецПроцедуры

Процедура ТаблицаСкидокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Сумма < 0 Тогда
		ОформлениеСтроки.Ячейки.Сумма.ЦветТекста = Новый Цвет(128,0,0);
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаМенюНажатие(Элемент)
	
	ПодборТоваров();
	
КонецПроцедуры

Процедура КнопкаКоличествоНажатие(Элемент)
	
	ИзменитьКоличество();
	
КонецПроцедуры

Процедура КнопкаУдалитьНажатие(Элемент)
	
	УдалитьСтроку();
	
КонецПроцедуры

Процедура КнопкаСпецификаНажатие(Элемент)
	
	ВыборСпецифики();
	
КонецПроцедуры

Процедура КнопкаОбщаяСпецификаНажатие(Элемент)
	
	ВыборСпецифики(Истина);
	
КонецПроцедуры

Процедура КнопкаСкидкаНажатие(Элемент)
	
	ВводРучнойСкидки();
	
КонецПроцедуры

Процедура КнопкаУдалитьСкидкуНажатие(Элемент)
	
	ОтменаРучнойСкидки();
	
КонецПроцедуры

//Процедура КнопкаУпаковкаНажатие(Элемент)
//	
//	УпаковкаТаблицыЗаказа(Истина);
//	
//	Если ТаблицаЗаказа.Строки.Количество() <> 0 Тогда
//		ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока = ТаблицаЗаказа.Строки[ТаблицаЗаказа.Строки.Количество()-1];
//	КонецЕсли; 
//	
//КонецПроцедуры

// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ, ИЗМЕНЕНО ИЛИ ДОБАВЛЕНО ДЛЯ ДОСТАВКИ


Процедура ЖурналЗаказовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ТекЗаказ = ДанныеСтроки.Заказ;
	ОформлениеСтроки.Ячейки.Заказ.Текст = ТекЗаказ.Номер + ?(ЗначениеЗаполнено(ТекЗаказ.ВнешнийНомер), "/"+ТекЗаказ.ВнешнийНомер, "");
	
	СтрокаОформления = глПараметрыРМ.ДоставкаСписокЗаказовОформление.Найти(ДанныеСтроки.Статус, "Статус");
	Если ЗначениеЗаполнено(СтрокаОформления) Тогда
		ОформлениеСтроки.ЦветТекста = СтрокаОформления.Цвет;
		Если ТекЗаказ.Автор = глПользователь Тогда
			ОформлениеСтроки.Шрифт		= Новый Шрифт(СтрокаОформления.Шрифт,,,Истина);
		Иначе			
			ОформлениеСтроки.Шрифт		= СтрокаОформления.Шрифт;
		КонецЕсли;
	ИначеЕсли ТекЗаказ.Автор = глПользователь Тогда
		ОформлениеСтроки.Шрифт			= Новый Шрифт(,,Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЖурналЗаказовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ДоставкаЖурналЗаказовВыбор(ВыбраннаяСтрока.Заказ);
	КлиентКод = "";
	
КонецПроцедуры

// Кнопки области клиента -----------------------

Процедура КнопкаНовыйЗаказНажатие(Элемент)
	
	ОткрытьНовыйЗаказ();
	
	КлиентКод = "";
	ТекущийЭлемент = ЭлементыФормы.КлиентКод;
	
	ДоступностьСтраницыЖурнала();	
	
КонецПроцедуры

Процедура КнопкаВводТелефонаНажатие(Элемент)
	
	Тел = ИнтерфейсРМ.ВводЧисла("Телефон", "Строка", 10);
	
	Если Тел = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	КлиентКод = Тел;
	КлиентКодПриИзменении();
	
КонецПроцедуры

Процедура КнопкаТелефонНажатие(Элемент)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КонтактнаяИнформация.Ссылка,
	                      |	КонтактнаяИнформация.Представление
	                      |ИЗ
	                      |	Справочник.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |ГДЕ
	                      |	КонтактнаяИнформация.Объект = &Клиент
	                      |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
						  |");
						  
	Запрос.УстановитьПараметр("Клиент", Заказ.Клиент);
	
	Меню = Новый СписокЗначений;
	Меню.Добавить("Новый", "Ввести новый телефон...");
	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Меню.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла; 
	
	Если Меню.Количество()=1 Тогда
		ВыбЗнач = Меню[0];
	Иначе
		ВыбЗнач = ВыбратьИзМеню(Меню);
	КонецЕсли; 
	
	Если ВыбЗнач = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбЗнач.Значение = "Новый" Тогда
		ВвестиНовыйАдресТелефон(Перечисления.ТипыКонтактнойИнформации.Телефон);
	Иначе
		Заказ.Телефон = ВыбЗнач.Значение;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КнопкаТелефонОткрытьНажатие(Элемент)
	
	Если Заказ.Телефон.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	ОткрытьФормуАдресаТелефона(Заказ.Телефон.ПолучитьОбъект());
	
КонецПроцедуры

Процедура КнопкаКлиентНажатие(Элемент)
	
	Если НЕ АвтоНовыйПоКлиенту() Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ДоставкаВыборКлиента, Истина, ГлПользователь, Заказ.Автор ,ДоставкаДопИнф.Статус) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	ФормаВыбора = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборКлиента").ПолучитьФорму("Список");
	ФормаВыбора.ЭлементыФормы.КнопкаУдалить.Видимость = Истина;
	
	ФормаВыбора.ОткрытьМодально();
	
	Если ФормаВыбора.ВыборСделан Тогда
		КлиентКод = "";
		УстановитьКлиента(ФормаВыбора.Клиент);
	КонецЕсли; 
	
	ДоступностьСтраницыЖурнала();
	
КонецПроцедуры

Процедура КлиентКодПриИзменении(Элемент=Неопределено)
	
	Если НЕ ЗначениеЗаполнено(КлиентКод) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ АвтоНовыйПоКлиенту() Тогда
		Возврат;
	КонецЕсли; 
	
	Телефон = Неопределено;
	Адрес	= Неопределено;
	
	Клиент = НайтиКлиента(КлиентКод, Телефон);
	Если Клиент = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Клиент.Пустая() Тогда
		
		ВводКлиента = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводКлиента");
		ВводКлиента.ВводНового = Истина;
		ВводКлиента.КлиентКод = КлиентКод;
		Результат = ВводКлиента.ПолучитьФорму("Доставка").ОткрытьМодально();
		Если Результат <> "ОК" Тогда
			Возврат;
		КонецЕсли; 
		
		Клиент	= ВводКлиента.Клиент.Ссылка;
		Телефон	= ВводКлиента.Телефон;
		Адрес	= ВводКлиента.Адрес;
		
	КонецЕсли; 
	
	УстановитьКлиента(Клиент, Телефон);
	
КонецПроцедуры

Процедура КнопкаАдресНажатие(Элемент)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КонтактнаяИнформация.Ссылка,
	                      |	КонтактнаяИнформация.Представление
	                      |ИЗ
	                      |	Справочник.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |ГДЕ
	                      |	КонтактнаяИнформация.Объект = &Клиент
	                      |	И КонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
						  |");
						  
	Запрос.УстановитьПараметр("Клиент", Заказ.Клиент);
	
	Меню = Новый СписокЗначений;
	Меню.Добавить("Новый", "Ввести новый адрес...");
	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Меню.Добавить(Выборка.Ссылка, Выборка.Представление);
	КонецЦикла; 
	
	Если Меню.Количество()=1 Тогда
		ВыбЗнач = Меню[0];
	Иначе
		ВыбЗнач = ВыбратьИзМеню(Меню);
	КонецЕсли; 
	
	Если ВыбЗнач = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбЗнач.Значение = "Новый" Тогда
		ВвестиНовыйАдресТелефон(Перечисления.ТипыКонтактнойИнформации.Адрес);
	Иначе
		Заказ.Адрес = ВыбЗнач.Значение;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КнопкаАдресОткрытьНажатие(Элемент)
	
	Если Заказ.Адрес.Пустая() Тогда
		Возврат;
	КонецЕсли; 
	
	ОткрытьФормуАдресаТелефона(Заказ.Адрес.ПолучитьОбъект());
	
КонецПроцедуры

Процедура КомментарийПриИзменении(Элемент)
	
	Модифицирован = Истина;
	
КонецПроцедуры

Процедура КнопкаЭкраннаяКлаваНажатие(Элемент)
	
	ИнтерфейсРМ.ЭкраннаяКлавиатура();
	
	ТекущийЭлемент = ЭлементыФормы.Комментарий;
	
КонецПроцедуры

Процедура КнопкаКолвоГостейНажатие(Элемент)
	
	ИзменитьКолвоГостей();
	
КонецПроцедуры

// Копка истрия заказов по клиенту нажатие
//
Процедура ИсторияНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Заказ.Клиент) Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПанельСтраницаЖернала Тогда
		ПоказатьИсториюКлиента();
	Иначе
		ДоступностьСтраницыЖурнала();
	КонецЕсли;

КонецПроцедуры

// Кнопки области заказа ------------------------

Процедура КнопкаПечатьМарокНажатие(Элемент)
	
	ДоставкаПечатьМарок(Истина);
	
КонецПроцедуры

Процедура КнопкаПречекНажатие(Элемент)
	
	Если Заказ.ЕстьПресчет Тогда
		ОтменаПречека();
	Иначе
		ПечатьСчета();
		
		ПроставитьАвтоСтатус("ДоставкаАвтоСтатусыСчет", Заказ.Ссылка);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура КнопкаОплатаНажатие(Элемент)
	
	ДоставкаОплата();
	
КонецПроцедуры

Процедура КнопкаЗаписатьНажатие(Элемент)
	
	Если НЕ ДоставкаПроверкаЗаполнения() Тогда
		Возврат;
	КонецЕсли; 
	
	Если Заказ.Клиент.ЧерныйСписок Тогда
		Текст1 = "Черный список!";
		Текст2 = "Этот клиент в черном списке!";
		Если ИнтерфейсРМ.ВопросПредупреждение("Подтверждение",Текст1,Текст2,"ОК","","Esc=Отмена") = "Отмена" Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ЗаписатьЗаказ();
	
КонецПроцедуры

Процедура КнопкаНазначитьКурьераНажатие(Элемент)
	
	Если Заказ = Неопределено ИЛИ Заказ.Ссылка.Пустая() Тогда
		Возврат
	КонецЕсли; 
	
	Если НЕ ВыполнитьПроверку("НеЗаблокирован") Тогда
		Возврат;
	КонецЕсли;		
	
	НазначитьКурьера(Заказ, ДоставкаДопИнф.Статус);
	
КонецПроцедуры

// Присвоить заказу статус доставлено
//
Процедура КнопкаЗаказДоставленНажатие(Элемент)
	
	Если Заказ = Неопределено ИЛИ Заказ.Ссылка.Пустая() Тогда
		Возврат
	КонецЕсли;	
	
	ТекЗаказ	= Заказ.Ссылка;
	НовыйСтатус = Перечисления.СтатусыДоставки.Доставлен;
	ТекСтатус	= ДоставкаДопИнф.Статус;
	
	ПрисвоитьНовыйСтатусДоставки(ТекЗаказ, НовыйСтатус, ТекСтатус);
	
КонецПроцедуры

// Изменить статус заказа
//
Процедура КнопкаСтатусЗаказаНажатие(Элемент)

	Если Заказ = Неопределено ИЛИ Заказ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;	
	
	ТекЗаказ		= Заказ.Ссылка;
	ТекСтатус		= ДоставкаДопИнф.Статус;
	СтатусОтказа	= Истина;
	
	ВыборСтатусЗаказа(ТекЗаказ, ТекСтатус, СтатусОтказа);	
	
КонецПроцедуры

Процедура КнопкаСтрелкаВверхНажатие(Элемент)
	
	ЭлементыФормы.ТаблицаЗаказа.ТекущаяКолонка = ЭлементыФормы.ТаблицаЗаказа.Колонки.Наименование;
	ТекущийЭлемент = ЭлементыФормы.ТаблицаЗаказа;
	WshShell.SendKeys("{UP}");
	
КонецПроцедуры

Процедура КнопкаСтрелкаВнизНажатие(Элемент)
	
	ЭлементыФормы.ТаблицаЗаказа.ТекущаяКолонка = ЭлементыФормы.ТаблицаЗаказа.Колонки.Наименование;
	ТекущийЭлемент = ЭлементыФормы.ТаблицаЗаказа;
	WshShell.SendKeys("{DOWN}");
	
КонецПроцедуры

Процедура КнопкаВводПоКодуНажатие(Элемент)
	
	ВводПоКоду();
	
КонецПроцедуры

// Кнопки области журнала -----------------------

// Перемещение вверх по журналу
//
Процедура КнопкаЖурналСтрелкаВверхНажатие(Элемент)
	
	Если ПанельСтраницаЖернала Тогда
		
		ПеремещениеПоЖурналу = Истина;
		ТекущийЭлемент = ЭлементыФормы.ЖурналЗаказов;
		
	Иначе
		
		ТекущийЭлемент = ЭлементыФормы.ИсторияКлиента;
		
	КонецЕсли;
	
	WshShell.SendKeys("{UP}");
	
КонецПроцедуры

// Выбор заказа из журнала
//
Процедура КнопкаЖурналВыборЗаказаНажатие(Элемент)
	
	Если ПанельСтраницаЖернала Тогда
		
		Если ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока.Заказ = Заказ.Ссылка Тогда
			Текст1 = "Нет доступа!";
			Текст2 = "Заказ уже выбран!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли;	
		
		ЖурналЗаказовВыбор("", ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока, "Адрес", Истина);
		
	Иначе
		
		Если ЭлементыФормы.ИсторияКлиента.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		ИсторияКлиентаВыбор(Элемент, ЭлементыФормы.ИсторияКлиента.ТекущаяСтрока, Неопределено, Ложь);
		
	КонецЕсли;
			
КонецПроцедуры

// Перемещение вниз по журналу
//
Процедура КнопкаЖурналСтрелкаВнизНажатие(Элемент)
	
	Если ПанельСтраницаЖернала Тогда
		
		ПеремещениеПоЖурналу = Истина;
		ТекущийЭлемент = ЭлементыФормы.ЖурналЗаказов;
		
	Иначе
		
		ТекущийЭлемент = ЭлементыФормы.ИсторияКлиента;
		
	КонецЕсли;

	WshShell.SendKeys("{DOWN}");
	
КонецПроцедуры

// Указать курьера к заказу из журнала
//
Процедура КнопкаЖурналКурьерЗаказаНажатие(Элемент)
	
	Если ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ТекЗаказ	= ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока.Заказ;
	
	Если ТекЗаказ = Неопределено ИЛИ ТекЗаказ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;	

	Если ТекЗаказ = Заказ.Ссылка Тогда
		КнопкаНазначитьКурьераНажатие("ИзЖурнала");
		Возврат;
	КонецЕсли;	
	
	КемЗаблокирован = "";
	
	Если НЕ ИнтерфейсРМ.ЗаблокироватьОбъект(ТекЗаказ.ПолучитьОбъект(), КемЗаблокирован) Тогда
		Текст1="Заказ редактируется!";
		Текст2="Этот заказ редактируется на 
		|"+КемЗаблокирован+"
		|Назначить Курьера не удалось...";
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
		Возврат;
	КонецЕсли;
	
	ТекСтатус	= Неопределено;

	ПолучитьПоследнийСтатусДоставки(ТекЗаказ, Ложь, ТекСтатус); 
	
	Если ТекСтатус = Неопределено Тогда
		Возврат;
	КонецЕсли;	

	НазначитьКурьера(ТекЗаказ.ПолучитьОбъект(), ТекСтатус);
	
КонецПроцедуры

// Отметить доставку по заказу из журнала
//
Процедура КнопкаЖурналЗаказДоставленНажатие(Элемент)
	
	Если ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекЗаказ	= ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока.Заказ;
	
	Если ТекЗаказ = Неопределено ИЛИ ТекЗаказ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;	

	ТекСтатус	= Неопределено;

	ПолучитьПоследнийСтатусДоставки(ТекЗаказ, Ложь, ТекСтатус); 
	
	Если ТекСтатус = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	НовыйСтатус	= Перечисления.СтатусыДоставки.Доставлен;
	
	ПрисвоитьНовыйСтатусДоставки(ТекЗаказ, НовыйСтатус, ТекСтатус);
	
КонецПроцедуры

// Изменить статус заказу из журнала
//
Процедура КнопкаЖурналСтатусЗаказаНажатие(Элемент)
	
	Если ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;		
	
	ТекЗаказ	= ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока.Заказ.Ссылка;
	
	Если ТекЗаказ = Неопределено ИЛИ ТекЗаказ.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;	

	ТекСтатус	= Неопределено;

	ПолучитьПоследнийСтатусДоставки(ТекЗаказ, Ложь, ТекСтатус); 
	
	Если ТекСтатус = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ВыборСтатусЗаказа(ТекЗаказ, ТекСтатус);	
	
	// Вставить содержимое обработчика.
КонецПроцедуры

// Выполнить поиск по журналу
//
Процедура КнопкаЖурналПоискНажатие(Элемент)

	ПоисПоЖурналу = ПолучитьФорму("Поиск");
	
	ЖурналПоискПо = ПоисПоЖурналу.ОткрытьМодально();
	
КонецПроцедуры

// Отключить отбор по журналу
//
Процедура КнопкаЖурналПоискОтключитьНажатие(Элемент)
	
	ЖурналПоискПо = Неопределено;
	
КонецПроцедуры

// переключатель режима журнала отображения заказов открытые / закрытые
//
Процедура КнопкаЖурналЗаказовРежимНажатие(Элемент)
	
	Если НЕ ПанельСтраницаЖернала Тогда
		ДоступностьСтраницыЖурнала();
		Возврат;
	КонецЕсли;	
	
	РежимЗакрытых = НЕ РежимЗакрытых;
	
	ЭлементыФормы.КнопкаЖурналЗаказовРежим.Заголовок = ?(РежимЗакрытых, "Закрытые заказы", "Текущие заказы");
	                                                                              
	ОбновитьЗаказыКурьеры();
	
КонецПроцедуры

//
//
Процедура КнопкаПоискНаКартеНажатие()

	Если глДопУправлениеФормами <> Неопределено Тогда
		глДопУправлениеФормами.ПоказатьАдресНаКарте(ЭлементыФормы.КнопкаАдрес.Заголовок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДОСТАВКА

Процедура ОбновитьЗаказыКурьеры(Знач ТекЗаказ=Неопределено, Знач ТекКурьер=Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ТекЗаказ) И Заказ <> Неопределено Тогда
		ТекЗаказ = Заказ.Ссылка;
	КонецЕсли; 
	
	ЗаполнитьКурьеров();
	
	ОтборПоОдномуСтатусу	= Ложь;
	ПодстрокаФильтра		= Неопределено;
	ДополнительныеУсловия	= "";
	
	Если ЖурналПоискПо <> Неопределено Тогда
		Если ТипЗнч(ЖурналПоискПо) = Тип("СправочникСсылка.Клиенты") Тогда 
			ДополнительныеУсловия = "И Заказ.Клиент = &ПоискПо ";
		ИначеЕсли ТипЗнч(ЖурналПоискПо) = Тип("СправочникСсылка.Сотрудники") Тогда 
			ДополнительныеУсловия = "И Заказ.Курьер = &ПоискПо ";
		ИначеЕсли ТипЗнч(ЖурналПоискПо) = Тип("ПеречислениеСсылка.СтатусыДоставки") Тогда 
			ОтборПоОдномуСтатусу = Истина;
		Иначе
			ПодстрокаФильтра = ВРег(Строка(ЖурналПоискПо));
		КонецЕсли;
	КонецЕсли;
	
	ПереченьЗакрытыхЗаказов = Новый Массив;
	Если ОтборПоОдномуСтатусу Тогда
		ПереченьЗакрытыхЗаказов.Добавить(ЖурналПоискПо);
		ДополнительныеУсловия = ДополнительныеУсловия + "И Статус В ИЕРАРХИИ (&ПереченьЗакрытыхЗаказов) ";
	Иначе
		ПереченьЗакрытыхЗаказов.Добавить(Перечисления.СтатусыДоставки.Отправлен);
		ПереченьЗакрытыхЗаказов.Добавить(Перечисления.СтатусыДоставки.Доставлен);
		ПереченьЗакрытыхЗаказов.Добавить(Перечисления.СтатусыДоставки.Отказ);
		Если РежимЗакрытых = Неопределено Или Не РежимЗакрытых Тогда
			ДополнительныеУсловия = ДополнительныеУсловия + "И Не Статус В ИЕРАРХИИ (&ПереченьЗакрытыхЗаказов) ";
		Иначе
			ДополнительныеУсловия = ДополнительныеУсловия + "И Статус В ИЕРАРХИИ (&ПереченьЗакрытыхЗаказов) ";
		КонецЕсли;
	КонецЕсли;
	
	ЖурналЗаказов.Очистить();
	
	// выбираем заказы на доставку кроме статусов Доставлено, Отказ
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Период, Статус, Автор,
		|	Заказ	 			КАК ДокСсылка,
		|	Заказ.Клиент		КАК Клиент,
		|	Заказ.ИтоговаяСумма	КАК Сумма,
		|	Заказ.Курьер		КАК Курьер,
		|	Заказ.Телефон		КАК Телефон,
		|	Заказ.Адрес			КАК Адрес
		|	
		|ИЗ
		|	РегистрСведений.ДоставкаДопИнф.СрезПоследних
		|ГДЕ
		|	Период > &ГраницаПериода
		|	И Заказ ССЫЛКА Документ.Заказ
		|	"+ДополнительныеУсловия+"
		|	И НЕ Заказ.ПометкаУдаления
		|	И Заказ.МестоРеализации = &МестоРеализации
		|
		|УПОРЯДОЧИТЬ ПО Период УБЫВ
		|");
		
	Запрос.УстановитьПараметр("ГраницаПериода"	, ТекущаяДата() - 24*60*60);
	Запрос.УстановитьПараметр("МестоРеализации"	, глПараметрыРМ.МестоРеализации);
	Если ЖурналПоискПо <> Неопределено Тогда
		Запрос.УстановитьПараметр("ПоискПо"		, ЖурналПоискПо);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПереченьЗакрытыхЗаказов", ПереченьЗакрытыхЗаказов);	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаКурьеров = ТаблицаКурьеров.Найти(Выборка.Курьер, "Курьер");
		Если СтрокаКурьеров <> Неопределено Тогда
			СтрокаКурьеров.КолвоЗаказов = СтрокаКурьеров.КолвоЗаказов + 1;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПодстрокаФильтра) Тогда
			Если НЕ( Найти(ВРег(Выборка.Адрес.Представление), ПодстрокаФильтра) 
				ИЛИ Найти(ВРег(Выборка.Телефон.ПолеХраненияНомера), ПодстрокаФильтра) 
				ИЛИ Найти(ВРег(Строка(Выборка.ДокСсылка.Номер)), ПодстрокаФильтра)
				) Тогда
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаЖурнала = ЖурналЗаказов.Добавить();
		СтрокаЖурнала.Дата			= Выборка.Период;
		СтрокаЖурнала.Статус		= Выборка.Статус;
		СтрокаЖурнала.Заказ			= Выборка.ДокСсылка;
		СтрокаЖурнала.Автор			= Выборка.ДокСсылка.Автор;
		СтрокаЖурнала.Клиент		= Выборка.Клиент;
		СтрокаЖурнала.Курьер		= Выборка.Курьер;
		СтрокаЖурнала.Сумма			= Выборка.Сумма;
		СтрокаЖурнала.Телефон		= Выборка.Телефон.Представление;
		СтрокаЖурнала.Адрес			= Выборка.Адрес.Представление;
		
	КонецЦикла;
	
	ТекСтрока = ЖурналЗаказов.Найти(ТекЗаказ,"Заказ");
	Если ТекСтрока<>Неопределено  Тогда
		ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока = ТекСтрока;
	ИначеЕсли ЖурналЗаказов.Количество()<>0  Тогда
		ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока = ЖурналЗаказов[0];
	КонецЕсли; 
	
	Если глПараметрыРМ.ДоставкаСортироватьКурьеровПоКолвуЗаказов Тогда
		ТаблицаКурьеров.Сортировать("КолвоЗаказов,Курьер");
	Иначе
		ТаблицаКурьеров.Сортировать("Курьер");
	КонецЕсли; 
	
	Если Заказ <> Неопределено И ЗначениеЗаполнено(Заказ.ВнешнийНомер) Тогда
		ПроверитьОбновлениеВнешнегоЗаказа();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКурьеров()
	
	ТаблицаКурьеров.Очистить();
	
	Запрос = Новый Запрос;
	Если глПараметрыРМ.ДоставкаКурьерыИзСмены Тогда
		Запрос.Текст = "
			|ВЫБРАТЬ Сотрудник ИЗ Документ.ОткрытиеСмены.СоставСмены
			|ГДЕ Ссылка = &ТекущаяСмена И Сотрудник.Курьер
			|";
	
		Запрос.УстановитьПараметр("ТекущаяСмена", ИнтерфейсРМ.ТекущаяСмена() );
		
	Иначе
		Запрос.Текст = "
			|ВЫБРАТЬ Ссылка КАК Сотрудник ИЗ Справочник.Сотрудники
			|ГДЕ НЕ ПометкаУдаления И Курьер
			|";
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТаблицаКурьеров.Добавить().Курьер = Выборка.Сотрудник;
	КонецЦикла; 
	
КонецПроцедуры

Функция АвтоНовыйПоКлиенту()
	
	Если НЕ (Заказ = Неопределено ИЛИ Заказ.Ссылка.Пустая()) Тогда
			
		Если ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Открыт Тогда
			Возврат Истина;
		КонецЕсли;
		
		Текст1 = "Новый заказ?";
		Текст2 = "Текущий заказ уже закрыт!" + Символы.ПС + "Создать новый?";
		Если ИнтерфейсРМ.ВопросПредупреждение("Подтверждение",Текст1,Текст2,"ОК","","Esc=Отмена") = "Отмена" Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Результат = СоздатьНовый();
	
	Возврат Результат;
КонецФункции

Процедура УстановитьКлиента(Клиент, Телефон=Неопределено, Адрес=Неопределено)
	
	Если Клиент.ЧерныйСписок Тогда
		Текст1 = "Черный список!";
		Текст2 = "Этот клиент в черном списке!";
		Если ИнтерфейсРМ.ВопросПредупреждение("Подтверждение",Текст1,Текст2,"ОК","","Esc=Отмена") = "Отмена" Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Заказ = Неопределено ИЛИ Заказ.Ссылка.Пустая() Тогда
		Если НЕ СоздатьНовый() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Заказ.Клиент	= Клиент;
	Заказ.Адрес		= ?(Адрес=Неопределено, киОсновнойАдрес(Клиент), Адрес);
	Заказ.Телефон	= ?(Телефон=Неопределено, киОсновнойТелефон(Клиент), Телефон);
	
	Модифицирован = Истина;
	
    //АктивныеАбонементы = Абонементы.ПолучитьАктивные(Заказ.Клиент, Заказ.Ссылка);
	// чтобы сразу добавились автопозиции абонементов
	//ДобавитьАвтоТоварыАбонемента();
	
	РасчетПоЗаказуПолный();
	
	ДоступностьСтраницыЖурнала();
	
КонецПроцедуры

Процедура ДоставкаОплата()
	
	Если НЕ ДоставкаПечатьМарок() Тогда
		Возврат;
	КонецЕсли; 
	
	Оплата();
	
	ПроставитьАвтоСтатус("ДоставкаАвтоСтатусыРасчет", Заказ.Ссылка);
	
КонецПроцедуры
  
Процедура НазначитьКурьера(ТекЗаказ, ТекСтатус)

	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ДоставкаИзменениеКурьера, Истина, ГлПользователь, ТекЗаказ.Автор, ТекСтатус) Тогда
		Текст1 = "Нет доступа!";
		Текст2 = "У Вас нет права назначать курьера при данном статусе заказа!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
	КонецЕсли;
	
	СписокКурьеров = Новый СписокЗначений;
	
	Для каждого СтрКурьер из ТаблицаКурьеров Цикл
		СписокКурьеров.Добавить(СтрКурьер.Курьер, Строка(СтрКурьер.Курьер) + " [ заказов - " + Строка(СтрКурьер.КолвоЗаказов) + " ]");
	КонецЦикла;

	ТекКурьер = ИнтерфейсРМ.ВыборИзСписка(СписокКурьеров);

	Если ТекКурьер = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ТекЗаказ.Курьер) Тогда
		Текст1 = "Добавить заказ?";
		Текст2 = "Выбранный курьер "+ТекКурьер+", добавить ему заказ № "+ТекЗаказ.Номер+" ?";
	ИначеЕсли ЗначениеЗаполнено(ТекЗаказ.Курьер) И ТекЗаказ.Курьер = ТекКурьер Тогда
		Текст1 = "Нет доступа!";
		Текст2 = "Курьер " + ТекКурьер + " уже получил этот заказ!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
	Иначе	
		Текст1 = "Заменить курьера?";
		Текст2 = "Заменить курьера "+ТекЗаказ.Курьер+" в заказе № "+ТекЗаказ.Номер + Символы.ПС + "на "+ТекКурьер+ "?";
	КонецЕсли; 
	
	Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"ОК","","Esc=Отмена") = "Отмена" Тогда
		Возврат;
	КонецЕсли; 
	
	НачатьТранзакцию();
	
	ТекЗаказ.Курьер = ТекКурьер;
	
	НазначитьАвтора(глПользователь);
	
	Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ТекЗаказ, "Объект.Записать()" ) Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Если ЗначениеЗаполнено(ТекЗаказ.ВнешнийНомер) Тогда
		//ВнешнийЗаказ.ВыгрузитьСтатусДоставки(ТекЗаказ.Ссылка);
	КонецЕсли;
	
	ПроставитьАвтоСтатус("ДоставкаАвтоСтатусыКурьер", ТекЗаказ.Ссылка);
	
КонецПроцедуры

Процедура ОформитьОтказ()
	
	Если Заказ = Неопределено ИЛИ Заказ.Ссылка.Пустая() Тогда
		Возврат
	КонецЕсли; 
	
	Если НЕ ВыполнитьПроверку("НеЗаблокирован") Тогда
		Возврат;
	КонецЕсли;
	
	Если Заказ.Товары.Количество()=0 И Не ЗначениеЗаполнено(Заказ.ВнешнийНомер) Тогда 
		Текст1 = "Сбросить заказ?";
		Текст2 = "Заказ еще не был сохранен, сбросить заказ?";
		Если ИнтерфейсРМ.ВопросПредупреждение("Подтверждение",Текст1,Текст2,"Да","","Esc=Нет") = "Да" Тогда
			СброситьЗаказ();
		КонецЕсли; 
		Возврат;
		
	ИначеЕсли ДоставкаДопИнф.Статус = Перечисления.СтатусыДоставки.Доставлен Тогда
		Текст1 = "Нет доступа!";
		Текст2 = "По этому заказу доставка уже выполнена!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
		
	ИначеЕсли ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Удален Тогда
		Текст1 = "Нет доступа!";
		Текст2 = "Заказ уже был удален полностью!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
		
	ИначеЕсли ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Закрыт Тогда
		// оформить возврат
		
		ИнтерфейсРМ.ПолучитьОбъектОбработки("ЖурналЗаказов").ВозвратПоЗаказу(Заказ.Ссылка, ЗаказДопИнф);
		ПолучитьПоследнийСтатусДоставки(Заказ.Ссылка);
		
	Иначе
		// удалить заказ
		Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ДоставкаУдалениеОткрытыхЗаказов", Истина, , Заказ.Автор, ДоставкаДопИнф.Статус) Тогда
			Возврат;
		КонецЕсли; 
		
		УдалитьВсеЗаказанное();
		
		Если ЗаказДопИнф.Статус <> Перечисления.СтатусыЗаказа.Удален Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 

	ОтпуститьЗаказ();
	
	ОбновлениеОтображения();
	
КонецПроцедуры

Процедура СброситьЗаказ()
	
	Заказ.Клиент = Неопределено;
	Заказ.Телефон = Неопределено;
	Заказ.Адрес = Неопределено;
	
	ТаблицаЗаказа.Строки.Очистить();
	
	КлиентКод = "";
	ТекущийЭлемент = ЭлементыФормы.КлиентКод;
	
	// надо еще обновить время создания заказа
	Заказ.Дата				= ТекущаяДата();
	Заказ.Смена				= ИнтерфейсРМ.ТекущаяСмена();
	
	ДоставкаДопИнф.Период	= ТекущаяДата();
	ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДоставкаДопИнф, "Объект.Записать()" );
	
	
КонецПроцедуры

Функция ДоступностьКонтактнойИнфы()
	
	Если Заказ = Неопределено ИЛИ Заказ.Ссылка.Пустая() Тогда
		Возврат Ложь;
	ИначеЕсли Заказ.Клиент.Ссылка.Пустая() Тогда
		Возврат Ложь;
	//ИначеЕсли НЕ КнопкиЗаказаДоступны Тогда
	//	Возврат Ложь;
	КонецЕсли;
	
	ТекСтатус = ДоставкаДопИнф.Статус;
	
	Результат = НЕ Заблокирован И 
				НЕ (ТекСтатус = Перечисления.СтатусыДоставки.Отправлен ИЛИ
					ТекСтатус = Перечисления.СтатусыДоставки.Доставлен ИЛИ
					ТекСтатус = Перечисления.СтатусыДоставки.Отказ
					);
					
	Возврат Результат;
КонецФункции

Функция НайтиКлиента(КлиентКод, Телефон=Неопределено)
	
	ТелефонДляПоиска = ПреобразоватьНомерДляСохранения(КлиентКод, глКоличествоХранимыхЦифрТелефона);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КонтактнаяИнформация.Ссылка,
	                      |	КонтактнаяИнформация.Объект,
	                      |	КонтактнаяИнформация.Представление
	                      |ИЗ
	                      |	Справочник.КонтактнаяИнформация КАК КонтактнаяИнформация
	                      |ГДЕ
	                      |	КонтактнаяИнформация.ПолеХраненияНомера = &Телефон");
						  
	Запрос.УстановитьПараметр("Телефон", ТелефонДляПоиска);
	
	Меню = Новый СписокЗначений;
	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Меню.Добавить(Выборка.Ссылка, Выборка.Объект.Наименование);
	КонецЦикла; 
	
	Если Меню.Количество()=0 Тогда
		Возврат Справочники.Клиенты.ПустаяСсылка();
		
	ИначеЕсли Меню.Количество()=1 Тогда
		Телефон = Меню[0].Значение;
		Возврат Телефон.Объект;
		
	КонецЕсли; 
	
	ВыбЗнач = ИнтерфейсРМ.ВыборИзСписка(Меню);
	Если ВыбЗнач = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Телефон = ВыбЗнач;
	Возврат Телефон.Объект;
	
КонецФункции

Процедура ВвестиНовыйАдресТелефон(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ИмяФормы = "ФормаЗаписиАдресаРМ";
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ИмяФормы = "ФормаЗаписиТелефонаРМ";
	Иначе
		Возврат;
	КонецЕсли;
	
	НовыйАдресТел = Справочники.КонтактнаяИнформация.СоздатьЭлемент();
	НовыйАдресТел.Объект = Заказ.Клиент;
	НовыйАдресТел.Тип = Тип;
		

	ФормаЗаписи = НовыйАдресТел.ПолучитьФорму(ИмяФормы);
	ФормаЗаписи.ВладелецФормы = ЭтаФорма;
	ФормаЗаписи.ОткрытьМодально();
	
	Если НовыйАдресТел.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
		
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Заказ.Адрес = НовыйАдресТел.Ссылка;
	Иначе
		Заказ.Телефон = НовыйАдресТел.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуАдресаТелефона(ОбъектКИ)
	
	Если ОбъектКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ИмяФормы = "ФормаЗаписиАдресаРМ";
		ЭлементПривязки = ЭлементыФормы.КнопкаАдрес;
		
	ИначеЕсли ОбъектКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ИмяФормы = "ФормаЗаписиТелефонаРМ";
		ЭлементПривязки = ЭлементыФормы.КнопкаТелефон;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	ФормаЗаписи = ОбъектКИ.ПолучитьФорму(ИмяФормы);
	ФормаЗаписи.ВладелецФормы = ЭтаФорма;
	ФормаЗаписи.ОткрытьМодально();
	
КонецПроцедуры

// 
Процедура ОтпуститьЗаказ()
    
	Если НЕ ВыходИзЗаказа() Тогда
		Возврат;
	КонецЕсли; 
	
	Заказ	= Документы.Заказ.ПустаяСсылка();
	
	ТаблицаЗаказа.Строки.Очистить();
	ТаблицаКатегорий.Очистить();
	ТаблицаСкидок.Очистить();
	РучнаяСкидка	= Неопределено;
	ПартнерСкидки	= Неопределено;
	Заблокирован	= Ложь;
	Модифицирован	= Ложь;
	ЕстьДозаказ		= Ложь;
	ЕстьУдаление	= Ложь;
	
	ТипЦен = Защита.ПолучитьТипЦен(Заказ.МестоРеализации);
	
	//ОбновлениеОтображения();

КонецПроцедуры

Процедура ВыборСтатусЗаказа(ТекЗаказ, ТекСтатус, СтатусОтказа = Ложь)
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыДоставки.Подготовлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДоставки.Отправлен);
	СписокСтатусов.Добавить(Перечисления.СтатусыДоставки.Доставлен); 
	Если СтатусОтказа Тогда
		СписокСтатусов.Добавить(Перечисления.СтатусыДоставки.Отказ);
	КонецЕсли;	
	
	НовыйСтатус = ИнтерфейсРМ.ВыборИзСписка(СписокСтатусов);

	Если НовыйСтатус = Неопределено ИЛИ НовыйСтатус = Перечисления.СтатусыДоставки.ПустаяСсылка()Тогда
		Возврат;
	КонецЕсли; 

	Если НовыйСтатус = Перечисления.СтатусыДоставки.Отказ Тогда
		ОформитьОтказ();
		Возврат;
	КонецЕсли;	
	
	ПрисвоитьНовыйСтатусДоставки(ТекЗаказ, НовыйСтатус, ТекСтатус);	
	
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура ПрисвоитьНовыйСтатусДоставки(ТекЗаказ, НовыйСтатус, ТекСтатус, ВыводПредупреждения = Истина)
	
	Если НовыйСтатус = Перечисления.СтатусыДоставки.Доставлен Тогда
		ПроверитьПравоНа = ПланыВидовХарактеристик.ПраваДоступа.ДоставкаДоставлено;
	ИначеЕсли НовыйСтатус = Перечисления.СтатусыДоставки.Отправлен Тогда
		ПроверитьПравоНа = ПланыВидовХарактеристик.ПраваДоступа.ДоставкаОтправлено;
	Иначе
		ПроверитьПравоНа = ПланыВидовХарактеристик.ПраваДоступа.ДоставкаПодготовлено;
	КонецЕсли;
	
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПроверитьПравоНа, ВыводПредупреждения, ГлПользователь, ТекЗаказ.Автор, ТекСтатус) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыводПредупреждения Тогда
		Текст1 = "Присвоение статуса!";
		Текст2 = "Подтвердите статус " + НовыйСтатус + " для заказа по адресу: "+ ТекЗаказ.Адрес.Представление;
		Если ИнтерфейсРМ.ВопросПредупреждение("Подтверждение",Текст1,Текст2,"ОК","","Esc=Отмена") = "Отмена" Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	
	ОбновлениеОтображения();
	
КонецПроцедуры

// Показать историю заказов по клиента
//
Процедура ПоказатьИсториюКлиента()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДокЗаказ.Ссылка 		КАК Ссылка,
	|	ДокЗаказ.Номер			КАК Номер,
	|	ДокЗаказ.Дата			КАК Дата,
	|	ДокЗаказ.ИтоговаяСумма	КАК ИтоговаяСумма,
	|	ДокЗаказ.Товары.(
	|		НомерСтроки		КАК НомерСтроки,
	|		Товар			КАК Товар,
	|		Количество		КАК Количество,
	|		ЦенаРеализации	КАК Цена,
	|		СуммаРеализации КАК Сумма
	|	) КАК Товары,
	|	ДокЗаказ.Специфики.(
	|		НомерСтрокиТовара	КАК НомерСтрокиТовара,
	|		Специфика			КАК Специфика
	|	) КАК Специфики
	|ИЗ
	|	Документ.Заказ КАК ДокЗаказ
	|ГДЕ
	|	ДокЗаказ.Клиент = &Клиент
	|	И НЕ ДокЗаказ.ПометкаУдаления
	|УПОРЯДОЧИТЬ ПО ДокЗаказ.Дата УБЫВ
	|");
	Запрос.УстановитьПараметр("Клиент"	,Заказ.Клиент);
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();	
	
	Если ТаблицаДокументов.Количество() = 0 Тогда
		ДоступностьСтраницыЖурнала();
		Возврат;
	КонецЕсли;	
	
	ИсторияКлиента.Строки.Очистить();
	Для каждого СтрокаЗаказ Из ТаблицаДокументов Цикл
		
		СтрокаИстории = ИсторияКлиента.Строки.Добавить();
		СтрокаИстории.ЗаказТовар	= СтрокаЗаказ.Ссылка; 
		СтрокаИстории.Сумма			= СтрокаЗаказ.ИтоговаяСумма;
		
		Для каждого СтрокаТовар Из СтрокаЗаказ.Товары Цикл
			СтрокаИсторииТовар = СтрокаИстории.Строки.Добавить();
			СтрокаИсторииТовар.ЗаказТовар	= СтрокаТовар.Товар;
			СтрокаИсторииТовар.Количество	= СтрокаТовар.Количество;
			СтрокаИсторииТовар.Сумма		= СтрокаТовар.Сумма;
		КонецЦикла;
		
	КонецЦикла;
	
	ЭлементыФормы.ИсторияКлиента.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	
	ДоступностьСтраницыЖурнала(Ложь);
	
КонецПроцедуры

// Показать историю заказов по клиенту
//
Процедура ИсторияКлиентаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыводПредупреждения = Истина;
	
	Если НЕ(ВыполнитьПроверку("ЗаказОткрыт"		,ВыводПредупреждения) И 
			ВыполнитьПроверку("ПроверкаСмены"	,ВыводПредупреждения) И 
			ВыполнитьПроверку("НетПресчета"		,ВыводПредупреждения) И 
			ВыполнитьПроверку("НеЗаблокирован"	,ВыводПредупреждения) И 
			ВыполнитьПроверку("НетУдалений"		,ВыводПредупреждения) И  
			ВыполнитьПроверку("Право.Дозаказ"	,ВыводПредупреждения)
			) Тогда
		Возврат;
	КонецЕсли; 	
	
	Если ВыбраннаяСтрока.Уровень()=0 Тогда
		
		Для каждого СтрокаТовар Из ВыбраннаяСтрока.Строки Цикл
			ВводНовойСтроки( СтрокаТовар.ЗаказТовар, СтрокаТовар.Количество );
		КонецЦикла;
		
	Иначе
		ВводНовойСтроки( ВыбраннаяСтрока.ЗаказТовар, ВыбраннаяСтрока.Количество );
	КонецЕсли; 
	
КонецПроцедуры

// Оформление таблици истории заказов по клиенту
//
Процедура ИсторияКлиентаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Уровень()=0 Тогда
		ОформлениеСтроки.Шрифт		= Новый Шрифт(ОформлениеСтроки.Шрифт,,,Истина);	// Жирный
		ОформлениеСтроки.ЦветФона	= ЦветаСтиля.ЦветФонаШапкиОтчета;
	КонецЕсли; 
	
КонецПроцедуры

// Проставить статус доставки согласно настроек РМ
//
Процедура ПроставитьАвтоСтатус(ТекОперация, ТекЗаказ)
		
	Если ЗначениеЗаполнено(глПараметрыРМ[ТекОперация]) Тогда
		
		//ТекЗаказ	= Заказ.Ссылка;
		НовыйСтатус = глПараметрыРМ[ТекОперация];
		ТекСтатус	= ДоставкаДопИнф.Статус;
		
		ПрисвоитьНовыйСтатусДоставки(ТекЗаказ, НовыйСтатус, ТекСтатус, Ложь);

	КонецЕсли;	
	
КонецПроцедуры	

// Назначить доступность кнопок журнала
//
Процедура ДоступностьСтраницыЖурнала(ПоказатьЖурнал = Истина)

	Если ПанельСтраницаЖернала = ПоказатьЖурнал Тогда
		Возврат;
	КонецЕсли;	

	ПанельСтраницаЖернала = ПоказатьЖурнал;	
	
	ЭлементыФормы.КнопкаЖурналПоиск.Доступность				= ПанельСтраницаЖернала;
	ЭлементыФормы.КнопкаЖурналПоискОтключить.Доступность	= ПанельСтраницаЖернала;
	ЭлементыФормы.КнопкаЖурналКурьерЗаказа.Доступность		= ПанельСтраницаЖернала;
	ЭлементыФормы.КнопкаЖурналСтатусЗаказа.Доступность		= ПанельСтраницаЖернала;
	ЭлементыФормы.КнопкаЖурналЗаказДоставлен.Доступность	= ПанельСтраницаЖернала;

	Если ПанельСтраницаЖернала Тогда
		ЭлементыФормы.ПанельЖурналИстория.ТекущаяСтраница		= ЭлементыФормы.ПанельЖурналИстория.Страницы.Журнал;
		
	Иначе
		ЭлементыФормы.ПанельЖурналИстория.ТекущаяСтраница		= ЭлементыФормы.ПанельЖурналИстория.Страницы.История;
		
		НакопленияКлиента = НакопленияКлиента(Заказ.Клиент);
		ЭлементыФормы.НадписьКлиентДополнительныеДанные.Значение="Имя: " + Заказ.Клиент.Наименование +
		Символы.ПС + "пол: " + ?(ЗначениеЗаполнено(Заказ.Клиент.Пол), Строка(Заказ.Клиент.Пол) + ".", "?") +
		Символы.ПС + "дата рождения: " + ?(ЗначениеЗаполнено(Заказ.Клиент.ДатаРождения), Формат(Заказ.Клиент.ДатаРождения,"ДФ=дд.ММ.гг"), "?") +
		Символы.ПС + "------------------------------" +
		Символы.ПС + "скидка по умолчанию: " + Заказ.Клиент.Скидка+
		Символы.ПС + "неплательщик:	" + Заказ.Клиент.Неплательщик+
		Символы.ПС + "основной вариант оплаты: " + Заказ.Клиент.ОсновнойВариантОплаты +
		Символы.ПС + "глубина кредита: " + Заказ.Клиент.ГлубинаКредита +
		Символы.ПС + "остаток на счете: " + ФорматСумм(НакопленияКлиента.СуммаБезнал, глРубли) +
		?(глВерсия > 1, Символы.ПС + "накоплено бонусов: " + ФорматСумм(НакопленияКлиента.СуммаБонусов, глРубли), "") +
		Символы.ПС + "------------------------------" +
		Символы.ПС + "email: " + Заказ.Клиент.Email +
		Символы.ПС + "доп. информация: " + Заказ.Клиент.ДопИнформация +
		Символы.ПС + "находится в черном списке: " + Заказ.Клиент.ЧерныйСписок;
		
	КонецЕсли;
КонецПроцедуры	

Процедура тСтрИнфоНажатие(Элемент)
	
	ПолучитьРекомендации();
	
КонецПроцедуры


//Процедура ДоступностьКнопок(ДоступностьИзменить = Ложь)
//	
//	Если ДоступностьИзменить Тогда
//		КнопкиЗаказаДоступны = НЕ КнопкиЗаказаДоступны;
//	КонецЕсли;	
//	
//	ЭлементыФормы.АктивностьКнопок.Заголовок 			= ?(КнопкиЗаказаДоступны, "Активен заказ", "Активен журнал");
//	
//	ЭлементыФормы.КнопкаКлиент.Доступность				= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаКолвоГостей.Доступность			= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаОплата.Доступность				= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаПречек.Доступность				= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаПечатьМарок.Доступность			= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаСкидка.Доступность				= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаСпецифика.Доступность			= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаКоличество.Доступность			= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаМеню.Доступность				= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЗаписать.Доступность			= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЗаказДоставлен.Доступность		= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЗакрытьДоставку.Доступность		= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаНазначитьКурьера.Доступность	= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаУдалитьСкидку.Доступность		= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаОбщаяСпецифика.Доступность		= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаУдалить.Доступность				= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаУпаковка.Доступность			= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаСтрелкаВверх.Доступность		= КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаСтрелкаВниз.Доступность			= КнопкиЗаказаДоступны;

//	ЭлементыФормы.КнопкаЖурналСтрелкаВверх.Доступность	= НЕ КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЖурналВыборЗаказа.Доступность	= НЕ КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЖурналСтрелкаВниз.Доступность	= НЕ КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЖурналКурьерЗаказа.Доступность	= НЕ КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЖурналСтатусЗаказа.Доступность	= НЕ КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЖурналЗаказДоставлен.Доступность= НЕ КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЖурналЗаказовРежим.Доступность	= НЕ КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЖурналПоиск.Доступность			= НЕ КнопкиЗаказаДоступны;
//	ЭлементыФормы.КнопкаЖурналПоискОтключить.Доступность= НЕ КнопкиЗаказаДоступны;
//	
//КонецПроцедуры	



