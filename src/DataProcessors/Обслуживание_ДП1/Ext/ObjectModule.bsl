
Перем ПараметрыТО Экспорт;   // Параметры торгового оборудования.
Перем Результат Экспорт;     // Результат выполнения действия.
Перем DRV Экспорт;           // Драйвер
Перем УровеньЛогирования Экспорт; // уровень логирования действий драйвера 0 - самый низкий ....

Перем КодыМоделей;
Перем ТаблицаПараметрыСтроки;
Перем СписокОшибок;
Перем ТаблицаПерекодировки; // кэш перекодировки строк. Соответствие, где ключ - исходная строка, значение - перекодированная строка

#Если Клиент Тогда

// Производит инициализацию торгового оборудования.
//
Процедура Инициализация() Экспорт
	
	Если НЕ ЗагрузитьДрайвер() Тогда
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Ошибка загрузки драйвера!";
		Результат.Подробно	= "Программе не удалось загрузить драйвер дисплея покупателя...";
		Возврат;
	КонецЕсли; 
	
	// заполнение списка моделей
	КодыМоделей = Новый Структура;
	//КодыМоделей.Вставить("DPD_201"		,0);
	КодыМоделей.Вставить("EPSON_ESC"	,1);
	КодыМоделей.Вставить("IBM",2);
	//КодыМоделей.Вставить("ДП_01"		,2);
	//КодыМоделей.Вставить("ДП_02"		,3);
	//КодыМоделей.Вставить("ДП_03"		,4);
	//КодыМоделей.Вставить("Flytech"		,5);
	//КодыМоделей.Вставить("GIGATEK800"	,6);
	//КодыМоделей.Вставить("FrontMaster"	,7);
	//КодыМоделей.Вставить("EPSON_USA"	,8);
	//КодыМоделей.Вставить("IPC"			,10);
	//КодыМоделей.Вставить("GIGATEK820"	,11);
	//КодыМоделей.Вставить("TEC51"		,12);
	//КодыМоделей.Вставить("OMRON75"		,13);
	//КодыМоделей.Вставить("NCR_597x"		,14);
	//КодыМоделей.Вставить("ШтрихMiniPos"	,15);
	//КодыМоделей.Вставить("PosiflexPD"	,16);
	//КодыМоделей.Вставить("ДемоДисплей"	,255);
	
	ПрочитатьПараметр("Model",КодыМоделей[то.КодМодели]);
	ПрочитатьПараметр("PortNumber"		, 1 );
	ПрочитатьПараметр("BaudRate"		, 7 );
	ПрочитатьПараметр("MachineName"		, "" );
	ПрочитатьПараметр("DataBits"		, 4 );
	ПрочитатьПараметр("Parity"			, 0 );
	ПрочитатьПараметр("StopBits"		, 0 );
	ПрочитатьПараметр("DownloadFonts"	, 1 );
	ПрочитатьПараметр("MarqueeType"		, 0 );
	ПрочитатьПараметр("MarqueeFormat"	, 1 );
	ПрочитатьПараметр("MarqueeRepeatWait", 500 );
	ПрочитатьПараметр("MarqueeUnitWait"	, 200 );
	
КонецПроцедуры

// Выполняет действие с ТО.
//
// Параметры:
//  Действие - имя действия,
//  ПараметрыДействия - произвольный набор параметров
//
Процедура ВыполнитьДействие(Действие, ПараметрыДействия=Неопределено) Экспорт
	
	Логирование(0,"Выполнить действие",Действие);
	
	Подключить();
	
	Если Действие = "Подключить" Тогда
		Подключить();
		
	ИначеЕсли Действие = "Отключить" Тогда
		Отключить();
		
	ИначеЕсли Действие = "ВывестиТекст" Тогда
		Если ПараметрыДействия.Количество() = 0 Тогда
			УдалитьВсеОкна();
		Иначе
			ВывестиТекст(ПараметрыДействия);
		КонецЕсли;
		
	ИначеЕсли Действие = "БегущаяСтрока" Тогда
		БегущаяСтрока(ПараметрыДействия);
		
	Иначе
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Неизвестная команда!";
		Результат.Подробно	= "Команда """+Действие+""" не определена для "+ТО.Наименование;
		
	КонецЕсли;
	
	Отключить();
	
КонецПроцедуры

// Загружает драйвер ТО.
//
// Возвращаемое значение:
//  Истина - драйвер загружен, ложь - нет.
//
Функция ЗагрузитьДрайвер()
	
	Если глТорговоеОборудование.Свойство("Line45",DRV) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Попытка
		ПодключитьВнешнююКомпоненту("AddIn.RcpPrn8");
		//ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "\FPrnM1C.dll");
	    //DRV = Новый ("AddIn.RcpPrn8");
		DRV = Новый COMОбъект("MSCOMMLib.MSComm.1");
		Если DRV.PortOpen =  1 ТОгда
			DRV.PortOpen = 0;
		КонецЕсли;
	Исключение
		Инфо = ИнформацияОбОшибке();
		Сообщить(Инфо);
		Логирование(0,"Инициализация драйвера","Ошибка - " + Инфо);
	КонецПопытки;
	
	//Попытка 
	//	ЗагрузитьВнешнююКомпоненту("Line1C.dll");
	//	DRV = Новый("AddIn.Line45");
	//Исключение
	//	Возврат Ложь;
	//КонецПопытки;
	//
	//DRV.LockDevices = 1;
	
	глТорговоеОборудование.Вставить("RcpPrn1C", DRV);
	Возврат Истина;
КонецФункции

// Выполняет чтение параметра ТО.
//
// Параметры:
//  ИмяПараметра        - имя параметра,
//  ЗначениеПоУмолчанию - значение по умолчанию для данного параметра.
//
// Возвращаемое значение:
//  Значение параметра или значение по умолчанию
//
Процедура ПрочитатьПараметр(ИмяПараметра,ЗначениеПоУмолчанию)
	
	Если НЕ ПараметрыТО.Свойство(ИмяПараметра) Тогда
		ПараметрыТО.Вставить(ИмяПараметра,ЗначениеПоУмолчанию);
	КонецЕсли; 
	
	Попытка
		ЭтотОбъект[ИмяПараметра] = ПараметрыТО[ИмяПараметра];
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Обработка ошибок
//
Функция Ошибка()
	
	//Если DRV.ResultCode <> 0 Тогда
	//	
	//	ЗаписьЖурналаРегистрации("Торговое оборудование.Ошибка", УровеньЖурналаРегистрации.Ошибка, ТО.Метаданные(), ТО.Ссылка, DRV.ResultDescription);
	//	
	//	Результат.Ошибка = Истина;
	//	Результат.Описание = "Ошибка ДП: "+DRV.ResultCode;
	//	Результат.Подробно = DRV.ResultDescription;
	//	
	//	Возврат Истина;
	//КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Установка параметров подключения
//
Функция Подключить() Экспорт
	
	Логирование(0,"Подключить","начало");
	Если КодыМоделей = Неопределено Тогда
		Инициализация();
	КонецЕсли;
	
	Если DRV.PortOpen =  1 ТОгда
		DRV.PortOpen = 0;
	КонецЕсли;
	
   Попытка
        DRV.CommPort = PortNumber;             // Номер порта
        DRV.Settings = "9600,N,8,1";      // Параметры порта
        DRV.PortOpen = 1;                     // Открываем порт
		DRV.inputMode = 1;                    // Режим вывода данных
	Исключение
		Логирование(0,"Подключить - открытие порта",_ОписаниеОшибки(-99));
		Возврат -99;
	КонецПопытки;
	Если то.КодМодели = "IBM" Тогда
		_ОтправитьВПорт(Знак(31));
		_ОтправитьВПорт(Знак(0) + знак(1));
		_ОтправитьВПорт(Знак(17));
		_ОтправитьВПорт(Знак(20));
		_ОтправитьВПорт(Знак(2) + Знак(10));
		_ОтправитьВПорт(Знак(2) + Знак(10));
		//Команда = Знак(31) + Знак(0) + Знак(1) + Знак(17) + Знак(20) + Знак(2) + Знак(10);
		//_ОтправитьВПорт(Команда);	
		//
		//Команда = Знак(2) + Знак(10);
		//_ОтправитьВПорт(Команда);
	Иначе
		// инициализация
		Команда = Знак(27) + Знак(64);
		_ОтправитьВПорт(Команда);
		
		//АктивацияКодировки
		Команда = Знак(27) + Знак(82) + Знак(12);// character set
		_ОтправитьВПорт(Команда);
		
		Команда = Знак(27) + Знак(116) + Знак(7); // code table
		_ОтправитьВПорт(Команда);
	КонецЕсли;
	Логирование(0,"Подключить","конец");
	Возврат 0;
КонецФункции

// Отключение устройства
//
Процедура Отключить() Экспорт
	
	Логирование(0,"Отключить","начало");
	Пока DRV.OutBufferCount > 0 Цикл
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	Если DRV.PortOpen =  1 ТОгда
		DRV.PortOpen = 0;
	КонецЕсли;
	//DRV.DeviceEnabled=0;
	Логирование(0,"Отключить","Конец");
	
КонецПроцедуры

// вывод текста на дисплей
//
Процедура ВывестиТекст(ПараметрыДействия)
	
	Логирование(0,"Вывод текста",ПараметрыДействия);
	ШиринаОкна = 20;
	Текст1 = Лев(СтрЗаменить(ПараметрыДействия.Текст1,Символ(160),"") + "                    ", ШиринаОкна);
	Текст2 = Лев(СтрЗаменить(ПараметрыДействия.Текст2,Символ(160),"") + "                    ", ШиринаОкна);
	
	Если то.КодМодели = "IBM" Тогда
		Команда = Знак(16) + Знак(0);
		_ОтправитьВПорт(команда);
	Иначе
		// очистим дисплей
		Команда = Знак(12);
		_ОтправитьВПорт(команда);
		// позиционируем на 1,1
		Команда = Знак(31) + Знак(36) + Знак(1) + Знак(1);
		_ОтправитьВПорт(команда);
	КонецЕсли;
	// 1 строка
	ТекстДляОтправки = Перекодировка(Текст1);
	_ОтправитьВПорт(ТекстДляОтправки);
	// 2 строка
	ТекстДляОтправки = Перекодировка(Текст2);
	_ОтправитьВПорт(ТекстДляОтправки);
	Логирование(0,"Вывод текста","Конец");
	//
	//УдалитьВсеОкна();
	//DRV.CreateWindow(0,0,2,20,2,ШиринаОкна);
	//
	//DRV.DisplayText( Текст1+Символы.ПС+Текст2+Символы.ПС, 0);
	//
	//Ошибка();
	
КонецПроцедуры

// Вывод текста бегущей строкой
//
Процедура БегущаяСтрока(ПараметрыДействия)
	
	//УдалитьВсеОкна();
	//
	//Текст = ПараметрыДействия.Текст;
	//КолвоСтрок = СтрЧислоСтрок(Текст);
	//МаксДлинаСтроки = 1;
	//Для н=1 По КолвоСтрок Цикл
	//	МаксДлинаСтроки = Макс(МаксДлинаСтроки, СтрДлина(СтрПолучитьСтроку(Текст,н)) );
	//КонецЦикла; 
	//
	//ВысотаОкна = КолвоСтрок+2;
	//ШиринаОкна = МаксДлинаСтроки+20;
	//DRV.CreateWindow(0,0,2,20,ВысотаОкна,ШиринаОкна);
	//
	//DRV.MarqueeRepeatWait	= MarqueeRepeatWait;
	//DRV.MarqueeUnitWait		= MarqueeUnitWait;
	//DRV.MarqueeType			= MarqueeType;
	//DRV.MarqueeFormat		= MarqueeFormat;
	//
	//DRV.DisplayText(ПараметрыДействия.Текст, 0);
	//
	//Ошибка();
	
КонецПроцедуры

// Удаляет все окна
Процедура УдалитьВсеОкна() Экспорт
	
	Если то.КодМодели = "IBM" Тогда
		_ОтправитьВПорт(Знак(31));
		_ОтправитьВПорт(Знак(0) + знак(1));
		_ОтправитьВПорт(Знак(17));
		_ОтправитьВПорт(Знак(20));
		_ОтправитьВПорт(Знак(2) + Знак(10));
		_ОтправитьВПорт(Знак(2) + Знак(10));
		//Команда = Знак(31) + Знак(0) + Знак(1) + Знак(17) + Знак(20) + Знак(2) + Знак(10);
		//_ОтправитьВПорт(Команда);	
		//
		//Команда = Знак(2) + Знак(10);
		//_ОтправитьВПорт(Команда);
	Иначе	
		// очистим дисплей
		Команда = Знак(12);
		_ОтправитьВПорт(команда);
		// позиционируем на 1,1
		Команда = Знак(31) + Знак(36) + Знак(1) + Знак(1);
		_ОтправитьВПорт(команда);
	КонецЕсли;
	//Пока DRV.CurrentWindow > 0 Цикл
	//	DRV.CurrentWindow = 1;
	//	DRV.DestroyWindow();
	//КонецЦикла;
	
КонецПроцедуры 

#Область ДопПроцедуры

Процедура Логирование(Уровень,Место,знач Текст)
	//Если УровеньЛогирования <= Уровень Тогда
	//	Если ТипЗнч(Текст) <> Тип("Строка") Тогда
	//		Текст = ПреобразоватьВJSON(Текст);
	//		//Текст = json(Текст);
	//		//сообщить(Текст);
	//	КонецЕсли;
	//	
	//	ПутьДляЛогирования = Константы.ПутьДляЛогирования.Получить();
	//	Файл = Новый Файл(ПутьДляЛогирования);
	//	Если Файл.Существует() ТОгда
	//		Каталог = Формат(ТекущаяДата(),"ДФ=yyyyMMdd");
	//		НовыйПуть = ПутьДляЛогирования + "\" + Каталог;
	//		Файл = Новый Файл(НовыйПуть);
	//		Если не Файл.Существует() Тогда
	//			СоздатьКаталог(НовыйПуть);
	//		КонецЕсли;
	//		ИмяФайла = НовыйПуть + "\D" + Каталог + ".log";
	//		ФАйл = Новый Файл(ИмяФайла);
	//		Если Файл.Существует() Тогда
	//			ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//			ТекстовыйДокумент.Прочитать(ИмяФайла);
	//		Иначе
	//			ТекстовыйДокумент = Новый ТекстовыйДокумент;
	//		КонецЕсли;
	//		СтрокаЗаписи = "" + ТекущаяДата() + ";" + Место + ";" + Текст;
	//		ТекстовыйДокумент.ДобавитьСтроку(СтрокаЗаписи);
	//		ТекстовыйДокумент.Записать(ИмяФайла);
	//	Иначе
	//		 ЗаписьЖурналаРегистрации("Ошибка логирования",УровеньЖурналаРегистрации.Ошибка,,,"Путь логирования не существует");
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьВJSON(ВхПараметры)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON,ВхПараметры);
	//СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,ВхПараметры,НазначениеТипаXML.Явное);
	ВыхСтрока = ЗаписьJSON.Закрыть();
	Возврат ВыхСтрока;
	
КонецФункции

Функция Знак(Код)
	sc = Новый COMОбъект("MSScriptControl.ScriptControl");
	sc.language="VBscript";
	Возврат sc.eval("Chr("""+Код+""")");
КонецФункции

Процедура _ОтправитьВПорт(Данные)
	Пока DRV.OutBufferCount > 0 Цикл
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	DRV.Output = Данные;
КонецПроцедуры

Функция Перекодировка(Текст)
	РезультатПерекодировки = ТаблицаПерекодировки.Получить(Текст);
	Если РезультатПерекодировки = Неопределено Тогда
		
		Имя = ПолучитьИмяВременногоФайла();
		ЗаписьТекста = Новый ЗаписьТекста(Имя,КодировкаТекста.OEM);
		ЗаписьТекста.Записать(Текст);
		ЗаписьТекста.Закрыть();
		
		Чтение = Новый ТекстовыйДокумент;
		Чтение.Прочитать(Имя, "windows-1251");
		РезультатПерекодировки = Чтение.ПолучитьТекст();
		
		ТаблицаПерекодировки.Вставить(Текст, РезультатПерекодировки);
	КонецЕсли;
	
	Возврат РезультатПерекодировки;
КонецФункции

Функция _ОписаниеОшибки(КодОш)
	Возврат СписокОшибок.Получить(КодОш);
КонецФункции

#КонецОбласти


#КонецЕсли

Результат = Новый Структура("Ошибка,Описание,Подробно",Ложь,"","");

УровеньЛогирования = 0;

СписокОшибок = Новый Соответствие;
СписокОшибок.Вставить(0,"Ошибок нет");
СписокОшибок.Вставить(-1,"Крышка открыта");
СписокОшибок.Вставить(-2,"Ошибка");
СписокОшибок.Вставить(-3,"Механическая неисправность");
СписокОшибок.Вставить(-4,"Ошибка отрезчика");
СписокОшибок.Вставить(-5,"Перегрев печатающей головки");
СписокОшибок.Вставить(-6,"Нет бумаги");
СписокОшибок.Вставить(-7,"Ошибка печати ШК");
СписокОшибок.Вставить(-99,"Ошибка открытия порта");

ТаблицаПерекодировки = Новый Соответствие;