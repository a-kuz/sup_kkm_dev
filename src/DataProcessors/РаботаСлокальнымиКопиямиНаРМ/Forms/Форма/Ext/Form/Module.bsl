
&НаСервереБезКонтекста
Функция РМсНевыполненнойПроверкой()
	Отказ = Ложь;
	ТекстОшибки = "";
	ТекстЗапроса = СтрШаблон("
	|SELECT
	|	НомерККМ = [Оборудование]
	|	
	|FROM
	|	dbo.[КонтрольныеПроверки] AS КонтрольныеПроверкиТ
	|	LEFT JOIN dbo.[КонтрольныеПроверки_Строки] AS КонтрольныеПроверки_Строки
	|	ON КонтрольныеПроверкиТ.ид_строки = КонтрольныеПроверки_Строки.ид
	|WHERE
	|	КонтрольныеПроверкиТ.ДатаПроверки = '%1'
	|	AND КонтрольныеПроверки_Строки.Проверка = '00005'
	|	AND КонтрольныеПроверки_Строки.УтвРезультат = 'невыполнена'
	|", Формат(ТекущаяДата(),"ДФ=yyyyMMdd"));
	
	стрРМ = "";
	ВыборкаРегионы = Справочники.Регионы.Выбрать();
	
	Пока ВыборкаРегионы.Следующий() Цикл
		Соединение = SQL.ПодключитьсяКСУПцентр(ВыборкаРегионы.Ссылка, "raz_ext_ref");
		Результат = SQL.ВыполнитьЗапросВыборки(Соединение, ТекстЗапроса, Отказ, ТекстОшибки);
		стрРМ = стрРМ + Символы.ПС + СтрСоединить(Результат.ВыгрузитьКолонку(0), Символы.ПС);
	КонецЦикла;
	
	НомераККМ = СтрРазделить(стрРМ, Символы.ПС, Ложь);
	
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РабочиеМеста.Ссылка КАК Ссылка,
	|	РабочиеМеста.Наименование КАК Наименование
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.НомерККМ В(&НомераККМ) И Не ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	РабочиеМеста.ИнформационнаяБаза.Код,
	|	РабочиеМеста.Наименование");
	Запрос.УстановитьПараметр("НомераККМ", НомераККМ);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеКонтрольныхПроверок(Команда)
	ТаблицаРабочихМест.Очистить();
	ТаблицаТТ.Очистить();
	Дерево = ДанныеФормыВЗначение(ДеревоРМ, Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();
	МассивРМ = РМсНевыполненнойПроверкой();	
	Для Каждого РМ Из МассивРМ Цикл
		Нов = ТаблицаРабочихМест.Добавить();
		Нов.РабочееМесто = РМ;
		Нов.ИБ = РМ.ИнформационнаяБаза;
		Хост = Сеть.ИмяХостаРМ(РМ, Истина);
		Нов.ПутьКлокальнойКопии = СтрШаблон("\\%1\C$\Sup_kkm\1cv8.1CD", Хост);
	КонецЦикла;
	
	МассивИБ = МассивИБ(); 
	
	//Состояние("Связываюсь с серверами ТТ " + " (" + МассивИБ.Количество() + ")... "+ Символы.ПС + СтрСоединить(МассивИБ),,СтрСоединить(МассивИБ),БиблиотекаКартинок.ДлительнаяОперация48);
	
	ПодключитьОбработчикОжидания("ОбработатьСледующееРМ",0.4, Истина);
КонецПроцедуры

&НаСервере
Функция МассивИБ() Экспорт
	локТаблицаРабочихМест = ТаблицаРабочихМест.Выгрузить();
	локТаблицаРабочихМест.Свернуть("ИБ");
	Возврат локТаблицаРабочихМест.ВыгрузитьКолонку("ИБ");	
КонецФункции

&НаСервере
Функция СтрокаТТ(МассивИБ)
	Нов = Неопределено;
	Для Каждого ИБ Из МассивИБ Цикл
		Нов = ТаблицаТТ.Добавить();
		Нов.ИБ = ИБ;
		Хост = Нов.ИБ.СерверХост;
		Сеть.ПодключитьШару(Хост,Истина);
		Нов.ПутьКлокальнойКопии = СтрШаблон("\\%1\C$\Sup_kkm\1cv8.1CD", Хост);
		Файл = Новый Файл(Нов.ПутьКлокальнойКопии);
		Если Файл.Существует() Тогда
			Нов.КаталогДоступен = Истина;
			Нов.ДатаФайла = Файл.ПолучитьВремяИзменения();
			Нов.РазмерФайла = Файл.Размер()/1000000;
			Если Нов.ДатаФайла < НачалоДня(ТекущаяДата()) Тогда
				Нов.ОписаниеПроблемы = "Локальная копия не актуальна. Дата файла " + Нов.ДатаФайла;				
			ИначеЕсли Нов.РазмерФайла < 100 Тогда
				Нов.ОписаниеПроблемы = "Файл не является файлом локальной копии. Размер файла должен быть больше 100 MB";					
			КонецЕсли;
		Иначе
			Нов.ОписаниеПроблемы = "Каталог локальной копии недоступен. Возможно сервер выключен.";
		КонецЕсли;
		
		
	КонецЦикла;
	Рез = Новый Структура("ИБ, КаталогДоступен, РазмерФайла, ДатаФайла, ОписаниеПроблемы,ПутьКлокальнойКопии");
	ЗаполнитьЗначенияСвойств(Рез, Нов);
	Возврат Рез;
	
КонецФункции


&НаКлиенте
Процедура ОбработатьСледующееРМ() Экспорт
	ВсеОбработаны = Истина;
	Для Каждого Т Из ТаблицаРабочихМест Цикл
		Если Т.Обработан Тогда
			Продолжить;
		КонецЕсли;
		ВсеОбработаны = Ложь;
		РМ = Т.РабочееМесто;
		Состояние("Обрабатывается РМ " + РМ,,,БиблиотекаКартинок.ДлительнаяОперация48);
		Прервать;
	КонецЦикла;
	Если ВсеОбработаны Тогда
		Возврат;
	КонецЕсли;	
	ТД = Элементы.ДеревоРМ.ТекущиеДанные;
	Если ТД <> Неопределено Тогда
		ТекИБ = ТД.ИБ;
		ТекРМ = ТД.РабочееМесто;
	Иначе
		ТекИБ = Неопределено;
		ТекРМ = Неопределено;
	КонецЕсли;
	Если ОбработатьСледующееРМнаСервере() Тогда
		ПодключитьОбработчикОжидания("ОбработатьСледующееРМ",0.4, Истина);
	КонецЕсли;
	ЭлементыДерева = ДеревоРМ.ПолучитьЭлементы();
	Если ТД = Неопределено И ЭлементыДерева.Количество() Тогда
		
		Элементы.ДеревоРМ.ТекущаяСтрока = ЭлементыДерева[0].ПолучитьИдентификатор();
		ТД = Элементы.ДеревоРМ.ТекущиеДанные;
		
	КонецЕсли;
	
	Если ТД <> Неопределено Тогда
		ТекИБ = ТД.ИБ;
		ТекРМ = ТД.РабочееМесто;
	Иначе
		ТекИБ = Неопределено;
		ТекРМ = Неопределено;
	КонецЕсли;
		
	Если ТД <> Неопределено Тогда
		
				Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			
			ИД = ЭлементДерева.ПолучитьИдентификатор();
			Элементы.ДеревоРМ.Развернуть(ИД,Истина);

			ДС = Элементы.ДеревоРМ.ДанныеСтроки(ИД);
			Если ДС.ИБ = ТекИБ И Не ЗначениеЗаполнено(ТекРМ) Тогда
				Элементы.ДеревоРМ.ТекущаяСтрока = ИД;
			ИначеЕсли  ДС.ИБ = ТекИБ Тогда
				ЭлементыПоТТ = ЭлементДерева.ПолучитьЭлементы();
				Для Каждого ЭлементДереваПоТТ Из ЭлементыПоТТ Цикл
					ИД = ЭлементДереваПоТТ.ПолучитьИдентификатор();
					ДС = Элементы.ДеревоРМ.ДанныеСтроки(ИД);
					Если ДС.ИБ = ТекИБ И ДС.РабочееМесто = ТекРМ Тогда
						Элементы.ДеревоРМ.ТекущаяСтрока = ИД;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли
КонецПроцедуры

&НаСервере
Функция ОбработатьСледующееРМнаСервере()
	Результат = Ложь;	
	Дерево = ДанныеФормыВЗначение(ДеревоРМ, Тип("ДеревоЗначений"));   //:Дерево = Новый ДеревоЗначений;
	Для Каждого Т Из ТаблицаРабочихМест Цикл
		Если Т.Обработан Тогда
			Продолжить;
		КонецЕсли;
		 
		СтрокиТТ = ТаблицаТТ.НайтиСтроки(Новый Структура("ИБ", Т.ИБ));
		Если СтрокиТТ.Количество() Тогда
			СтрокаТТ = СтрокиТТ[0];
			СтрокаТТДерево = Дерево.Строки.НайтиСтроки(Новый Структура("ИБ", Т.ИБ))[0];
		Иначе
			СтрокаТТ = СтрокаТТ(Массив(Т.ИБ));			
			СтрокаТТДерево = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТТДерево, СтрокаТТ);
		КонецЕсли;
		
		РМ = Т.РабочееМесто;
		Хост = Сеть.ИмяХостаРМ(РМ, Истина);
		Т.ПутьКлокальнойКопии = СтрШаблон("\\%1\c$\sup_kkm\1Cv8.1CD", Хост);
		Сеть.ПодключитьШару(Хост);
		Файл = Новый Файл(Т.ПутьКлокальнойКопии);
		Если Файл.Существует() Тогда
			Т.КаталогДоступен = Истина;
			Т.ДатаФайла = Файл.ПолучитьВремяИзменения();
			Т.РазмерФайла = Файл.Размер()/1000000;
			Если Т.ДатаФайла < НачалоДня(ТекущаяДата()) Тогда
				Т.ОписаниеПроблемы = "Локальная копия не актуальна. Дата файла " + Т.ДатаФайла;				
			ИначеЕсли Т.РазмерФайла < 100 Тогда
				Т.ОписаниеПроблемы = "Файл не является файлом локальной копии. Размер файла должен быть больше 100 MB";					
			КонецЕсли;
		Иначе
			Т.ОписаниеПроблемы = "Каталог локальной копии недоступен. Возможно РМ выключено.";
		КонецЕсли;
		
		СтрокаДерево = СтрокаТТДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДерево, Т);
		Т.Обработан = Истина;
		Результат = Истина;
		Прервать;
	КонецЦикла;
	
	ЗначениеВДанныеФормы(Дерево, ДеревоРМ);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ДеревоРМПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработатьСледующееРМ",1, Истина);
КонецПроцедуры
