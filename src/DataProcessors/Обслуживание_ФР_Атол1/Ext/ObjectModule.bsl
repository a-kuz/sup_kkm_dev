
Перем ПараметрыТО Экспорт;   // Параметры торгового оборудования.
Перем Результат Экспорт;     // Результат выполнения действия.
Перем DRV Экспорт;           // Драйвер
Перем УровеньЛогирования Экспорт; // уровень логирования действий драйвера 0 - самый низкий ....

Перем Пароль, ИгнорироватьОбщийПароль;
Перем КодыМоделей;
Перем ТаблицаПараметрыСтроки;
Перем МаксДлинаСтроки;

#Если Клиент Тогда

// Производит инициализацию торгового оборудования.
//
Процедура Инициализация() Экспорт
	
	Если НЕ ЗагрузитьДрайвер() Тогда
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Ошибка загрузки драйвера!";
		Результат.Подробно	= "Программе не удалось загрузить драйвер ККМ...";
		Возврат;
	КонецЕсли; 
	
	
	//ПрочитатьПараметр("НеФискальныйРежим"	, Ложь );
	//ПрочитатьПараметр("PortNumber"			, 1 );
	//ПрочитатьПараметр("BaudRate"			, 18 );
	//ПрочитатьПараметр("MachineName"			, "" );
	//ПрочитатьПараметр("WriteLogFile"		, Ложь );
	//ПрочитатьПараметр("UseAccessPassword"	, Ложь );
	//ПрочитатьПараметр("AccessPassword"		, "" );
	//ПрочитатьПараметр("ФлагОбщийПароль"		, Ложь );
	//ПрочитатьПараметр("ОбщийПароль"			, "" );
	//ПрочитатьПараметр("ИдУстройства"		, "" );
	//ПрочитатьПараметр("PrintTax"			, 1 );
	//
	//Если СокрП(ТО.КодВида)="ПРН" Тогда
	//	ПрочитатьПараметр("ФлагПечатьПД"	, Ложь );
	//	ПрочитатьПараметр("КолвоСтрокНаЛист", 30 );
	//	Если КолвоСтрокНаЛист=0 Тогда
	//		КолвоСтрокНаЛист=30;
	//	КонецЕсли;
	//	ПрочитатьПараметр("СимволовВСтроке"	, 32 );
	//	ПрочитатьПараметр("SlipDocTopMargin", 0 );
	//	ПрочитатьПараметр("SlipDocLeftMargin", 0 );
	//КонецЕсли;
	
	КодыМоделей = Новый Структура;
	КодыМоделей.Вставить("ФеликсРК01"		,24);
	КодыМоделей.Вставить("ФеликсРФ02"		,14);
	КодыМоделей.Вставить("Феликс02К"		,15);
	КодыМоделей.Вставить("Феликс3СК"		,27);
	КодыМоделей.Вставить("ТриумФ"			,13);
	КодыМоделей.Вставить("ТОРНАДО"			,20);
	КодыМоделей.Вставить("Меркурий114Ф"		,17);
	КодыМоделей.Вставить("МеркурийСистемаФ"	,17);
	КодыМоделей.Вставить("POSPrintFP410K"	,101);
	КодыМоделей.Вставить("ПРИМ88ТК"			,104);
	КодыМоделей.Вставить("ПРИМ08ТК"			,105);
	КодыМоделей.Вставить("СП101ФРК"			,106);
	КодыМоделей.Вставить("FPrint02K"		,30);
	КодыМоделей.Вставить("FPrint03K"		,31);
	КодыМоделей.Вставить("FPrint88K"		,32);
	КодыМоделей.Вставить("FPrint5200K"		,35);
	КодыМоделей.Вставить("FPrint55"			,47);
	КодыМоделей.Вставить("FPrint22K"		,52);
	КодыМоделей.Вставить("ШтрихФРК01"		,25);
	КодыМоделей.Вставить("ШтрихФРФ02"		,18);
	КодыМоделей.Вставить("ШтрихФРФ03"		,18);
	//	КодыМоделей.Вставить("Штрих950К"		,00);
	КодыМоделей.Вставить("ШтрихМиниФРК"		,28);
	КодыМоделей.Вставить("ШтрихКомбо"		,107);
	КодыМоделей.Вставить("ШтрихМФРК"		,110);
	КодыМоделей.Вставить("ШтрихLightФРК"	,113);
	КодыМоделей.Вставить("ЭлвесМиниФРФ"		,19);
	КодыМоделей.Вставить("ЭлвесФРК"		    ,26);
	КодыМоделей.Вставить("MStarTK"			,111);
	КодыМоделей.Вставить("Bixolon01K"	    ,33);
	КодыМоделей.Вставить("ПиритФР01К"		,114);
	
	КодыМоделей.Вставить("АТОЛ25Ф"		,57);
	КодыМоделей.Вставить("АТОЛ77Ф"		,69);
    	
	ЗаполнитьПараметрыСтроки();
	
	ПрочитатьПараметр("AccessPassword","0");
	ПрочитатьПараметр("BaudRate",1);
	ПрочитатьПараметр("Model",КодыМоделей[то.КодМодели]);
	ПрочитатьПараметр("Password","30");
	ПрочитатьПараметр("PortNumber",1000 + PortNumber);
	ПрочитатьПараметр("PrintBarCodeText",Ложь);
	ПрочитатьПараметр("PrintTax",Истина);
	ПрочитатьПараметр("Scale",200);
	ПрочитатьПараметр("ScaleQR",300);
	ПрочитатьПараметр("ИдУстройства", "" );
	ПрочитатьПараметр("MachineName"			, "" );
	
	ПараметрыТО.Model = КодыМоделей[то.КодМодели];
	// удалим все что есть
	Отключить();
	
	Подключить();
	//ТО.Параметры = ЗначениеВСтрокуВнутр(ПараметрыТО);
	//ТО.Записать();
	
КонецПроцедуры

// Загружает драйвер ТО.
//
// Возвращаемое значение:
//  Истина - драйвер загружен, ложь - нет.
//
Функция ЗагрузитьДрайвер()
	
	Логирование(1,"Инициализация драйвера","Начало");
	Если глТорговоеОборудование.Свойство("FPrnM45",DRV) Тогда
		Возврат Истина;
	КонецЕсли;
	Попытка
		ПодключитьВнешнююКомпоненту("AddIn.FPrnM8");
		//ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "\FPrnM1C.dll");
	    DRV = Новый ("AddIn.FPrnM8");
	Исключение
		Инфо = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(Инфо);
		Логирование(0,"Инициализация драйвера","Ошибка - " + Инфо);
		Возврат Ложь;
	КонецПопытки;
	
	DRV.LockDevices = 1;
	
	Если DRV <> Неопределено Тогда
		глТорговоеОборудование.Вставить("FPrnM45", DRV);
		DRV = глТорговоеОборудование["FPrnM45"];
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Выполняет чтение параметра ТО.
//
// Параметры:
//  ИмяПараметра        - имя параметра,
//  ЗначениеПоУмолчанию - значение по умолчанию для данного параметра.
//
// Возвращаемое значение:
//  Значение параметра или значение по умолчанию
//
Процедура ПрочитатьПараметр(ИмяПараметра,ЗначениеПоУмолчанию)
	
	Если НЕ ПараметрыТО.Свойство(ИмяПараметра) Тогда
		ПараметрыТО.Вставить(ИмяПараметра,ЗначениеПоУмолчанию);
	КонецЕсли; 
	
	Попытка
		Если ИмяПараметра = "PortNumber" ТОгда
			ЭтотОбъект[ИмяПараметра] = ?(ПараметрыТО[ИмяПараметра]> 1000,ПараметрыТО[ИмяПараметра] - 1000,ПараметрыТО[ИмяПараметра]);
		Иначе 
			ЭтотОбъект[ИмяПараметра] = ПараметрыТО[ИмяПараметра];
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Выполняет действие с ТО.
//
// Параметры:
//  Действие - имя действия,
//  ПараметрыДействия - произвольный набор параметров
//

// Выполняет действие с ТО.
//
// Параметры:
//  Действие - имя действия,
//  ПараметрыДействия - произвольный набор параметров
//
Процедура ВыполнитьДействие( Действие, ПараметрыДействия=Неопределено ) Экспорт
	
	Ответ = Ложь;
	ПараметрыДействия.Свойство("Пароль",Пароль);
	
	Если НЕ ПараметрыДействия.Свойство("ИгнорироватьОбщийПароль",ИгнорироватьОбщийПароль) Тогда
		ИгнорироватьОбщийПароль = Ложь;
	КонецЕсли; 
	
	ВхПараметры = Новый Структура;
	ВыхПараметры = Новый Структура;
	
	Если Действие = "Подключить" Тогда
		//Подключить();
		//Отключить();
		Ответ = Истина;
	ИначеЕсли Действие = "Отключить" Тогда
		Отключить();
		Ответ = Истина;		
	ИначеЕсли Действие = "Регистрация" ИЛИ Действие = "Печать" Тогда
		ТаблицаЗадания = ПараметрыДействия.ТаблицаЗадания;
		КолвоКопий = 1;
		ПараметрыДействия.Свойство("КолвоКопий", КолвоКопий);
		Если КолвоКопий = Неопределено Или  КолвоКопий = 0 Тогда
			КолвоКопий = 1;
		КонецЕсли;
		МассивСтрок = Новый Массив;
		Для Инд = 1 По КолвоКопий Цикл
			Для Каждого Т Из ТаблицаЗадания Цикл
				Если Т.ТипДанных = "Строка" Тогда
					Если Найти(Т.Параметры, "Лево") Тогда
						Выравнивание = 0;
					ИначеЕсли Найти(Т.Параметры, "Право") Тогда
						Выравнивание = 2;
					Иначе
						Выравнивание = 1;
					КонецЕсли;
					Если Т.Данные = "СтрЧерта" Тогда
						Т.Данные = ДополнитьСтроку("",48,,"_");
					КонецЕсли;
					МассивСтрок.Добавить(ДополнитьСтроку(Т.Данные,48,Выравнивание));
				ИначеЕсли Т.ТипДанных = "Внесение" Тогда
					Ответ = Внесение(Т.Параметры.Summ, ВыхПараметры);
				ИначеЕсли Т.ТипДанных = "Выплата" Тогда
					Ответ = Выемка(Т.Параметры.Summ, ВыхПараметры);
				КонецЕсли;
			КонецЦикла;
			Если Инд <> КолвоКопий Тогда
				МассивСтрок.Добавить("[отрезка]");
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыДействия.Свойство("Подвал") Тогда
			Для Каждого Т Из ПараметрыДействия.Подвал Цикл
				МассивСтрок.Добавить(Т);
			КонецЦикла;
		КонецЕсли;
		
		Если МассивСтрок.Количество() Тогда
			Ответ = ВыполнитьКоманду("ПечатьТекста", Новый Структура("Строки", МассивСтрок), ВыхПараметры);
		КонецЕсли;
		



		
	ИначеЕсли Действие = "Печать" Тогда
		КолвоКопий = 1;
		Если НЕ ПараметрыДействия.Свойство("КолвоКопий",КолвоКопий) Тогда
			КолвоКопий = 1;
		КонецЕсли;
		
		Если ФлагПечатьПД Тогда
			ПечатьПД( ПараметрыДействия.ТаблицаЗадания, КолвоКопий );
		Иначе
			Печать( ПараметрыДействия.ТаблицаЗадания, КолвоКопий );
		КонецЕсли;





		


		Отключить();
		
	ИначеЕсли Действие="Отчет" Тогда
		Если ПараметрыДействия.ТипОтчета = "X" Тогда
			Ответ = ВыполнитьКоманду("НапечататьОтчетБезГашения",ВхПараметры,ВыхПараметры);
		ИначеЕсли ПараметрыДействия.ТипОтчета = "Z" Тогда
			Ответ = ВыполнитьКоманду("ЗакрытьСмену", ВхПараметры, ВыхПараметры);
		Иначе
			ПолучитьОтчет(ПараметрыДействия.ТипОтчета);
		КонецЕсли;
	ИначеЕсли Действие="СинхронизироватьВремя" Тогда
		СинхронизироватьВремя();
		
	ИначеЕсли Действие="ОткрытьСмену" Тогда
		ОткрытьСмену(ПараметрыДействия, ВыхПараметры);

	Иначе
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Неизвестная команда!";
		Результат.Подробно	= "Команда """+Действие+""" не определена для "+ТО.Наименование;
		
	КонецЕсли;
	
	Результат.Вставить("Ошибка", Не Ответ);
	Если Результат.Ошибка Тогда
		Результат.Вставить("Описание", "Ошибка " + Действие);
		Если ВыхПараметры.Свойство("ОписаниеОшибки") Тогда
			Результат.Вставить("Подробно", ПолучитьСтрокуИзМассива(ВыхПараметры.ОписаниеОшибки));
		КонецЕсли;                                                                                       		
	КонецЕсли; 

	
КонецПроцедуры

#Область ФункцийРаботыСККТ

Функция ОткрытьЧек(ВходныеПараметры,ВыходныеПараметры)
	
	Логирование(1,"Открытие чека","Начало");
	
	Логирование(0,"Открытие чека","Входные параметры - " + ПреобразоватьВJSON(ВходныеПараметры));
	
	Ответ  = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;
	Электронно = 1;
	
	Если не ВходныеПараметры.Свойство("ТипЧека") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: не указан тип чека");
		Логирование(0,"Открытие чека","Ошибка входных параметров: не указан тип чека");
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("ФискальныйЧек") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: не указан тип фискальности чека");
		Логирование(0,"Открытие чека","Ошибка входных параметров: не указан тип фискальности чека");
		Возврат Ложь;
	КонецЕсли;
	ТипЧека = ВходныеПараметры.ТипЧека;
	ФискальныйЧек = ВходныеПараметры.ФискальныйЧек;	
	Если ВходныеПараметры.Свойство("Электронно") Тогда
		Электронно = ВходныеПараметры.Электронно;
	КонецЕсли;
		
	
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	DRV.Пароль = "30";
	
	DRV.Режим = 1;
	DRV.УстановитьРежим();
	
	DRV.НовыйДокумент();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Открытие чека","Ошибка - " + DRV.ОписаниеРезультата);
	Иначе
		
		Если DRV.СменаОткрыта = 0 Тогда
			Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			Иначе
				Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					ош = Новый Массив;
					ВыходныеПараметры.ОписаниеОшибки = ош;
				КонецЕсли;
			КонецЕсли;
			ВыходныеПараметры.ОписаниеОшибки.Добавить("Смена не открыта");
			Логирование(0,"Открытие чека","Ошибка - Смена не открыта");
			Возврат Ложь;
		КонецЕсли;
		//НомерЧека = DRV.НомерЧека;
		//НомерСмены = DRV.Смена;
		DRV.НомерРегистра = 53;
		DRV.ПолучитьРегистр();
		
		//ДанныеПоСмене = DRV.Count;
		номерЧека = DRV.Count + 1;
		НомерСмены = DRV.Смена;
		
		
		DRV.ТипЧека = ?(ТипЧека, 2, 1);
		DRV.РежимЧека = Электронно;
		
		DRV.ОткрытьЧек();
		Ответ = ?(DRV.Результат = 0, истина, ложь);
		Если Не Ответ Тогда
			Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			Иначе
				Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					ош = Новый Массив;
					ВыходныеПараметры.ОписаниеОшибки = ош;
				КонецЕсли;
			КонецЕсли;
			ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
			Логирование(0,"Открытие чека","Ошибка - " + DRV.ОписаниеРезультата);
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ Тогда
		ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);
		ВыходныеПараметры.Вставить("НомерЧека",НомерЧека);
		Логирование(1,"Открытие чека","Окончание - " + ПреобразоватьВJSON(ВыходныеПараметры));
	КонецЕсли;
	//
	//Ответ = DRV.ОткрытьЧек(ПараметрыТО.ИдУстройства,ФискальныйЧек,ТипЧека,Истина,НомерЧека,НомерСмены);
	//Если не Ответ Тогда 
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить("");
	//	DRV.ПолучитьОшибку(ВыходныеПараметры[1]);
	//КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ОтменитьЧек(ВыходныеПараметры) 

	Логирование(1,"Отмена чека","начало");
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	DRV.Пароль = "0";
	
	DRV.ОтменаЧека();
	Если DRV.Результат <> 0 Тогда
		Ответ = Ложь;
		//ВыходныеПараметры.Очистить();
		//ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.ОтменитьЧек>. " + ОписаниеОшибки());
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Отмена чека","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ответ;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ЗакрытьЧек(ВыходныеПараметры)
	Ответ = Истина;
	СуммаНал = 0;
	СуммаБНал = 0;
	Если не DRV.ЗакрытьЧек(ИдУстройства, СуммаНал, СуммаБНал) Тогда
		Ответ = Ложь;
		ВыходныеПараметры.Добавить("");
		DRV.ПолучитьОшибку(ВыходныеПараметры[ВыходныеПараметры.Количество()-1]);
		ОтменитьЧек(ВыходныеПараметры);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция НапечататьОтчетСГашением(ВыходныеПараметры)
	Ответ = Истина;
	Ответ = DRV.НапечататьОтчетСГашением(ИдУстройства);
	Если не Ответ Тогда
		ВыходныеПараметры.Добавить("");
		DRV.ПолучитьОшибку(ВыходныеПараметры[1]);
		ОтменитьЧек(ВыходныеПараметры);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция НапечататьОтчетБезГашения(ВыходныеПараметры)
	
	Ответ = Истина;
	Логирование(1,"Отчет без гашения","Начало");
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	
	DRV.Режим = 2;
	DRV.Пароль = ПараметрыТО.Password;
	DRV.УстановитьРежим();
	
	Если DRV.Результат <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Отчет без гашения","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	DRV.ТипОтчета = 2;
	DRV.Отчет();
	
	Если DRV.Результат <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Отчет без гашения","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ФисказизацияЧека(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	ОтветПоОперации = Истина;
	
	ПоследнийФД = 0;
	АдресКлиента = "";
	
	Логирование(1,"Фискализация чека","Начало");
	
	Логирование(0,"Фискализация чека","входные параметры - " + ПреобразоватьВJSON(ВходныеПараметры));
	
	МассивСтрокЧека = Новый Массив;
	МассивСтрокОплаты = Новый Массив;
	ТипЧека = Ложь;
	
	Если не ВходныеПараметры.Свойство("СтрокиЧека") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: нет строк чека");
		Логирование(0,"Фискализация чека","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("СтрокиОплат") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: нет строк оплаты");
		Логирование(0,"Фискализация чека","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("ТипЧека") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: не указан тип чека");
		Логирование(0,"Фискализация чека","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	Кассир = "";
	Если ВходныеПараметры.Свойство("Кассир") Тогда
		Кассир = Лев(ВходныеПараметры.Кассир,63);
	КонецЕсли;
	СуммаСкидкиНаЧек = 0;
	Если ВходныеПараметры.Свойство("СуммаСкидкиНаЧек") Тогда
		СуммаСкидкиНаЧек = ВходныеПараметры.СуммаСкидкиНаЧек;
	КонецЕсли;
	Электронно = 1;
	Если ВходныеПараметры.Свойство("Электронно") Тогда
		Электронно = ВходныеПараметры.Электронно;
	КонецЕсли;
	
	МассивСтрокЧека = ВходныеПараметры.СтрокиЧека;
	МассивСтрокОплаты = ВходныеПараметры.СтрокиОплат;
	Если МассивСтрокОплаты.Количество() = 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: Ошибка фискализации. Обратитесь в ОТК");
		Логирование(0,"Фискализация чека","Ошибка фискализации. Обратитесь в ОТК");
		Возврат Ложь;
	КонецЕсли;
	ТипЧека = ВходныеПараметры.ТипЧека;
	СуммаЧека = 0;
	
	// проверим сумму скидки на чек 
	Логирование(0,"Фискализация чека","входные параметры - СуммаСкидкиНаЧек вход " + СуммаСкидкиНаЧек);
	ПредварительнаяСуммаСкидкиНаЧек = 0;
	СуммаПоСтрокам = 0;
	Для инд = 0 по МассивСтрокЧека.Количество() - 1 Цикл
		ПозицияЧека = МассивСтрокЧека[инд];
		Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
			Разность = Окр(ПозицияЧека.Количество * ПозицияЧека.Цена,2) - Окр(ПозицияЧека.Сумма,2);
			СуммаПоСтрокам = СуммаПоСтрокам + Окр(ПозицияЧека.Количество * ПозицияЧека.Цена,2);
			Если Разность <> 0 Тогда
				ПредварительнаяСуммаСкидкиНаЧек = ПредварительнаяСуммаСкидкиНаЧек + Разность;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СуммаОплата = 0;
	Для индекс = 0 по МассивСтрокОплаты.Количество() - 1 Цикл
		ПозицияОплаты = МассивСтрокОплаты[индекс];
		СуммаОплаты = ?(ПозицияОплаты.Свойство("Сумма") , ПозицияОплаты.Сумма, 0);
		СуммаОплата = СуммаОплата + СуммаОплаты;
	КонецЦикла;
	Если СуммаОплата > СуммаПоСтрокам Тогда
		Дельта = СуммаОплата - СуммаПоСтрокам;
	Иначе
		Дельта = СуммаПоСтрокам - СуммаОплата;
	КонецЕсли;
	Логирование(0,"Фискализация чека","входные параметры - СуммаСкидкиНаЧек выход " + ПредварительнаяСуммаСкидкиНаЧек);
	Логирование(0,"Фискализация чека","входные параметры - СуммаСкидкиНаЧек Дельта " + Дельта);
	Если Дельта < 1 и ПредварительнаяСуммаСкидкиНаЧек < 1 
		и Дельта >= 0.01 и ПредварительнаяСуммаСкидкиНаЧек >= 0.01 Тогда // можно применить скидку на чек
		СуммаСкидкиНаЧек = ПредварительнаяСуммаСкидкиНаЧек;
	КонецЕсли;
	
	// получим режим работы ККТ{
	ЕНВД = ложь;
	DRV.Режим = 4;
	DRV.УстановитьРежим();
	
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Ответ Тогда
		DRV.Таблица = 2;
		DRV.Ряд = 1;
		DRV.Поле = 110;
		DRV.ПолучитьНастройки();
		Ответ = ?(DRV.Результат = 0, истина, ложь);
		Если Ответ Тогда
			Попытка
				ЧислоБиты = Число((СокрЛП(DRV.Строка)));
			Исключение
				ЧислоБиты = 0;
			КонецПопытки;
			Если Цел(ЧислоБиты/8) >= 1 Тогда
				ЕНВД = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// }получим режим работы ККТ
	
	
	
	ВхСтрук = Новый Структура;
	ВхСтрук.Вставить("ТипЧека",ТипЧека);
	ВхСтрук.Вставить("ФискальныйЧек",Истина);
	ВхСтрук.Вставить("Электронно",Электронно); // 0 - не печатается, 1 - печатается
	//ВхСтрук.Вставить("Электронно",1); // 0 - не печатается
	
	СоответТиповШК = Новый Соответствие;
	СоответТиповШК.Вставить("EAN8",3);
	СоответТиповШК.Вставить("EAN13",2);
	СоответТиповШК.Вставить("PDF417",10);
	СоответТиповШК.Вставить("QR",84);
	
	ВыхСтрук = Новый Структура;
	
	DRV.НомерРегистра = 52;
	DRV.ПолучитьРегистр();
	
	ПоследнийФД = DRV.НомерДокумента;
	//// получим последний номер чека
	//DRV.НомерРегистра = 53;
	//DRV.ПолучитьРегистр();
	//номерЧекаДо = DRV.Count + 1;
	//// получим последний номер чека
	
	
	Логирование(0,"Фискализация чека","Открытие чека вх параметры " + ПреобразоватьВJSON(ВхСтрук));
	
	Ответ = ОткрытьЧек(ВхСтрук,ВыхСтрук);
	
	//ВхСтрук.Вставить("ТелефонКлиента","89150000000");
	//ВхСтрук.Вставить("EmailКлиента","test@test.ru");
	Если ВходныеПараметры.Свойство("EmailКлиента") Тогда
		АдресКлиента = ВходныеПараметры.EmailКлиента;
	КонецЕсли;
	Если ВходныеПараметры.Свойство("ТелефонКлиента") и не ЗначениеЗаполнено(АдресКлиента) Тогда
		АдресКлиента = ВходныеПараметры.ТелефонКлиента;
	КонецЕсли;
	
	
	Логирование(0,"Фискализация чека","Открытие чека вх параметры " + ПреобразоватьВJSON(ВыхСтрук));
	
	Если Не Ответ Тогда
		Логирование(0,"Фискализация чека","Открытие чека ошибка - " + ПреобразоватьВJSON(ВыхСтрук));
		ОтменитьЧек(ВыходныеПараметры);
		Возврат Ответ;
	КонецЕсли;
	НомерЧека = ВыхСтрук.НомерЧека;
	НомерСмены = ВыхСтрук.НомерСмены;
	
	Если МассивСтрокЧека.Количество() <> 0 Тогда
		
		Если ЗначениеЗаполнено(АдресКлиента) ТОгда
			DRV.AttrNumber = 1008;
			DRV.AttrValue = АдресКлиента;
			DRV.ЗаписатьРеквизит();
		КонецЕсли;
		// кассир
		DRV.AttrNumber = 1021;
		DRV.AttrValue = Кассир;
		DRV.ЗаписатьРеквизит();
		
		
		Для инд = 0 по МассивСтрокЧека.Количество() - 1 Цикл
			ПозицияЧека = МассивСтрокЧека[инд];
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
			
				DRV.РасширеннаяРегистрация = ложь;
				DRV.ПереносТекста = 2;
			
				DRV.Наименование = Лев(ПозицияЧека.Наименование,48);
				DRV.Количество = ПозицияЧека.Количество;
				DRV.Цена = ПозицияЧека.Цена;
				DRV.Секция = 1;
				
				Если ЕНВД Тогда
					DRV.TaxTypeNumber  = 4;
				Иначе
					DRV.TaxTypeNumber = ПолучитьИндексНалога(ПозицияЧека.СтавкаНДС);
				КонецЕсли;
				// тестово
				DRV.RecFont = 2;
				// тестово
				
				Если ТипЧека ТОгда
					//DRV.EnableCheckSumm = 0;
					DRV.Возврат();
				Иначе 
					DRV.Регистрация();
				КонецЕсли;
				
				Ответ = ?(DRV.Результат = 0, истина, ложь);
				Если Ответ тогда
					
				Иначе
					ОтветПоОперации = Ложь;
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
					Логирование(0,"Фискализация чека",?(ТипЧека,"Возврат ","Регистрация ") + " ошибка - " + DRV.ОписаниеРезультата);
					
					//DRV.НомерРегистра = 52;
					//DRV.ПолучитьРегистр();
					//
					//ВрПоследнийФД = DRV.НомерДокумента;
					//Если ВрПоследнийФД > ПоследнийФД ТОгда ///???????? что-то улетело в ФД
					//	Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
					//		ош = Новый Массив;
					//		ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					//	Иначе
					//		Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					//			ош = Новый Массив;
					//			ВыходныеПараметры.ОписаниеОшибки = ош;
					//		КонецЕсли;
					//	КонецЕсли;
					//	ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
					//	Логирование(0,"Фискализация чека",?(ТипЧека,"Возврат ","Регистрация ") + "НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
					//КонецЕсли;
					
					ОтменитьЧек(ВыходныеПараметры);
					
					DRV.НомерРегистра = 52;
					DRV.ПолучитьРегистр();
					
					Если ПоследнийФД <> DRV.НомерДокумента Тогда
						Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
							ош = Новый Массив;
							ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
						Иначе
							Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
								ош = Новый Массив;
								ВыходныеПараметры.ОписаниеОшибки = ош;
							КонецЕсли;
						КонецЕсли;
						ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
						Логирование(0,"Фискализация чека",?(ТипЧека,"Возврат ","Регистрация ") + "НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
					КонецЕсли;
					Возврат Ответ;
				КонецЕсли;
			ИначеЕсли ПозицияЧека.Свойство("Текст") Тогда
				СтрокаТекста = ПозицияЧека.Текст;
				МаксДлинаСтроки = 48;
				Если СтрДлина(СтрокаТекста) > МаксДлинаСтроки Тогда
					Пока СтрДлина(СтрокаТекста) > МаксДлинаСтроки Цикл
						DRV.Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
						//DRV.ПечатьСтроки();
						DRV.ПечатьПоля();
						СтрокаТекста = Сред(СтрокаТекста, МаксДлинаСтроки + 1);
					КонецЦикла;
					
					DRV.Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
					//DRV.ПечатьСтроки();
					DRV.ПечатьПоля();
				Иначе
					DRV.Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
					DRV.ПечатьПоля();
				КонецЕсли;
				Ответ = ?(DRV.Результат = 0, истина, ложь);
				Если не Ответ Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
					Логирование(0,"Фискализация чека","Текстовая строка ошибка - " + DRV.ОписаниеРезультата);
					
					//DRV.НомерРегистра = 52;
					//DRV.ПолучитьРегистр();
					//
					//ВрПоследнийФД = DRV.НомерДокумента;
					//Если ВрПоследнийФД > ПоследнийФД ТОгда ///???????? что-то улетело в ФД
					//	Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
					//		ош = Новый Массив;
					//		ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					//	Иначе
					//		Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					//			ош = Новый Массив;
					//			ВыходныеПараметры.ОписаниеОшибки = ош;
					//		КонецЕсли;
					//	КонецЕсли;
					//	ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
					//	Логирование(0,"Фискализация чека","Текстовая строка НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
					//КонецЕсли;
					
					ОтменитьЧек(ВыходныеПараметры);
					
					DRV.НомерРегистра = 52;
					DRV.ПолучитьРегистр();
					
					Если ПоследнийФД <> DRV.НомерДокумента Тогда
						Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
							ош = Новый Массив;
							ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
						Иначе
							Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
								ош = Новый Массив;
								ВыходныеПараметры.ОписаниеОшибки = ош;
							КонецЕсли;
						КонецЕсли;
						ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
						Логирование(0,"Фискализация чека","Текстовая строка НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
					КонецЕсли;
					Ответ = Ложь;
					Возврат Ответ;
				КонецЕсли;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				DRV.ШтрихКод = СокрЛП(ПозицияЧека.ШтрихКод);
				DRV.Выравнивание = 1;
				DRV.ПечататьТекстШтрихКода = 2;
				Если ПозицияЧека.Свойство("ТипШтрихкода") Тогда
					ТипШК = СоответТиповШК[ПозицияЧека.ТипШтрихкода];
				Иначе
					Если СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) <= 13 и СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) >= 8 Тогда
						ТипШК = 2;//"EAN13";
					ИначеЕсли СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) = 8 Тогда
						ТипШК = 3;//"EAN8";
					Иначе
						ТипШК = 84;//"QR";
					КонецЕсли;
				КонецЕсли;
				DRV.BarcodeType = ТипШК;
				DRV.Масштаб = 400;
				
				DRV.ПечатьШтрихКода();
				DRV.Выравнивание = 0;
				Ответ = ?(DRV.Результат = 0, истина, ложь);
				Если не ответ Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
					Логирование(0,"Фискализация чека","Печать ШК ошибка - " + DRV.ОписаниеРезультата);
					
					//DRV.НомерРегистра = 52;
					//DRV.ПолучитьРегистр();
					//
					//ВрПоследнийФД = DRV.НомерДокумента;
					//Если ВрПоследнийФД > ПоследнийФД ТОгда ///???????? что-то улетело в ФД
					//	Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
					//		ош = Новый Массив;
					//		ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					//	Иначе
					//		Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					//			ош = Новый Массив;
					//			ВыходныеПараметры.ОписаниеОшибки = ош;
					//		КонецЕсли;
					//	КонецЕсли;
					//	ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
					//	Логирование(0,"Фискализация чека","Печать ШК НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
					//КонецЕсли;
					
					ОтменитьЧек(ВыходныеПараметры);
					
					DRV.НомерРегистра = 52;
					DRV.ПолучитьРегистр();
					
					Если ПоследнийФД <> DRV.НомерДокумента Тогда
						Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
							ош = Новый Массив;
							ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
						Иначе
							Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
								ош = Новый Массив;
								ВыходныеПараметры.ОписаниеОшибки = ош;
							КонецЕсли;
						КонецЕсли;
						ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
						Логирование(0,"Фискализация чека","Печать ШК НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
					КонецЕсли;
					Ответ = Ложь;
					Возврат Ответ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// округление копеек
	Если Ответ и СуммаСкидкиНаЧек <> 0 Тогда
		DRV.Destination = 0;
		DRV.Сумма = СуммаСкидкиНаЧек;
		DRV.SummDiscount();
		Ответ = ?(DRV.Результат = 0, истина, ложь);
		Если не Ответ Тогда
			Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			Иначе
				Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					ош = Новый Массив;
					ВыходныеПараметры.ОписаниеОшибки = ош;
				КонецЕсли;
			КонецЕсли;
			ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
			Логирование(0,"Фискализация чека","Оплата НАЛ ошибка - " + DRV.ОписаниеРезультата);
			
			//DRV.НомерРегистра = 52;
			//DRV.ПолучитьРегистр();
			//
			//ВрПоследнийФД = DRV.НомерДокумента;
			//Если ВрПоследнийФД > ПоследнийФД ТОгда ///???????? что-то улетело в ФД
			//	Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			//		ош = Новый Массив;
			//		ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			//	Иначе
			//		Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
			//			ош = Новый Массив;
			//			ВыходныеПараметры.ОписаниеОшибки = ош;
			//		КонецЕсли;
			//	КонецЕсли;
			//	ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
			//	Логирование(0,"Фискализация чека","Оплата НАЛ НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
			//КонецЕсли;
			
			ОтменитьЧек(ВыходныеПараметры);
			
			DRV.НомерРегистра = 52;
			DRV.ПолучитьРегистр();
			
			Если ПоследнийФД <> DRV.НомерДокумента Тогда
				Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
					ош = Новый Массив;
					ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
				Иначе
					Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
						ош = Новый Массив;
						ВыходныеПараметры.ОписаниеОшибки = ош;
					КонецЕсли;
				КонецЕсли;
				ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
				Логирование(0,"Фискализация чека","Оплата НАЛ НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
			КонецЕсли;
			Ответ = Ложь;
			Возврат Ответ;
		КонецЕсли;
	КонецЕсли;
	
	// округление копеек
	
	Если Ответ Тогда
		
		СуммаНал = 0;
		СуммаБНал = 0;
		Для индекс = 0 по МассивСтрокОплаты.Количество() - 1 Цикл
			ПозицияОплаты = МассивСтрокОплаты[индекс];
			ТипОплаты = ?(ПозицияОплаты.Свойство("ТипОплаты") , ПозицияОплаты.ТипОплаты, "Нал");
			СуммаОплаты = ?(ПозицияОплаты.Свойство("Сумма") , ПозицияОплаты.Сумма, 0);
			Если ТипОплаты = "Нал" Тогда
				СуммаНал = СуммаНал + СуммаОплаты;
			Иначе
				СуммаБНал = СуммаБНал + СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаНал <> 0 Тогда
			
			// кассир
			DRV.AttrNumber = 1021;
			DRV.AttrValue = Кассир;
			DRV.ЗаписатьРеквизит();
			
			DRV.ТипЗакрытия = 0;
			DRV.Сумма = СуммаНал;
			DRV.Оплата();
			Ответ = ?(DRV.Результат = 0, истина, ложь);
			Если не Ответ Тогда
				Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
					ош = Новый Массив;
					ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
				Иначе
					Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
						ош = Новый Массив;
						ВыходныеПараметры.ОписаниеОшибки = ош;
					КонецЕсли;
				КонецЕсли;
				ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
				Логирование(0,"Фискализация чека","Оплата НАЛ ошибка - " + DRV.ОписаниеРезультата);
				
				//DRV.НомерРегистра = 52;
				//DRV.ПолучитьРегистр();
				//
				//ВрПоследнийФД = DRV.НомерДокумента;
				//Если ВрПоследнийФД > ПоследнийФД ТОгда ///???????? что-то улетело в ФД
				//	Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				//		ош = Новый Массив;
				//		ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
				//	Иначе
				//		Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				//			ош = Новый Массив;
				//			ВыходныеПараметры.ОписаниеОшибки = ош;
				//		КонецЕсли;
				//	КонецЕсли;
				//	ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
				//	Логирование(0,"Фискализация чека","Оплата НАЛ НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
				//КонецЕсли;
				
				ОтменитьЧек(ВыходныеПараметры);
				
				DRV.НомерРегистра = 52;
				DRV.ПолучитьРегистр();
				
				Если ПоследнийФД <> DRV.НомерДокумента Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
					Логирование(0,"Фискализация чека","Оплата НАЛ НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
				КонецЕсли;
				Ответ = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если СуммаБНал <> 0 и Ответ Тогда
			// кассир
			DRV.AttrNumber = 1021;
			DRV.AttrValue = Кассир;
			DRV.ЗаписатьРеквизит();
			
			DRV.ТипЗакрытия = 1;
			DRV.Сумма = СуммаБНал;
			DRV.Оплата();
			Ответ = ?(DRV.Результат = 0, истина, ложь);
			Если не Ответ Тогда
				Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
					ош = Новый Массив;
					ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
				Иначе
					Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
						ош = Новый Массив;
						ВыходныеПараметры.ОписаниеОшибки = ош;
					КонецЕсли;
				КонецЕсли;
				ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
				Логирование(0,"Фискализация чека","Оплата Б/НАЛ ошибка - " + DRV.ОписаниеРезультата);
				
				//DRV.НомерРегистра = 52;
				//DRV.ПолучитьРегистр();
				//
				//ВрПоследнийФД = DRV.НомерДокумента;
				//Если ВрПоследнийФД > ПоследнийФД ТОгда ///???????? что-то улетело в ФД
				//	Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				//		ош = Новый Массив;
				//		ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
				//	Иначе
				//		Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				//			ош = Новый Массив;
				//			ВыходныеПараметры.ОписаниеОшибки = ош;
				//		КонецЕсли;
				//	КонецЕсли;
				//	ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
				//	Логирование(0,"Фискализация чека","Оплата Б/НАЛ НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
				//КонецЕсли;
				
				ОтменитьЧек(ВыходныеПараметры);
				
				DRV.НомерРегистра = 52;
				DRV.ПолучитьРегистр();
				
				Если ПоследнийФД <> DRV.НомерДокумента Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
					Логирование(0,"Фискализация чека","Оплата Б/НАЛ НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
				КонецЕсли;
				Ответ = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ Тогда 
		DRV.ЗакрытьЧек();
		
		Ответ = ?(DRV.Результат = 0, истина, ложь);
		Если не Ответ Тогда
			Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			Иначе
				Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					ош = Новый Массив;
					ВыходныеПараметры.ОписаниеОшибки = ош;
				КонецЕсли;
			КонецЕсли;
			ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
			Логирование(0,"Фискализация чека","Закрытие чека ошибка - " + DRV.ОписаниеРезультата);
			
			//DRV.НомерРегистра = 52;
			//DRV.ПолучитьРегистр();
			//
			//ВрПоследнийФД = DRV.НомерДокумента;
			//Если ВрПоследнийФД > ПоследнийФД ТОгда ///???????? что-то улетело в ФД
			//	Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			//		ош = Новый Массив;
			//		ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			//	Иначе
			//		Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
			//			ош = Новый Массив;
			//			ВыходныеПараметры.ОписаниеОшибки = ош;
			//		КонецЕсли;
			//	КонецЕсли;
			//	ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
			//	Логирование(0,"Фискализация чека","Закрытие чека НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
			//КонецЕсли;
			
			ОтменитьЧек(ВыходныеПараметры);
			
			DRV.НомерРегистра = 52;
			DRV.ПолучитьРегистр();
			
			Если ПоследнийФД <> DRV.НомерДокумента Тогда
				Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
					ош = Новый Массив;
					ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
				Иначе
					Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
						ош = Новый Массив;
						ВыходныеПараметры.ОписаниеОшибки = ош;
					КонецЕсли;
				КонецЕсли;
				ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
				Логирование(0,"Фискализация чека","Закрытие чека НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
			КонецЕсли;
			Ответ = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если Ответ тогда
		//Если СуммаНал <> 0 Тогда
		//	ОткрытьДенежныйЯщик(ВыходныеПараметры);
		//КонецЕсли;
		
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);
		ВыходныеПараметры.Вставить("НомерЧека",номерЧека);
		
		DRV.НомерРегистра = 52;
		DRV.ПолучитьРегистр();
		
		ВыходныеПараметры.Вставить("НомерДокумента",DRV.НомерДокумента);
		
//1 – чек прихода;
//2 – чек возврата прихода;
//4 – чек расхода;
//5 – чек возврата расхода;
//7 - чек коррекции прихода;
//8 – чек коррекции возврата прихода;
//9 – чек корреции расхода;
//10 – чек коррекции возврата расхода
		ВыходныеПараметры.Вставить("ТипЧека",DRV.LastCheckType);
		ВыходныеПараметры.Вставить("ДатаДокумента",Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда));
		ВыходныеПараметры.Вставить("ФискальныйПризнак",DRV.ФискальныйПризнак);
		
		
		Логирование(1,"Фискализация чека","Закрытие чека вых параметры - " + ПреобразоватьВJSON(ВыходныеПараметры));
		//ВыходныеПараметры.Добавить(АдресСайтаПроверки);
	КонецЕсли;
		
	
//	ДанныеЧека = ПолучитьXMLПакетЧека(МассивСтрокЧека,МассивСтрокОплаты,ТипЧека,СуммаЧека);
	//НомерЧека = 0;
	//НомерСмены = 0;
	//ФискальныйПризнак = "";
	//АдресСайтаПроверки = "";
	
	//Попытка
	//	Ответ = DRV.СформироватьЧек(ПараметрыТО.ИдУстройства,ВходныеПараметры.Кассир,Ложь,ДанныеЧека,
	//								НомерЧека,НомерСмены,ФискальныйПризнак,АдресСайтаПроверки);
	//	Если не Ответ Тогда
	//		ВыходныеПараметры.Очистить();
	//		ВыходныеПараметры.Добавить("");
	//		DRV.ПолучитьОшибку(ВыходныеПараметры[0]);
	//		Возврат Ответ;
	//	Иначе
	//		ВыходныеПараметры.Очистить();
	//		ВыходныеПараметры.Добавить(НомерСмены);
	//		ВыходныеПараметры.Добавить(номерЧека);
	//		ВыходныеПараметры.Добавить(ФискальныйПризнак);
	//		ВыходныеПараметры.Добавить(АдресСайтаПроверки);
	//	КонецЕсли;
	//Исключение
	//	Ответ = Ложь;
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.СформироватьЧек>. " + ОписаниеОшибки());
	//	Возврат Ответ;
	//КонецПопытки;
	//
	//// вставим отправку по почте или sms
	
	Возврат Ответ;
	
КонецФункции

Функция ПечатьКопииЧека1(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	ОтветПоОперации = Истина;
	
	ПоследнийФД = 0;
	АдресКлиента = "";
	
	Логирование(1,"Печать Копии чека","Начало");
	
	Логирование(0,"Печать Копии чека","входные параметры - " + ПреобразоватьВJSON(ВходныеПараметры));
	
	МассивСтрокЧека = Новый Массив;
	МассивСтрокОплаты = Новый Массив;
	ТипЧека = Ложь;
	
	Если не ВходныеПараметры.Свойство("СтрокиЧека") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: нет строк чека");
		Логирование(0,"Печать Копии чека","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("СтрокиОплат") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: нет строк оплаты");
		Логирование(0,"Печать Копии чека","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("ТипЧека") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: не указан тип чека");
		Логирование(0,"Печать Копии чека","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	Кассир = "";
	Если ВходныеПараметры.Свойство("Кассир") Тогда
		Кассир = Лев(ВходныеПараметры.Кассир,63);
	КонецЕсли;
	НомерЧека = "";
	Если ВходныеПараметры.Свойство("НомерЧека") Тогда
		НомерЧека = ВходныеПараметры.НомерЧека;
	КонецЕсли;
	НомерСмены = "";
	Если ВходныеПараметры.Свойство("НомерСмены") Тогда
		НомерСмены = ВходныеПараметры.НомерСмены;
	КонецЕсли;
	СуммаСкидкиНаЧек = 0;
	Если ВходныеПараметры.Свойство("СуммаСкидкиНаЧек") Тогда
		СуммаСкидкиНаЧек = ВходныеПараметры.СуммаСкидкиНаЧек;
	КонецЕсли;
	
	МассивСтрокЧека = ВходныеПараметры.СтрокиЧека;
	МассивСтрокОплаты = ВходныеПараметры.СтрокиОплат;
	ТипЧека = ВходныеПараметры.ТипЧека;
	СуммаЧека = 0;
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	DRV.Пароль = "30";
	
	DRV.Режим = 1;
	DRV.УстановитьРежим();
	DRV.RecFont = 0;
	
	
	
	СоответТиповШК = Новый Соответствие;
	СоответТиповШК.Вставить("EAN8",3);
	СоответТиповШК.Вставить("EAN13",2);
	СоответТиповШК.Вставить("PDF417",10);
	СоответТиповШК.Вставить("QR",84);
	
	ВыхСтрук = Новый Структура;
	
	Если МассивСтрокЧека.Количество() <> 0 Тогда
		
		ТаблСуммПоСтрокам = Новый ТаблицаЗначений;
		ТаблСуммПоСтрокам.Колонки.Добавить("Сумма");
		ТаблСуммПоСтрокам.Колонки.Добавить("СуммаНДС");
		ТаблСуммПоСтрокам.Колонки.Добавить("СтавкаНДС");
		DRV.Строка = "***КОПИЯ***";
		DRV.Выравнивание = 1; // по центру
		DRV.ПечатьПоля();
		DRV.Строка = "КАССОВЫЙ ЧЕК";
		DRV.ПечатьПоля();
		DRV.Строка = ?(ТипЧека,"ВОЗВРАТ ПРИХОДА","ПРИХОД");
		DRV.Выравнивание = 0; // по левому краю
		DRV.ПечатьПоля();
		
		Для инд = 0 по МассивСтрокЧека.Количество() - 1 Цикл
			ПозицияЧека = МассивСтрокЧека[инд];
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				
				DRV.Выравнивание = 0;
				DRV.Строка = Лев(ПозицияЧека.Наименование,48);
				DRV.ПечатьПоля();
				Количество = ПозицияЧека.Количество;
				Цена = ПозицияЧека.Цена;
				Сумма = окр(Количество*Цена,2,РежимОкругления.Окр15как20);
				СтрТабл = ТаблСуммПоСтрокам.Добавить();
				СтрТабл.Сумма = Сумма;
				СтрТабл.СуммаНДС = ПозицияЧека.НДС;
				СтрТабл.СтавкаНДС = ПозицияЧека.СтавкаНДС;
				DRV.Выравнивание = 2;
				DRV.Строка = Формат(Количество,"ЧДЦ=3; ЧГ=0") + " Х " + Формат(Цена,"ЧДЦ=2; ЧГ=0") + " =" + Формат(Сумма,"ЧДЦ=2; ЧГ=0");
				DRV.ПечатьПоля();
				DRV.Строка = Формат(ПозицияЧека.СтавкаНДС,"ЧДЦ=2; ЧГ=0") + "% =" + Формат(ПозицияЧека.НДС,"ЧДЦ=2; ЧГ=0");
				DRV.ПечатьПоля();
				
				Ответ = ?(DRV.Результат = 0, истина, ложь);
				Если Ответ тогда
				Иначе
					ОтветПоОперации = Ложь;
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
					Логирование(0,"Печать Копии чека",?(ТипЧека,"Возврат ","Регистрация ") + " ошибка - " + DRV.ОписаниеРезультата);
					DRV.КонецДокумента();
					Возврат Ложь;
				КонецЕсли;
			ИначеЕсли ПозицияЧека.Свойство("Текст") Тогда
				DRV.Выравнивание = 0;
				СтрокаТекста = ПозицияЧека.Текст;
				МаксДлинаСтроки = 48;
				Если СтрДлина(СтрокаТекста) > МаксДлинаСтроки Тогда
					Пока СтрДлина(СтрокаТекста) > МаксДлинаСтроки Цикл
						DRV.Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
						//DRV.ПечатьСтроки();
						DRV.ПечатьПоля();
						СтрокаТекста = Сред(СтрокаТекста, МаксДлинаСтроки + 1);
					КонецЦикла;
					
					DRV.Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
					//DRV.ПечатьСтроки();
					DRV.ПечатьПоля();
				Иначе
					DRV.Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
					DRV.ПечатьПоля();
				КонецЕсли;
				Ответ = ?(DRV.Результат = 0, истина, ложь);
				Если не Ответ Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
					Логирование(0,"Печать Копии чека","Текстовая строка ошибка - " + DRV.ОписаниеРезультата);
					DRV.КонецДокумента();
					Возврат Ложь;
				КонецЕсли;
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				DRV.ШтрихКод = СокрЛП(ПозицияЧека.ШтрихКод);
				DRV.Выравнивание = 1;
				DRV.ПечататьТекстШтрихКода = 2;
				Если ПозицияЧека.Свойство("ТипШтрихкода") Тогда
					ТипШК = СоответТиповШК[ПозицияЧека.ТипШтрихкода];
				Иначе
					Если СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) <= 13 и СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) >= 8 Тогда
						ТипШК = 2;//"EAN13";
					ИначеЕсли СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) = 8 Тогда
						ТипШК = 3;//"EAN8";
					Иначе
						ТипШК = 84;//"QR";
					КонецЕсли;
				КонецЕсли;
				DRV.BarcodeType = ТипШК;
				DRV.Масштаб = 400;
				
				DRV.ПечатьШтрихКода();
				DRV.Выравнивание = 0;
				Ответ = ?(DRV.Результат = 0, истина, ложь);
				Если не ответ Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
					Логирование(0,"Фискализация чека","Печать ШК ошибка - " + DRV.ОписаниеРезультата);
					DRV.КонецДокумента();
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	СуммаВсего = Окр(ТаблСуммПоСтрокам.Итог("Сумма"),2,РежимОкругления.Окр15как20);
	DRV.Выравнивание = 0;
	Если СуммаСкидкиНаЧек <> 0 Тогда
		Стр = "ВСЕГО";
		Пока СтрДлина(Стр) < 47 - СтрДлина(СуммаВсего) Цикл
			Стр = Стр + " ";
		КонецЦикла;
		Стр = Стр + "=" + СуммаВсего;
		DRV.Строка = стр;
		DRV.ПечатьПоля();
		СуммаВсего = СуммаВсего - СуммаСкидкиНаЧек;
		СуммаСкидкиНаЧек = Формат(СуммаСкидкиНаЧек,"ЧДЦ=2; ЧГ=0");
		Стр = " СКИДКА";
		Пока СтрДлина(Стр) < 47 - СтрДлина(СуммаСкидкиНаЧек) Цикл
			Стр = Стр + " ";
		КонецЦикла;
		Стр = Стр + "=" + СуммаСкидкиНаЧек;
		DRV.Строка = стр;
		DRV.ПечатьПоля();
	КонецЕсли;
	
	Стр = "ИТОГ";
	Пока СтрДлина(Стр) < 47 - СтрДлина(СуммаВсего) Цикл
		Стр = Стр + " ";
	КонецЦикла;
	Стр = Стр + "=" + СуммаВсего;
	DRV.Строка = стр;
	DRV.ПечатьПоля();
	
	Ответ = DRV.Результат = 0;
	Если Ответ Тогда
		
		СуммаНал = 0;
		СуммаБНал = 0;
		Для индекс = 0 по МассивСтрокОплаты.Количество() - 1 Цикл
			ПозицияОплаты = МассивСтрокОплаты[индекс];
			ТипОплаты = ?(ПозицияОплаты.Свойство("ТипОплаты") , ПозицияОплаты.ТипОплаты, "Нал");
			СуммаОплаты = ?(ПозицияОплаты.Свойство("Сумма") , ПозицияОплаты.Сумма, 0);
			Если ТипОплаты = "Нал" Тогда
				СуммаНал = СуммаНал + СуммаОплаты;
			Иначе
				СуммаБНал = СуммаБНал + СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		
		DRV.Строка = "ОПЛАТА";
		DRV.ПечатьПоля();
		
		Если СуммаНал <> 0 Тогда
			
			СуммаНалФ = Формат(СуммаНал,"ЧДЦ=2; ЧГ=0");
			Стр = " НАЛИЧНЫМИ";
			Пока СтрДлина(Стр) < 47 - СтрДлина(СуммаНалФ) Цикл
				Стр = Стр + " ";
			КонецЦикла;
			Стр = Стр + "=" + СуммаНалФ;
			DRV.Строка = стр;
			DRV.ПечатьПоля();
		КонецЕсли;
		
		Если СуммаБНал <> 0 и Ответ Тогда
			
			СуммаБНалФ = Формат(СуммаБНал,"ЧДЦ=2; ЧГ=0");
			
			Стр = " ЭЛЕКТРОННЫМИ";
			Пока СтрДлина(Стр) < 47 - СтрДлина(СуммаБНалФ) Цикл
				Стр = Стр + " ";
			КонецЦикла;
			Стр = Стр + "=" + СуммаБНалФ;
			DRV.Строка = стр;
			DRV.ПечатьПоля();
		КонецЕсли;
		
		СуммаПолучено = СуммаБНал + СуммаНал;
		СуммаПолученоФ = Формат(СуммаПолучено,"ЧДЦ=2; ЧГ=0");
		
		Стр = "ПОЛУЧЕНО";
		Пока СтрДлина(Стр) < 47 - СтрДлина(СуммаПолученоФ) Цикл
			Стр = Стр + " ";
		КонецЦикла;
		Стр = Стр + "=" + СуммаПолученоФ;
		DRV.Строка = стр;
		DRV.ПечатьПоля();
		
		СуммаСдачи = Формат(СуммаПолучено - СуммаВсего,"ЧДЦ=2; ЧН=0.00; ЧГ=0");
		Стр = "СДАЧА";
		Пока СтрДлина(Стр) < 47 - СтрДлина(СуммаСдачи) Цикл
			Стр = Стр + " ";
		КонецЦикла;
		Стр = Стр + "=" + СуммаСдачи;
		DRV.Строка = стр;
		DRV.ПечатьПоля();
		
		DRV.Строка = "ВСЕГО ОПЛАЧЕНО";
		DRV.ПечатьПоля();

		СуммаНалФ = Формат(СуммаНал - СуммаСдачи,"ЧДЦ=2; ЧН=0.00; ЧГ=0");
		Стр = "НАЛИЧНЫМИ";
		Пока СтрДлина(Стр) < 47 - СтрДлина(СуммаНалФ) Цикл
			Стр = Стр + " ";
		КонецЦикла;
		Стр = Стр + "=" + СуммаНалФ;
		DRV.Строка = стр;
		DRV.ПечатьПоля();
		
		СуммаБНалФ = Формат(СуммаБНал,"ЧДЦ=2; ЧН=0.00; ЧГ=0");
		Стр = "ЭЛЕКТРОННЫМИ";
		Пока СтрДлина(Стр) < 47 - СтрДлина(СуммаБНалФ) Цикл
			Стр = Стр + " ";
		КонецЦикла;
		Стр = Стр + "=" + СуммаБНалФ;
		DRV.Строка = стр;
		DRV.ПечатьПоля();
		
		ТаблСуммПоСтрокам.Свернуть("СтавкаНДС","СуммаНДС");
		
		для каждого СтавкаНДССтр из ТаблСуммПоСтрокам Цикл
			СуммаНДССтр = Формат(СтавкаНДССтр.СуммаНДС,"ЧДЦ=2; ЧН=0.00; ЧГ=0");
			Стр = "СУММА " + СокрЛП(СтавкаНДССтр.СтавкаНДС);
			Пока СтрДлина(Стр) < 47 - СтрДлина(СуммаНДССтр) Цикл
				Стр = Стр + " ";
			КонецЦикла;
			Стр = Стр + "=" + СуммаНДССтр;
			DRV.Строка = стр;
			DRV.ПечатьПоля();
		КонецЦикла;
		
		DRV.Строка = "КАССИР " + глПользователь;
		DRV.ПечатьПоля();
		
		НомерСмены = Формат(НомерСмены,"ЧЦ=4; ЧВН=; ЧГ=0");
		Стр = "Смена №";
		Пока СтрДлина(Стр) < 48 - СтрДлина(НомерСмены) Цикл
			Стр = Стр + " ";
		КонецЦикла;
		Стр = Стр + НомерСмены;
		DRV.Строка = стр;
		DRV.ПечатьПоля();
		
		НомерЧека = Формат(НомерЧека,"ЧЦ=4; ЧВН=; ЧГ=0");
		Стр = "Чек №";
		Пока СтрДлина(Стр) < 48 - СтрДлина(НомерЧека) Цикл
			Стр = Стр + " ";
		КонецЦикла;
		Стр = Стр + НомерЧека;
		DRV.Строка = стр;
		DRV.ПечатьПоля();
		
	КонецЕсли;
	
	DRV.ПечатьКлише();
		
	DRV.НеполнаяОтрезка();
	
	Возврат DRV.Результат = 0;
	
КонецФункции

Функция ПечатьКопииЧека(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	ОтветПоОперации = Истина;
	
	ПоследнийФД = 0;
	АдресКлиента = "";
	
	Логирование(1,"Печать Копии чека","Начало");
	
	Логирование(0,"Печать Копии чека","входные параметры - " + ПреобразоватьВJSON(ВходныеПараметры));
	
	НомерФД = 0;
	
	Если не ВходныеПараметры.Свойство("НомерФД") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: не указан номер ФД");
		Логирование(0,"Печать Копии чека","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	
	НомерФД = ВходныеПараметры.НомерФД;
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	DRV.Пароль = "30";
	
	DRV.Режим = 6;
	DRV.УстановитьРежим();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Печать Копии чека","Текстовая строка ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "AB " + Формат(НомерФД,"ЧЦ=8; ЧВН=; ЧГ='2,0'");
	DRV.ВыполнитьКоманду();
	
	//Для Инд = 1 по 6 Цикл
	//	DRV.ВыходнойПотокДанных = "46 0D 00 " + Формат(инд,"ЧЦ=2; ЧВН=") + " 03";
	//	DRV.ВыполнитьКоманду();
	//	Данные = DRV.ВходнойПотокДанных;
	//	Если Лев(Данные,2) = "55" Тогда // все хорошо
	//		Данные = Сред(Данные,4);
	//		Если Лев(Данные,2) = "00" Тогда // нет ошибок
	//			Данные = Сред(Данные,4);
	//			СтрБайт = Лев(данные,2);
	//			млБайт = Сред(Данные,4,2);
	//			ЧислоСтБайт = СоотвХекс.Получить(ВРег(Лев(СтрБайт,1)))*16 + СоотвХекс.Получить(ВРег(Прав(СтрБайт,1)));
	//			ЧислоМлБайт = СоотвХекс.Получить(ВРег(Лев(млБайт,1)))*16 + СоотвХекс.Получить(ВРег(Прав(млБайт,1)));
	//			ТегПолученный = 256*ЧислоСтБайт + ЧислоМлБайт;
	//			Если ТегНалога = ТегПолученный Тогда
	//				ИндексНалога = Инд;
	//				Прервать;
	//			КонецЕсли;
	//		Иначе
	//			Прервать;
	//		КонецЕсли;
	//	Иначе
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	

	Возврат DRV.Результат = 0;
	
КонецФункции

Функция ЧекКоррекции(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	ОтветПоОперации = Истина;
	
	ПоследнийФД = 0;
	АдресКлиента = "";
	
	Логирование(1,"ЧекКоррекции","Начало");
	
	Логирование(0,"ЧекКоррекции","входные параметры - " + ПреобразоватьВJSON(ВходныеПараметры));
	
	МассивСтрокЧека = Новый Массив;
	МассивСтрокОплаты = Новый Массив;
	ТипЧека = Ложь;
	
	Если не ВходныеПараметры.Свойство("СуммаКоррекции") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: не указана сумма коррекции");
		Логирование(0,"ЧекКоррекции","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	
	Если не ВходныеПараметры.Свойство("ТипЧекаКоррекции") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: не указан тип чека коррекции");
		Логирование(0,"ЧекКоррекции","Ошибка - " + ПреобразоватьВJSON(ВыходныеПараметры));
		Возврат Ложь;
	КонецЕсли;
	
	Кассир = "";
	Если ВходныеПараметры.Свойство("Кассир") Тогда
		Кассир = Лев(ВходныеПараметры.Кассир,63);
	КонецЕсли;

	СуммаКоррекции = ВходныеПараметры.СуммаКоррекции;
	ТипЧекаКоррекции = ВходныеПараметры.ТипЧекаКоррекции;
	
	ВыхСтрук = Новый Структура;
	
	DRV.НомерРегистра = 52;
	DRV.ПолучитьРегистр();
	
	ПоследнийФД = DRV.НомерДокумента;
	
	DRV.ТипЧека = ТипЧекаКоррекции;
	DRV.РежимЧека = 1;
	DRV.ОткрытьЧек();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"ЧекКоррекции","Открытие чека ошибка - " + DRV.ОписаниеРезультата);
		ОтменитьЧек(ВыходныеПараметры);
		Возврат Ответ;
	КонецЕсли;
	DRV.НомерРегистра = 53;
	DRV.ПолучитьРегистр();
	
	//ДанныеПоСмене = DRV.Count;
	НомерЧека = DRV.Count + 1;
	НомерСмены = DRV.Смена;
	
	Логирование(0,"ЧекКоррекции","Открытие чека вых параметры " + ПреобразоватьВJSON(ВыхСтрук));
	
	DRV.Наименование = "Коррекция прихода";//Лев(ПозицияЧека.Наименование,48);
	DRV.Количество = 1;
	DRV.Цена = СуммаКоррекции;
	DRV.Секция = 0;
	
	DRV.Регистрация();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если не Ответ тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"ЧекКоррекции","регистрация ошибка - " + DRV.ОписаниеРезультата);
		ОтменитьЧек(ВыходныеПараметры);
		Возврат Ответ;
	КонецЕсли;
	
	DRV.ТипЗакрытия = 0;
	DRV.Сумма = СуммаКоррекции;

	DRV.ЗакрытьЧек();
	
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"ЧекКоррекции","Закрытие чека ошибка - " + DRV.ОписаниеРезультата);
		DRV.НомерРегистра = 52;
		DRV.ПолучитьРегистр();
		
		ВрПоследнийФД = DRV.НомерДокумента;
		Если ВрПоследнийФД > ПоследнийФД ТОгда ///???????? что-то улетело в ФД
			Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			Иначе
				Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					ош = Новый Массив;
					ВыходныеПараметры.ОписаниеОшибки = ош;
				КонецЕсли;
			КонецЕсли;
			ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
			Логирование(0,"ЧекКоррекции","Закрытие чека НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + ВрПоследнийФД);
		КонецЕсли;
		
		ОтменитьЧек(ВыходныеПараметры);
		
		DRV.НомерРегистра = 52;
		DRV.ПолучитьРегистр();
		
		Если ВрПоследнийФД > ПоследнийФД и ВрПоследнийФД < DRV.НомерДокумента Тогда
			Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			Иначе
				Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					ош = Новый Массив;
					ВыходныеПараметры.ОписаниеОшибки = ош;
				КонецЕсли;
			КонецЕсли;
			ВыходныеПараметры.ОписаниеОшибки.Добавить("НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
			Логирование(0,"ЧекКоррекции","Закрытие чека НОМЕР ФД ИЗМЕНИЛСЯ! номер ФД" + DRV.НомерДокумента);
		КонецЕсли;
		Ответ = Ложь;
	КонецЕсли;

	Если Ответ тогда
		
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);
		ВыходныеПараметры.Вставить("НомерЧека",номерЧека);
		
		DRV.НомерРегистра = 52;
		DRV.ПолучитьРегистр();
		
		ВыходныеПараметры.Вставить("НомерДокумента",DRV.НомерДокумента);
		
//1 – чек прихода;
//2 – чек возврата прихода;
//4 – чек расхода;
//5 – чек возврата расхода;
//7 - чек коррекции прихода;
//8 – чек коррекции возврата прихода;
//9 – чек корреции расхода;
//10 – чек коррекции возврата расхода
		ВыходныеПараметры.Вставить("ТипЧека",DRV.LastCheckType);
		ВыходныеПараметры.Вставить("ДатаДокумента",Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда));
		ВыходныеПараметры.Вставить("ФискальныйПризнак",DRV.ФискальныйПризнак);
		
		
		Логирование(1,"ЧекКоррекции","Закрытие чека вых параметры - " + ПреобразоватьВJSON(ВыходныеПараметры));
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция АннулироватьЧек(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	//Ответ = ОткрытьЧек(ВходныеПараметры,ВыходныеПараметры);
	//Если Ответ Тогда
	//	Ответ = ОтменитьЧек(ВыходныеПараметры);
	//КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПечатьТекста(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	
	Логирование(1,"Печать текста","Начало");
	
	Логирование(0,"Печать текста","входные параметры: " + ПреобразоватьВJSON(ВходныеПараметры));
	
	Если не ВходныеПараметры.Свойство("Строки") Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.ОписаниеОшибки = ош;
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: нет строк");
		Логирование(0,"Печать текста","Ошибка -  Ошибка входных параметров: нет строк");
		Возврат Ложь;
	КонецЕсли;
	ТипШрифта = 4;
	Если ВходныеПараметры.Свойство("ТипШрифта") Тогда
		ТипШрифта = ?(ВходныеПараметры.ТипШрифта > 4, 0 , ВходныеПараметры.ТипШрифта);
	КонецЕсли;
	ТипШрифта = 0; // большой шрифт
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	DRV.Пароль = "30";
	
	DRV.Режим = 1;
	DRV.УстановитьРежим();
	
	// тестово
	DRV.RecFont = ТипШрифта;
	// тестово
	
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Печать текста","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;	
	
	МассивСтрок = ВходныеПараметры.Строки;
	Если МассивСтрок.Количество() <> 0 ТОгда
		Для инд = 0 по МассивСтрок.Количество() - 1 Цикл
			СтрокаТекста = МассивСтрок[инд];
			Если СокрЛП(СтрокаТекста) = "[отрезка]" Тогда
				
				DRV.ПечатьКлише();
				
				DRV.НеполнаяОтрезка();
				
			ИначеЕсли найти(СтрокаТекста,"|ШтрихКод|") > 0 Тогда
				поз = Найти(СтрокаТекста,"|ШтрихКод|");
				ВыделеннаяСтрока = Сред(СтрокаТекста, Поз + СтрДлина("|ШтрихКод|") );
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока,1, Найти(ВыделеннаяСтрока, "|") - 1); 
				Если СтрДлина(СокрЛП(ВремШтрихКод)) <= 13 и СтрДлина(СокрЛП(ВремШтрихКод)) >= 8 Тогда
					ТипШК = 2;//"EAN13";
				ИначеЕсли СтрДлина(СокрЛП(ВремШтрихКод)) = 8 Тогда
					ТипШК = 3;//"EAN8";
				Иначе
					ТипШК = 84;//"QR";
				КонецЕсли;
				DRV.ШтрихКод = СокрЛП(ВремШтрихКод);
				DRV.Выравнивание = 1;
				DRV.BarcodeType = ТипШК;
				DRV.Масштаб = ?(ТипШК = 84, 400, 100);
				
				DRV.ПечатьШтрихКода();
				DRV.Выравнивание = 0;
				Ответ = ?(DRV.Результат = 0, Истина, Ложь);
				Если не Ответ Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
					Логирование(0,"Печать текста","Ошибка - " + DRV.ОписаниеРезультата);
					DRV.КонецДокумента();
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Если Найти(СтрокаТекста,"[Кассир]") <> 0 Тогда
					СтрокаТекста = СтрЗаменить(СтрокаТекста,"[Кассир]",глПользователь);
				КонецЕсли;
				СтрокаТекста = СтрЗаменить(СтрокаТекста, Символы.НПП, " ");
				МаксДлинаСтроки = 48;
				Если СтрДлина(СтрокаТекста) > МаксДлинаСтроки Тогда
					Пока СтрДлина(СтрокаТекста) > МаксДлинаСтроки Цикл
						DRV.Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
						//DRV.ПечатьСтроки();
						DRV.ПечатьПоля();
						СтрокаТекста = Сред(СтрокаТекста, МаксДлинаСтроки + 1);
					КонецЦикла;
					
					DRV.Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
					//DRV.ПечатьСтроки();
					DRV.ПечатьПоля();
				Иначе
					DRV.Строка = Лев(СтрокаТекста, МаксДлинаСтроки);
					DRV.ПечатьПоля();
				КонецЕсли;
				Если DRV.Результат <> 0 Тогда
					Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
						ош = Новый Массив;
						ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
					Иначе
						Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
							ош = Новый Массив;
							ВыходныеПараметры.ОписаниеОшибки = ош;
						КонецЕсли;
					КонецЕсли;
					ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
					Логирование(0,"Печать текста","Ошибка - " + DRV.ОписаниеРезультата);
					DRV.КонецДокумента();
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		DRV.ПечатьКлише();
		
		DRV.НеполнаяОтрезка();
		
	КонецЕсли;
	
	//
	//ДанныеЧека = ПолучитьXMLПакетТекста(ВходныеПараметры.Строки);
	//
	//Попытка
	//	Для каждого ТестПечати из ДанныеЧека Цикл
	//		Ответ = DRV.НапечататьТекстовыйДокумент(ПараметрыТО.ИдУстройства,ТестПечати);
	//		Если не Ответ Тогда
	//			ВыходныеПараметры.Очистить();
	//			ВыходныеПараметры.Добавить("");
	//			DRV.ПолучитьОшибку(ВыходныеПараметры[0]);
	//			Возврат Ответ;
	//		КонецЕсли;
	//	КонецЦикла;
	//Исключение
	//	Ответ = Ложь;
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>. " + ОписаниеОшибки());
	//	Возврат Ответ;
	//КонецПопытки;
	
	Возврат Ответ;	
КонецФункции

Функция Внесение (ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	
	Логирование(1,"Внесение","Начало");
	Логирование(0,"Внесение","Входные параметры" + ПреобразоватьВJSON(ВходныеПараметры));

	
	Если ТипЗнч(ВходныеПараметры) <> Тип("Число") ТОгда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: передано не число");
		Логирование(0,"Внесение","Ошибка входных параметров: передано не число");
		Возврат Ложь;
	КонецЕсли;
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	DRV.Пароль = "30";
	
	DRV.Режим = 1;
	DRV.УстановитьРежим();
	
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Внесение","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	DRV.Сумма = ВходныеПараметры;
	DRV.ВнесениеДенег();
	
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Внесение","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	//
	//Попытка
	//	Ответ = DRV.НапечататьЧекВнесенияВыемки(ПараметрыТО.ИдУстройства,ВыходныеПараметры);
	//	Если не Ответ Тогда
	//		ВыходныеПараметры.Очистить();
	//		ВыходныеПараметры.Добавить("");
	//		DRV.ПолучитьОшибку(ВыходныеПараметры[1]);
	//	КонецЕсли;
	//Исключение
	//	Ответ = Ложь;
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>. " + ОписаниеОшибки());
	//	Возврат Ответ;
	//КонецПопытки;		
	Возврат Ответ;
КонецФункции

Функция Выемка (ВходныеПараметры,ВыходныеПараметры)
	
	Логирование(1,"Выемка","Начало");
	Логирование(0,"Выемка","Входные параметры" + ПреобразоватьВJSON(ВходныеПараметры));
	
	
	Ответ = Истина;
	Если ТипЗнч(ВходныеПараметры) <> Тип("Число") ТОгда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка входных параметров: передано не число");
		Логирование(0,"Выемка","Ошибка входных параметров: передано не число");
		Возврат Ложь;
	КонецЕсли;
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	DRV.Пароль = "30";
	
	DRV.Режим = 1;
	DRV.УстановитьРежим();
	
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Выемка","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	DRV.Сумма = ВходныеПараметры;
	DRV.ВыплатаДенег();
	
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Выемка","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	//Попытка
	//	Ответ = DRV.НапечататьЧекВнесенияВыемки(ПараметрыТО.ИдУстройства,ВыходныеПараметры);
	//	Если не Ответ Тогда
	//		ВыходныеПараметры.Очистить();
	//		ВыходныеПараметры.Добавить("");
	//		DRV.ПолучитьОшибку(ВыходныеПараметры[1]);
	//	КонецЕсли;
	//Исключение
	//	Ответ = Ложь;
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>. " + ОписаниеОшибки());
	//	Возврат Ответ;
	//КонецПопытки;		
	Возврат Ответ;
КонецФункции

Функция ПечатьШтрихКода(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	
	Если ВходныеПараметры.Свойство("ШтрихКод") Тогда
		ШтрихКод = НСтр("ru='ШТРИХКОД:'") + ?(ВходныеПараметры.Свойство("ШтрихКод"), ВходныеПараметры.ШтрихКод, "");
		Если не DRV.НапечататьНефискСтроку(ИдУстройства, ШтрихКод) Тогда
			Ответ = Ложь;
			ВыходныеПараметры.Добавить("");
			DRV.ПолучитьОшибку(ВыходныеПараметры[ВыходныеПараметры.Количество()-1]);
			ОтменитьЧек(ВыходныеПараметры);
		КонецЕсли;
	Иначе
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка входных параметров: Ошибка ШК");
	КонецЕсли;
		
	Возврат Ответ;
КонецФункции

Функция ОткрытьДенежныйЯщик(ВыходныеПараметры)
	Логирование(1,"Открыть денежный ящик","начало");
	
	Ответ = Истина;

	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	
	DRV.ОткрытьЯщик();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	//Попытка
	//	Ответ = DRV.ОткрытьДенежныйЯщик(ПараметрыТО.ИдУстройства);
	//Исключение
	//	Ответ = Ложь;
	//	ВыходныеПараметры.Добавить(НСтр("ru='Команда ""Открыть денежный ящик"" не поддерживается данным драйвером.'"));
	//	Возврат Ответ;
	//КонецПопытки;
	
	Если НЕ Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Открыть денежный ящик","Ошибка - " + DRV.ОписаниеРезультата);
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Функция ОткрытьСмену(ВходныеПараметры,ВыходныеПараметры)
	
	Логирование(1,"Открытие смены","Начало");
	// проверка открытия смены
	СменаТТ = ИнтерфейсРМ.ТекущаяСмена();
	Если СменаТТ.Пустая() Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Смена ТТ не открыта");
		Логирование(0,"Открытие смены","Ошибка - Смена ТТ не открыта");
		Возврат Ложь;
	КонецЕсли;
	Кассир = "";
	Если ВходныеПараметры.Свойство("Кассир") Тогда
		Кассир = Лев(ВходныеПараметры.Кассир,63);
	КонецЕсли;
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	
	// проверим время на ФН{
	DRV.НомерРегистра = 17;
	DRV.ПолучитьРегистр();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Ответ Тогда
		ДатаФН = Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда);
		#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Если ДатаФН > ТекущаяДатаСеанса() Тогда
			ДельтаМинут = Цел((ДатаФН - ТекущаяДатаСеанса())/60);
		#Иначе      	
		Если ДатаФН > ТекущаяДатаНаСервере() Тогда
			ДельтаМинут = Цел((ДатаФН - ТекущаяДатаНаСервере())/60);
		#КонецЕсли
			Если ДельтаМинут > 2 ТОгда // говнокод без константы
				Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
					ош = Новый Массив;
					ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
				Иначе
					Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
						ош = Новый Массив;
						ВыходныеПараметры.ОписаниеОшибки = ош;
					КонецЕсли;
				КонецЕсли;
				ВыходныеПараметры.ОписаниеОшибки.Добавить("Ошибка времени ККМ. Расхождение более 2 минут.");
				Логирование(0,"Открытие смены","Ошибка времени ККМ. Расхождение более 2 минут.");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// }проверим время на ФН
	
	// { получим Зав номер ККТ
	КассаЗаводскойНомер = "";
	DRV.НомерРегистра = 22;
	DRV.ПолучитьРегистр();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Ответ Тогда
		КассаЗаводскойНомер = DRV.СерийныйНомер;
	Иначе
		Логирование(0,"Открытие смены","Ошибка - Не смог прочитать заводской номер ККТ");
	КонецЕсли;
	// } получим Зав номер ККТ
	
	DRV.Режим = 1;
	DRV.УстановитьРежим();
	
	Если DRV.Результат <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Открытие смены","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	DRV.AttrNumber = 1021;
	DRV.AttrValue = Кассир;
	DRV.ЗаписатьРеквизит();
	
	DRV.ТестовыйРежим = 0;
	DRV.Строка = " ";
	DRV.ОткрытьСмену();
	
	Если DRV.Результат <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Открытие смены","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	
	DRV.Пароль = ПараметрыТО.Password;
	DRV.ПолучитьСостояние();
	Если DRV.Результат <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Открытие смены","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	//НомерСмены = ?(DRV.СменаОткрыта = 0, DRV.Смена + 1, DRV.Смена);
	//НомерЧека = DRV.НомерЧека;
	DRV.НомерРегистра = 53;
	DRV.ПолучитьРегистр();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	
	Если не Ответ Тогда
		Логирование(0,"Открытие смены","Ошибка - " + DRV.ОписаниеРезультата);
	КонецЕсли;
	
	Если Ответ Тогда
		//ДанныеПоСмене = DRV.Count;
		НомерЧека = DRV.Count + 1;
		НомерСмены = DRV.Смена; //+ 1; // всегда номер последней закрытой смены
		
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);
		ВыходныеПараметры.Вставить("НомерЧека",НомерЧека);
		
		// Формирование документа открытия смены
		
		ОткрытиеСмены = Документы.Касса_ОткрытиеСмены.СоздатьДокумент();
		ОткрытиеСмены.Автор = глПользователь;
		ОткрытиеСмены.Дата = ТекущаяДатаСеанса();
		ОткрытиеСмены.Касса = глПараметрыРМ.ККМ;
		ОткрытиеСмены.КассаНомер = глПараметрыРМ.ККМ.КодСуп;
		ОткрытиеСмены.КассаЗаводскойНомер = КассаЗаводскойНомер;//глПараметрыРМ.ККМ.ЗаводскойНомер;
		ОткрытиеСмены.НомерСмены = НомерСмены;
		ОткрытиеСмены.НомерДокумента = НомерЧека;
		ОткрытиеСмены.РабочееМесто = глРабочееМесто;
		ОткрытиеСмены.СменаТТ = СменаТТ; 
		
		Если не ИнтерфейсРМ.ПопыткаДействияСОбъектом(ОткрытиеСмены,"Объект.Записать(РежимЗаписиДокумента.Проведение)") Тогда
			Если не ИнтерфейсРМ.ПопыткаДействияСОбъектом(ОткрытиеСмены,"Объект.Записать(РежимЗаписиДокумента.Запись)") Тогда
				//Ответ = Ложь;
			КонецЕсли;
		КонецЕсли;
		Если ЭтоПерваяКассоваяСмена() Тогда
			Попытка
				УправлениеСерверамиПриложений.СоздатьЛокальнуюФайловуюБазу();	
			Исключение
				ЗаписьЖурналаРегистрации("Резервирование.Ошибка создания локальной базы", УровеньЖурналаРегистрации.Ошибка, , ОткрытиеСмены.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
		
		Логирование(1,"Открытие смены","Окончание - Параметры: " + ПреобразоватьВJSON(ВыходныеПараметры));
	КонецЕсли;	
	
	Возврат Ответ;
	
КонецФункции

Функция ЗакрытьСмену(ВходныеПараметры,ВыходныеПараметры)
	
	Логирование(1,"Закрытие смены","Начало");
	
	Кассир = "";
	Если ВходныеПараметры.Свойство("Кассир") Тогда
		Кассир = Лев(ВходныеПараметры.Кассир,63);
	КонецЕсли;
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	
	// получим версия ПО ККТ
	ВерсияПОККТ = "";
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "9D 91";
	DRV.ВыполнитьКоманду();
	Данные = DRV.ВходнойПотокДанных;
	Если Лев(Данные,5) = "55 00" Тогда // все хорошо
		ВерсияПОККТ = Прав(Сокрлп(Данные),5);
		ВерсияПОККТ = СтрЗаменить(ВерсияПОККТ," ","");
		ВерсияПОККТ = СтрЗаменить(ВерсияПОККТ,Символ(160),"");
	КонецЕсли;
	// получим версия ПО ККТ
	
	DRV.Режим = 3;
	DRV.Пароль = ПараметрыТО.Password;;
	DRV.УстановитьРежим();
	
	Если DRV.Результат <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Закрытие смены","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	DRV.AttrNumber = 1021;
	DRV.AttrValue = Кассир;
	DRV.ЗаписатьРеквизит();
	
	DRV.ТипОтчета = 1;
	DRV.Отчет();
	
	Если DRV.Результат <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Закрытие смены","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;

	//DRV.Пароль = ПараметрыТО.Password;
	//DRV.ПолучитьСостояние();
	//Если DRV.Результат <> 0 Тогда
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить(DRV.ОписаниеРезультата);
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//НомерСмены = DRV.Смена;
	
	DRV.НомерРегистра = 44;
	DRV.ПолучитьРегистр();
	
	КоличествоНепереданныхФД = DRV.Count;
	Логирование(0,"Закрытие смены","значение регистра 44 неотправлено в ОФД - " + DRV.Count);
	
	DRV.НомерРегистра = 45;
	DRV.ПолучитьРегистр();
	
	Попытка
		ДатаПервогоНепереданногоФД = Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда);
	Исключение
		ДатаПервогоНепереданногоФД = Дата(1,1,1);
	КонецПопытки;
	
	Логирование(0,"Закрытие смены","значение регистра 45 дата неотправленого в ОФД - " + ДатаПервогоНепереданногоФД);
	
	DRV.НомерРегистра = 53;
	DRV.ПолучитьРегистр();
	
	//ДанныеПоСмене = DRV.Count;
	номерЧека = DRV.Count;
	НомерСмены = DRV.Смена;
	Логирование(0,"Закрытие смены","значение регистра 53 данные по смене - " + DRV.Count + "; " + DRV.Смена);
	
	DRV.НомерРегистра = 52;
	DRV.ПолучитьРегистр();
	
	Попытка
		ДатаСмены = Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда)
	Исключение
		ДатаСмены = Дата(1,1,1);
	КонецПопытки;
	
	ТипПослЧека = DRV.LastCheckType;
	НомерДокумента = DRV.НомерДокумента;
	
	//ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);
	ВыходныеПараметры.Вставить("НомерЧека",НомерЧека);
	//ВыходныеПараметры.Добавить(Параметры);
	
	//Параметры = новый Структура;
	ВыходныеПараметры.Вставить("КоличествоНепереданныхФД"   , КоличествоНепереданныхФД); 
	ВыходныеПараметры.Вставить("НомерПервогоНепереданногоФД", Неопределено); 
	ВыходныеПараметры.Вставить("ДатаПервогоНепереданногоФД ", ДатаПервогоНепереданногоФД); 
	ВыходныеПараметры.Вставить("ДатаСменыККТ",ДатаСмены);
	ВыходныеПараметры.Вставить("НомерСменыККТ",НомерСмены);
	ВыходныеПараметры.Вставить("КоличествоЧеков",номерЧека);
	ВыходныеПараметры.Вставить("КоличествоФД",НомерДокумента);
	//Параметры.Вставить("ПревышеноВремяОжиданияОтветаОФД");
	//Параметры.Вставить("НеобходимаСтрочнаяЗаменаФН");
	//Параметры.Вставить("ПамятьФНПереполнена");
	//Параметры.Вставить("РесурсФНИсчерпан");
	
	ВыходныеПараметры.Вставить("НомерДокумента",НомерДокумента);
//1 – чек прихода;
//2 – чек возврата прихода;
//4 – чек расхода;
//5 – чек возврата расхода;
//7 - чек коррекции прихода;
//8 – чек коррекции возврата прихода;
//9 – чек корреции расхода;
//10 – чек коррекции возврата расхода
	ВыходныеПараметры.Вставить("ТипЧека",ТипПослЧека);
	ВыходныеПараметры.Вставить("ДатаДокумента",ДатаСмены);
	ВыходныеПараметры.Вставить("ФискальныйПризнак",DRV.ФискальныйПризнак);
	ВыходныеПараметры.Вставить("ВерсияПОККТ",ВерсияПОККТ);
	
	// запрос сумм по регистрам
	// суммы регистраций
	DRV.НомерРегистра = 1;
	DRV.ТипЧека = 1;
	DRV.ПолучитьРегистр();
	СуммаПриход = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаПриход",СуммаПриход);
	
	инд = 5;//ПолучитьИндексНалога("10");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 01 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	СуммаНДС10Приход = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаПриходНДС10",СуммаНДС10Приход);
	
	инд = 6;//ПолучитьИндексНалога("18");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 01 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	Логирование(0,"НДС",Поток);
	СуммаНДС18Приход = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаПриходНДС18",СуммаНДС18Приход);
	
	инд = 4;//ПолучитьИндексНалога("без НДС");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 01 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	СуммаНДСбезНДСПриход = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаПриходбезНДС",СуммаНДСбезНДСПриход);

	
	DRV.НомерРегистра = 1;
	DRV.ТипЧека = 2;
	DRV.ПолучитьРегистр();
	СуммаВозвратПрихода = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаВозвратПрихода",СуммаВозвратПрихода);
	
	инд = 5;//ПолучитьИндексНалога("10");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 02 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	СуммаНДС10ВозвратПрихода = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаВозвратПриходаНДС10",СуммаНДС10ВозвратПрихода);
	
	инд = 6;//ПолучитьИндексНалога("18");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 02 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	СуммаНДС18ВозвратПрихода = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаВозвратПриходаНДС18",СуммаНДС18ВозвратПрихода);
	
	инд = 4;//ПолучитьИндексНалога("без НДС");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 02 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	СуммаНДСбезНДСВозвратПрихода = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаВозвратПриходабезНДС",СуммаНДСбезНДСВозвратПрихода);
	
	
	
	// платежи
	DRV.НомерРегистра = 3;
	DRV.ТипЧека = 1;
	DRV.ТипЗакрытия = 0;
	DRV.ПолучитьРегистр();
	СуммаПриходНал = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаПриходНал",СуммаПриходНал);
	
	DRV.НомерРегистра = 3;
	DRV.ТипЧека = 2;
	DRV.ТипЗакрытия = 0;
	DRV.ПолучитьРегистр();
	СуммаВозвратПриходаНал = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаВозвратПриходаНал",СуммаВозвратПриходаНал);
	
	DRV.НомерРегистра = 3;
	DRV.ТипЧека = 1;
	DRV.ТипЗакрытия = 1;
	DRV.ПолучитьРегистр();
	СуммаПриходБНал = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаПриходБНал",СуммаПриходБНал);
	
	DRV.НомерРегистра = 3;
	DRV.ТипЧека = 2;
	DRV.ТипЗакрытия = 1;
	DRV.ПолучитьРегистр();
	СуммаВозвратПриходаБНал = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаВозвратПриходаБНал",СуммаВозвратПриходаБНал);
	
	//Выручка
	DRV.НомерРегистра = 11;
	DRV.ПолучитьРегистр();
	СуммаВыручка = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаВыручка",СуммаВыручка);
	
	// сменные итоги 	
	DRV.НомерРегистра = 12;
	DRV.ТипОперации = 0;
	DRV.ПолучитьРегистр();
	СменныйИтогПриход = DRV.Сумма;
	ВыходныеПараметры.Вставить("СменныйИтогПриход",СменныйИтогПриход);
	
	DRV.НомерРегистра = 12;
	DRV.ТипОперации = 2;
	DRV.ПолучитьРегистр();
	СменныйИтогВозвратПрихода = DRV.Сумма;
	ВыходныеПараметры.Вставить("СменныйИтогВозвратПрихода",СменныйИтогВозвратПрихода);
	
	// { Получим номера ФН и дату фискализации
	
	DRV.НомерРегистра = 47;
	DRV.ПолучитьРегистр();
	НомерФН = DRV.СерийныйНомер;
	ВыходныеПараметры.Вставить("НомерФН",НомерФН);
	
	DRV.НомерРегистра = 48;
	DRV.ПолучитьРегистр();
	ДатаРегистрации = Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда);
	ВыходныеПараметры.Вставить("ДатаРегистрацииФН",ДатаРегистрации);
	
	// }
	
	
	//ВыходныеПараметры.Добавить(СтрукПослФД);
	
	Логирование(1,"Закрытие смены","Окончание - " + ПреобразоватьВJSON(ВыходныеПараметры));
	
	Возврат Истина;
	
КонецФункции

Функция Выручка(ВыходныеПараметры)
	
	Логирование(1,"Выручка","Начало");
	
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	
	DRV.Режим = 3;
	DRV.Пароль = ПараметрыТО.Password;;
	DRV.УстановитьРежим();
	
	Если DRV.Результат <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Выручка","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	//Выручка
	DRV.НомерРегистра = 11;
	DRV.ПолучитьРегистр();
	СуммаВыручка = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаВыручка",СуммаВыручка);
	
	Логирование(1,"Выручка","Окончание - " + ПреобразоватьВJSON(ВыходныеПараметры));
	
	Возврат Истина;
	
КонецФункции

Функция ОтчетОТекущемСостоянииРасчетов(ВыходныеПараметры)
	
	Логирование(1,"Отчет расчеты ККТ","Начало");
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	
	DRV.Режим = 2;
	DRV.Пароль = ПараметрыТО.Password;;
	DRV.УстановитьРежим();
	
	Если DRV.Результат <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Отчет расчеты ККТ","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	
	DRV.ТипОтчета = 42;
	DRV.Отчет();
	
	Если DRV.Результат <> 0 Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Отчет расчеты ККТ","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат Ложь;
	КонецЕсли;
	Ответ = Истина;
	Возврат Ответ;
	
	//Попытка 
	//	Ответ = DRV.ОтчетОТекущемСостоянииРасчетов(ПараметрыТО.ИдУстройства);
	//Исключение
	//	Ответ = Ложь;
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов>. " + ОписаниеОшибки());
	//	Возврат Ответ;
	//КонецПопытки;
	//
	//Если Ответ Тогда
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить("Смена открыта");
	//Иначе
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить("");
	//	DRV.ПолучитьОшибку(ВыходныеПараметры[0]);
	//КонецЕсли;
	//
	//Возврат Ответ;
КонецФункции

Функция ПолучитьТекущееСостояние(ВыходныеПараметры)
	
	Логирование(1,"Текущее состояние ККТ","начало");
	
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ПараметрыСостояния = "";
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	DRV.Пароль = ПараметрыТО.Password;
	
	DRV.НомерРегистра = 44;
	ПолучитьРегистр();
	
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если не Ответ Тогда
		Логирование(0,"Текущее состояние ККТ","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат ложь;
	КонецЕсли;
	
	КоличествоНепереданныхФД = DRV.Count;
	
	DRV.НомерРегистра = 45;
	ПолучитьРегистр();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	
	Если не Ответ Тогда
		Логирование(0,"Текущее состояние ККТ","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат ложь;
	КонецЕсли;
	
	Попытка
		ДатаПервогоНепереданногоФД = Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда);
	Исключение
		ДатаПервогоНепереданногоФД = Дата(1,1,1);
	КонецПопытки;
	
	DRV.НомерРегистра = 53;
	ПолучитьРегистр();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	
	Если не Ответ Тогда
		Логирование(0,"Текущее состояние ККТ","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат ложь;
	КонецЕсли;
	
	//ДанныеПоСмене = DRV.Count;
	НомерЧека = DRV.Count + 1;
	НомерСмены = DRV.Смена; //+ 1; // всегда номер последней закрытой смены
	
	DRV.НомерРегистра = 18;
	ПолучитьРегистр();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	
	Если не Ответ Тогда
		Логирование(0,"Текущее состояние ККТ","Ошибка - " + DRV.ОписаниеРезультата);
		Возврат ложь;
	КонецЕсли;
	
	СменаОткрыта = DRV.СменаОткрыта; // на всякий случай
	
	НомерСмены = НомерСмены + ?(СменаОткрыта,0,1);
	//DRV.НомерРегистра = 19;
	//DRV.ПолучитьРегистр();
	//Ответ = ?(DRV.Результат = 0, истина, ложь);
	//
	//Если не Ответ Тогда
	//	Логирование(0,"Текущее состояние ККТ","Ошибка - " + DRV.ОписаниеРезультата);
	//КонецЕсли;
	//
	//НомерЧека = DRV.НомерЧека;
	
	DRV.НомерРегистра = 52;
	ПолучитьРегистр();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Попытка
		ДатаСмены = Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда)
	Исключение
		ДатаСмены = Дата(1,1,1);
	КонецПопытки;
	
	ТипПослЧека = DRV.LastCheckType;
	НомерДокумента = DRV.НомерДокумента;
	
	
	
	
	Если не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		Если DRV.ОписаниеРезультата = "Ошибок нет" Тогда
			ВыходныеПараметры.ОписаниеОшибки.Добавить("Нет связи с кассовым аппаратом");
		Иначе
			ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		КонецЕсли;
		Логирование(0,"Текущее состояние ККТ","Ошибка - " + DRV.ОписаниеРезультата);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);		
		ВыходныеПараметры.Вставить("НОмерЧека",НомерЧека);
		ВыходныеПараметры.Вставить("КоличествоНепереданныхФД"   , КоличествоНепереданныхФД); 
		ВыходныеПараметры.Вставить("НомерПервогоНепереданногоФД", Неопределено); 
		ВыходныеПараметры.Вставить("ДатаПервогоНепереданногоФД ", ДатаПервогоНепереданногоФД); 
		ВыходныеПараметры.Вставить("ДатаСменыККТ",ДатаСмены);
		ВыходныеПараметры.Вставить("НомерСменыККТ",НомерСмены);
		ВыходныеПараметры.Вставить("КоличествоЧеков",номерЧека);
		ВыходныеПараметры.Вставить("КоличествоФД",НомерДокумента);
		//Параметры.Вставить("ПревышеноВремяОжиданияОтветаОФД");
		//Параметры.Вставить("НеобходимаСтрочнаяЗаменаФН");
		//Параметры.Вставить("ПамятьФНПереполнена");
		//Параметры.Вставить("РесурсФНИсчерпан");
		ВыходныеПараметры.Вставить("НомерДокумента",НомерДокумента);
		ВыходныеПараметры.Вставить("СменаОткрыта",СменаОткрыта=1);
		//1 – чек прихода;
		//2 – чек возврата прихода;
		//4 – чек расхода;
		//5 – чек возврата расхода;
		//7 - чек коррекции прихода;
		//8 – чек коррекции возврата прихода;
		//9 – чек корреции расхода;
		//10 – чек коррекции возврата расхода
		ВыходныеПараметры.Вставить("ТипЧека",ТипПослЧека);
		ВыходныеПараметры.Вставить("ДатаДокумента",ДатаСмены);
		ВыходныеПараметры.Вставить("ФискальныйПризнак",DRV.ФискальныйПризнак);
		Логирование(1,"Текущее состояние ККТ","Выходные параметры " + ПреобразоватьВJSON(ВыходныеПараметры));
	КонецЕсли;
	
	//DRV.ПолучитьСостояние();
	//
	//Ответ = ?(DRV.Результат = 0, истина, ложь);
	//Если не Ответ Тогда
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить("" + DRV.ОписаниеРезультата);
	//КонецЕсли;
	
	
	//Попытка
	//	Ответ = DRV.ПолучитьТекущееСостояние(ПараметрыТО.ИДУстройства, НомерДокумента, НомерСмены, СтатусСмены, ПараметрыСостояния);
	//	Если не Ответ Тогда
	//		ВыходныеПараметры.Очистить();
	//		ВыходныеПараметры.Добавить("");
	//		DRV.ПолучитьОшибку(ВыходныеПараметры[0]);
	//		Возврат Ответ;
	//	Иначе
	//		ВыходныеПараметры.Очистить();
	//		ВыходныеПараметры.Добавить(НомерСмены);
	//		ВыходныеПараметры.Добавить(НомерДокумента);
	//		ВыходныеПараметры.Добавить(СтатусСмены); 
	//		Если не ПустаяСтрока(ПараметрыСостояния) Тогда
	//			ВыходныеПараметры.Добавить(ПолучитьПараметрыСостоянияИзXMLПакета(ПараметрыСостояния));
	//		КонецЕсли;
	//	КонецЕсли;
	//Исключение
	//	Ответ = Ложь;
	//	ВыходныеПараметры.Очистить();
	//	ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.ПолучитьТекущееСостояние>. " + ОписаниеОшибки());
	//	Возврат Ответ;
	//КонецПопытки;
	глОжидание.Конец();
	Возврат Ответ;
	
КонецФункции

Функция КопияПоследнегоЧека(ВыходныеПараметры)
	Логирование(1,"Копия последнего чека","начало");
	
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ПараметрыСостояния = "";
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	DRV.Пароль = ПараметрыТО.Password;

	DRV.Режим = 1;
	DRV.УстановитьРежим();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	
	Если не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Копия последнего чека","Ошибка - " + DRV.ОписаниеРезультата);
	КонецЕсли;
	
	DRV.НовыйДокумент();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	
	Если не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Копия последнего чека","Ошибка - " + DRV.ОписаниеРезультата);
	КонецЕсли;
	
	DRV.ПечатьКопииПоследнегоЧека();
	
	Ответ = ?(DRV.Результат = 0, истина, ложь);

	Если не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Копия последнего чека","Ошибка - " + DRV.ОписаниеРезультата);
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПроверитьИОткрытьСмену(ВходныеПараметры,ВыходныеПараметры)

	МестоРеализации = Неопределено;
	Если ТипЗнч(ВходныеПараметры) = Тип("Структура") и ВходныеПараметры.Свойство("МестоРеализации") Тогда
		МестоРеализации = ВходныеПараметры.МестоРеализации;
	КонецЕсли;
	
	СменаТТ = ИнтерфейсРМ.ТекущаяСмена(МестоРеализации);
	Если СменаТТ.Пустая() Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Смена ТТ не открыта");
		Логирование(0,"Открытие смены","Ошибка - Смена ТТ не открыта");
		Возврат Ложь;
	КонецЕсли;

	Если ТипЗнч(ВходныеПараметры) = Тип("Структура") и ВходныеПараметры.Свойство("МестоРеализации") Тогда
		ВходныеПараметры.Удалить("МестоРеализации");
	КонецЕсли;
	
	Если НачалоДня(СменаТТ.Дата) <> НачалоДня(ТекущаяДатаСеанса()) Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Предыдущая смена ТТ не закрыта!");
		Логирование(0,"Открытие смены","Ошибка - Предыдущая смена ТТ не закрыта!");
		Возврат Ложь;
	КонецЕсли;
	
	
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	DRV.Пароль = "30";
	
	DRV.Режим = 1;
	DRV.УстановитьРежим();
	
	DRV.НовыйДокумент();
	Ответ = ?(DRV.Результат = 0, истина, ложь);
	Если Не Ответ Тогда
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
			ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				ош = Новый Массив;
				ВыходныеПараметры.ОписаниеОшибки = ош;
			КонецЕсли;
		КонецЕсли;
		ВыходныеПараметры.ОписаниеОшибки.Добавить(DRV.ОписаниеРезультата);
		Логирование(0,"Открытие смены","Ошибка - " + DRV.ОписаниеРезультата);
	Иначе
		Если DRV.СменаОткрыта = 0 Тогда
			//Ответ = ОткрытьСмену(ВходныеПараметры,ВыходныеПараметры);
			Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
			Иначе
				Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
					ош = Новый Массив;
					ВыходныеПараметры.ОписаниеОшибки = ош;
				КонецЕсли;
			КонецЕсли;
			ВыходныеПараметры.ОписаниеОшибки.Добавить("Смена ККМ не открыта");
			Логирование(0,"Открытие смены","Ошибка - Смена ККМ не открыта!");
			Ответ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Ответ Тогда
		DRV.НомерРегистра = 53;
		DRV.ПолучитьРегистр();
		
		//ДанныеПоСмене = DRV.Count;
		номерЧека = DRV.Count;
		НомерСмены = DRV.Смена;
	КонецЕсли;
	
	// добавить проверку документа 
	Если Ответ Тогда
		
		Если ПолучитьСменуКассы().Пустая() и DRV.СменаОткрыта = 0 Тогда
			ОткрытиеСмены = Документы.Касса_ОткрытиеСмены.СоздатьДокумент();
			ОткрытиеСмены.Автор = глПользователь;
			ОткрытиеСмены.Дата = ТекущаяДатаСеанса();
			ОткрытиеСмены.Касса = глПараметрыРМ.ККМ;
			ОткрытиеСмены.КассаНомер = глПараметрыРМ.ККМ.КодСуп;
			ОткрытиеСмены.КассаЗаводскойНомер = глПараметрыРМ.ККМ.ЗаводскойНомер;
			ОткрытиеСмены.НомерСмены = НомерСмены;
			ОткрытиеСмены.НомерДокумента = НомерЧека;
			ОткрытиеСмены.РабочееМесто = глРабочееМесто;
			ОткрытиеСмены.СменаТТ = СменаТТ; 
			
			Если ИнтерфейсРМ.ПопыткаДействияСОбъектом(ОткрытиеСмены,"Объект.Записать(РежимЗаписиДокумента.Проведение)") Тогда
				Если ЭтоПерваяКассоваяСмена() Тогда
					Попытка
						УправлениеСерверамиПриложений.СоздатьЛокальнуюФайловуюБазу();	
					Исключение
						ЗаписьЖурналаРегистрации("Резервирование.Ошибка создания локальной базы", УровеньЖурналаРегистрации.Ошибка, , ОткрытиеСмены.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
				КонецЕсли;
				//Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") ТОгда
				//	ош = Новый Массив;
				//	ВыходныеПараметры.Вставить("ОписаниеОшибки", ош);
				//Иначе
				//	Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				//		ош = Новый Массив;
				//		ВыходныеПараметры.ОписаниеОшибки = ош;
				//	КонецЕсли;
				//КонецЕсли;
				//ВыходныеПараметры.ОписаниеОшибки.Добавить("Кассовая смена не открыта");
				//Логирование(0,"Открытие смены","Ошибка - Кассовая смена не открыта");
				//Ответ = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьРегистр()
	ЗамерМС = ТекущаяУниверсальнаяДатаВМиллисекундах();
	DRV.ПолучитьРегистр();
	ПрошлоМС = ТекущаяУниверсальнаяДатаВМиллисекундах() - ЗамерМС;
	Если ПрошлоМС > 15000 Тогда
		глОжидание.Начало("Установка связи с кассовым аппаратом...", "Проверьте, что касса включена и корректно подключена");
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция ПолучитьПараметрыСмены(ВыходныеПараметры)
	
	Логирование(1,"ПараметрыСмены","Начало");
	DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	
	DRV.НомерРегистра = 44;
	DRV.ПолучитьРегистр();
	
	КоличествоНепереданныхФД = DRV.Count;
	Логирование(0,"ПараметрыСмены","значение регистра 44 неотправлено в ОФД - " + DRV.Count);
	
	DRV.НомерРегистра = 45;
	DRV.ПолучитьРегистр();
	
	Попытка
		ДатаПервогоНепереданногоФД = Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда);
	Исключение
		ДатаПервогоНепереданногоФД = Дата(1,1,1);
	КонецПопытки;
	
	Логирование(0,"ПараметрыСмены","значение регистра 45 дата неотправленого в ОФД - " + ДатаПервогоНепереданногоФД);
	
	DRV.НомерРегистра = 53;
	DRV.ПолучитьРегистр();
	
	//ДанныеПоСмене = DRV.Count;
	номерЧека = DRV.Count;
	НомерСмены = DRV.Смена;
	Логирование(0,"ПараметрыСмены","значение регистра 53 данные по смене - " + DRV.Count + "; " + DRV.Смена);
	
	DRV.НомерРегистра = 52;
	DRV.ПолучитьРегистр();
	
	Попытка
		ДатаСмены = Дата(DRV.Год,DRV.Месяц,DRV.День,DRV.Час,DRV.Минута,DRV.Секунда)
	Исключение
		ДатаСмены = Дата(1,1,1);
	КонецПопытки;
	
	ТипПослЧека = DRV.LastCheckType;
	НомерДокумента = DRV.НомерДокумента;
	
	//ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Вставить("НомерСмены",НомерСмены);
	ВыходныеПараметры.Вставить("НомерЧека",НомерЧека);
	//ВыходныеПараметры.Добавить(Параметры);
	
	//Параметры = новый Структура;
	ВыходныеПараметры.Вставить("КоличествоНепереданныхФД"   , КоличествоНепереданныхФД); 
	ВыходныеПараметры.Вставить("НомерПервогоНепереданногоФД", Неопределено); 
	ВыходныеПараметры.Вставить("ДатаПервогоНепереданногоФД ", ДатаПервогоНепереданногоФД); 
	ВыходныеПараметры.Вставить("ДатаСменыККТ",ДатаСмены);
	ВыходныеПараметры.Вставить("НомерСменыККТ",НомерСмены);
	ВыходныеПараметры.Вставить("КоличествоЧеков",номерЧека);
	ВыходныеПараметры.Вставить("КоличествоФД",НомерДокумента);
	//Параметры.Вставить("ПревышеноВремяОжиданияОтветаОФД");
	//Параметры.Вставить("НеобходимаСтрочнаяЗаменаФН");
	//Параметры.Вставить("ПамятьФНПереполнена");
	//Параметры.Вставить("РесурсФНИсчерпан");
	
	ВыходныеПараметры.Вставить("НомерДокумента",НомерДокумента);
//1 – чек прихода;
//2 – чек возврата прихода;
//4 – чек расхода;
//5 – чек возврата расхода;
//7 - чек коррекции прихода;
//8 – чек коррекции возврата прихода;
//9 – чек корреции расхода;
//10 – чек коррекции возврата расхода
	ВыходныеПараметры.Вставить("ТипЧека",ТипПослЧека);
	ВыходныеПараметры.Вставить("ДатаДокумента",ДатаСмены);
	ВыходныеПараметры.Вставить("ФискальныйПризнак",DRV.ФискальныйПризнак);
	
	// запрос сумм по регистрам
	// суммы регистраций
	DRV.НомерРегистра = 1;
	DRV.ТипЧека = 1;
	DRV.ПолучитьРегистр();
	СуммаПриход = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаПриход",СуммаПриход);
	
	инд = 5;//ПолучитьИндексНалога("10");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 01 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	СуммаНДС10Приход = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаПриходНДС10",СуммаНДС10Приход);
	
	инд = 6;//ПолучитьИндексНалога("18");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 01 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	Логирование(0,"НДС",Поток);
	СуммаНДС18Приход = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаПриходНДС18",СуммаНДС18Приход);
	
	инд = 4;//ПолучитьИндексНалога("без НДС");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 01 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	СуммаНДСбезНДСПриход = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаПриходбезНДС",СуммаНДСбезНДСПриход);

	
	DRV.НомерРегистра = 1;
	DRV.ТипЧека = 2;
	DRV.ПолучитьРегистр();
	СуммаВозвратПрихода = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаВозвратПрихода",СуммаВозвратПрихода);
	
	инд = 5;//ПолучитьИндексНалога("10");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 02 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	СуммаНДС10ВозвратПрихода = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаВозвратПриходаНДС10",СуммаНДС10ВозвратПрихода);
	
	инд = 6;//ПолучитьИндексНалога("18");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 02 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	СуммаНДС18ВозвратПрихода = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаВозвратПриходаНДС18",СуммаНДС18ВозвратПрихода);
	
	инд = 4;//ПолучитьИндексНалога("без НДС");
	
	DRV.ФорматПотокаДанных = 5;
	DRV.ТаймаутACK = 500;
	DRV.ТаймаутENQ = 5000;
	DRV.ВыходнойПотокДанных = "91 1F 02 " + Формат(инд,"ЧЦ=2; ЧВН=");
	DRV.ВыполнитьКоманду();
	Поток = DRV.ВходнойПотокДанных;
	СуммаНДСбезНДСВозвратПрихода = ПолучитьСуммуНДС(Поток);
	ВыходныеПараметры.Вставить("СуммаВозвратПриходабезНДС",СуммаНДСбезНДСВозвратПрихода);
	
	
	
	// платежи
	DRV.НомерРегистра = 3;
	DRV.ТипЧека = 1;
	DRV.ТипЗакрытия = 0;
	DRV.ПолучитьРегистр();
	СуммаПриходНал = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаПриходНал",СуммаПриходНал);
	
	DRV.НомерРегистра = 3;
	DRV.ТипЧека = 2;
	DRV.ТипЗакрытия = 0;
	DRV.ПолучитьРегистр();
	СуммаВозвратПриходаНал = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаВозвратПриходаНал",СуммаВозвратПриходаНал);
	
	DRV.НомерРегистра = 3;
	DRV.ТипЧека = 1;
	DRV.ТипЗакрытия = 1;
	DRV.ПолучитьРегистр();
	СуммаПриходБНал = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаПриходБНал",СуммаПриходБНал);
	
	DRV.НомерРегистра = 3;
	DRV.ТипЧека = 2;
	DRV.ТипЗакрытия = 1;
	DRV.ПолучитьРегистр();
	СуммаВозвратПриходаБНал = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаВозвратПриходаБНал",СуммаВозвратПриходаБНал);
	
	//Выручка
	DRV.НомерРегистра = 11;
	DRV.ПолучитьРегистр();
	СуммаВыручка = DRV.Сумма;
	ВыходныеПараметры.Вставить("СуммаВыручка",СуммаВыручка);
	
	// сменные итоги 	
	DRV.НомерРегистра = 12;
	DRV.ТипОперации = 0;
	DRV.ПолучитьРегистр();
	СменныйИтогПриход = DRV.Сумма;
	ВыходныеПараметры.Вставить("СменныйИтогПриход",СменныйИтогПриход);
	
	DRV.НомерРегистра = 12;
	DRV.ТипОперации = 2;
	DRV.ПолучитьРегистр();
	СменныйИтогВозвратПрихода = DRV.Сумма;
	ВыходныеПараметры.Вставить("СменныйИтогВозвратПрихода",СменныйИтогВозвратПрихода);
	
	
	//ВыходныеПараметры.Добавить(СтрукПослФД);
	
	Логирование(1,"ПараметрыСмены","Окончание - " + ПреобразоватьВJSON(ВыходныеПараметры));
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ДопПроцедуры

Функция ПолучитьСменуКассы()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ВложенныйЗапрос.Ссылка,
	               |	ВложенныйЗапрос.МоментВремени КАК МоментВремени
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		Касса_ОткрытиеСмены.Ссылка КАК Ссылка,
	               |		Касса_ОткрытиеСмены.МоментВремени КАК МоментВремени
	               |	ИЗ
	               |		Документ.Касса_ОткрытиеСмены КАК Касса_ОткрытиеСмены
	               |	ГДЕ
	               |		НЕ Касса_ОткрытиеСмены.ПометкаУдаления
	               |		И Касса_ОткрытиеСмены.РабочееМесто = &РабочееМесто
	               |	
	               |	ОБЪЕДИНИТЬ ВСЕ
	               |	
	               |	ВЫБРАТЬ
	               |		Касса_ЗакрытиеСмены.Ссылка,
	               |		Касса_ЗакрытиеСмены.МоментВремени
	               |	ИЗ
	               |		Документ.Касса_ЗакрытиеСмены КАК Касса_ЗакрытиеСмены
	               |	ГДЕ
	               |		НЕ Касса_ЗакрытиеСмены.ПометкаУдаления
	               |		И Касса_ЗакрытиеСмены.РабочееМесто = &РабочееМесто) КАК ВложенныйЗапрос
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	МоментВремени УБЫВ";
				   
	Запрос.УстановитьПараметр("РабочееМесто", глРабочееМесто);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ТипЗнч(Выборка.Ссылка) = Тип("ДокументСсылка.Касса_ОткрытиеСмены") Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли; 
	
	Возврат Документы.ОткрытиеСмены.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьПараметрыИзXMLПакета(Данные,НомерСмены)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = новый Структура;
	Параметры.Вставить("КоличествоНепереданныхФД"   , Неопределено); 
	Параметры.Вставить("НомерПервогоНепереданногоФД", Неопределено); 
	Параметры.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); 
	Параметры.Вставить("ДатаСменыККТ");
	Параметры.Вставить("НомерСменыККТ",НомерСмены);
	Параметры.Вставить("КоличествоЧеков");
	Параметры.Вставить("КоличествоФД");
	Параметры.Вставить("ПревышеноВремяОжиданияОтветаОФД");
	Параметры.Вставить("НеобходимаСтрочнаяЗаменаФН");
	Параметры.Вставить("ПамятьФНПереполнена");
	Параметры.Вставить("РесурсФНИсчерпан");
	
	Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.КоличествоНепереданныхФД    = Число(ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter"));
			Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
			ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
			Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
				Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьXMLПакетЧека(МассивСтрокЧека,МассивСтрокОплаты,ТипЧека,СуммаЧека)
	
	СуммаЧека = 0;
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(?(ТипЧека,2,1)));
	//// Email отправляет средствами 1C
	//Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
	//	ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
	//КонецЕсли;
	//// SMS отправляет средствами 1C
	//Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
	//	ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
	//КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Если МассивСтрокЧека.Количество() <> 0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		Для инд = 0 по МассивСтрокЧека.Количество() - 1 Цикл
			ПозицияЧека = МассивСтрокЧека[инд];
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
				ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ПозицияЧека.Наименование));
				ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ПозицияЧека.Количество));
				ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ПозицияЧека.Цена));
				ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ПозицияЧека.Сумма));
				ЗаписьXML.ЗаписатьАтрибут("Tax"       , XMLСтрока(ПозицияЧека.СтавкаНДС));
				ЗаписьXML.ЗаписатьКонецЭлемента();
				СуммаЧека = СуммаЧека + ПозицияЧека.Сумма;
			ИначеЕсли ПозицияЧека.Свойство("Текст") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ПозицияЧека.Текст));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				Если СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) = 13 Тогда
					ТипШК = "EAN13";
				ИначеЕсли СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) = 8 Тогда
					ТипШК = "EAN8";
				Иначе
					ТипШК = "QR";
				КонецЕсли;
				ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТипШК));
				ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ПозицияЧека.ШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если МассивСтрокОплаты.Количество() <> 0 Тогда
		СуммаНал = 0;
		СуммаБНал = 0;
		Для индекс = 0 по МассивСтрокОплаты.Количество() - 1 Цикл
			ПозицияОплаты = МассивСтрокОплаты[индекс];
			ТипОплаты = ?(ПозицияОплаты.Свойство("ТипОплаты") , ПозицияОплаты.ТипОплаты, "Нал");
			СуммаОплаты = ?(ПозицияОплаты.Свойство("Сумма") , ПозицияОплаты.Сумма, 0);
			Если ТипОплаты = "Нал" Тогда
				СуммаНал = СуммаНал + СуммаОплаты;
			Иначе
				СуммаБНал = СуммаБНал + СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНал));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(СуммаБНал));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(0));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(0));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция ПолучитьXMLПакетТекста(Строки)
	
	ВыхЗнач = Новый Массив();
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
	
		Для индекс = 0 по Строки.Количество() - 1 Цикл
			СтрокаТекста = Строки[индекс];
			Если СокрЛП(СтрокаТекста) = "[отрезка]" Тогда
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Текст = ЗаписьXML.Закрыть();
				ВыхЗнач.Добавить(Текст);
				
				ЗаписьXML = Новый ЗаписьXML();
				ЗаписьXML.УстановитьСтроку("UTF-8");
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			ИначеЕсли найти(СтрокаТекста,"|ШтрихКод|") > 0 Тогда
				поз = Найти(СтрокаТекста,"|ШтрихКод|");
				ВыделеннаяСтрока = Сред(СтрокаТекста, Поз + СтрДлина("|ШтрихКод|") + 1);
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока,1, Найти(ВыделеннаяСтрока, "|") - 1); 
				Если СтрДлина(СокрЛП(ВремШтрихКод)) = 13 Тогда
					ТипШК = "EAN13";
				ИначеЕсли СтрДлина(СокрЛП(ВремШтрихКод)) = 8 Тогда
					ТипШК = "EAN8";
				Иначе
					ТипШК = "QR";
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТипШК));
				ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				Если СтрДлина(СтрокаТекста) > 48 Тогда
					Пока СтрДлина(СтрокаТекста) > 48 Цикл
						СтрТекста = Лев(СтрокаТекста,48);
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(СтрТекста));
						ЗаписьXML.ЗаписатьКонецЭлемента();
						СтрокаТекста = Сред(СтрокаТекста,49);
						Если СтрДлина(СтрокаТекста) <> 0 Тогда
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(СтрокаТекста));
							ЗаписьXML.ЗаписатьКонецЭлемента();
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
					ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(СтрокаТекста));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	ВыхЗнач.Добавить(Текст);
	
	Возврат ВыхЗнач;

КонецФункции

Функция ПолучитьПараметрыСостоянияИзXMLПакета(Данные) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = Новый Структура();
	Параметры.Вставить("КоличествоНепереданныхФД"   , Неопределено); 
	Параметры.Вставить("НомерПервогоНепереданногоФД", Неопределено); 
	Параметры.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); 
	
	Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.КоличествоНепереданныхФД    = Число(ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter"));
			Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
			ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
			Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
				Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Процедура Логирование(Уровень,Место,Текст)
	Если УровеньЛогирования <= Уровень Тогда
		Если ТипЗнч(Текст) <> Тип("Строка") Тогда
			Текст = ПреобразоватьВJSON(Текст);
			//Текст = json(Текст);
			//сообщить(Текст);
		КонецЕсли;
		
		ПутьДляЛогирования = РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(ПараметрыСеанса.ТекущаяИБ, "ПутьДляЛогирования");//Константы.ПутьДляЛогирования.Получить();
		Если ПутьДляЛогирования = Неопределено Тогда
			ПутьДляЛогирования = Константы.ПутьДляЛогирования.Получить();
		КонецЕсли;
		Файл = Новый Файл(ПутьДляЛогирования);
		Если Файл.Существует() ТОгда
			Каталог = Формат(ТекущаяДата(),"ДФ=yyyyMMdd");
			НовыйПуть = ПутьДляЛогирования + "\" + Каталог;
			Файл = Новый Файл(НовыйПуть);
			Если не Файл.Существует() Тогда
				СоздатьКаталог(НовыйПуть);
			КонецЕсли;
			ИмяФайла = НовыйПуть + "\F" + Каталог + ".log";
			ТекстовыйДокумент = новый ЗаписьТекста(ИмяФайла,,,Истина);
			//ФАйл = Новый Файл(ИмяФайла);
			//Если Файл.Существует() Тогда
			//	//ТекстовыйДокумент = Новый ТекстовыйДокумент;
			//	//ТекстовыйДокумент.Прочитать(ИмяФайла);
			//Иначе
			//	ТекстовыйДокумент = Новый ТекстовыйДокумент;
			//КонецЕсли;
			СтрокаЗаписи = "" + ТекущаяДата() + ";" + Место + ";" + Текст;
			ТекстовыйДокумент.ЗаписатьСтроку(СтрокаЗаписи);
			ТекстовыйДокумент.Закрыть();
			//ТекстовыйДокумент.ДобавитьСтроку(СтрокаЗаписи);
			//ТекстовыйДокумент.Записать(ИмяФайла);
		Иначе
			 ЗаписьЖурналаРегистрации("Ошибка логирования",УровеньЖурналаРегистрации.Ошибка,,,"Путь логирования не существует");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьВJSON(ВхПараметры)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON,ВхПараметры);
	//СериализаторXDTO.ЗаписатьJSON(ЗаписьJSON,ВхПараметры,НазначениеТипаXML.Явное);
	ВыхСтрока = ЗаписьJSON.Закрыть();
	Возврат ВыхСтрока;
	
КонецФункции

Функция ПолучитьИндексНалога(НДСТекст,Формат = "1.0")
	
	//СоответНалогов = Новый Соответствие;
	//СоответНалогов.Вставить("18",1106);
	//СоответНалогов.Вставить("10",1107);
	////СоответНалогов.Вставить("0",1104);	
	//СоответНалогов.Вставить("без НДС",1105);
	////СоответНалогов.Вставить("18/118",1106);
	////СоответНалогов.Вставить("10/110",1107);
	СоответНалогов = Новый Соответствие;
	СоответНалогов.Вставить("18",6);
	СоответНалогов.Вставить("10",5);
	СоответНалогов.Вставить("без НДС",4);
	ИндексНалога = СоответНалогов.Получить(НДСТекст);
	Возврат ИндексНалога;
	
	
	//СоотвХекс = новый Соответствие;
	//СоотвХекс.Вставить("0",0);
	//СоотвХекс.Вставить("1",1);
	//СоотвХекс.Вставить("2",2);
	//СоотвХекс.Вставить("3",3);
	//СоотвХекс.Вставить("4",4);
	//СоотвХекс.Вставить("5",5);
	//СоотвХекс.Вставить("6",6);
	//СоотвХекс.Вставить("7",7);
	//СоотвХекс.Вставить("8",8);
	//СоотвХекс.Вставить("9",9);
	//СоотвХекс.Вставить("A",10);
	//СоотвХекс.Вставить("B",11);
	//СоотвХекс.Вставить("C",12);
	//СоотвХекс.Вставить("D",13);
	//СоотвХекс.Вставить("E",14);
	//СоотвХекс.Вставить("F",15);
	//
	//ТегНалога = СоответНалогов.Получить(НДСТекст);
	//ИндексНалога = 0;
	//
	//DRV.ФорматПотокаДанных = 5;
	//DRV.ТаймаутACK = 500;
	//DRV.ТаймаутENQ = 5000;
	//Для Инд = 1 по 6 Цикл
	//	DRV.ВыходнойПотокДанных = "46 0D 00 " + Формат(инд,"ЧЦ=2; ЧВН=") + " 03";
	//	DRV.ВыполнитьКоманду();
	//	Данные = DRV.ВходнойПотокДанных;
	//	Если Лев(Данные,2) = "55" Тогда // все хорошо
	//		Данные = Сред(Данные,4);
	//		Если Лев(Данные,2) = "00" Тогда // нет ошибок
	//			Данные = Сред(Данные,4);
	//			СтрБайт = Лев(данные,2);
	//			млБайт = Сред(Данные,4,2);
	//			ЧислоСтБайт = СоотвХекс.Получить(ВРег(Лев(СтрБайт,1)))*16 + СоотвХекс.Получить(ВРег(Прав(СтрБайт,1)));
	//			ЧислоМлБайт = СоотвХекс.Получить(ВРег(Лев(млБайт,1)))*16 + СоотвХекс.Получить(ВРег(Прав(млБайт,1)));
	//			ТегПолученный = 256*ЧислоСтБайт + ЧислоМлБайт;
	//			Если ТегНалога = ТегПолученный Тогда
	//				ИндексНалога = Инд;
	//				Прервать;
	//			КонецЕсли;
	//		Иначе
	//			Прервать;
	//		КонецЕсли;
	//	Иначе
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Возврат ?(ИндексНалога = 0, ?(Формат = "1.0",6,3),ИндексНалога);
	
КонецФункции

Функция ПолучитьСуммуНДС(Данные)
	Итого = 0;
	Если Лев(Данные,2) = "55" Тогда 
		Данные = Сред(Данные,4);
		Если Лев(Данные,2) = "00" Тогда // нет ошибок
			Данные = Сред(Данные,4);
			Для к = 1 по 6 Цикл 
				Попытка
					Сумма = Число(Лев(СокрЛП(Данные),2));
				Исключение
					Сумма = 0;
				КонецПопытки;
				Итого = Итого*100 + Сумма;
				Данные = Сред(Данные,4);
			КонецЦикла;
			Итого = Итого / 100;
		КонецЕсли;
	КонецЕсли;
	Возврат Итого;
КонецФункции
//&НаКлиенте
Функция ЭтоПерваяКассоваяСмена()
	
	Перем Выборка, Запрос;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Касса_ОткрытиеСмены.Ссылка) КАК Ссылка
	|ИЗ
	|	Документ.Касса_ОткрытиеСмены КАК Касса_ОткрытиеСмены
	|ГДЕ
	|	Касса_ОткрытиеСмены.РабочееМесто = &РабочееМесто
	|	И Касса_ОткрытиеСмены.Дата МЕЖДУ Началопериода(&Дата,День) И Конецпериода(&Дата,День)";
	Запрос.УстановитьПараметр("РабочееМесто",глРабочееМесто);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> 1 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции
#КонецОбласти

#Область ТочкаВхода
// Точка входа
Функция ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	Логирование(1,"Выполнить команду","начало - " + Команда);
	ВыходныеПараметры = новый Структура;
	
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Логирование(0,"Выполнить команду","ошибка - Не задан объект справочника ТО");
			Отключить();
			Возврат Ложь;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Логирование(0,"Выполнить команду","ошибка - Ошибка загрузки Драйвера");
			Отключить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//Подключить();
	
	Если Команда = "ОткрытьСмену" тогда
		ответКоманды = ОткрытьСмену(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "ЗакрытьСмену" Тогда
		ответКоманды =  ЗакрытьСмену(ВходныеПараметры,ВыходныеПараметры);
		//Возврат НапечататьОтчетСГашением(ВыходныеПараметры);
	ИначеЕсли Команда = "НапечататьОтчетБезГашения" Тогда
		ОтветКоманды = НапечататьОтчетБезГашения(ВыходныеПараметры);
		//Возврат НапечататьОтчетБезГашения(ВыходныеПараметры);
	ИначеЕсли Команда = "НапечататьОтчетСГашением" Тогда
		//Возврат НапечататьОтчетСГашением(ВыходныеПараметры);
	ИначеЕсли Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
		ответКоманды =  ОтчетОТекущемСостоянииРасчетов(ВыходныеПараметры);
	ИначеЕсли Команда = "ФискализацияЧека" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВходныеПараметры,ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  ФисказизацияЧека(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	ИначеЕсли Команда = "ЧекКоррекции" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВходныеПараметры,ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  ЧекКоррекции(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	ИначеЕсли Команда = "АннулироватьЧек" Тогда
		ответКоманды =  АннулироватьЧек(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "ПечатьТекста" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВходныеПараметры,ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  ПечатьТекста(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	ИначеЕсли Команда = "ОткрытьЧек" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВходныеПараметры,ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  ОткрытьЧек(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	ИначеЕсли Команда = "ОтменитьЧек" Тогда
		ответКоманды =  ОтменитьЧек(ВыходныеПараметры);
	ИначеЕсли Команда = "Внесение" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВходныеПараметры,ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  Внесение(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	ИначеЕсли Команда = "Выемка" Тогда
		ответКоманды = 	ПроверитьИОткрытьСмену(ВходныеПараметры,ВыходныеПараметры);
		Если ответКоманды Тогда
			ответКоманды =  Выемка(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
	//ИначеЕсли Команда = "ПечатьШтрихКода" Тогда
		//Возврат ПечатьШтрихКода(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "ОткрытьДенежныйЯщик" Тогда
		ответКоманды =  ОткрытьДенежныйЯщик(ВыходныеПараметры);
	ИначеЕсли Команда = "ПолучитьТекущееСостояние" Тогда
		ответКоманды = ПолучитьТекущееСостояние(ВыходныеПараметры);
	ИначеЕсли Команда = "КопияПоследнегоЧека" Тогда
		ответКоманды = КопияПоследнегоЧека(ВыходныеПараметры);
	ИначеЕсли Команда = "Выручка" Тогда
		ответКоманды = Выручка(ВыходныеПараметры);
	ИначеЕсли Команда = "ПечатьКопииЧека" Тогда
		ответКоманды =  ПечатьКопииЧека(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "ПолучитьПараметрыСмены" Тогда
		ответКоманды = ПолучитьПараметрыСмены(ВыходныеПараметры);
	Иначе
		ВыходныеПараметры.Очистить();
		Если не ВыходныеПараметры.Свойство("ОписаниеОшибки") тогда
			Ош = Новый Массив;
			ВыходныеПараметры.Вставить("ОписаниеОшибки",ош);
		Иначе
			Если ТипЗнч(ВыходныеПараметры.ОписаниеОшибки) <> Тип("Массив") Тогда
				Ош = Новый Массив;
				ВыходныеПараметры.Вставить("ОписаниеОшибки",ош);
			КонецЕсли;
		КонецЕсли;
		
		ВыходныеПараметры.ОписаниеОшибки.Добавить("Неизвестная команда");
		Логирование(1,"Выполнить команду","Неизвестная команда:" + Команда);
		Отключить();
		Возврат Ложь;
	КонецЕсли;
	
	//Отключить();
	
	глОжидание.Конец();
	Возврат ответКоманды;
	
КонецФункции

#КонецОбласти

// Обработка ошибок
//
Функция Ошибка() Экспорт
	
	Если DRV.ResultCode=-12 Тогда	// не поддерживается в данной модели
		Возврат Ложь;
	КонецЕсли;
	
	Если DRV.ResultCode = -3828 Тогда 	// Z-отчет, смена не открыта
		Результат.СменаНеОткрыта = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Если DRV.ResultCode <> 0 Тогда
		
		ЗаписьЖурналаРегистрации("Торговое оборудование.Ошибка", УровеньЖурналаРегистрации.Ошибка, ТО.Метаданные(), ТО.Ссылка, DRV.ResultDescription);
		
		Результат.Ошибка = Истина;
		Результат.Описание = "Ошибка ККМ: "+DRV.ResultCode;
		Результат.Подробно = DRV.ResultDescription;
		//Если DRV.resultcode = -10 или DRV.resultcode = -1 тогда
		//	Текст1 = "ВЫШЕЛ ЧЕК ?";
		//	
		//	Текст2 = "Чек вышел из кассы ?";
		//	
		//	ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "ДА","НЕТ","");
		//	Если ответ = "ДА" тогда
		//		Результат.Ошибка = ложь;
		//	Иначе
				Результат.Ошибка = истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Установка параметров подключения
//
Функция Подключить(БезПроверок=Ложь) Экспорт
	
	Логирование(1,"Подключение ФН","Начало");
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Логирование(0,"Подключение ФН","Ошибка - Не задан объект справочника ТО");
			Возврат Ложь;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Логирование(0,"Подключение ФН","Ошибка - Ошибка загрузки Драйвера");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	Если не ПараметрыТО.Свойство("ИдУстройства") Тогда
		ПараметрыТО.вставить("ИдУстройства","");
	КонецЕсли;
		
		DRV.ДобавитьУстройство();
		Если DRV.Результат = 0 Тогда
			ПараметрыТО.ИДУстройства = DRV.НомерТекущегоУстройства;
			DRV.Модель                         = ПараметрыТО.Model;
			DRV.НомерПорта                     = ПараметрыТО.PortNumber;
			DRV.СкоростьОбмена                 = ПараметрыТО.BaudRate;
			DRV.ИмяКомпьютера				   = ПараметрыТО.MachineName;
			DRV.ИспользоватьПарольУстройства   = 1;
			DRV.ПарольУстройства               = "0";
			DRV.УстройствоВключено = 1;
			//DRV.УстановитьПароль();
			
			Если DRV.Результат <> 0 Тогда
				Результат.Ошибка = Истина;
				Результат.Описание = DRV.ОписаниеРезультата;
				Логирование(0,"Подключение ФН","Ошибка - " + Результат.Описание);
				DRV.УдалитьУстройство();
				ПараметрыТО.ИДУстройства = Неопределено;
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Результат.Ошибка = Истина;
			Результат.Описание = DRV.ОписаниеРезультата;
			Логирование(0,"Подключение ФН","Ошибка - " + Результат.Описание);
			Возврат Ложь;
		КонецЕсли;
		
		Если не ТО.Ссылка.Пустая() Тогда
			Попытка
				ТО.Параметры = ЗначениеВСтрокуВнутр(ПараметрыТО);
				то.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;

	Возврат Истина;
КонецФункции

// Отключение драйвера
//
Процедура Отключить() Экспорт
	
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Возврат;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для к = 1 по DRV.КоличествоУстройств Цикл
		DRV.ВыходИзРежима();
		DRV.НомерТекущегоУстройства = к;
		DRV.УстройствоВключено = 0;
		DRV.УдалитьУстройство();
	КонецЦикла;
	//DRV.ВыходИзРежима();
	//DRV.НомерТекущегоУстройства = ПараметрыТО.ИдУстройства;
	//DRV.УстройствоВключено = 0;
	//DRV.УдалитьУстройство();
	
КонецПроцедуры

Функция ТестУстройства() Экспорт
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Возврат Ложь;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Ответ = Подключить();
	Если Не Ответ ТОгда
		Возврат Ложь;
	КонецЕсли;
	
	Отключить();
	
	Возврат Ответ;
	
КонецФункции

// Синхронизация времени ККМ с системным
//
Процедура СинхронизироватьВремя()
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если DRV.Protocol=0 Тогда
		// протокол АТОЛ 1.х - надо перейти в режим отчетов с гашением
		DRV.Mode=3;
		DRV.SetMode();
		Если Ошибка() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// на другие сутки время не переводим
	Если ТекущаяДата() > КонецДня(Дата(DRV.Year,DRV.Month,DRV.Day)) ИЛИ 
		ТекущаяДата() < НачалоДня(Дата(DRV.Year,DRV.Month,DRV.Day)) Тогда
		
		Предупреждение("Ошибка времени" + Символы.ПС + "Нельзя перевести время на другие сутки!");
		
		Возврат;
	КонецЕсли;
	 
	Если Дата(DRV.Year,DRV.Month,DRV.Day) <> НачалоДня(ТекущаяДата()) Тогда
		DRV.Day		= День(ТекущаяДата());
		DRV.Month	= Месяц(ТекущаяДата());
		DRV.Year	= Год(ТекущаяДата());
		DRV.SetDate();
		Если DRV.ResultCode=-3893 Тогда
			// требуется подтверждение
			DRV.SetDate();
		КонецЕсли;
		Если Ошибка() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	DRV.Hour	= Час(ТекущаяДата());
	DRV.Minute	= Минута(ТекущаяДата());
	DRV.Second	= Секунда(ТекущаяДата());
	DRV.SetTime();
	
	Ошибка();
	
КонецПроцедуры

// Форматирование строк
//
Функция ДополнитьСтроку(Стр, ДлинаСтроки, Выравнивание=0, СтрДоб=" ")
	
	ТекДлинаСтроки = СтрДлина(Стр);
	
	Если ТекДлинаСтроки >= ДлинаСтроки Тогда
		Если Выравнивание=2 Тогда	// по правому краю
			Возврат Прав(Стр, ДлинаСтроки);
		Иначе
			Возврат Лев(Стр, ДлинаСтроки);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьСлева	=0;
	ДобавитьСправа	=0;
	
	Если Выравнивание=0 Тогда		// по левому краю
		ДобавитьСправа=ДлинаСтроки-ТекДлинаСтроки;
		
	ИначеЕсли Выравнивание=2 Тогда	// по правому краю
		ДобавитьСлева =ДлинаСтроки-ТекДлинаСтроки;
		
	Иначе							// по центру
		ДобавитьСлева =Цел((ДлинаСтроки-ТекДлинаСтроки)/2);
		ДобавитьСправа=ДлинаСтроки-ТекДлинаСтроки-ДобавитьСлева;
		
	КонецЕсли;
	
	Для н=1 По ДобавитьСлева Цикл
		Стр=СтрДоб+Стр;
	КонецЦикла;
	
	Для н=1 По ДобавитьСправа Цикл
		Стр=Стр+СтрДоб;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

// Перенос строк по словам
//
Функция ПереносСтрок(ИсходнаяСтрока,ФрмДлина)
	
	// сначала получим список слов исходной строки
	СписокСлов = Новый Массив;
	Стр=СокрЛП(ИсходнаяСтрока)+" ";
	
	Пока ЗначениеЗаполнено(Стр) Цикл
		н=Найти(Стр," ");
		СписокСлов.Добавить(Лев(Стр,н-1));
		Стр=Сред(Стр,н+1);
	КонецЦикла;
	
	// а теперь отформатируем под нужную длину
	СписокСтрок = Новый Массив;
	
	нс=0;
	Пока нс<=СписокСлов.Количество()-1 Цикл
		
		Стр="";
		Пока СтрДлина(Стр+СписокСлов[нс]) + ?(Стр="",0,1) <= ФрмДлина Цикл
			
			Стр=Стр+?(Стр="",""," ")+СписокСлов[нс];
			
			нс=нс+1;
			Если нс>СписокСлов.Количество()-1 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДлинаСтроки=СтрДлина(Стр)+?(Стр="",0,1);
		
		Если нс<=СписокСлов.Количество()-1 И ДлинаСтроки < Цел(ФрмДлина/2)+1 Тогда
			// строка заполнена меньше чем на половину, а следующее слово уже не помещается - 
			// обрезаем его и переносим остаток
			Слово=СписокСлов[нс];
			
			Стр=Стр+?(Стр="",""," ")+Лев(Слово,ФрмДлина-ДлинаСтроки-1)+"-";
			СписокСлов.Вставить(нс+1,Сред(Слово,ФрмДлина-ДлинаСтроки));
			
			нс=нс+1;
		КонецЕсли;
		
		СписокСтрок.Добавить(Стр);
	КонецЦикла;
	
	Возврат СписокСтрок;
КонецФункции

// Выполнение конкретных действий на ККМ
//
Функция ВыполнитьДействиеККМ(Тип, Параметры)
	Возврат Истина;
	//Если Тип="Строка" Тогда
	//	СтрПечати		=Строка(Параметры.Caption);
	//	Выравнивание	=Число(Параметры.Alignment);
	//	Перенос			=Число(Параметры.TextWrap);
	//	
	//	DRV.TextWrap=0;  // встроенным переносом пользоваться нельзя, потому как 
	//	// нам надо еще и выравнивание вправо, по центру, а этого нет
	//	
	//	Если (Перенос=0) ИЛИ (СтрДлина(СтрПечати)<=МаксДлинаСтроки) Тогда
	//		
	//		DRV.Caption=ДополнитьСтроку(СтрПечати, МаксДлинаСтроки, Выравнивание, " ");
	//		DRV.PrintString();
	//		
	//	Иначе
	//		
	//		СписокСтрок=ПереносСтрок(СтрПечати,МаксДлинаСтроки);
	//		Для каждого СтрПечати Из СписокСтрок Цикл
	//			DRV.Caption=ДополнитьСтроку(СтрПечати, МаксДлинаСтроки, Выравнивание, " ");
	//			DRV.PrintString();
	//		КонецЦикла;
	//		
	//	КонецЕсли;
	//	
	//ИначеЕсли Тип="Картинка" Тогда
	//	//FileName=СокрЛП(Параметры.FileName);
	//	FileName=СокрЛП(Параметры.Caption);
	//	
	//	DRV.FileName	=FileName;					Если Ошибка() Тогда Возврат Ложь; КонецЕсли;
	//	DRV.PrintPurpose=1;
	//	DRV.PrintBitmapFromFile();
	//	
	//ИначеЕсли Тип="ШтрихКод" Тогда
	//	Barcode				=Строка(Параметры.Caption);
	//	Height				=Число(Параметры.BarCodeHeight); Если Height=0 Тогда Height=50; КонецЕсли;
	//	BarcodeType			=Число(Параметры.BarCodeType);
	//	BarcodeControlCode	=Число(Параметры.BarCodeControlCode);
	//	PrintBarcodeText	=?(ЗначениеЗаполнено(Параметры.BarCodePrintText),1,0);
	//	
	//	Если ЗначениеЗаполнено(Barcode) Тогда
	//		DRV.Barcode				=Barcode;			Если Ошибка() Тогда Возврат Ложь; КонецЕсли;
	//		DRV.Height				=Height;			Если Ошибка() Тогда Возврат Ложь; КонецЕсли;
	//		DRV.PrintBarcodeText	=PrintBarcodeText;	Если Ошибка() Тогда Возврат Ложь; КонецЕсли;
	//		Попытка
	//			DRV.BarcodeType		=BarcodeType;
	//		Исключение КонецПопытки;
	//		Попытка
	//			DRV.BarcodeControlCode=BarcodeControlCode;
	//		Исключение КонецПопытки;
	//		DRV.PrintPurpose		=1;
	//		DRV.PrintBarcode();
	//	КонецЕсли;
	//	
	//ИначеЕсли Тип="Внесение" Тогда
	//	DRV.Summ=Число(Параметры.Summ);		Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//	DRV.CashIncome();
	//	
	//ИначеЕсли Тип="Выплата" Тогда
	//	DRV.Summ=Число(Параметры.Summ);		Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//	DRV.CashOutcome();
	//	
	//ИначеЕсли Тип="ОткрытьЧекПродажа" Тогда
	//	DRV.CheckType=1;
	//	DRV.OpenCheck();
	//	
	//ИначеЕсли Тип="ОткрытьЧекВозврат" Тогда
	//	DRV.CheckType=2;
	//	DRV.OpenCheck();
	//	
	//ИначеЕсли Тип="ЗакрытьЧек" Тогда
	//	DRV.CloseCheck();
	//	
	//ИначеЕсли Тип="ОтменаЧека" Тогда
	//	DRV.CancelCheck();
	//	
	//ИначеЕсли Тип="Регистрация" Тогда
	//	Name		=Лев(Параметры.Name,Мин(DRV.CharLineLength,40));
	//	Price		=Число(Параметры.Price);
	//	Quantity	=Число(Параметры.Quantity);		Если Quantity=0 Тогда Quantity=1; КонецЕсли;
	//	Department = Число(Параметры.Department);	Если Department=0 Тогда Department=1; КонецЕсли;
	//	
	//	DRV.Name		=Name;						Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//	DRV.Price		=Price;						Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//	DRV.Quantity	=Quantity;					Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//	DRV.Department	=Department;				Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//	DRV.Registration();
	//	
	//ИначеЕсли Тип="Возврат" Тогда
	//	Name		=Лев(Параметры.Name,Мин(DRV.CharLineLength,40));
	//	Price		=Число(Параметры.Price);
	//	Quantity	=Число(Параметры.Quantity);		Если Quantity=0 Тогда Quantity=1; КонецЕсли;
	//	EnableCheckSumm	=?(ЗначениеЗаполнено(Параметры.EnableCheckSumm),1,0);
	//	
	//	DRV.Name		=Name;						Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//	DRV.Price		=Price;						Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//	DRV.Quantity	=Quantity;					Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//	DRV.EnableCheckSumm=EnableCheckSumm;		Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//	DRV.Return();
	//	
	//ИначеЕсли Тип="Оплата" Тогда
	//	Summ		=Число(Параметры.Summ);
	//	TypeClose	=Макс(1,Число(Параметры.TypeClose)) - 1;	// в драйвере наличные - 0, а у нас 1
	//	
	//	Если Summ<0 Тогда
	//		DRV.Summ		=-Summ;					Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//		DRV.TypeClose	=TypeClose;				Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//		DRV.StornoPayment();
	//	Иначе
	//		DRV.Summ		=Summ;					Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//		DRV.TypeClose	=TypeClose;				Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
	//		DRV.Payment();
	//	КонецЕсли;
	//	
	//ИначеЕсли Тип="ЧастичнаяОтрезка" Тогда
	//	// принудительная частичная отрезка внутри задания
	//	// Предварительно печатаем заголовок для корректной отрезки 
	//	DRV.PrintHeader();
	//	// Отрезка 
	//	DRV.PartialCut();
	//	
	//КонецЕсли;
	//
	//Если Ошибка() Тогда
	//	DRV.CancelCheck();
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//Возврат Истина;
КонецФункции

// Определяет использовать общий пароль или нет
//
Функция ПарольДляРегистрации(ТаблицаЗадания)
	
	Если НЕ ФлагОбщийПароль Тогда
		Возврат СокрЛП(Пароль);
	КонецЕсли;
	
	// общий пароль применяется только для регистрации продаж,
	// если это выплата или внесение денег в кассу, то используется введеный пароль
	Для каждого Задание Из ТаблицаЗадания Цикл
		Если Задание.ТипДанных="Внесение" ИЛИ Задание.ТипДанных="Выплата" Тогда
			Возврат СокрЛП(Пароль);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(ОбщийПароль);
КонецФункции

// Процедура печати чека
//
Процедура РегистрацияНаККМ(ТаблицаЗадания)
	
	//Если НЕ Подключить() Тогда
	//	Возврат;
	//КонецЕсли;
	
	//DRV.ОткрытьЧек(ИдУстройства,,,,истина);
	//
	//// проверка состояния последнего чека (GetStatus() вызывается в Подключить())
	//Если (DRV.Mode=1) И (DRV.CheckState<>0) Тогда
	//	DRV.CancelCheck();
	//	Если Ошибка() Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// проверка текущего режима
	//DRV.Mode	=1;
	//DRV.SetMode();
	//Если Ошибка() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если НеФискальныйРежим Тогда
	//	ПреобразоватьЗаданиеВНефискальное(ТаблицаЗадания);
	//	Печать(ТаблицаЗадания);
	//	Возврат;
	//КонецЕсли; 
	//
	//СтрПечати="";
	//Для каждого Задание Из ТаблицаЗадания Цикл
	//	
	//	ТипДанных=Задание.ТипДанных;
	//	
	//	Если (ТипДанных="Строка") ИЛИ (ТипДанных="ШтрихКод") ИЛИ (ТипДанных="Картинка") Тогда
	//		Параметры = СформироватьСтруктуруПараметровСтроки(Задание.Данные, Задание.Параметры);
	//		
	//		СтрПечати=СтрПечати+Параметры.Caption;
	//		Если Параметры.TextNewLine=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Параметры.Caption = СтрПечати;
	//		СтрПечати="";
	//		
	//	Иначе
	//		Параметры=Задание.Параметры;
	//	КонецЕсли;
	//	
	//	Если НЕ ВыполнитьДействиеККМ(ТипДанных,Параметры) Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

// Заменяет в таблице задания фискальные команды печатью строк
//
Процедура ПреобразоватьЗаданиеВНефискальное(ТаблицаЗадания)
	
	Задание = ТаблицаЗадания.Вставить(0);
	Задание.Данные    = "НЕФИСКАЛЬНЫЙ ЧЕК";
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Центр,ПереводСтроки";
	
	ИтогоСуммаЧека		= 0;
	ИтогоСуммаОплаты	= 0;
	ИндексСтроки		= 0;
	
	Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
		
		Задание = ТаблицаЗадания[ИндексСтроки];
		Тип = Задание.ТипДанных;
		
		Если Тип="Внесение" Тогда
			СтрВправо = "="+Формат( Задание.Параметры.Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку("ВНЕСЕНИЕ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
		ИначеЕсли Тип="Выплата" Тогда
			СтрВправо = "="+Формат( Задание.Параметры.Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку("ВЫПЛАТА", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
		ИначеЕсли Тип="ОткрытьЧекПродажа" Тогда
			Задание.ТипДанных = "Пропустить";
			
		ИначеЕсли Тип="ОткрытьЧекВозврат" Тогда
			Задание.Данные    = "ВОЗВРАТ";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
		ИначеЕсли Тип="ЗакрытьЧек" Тогда
			Если ИтогоСуммаОплаты > ИтогоСуммаЧека Тогда
				СтрВправо = "="+Формат( ИтогоСуммаОплаты - ИтогоСуммаЧека, "ЧЦ=15;ЧДЦ=2");
				Задание.Данные    = ДополнитьСтроку("СДАЧА", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
				Задание.ТипДанных = "Строка";
				Задание.Параметры = "Право,ПереводСтроки";
				Задание = ТаблицаЗадания.Добавить();
			КонецЕсли; 
			
			Задание.Данные    = "НЕФИСКАЛЬНЫЙ ЧЕК";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Центр,ПереводСтроки";
			
		ИначеЕсли Тип="Регистрация" ИЛИ Тип="Возврат" Тогда
			Price		=Число(Задание.Параметры.Price);
			Quantity	=Число(Задание.Параметры.Quantity);
			
			Задание.Данные    = "="+Формат( Price*Quantity, "ЧЦ=15;ЧДЦ=2" );
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
			ИтогоСуммаЧека = ИтогоСуммаЧека + Price*Quantity;
			
		ИначеЕсли Тип="Оплата" Тогда
			Summ		=Число(Задание.Параметры.Summ);
			TypeClose	=Макс(1,Число(Задание.Параметры.TypeClose)) - 1;	// в драйвере наличные - 0, а у нас 1
			
			Если ИтогоСуммаОплаты = 0 Тогда
				СтрВправо = "="+Формат(ИтогоСуммаЧека, "ЧЦ=15;ЧДЦ=2");
				Задание.Данные    = ДополнитьСтроку("ИТОГ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
				Задание.ТипДанных = "Строка";
				Задание.Параметры = "Право,ПереводСтроки";
				
				ИндексСтроки = ИндексСтроки + 1;
				Задание = ТаблицаЗадания.Вставить(ИндексСтроки);
			КонецЕсли;
			
			СтрВлево  = ?(TypeClose=0, "НАЛИЧНЫМИ", "ТИП ОПЛАТЫ "+TypeClose);
			СтрВправо = "="+Формат(Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку(СтрВлево, МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
			ИтогоСуммаОплаты = ИтогоСуммаОплаты + Summ;
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Задание = ТаблицаЗадания.Добавить();
	СтрВправо = Формат( ТекущаяДата(), "ДФ=дд-ММ-гг")+" "+Формат( ТекущаяДата(), "ДФ=ЧЧ:мм");
	Задание.Данные    = ДополнитьСтроку("#0001", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,ПереводСтроки";
	
	Задание = ТаблицаЗадания.Добавить();
	СтрВправо = "0000001 ";
	Задание.Данные    = ДополнитьСтроку(" ККМ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,ПереводСтроки";
	
КонецПроцедуры
 
// Нефискальная печать задания
//
Процедура Печать(ТаблицаЗадания, КолвоКопий=1)
	
	Перем ТипДанных,Параметры;
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	
	Для н=1 По КолвоКопий Цикл
		
	//Если Найти("ПРИМ88ТК,ПРИМ08ТК,СП101ФРК,",СокрЛП(ТО.КодМодели)) Тогда
		// эти фискальные регистраторы  печатают только при открытом документе,
		// и в методе PrintHeader() для этого специально что-то сделано
		DRV.PrintHeader();
	//КонецЕсли;
		ИндексСтроки = 0;
		Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
			
			Если НЕ СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,ТипДанных,Параметры,"Строка,ШтрихКод,Картинка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ВыполнитьДействиеККМ(ТипДанных,Параметры) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		//Если Найти("ПРИМ88ТК,ПРИМ08ТК,СП101ФРК",СокрЛП(ТО.КодМодели)) Тогда
			DRV.PrintFooter();
			Если Найти("ПРИМ88ТК,ПРИМ08ТК",СокрЛП(ТО.КодМодели)) Тогда
				DRV.PartialCut();
			КонецЕсли;
			
		//Иначе
		//	DRV.PrintHeader();
		//	DRV.PartialCut();
			
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Нефискальная печать на станции подкладного документа
//
Процедура ПечатьПД(ТаблицаЗадания, КолвоКопий=1)
	Перем Параметры;
	
	//мясновъ
	//перенаправляем в обычную Печать т.к. нет режима печати ПД
	
	Печать(ТаблицаЗадания,КолвоКопий);
	возврат;
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	// подкладная печать работает только в режиме регистрации ???
	DRV.Mode	=1;
	DRV.SetMode();
	Если Ошибка() Тогда
		Возврат;
	КонецЕсли;
	
	DRV.SlipDocCharLineLength	=ПараметрыТО.СимволовВСтроке;
	DRV.SlipDocTopMargin		=SlipDocTopMargin;
	DRV.SlipDocLeftMargin		=SlipDocLeftMargin;
	
	Для н=1 По КолвоКопий Цикл
		
		
		ИндексСтроки = 0;
		Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
			
			DRV.BeginDocument();
			Пока DRV.ResultCode=-3807 Цикл
				Текст1 = "Вставьте бумагу!";
				Текст2 = "Вставьте бумагу и нажмите <ОК>" +Символы.ПС+ "Для отмены печати нажмите <Отмена>";
				Если ИнтерфейсРМ.ВопросПредупреждение("Предупреждение", Текст1, Текст2, "ОК","","Esc=Отмена") = "Отмена" Тогда
					Результат.Ошибка = Истина;
					Результат.Описание = "";
					Возврат;
				КонецЕсли;
				
				DRV.BeginDocument();
			КонецЦикла;
			
			Если Ошибка() Тогда
				Возврат;
			КонецЕсли;
			
			НомСтр=0;
			Пока СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,,Параметры,"Строка")=1 Цикл
				
				DRV.Caption=ДополнитьСтроку(Параметры.Caption, DRV.SlipDocCharLineLength, Число(Параметры.Alignment), " ");
				DRV.PrintString();
				
				НомСтр=НомСтр+1;
				Если НомСтр=КолвоСтрокНаЛист Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			DRV.SlipDocOrientation=0;
			DRV.EndDocument();
			Задержка(3000);
			Если Ошибка() Тогда
				DRV.ClearOutput();
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,ТипДанных="",Параметры,СтрТипыДанных)
	
	СтрПечати="";
	Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
		
		Задание = ТаблицаЗадания[ИндексСтроки];
		
		ТипДанных=Задание.ТипДанных;
		Если Найти(СтрТипыДанных,ТипДанных)=0 Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Если ТипДанных = "ЧастичнаяОтрезка" Тогда
				Возврат Истина;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Параметры = СформироватьСтруктуруПараметровСтроки(Задание.Данные, Задание.Параметры);
		
		СтрПечати=СтрПечати+Параметры.Caption;
		Если Параметры.TextNewLine=0 Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		Параметры.Caption = СтрПечати;
		ИндексСтроки = ИндексСтроки + 1;
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура Задержка(ВремяМСек)
	
	Отсечка=РаботаСокнами.GetTimer();
	Пока РаботаСокнами.GetTimer()-Отсечка < ВремяМСек Цикл
	КонецЦикла;
	
КонецПроцедуры

// Формирование отчетов ККМ
//
Процедура ПолучитьОтчет(ТипОтчета)
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка состояния последнего чека
	Если (DRV.Mode=1) И (DRV.CheckState<>0) Тогда
		DRV.CancelCheck();
		Если Ошибка() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОтчета="Z" Тогда
		Mode=3;
		ReportType=1;
	Иначе
		Mode=2;
		Если ТипОтчета="X" Тогда
			ReportType=2;
		ИначеЕсли ТипОтчета="ПоСекциям" Тогда
			ReportType=7;
		ИначеЕсли ТипОтчета="ПоКассирам" Тогда
			ReportType=8;
		ИначеЕсли ТипОтчета="Почасовой" Тогда
			ReportType=10;
		КонецЕсли;
	КонецЕсли;
	
	// установка необходимого режима и типа отчета
	DRV.Mode=Mode;
	DRV.SetMode();
	Если Ошибка() Тогда
		Возврат;
	КонецЕсли;
	
	DRV.ReportType=ReportType;
	DRV.Report();
	Ошибка();
	
КонецПроцедуры

// Принудительное открытие смены
//
//Процедура ОткрытьСмену()
	
	//Если НЕ Подключить(Истина) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//DRV.Mode=1;
	//DRV.SetMode();
	//Если Ошибка() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//DRV.OpenSession();
	//
	//Ошибка();
//КонецПроцедуры

//Процедура ЗакрытьСмену()
//	Рез = DRV.НапечататьОтчетСГашением(ИдУстройства);
//	Если не рез Тогда
//		ОписОш = "";
//		DRV.ПолучитьОшибку(ОписОш);
//		Сообщить("Ошибка при закрытии смены:" + ОписОш);
//	КонецЕсли;
//	
//КонецПроцедуры

// Формирует таблицу значений из макета "ПараметрыСтроки"
//
Процедура ЗаполнитьПараметрыСтроки()
	
	ТаблицаПараметрыСтроки = Новый ТаблицаЗначений;
	ТаблицаПараметрыСтроки.Колонки.Добавить("ИдПарам");
	ТаблицаПараметрыСтроки.Колонки.Добавить("СтрЗнач");
	ТаблицаПараметрыСтроки.Колонки.Добавить("ЧислЗач");
	
	Таб = ПолучитьМакет("ПараметрыСтроки");
	
	Для НомСтр=1 По Таб.ВысотаТаблицы Цикл
		
		ИдПарам = Таб.Область(НомСтр,1).Текст;
		Если НЕ ЗначениеЗаполнено(ИдПарам) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСтроки = ТаблицаПараметрыСтроки.Добавить();
		ПараметрыСтроки.ИдПарам = ИдПарам;
		ПараметрыСтроки.СтрЗнач = Врег(Таб.Область(НомСтр,2).Текст);
		ПараметрыСтроки.ЧислЗач = Число(Таб.Область(НомСтр,3).Текст);
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует строку параметров в структуру, используя таблицу параметров
//
Функция СформироватьСтруктуруПараметровСтроки(Знач СтрПечати, Знач СтрПараметры)
	
	СтруктураПараметров = Новый Структура;
	
	Если СтрПечати="СтрОтчерк" Тогда
		СтрПечати="==================================================";
	ИначеЕсли СтрПечати="СтрЧерта" Тогда
		СтрПечати="--------------------------------------------------";
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Caption",СтрПечати);
	
	РазделительСтрок = Символы.ПС + Символы.ВК;
	СтрПараметры = СтрЗаменить(СтрПараметры, РазделительСтрок,"");	// убираем лишние переводы строк
	СтрПараметры = СтрЗаменить(СтрПараметры, ",", РазделительСтрок);
	
	Для н=1 По СтрЧислоСтрок(СтрПараметры) Цикл
		
		Парам = СтрПолучитьСтроку(СтрПараметры,н);
		
		Если Лев(Парам,8)="ВысотаШК" Тогда
			ЧислЗач = Число(Сред(Парам,9))*5;	// в драйвере ККМ не в мм, а в неких элементарных строках
			СтруктураПараметров.Вставить("BarCodeHeight", ЧислЗач);
		Иначе
			ПараметрыСтроки = ТаблицаПараметрыСтроки.Найти(Врег(Парам), "СтрЗнач");
			Если ПараметрыСтроки <> Неопределено Тогда
				СтруктураПараметров.Вставить(ПараметрыСтроки.ИдПарам, ПараметрыСтроки.ЧислЗач);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ПараметрыСтроки Из ТаблицаПараметрыСтроки Цикл
		
		Если НЕ СтруктураПараметров.Свойство(ПараметрыСтроки.ИдПарам) Тогда
			СтруктураПараметров.Вставить(ПараметрыСтроки.ИдПарам, ПараметрыСтроки.ЧислЗач);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
КонецФункции

#КонецЕсли

Результат = Новый Структура("Ошибка,Описание,Подробно,СменаНеОткрыта", Ложь,"","",Ложь);

ИгнорироватьОбщийПароль = Ложь;

УровеньЛогирования = 0;
