
#Если Клиент Тогда

Перем ФормаЖурнала;          // форма из которой идет работа с журналом

Перем СводныйЖурнал Экспорт; // признак того, что это сводный журнал
Перем ДоставкаЖурнал Экспорт; // признак того, что это журнал для доставки
Перем ОтборУстановлен Экспорт; // Признак того, что в журнале установлен отбор
Перем КолвоКолонокМест,КолвоЗаказов;
Перем ВыбАвтор; 
Перем НачПериодаЗакрытых; 
Перем ПравоДоступОткрытыеЗаказы;

// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
// Вызывается каждый раз при обращении к объекту обработки.
// Здесь надо прописать сброс переменных в начальные значения
// Реквизиты и табличные части уже сброшены
Процедура УстановкаНачальныхЗначений() Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Вызывается из обработчика ПередОткрытием форм этой обработки,
// выполняет инициализацию рабочего места
//
Процедура ДействияПередОткрытиемФормы(ТекущаяФорма, Отказ) Экспорт
	
	ФормаЖурнала = ТекущаяФорма;
	ФормаЖурнала.Стиль = БиблиотекаСтилей[глПараметрыРМ.ИмяСтиля];
	
	//----------------------------------------------------------
	Если РежимЗакрытых Тогда
		СводныйЖурнал = Ложь;
		ДоставкаЖурнал = Ложь;
		
		Если НЕ ОпределитьНачалоПериодаЗакрытых() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
	Иначе
		СводныйЖурнал = глПараметрыРМ.ЖурналЗаказовОткрытыеВид = 1;
		ДоставкаЖурнал = глВерсия=3 И глПараметрыРМ.ДоставкаЕсть И глПараметрыРМ.ДоставкаРежимИспользования<>1 
						И ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ДоставкаДоступОткрытыеЗаказы);
	КонецЕсли;
	
	ОтборУстановлен = Ложь;
	СоздатьСтруктуруЖурнала();
	
	// заполнение журнала
	ОбновитьЖурнал();
	
	Если РежимЗакрытых Тогда
		ПериодОбновления = глПараметрыРМ.ЖурналЗаказовЗакрытыеПериодОбновления;
	Иначе
		ПериодОбновления = глПараметрыРМ.ЖурналЗаказовОткрытыеПериодОбновления;
	КонецЕсли;
	Если ПериодОбновления<>0 Тогда
		ФормаЖурнала.ПодключитьОбработчикОжидания("ОбновитьЖурнал_ОбработчикОжидания", ПериодОбновления);
	КонецЕсли; 
	
КонецПроцедуры

// Вызывается из обработчика ПередЗакрытием форм этой обработки,
//
Процедура ДействияПередЗакрытиемФормы(ТекущаяФорма, Отказ) Экспорт
	
	Если НЕ РежимЗакрытых И НЕ СводныйЖурнал И глПараметрыРМ.ЖурналЗаказовОткрытыеВид = 1 
		И НЕ глФлагБлокировка Тогда
		// возврат в сводный журнал из простого по автору
		СводныйЖурнал = Истина;
		СоздатьСтруктуруЖурнала();
		
		Если НЕ ДоставкаЖурнал Тогда
			ЗаполнитьСводныйЖурнал(ВыбАвтор);
		Иначе
			ЗаполнитьДоставкаСводныйЖурнал(ВыбАвтор);
		КонецЕсли;
		
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	ФормаЖурнала = Неопределено; // иначе объект обработки остается в памяти и работают обработчики ожидания
	
КонецПроцедуры

// Обработка внешних событий
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
	
		глОтсечкаПростоя();
	
	_Знач = ОбработкаВнешнихСобытий.ПолучитьДанные(Источник,Событие,Данные);
	Если НЕ ЗначениеЗаполнено(_Знач) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(_Знач) = Тип("ДокументСсылка.Заказ") Тогда
		ОткрытьЗаказ(_Знач);
		Возврат;
	КонецЕсли;
	
	ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Клиенты");
	ФлагПовтора = Ложь;
	// < КС_ВДВ ------------------------------------------------------------ 
	//_Объект = ИнтерфейсРМ.ИдентификацияПоКарте("Идентификатор_"+_Знач, ТипПривязки, ФлагПовтора);
	
	_КартаДоступаКлиента = Неопределено;
	_Объект = ИнтерфейсРМ.ИдентификацияПоКарте("Идентификатор_"+_Знач, ТипПривязки, ФлагПовтора, _КартаДоступаКлиента);
	ава=ИнтерфейсРМ.ПроверитьИдентификаторПоШаблонам(_Знач,"","");
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Если НЕ ЗначениеЗаполнено(_Объект) Тогда
		Возврат;
		
	ИначеЕсли ТипЗнч(_Объект) = Тип("Структура") Тогда
			Если _Объект.Тип = Справочники.ТипыШаблоновШК.КартаДоступа Тогда
				Если ЗначениеЗаполнено(_КартаДоступаКлиента) Тогда
					Заказ = ксТрактир.ЗаказПоКартеДоступа(_КартаДоступаКлиента);
					Если ЗначениеЗаполнено(Заказ) Тогда
						Ст = ЖурналЗаказов.Найти(Заказ);
						Если Не Ст = Неопределено Тогда
							ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов.ТекущаяСТрока = Ст;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Текст1="Карта доступа не найдена!";                                                                                                         
					
					Текст2="Карта № "+_Объект.Значение+" отсутствует в справочнике!
					|Обратитесь к администратору...";
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				КонецЕсли;
			КонецЕсли;

	ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
		ИнтерфейсРМ.СменаПользователя(_Объект);
		
	ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.ПосадочныеМеста") Тогда
		ОбработкаВыбораПосадочногоМеста(_Объект);
		
	ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.Клиенты") Тогда
		// < КС_ВДВ ------------------------------------------------------------ 
		//ОбработкаВыбораКлиента(_Объект);
		//ОбработкаВыбораКлиента(_Объект, _КартаДоступаКлиента);
		Карта = ПолучитьКартуДоступаПоИдентификатору(_Знач);
		Если ЗначениеЗаполнено(Карта) Тогда
			Ст = ФормаЖурнала.ЖурналЗаказов.Найти(Карта.Идентификатор2);	
			Если Не Ст = Неопределено Тогда
				ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов.ТекущаяСТрока = Ст;
			КонецЕсли;
			
		КонецЕсли;
		
		// КС_ВДВ > ------------------------------------------------------------ 
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКартуДоступаПоИдентификатору(Идентификатор, СпособРегистрацииБейджа = 0) Экспорт 
	
	ИдентификаторHEX = Идентификатор;
	Если СтрДлина(ИдентификаторHEX) <= 16 И СтрДлина(ИдентификаторHEX) % 2 = 0 Тогда
		ИдентификаторHEX = Прав("00000000" + ИдентификаторHEX, 16);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Бэйдж", ПредопределенноеЗначение("Перечисление.ТипыКартДоступа.Временная"));
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("ИдентификаторHEX", ИдентификаторHEX);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КартыДоступа.Ссылка КАК КартаДоступа,
	|	2 КАК СпособРегистрацииБейджа
	|ИЗ
	|	Справочник.КартыДоступа КАК КартыДоступа
	|ГДЕ
	|	КартыДоступа.ТипКарты = &Бэйдж
	|	И КартыДоступа.Идентификатор = &Идентификатор
	|	И НЕ КартыДоступа.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КартыДоступа.Ссылка,
	|	3
	|ИЗ
	|	Справочник.КартыДоступа КАК КартыДоступа
	|ГДЕ
	|	КартыДоступа.ТипКарты = &Бэйдж
	|	И КартыДоступа.Идентификатор1 = &Идентификатор
	|	И НЕ КартыДоступа.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КартыДоступа.Ссылка,
	|	1
	|ИЗ
	|	Справочник.КартыДоступа КАК КартыДоступа
	|ГДЕ
	|	КартыДоступа.ТипКарты = &Бэйдж
	|	И КартыДоступа.Идентификатор2 = &Идентификатор
	|	И НЕ КартыДоступа.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КартыДоступа.Ссылка,
	|	2
	|ИЗ
	|	Справочник.КартыДоступа КАК КартыДоступа
	|ГДЕ
	|	КартыДоступа.ТипКарты = &Бэйдж
	|	И КартыДоступа.ИдентификаторHEX = &ИдентификаторHEX
	|	И НЕ КартыДоступа.ПометкаУдаления";
	
	Рез = Запрос.Выполнить().Выбрать();
	Если Рез.Следующий() Тогда
		КартаДоступа = Рез.КартаДоступа;
		СпособРегистрацииБейджа = Рез.СпособРегистрацииБейджа;
	Иначе
		КартаДоступа = ПредопределенноеЗначение("Справочник.КартыДоступа.ПустаяСсылка");
	КонецЕсли;

	//Если Рез.Пустой() Тогда
	//	КартаДоступа = Справочники.КартыДоступа.ПустаяСсылка();
	//Иначе
	//	КартаДоступа = Рез.Выгрузить()[0][0];
	//КонецЕсли;
	
	Возврат КартаДоступа;
		
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Открытие формы нового заказа
//
// Параметры:
//	Параметр1	- описание параметра
//
Процедура СоздатьНовыйЗаказ(ОбъектВвода=Неопределено,ЗакрытьФормы=Ложь) Экспорт
	
	ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("Заказ");
	ОбработкаЗаказ.Доставка = глДоставкаОсновнойРежим;
	
	Если НЕ глДоставкаОсновнойРежим Тогда
		Если НЕ ОбработкаЗаказ.СоздатьНовый(ОбъектВвода,,ЗакрытьФормы) Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	Если НЕ ЗакрытьФормы Тогда	
		ОбработкаЗаказ.ОткрытьРабочуюФормуЗаказа();
	КонецЕсли;	
	
КонецПроцедуры

// По кнопке Выбрать или из обработчика Выбор табличного поля
//
Процедура ОбработкаВыбораСтроки() Экспорт
	
	ТекущееЗначение = ОпределитьТекущийЗаказИлиАвтора(Истина);
	
	Если ТипЗнч(ТекущееЗначение) = Тип("ДокументСсылка.Заказ") Тогда
		ОткрытьЗаказ(ТекущееЗначение);
		
	ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("ДокументСсылка.Возврат") Тогда
		Заказ = ТекущееЗначение.Заказ;
		ЗаказДопИнф = РегистрыСведений.ЗаказДопИнф.Получить( Новый Структура("Заказ",Заказ) );
		ВозвратПоЗаказу(Заказ, ЗаказДопИнф);
		
	ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.Сотрудники") Тогда
		СводныйЖурнал = Ложь;
		ВыбАвтор = ТекущееЗначение;
		СоздатьСтруктуруЖурнала();
		ОбновитьЖурнал();
		
	КонецЕсли;
	
КонецПроцедуры

// Найти заказ по номеру и открыть
//
Процедура ОткрытьЗаказПоНомеру() Экспорт
	
	Перем Заказ;
	
	Если НайтиЗаказПоНомеру(Заказ) Тогда
		ПолучитьФорму("Поиск"+?(ДоставкаЖурнал,"Доставка","")).Закрыть();
		ОткрытьЗаказ(Заказ);
	КонецЕсли; 
	
КонецПроцедуры

Функция ПроверитьДавностьВозвратов(Заказ)
	
	ТипПериода = глПараметрыРМ.ЖурналЗаказовДавностьВозвратовПериод;
	Если ТипПериода = "Нет" Тогда
		Возврат Истина;
	КонецЕсли;
	
	КолвоПериодов = глПараметрыРМ.ЖурналЗаказовДавностьВозвратовКолвоПериодов;
	Если ТипПериода = "Год" Тогда
		НачДатаВозврата = ДобавитьМесяц(ТекущаяДата(), -КолвоПериодов*12);
	ИначеЕсли ТипПериода = "Месяц" Тогда
		НачДатаВозврата = ДобавитьМесяц(ТекущаяДата(), -КолвоПериодов);
	ИначеЕсли ТипПериода = "Неделя" Тогда
		НачДатаВозврата = ТекущаяДата()-КолвоПериодов*7 * 24*60*60;
	ИначеЕсли ТипПериода = "День" Тогда
		НачДатаВозврата = ТекущаяДата() - КолвоПериодов * 24*60*60;
	ИначеЕсли ТипПериода = "Смена" Тогда
		НачДатаВозврата = ИнтерфейсРМ.ТекущаяСмена().Дата;
		
		Если КолвоПериодов = 1 Тогда
			// возвраты только за текущую смену
			Если Не ЗначениеЗаполнено(НачДатаВозврата) Тогда 
				Текст1="Смена не открыта!";
				Текст2="Невозможно оформить заказ за текущую смену, т.к. смена не открыта...";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			Запрос = Новый Запрос("
			|ВЫБРАТЬ ПЕРВЫЕ "+Формат(КолвоПериодов,"ЧГ=")+"
			|	ОткрытиеСмены.Дата КАК ДатаДок
			|ИЗ
			|	Документ.ОткрытиеСмены КАК ОткрытиеСмены
			|ГДЕ
			|	НЕ ОткрытиеСмены.ПометкаУдаления И МестоРеализации=&МестоРеализации
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаДок УБЫВ
			|");
			
			Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НачДатаВозврата = Выборка.ДатаДок;
			КонецЦикла; 
			
		КонецЕсли;
	КонецЕсли;
	
	Если Заказ.Дата > НачДатаВозврата Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Оформление возврата
//
Процедура ВозвратПоЗаказу(Заказ=Неопределено, ЗаказДопИнф=Неопределено) Экспорт
	
	Если НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		Возврат;
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаСмены() Тогда
		Возврат;
	ИначеЕсли Заказ=Неопределено И НЕ НайтиЗаказПоНомеру(Заказ, ЗаказДопИнф) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Открыт Тогда
		Текст1="Нет доступа!";
		Текст2="Оформление возврата возможно только на основании закрытого заказа...";
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
		Возврат;
		
	ИначеЕсли ЗаказДопИнф.Статус = Перечисления.СтатусыЗаказа.Удален Тогда
		Текст1="Нет доступа!";
		Текст2="Оформление возврата не возможно на основании удаленного заказа...";
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
		Возврат;
		
	ИначеЕсли Заказ.МестоРеализации <> глПараметрыРМ.МестоРеализации Тогда
		Текст1="Нет доступа!";
		Текст2="Нельзя оформить возврат по заказу другого места реализации...";
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
		Возврат;
		
	ИначеЕсли НЕ ПроверитьДавностьВозвратов(Заказ) Тогда
		Текст1="Нет доступа!";
		Текст2="Нельзя оформить возврат, т.к. ограничен период возвратов...";
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
       	Возврат;
			
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ВозвратПоЗаказу", Истина, глПользователь, Заказ.Автор) Тогда
		Возврат;
		
	КонецЕсли; 
	
	ФормаВозврата = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВозвратПоЗаказу").ПолучитьФорму();
	ФормаВозврата.Заказ = Заказ;
	ФормаВозврата.Открыть();
	
КонецПроцедуры

// Процедура удаления заказа
//
Процедура УдалитьЗаказ() Экспорт
	
	Перем КемЗаблокирован;
	
	Заказ = ОпределитьТекущийЗаказИлиАвтора();
	Если ТипЗнч(Заказ) <> Тип("ДокументСсылка.Заказ") Тогда
		Текст1="Нет доступа!";
		Текст2="Необходимо выбрать конкретный заказ!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
	КонецЕсли;
	
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("УдалениеОткрытыхЗаказов", Истина, , Заказ.Автор) Тогда
		Возврат;
	КонецЕсли; 
	
	Если глВерсия=3 Тогда
		ЗаказДопИнф = РегистрыСведений.ЗаказДопИнф.Получить( Новый Структура("Заказ",Заказ) );
		
	КонецЕсли; 
	
	// в Заказе
	ФлагЗаказПустой = Истина;
	Для каждого СтрокаТовара Из Заказ.Товары Цикл
		Если СтрокаТовара.Статус <> Перечисления.СтатусыПозицийЗаказа.Дозаказ Тогда
			ФлагЗаказПустой = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	// можно удалять, если не передумают
	Текст1 = "Удаление заказа!";
	Текст2 = ?(ФлагЗаказПустой, "Заказ пустой и будет удален окончательно!", "Статус заказа изменится на ""Удален""");
	Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"ОК","","Esc=Отмена")="Отмена" Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагЗаказПустой Тогда
		
		Если НЕ ИнтерфейсРМ.ЗаблокироватьОбъект(Заказ.ПолучитьОбъект(),КемЗаблокирован) Тогда
			Текст1="Заказ редактируется!";
			Текст2="Этот заказ редактируется на 
			       |"+КемЗаблокирован+"
			       |Удаление не возвожно!";
			
			ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
			Возврат;
		Иначе
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказУдалениеПустого, Заказ, УбратьВсеБуквы(Заказ.Номер));
			ИнтерфейсРМ.ПопыткаДействияСОбъектом( Заказ.ПолучитьОбъект(), "Объект.УстановитьПометкуУдаления(Истина)" );
			// < КС_ВДВ ------------------------------------------------------------ 
			ксТрактир.ОсвободитьКартуДоступаОтЗаказа(Заказ.Ссылка);
			
			МассивЗаказов = Новый Массив;
			МассивЗаказов.Добавить(Заказ.Ссылка);
			ксТрактир.СнятьМаркиСУчета("Заказ", МассивЗаказов);
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли;
		
	Иначе
		// удаление заказа делаем посредством удаления количества по всем строкам
		// с печатью марок и записью заказа
		ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("Заказ");
		ОбработкаЗаказ.Заказ = Заказ.ПолучитьОбъект();
		Если ОбработкаЗаказ.ПрочитатьЗаказ(Истина) Тогда
			
			ОбработкаЗаказ.УдалитьВсеЗаказанное();
			ОбработкаЗаказ.Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма);
			ОбработкаЗаказ.Заказ.Разблокировать();
			
		КонецЕсли; 
	КонецЕсли;
	ИнтерфейсРМ.ВыводНаИнфоДисплей("УбратьЗаказ", Неопределено, Неопределено, Неопределено, Неопределено);
	ИнтерфейсРМ.ВыводНаИнфоДисплей("Реклама", Неопределено, Неопределено, Неопределено, Неопределено);

	ОбновитьЖурнал();
	
КонецПроцедуры

// Описание процедуры
//
// Параметры:
//	Параметр1	- описание параметра
//
Процедура ИзменитьЗаказ(Действие) Экспорт
	
	// для изменения автора можно получить первый заказ по месту из сводного журнала
	// для остальных действий нужно выбрать конкретный заказ
	Заказ = ОпределитьТекущийЗаказИлиАвтора( Действие="ИзменитьАвтора" );
	Если ТипЗнч(Заказ) <> Тип("ДокументСсылка.Заказ") Тогда
		Текст1="Нет доступа!";
		Текст2="Необходимо выбрать конкретный заказ!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
	ИначеЕсли Заказ.Доставка Тогда
		Текст1="Нет доступа!";
		Текст2="Недоступно для заказов на доставку!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
	КонецЕсли;
	
	ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("Заказ");
	ОбработкаЗаказ.Заказ = Заказ.ПолучитьОбъект();
	
	Если ОбработкаЗаказ.ПрочитатьЗаказ() Тогда
		Выполнить("ОбработкаЗаказ."+Действие+"(Истина)");
		ОбработкаЗаказ.Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма);
		ОбработкаЗаказ.Заказ.Разблокировать();
	КонецЕсли;
	
	ОбновитьЖурнал();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

// Описание процедуры
//
Функция ОпределитьНачалоПериодаЗакрытых()
	
	НачПериодаЗакрытых = ИнтерфейсРМ.ТекущаяСмена();
	
	КолвоСмен = глПараметрыРМ.ЖурналЗаказовЗакрытыеСменНазад;
	
	Если КолвоСмен = 0 Тогда
		// показываем только за текущую смену
		Если Не ЗначениеЗаполнено(НачПериодаЗакрытых) Тогда 
			Текст1="Смена не открыта!";
			Текст2="Невозможно посмотреть заказы за текущую смену, т.к. смена не открыта...";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(НачПериодаЗакрытых) Тогда
			КолвоСмен = КолвоСмен + 1;					// текущую смену не считаем
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ "+Формат(КолвоСмен,"ЧГ=")+"
		|	ОткрытиеСмены.Ссылка,
		|	ОткрытиеСмены.Дата КАК ДатаДок
		|ИЗ
		|	Документ.ОткрытиеСмены КАК ОткрытиеСмены
		|ГДЕ
		|	НЕ ОткрытиеСмены.ПометкаУдаления И МестоРеализации=&МестоРеализации
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаДок УБЫВ
		|");
		
		Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НачПериодаЗакрытых = Выборка.Ссылка
		КонецЦикла; 
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Создание структуры колонок журнала, сводного, простого, закрытых
//
Процедура СоздатьСтруктуруЖурнала() Экспорт
	
	ТабПоле = ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов;
	
	ЖурналЗаказов.Очистить();
	ЖурналЗаказов.Колонки.Очистить();
	
	Если СводныйЖурнал И НЕ ДоставкаЖурнал Тогда
		
		Если глПараметрыРМ.ИнтерфейсТип = 1 Тогда
			КолвоКолонокМест=1;
			ШиринаАвтор		=18;
			ШиринаСтол		=15;
			
		ИначеЕсли глПараметрыРМ.ШиринаОкна1С = 800 Тогда
			КолвоКолонокМест=5;
			ШиринаАвтор		=25;
			ШиринаСтол		=20;
			
		Иначе
			КолвоКолонокМест=5;
			ШиринаАвтор		=30;
			ШиринаСтол		=22;
		КонецЕсли;
		
		ЖурналЗаказов.Колонки.Добавить("НаимАвтора", , "Официант", ШиринаАвтор );
		ЖурналЗаказов.Колонки.Добавить("Автор");
		
		Для н=1 По КолвоКолонокМест Цикл
			ЖурналЗаказов.Колонки.Добавить("НаимМеста"+н, , "Стол        Сумма", ШиринаСтол );
			ЖурналЗаказов.Колонки.Добавить("Место"+н);
		КонецЦикла;
		
		//----------------------------------------------------------
		ТабПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Ячейка;
		ТабПоле.СоздатьКолонки();
		Для н=1 По КолвоКолонокМест Цикл
			ТабПоле.Колонки["НаимМеста"+н].ГоризонтальноеПоложениеВШапке	= ГоризонтальноеПоложение.Право;
			ТабПоле.Колонки["НаимМеста"+н].ГоризонтальноеПоложениеВКолонке	= ГоризонтальноеПоложение.Право;
		КонецЦикла;
		
		ТабПоле.Колонки.Автор.Видимость = Ложь;
		Для н=1 По КолвоКолонокМест Цикл
			ТабПоле.Колонки["Место"+н].Видимость = Ложь;
		КонецЦикла;
		
	ИначеЕсли СводныйЖурнал И ДоставкаЖурнал Тогда
		// для доставки в сводном журнале отбираются только заказы на доставку с группировкой по курьеру
		Если глПараметрыРМ.ИнтерфейсТип = 1 Тогда
			КолвоКолонокМест	=1;
			ШиринаКурьер		=18;
			ШиринаРайон			=15;
			
		ИначеЕсли глПараметрыРМ.ШиринаОкна1С = 800 Тогда
			КолвоКолонокМест	=5;
			ШиринаКурьер		=25;
			ШиринаРайон			=20;
			
		Иначе
			КолвоКолонокМест	=5;
			ШиринаКурьер		=30;
			ШиринаРайон			=22;
		КонецЕсли;
		
		ЖурналЗаказов.Колонки.Добавить("НаимКурьера", , "Курьер", ШиринаКурьер );
		ЖурналЗаказов.Колонки.Добавить("Курьер");
		
		Для н=1 По КолвоКолонокМест Цикл
			ЖурналЗаказов.Колонки.Добавить("НаимРайона"+н, , "Район        Сумма", ШиринаРайон );
			ЖурналЗаказов.Колонки.Добавить("Район"+н);
		КонецЦикла;
		
		//----------------------------------------------------------
		ТабПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Ячейка;
		ТабПоле.СоздатьКолонки();
		Для н=1 По КолвоКолонокМест Цикл
			ТабПоле.Колонки["НаимРайона"+н].ГоризонтальноеПоложениеВШапке	= ГоризонтальноеПоложение.Право;
			ТабПоле.Колонки["НаимРайона"+н].ГоризонтальноеПоложениеВКолонке	= ГоризонтальноеПоложение.Право;
		КонецЦикла;
		
		ТабПоле.Колонки.Курьер.Видимость = Ложь;
		Для н=1 По КолвоКолонокМест Цикл
			ТабПоле.Колонки["Район"+н].Видимость = Ложь;
		КонецЦикла;
		
	ИначеЕсли НЕ СводныйЖурнал И НЕ ДоставкаЖурнал Тогда
		// простой журнал всех заказов
		
		ЖурналЗаказов.Колонки.Добавить("ДокСсылка");
		ЖурналЗаказов.Колонки.Добавить("Пиктограмма",," ",1);
		ЖурналЗаказов.Колонки.Добавить("Дата",,,6);
		ЖурналЗаказов.Колонки.Добавить("Время",,"Время создания",4);
		
		
		ЖурналЗаказов.Колонки.Добавить("Номер",,"Заказ №",6);
		ЖурналЗаказов.Колонки.Добавить("НомерКартыЛояльности",,"Карта Кегельбум",7);
		ЖурналЗаказов.Колонки.Добавить("НомерКарты",,"Бейдж №",4);
		ЖурналЗаказов.Колонки.Добавить("Пейджер",ПолучитьОписаниеТиповЧисла(2,0),"Пейджер",4);
		ЖурналЗаказов.Колонки.Добавить("Приготовление",ПолучитьОписаниеТиповЧисла(2,0),"Готовится",4);
		ЖурналЗаказов.Колонки.Добавить("КВыдаче",ПолучитьОписаниеТиповЧисла(2,0),"К выдаче",4);
		ЖурналЗаказов.Колонки.Добавить("ПриготовлениеПросрочено",ПолучитьОписаниеТиповЧисла(2,0),"Приготовление (просрочено)",5);
		ЖурналЗаказов.Колонки.Добавить("КВыдачеПросрочено",ПолучитьОписаниеТиповЧисла(2,0),"К выдаче (просрочено)",5);
		ЖурналЗаказов.Колонки.Добавить("Стол",,"Посадочное место",18);
		ЖурналЗаказов.Колонки.Добавить("Автор",,"Официант",20);
		ЖурналЗаказов.Колонки.Добавить("ВремяПоследнейАктивности",,"Время последней активности",6);
		ЖурналЗаказов.Колонки.Добавить("ВремяБездействия",,"Бездействие, мин",6);
		ЖурналЗаказов.Колонки.Добавить("МестоПоследнейАктивности",,"Место последней активности",7);
		Если глПараметрыРМ.ТипТТ = Справочники.ТипыТТ.МОКП Тогда
			ЖурналЗаказов.Колонки.Добавить("СуммаМЪ",ПолучитьОписаниеТиповЧисла(12,2),"МясновЪ",7);
			ЖурналЗаказов.Колонки.Добавить("СуммаО",ПолучитьОписаниеТиповЧисла(12,2),"Отдохни",7);
			ЖурналЗаказов.Колонки.Добавить("СуммаКП",ПолучитьОписаниеТиповЧисла(12,2),"КП",7);
		Иначе
			ЖурналЗаказов.Колонки.Добавить("Сумма",ПолучитьОписаниеТиповЧисла(12,2),,8);
		КонецЕсли;
		
		
		//----------------------------------------------------------
		ТабПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Ячейка;
		
		ТабПоле.СоздатьКолонки();
		ТабПоле.Колонки.Пиктограмма.КартинкиСтрок = БиблиотекаКартинок.ЖурналЗаказов;
		ТабПоле.Колонки.ДокСсылка.Видимость = Ложь;
		
		Если глПараметрыРМ.ИнтерфейсТип = 1 Тогда
			ТабПоле.Колонки.Дата.Видимость = Ложь;
			ТабПоле.Колонки.Время.Видимость = Ложь;
			ТабПоле.Колонки.Автор.Видимость = Ложь;
			ТабПоле.Колонки.Сумма.Ширина = 10;
		КонецЕсли;
		
		Если глПараметрыРМ.ТипТТ = Справочники.ТипыТТ.МОКП Тогда
			ТабПоле.Колонки.Дата.Видимость = Ложь;
		КонецЕсли;
		
		// < КС_ВДВ ------------------------------------------------------------ 
		// Скрываем ненужные колонки
		ТабПоле.Колонки.Стол.Видимость  = Ложь;
		//ТабПоле.Колонки.Номер.Видимость = Ложь;
		ТабПоле.Колонки.Автор.Видимость = Ложь;
		
		ТабПоле.Колонки.Пейджер.Формат 			= "ЧЦ=2; ЧДЦ=0; ЧН=";
		ТабПоле.Колонки.Приготовление.Формат 	= "ЧЦ=2; ЧДЦ=0; ЧН=";
		ТабПоле.Колонки.КВыдаче.Формат 			= "ЧЦ=2; ЧДЦ=0; ЧН=";
		
		// эти колонки нужны только для оформления; и не отображаются
		ТабПоле.Колонки.ПриготовлениеПросрочено.Видимость	= Ложь;
		ТабПоле.Колонки.КВыдачеПросрочено.Видимость			= Ложь;
		// КС_ВДВ > ------------------------------------------------------------ 
		
	Иначе
		// простой журнал заказов на доставку
		ЖурналЗаказов.Колонки.Добавить("Номер",,,10);
		ЖурналЗаказов.Колонки.Добавить("Автор",,,10);
		ЖурналЗаказов.Колонки.Добавить("Статус",,,8);
		ЖурналЗаказов.Колонки.Добавить("ДокСсылка");
		ЖурналЗаказов.Колонки.Добавить("Дата",,,8);
		ЖурналЗаказов.Колонки.Добавить("Время",,,8);
		ЖурналЗаказов.Колонки.Добавить("Пиктограмма",," ",3);
		ЖурналЗаказов.Колонки.Добавить("Адрес",,,60);
		ЖурналЗаказов.Колонки.Добавить("Телефон",,,10);
		ЖурналЗаказов.Колонки.Добавить("Клиент",,,20);
		ЖурналЗаказов.Колонки.Добавить("Сумма",ПолучитьОписаниеТиповЧисла(12,2),,10);
		ЖурналЗаказов.Колонки.Добавить("Курьер",,,20);
		
		//----------------------------------------------------------
		ТабПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Ячейка;
		
		ТабПоле.СоздатьКолонки();
		// Расположим колонки более удобным образом
		ТабПоле.Колонки.Автор.Положение = ПоложениеКолонки.НаСледующейСтроке;
		ТабПоле.Колонки.Телефон.Положение = ПоложениеКолонки.НаСледующейСтроке;
		ТабПоле.Колонки.Клиент.Положение = ПоложениеКолонки.ВТойЖеКолонке;
		ТабПоле.Колонки.Сумма.Положение = ПоложениеКолонки.ВТойЖеКолонке;
		ТабПоле.Колонки.Пиктограмма.Видимость = Ложь;
		
		ТабПоле.Колонки.Пиктограмма.КартинкиСтрок = БиблиотекаКартинок.ЖурналЗаказов;
		ТабПоле.Колонки.ДокСсылка.Видимость = Ложь;
		
		Если глПараметрыРМ.ИнтерфейсТип = 1 Тогда
			ТабПоле.Колонки.Дата.Видимость = Ложь;
			ТабПоле.Колонки.Время.Видимость = Ложь;
			ТабПоле.Колонки.Автор.Видимость = Ложь;
			ТабПоле.Колонки.Сумма.Ширина = 10;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение таблицы ЖурналЗаказов, запускается из обработчика ожидания
// и принудительно, когда надо
Процедура ОбновитьЖурнал(ТекДок=Неопределено,ВыбОтбор = Неопределено, Знач ПодстрокаФильтра=Неопределено) Экспорт
	
	// только если форма активна
	Если ФормаЖурнала = Неопределено ИЛИ ЖурналЗаказов.Колонки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбОтбор) ИЛИ ЗначениеЗаполнено(ПодстрокаФильтра) Тогда
		ОтборУстановлен = Истина;
	КонецЕсли; 
	
	Если ПодстрокаФильтра <> Неопределено Тогда
		ПодстрокаФильтра = Врег(ПодстрокаФильтра);
	КонецЕсли;
	
	Если СводныйЖурнал И НЕ ДоставкаЖурнал Тогда
		ЗаполнитьСводныйЖурнал(ТекДок,ВыбОтбор);
	ИначеЕсли СводныйЖурнал И ДоставкаЖурнал Тогда
		ЗаполнитьДоставкаСводныйЖурнал(ТекДок, ВыбОтбор);
	ИначеЕсли НЕ СводныйЖурнал И НЕ ДоставкаЖурнал Тогда
		ЗаполнитьПростойЖурнал(ТекДок,ВыбОтбор,ПодстрокаФильтра);
	Иначе
		ЗаполнитьДоставкаПростойЖурнал(ТекДок,ВыбОтбор,ПодстрокаФильтра);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатистику() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ОткрытыеЗаказыПоКартам.Заказ КАК Заказ
	|ПОМЕСТИТЬ НеоплаченныеОткрытые
	|ИЗ
	|	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ.Товары КАК ЗаказТовары
	|		ПО ОткрытыеЗаказыПоКартам.Заказ = ЗаказТовары.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(ЗаказТовары.ДокументОплаты.Фискализирован, ЛОЖЬ) = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	ОткрытыеЗаказыПоКартам.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Количество открытых бейджей (заказов) в зале, всего"" КАК Показатель,
	|	КОЛИЧЕСТВО(ОткрытыеЗаказыПоКартам.КартаДоступа) КАК Значение
	|ИЗ
	|	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Количество открытых, полностью оплаченных бейджей"",
	|	КОЛИЧЕСТВО(ОткрытыеЗаказыПоКартам.Заказ)
	|ИЗ
	|	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	|		ЛЕВОЕ СОЕДИНЕНИЕ НеоплаченныеОткрытые КАК НеоплаченныеОткрытые
	|		ПО ОткрытыеЗаказыПоКартам.Заказ = НеоплаченныеОткрытые.Заказ
	|ГДЕ
	|	НеоплаченныеОткрытые.Заказ ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Количество неоплаченных бейджей"",
	|	КОЛИЧЕСТВО(НеоплаченныеОткрытые.Заказ)
	|ИЗ
	|	НеоплаченныеОткрытые КАК НеоплаченныеОткрытые
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Количество открытых бейджей с нулевым заказом"",
	|	КОЛИЧЕСТВО(Различные ОткрытыеЗаказыПоКартам.Заказ)
	|ИЗ
	|	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Заказ.Товары КАК ЗаказТовары
	|		ПО ОткрытыеЗаказыПоКартам.Заказ = ЗаказТовары.Ссылка
	|ГДЕ
	|	ЗаказТовары.Ссылка ЕСТЬ NULL");
	тзСтатистика = ФормаЖурнала.тзСтатистика;
	тзСтатистика.Очистить();
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ЗаполнитьКоллекциюСвойств(ТЗ, тзСтатистика);
КонецПроцедуры


// Обработчик ожидания не может быть с параметрами, поэтому
// нужна эта фиктивная процедура
Процедура ОбновитьЖурнал_ОбработчикОжидания() Экспорт
	
	Если ФормаЖурнала = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	// только если форма активна и не установлен отбор
	Если ФормаЖурнала.ВводДоступен() И НЕ ОтборУстановлен Тогда
		ОбновитьЖурнал();
	КонецЕсли;
	
КонецПроцедуры

// Простой журнал
//
Процедура ЗаполнитьПростойЖурнал(ТекДок, ВыбОтбор=Неопределено, ПодстрокаФильтра=Неопределено) 
	
	Если НЕ ЗначениеЗаполнено(ТекДок) Тогда
		ТекСтрока = ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока;
		ТекДок = ?(ТекСтрока=Неопределено, Неопределено, ТекСтрока.ДокСсылка);
	КонецЕсли; 
	
	ЖурналЗаказов.Очистить();
	
	Если РежимНедозакрытых Тогда
		Запрос = Новый Запрос("
		// оплаченные заказы
		|// < КС_ВДВ ------------------------------------------------------------ 
		|ВЫБРАТЬ
		|	ВыданныеПейджеры.Заказ,
		|	СУММА(1) КАК КоличествоПейджеров
		|ПОМЕСТИТЬ ВТПейджеры
		|ИЗ
		|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыданныеПейджеры.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|// КС_ВДВ > ------------------------------------------------------------ 
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПротоколРасчетов.Заказ.Ссылка 			КАК ДокСсылка,
		|	ПротоколРасчетов.Заказ.Номер 			КАК ДокНомер,
		|	ПротоколРасчетов.Дата					КАК ДокДата,
		|	ПротоколРасчетов.Заказ.Автор			КАК Автор,
		|// < КС_ВДВ ------------------------------------------------------------ 
		|	ПротоколРасчетов.Заказ.КартаДоступа.Идентификатор2 КАК НомерКарты,
		|	ВЫБОР
		|		КОГДА ПротоколРасчетов.Заказ.КартаДоступа.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыКартДоступа.Постоянная)
		|			ТОГДА ПротоколРасчетов.Заказ.Клиент.Наименование
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ФИО,
		|	ЕСТЬNULL(ВТПейджеры.КоличествоПейджеров, 0) КАК Пейджер,
		|	0											КАК Приготовление,
		|	0											КАК ПриготовлениеПросрочено,
		|	0											КАК КВыдаче,
		|	0											КАК КВыдачеПросрочено,
		|// КС_ВДВ > ------------------------------------------------------------ 
		|	ПротоколРасчетов.Заказ.ПосадочноеМесто 	КАК Место,
		|	ПротоколРасчетов.Заказ.ИтоговаяСумма 	КАК Сумма,
		|	6 КАК Пиктограмма
		|ИЗ
		|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
		|// < КС_ВДВ ------------------------------------------------------------ 
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПейджеры КАК ВТПейджеры
		|		ПО ПротоколРасчетов.Заказ = ВТПейджеры.Заказ
		|// КС_ВДВ > ------------------------------------------------------------ 
		|ГДЕ
		|	ПротоколРасчетов.Дата >= &ДатаНачала
		|	И (ПротоколРасчетов.ККМ = ЗНАЧЕНИЕ(Справочник.ТорговоеОборудование.ПустаяСсылка) ИЛИ Не ПротоколРасчетов.Фискализирован)
		|	И НЕ ПротоколРасчетов.Неучетный
		|	И НЕ ПротоколРасчетов.Заказ.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокДата");
		
		Запрос.УстановитьПараметр("ДатаНачала", НачПериодаЗакрытых.Дата);
		
	ИначеЕсли РежимЗакрытых Тогда
		Запрос = Новый Запрос("
		// оплаченные заказы
		|// < КС_ВДВ ------------------------------------------------------------ 
		|ВЫБРАТЬ
		|	ВыданныеПейджеры.Заказ,
		|	СУММА(1) КАК КоличествоПейджеров
		|ПОМЕСТИТЬ ВТПейджеры
		|ИЗ
		|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыданныеПейджеры.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|// КС_ВДВ > ------------------------------------------------------------ 
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПротоколРасчетов.Заказ.Ссылка 			КАК ДокСсылка,
		|	ПротоколРасчетов.Заказ.Номер 			КАК ДокНомер,
		|	ПротоколРасчетов.Дата					КАК ДокДата,
		|	ПротоколРасчетов.Заказ.Автор			КАК Автор,
		|// < КС_ВДВ ------------------------------------------------------------ 
		|	ПротоколРасчетов.Заказ.КартаДоступа.Идентификатор2	КАК НомерКарты,
		|	ВЫБОР
		|		КОГДА ПротоколРасчетов.Заказ.КартаДоступа.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыКартДоступа.Постоянная)
		|			ТОГДА ПротоколРасчетов.Заказ.Клиент.Наименование
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ФИО,
		|	ЕСТЬNULL(ВТПейджеры.КоличествоПейджеров, 0) КАК Пейджер,
		|	0											КАК Приготовление,
		|	0											КАК ПриготовлениеПросрочено,
		|	0											КАК КВыдаче,
		|	0											КАК КВыдачеПросрочено,
		|// КС_ВДВ > ------------------------------------------------------------ 
		|	ПротоколРасчетов.Заказ.ПосадочноеМесто 	КАК Место,
		|	ПротоколРасчетов.Заказ.ИтоговаяСумма 	КАК Сумма,
		|	ВЫБОР КОГДА (ПротоколРасчетов.ККМ = ЗНАЧЕНИЕ(Справочник.ТорговоеОборудование.ПустаяСсылка) Или не Фискализирован) ТОГДА 6 ИНАЧЕ 1 КОНЕЦ 
		|											КАК Пиктограмма
		|ИЗ
		|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
		|// < КС_ВДВ ------------------------------------------------------------ 
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПейджеры КАК ВТПейджеры
		|		ПО ПротоколРасчетов.Заказ = ВТПейджеры.Заказ		
		|// КС_ВДВ > ------------------------------------------------------------ 
		|ГДЕ
		|	ПротоколРасчетов.Дата >= &ДатаНачала
		|	И НЕ ПротоколРасчетов.Неучетный
		|	И НЕ ПротоколРасчетов.Заказ.ПометкаУдаления
		|"+?(ЗначениеЗаполнено(ВыбОтбор), "
		|	И ПротоколРасчетов.ЗначОтбор = &ВыбОтбор", "") + "
		|
		|ОБЪЕДИНИТЬ
		|
		// удаленные заказы
		|ВЫБРАТЬ
		|	ЗаказДопИнф.Заказ.Ссылка,
		|	ЗаказДопИнф.Заказ.Номер,
		|	ЗаказДопИнф.ДатаЗакрытия,
		|	ЗаказДопИнф.Заказ.Автор,
		|// < КС_ВДВ ------------------------------------------------------------ 
		|	ЗаказДопИнф.Заказ.КартаДоступа.Код,
		|	ВЫБОР
		|		КОГДА ЗаказДопИнф.Заказ.КартаДоступа.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыКартДоступа.Постоянная)
		|			ТОГДА ЗаказДопИнф.Заказ.Клиент.Наименование
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ЕСТЬNULL(ВТПейджеры.КоличествоПейджеров, 0),
		|	0,
		|	0,
		|	0,
		|	0,
		|// КС_ВДВ > ------------------------------------------------------------ 
		|	ЗаказДопИнф.Заказ.ПосадочноеМесто,
		|	ЗаказДопИнф.Заказ.ИтоговаяСумма,
		|	2 КАК Пиктограмма
		|ИЗ
		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		|// < КС_ВДВ ------------------------------------------------------------ 
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПейджеры КАК ВТПейджеры
		|		ПО ЗаказДопИнф.Заказ = ВТПейджеры.Заказ		
		|// КС_ВДВ > ------------------------------------------------------------ 
		|ГДЕ
		|	ЗаказДопИнф.ДатаЗакрытия >= &ДатаНачала
		|	И ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Удален)
		|	И НЕ ЗаказДопИнф.Заказ.ПометкаУдаления
		|"+?(ЗначениеЗаполнено(ВыбОтбор), "
		|	И ЗаказДопИнф.ЗначОтбор = &ВыбОтбор", "") + "
        |
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// возвраты
		|ВЫБРАТЬ
		|	Возврат.Ссылка,
		|	Возврат.Заказ.Номер,
		|	Возврат.Дата,
		|	Возврат.Автор,
		|// < КС_ВДВ ------------------------------------------------------------ 
		|	Возврат.Заказ.КартаДоступа.Код,
		|	ВЫБОР
		|		КОГДА Возврат.Заказ.КартаДоступа.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыКартДоступа.Постоянная)
		|			ТОГДА Возврат.Заказ.Клиент.Наименование
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ЕСТЬNULL(ВТПейджеры.КоличествоПейджеров, 0),
		|	0,
		|	0,
		|	0,
		|	0,
		|// КС_ВДВ > ------------------------------------------------------------ 
		|	Возврат.Заказ.ПосадочноеМесто,
		|	Возврат.Сумма,
		|	3 КАК Пиктограмма
		|ИЗ
		|	Документ.Возврат КАК Возврат
		|// < КС_ВДВ ------------------------------------------------------------ 
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПейджеры КАК ВТПейджеры
		|		ПО Возврат.Заказ = ВТПейджеры.Заказ		
		|// КС_ВДВ > ------------------------------------------------------------ 
		|ГДЕ
		|	Возврат.Дата >= &ДатаНачала
		|	И НЕ Возврат.ПометкаУдаления
		|"+?(ЗначениеЗаполнено(ВыбОтбор), "
		|	И Возврат.ЗначОтбор = &ВыбОтбор", "") + "
        |
		|УПОРЯДОЧИТЬ ПО
		|	ДокДата");
		
		Запрос.УстановитьПараметр("ДатаНачала", НачПериодаЗакрытых.Дата);
		Если ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.Клиенты") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.Клиент");
		ИначеЕсли  ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.Сотрудники") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.Автор");
        ИначеЕсли ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.ПосадочныеМеста") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.ПосадочноеМесто");
        ИначеЕсли ВыбОтбор = "Доставка" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор = &ВыбОтбор",
				"Заказ.ПосадочноеМесто = Значение(Справочник.ПосадочныеМеста.ПустаяСсылка)");
        КонецЕсли;
		Запрос.УстановитьПараметр("ВыбОтбор", ВыбОтбор);
		
	Иначе
		// открытые заказы
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ВыданныеПейджеры.Заказ КАК Заказ,
		|	СУММА(1) КАК КоличествоПейджеров
		|ПОМЕСТИТЬ ВТПейджеры
		|ИЗ
		|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
		|
		|СГРУППИРОВАТЬ ПО
		|	ВыданныеПейджеры.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Марки.Заказ КАК Заказ,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Марки.КВыдаче
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Приготовление,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ Марки.КВыдаче
		|					И Марки.НормативноеВремяПриготовления < &ТекВремя
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПриготовлениеПросрочено,
		|	СУММА(ВЫБОР
		|			КОГДА Марки.КВыдаче
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КВыдаче,
		|	СУММА(ВЫБОР
		|			КОГДА Марки.КВыдаче
		|					И Марки.ПервоеНормативноеВремяВыдачи < &ТекВремя
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КВыдачеПросрочено
		|ПОМЕСТИТЬ ВТМарки
		|ИЗ
		|	РегистрСведений.Марки КАК Марки
		|
		|СГРУППИРОВАТЬ ПО
		|	Марки.Заказ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказДопИнф.Заказ.Ссылка КАК ДокСсылка,
		|	ЗаказДопИнф.Заказ.Номер КАК ДокНомер,
		|	ВЫБОР
		|		КОГДА ЗаказДопИнф.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗаказДопИнф.Заказ.Дата
		|		ИНАЧЕ ЗаказДопИнф.ДатаОткрытия
		|	КОНЕЦ КАК ДокДата,
		|	ЗаказДопИнф.Заказ.Автор КАК Автор,
		|	ЗаказДопИнф.Заказ.КартаДоступа.Идентификатор2 КАК НомерКарты,
		|	ЗаказДопИнф.Заказ.НомерКартыЛояльности КАК НомерКартыЛояльности,
		|	ВЫБОР
		|		КОГДА ЗаказДопИнф.Заказ.КартаДоступа.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыКартДоступа.Постоянная)
		|			ТОГДА ЗаказДопИнф.Заказ.Клиент.Наименование
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ФИО,
		|	ЕСТЬNULL(ВТПейджеры.КоличествоПейджеров, 0) КАК Пейджер,
		|	ЕСТЬNULL(ВТМарки.Приготовление, 0) КАК Приготовление,
		|	ЕСТЬNULL(ВТМарки.ПриготовлениеПросрочено, 0) КАК ПриготовлениеПросрочено,
		|	ЕСТЬNULL(ВТМарки.КВыдаче, 0) КАК КВыдаче,
		|	ЕСТЬNULL(ВТМарки.КВыдачеПросрочено, 0) КАК КВыдачеПросрочено,
		|	ЗаказДопИнф.Заказ.ПосадочноеМесто КАК Место,
		|	ЗаказДопИнф.Заказ.ИтоговаяСумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Пиктограмма,
		|	ВЫБОР
		|		КОГДА ЗаказДопИнф.Заказ.ИтоговаяСумма > 0
		|			ТОГДА ДОБАВИТЬКДАТЕ(ЗаказДопИнф.ДатаОткрытия, ДЕНЬ, -2)
		|		ИНАЧЕ ЗаказДопИнф.ДатаОткрытия
		|	КОНЕЦ КАК Поле1,
		|	ОткрытыеЗаказыПоКартам.ВремяПоследнейАктивности КАК ВремяПоследнейАктивности,
		|	ОткрытыеЗаказыПоКартам.МестоПоследнейАктивности.Хост КАК МестоПоследнейАктивности
		|ПОМЕСТИТЬ ВТЗаказы
		|ИЗ
		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПейджеры КАК ВТПейджеры
		|		ПО ЗаказДопИнф.Заказ = ВТПейджеры.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМарки КАК ВТМарки
		|		ПО ЗаказДопИнф.Заказ = ВТМарки.Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
		|		ПО ЗаказДопИнф.Заказ = ОткрытыеЗаказыПоКартам.Заказ
		|ГДЕ
		|	(ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
		|			ИЛИ НЕ ЕСТЬNULL(ВТМарки.Заказ, ВТПейджеры.Заказ) ЕСТЬ NULL)
		|	И НЕ ЗаказДопИнф.Заказ.ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДоставкаДопИнфСрезПоследних.Заказ.Ссылка,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Номер,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Дата,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Автор,
		|	ДоставкаДопИнфСрезПоследних.Заказ.КартаДоступа.Код,
		|	ВЫБОР
		|		КОГДА ДоставкаДопИнфСрезПоследних.Заказ.КартаДоступа.ТипКарты = ЗНАЧЕНИЕ(Перечисление.ТипыКартДоступа.Постоянная)
		|			ТОГДА ДоставкаДопИнфСрезПоследних.Заказ.Клиент.Наименование
		|		ИНАЧЕ """"
		|	КОНЕЦ,
		|	ЕСТЬNULL(ВТПейджеры.КоличествоПейджеров, 0),
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ДоставкаДопИнфСрезПоследних.Заказ.ПосадочноеМесто,
		|	ДоставкаДопИнфСрезПоследних.Заказ.ИтоговаяСумма,
		|	ВЫБОР
		|		КОГДА ДоставкаДопИнфСрезПоследних.Заказ.ЕстьПресчет
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	0,
		|	NULL,
		|	NULL
		|ИЗ
		|	РегистрСведений.ДоставкаДопИнф.СрезПоследних(, ) КАК ДоставкаДопИнфСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПейджеры КАК ВТПейджеры
		|		ПО ДоставкаДопИнфСрезПоследних.Заказ = ВТПейджеры.Заказ
		|ГДЕ
		|	ДоставкаДопИнфСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Отказ)
		|	И ДоставкаДопИнфСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Доставлен)
		|	И НЕ ДоставкаДопИнфСрезПоследних.Заказ.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТЗаказы.ДокСсылка КАК ДокСсылка,
		|	ВТЗаказы.ДокНомер КАК ДокНомер,
		|	ВТЗаказы.ДокДата КАК ДокДата,
		|	ВТЗаказы.Автор КАК Автор,
		|	ВТЗаказы.НомерКарты КАК НомерКарты,
		|	ВТЗаказы.НомерКартыЛояльности КАК НомерКартыЛояльности,
		|	ВТЗаказы.ФИО КАК ФИО,
		|	ВТЗаказы.Пейджер КАК Пейджер,
		|	ВТЗаказы.Приготовление КАК Приготовление,
		|	ВТЗаказы.ПриготовлениеПросрочено КАК ПриготовлениеПросрочено,
		|	ВТЗаказы.КВыдаче КАК КВыдаче,
		|	ВТЗаказы.КВыдачеПросрочено КАК КВыдачеПросрочено,
		|	ВТЗаказы.Место КАК Место,
		|	ВТЗаказы.Пиктограмма КАК Пиктограмма,
		|	ВТЗаказы.Поле1 КАК Поле1,
		|	ВТЗаказы.ВремяПоследнейАктивности КАК ВремяПоследнейАктивности,
		|	ВТЗаказы.МестоПоследнейАктивности КАК МестоПоследнейАктивности,
		|	СуммыПоМестам.Сумма КАК Сумма,
		|	СуммыПоМестам.СуммаМЪ КАК СуммаМЪ,
		|	СуммыПоМестам.СуммаО КАК СуммаО,
		|	СуммыПоМестам.СуммаКП КАК СуммаКП
		|ИЗ
		|	ВТЗаказы КАК ВТЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			СУММА(ЗаказТовары.СуммаРеализации) КАК Сумма,
		|			ЗаказТовары.Ссылка КАК Ссылка,
		|			СУММА(ВЫБОР ЗаказТовары.Фирма.МестоРеализации
		|					КОГДА ЗНАЧЕНИЕ(справочник.МестаРеализации.Мяснов)
		|						ТОГДА ЗаказТовары.СуммаРеализации
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК СуммаМЪ,
		|			СУММА(ВЫБОР ЗаказТовары.Фирма.МестоРеализации
		|					КОГДА ЗНАЧЕНИЕ(справочник.МестаРеализации.Отдохни)
		|						ТОГДА ЗаказТовары.СуммаРеализации
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК СуммаО,
		|			СУММА(ВЫБОР ЗаказТовары.Фирма.МестоРеализации
		|					КОГДА ЗНАЧЕНИЕ(справочник.МестаРеализации.РЕсторан)
		|						ТОГДА ЗаказТовары.СуммаРеализации
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК СуммаКП
		|		ИЗ
		|			Документ.Заказ.Товары КАК ЗаказТовары
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЗаказТовары.Ссылка) КАК СуммыПоМестам
		|		ПО ВТЗаказы.ДокСсылка = СуммыПоМестам.Ссылка");
		
		Запрос.УстановитьПараметр("Автор", ВыбАвтор);
		
		Если ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.Клиенты") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.Клиент");
		ИначеЕсли  ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.Сотрудники") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.Автор");
        ИначеЕсли ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.ПосадочныеМеста") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.ПосадочноеМесто");
        ИначеЕсли ВыбОтбор = "Доставка" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор = &ВыбОтбор",
				"Заказ.ПосадочноеМесто = Значение(Справочник.ПосадочныеМеста.ПустаяСсылка)");
        КонецЕсли;
		Запрос.УстановитьПараметр("ВыбОтбор", ВыбОтбор);
		
		// < КС_ВДВ ------------------------------------------------------------ 
		Запрос.УстановитьПараметр("ТекВремя", ТекущаяДата());
		// КС_ВДВ > ------------------------------------------------------------ 
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ РежимЗакрытых И 
			НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПравоДоступОткрытыеЗаказы, Ложь, глПользователь, Выборка.Автор)Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ПодстрокаФильтра) Тогда
			
			Если НЕ( Найти(ВРег(Выборка.ДокНомер), ПодстрокаФильтра) 
				ИЛИ Найти(ВРег(НаимПосадочногоМеста(Выборка.Место)), ПодстрокаФильтра) 
				// < КС_ВДВ ------------------------------------------------------------ 
				// Добавим возможность поиска по новым колонкам
				ИЛИ Найти(ВРег(Выборка.НомерКарты), ПодстрокаФильтра) 
				ИЛИ Найти(ВРег(Выборка.ФИО), ПодстрокаФильтра) 
				// КС_ВДВ > ------------------------------------------------------------ 
				ИЛИ Найти(ВРег(Выборка.Автор.Наименование), ПодстрокаФильтра) 
				) Тогда
				
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаЖурнала = ЖурналЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЖурнала, Выборка);
		СтрокаЖурнала.ДокСсылка		= Выборка.ДокСсылка;
		СтрокаЖурнала.Дата			= Формат(Выборка.ДокДата, "ДФ=дд.ММ.гг");
		СтрокаЖурнала.Время			= Формат(Выборка.ДокДата, "ДФ=ЧЧ:мм");
		СтрокаЖурнала.Пиктограмма	= Выборка.Пиктограмма;
		СтрокаЖурнала.НомерКарты	= Выборка.НомерКарты;
		СтрокаЖурнала.НомерКартыЛояльности	= Выборка.НомерКартыЛояльности;
		СтрокаЖурнала.Пейджер		= Выборка.Пейджер;
		
		СтрокаЖурнала.Приготовление				= Выборка.Приготовление;
		СтрокаЖурнала.КВыдаче					= Выборка.КВыдаче;
		СтрокаЖурнала.ПриготовлениеПросрочено	= Выборка.ПриготовлениеПросрочено;
		СтрокаЖурнала.КВыдачеПросрочено			= Выборка.КВыдачеПросрочено;
		СтрокаЖурнала.Стол			= НаимПосадочногоМеста(Выборка.Место);
		СтрокаЖурнала.Номер			= УбратьВсеБуквы(Выборка.ДокНомер);
		
		СтрокаЖурнала.ВремяБездействия = Цел((ТекущаяДатаСеанса()- Выборка.ВремяПоследнейАктивности)/60);
		СтрокаЖурнала.ВремяПоследнейАктивности = Формат(Выборка.ВремяПоследнейАктивности, "ДФ=ЧЧ:мм");
		СтрокаЖурнала.МестоПоследнейАктивности = Выборка.МестоПоследнейАктивности;
		
	КонецЦикла;
	
	Если ТекДок <> Неопределено Тогда
		ТекСтрока = ЖурналЗаказов.Найти(ТекДок,"ДокСсылка");
		Если ТекСтрока<>Неопределено  Тогда
			ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока = ТекСтрока;
		КонецЕсли; 
	КонецЕсли; 
	
	КоличествоДокументов = ЖурналЗаказов.Количество();
	
КонецПроцедуры

// Сводный журнал открытых
//
Процедура ЗаполнитьСводныйЖурнал(ТекДок,ВыбОтбор=Неопределено)
	
	Перем ТекАвтор,ТекМесто,ТекСтрока,ТекКолонка;
	
	ТабПолеЖурнала = ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов;
	
	Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.Заказ") Тогда
		ТекАвтор = ТекДок.Автор;
		ТекМесто = ТекДок.ПосадочноеМесто;
		
	ИначеЕсли ТипЗнч(ТекДок) = Тип("СправочникСсылка.Сотрудники") Тогда
		ТекАвтор = ТекДок;
		ТекКолонка = "НаимАвтора";
		
	Иначе
		СтрокаЖурнала = ТабПолеЖурнала.ТекущаяСтрока;
		
		Если СтрокаЖурнала<>Неопределено Тогда
			ТекАвтор = СтрокаЖурнала.Автор;
			н = ЖурналЗаказов.Индекс(СтрокаЖурнала);
			Пока н>0 И НЕ ЗначениеЗаполнено(ТекАвтор) Цикл
				н = н - 1;
				ТекАвтор = ЖурналЗаказов[н].Автор;
			КонецЦикла; 
			
			Если ТабПолеЖурнала.ТекущаяКолонка <> Неопределено Тогда
				ТекКолонка = ТабПолеЖурнала.ТекущаяКолонка.Имя;
				Если Лев(ТекКолонка,9) = "НаимМеста" Тогда
					ТекМесто = СтрокаЖурнала["Место"+Сред(ТекКолонка,10)];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ЖурналЗаказов.Очистить();
	КоличествоДокументов = 0;
	
	// здесь только открытые заказы
	Если глВерсия = 3 Тогда // учитываем открытые заказы на доставку
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.Автор КАК Автор,
		|	ВложенныйЗапрос.Место КАК Место,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	КОЛИЧЕСТВО(ВложенныйЗапрос.Заказ) КАК КолвоЗаказов
		|ИЗ
		|	(Выбрать
		|		ЗаказДопИнф.Заказ.Автор КАК Автор,
		|		ЗаказДопИнф.Заказ.ПосадочноеМесто КАК Место,
		|		ЗаказДопИнф.Заказ.ИтоговаяСумма КАК Сумма,
		|		ЗаказДопИнф.Заказ КАК Заказ
		|	ИЗ
		|		РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		|	ГДЕ
		|		ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
		|		И (НЕ ЗаказДопИнф.Заказ.ПометкаУдаления)
		|
		|	ОБЪЕДИНИТЬ
		|
		|	Выбрать
		|		ДоставкаДопИнфСрезПоследних.Заказ.Автор КАК Автор,
		|		ДоставкаДопИнфСрезПоследних.Заказ.ПосадочноеМесто КАК Место,
		|		ДоставкаДопИнфСрезПоследних.Заказ.ИтоговаяСумма КАК Сумма,
		|		ДоставкаДопИнфСрезПоследних.Заказ КАК Заказ
		|	ИЗ
		|		РегистрСведений.ДоставкаДопИнф.СрезПоследних(, ) КАК ДоставкаДопИнфСрезПоследних
		|	ГДЕ
		|		ДоставкаДопИнфСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Отказ)
		|		И ДоставкаДопИнфСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Доставлен)
		|		И (НЕ ДоставкаДопИнфСрезПоследних.Заказ.ПометкаУдаления)
		|	) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Автор,
		|	ВложенныйЗапрос.Место
		|
		|УПОРЯДОЧИТЬ ПО
		|	Автор, Место
		|");
	Иначе
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ЗаказДопИнф.Заказ.Автор КАК Автор,
		|	ЗаказДопИнф.Заказ.ПосадочноеМесто КАК Место,
		|	СУММА(ЗаказДопИнф.Заказ.ИтоговаяСумма) КАК Сумма,
		|	КОЛИЧЕСТВО(ЗаказДопИнф.Заказ) КАК КолвоЗаказов
		|ИЗ
		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
		|ГДЕ
		|	ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
		|	И (НЕ ЗаказДопИнф.Заказ.ПометкаУдаления)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказДопИнф.Заказ.Автор,
		|	ЗаказДопИнф.Заказ.ПосадочноеМесто
		|
		|УПОРЯДОЧИТЬ ПО
		|	Автор, Место
		|");
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.СледующийПоЗначениюПоля("Автор") Цикл
		
		Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПравоДоступОткрытыеЗаказы, Ложь, глПользователь, Выборка.Автор)Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаЖурнала = ЖурналЗаказов.Добавить();
		СтрокаЖурнала.Автор			= Выборка.Автор;
		СтрокаЖурнала.НаимАвтора	= Выборка.Автор.Наименование;
		
		Если Выборка.Автор = ТекАвтор Тогда
			ТекСтрока = СтрокаЖурнала;
		КонецЕсли; 
		
		НомКолМеста=1;
		Пока Выборка.СледующийПоЗначениюПоля("Место") Цикл
			Если НомКолМеста>КолвоКолонокМест Тогда
				СтрокаЖурнала = ЖурналЗаказов.Добавить();
				НомКолМеста=1;
			КонецЕсли;
			
			НаимМеста = ?(глВерсия=3 И НЕ ЗначениеЗаполнено(Выборка.Место), "Д", Строка(Выборка.Место.Код)) + " ("+Выборка.КолвоЗаказов+")" + ФорматСумм1(Выборка.Сумма, 12);
			
			СтрокаЖурнала["НаимМеста"+НомКолМеста] = НаимМеста;
			СтрокаЖурнала["Место"	 +НомКолМеста] = Выборка.Место;
			
			Если Выборка.Место = ТекМесто Тогда
				ТекСтрока = СтрокаЖурнала;
				ТекКолонка = "НаимМеста"+НомКолМеста;
			КонецЕсли; 
			
			КоличествоДокументов = КоличествоДокументов + Выборка.КолвоЗаказов;
			
			НомКолМеста=НомКолМеста+1;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекСтрока)  Тогда
		ТабПолеЖурнала.ТекущаяСтрока = ТекСтрока;
		Если ЗначениеЗаполнено(ТекКолонка) Тогда
			ТабПолеЖурнала.ТекущаяКолонка = ТабПолеЖурнала.Колонки[ТекКолонка];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Поиск заказа по номеру
//
Функция НайтиЗаказПоНомеру(Заказ, ЗаказДопИнф=Неопределено)
	
	НомЗаказа = ИнтерфейсРМ.ВводЧисла("Номер заказа", "Число", 6, 0 );
	Если НомЗаказа=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НомЗаказа = Формат(НомЗаказа,"ЧЦ=17;ЧВН=;ЧГ=0");
	
	Заказ = Документы.Заказ.НайтиПоНомеру(НомЗаказа);
	
	Если Заказ.Пустая() ИЛИ Заказ.ПометкаУдаления Тогда
		Текст1="Заказ не найден!";
		Текст2="Заказ № "+НомЗаказа+" не найден...";
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
		Возврат Ложь;
	КонецЕсли;
	
	ЗаказДопИнф = РегистрыСведений.ЗаказДопИнф.Получить( Новый Структура("Заказ",Заказ) );
	
	Возврат Истина;
КонецФункции

// Возвращает текущий заказ в журнале, в сводном журнале заказ возвращается только
// если он один на текущем месте, или если МожноПервый=Истина, то возвращается первый заказ
Функция ОпределитьТекущийЗаказИлиАвтора(МожноПервый=Ложь)
	
	ТабПолеЖурнала = ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов;
	
	СтрокаЖурнала = ТабПолеЖурнала.ТекущаяСтрока;
	Если СтрокаЖурнала=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ СводныйЖурнал Тогда
		Возврат СтрокаЖурнала.ДокСсылка;
	КонецЕсли; 
	
	Если ТабПолеЖурнала.ТекущаяКолонка = Неопределено Тогда
		Если НЕ ДоставкаЖурнал Тогда
			ТабПолеЖурнала.ТекущаяКолонка = ТабПолеЖурнала.Колонки.НаимАвтора;
		Иначе
			ТабПолеЖурнала.ТекущаяКолонка = ТабПолеЖурнала.Колонки.НаимКурьера;
		КонецЕсли;
	КонецЕсли;
	ТекКолонка = ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов.ТекущаяКолонка.Имя;
	
	Если ТекКолонка = "НаимАвтора" Тогда
		Возврат СтрокаЖурнала.Автор;
		
	ИначеЕсли Лев(ТекКолонка,9) = "НаимМеста" Тогда
		
		ПосадочноеМесто = СтрокаЖурнала["Место"+Сред(ТекКолонка,10)];
		Если ПосадочноеМесто=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( ПосадочноеМесто );
		Если МассивЗаказов.Количество()=0 Тогда
			Возврат Неопределено;
		ИначеЕсли МассивЗаказов.Количество()=1 ИЛИ МожноПервый Тогда
			Возврат МассивЗаказов[0];
		КонецЕсли;
		
	ИначеЕсли ТекКолонка = "НаимКурьера" Тогда
		Возврат СтрокаЖурнала.Курьер;
		
	ИначеЕсли Лев(ТекКолонка,10) = "НаимРайона" Тогда
		
		Район = СтрокаЖурнала["Район"+Сред(ТекКолонка,11)];
		Если Район=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МассивЗаказов = ПолучитьМассивОткрытыхЗаказовНаДоставку(Район);
		Если МассивЗаказов.Количество()=0 Тогда
			Возврат Неопределено;
		ИначеЕсли МассивЗаказов.Количество()=1 ИЛИ МожноПервый Тогда
			Возврат МассивЗаказов[0];
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Выбор посадочного места считыванием карты доступа
//
Процедура ОбработкаВыбораПосадочногоМеста(ВыбМесто)
	
	МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( ВыбМесто );
	
	Если МассивЗаказов.Количество()=0 Тогда
		СоздатьНовыйЗаказ(ВыбМесто);
	Иначе
		ОткрытьЗаказ( МассивЗаказов[0] );
	КонецЕсли;
	
КонецПроцедуры

// Выбор клиента считыванием карты доступа
//
Процедура ОбработкаВыбораКлиента(ВыбКлиент, ВыбКартаДоступа)
// < КС_ВДВ ------------------------------------------------------------ 
//Процедура ОбработкаВыбораКлиента(ВыбКлиент)
// КС_ВДВ > ------------------------------------------------------------ 

    // < КС_ВДВ ------------------------------------------------------------ 
	//МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( Неопределено, ВыбКлиент );
	МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( Неопределено, ВыбКлиент, ВыбКартаДоступа );
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Если МассивЗаказов.Количество()=0 Тогда
		//Z+
		Текст1="Заказ не найден!";
		Текст2="По карте клиента заказ не найден!
		|
		|Создать заказ?";
		Ответ=ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"Да","","Esc=Нет");	
		Если Ответ="Да" Тогда
			СоздатьНовыйЗаказ(ВыбКлиент,Истина);
		КонецЕсли;
		//Z-
	ИначеЕсли МассивЗаказов.Количество()=1 Тогда
		ОткрытьЗаказ( МассивЗаказов[0] );
		
	Иначе
		ВыбЗаказ = ИнтерфейсРМ.ВыборИзСписка( МассивЗаказов );
		Если ВыбЗаказ <> Неопределено Тогда
			ОткрытьЗаказ( ВыбЗаказ );
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы выбранного заказа
//
// Параметры:
//	Параметр1	- описание параметра
//
Процедура ОткрытьЗаказ(ДокСсылка)
	
	Если ТипЗнч(ДокСсылка) <> Тип("ДокументСсылка.Заказ") Тогда
		Возврат;
	КонецЕсли; 
	
	//закрытие 0-го заказа
	Заказ = ДокСсылка.ПолучитьОбъект();
	Если глПараметрыРМ.ККМЕсть и Заказ.Товары.Количество() = 0 и Заказ.Специфики.Количество() = 0 тогда
		//если пустой заказ и это кассовое РМ, предложим его закрыть
		Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос","Клиент не делал заказы","ЗАКРЫТЬ ЗАКАЗ ?","ДА","","НЕТ") = "ДА" тогда
			НачатьТранзакцию();
			ДокПротокол = Документы.ПротоколРасчетов.СоздатьДокумент();
			ДокПротокол.Номер		= Заказ.Номер;
			ДокПротокол.Дата		= ТекущаяДата();
			ДокПротокол.Автор		= глПользователь;
			ДокПротокол.Смена		= ИнтерфейсРМ.ТекущаяСмена();
			ДокПротокол.Заказ		= Заказ.Ссылка;
			ДокПротокол.Клиент		= Заказ.Клиент;
			ДокПротокол.МестоРеализации=Заказ.МестоРеализации;
			ДокПротокол.ИтогСуммаФакт = 0;
			// нет разделения по группам оплаты
			ДокПротокол.Неучетный	= истина;	// внесение предоплаты записываем как неучетный, чтобы не попадал в недозакрытые
			//ДокПротокол.ГруппаОплаты = ТаблицаГруппыОплаты[0].Группа;
			ДокПротокол.Записать(РежимЗаписиДокумента.Проведение);
			Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ДокПротокол, "Объект.Записать(РежимЗаписиДокумента.Проведение)" ) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
			
			ЗаказДопИнф = РегистрыСведений.ЗаказДопИнф.СоздатьМенеджерЗаписи();
			ЗаказДопИнф.Заказ = Заказ.Ссылка;
			ЗаказДопИнф.Прочитать();
			ЗаказДопИнф.Статус				= Перечисления.СтатусыЗаказа.Закрыт;
			ЗаказДопИнф.ДатаЗакрытия		= ДокПротокол.Дата;
			ЗаказДопИнф.ПротоколРасчетов	= ДокПротокол;
	
			Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( ЗаказДопИнф, "Объект.Записать()" ) Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
			
			ЗафиксироватьТранзакцию();
			ОбновитьЖурнал();
			возврат;
		конецесли;
	конецесли;
	
	ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("Заказ");
	ОбработкаЗаказ.Заказ = ДокСсылка.ПолучитьОбъект();
	
	Если НЕ ОбработкаЗаказ.ПрочитатьЗаказ() Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаЗаказ.БезАвторизации = Истина;
	ОбработкаЗаказ.ОткрытьРабочуюФормуЗаказа();
	
КонецПроцедуры

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ПоискЗаказаПоКартеДоступа() Экспорт 
	
	ВыбЗаказ = ксТрактир.НайтиЗаказКлиента();
	
	Если ВыбЗаказ <> Неопределено Тогда
		ОткрытьЗаказ( ВыбЗаказ );
	КонецЕсли;
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

Процедура ПоискЗаказаПоНомеру() Экспорт 
	
	ВыбЗаказ = Неопределено;
	
	Если НайтиЗаказПоНомеру(ВыбЗаказ) тогда
		ОткрытьЗаказ( ВыбЗаказ );
	КонецЕсли;
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДОСТАВКОЙ

// Простой журнал заказов на доставку
//
Процедура ЗаполнитьДоставкаПростойЖурнал(ТекДок, ВыбОтбор=Неопределено, ПодстрокаФильтра=Неопределено) 
	
	Если НЕ ЗначениеЗаполнено(ТекДок) Тогда
		ТекСтрока = ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока;
		ТекДок = ?(ТекСтрока=Неопределено, Неопределено, ТекСтрока.ДокСсылка);
	КонецЕсли; 
	
	ЖурналЗаказов.Очистить();
	
	Если РежимНедозакрытых Тогда
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоставкаДопИнфСрезПоследних.Заказ.Ссылка 	КАК ДокСсылка,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Номер 	КАК ДокНомер,
		|	ПротоколРасчетов.Дата			 			КАК ДокДата,
		|	ДоставкаДопИнфСрезПоследних.Период		 	КАК Период,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Курьер 	КАК Курьер,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Адрес 	КАК Адрес,
		|	ДоставкаДопИнфСрезПоследних.Заказ.ИтоговаяСумма	КАК Сумма,
		|	6 											КАК Пиктограмма,
		|	ДоставкаДопИнфСрезПоследних.Статус 			КАК Статус,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Телефон	КАК Телефон,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Клиент	КАК Клиент,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Автор		КАК Автор
		|ИЗ
		|	РегистрСведений.ДоставкаДопИнф.СрезПоследних КАК ДоставкаДопИнфСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколРасчетов КАК ПротоколРасчетов
		|		ПО ДоставкаДопИнфСрезПоследних.Заказ = ПротоколРасчетов.Заказ
		|ГДЕ
		|	ПротоколРасчетов.Дата >= &ДатаНачала
		|	И ПротоколРасчетов.ККМ = ЗНАЧЕНИЕ(Справочник.ТорговоеОборудование.ПустаяСсылка)
		|	И НЕ ПротоколРасчетов.Неучетный
		|	И НЕ ДоставкаДопИнфСрезПоследних.Заказ.ПометкаУдаления
		|	И ДоставкаДопИнфСрезПоследних.Заказ.МестоРеализации = &МестоРеализации
		|	И ДоставкаДопИнфСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Доставлен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДокДата");
		
		Запрос.УстановитьПараметр("ДатаНачала", НачПериодаЗакрытых.Дата);
		
	ИначеЕсли РежимЗакрытых Тогда
		Запрос = Новый Запрос("
		// доставленные заказы
		
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДоставкаДопИнфСрезПоследних.Заказ.Ссылка 			КАК ДокСсылка,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Номер 			КАК ДокНомер,
		|	ПротоколРасчетов.Дата								КАК ДокДата,
		|	ДоставкаДопИнфСрезПоследних.Период		 			КАК Период,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Курьер			КАК Курьер,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Адрес			 	КАК Адрес,
		|	ДоставкаДопИнфСрезПоследних.Заказ.ИтоговаяСумма 	КАК Сумма,
		|	ВЫБОР КОГДА ПротоколРасчетов.ККМ = ЗНАЧЕНИЕ(Справочник.ТорговоеОборудование.ПустаяСсылка) ТОГДА 6 ИНАЧЕ 1 КОНЕЦ 
		|											КАК Пиктограмма,
		|	ДоставкаДопИнфСрезПоследних.Статус 			КАК Статус,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Телефон	КАК Телефон,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Клиент	КАК Клиент,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Автор 	КАК Автор
		|ИЗ
		|	РегистрСведений.ДоставкаДопИнф.СрезПоследних КАК ДоставкаДопИнфСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколРасчетов КАК ПротоколРасчетов
		|		ПО ДоставкаДопИнфСрезПоследних.Заказ = ПротоколРасчетов.Заказ
		|ГДЕ
		|	ПротоколРасчетов.Дата >= &ДатаНачала
		|	И НЕ ПротоколРасчетов.Неучетный
		|	И НЕ ДоставкаДопИнфСрезПоследних.Заказ.ПометкаУдаления
		|	И ДоставкаДопИнфСрезПоследних.Заказ.МестоРеализации = &МестоРеализации
		|	И ДоставкаДопИнфСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Доставлен)
		|"+?(ЗначениеЗаполнено(ВыбОтбор), "
		|	И ДоставкаДопИнфСрезПоследних.ЗначОтбор = &ВыбОтбор", "") + "
		|
		|ОБЪЕДИНИТЬ
		|
		// отмененные заказы на доставку
		|ВЫБРАТЬ
		|	ДоставкаДопИнфСрезПоследних.Заказ.Ссылка,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Номер,
		|	ДоставкаДопИнфСрезПоследних.Период,
		|	ДоставкаДопИнфСрезПоследних.Период,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Курьер,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Адрес,
		|	ДоставкаДопИнфСрезПоследних.Заказ.ИтоговаяСумма,
		|	2 КАК Пиктограмма,
		|	ДоставкаДопИнфСрезПоследних.Статус,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Телефон,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Клиент,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Автор
		|ИЗ
		|	РегистрСведений.ДоставкаДопИнф.СрезПоследних КАК ДоставкаДопИнфСрезПоследних
		|ГДЕ
		|	ДоставкаДопИнфСрезПоследних.Период >= &ДатаНачала
		|	И НЕ ДоставкаДопИнфСрезПоследних.Заказ.ПометкаУдаления
		|	И ДоставкаДопИнфСрезПоследних.Заказ.МестоРеализации = &МестоРеализации
		|	И ДоставкаДопИнфСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Отказ)
		|"+?(ЗначениеЗаполнено(ВыбОтбор), "
		|	И ДоставкаДопИнфСрезПоследних.ЗначОтбор = &ВыбОтбор", "") + "
        |
		|ОБЪЕДИНИТЬ ВСЕ
		|
		// возвраты
		|ВЫБРАТЬ
		|	Возврат.Ссылка,
		|	Возврат.Заказ.Номер,
		|	Возврат.Дата,
		|	ДоставкаДопИнфСрезПоследних.Период,
		|	Возврат.Заказ.Курьер,
		|	Возврат.Заказ.Адрес,
		|	Возврат.Сумма,
		|	3 КАК Пиктограмма,
		|	ДоставкаДопИнфСрезПоследних.Статус,
		|	Возврат.Заказ.Телефон,
		|	Возврат.Клиент,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Автор
		|ИЗ
		|	Документ.Возврат КАК Возврат
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоставкаДопИнф.СрезПоследних КАК ДоставкаДопИнфСрезПоследних
		|		ПО Возврат.Заказ = ДоставкаДопИнфСрезПоследних.Заказ
		|ГДЕ
		|	Возврат.Дата >= &ДатаНачала
		|	И НЕ Возврат.ПометкаУдаления
		|	И Возврат.Заказ.Доставка
		|	И Возврат.МестоРеализации = &МестоРеализации
		|"+?(ЗначениеЗаполнено(ВыбОтбор), "
		|	И ДоставкаДопИнфСрезПоследних.ЗначОтбор = &ВыбОтбор", "") + "
        |
		|УПОРЯДОЧИТЬ ПО
		|	ДокДата");
		
		Запрос.УстановитьПараметр("ДатаНачала", НачПериодаЗакрытых.Дата);
		Если ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.Клиенты") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.Клиент");
		ИначеЕсли  ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.Сотрудники") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.Курьер");
        ИначеЕсли ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.КонтактнаяИнформация") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.Адрес");
        ИначеЕсли ТипЗнч(ВыбОтбор) = Тип("ПеречислениеСсылка.СтатусыДоставки") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Статус");
        КонецЕсли;
		Запрос.УстановитьПараметр("ВыбОтбор", ВыбОтбор);
		
	Иначе
		// открытые заказы
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ДоставкаДопИнфСрезПоследних.Заказ.Ссылка 			КАК ДокСсылка,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Номер 			КАК ДокНомер,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Дата				КАК ДокДата,
		|	ДоставкаДопИнфСрезПоследних.Период		 			КАК Период,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Курьер			КАК Курьер,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Адрес 			КАК Адрес,
		|	ДоставкаДопИнфСрезПоследних.Заказ.ИтоговаяСумма 	КАК Сумма,
		|	ВЫБОР КОГДА ДоставкаДопИнфСрезПоследних.Заказ.ЕстьПресчет ТОГДА 1 ИНАЧЕ 0 КОНЕЦ	КАК Пиктограмма,
		|	ДоставкаДопИнфСрезПоследних.Статус 					КАК Статус,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Телефон			КАК Телефон,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Клиент			КАК Клиент,
		|	ДоставкаДопИнфСрезПоследних.Заказ.Автор 			КАК Автор
		|ИЗ
		|	РегистрСведений.ДоставкаДопИнф.СрезПоследних КАК ДоставкаДопИнфСрезПоследних
		|ГДЕ
		|	ДоставкаДопИнфСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Доставлен)
		|	И ДоставкаДопИнфСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Отказ)
		|	И (НЕ ДоставкаДопИнфСрезПоследних.Заказ.ПометкаУдаления)
		|	И ДоставкаДопИнфСрезПоследних.Заказ.МестоРеализации = &МестоРеализации
		|"+?(ЗначениеЗаполнено(ВыбАвтор), "
		|	И ДоставкаДопИнфСрезПоследних.Заказ.Курьер = &Курьер", "") + "
		|"+?(ЗначениеЗаполнено(ВыбОтбор), "
		|	И ДоставкаДопИнфСрезПоследних.ЗначОтбор = &ВыбОтбор", "") + "
		|
		|УПОРЯДОЧИТЬ ПО ДокДата
		|");
		
		Запрос.УстановитьПараметр("Курьер", ВыбАвтор);
		
		Если ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.Клиенты") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.Клиент");
		ИначеЕсли  ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.Сотрудники") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.Курьер");
        ИначеЕсли ТипЗнч(ВыбОтбор) = Тип("СправочникСсылка.КонтактнаяИнформация") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Заказ.Адрес");
        ИначеЕсли ТипЗнч(ВыбОтбор) = Тип("ПеречислениеСсылка.СтатусыДоставки") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ЗначОтбор","Статус");
        КонецЕсли;
		Запрос.УстановитьПараметр("ВыбОтбор", ВыбОтбор);
        		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ РежимЗакрытых И 
			НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ДоставкаДоступОткрытыеЗаказы, Ложь, глПользователь, Выборка.Автор)Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(ПодстрокаФильтра) Тогда
			
			Если НЕ( Найти(ВРег(Выборка.Адрес.Представление), ПодстрокаФильтра) 
				ИЛИ Найти(ВРег(Выборка.Телефон.ПолеХраненияНомера), ПодстрокаФильтра) 
				ИЛИ Найти(ВРег(Выборка.Клиент.Наименование), ПодстрокаФильтра) 
				ИЛИ Найти(ВРег(Строка(Выборка.Статус)), ПодстрокаФильтра) 
				ИЛИ Найти(ВРег(Выборка.Курьер.Наименование), ПодстрокаФильтра) 
				) Тогда
				
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		СтрокаЖурнала = ЖурналЗаказов.Добавить();
		СтрокаЖурнала.ДокСсылка		= Выборка.ДокСсылка;
		СтрокаЖурнала.Дата			= Формат(Выборка.ДокДата, "ДФ=дд.ММ.гг");
		СтрокаЖурнала.Время			= Формат(Выборка.ДокДата, "ДФ=ЧЧ:мм");
		СтрокаЖурнала.Пиктограмма	= Выборка.Пиктограмма;
		СтрокаЖурнала.Адрес			= Выборка.Адрес.Представление;
		СтрокаЖурнала.Номер			= Выборка.ДокНомер;
		СтрокаЖурнала.Курьер		= Выборка.Курьер;
		СтрокаЖурнала.Клиент		= Выборка.Клиент;
		СтрокаЖурнала.Автор			= Выборка.Автор;
		СтрокаЖурнала.Сумма			= Выборка.Сумма;
		СтрокаЖурнала.Статус		= Выборка.Статус;
		СтрокаЖурнала.Телефон		= Выборка.Телефон.ПолеХраненияНомера;
		
	КонецЦикла;
	
	Если ТекДок <> Неопределено Тогда
		ТекСтрока = ЖурналЗаказов.Найти(ТекДок,"ДокСсылка");
		Если ТекСтрока<>Неопределено  Тогда
			ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов.ТекущаяСтрока = ТекСтрока;
		КонецЕсли; 
	КонецЕсли; 
	
	КоличествоДокументов = ЖурналЗаказов.Количество();
	
КонецПроцедуры

// Сводный журнал открытых заказов на доставку
//
Процедура ЗаполнитьДоставкаСводныйЖурнал(ТекДок,ВыбОтбор=Неопределено)
	
	Перем ТекКурьер,ТекРайон,ТекСтрока,ТекКолонка;
	
	ТабПолеЖурнала = ФормаЖурнала.ЭлементыФормы.ЖурналЗаказов;
	
	Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.Заказ") Тогда
		ТекКурьер = ТекДок.Курьер;
		Если ЗначениеЗаполнено(ТекДок.Адрес) Тогда
			ТекРайон = ТекДок.Адрес.Район;
		Иначе
			ТекРайон = Справочники.Районы.ПустаяСсылка();
		КонецЕсли; 
		
	ИначеЕсли ТипЗнч(ТекДок) = Тип("СправочникСсылка.Сотрудники") Тогда
		ТекКурьер = ТекДок;
		ТекКолонка = "НаимКурьера";
		
	Иначе
		СтрокаЖурнала = ТабПолеЖурнала.ТекущаяСтрока;
		
		Если СтрокаЖурнала<>Неопределено Тогда
			ТекКурьер = СтрокаЖурнала.Курьер;
			н = ЖурналЗаказов.Индекс(СтрокаЖурнала);
			Пока н>0 И НЕ ЗначениеЗаполнено(ТекКурьер) Цикл
				н = н - 1;
				ТекКурьер = ЖурналЗаказов[н].Курьер;
			КонецЦикла; 
			
			Если ТабПолеЖурнала.ТекущаяКолонка <> Неопределено Тогда
				ТекКолонка = ТабПолеЖурнала.ТекущаяКолонка.Имя;
				Если Лев(ТекКолонка,9) = "НаимРайона" Тогда
					ТекМесто = СтрокаЖурнала["Район"+Сред(ТекКолонка,10)];
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ЖурналЗаказов.Очистить();
	КоличествоДокументов = 0;
	
	// здесь только открытые заказы на доставку
	Запрос = Новый Запрос("
	|Выбрать
	|	ДоставкаДопИнфСрезПоследних.Заказ.Курьер КАК Курьер,
	|	ДоставкаДопИнфСрезПоследних.Заказ.Адрес.Район КАК Район,
	|	Сумма(ДоставкаДопИнфСрезПоследних.Заказ.ИтоговаяСумма) КАК Сумма,
	|	Количество(ДоставкаДопИнфСрезПоследних.Заказ) КАК КолвоЗаказов
	|ИЗ
	|	РегистрСведений.ДоставкаДопИнф.СрезПоследних(, ) КАК ДоставкаДопИнфСрезПоследних
	|ГДЕ
	|	ДоставкаДопИнфСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Отказ)
	|	И ДоставкаДопИнфСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Доставлен)
	|	И (НЕ ДоставкаДопИнфСрезПоследних.Заказ.ПометкаУдаления)
	|	И ДоставкаДопИнфСрезПоследних.Заказ.МестоРеализации = &МестоРеализации
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоставкаДопИнфСрезПоследних.Заказ.Курьер,
	|	ДоставкаДопИнфСрезПоследних.Заказ.Адрес.Район
	|
	|УПОРЯДОЧИТЬ ПО
	|	Курьер, Район
	|");
	
	Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.СледующийПоЗначениюПоля("Курьер") Цикл
		
		Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПравоДоступОткрытыеЗаказы, Ложь, глПользователь, Выборка.Курьер)Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаЖурнала = ЖурналЗаказов.Добавить();
		СтрокаЖурнала.Курьер		= Выборка.Курьер;
		СтрокаЖурнала.НаимКурьера	= Выборка.Курьер.Наименование;
		
		Если Выборка.Курьер = ТекКурьер Тогда
			ТекСтрока = СтрокаЖурнала;
		КонецЕсли; 
		
		НомКолРайона=1;
		Пока Выборка.СледующийПоЗначениюПоля("Район") Цикл
			Если НомКолРайона>КолвоКолонокМест Тогда
				СтрокаЖурнала = ЖурналЗаказов.Добавить();
				НомКолРайона=1;
			КонецЕсли;
			
			НаимРайона = ?(НЕ ЗначениеЗаполнено(Выборка.Район), "<>", Строка(Выборка.Район)) + " ("+Выборка.КолвоЗаказов+")" + ФорматСумм1(Выборка.Сумма, 12);
			
			СтрокаЖурнала["НаимРайона"+НомКолРайона] = НаимРайона;
			СтрокаЖурнала["Район" 	  +НомКолРайона] = Выборка.Район;
			
			Если Выборка.Район = ТекРайон Тогда
				ТекСтрока = СтрокаЖурнала;
				ТекКолонка = "НаимРайона"+НомКолРайона;
			КонецЕсли; 
			
			КоличествоДокументов = КоличествоДокументов + Выборка.КолвоЗаказов;
			
			НомКолРайона=НомКолРайона+1;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекСтрока)  Тогда
		ТабПолеЖурнала.ТекущаяСтрока = ТекСтрока;
		Если ЗначениеЗаполнено(ТекКолонка) Тогда
			ТабПолеЖурнала.ТекущаяКолонка = ТабПолеЖурнала.Колонки[ТекКолонка];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает массив открытых заказов по посадочному месту, если задано.
// С отбором по месту реализации.
Функция ПолучитьМассивОткрытыхЗаказовНаДоставку(Район=Неопределено, Курьер=Неопределено) Экспорт
	
	МассивЗаказов = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДоставкаДопИнфСрезПоследних.Заказ.Ссылка КАК ДокСсылка
	|ИЗ
	|	РегистрСведений.ДоставкаДопИнф.СрезПоследних КАК ДоставкаДопИнфСрезПоследних
	|ГДЕ
	|	ДоставкаДопИнфСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Доставлен)
	|	И ДоставкаДопИнфСрезПоследних.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоставки.Отказ)
	|	И НЕ ДоставкаДопИнфСрезПоследних.Заказ.ПометкаУдаления
	|	И ДоставкаДопИнфСрезПоследних.Заказ.МестоРеализации = &МестоРеализации
	|"+?(ЗначениеЗаполнено(Район), "
	|	И ДоставкаДопИнфСрезПоследних.Заказ.Адрес.Район = &Район", "") + "
	|"+?(ЗначениеЗаполнено(Курьер), "
	|	И ДоставкаДопИнфСрезПоследних.Заказ.Курьер = &Курьер", "") + "
	|
	|УПОРЯДОЧИТЬ ПО ДоставкаДопИнфСрезПоследних.Заказ.Дата
	|");
	
	Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
	Запрос.УстановитьПараметр("Курьер", Курьер);
	Запрос.УстановитьПараметр("Район", Район);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивЗаказов.Добавить(Выборка.ДокСсылка);
	КонецЦикла;
	
	Возврат МассивЗаказов;
КонецФункции

// Стандартный диалог ввода чисел и паролей для интерфейса рабочего места
//
// Параметры:
//	ЗаголовокФормы	- заголовок окна
//	ТипЗначения		- строка, "Пароль" для ввода пароля, "Число", "Строка"
//	Длина			- только для чисел и строк
//	Точность		- только для чисел
//	НачЗначение		- начальное значение в форме
//	Кратность		- только для чисел, если не 0, то допустим ввод только кратных значений
//	ВидЗначения		- строка, уточняющий параметр, только для паролей
//
// Возвращаемое значение:
//	Введенное значение. Если отказ от ввода, то Неопределено
//
Функция ВводСтроки(ЗаголовокФормы) Экспорт
	
	ВводСтроки = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводСтроки").ПолучитьФорму("Форма");
	ВводСтроки.Заголовок = ЗаголовокФормы;
	Результат = ВводСтроки.ОткрытьМодально();
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

ПравоДоступОткрытыеЗаказы = ПланыВидовХарактеристик.ПраваДоступа.ДоступОткрытыеЗаказы;

#КонецЕсли