
#Если Клиент Тогда

Перем ГлавнаяФорма Экспорт;
Перем Окно1С;
Перем ПроцессВыходаЗапущен;
Перем РежимТестирования;

Перем ВыходОС Экспорт;						// устанавливается в обработке РежимАдминистратора
Перем ВыполнитьДействияПриВозврате Экспорт;	// для отработки в ИнтерфейсРМ.ПриЗакрытииОкна()

Перем БроньВремя1 Экспорт;					// для работы в режиме бронирования
Перем БроньВремя2 Экспорт;					// для работы в режиме бронирования

Перем SBLayoutEditor Экспорт;				// компонента для работы с планом зала, Экспорт для Режима бронирования
Перем ПланЗалаЗагружен Экспорт;				// признак использования и удачной загрузки моделей плана зала
Перем ТаблицаПлановЗала;					// таблица используемых планов зала
Перем ИндексТекущегоПлана;					// индес текущего плана в таблице доступных

Перем NativeDraw_ВнешняяКомпонента Экспорт; 

Перем фФормаСкрытияМеню, ФормаСкрытияМеню, AHK_СкрытьМенюИПанели;
////////////////////////////////////////////////////////////////////////////////

// Вызывается перед открытием формы из ИнтерфейсРМ.ЗапуститьРабочееМесто()
//
Функция ИнициализацияРабочегоМеста(ТекущееРМ) Экспорт
	
	// Инициализация глобальных переменных
	глТорговоеОборудование	= Новый Структура;	// чтобы убрать все лишнее при запуске в режиме тестирования
	глСтекОкон				= Новый Массив;
	глОбработки				= Новый Структура;
	глФлагБлокировка		= Ложь;
	глФлагЗапретБлокировки	= Ложь;
	глПользователь			= Справочники.Сотрудники.ПустаяСсылка();
	
	// Инициализация параметров рабочего места
	РежимТестирования = ЗначениеЗаполнено(ТекущееРМ);
	
	Если РежимТестирования Тогда
		глРабочееМесто = ТекущееРМ;
		
	Иначе
		ПрофильВхода = "\\"+ИмяКомпьютера()+"\"+ИмяПользователя();
		глРабочееМесто = Справочники.РабочиеМеста.НайтиПоРеквизиту("ПрофильВхода",ПрофильВхода);
		
		Если глРабочееМесто.Пустая() Тогда
			Предупреждение("Рабочее место с профилем входа """+ПрофильВхода+""" отсутствует!
							|Обратитесь к администратору...");
			Возврат Ложь;
		КонецЕсли; 
		
		Для каждого Соединение Из ПолучитьСоединенияИнформационнойБазы() Цикл
			
			Если Соединение.Пользователь = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ПрофильСоединения = "\\"+Соединение.ИмяКомпьютера+"\"+Соединение.Пользователь.Имя;
			
			Если Соединение.НомерСоединения <> НомерСоединенияИнформационнойБазы() И ПрофильСоединения = ПрофильВхода Тогда
				Предупреждение("Рабочее место с профилем входа """+ПрофильВхода+""" запущено в другом сеансе!", 5);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если глРабочееМесто.ПометкаУдаления Тогда
		Предупреждение("Рабочее место """+глРабочееМесто+""" помечено на удаление!
						|Обратитесь к администратору...");
		Возврат Ложь;
	КонецЕсли;	
	
	// Чтение параметров РМ через форму настройки для контроля соответствия версии и релизу.
	// Заполняется глобальная переменная-структура глПараметрыРМ,
	// ключи структуры соответствуют именам реквизитов формы НастройкаРМ
	глПараметрыРМ = Новый Структура;
	НастройкаРМ = Справочники.РабочиеМеста.ПолучитьФорму("НастройкаРМ");
	НастройкаРМ.СправочникОбъект = глРабочееМесто.ПолучитьОбъект();
	Если НЕ НастройкаРМ.ПроверкаПараметров() Тогда
		Предупреждение("Рабочее место """+глРабочееМесто+""" не настроено!
						|Обратитесь к администратору...");
		Возврат Ложь;
	КонецЕсли;
	НастройкаРМ.СохранитьПараметры(глПараметрыРМ);
	// интерфейсные объекты можно создавать только после получения параметров РМ
	глОжидание = Обработки.Ожидание.Создать();
	
	// Загрузка внешних компонент
	Если НЕ РежимТестирования Тогда
		глОжидание.Начало("Запуск системы", "Загрузка внешних компонент,
							|поиск ключа защиты...");
							
		Если Не глЗагрузитьВнешниеКомпоненты() Тогда
			глОжидание.Конец();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// ----------------------------------------------------------------------
	// Подключение торгового оборудования
	глОжидание.Начало("Запуск системы", "Подключение торгового оборудования...");
	
	МассивТО = ПолучитьМассивПодключаемогоТО();
	ТаблицаОшибок = Новый ТаблицаЗначений;
	тоВыполнитьПодключениеОтключение("Подключить", Ложь, МассивТО, ТаблицаОшибок);
	
	Для каждого Ошибка Из ТаблицаОшибок Цикл
		Текст1 = Ошибка.ТО.Наименование;
		Текст2 = Ошибка.Описание+Символы.ПС+Ошибка.Подробно;
		Если ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"ОК","","Esc=Выход")="Выход" Тогда
			глОжидание.Конец();
			// На случай если Торговое оборудование подключено с ошибками 
			// и у рабочего места указана настройка выключения компьтера при выходе
			Если НЕ РежимТестирования И глПараметрыРМ.РежимВыхода = 0 Тогда
				РаботаСокнами.ShutDown();
				ЗавершитьРаботуСистемы(Ложь);
			Иначе
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	// ----------------------------------------------------------------------
	// если основной режим работы - доставка, то это многое меняет :)
	глДоставкаОсновнойРежим = глВерсия=3 И глПараметрыРМ.ДоставкаЕсть И глПараметрыРМ.ДоставкаРежимИспользования<>1;
	
	// ----------------------------------------------------------------------
	// проверка наличия хотя бы одного элемента в справочнике Сотрудники
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Сотрудники ГДЕ НЕ ПометкаУдаления И НЕ ЭтоГруппа");
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Текст1 = "Нет доступа!";
		Текст2 = "Нужно завести хотя бы одного сотрудника!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		глОжидание.Конец();
		Возврат Ложь;
	КонецЕсли; 
	
	Если глПараметрыРМ.РежимВыхода = 0 Тогда        
		Запрос = Новый Запрос( "ВЫБРАТЬ Ссылка ИЗ Справочник.Сотрудники ГДЕ НЕ ПометкаУдаления И НЕ ЭтоГруппа");
		Выборка = Запрос.Выполнить().Выбрать();
		ЕстьПравоНаВыходОС = Ложь;
		Пока Выборка.Следующий() Цикл
			Если ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ВыходОС,Ложь,Выборка.Ссылка) Тогда
				ЕстьПравоНаВыходОС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьПравоНаВыходОС Тогда
			Текст1 = "Нет доступа!";
			Текст2 = "Нет ни одного сотрудника с правом выхода в ОС!";
			//ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			глОжидание.Конец();
			//Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// ----------------------------------------------------------------------
	// проверка наличия посадочных мест
	Если НЕ глДоставкаОсновнойРежим Тогда
		СписокМест = ИнтерфейсРМ.ПолучитьСписокПосадочныхМест(глПараметрыРМ.МестоРеализации);
		Если СписокМест.Количество()=0 Тогда
			Текст1 = "Нет доступа!";
			Текст2 = "Для данного места реализации не заведен список посадочных мест!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			глОжидание.Конец();
			Возврат Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	// ----------------------------------------------------------------------
	// проверка текущей смены
	ТекСмена = РегистрыСведений.ТекущиеСмены.Получить(Новый Структура("МестоРеализации", глПараметрыРМ.МестоРеализации )).Смена;
	ТекСменаЗапрос = ИнтерфейсРМ.ТекущаяСменаЗапрос();
	Если ТекСменаЗапрос <> ТекСмена Тогда
		МенеджерЗаписи = РегистрыСведений.ТекущиеСмены.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.МестоРеализации = глПараметрыРМ.МестоРеализации;
		МенеджерЗаписи.Смена = ТекСменаЗапрос;
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( МенеджерЗаписи, "Объект.Записать()" ) Тогда
			глОжидание.Конец();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// ----------------------------------------------------------------------
	// Добавление в глТорговоеОборудование соответствия ГруппПечати и РМ мониторов марок //pr	
	//глТорговоеОборудование.Вставить("СоответствиеМониторРМ", Справочники.РабочиеМеста.ПолучитьСоответствиеМониторРМ());
	
	// ----------------------------------------------------------------------
	// подключение внешней обработки управления формами
	КаталогЛокальныхНастроек = Константы.КаталогЛокальныхНастроек.Получить();
	
	Если НЕ ПустаяСтрока( КаталогЛокальныхНастроек ) Тогда
		ИмяФайла = КаталогЛокальныхНастроек+"\УправлениеФормами.epf";
		Если РаботаСФайлами.ПроверитьСуществованиеФайла( ИмяФайла, , Истина ) Тогда
			глДопУправлениеФормами = ВнешниеОбработки.Создать(ИмяФайла);  
		КонецЕсли;
	КонецЕсли;
	
	// ----------------------------------------------------------------------
	//запись события запуска системы
	ИнтерфейсРМ.ЗаполнитьТаблицуСобытий();
	
	Если РежимТестирования Тогда
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗапускРежимТестирования, , глРабочееМесто);
	Иначе
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗапускРМ);
	КонецЕсли; 
	
	глОжидание.Конец();
	
	// пользователь по умолчанию
	Если глПараметрыРМ.ПользовательВходБезАвторизации Тогда
		глПользователь = глПараметрыРМ.ПользовательПоУмолчанию;
	КонецЕсли; 
	
	Возврат Истина;
КонецФункции

// Вызывается после открытия формы из ИнтерфейсРМ.ЗапуститьРабочееМесто()
//
Процедура ДействияПослеОткрытия() Экспорт
	
	//hWnd = РаботаСокнами.FindMDIChildV8( ГлавнаяФорма.Заголовок );
	//РаботаСокнами.MainShowV8( hWnd, 0 );			// убрать все панели инструментов и главное меню
	//РаботаСокнами.MainShowV8( глСтекОкон[0].hWnd, 0 );			// убрать все панели инструментов и главное меню
	
	//AHK_СкрытьМенюИПанели = РаботаСокнами.СкрытьМенюИпанели();	
	ПодождатьПокаОтработаетMainShowV8();
	
КонецПроцедуры

// Ждет пока отработает поток запущенный в РаботаСокнами.MainShowV8(), убирающий панели инструментов,
// иначе не правильно определятся размеры плана зала
Процедура ПодождатьПокаОтработаетMainShowV8() Экспорт
	
		//Если НЕ РаботаСокнами.GetMainShowStatusV8() = 1 Тогда
		//	ГлавнаяФорма.ПодключитьОбработчикОжидания("ПодождатьПокаОтработаетMainShowV8",0.1,Истина);
		//	Возврат;
		//КонецЕсли;
	
	// панели инструментов убраны, можно загружать план зала
	ЗагрузитьПланЗала();
	
	// установка фокуса (иногда не возвращается после загрузки плана зала)
	//WshShell.AppActivate(?(ТекущийЯзыкСистемы()="en","1C:Enterprise", "1С:Предприятие") + " - " + ПолучитьЗаголовокСистемы() );
	
	// посылка нажатий работает тоже только после того как все устаканится
	ИнтерфейсРМ.ЗакрытьОкноСообщений();
	
	// оповещения тоже лучше раньше не выводить
	ПроверитьОбработкаСобытий();
	ПодключитьОбработчикОжидания("глОбработкаОчередиСобытий",3);
	
КонецПроцедуры

// Если РМ долго не запускали и накопилось много оповещений, то их можно не показывать
//
Процедура ПроверитьОбработкаСобытий()

	Если глВерсия = 1 ИЛИ (глПараметрыРМ.ОповещенияОтключить И НЕ глПараметрыРМ.СтопЛистПоказыватьОповещения) Тогда
		Возврат;
	КонецЕсли;	
	          	
	Отбор = Новый Структура("РабочееМесто", глРабочееМесто);
	ВыборкаСобытий = РегистрыСведений.ОбработкаСобытий.Выбрать(,ТекущаяДата(),Отбор);
	н = 0;
	Пока ВыборкаСобытий.Следующий() Цикл
		Если ВыборкаСобытий.ТипСобытия = Перечисления.ТипыСобытий.Сообщение И глПараметрыРМ.ОповещенияОтключить ИЛИ 
			 ВыборкаСобытий.ТипСобытия = Перечисления.ТипыСобытий.СтопЛист	И НЕ глПараметрыРМ.СтопЛистПоказыватьОповещения ИЛИ 
			 ВыборкаСобытий.ТипСобытия = Перечисления.ТипыСобытий.МониторМарок
		Тогда
			Продолжить;
		КонецЕсли;	
		н = н + 1;
	КонецЦикла;
	Если н = 0 Тогда
		Возврат
	КонецЕсли; 
	
	Текст1 = "Оповещения";
	Текст2 = "Количество сообщений за время простоя: " + н + Символы.ПС + "Показать?";
	Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","","Esc=Нет");
	
	ИнтерфейсРМ.ОбработкаОчередиСобытий(глРабочееМесто, Ответ="Нет");
	
КонецПроцедуры
 
Процедура ОтключитьОбработкуСобытий() Экспорт
	NativeDraw_ВнешняяКомпонента.Ввод_ДеактивироватьПерехватМыши();
	NativeDraw_ВнешняяКомпонента.Ввод_ДеактивироватьПерехватКлавиатуры();
	
	NativeDraw_ВнешняяКомпонента.Окно_ДеактивироватьПерехват();
	
	NativeDraw_ВнешняяКомпонента.Перехват_Убрать();
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Вызывается из обработчика ПередОткрытием форм этой обработки,
// выполняет инициализацию рабочего места
//
Процедура ДействияПередОткрытиемФормы(ТекущаяФорма, Отказ) Экспорт
	
	ГлавныйИнтерфейс.ПереключитьИнтерфейс("РабочееМесто");
	
	УстановкаОкна1С();
	
	ГлавнаяФорма = ТекущаяФорма;
	ГлавнаяФорма.Стиль = БиблиотекаСтилей[глПараметрыРМ.ИмяСтиля];
	
	ИнтерфейсРМ.ВыводНаДП("Ожидание");
	
КонецПроцедуры

// Вызывается из обработчика ПередЗакрытием форм этой обработки,
//
Процедура ДействияПередЗакрытиемФормы(ТекущаяФорма, Отказ) Экспорт
	
	КолвоОкон = глСтекОкон.Количество();
	Если КолвоОкон > 1 Тогда
		Для н=1 По КолвоОкон-1 Цикл
			//глСтекОкон[0].Закрыть();
			глСтекОкон[0].Форма.Закрыть();
		КонецЦикла;	
		Отказ = Истина;
		Возврат;		
	КонецЕсли; 
	
	// этот механизм с процессом выхода нужен чтобы корректно отработало
	// восстановление панелей инструментов при возврате в обычный интерфейс
	Если ПроцессВыходаЗапущен Тогда
		//Если НЕ РаботаСокнами.GetMainShowStatusV8() = 1 Тогда
			//Отказ = Истина;
			//ГлавнаяФорма.ПодключитьОбработчикОжидания("ПроцессВыхода",0.1,Истина);
		//Иначе
			Если глПараметрыРМ.ИнтерфейсРазмерОкна <> -1 Тогда
				// восстанавливаем окно
				//РаботаСокнами.Максимизировать( Окно1С );
			КонецЕсли; 
			
			ГлавнаяФорма	= Неопределено; // иначе объект обработки остается в памяти и работают обработчики ожидания
			глРабочееМесто	= Неопределено;
			глПараметрыРМ	= Неопределено;
			глПользователь	= Неопределено;
		//КонецЕсли;
		
		Возврат;
	КонецЕсли; 
	
	Если глФлагБлокировка Тогда
		Заблокировать();
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ Авторизация() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если РежимТестирования Тогда
		Текст2 = "Завершить тестирование?";
		Событие = Справочники.События.ВыходРежимТестрования;
	ИначеЕсли глПараметрыРМ.РежимВыхода=0 И НЕ ВыходОС Тогда
		Текст2 = "Выключить станцию?";
		Событие = Справочники.События.ВыключениеСтанции;
	Иначе  
		Событие = Справочники.События.ВыходОС;
		Если ИнтерфейсРМ.ПроверкаПраваДоступа("ВыходОС") Тогда
			Текст2 = "Завершить работу программы?";
		Иначе
			Текст1="Недостаточно прав!";
			Текст2="Отказано в праве доступа:
			       |""Выход в ОС""";         
			
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК"," ");
			ВыходОС = Ложь;
			Отказ = Истина;
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Текст1 = "Выход";
	Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","","Esc=Нет")="Нет" Тогда
		ВыходОС = Ложь;
		Отказ = Истина;
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли;
	
	Если ПланЗалаЗагружен Тогда
		SBLayoutEditor.УничтожитьОкноМодели();
		SBLayoutEditor = Неопределено;
		ПланЗалаЗагружен = Ложь;
	КонецЕсли;
	
	ИнтерфейсРМ.ВыводНаДП("ВывестиТекст", глПараметрыРМ.ДПТекстПриВыходе);
	
	// отключение оборудования
	МассивТО = ПолучитьМассивПодключаемогоТО();
	
	Если РежимТестирования Тогда
		
		ГлавныйИнтерфейс.ПереключитьИнтерфейс("ирРазработчик");
		
		Если глПараметрыРМ.ИнтерфейсРазмерОкна <> -1 Тогда
			РаботаСокнами.ShowCaption( Окно1С, 1 );	// убрать/вернуть заголовок окна flag = 0/1
			РаботаСокнами.ShowSysMenu( Окно1С, 1 );	// убрать/вернуть системное меню окна flag = 0/1
		КонецЕсли; 
		РаботаСокнами.OnTop( Окно1С, 0 );		// установить окно поверх всех окон flag = 0/1
		//РаботаСокнами.EnableWindows1C();		// разблокировать все открытые окна
		
		//hWnd = РаботаСокнами.FindMDIChildV8( ТекущаяФорма.Заголовок );
		//РаботаСокнами.MainShowV8( hWnd, 1 );	// вернуть все панели инструментов и главное меню
		РаботаСокнами.ВернутьПанельЗадач();
		РаботаСокнами.ВернутьМенюИпанели();
		ГлавнаяФорма.ПодключитьОбработчикОжидания("ПроцессВыхода",0.1,Истина);
		ПроцессВыходаЗапущен = Истина;
		Отказ = Истина;
		
		ИнтерфейсРМ.ЗаписьСобытия(Событие, глПользователь, глРабочееМесто);
		
		ОтключитьОбработчикОжидания("глАвтоблокировка");
		// отключение только после последнего события
		тоВыполнитьПодключениеОтключение("Отключить", Ложь, МассивТО);
		
	Иначе
		ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глОбработкаАвтоОбменДанными);		
		
		ИнтерфейсРМ.ЗаписьСобытия(Событие, глПользователь);
		
		// отключение только после последнего события
		тоВыполнитьПодключениеОтключение("Отключить", Ложь, МассивТО);
		
		Если глПараметрыРМ.РежимВыхода=0 И НЕ ВыходОС Тогда
			//ЗапуститьВыключениеКомпутера();
			РаботаСокнами.ShutDown();
		КонецЕсли;
		РаботаСокнами.Деструктор();
		
		ЗавершитьРаботуСистемы(Ложь);
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработка внешних событий
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
	
	глОтсечкаПростоя();
	
	_Знач = ОбработкаВнешнихСобытий.ПолучитьДанные(Источник,Событие,Данные);
	Если НЕ ЗначениеЗаполнено(_Знач) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(_Знач) = Тип("Строка") Тогда
		Если НЕ ЗначениеЗаполнено(глПользователь) Тогда
			// если система заблокирована, то возможна только авторизация сотрудника
			ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Иначе
			ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.Клиенты, СправочникСсылка.ПосадочныеМеста");
		КонецЕсли;
		
		ФлагПовтора = Ложь;
		// < КС_ВДВ ------------------------------------------------------------ 
		//_Объект = ИнтерфейсРМ.ИдентификацияПоКарте("Идентификатор_"+_Знач, ТипПривязки, ФлагПовтора);
		
		_КартаДоступаКлиента = Неопределено;
		_Объект = ИнтерфейсРМ.ИдентификацияПоКарте("Идентификатор_"+_Знач, ТипПривязки, ФлагПовтора, _КартаДоступаКлиента);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		Если НЕ ЗначениеЗаполнено(_Объект) Тогда
			Возврат;
			
		ИначеЕсли ТипЗнч(_Объект) = Тип("Структура") Тогда
			Если _Объект.Тип = Справочники.ТипыШаблоновШК.КартаДоступа Тогда
				Если ЗначениеЗаполнено(_КартаДоступаКлиента) Тогда
					ОбработкаВыбораКлиента(_КартаДоступаКлиента.Привязка, _КартаДоступаКлиента);
				Иначе
					Текст1="Карта доступа не найдена!";
					Текст2="Карта № "+_Объект.Значение+" отсутствует в справочнике!
					|Обратитесь к администратору...";
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
			ИнтерфейсРМ.СменаПользователя(_Объект);
			
			Если ПланЗалаЗагружен И ЗначениеЗаполнено(глПользователь.ОсновнойПланЗала) Тогда
				ПереключитьПланЗала(0, глПользователь.ОсновнойПланЗала);
			КонецЕсли;
			ПоказатьПланЗала();
			
		ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.ПосадочныеМеста") Тогда
			ОбработкаВыбораПосадочногоМеста(_Объект, Истина);
			
		ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.Клиенты") Тогда
			// < КС_ВДВ ------------------------------------------------------------ 
			//ОбработкаВыбораКлиента(_Объект);
			ОбработкаВыбораКлиента(_Объект, _КартаДоступаКлиента);
			// КС_ВДВ > ------------------------------------------------------------ 
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(_Знач) = Тип("ДокументСсылка.Заказ") Тогда
		ОткрытьЗаказ(_Знач);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Авторизация сотрудников в системе
// ФлагПоКнопке - признак того, что авторизация происходит по кнопке
//
Функция Авторизация(ФлагПоКнопке=Ложь) Экспорт
	
	Если ФлагПоКнопке ИЛИ НЕ ЗначениеЗаполнено(глПользователь) Тогда
		
		ИнтерфейсРМ.СменаПользователя();
		
		Если ПланЗалаЗагружен И ЗначениеЗаполнено(глПользователь.ОсновнойПланЗала) Тогда
			ПереключитьПланЗала(0, глПользователь.ОсновнойПланЗала);
		КонецЕсли;
		
		Если ФлагПоКнопке Тогда
			Если ЗначениеЗаполнено(глПользователь) Тогда
				ПоказатьПланЗала();
			Иначе
				УбратьПланЗала();
			КонецЕсли; 
		КонецЕсли; 
		
		//Если глВерсия > 1 И глПараметрыРМ.УчетРВАвтоПриходПоАвторизации
		//	И ЗначениеЗаполнено(глПользователь) И НЕ УчетРабочегоВремени.СотрудникНаРаботе(глПользователь) 
		//	И ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ОтметитьПриход) Тогда
		//	
		//	УчетРабочегоВремени.ОтметитьПриходУход(Истина, глПользователь);
		//КонецЕсли;
		
	КонецЕсли; 
	
	Возврат ЗначениеЗаполнено(глПользователь);
КонецФункции

// Заблокировать систему
//
Процедура Заблокировать() Экспорт
	
	Если ЗначениеЗаполнено(глПользователь) Тогда
		
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.АвторизацияБлокировка, глПользователь);
		глПользователь = Справочники.Сотрудники.ПустаяСсылка();
		
		УбратьПланЗала();
		
	КонецЕсли; 
	
	глФлагБлокировка = Ложь;
	
КонецПроцедуры

// Создает новый заказ по кнопке или путем считывания карты доступа
//
Процедура СоздатьНовыйЗаказ(ОбъектВвода=Неопределено, ФлагПоКарте=Ложь,ЗакрытьФормы=Ложь) Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
		
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
		
	ИначеЕсли НЕ ФлагПоКарте И глПараметрыРМ.ЗапретРучногоОткрытияЗаказов И 
		НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ИгнорЗапретВводаПаролей) Тогда
		Текст1="Нет доступа!";
		Текст2="Открытие заказов возможно только с помощью карт доступа!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		
		ДействияПриВозвратеВФорму();
		Возврат;
		
	КонецЕсли; 
	
	УбратьПланЗала();
	
	Если глПараметрыРМ.ЭтоCallЦентр Тогда
		ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("ЗаявкаНаДоставку");
		ФормаЗаказа = ОбработкаЗаказ.ПолучитьФорму("Форма");
		ФормаЗаказа.Открыть();
		
	Иначе
		ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("Заказ");
		ОбработкаЗаказ.Доставка = глДоставкаОсновнойРежим;
		
		Если НЕ глДоставкаОсновнойРежим Тогда
			Если НЕ ОбработкаЗаказ.СоздатьНовый(ОбъектВвода,,Истина) Тогда
				ДействияПриВозвратеВФорму();
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//Если НЕ глПараметрыРМ.ЗКП Тогда
			// Откроем заранее форму "Журнала заказов", чтобы возвратиться в неё после сохранения заказа.
			
			ЖурналЗаказов = ИнтерфейсРМ.ПолучитьОбъектОбработки("ЖурналЗаказов").ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип);
			ЖурналЗаказов.Открыть();
		//КонецЕсли; 
		// КС_ВДВ > ------------------------------------------------------------ 
		Если НЕ ЗакрытьФормы Тогда	
			ОбработкаЗаказ.ОткрытьРабочуюФормуЗаказа();
		КонецЕсли;	
		
	КонецЕсли; 
	
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

// Открытие списка  открытых заказов
//
Процедура ОткрытьСписокЗаказов() Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	УбратьПланЗала();
	
	ЖурналЗаказов = ИнтерфейсРМ.ПолучитьОбъектОбработки("ЖурналЗаказов").ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип);
	ЖурналЗаказов.Открыть();
	
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

// Открытие режима администратора
//
Процедура ОткрытьРежимАдминистратора() Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
	КонецЕсли;
	
	УбратьПланЗала();
	
	РежимАдминистратора = ИнтерфейсРМ.ПолучитьОбъектОбработки("РежимАдминистратора").ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип);
	РежимАдминистратора.Открыть();
	
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

// Открытие режима администратора
//
Процедура ОткрытьСтопЛист() Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли;
	
	УбратьПланЗала();
	
	СтопЛист = ИнтерфейсРМ.ПолучитьОбъектОбработки("СтопЛист").ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип);
	СтопЛист.Открыть();
	
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

// < КС_ВДВ -------------------------------------------------------------------- 
Процедура ВыдатьКартуЛояльности() Экспорт

	Если НЕ Авторизация() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ВводКлиента", Истина) Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	УбратьПланЗала();
	
	ОбработкаВвод = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводКлиента");
	ОбработкаВвод.ВводНового = Истина;
	ОбработкаВвод.ПолучитьФорму().Открыть();
	
	глОтсечкаПростоя();
	
	ВыполнитьДействияПриВозврате = Истина;

КонецПроцедуры // КС_ВДВ > -------------------------------------------------------------------- 

// < КС_ВДВ -------------------------------------------------------------------- 
Процедура ЗаменаКартыЛояльности() Экспорт

	Если НЕ Авторизация() Тогда
		Возврат;
	КонецЕсли;
	                
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ЗаменаКартыКеГеЛьБУМ", Истина) Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	УбратьПланЗала();
	
	ОбработкаВвод = ИнтерфейсРМ.ПолучитьОбъектОбработки("ЗаменаКартыКеГеЛьБУМ");
	ФормаОткрыта = ОбработкаВвод.ОткрытьФормуЗаменыКарты();
	
	Если НЕ ФормаОткрыта Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	глОтсечкаПростоя();
	
	ВыполнитьДействияПриВозврате = Истина;

КонецПроцедуры // КС_ВДВ > -------------------------------------------------------------------- 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ОткрытьМониторЗаказов() Экспорт 

	Если НЕ Авторизация() Тогда
		Возврат;
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;	
	КонецЕсли; 
	
	УбратьПланЗала();
	
	МониторМарок = ИнтерфейсРМ.ПолучитьОбъектОбработки("МониторМарок").ПолучитьФорму();
	Если МониторМарок.ПараметрыНастройки = Неопределено Тогда
		
		Если глПараметрыРМ.НастройкиМонитораМарокСписок.Количество() = 0 Тогда
		    Текст1 = "Монитор марок";
			Текст2 = "Не указана настройка монитора марок"+Символы.ПС+""""+глРабочееМесто.Наименование+"""";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли; 
		
		НастройкиОбъект = глПараметрыРМ.НастройкиМонитораМарокСписок[0].Значение.ПолучитьОбъект();
		Если НастройкиОбъект = Неопределено Тогда
			Текст1 = "Монитор марок";
			Текст2 = "Ошибка в настройках монитора марок"+Символы.ПС+""""+глРабочееМесто.Наименование+"""";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли;	
		
		МониторМарок.ПараметрыНастройки = НастройкиОбъект.ПолучитьСтруктуруПараметров();
	КонецЕсли;
	МониторМарок.Открыть();
	
	глОтсечкаПростоя();
	
	ВыполнитьДействияПриВозврате = Истина;

КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 
 
////////////////////////////////////////////////////////////////////////////////
// ПЛАН ЗАЛА

// Вызывается после открытия формы, иначе не правильно определяются размеры плана зала
//
Процедура ЗагрузитьПланЗала() Экспорт
	
	Если глВерсия=1 ИЛИ НЕ ЗначениеЗаполнено(глПараметрыРМ.ПланЗалаСписок) Тогда
		Возврат;
	КонецЕсли; 
	
	//--------------------------------------------------------------------
	глОжидание.Начало("План зала", "Загрузка внешней компоненты...");
	
	Попытка
		ЗагрузитьВнешнююКомпоненту("SBLayoutEditor.dll");
		SBLayoutEditor = Новый("AddIn.SBLayoutEditorExt");
		
	Исключение
		Текст1 = "План зала";
		Текст2 = "Ошибка загрузки компоненты ""SBLayoutEditor.dll""";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		глОжидание.Конец();
		Возврат;
		
	КонецПопытки;
	
	//--------------------------------------------------------------------
	глОжидание.Начало("План зала", "Загрузка моделей используемых планов зала...");
	
	ТаблицаПлановЗала = Новый ТаблицаЗначений;
	ТаблицаПлановЗала.Колонки.Добавить("Код");
	ТаблицаПлановЗала.Колонки.Добавить("Наименование");
	ТаблицаПлановЗала.Колонки.Добавить("СтруктураПараметров");
	
	Для каждого ЭлементСпискаПланов Из глПараметрыРМ.ПланЗалаСписок Цикл
		
		ПланЗала = ЭлементСпискаПланов.Значение;
		
		Попытка
			СтруктураПараметров = ПланЗала.ПолучитьОбъект().ПолучитьСтруктуруПараметров();
		Исключение
			СтруктураПараметров = Неопределено;
		КонецПопытки;
		
		//Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") Тогда
		Если ТипЗнч(СтруктураПараметров) <> Тип("Структура") ИЛИ СтруктураПараметров.Количество() = 0 Тогда
			Текст1 = "План зала";
			Текст2 = "Ошибка в параметрах плана зала"+Символы.ПС+""""+ПланЗала.Наименование+"""";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			глОжидание.Конец();
			Возврат;
		КонецЕсли; 
		
		// сразу преобразуем шаблоны для функции Вычислить()
		// и цвета из RGB в число
		СостоянияМест = Новый Массив;
		СостоянияМест.Добавить("Свободен");
		СостоянияМест.Добавить("Занят");
		СостоянияМест.Добавить("Дозаказ");
		СостоянияМест.Добавить("Пресчет");
		СостоянияМест.Добавить("Бронь");
		
		Для каждого Состояние Из СостоянияМест Цикл
			
			Если СтруктураПараметров.Свойство(Состояние+"ТекстНаКнопке") Тогда
				СтруктураПараметров[Состояние+"ТекстНаКнопке"]	= Шаблон2Выражение( СтруктураПараметров[Состояние+"ТекстНаКнопке"] );
				СтруктураПараметров[Состояние+"ТекстРядом"]		= Шаблон2Выражение( СтруктураПараметров[Состояние+"ТекстРядом"] );
				
				Цвет = СтруктураПараметров[Состояние+"ЦветФона"];
				СтруктураПараметров[Состояние+"ЦветФона"]		= Формат(ЦветRGB2Число(Цвет),"ЧН=0; ЧГ=");
				
				Цвет = СтруктураПараметров[Состояние+"ЦветТекста"];
				СтруктураПараметров[Состояние+"ЦветТекста"]		= Формат(ЦветRGB2Число(Цвет),"ЧН=0; ЧГ=");
				
			Иначе
				СтруктураПараметров.Вставить(Состояние+"ТекстНаКнопке",	"""не настроено""" );
				СтруктураПараметров.Вставить(Состояние+"ТекстРядом",	"""""" );
				СтруктураПараметров.Вставить(Состояние+"ЦветФона",		Формат(ЦветRGB2Число(0, 0, 0),"ЧН=0; ЧГ=") );
				СтруктураПараметров.Вставить(Состояние+"ЦветТекста",	Формат(ЦветRGB2Число(255, 255, 255),"ЧН=0; ЧГ=") );
				
			КонецЕсли; 
			
			Если СтруктураПараметров.ВидКнопок="7" Тогда
				СтруктураПараметров.Вставить(Состояние+"ИмяКартинки", СтруктураПараметров[Состояние+"Картинка"].Наименование );
			КонецЕсли; 
			
		КонецЦикла; 
		
		//--------------------------------------------------------------------
		МодельПланаЗала = СтруктураПараметров.Модель;
		СтруктураПараметров.Удалить("Модель");			// больше не нужна, а места много занимает
		
		СтрокаТаблицыПЗ = ТаблицаПлановЗала.Добавить();
		СтрокаТаблицыПЗ.Код					= ПланЗала.Код;
		СтрокаТаблицыПЗ.Наименование		= ПланЗала.Наименование;
		СтрокаТаблицыПЗ.СтруктураПараметров = СтруктураПараметров;
		
		Если ТаблицаПлановЗала.Количество()=1 Тогда
			// первая модель
			// план зала располагаем точно поверх нашей красивой картинки
			ПолеЗаставки = ГлавнаяФорма.ЭлементыФормы.ПолеКартинкиЗаставка;
			// собственно загрузка модели
			УспехЗагрузки = SBLayoutEditor.СоздатьМодельИзСтроки(ПолеЗаставки.Лево, 
																ПолеЗаставки.Верх, 
																ПолеЗаставки.Ширина, 
																ПолеЗаставки.Высота, 
																МодельПланаЗала) = 0;
		Иначе
			// следующие модели подгружаются к первой
			УспехЗагрузки = SBLayoutEditor.МодельДобавитьИзСтроки(МодельПланаЗала) > 0;
		КонецЕсли;
		
		Если НЕ УспехЗагрузки Тогда
			Текст1 = "План зала";
			Текст2 = "Ошибка загрузки модели плана зала"+Символы.ПС+""""+ПланЗала.Наименование+"""";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			глОжидание.Конец();
			Возврат;
		КонецЕсли;
		
		Если СтруктураПараметров.ВидКнопок="7" Тогда
			// картинки добавляются в текущую модель
			SBLayoutEditor.МодельУстановитьИндексТекущей( ТаблицаПлановЗала.Индекс(СтрокаТаблицыПЗ) );
			
			ДобавитьКартинкуВМодель(СтруктураПараметров.СвободенКартинка);
			ДобавитьКартинкуВМодель(СтруктураПараметров.ЗанятКартинка);
			ДобавитьКартинкуВМодель(СтруктураПараметров.ПресчетКартинка);
			ДобавитьКартинкуВМодель(СтруктураПараметров.БроньКартинка);
		КонецЕсли; 
		
	КонецЦикла;
	
	глОжидание.Конец();
	
	ИндексТекущегоПлана = 0;
	SBLayoutEditor.МодельУстановитьИндексТекущей( ИндексТекущегоПлана );
	ПланЗалаЗагружен = Истина;
	
	//--------------------------------------------------------------------
	// если установлен пользователь по умолчанию, то надо сразу показать план зала
	Если ЗначениеЗаполнено(глПользователь) Тогда
		Если ЗначениеЗаполнено(глПользователь.ОсновнойПланЗала) Тогда
			ПереключитьПланЗала(0, глПользователь.ОсновнойПланЗала);
		КонецЕсли;
		ПоказатьПланЗала();
	КонецЕсли; 
	
	// подключение периодического обновления
	Если глПараметрыРМ.ПланЗалаПериодОбновления<>0 Тогда
		ГлавнаяФорма.ПодключитьОбработчикОжидания("ОбновитьПланЗала", глПараметрыРМ.ПланЗалаПериодОбновления);
	КонецЕсли; 
	
КонецПроцедуры

// Переход к следующему плану по кнопкам Вперед, Назад
// Или к конкретному плану при авторизации сотрудника с выбранным планом зала
Процедура ПереключитьПланЗала(Сдвиг=0, ОсновнойПланЗала=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ОсновнойПланЗала) Тогда
		
		СтрокаТаблицыПЗ = ТаблицаПлановЗала.Найти(ОсновнойПланЗала.Код, "Код");
		Если СтрокаТаблицыПЗ = Неопределено Тогда
			// если у сотрудника установлен не используемый на данном РМ план зала, то извините...
			Возврат;
		КонецЕсли; 
		
		ИндексТекущегоПлана = ТаблицаПлановЗала.Индекс(СтрокаТаблицыПЗ);
		
	Иначе
		
		КолвоПланов = ТаблицаПлановЗала.Количество();
		ИндексТекущегоПлана = ИндексТекущегоПлана + Сдвиг;
		
		Если ИндексТекущегоПлана > КолвоПланов-1 Тогда
			ИндексТекущегоПлана = 0;
		ИначеЕсли ИндексТекущегоПлана = -1 Тогда
			ИндексТекущегоПлана = КолвоПланов-1;
		КонецЕсли;
		
	КонецЕсли;
	
	SBLayoutEditor.МодельУстановитьИндексТекущей( ИндексТекущегоПлана );
	
КонецПроцедуры

// Обновление информации по посадочным местам
//
Процедура ОбновитьПланЗала() Экспорт
	
	РежимБронирования = ЗначениеЗаполнено(БроньВремя1);
	
	Если НЕ( ПланЗалаЗагружен И ЗначениеЗаполнено(глПользователь) И глСтекОкон.Количество()=1 ) 
		И НЕ РежимБронирования Тогда
		Возврат;
	КонецЕсли;
	
	ПланЗала = ТаблицаПлановЗала[ИндексТекущегоПлана].СтруктураПараметров;
	
	// получим сводные данные по открытым заказам, с итогами по посадочным местам
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗаказДопИнф.Заказ.ПосадочноеМесто КАК Место,
	|	ЗаказДопИнф.Заказ КАК Заказ,
	|	ЗаказДопИнф.Заказ.ИтоговаяСумма КАК СуммаЗаказов,
	|	ЗаказДопИнф.Заказ.ЕстьДозаказ КАК ЕстьДозаказ,
	|	ЗаказДопИнф.Заказ.ЕстьПресчет КАК ЕстьПресчет
	|ИЗ
	|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|ГДЕ
	|	ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
	|	И (НЕ ЗаказДопИнф.Заказ.ПометкаУдаления)
	|	И ЗаказДопИнф.Заказ.МестоРеализации = &МестоРеализации
	|ИТОГИ
	|	КОЛИЧЕСТВО(Заказ),
	|	СУММА(СуммаЗаказов),
	|	МАКСИМУМ(ЕстьДозаказ),
	|	МАКСИМУМ(ЕстьПресчет)
	|ПО
	|	Место");
	
	Запрос.УстановитьПараметр("МестоРеализации", глПараметрыРМ.МестоРеализации);
	
	ДеревоОткрытыхЗаказов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// для ускорения работы
	SBLayoutEditor.МодельЗапретитьОбновление();
	
	КолвоОбъектовМодели = SBLayoutEditor.МодельПолучитьКоличествоОбъектов();
	
	Для ИндексОбъекта=0 По КолвоОбъектовМодели-1 Цикл
		ИДОбъекта		= "";
		ИДОбъекта1		= "";
		ТипОбъекта		= "";
		ДанныеОбъекта	= "";
		
		SBLayoutEditor.МодельПолучитьОбъект(ИндексОбъекта, ИДОбъекта); 
		SBLayoutEditor.МодельПолучитьТипОбъекта(ИДОбъекта, ТипОбъекта);
		Если ТипОбъекта<>"ПосадочноеМесто" Тогда
			Продолжить;
		КонецЕсли;
		
		SBLayoutEditor.МодельПолучитьДанныеОбъекта(ИДОбъекта, ДанныеОбъекта);	
		
		Место = НайтиМестоПоКоду( Число(ДанныеОбъекта) );
		
		Если Место.Пустая() Тогда
			ТекстНаКнопке	= "???";
			ТекстРядом		= "";
			ЦветТекста		= ПланЗала.СвободенЦветТекста;
			ЦветФона		= ПланЗала.СвободенЦветФона;
			//Шрифт			= ПланЗала.СвободенШрифт;
			ИмяКартинки		= "";
			
		Иначе
			// определим состояние места
			Если РежимБронирования И БроньВремя1>ТекущаяДата() Тогда
				СтрокаОткрытыхЗаказов = Неопределено
			Иначе
				СтрокаОткрытыхЗаказов = ДеревоОткрытыхЗаказов.Строки.Найти(Место,"Место");
			КонецЕсли; 
			
			Если СтрокаОткрытыхЗаказов = Неопределено Тогда
				СостояниеМеста = "Свободен";
				
								
			Иначе
				СостояниеМеста = ?(СтрокаОткрытыхЗаказов.ЕстьДозаказ, "Дозаказ", ?(СтрокаОткрытыхЗаказов.ЕстьПресчет, "Пресчет", "Занят"));
				КолвоЗаказов = СтрокаОткрытыхЗаказов.Заказ;
				СуммаЗаказов = ФорматСумм(СтрокаОткрытыхЗаказов.СуммаЗаказов);
				Заказ		 = СтрокаОткрытыхЗаказов.Строки[0].Заказ;
				
			КонецЕсли; 
			
			ТекстНаКнопке	= Вычислить( ПланЗала[СостояниеМеста+"ТекстНаКнопке"] );
			ТекстРядом		= Вычислить( ПланЗала[СостояниеМеста+"ТекстРядом"] );
			ЦветТекста		= ПланЗала[СостояниеМеста+"ЦветТекста"];
			ЦветФона		= ПланЗала[СостояниеМеста+"ЦветФона"];
			//Шрифт			= ПланЗала[СостояниеМеста+"Шрифт"];
			
			Если ПланЗала.ВидКнопок="7" Тогда
				ИмяКартинки = ПланЗала[СостояниеМеста+"ИмяКартинки"];
			КонецЕсли;
			
		КонецЕсли; 
		
		SBLayoutEditor.МодельУстановитьЦветФонаОбъекта (ИДОбъекта, ЦветФона );    
		SBLayoutEditor.МодельУстановитьТекстОбъекта(ИДОбъекта,ТекстНаКнопке);
		SBLayoutEditor.МодельУстановитьФонтОбъекта(ИДОбъекта, "", ЦветТекста, -1, -1, -1, -1 );
		
		Если ПланЗала.ВидКнопок="7" Тогда
			SBLayoutEditor.МодельУстановитьИзображение(ИДОбъекта, ИмяКартинки );    
		КонецЕсли;
			
		SBLayoutEditor.МодельПолучитьСвязныйОбъект(ИДОбъекта, ИДОбъекта1);
		Если ЗначениеЗаполнено(ИДОбъекта1) Тогда
			SBLayoutEditor.МодельУстановитьТекстОбъекта(ИДОбъекта1,ТекстРядом);
		КонецЕсли;
		
	КонецЦикла;
	
	SBLayoutEditor.МодельРазрешитьОбновление();
	
КонецПроцедуры

// Описание процедуры
//
Процедура ПоказатьПланЗала() Экспорт
	
	Если НЕ( ПланЗалаЗагружен И ЗначениеЗаполнено(глПользователь) И глСтекОкон.Количество()=1 ) Тогда
		Возврат;
	КонецЕсли;
	
	SBLayoutEditor.МодельУстановитьВидимость(1);
	
	Если ТаблицаПлановЗала.Количество() > 1 Тогда
		ГлавнаяФорма.ЭлементыФормы.ПанельПланЗала.Видимость = Истина;
		ГлавнаяФорма.ЭлементыФормы.тПланЗала.Заголовок = ТаблицаПлановЗала[ИндексТекущегоПлана].Наименование;
	КонецЕсли;
	
	ОбновитьПланЗала();
	
КонецПроцедуры

// Описание процедуры
//
Процедура УбратьПланЗала()
	
	Если ПланЗалаЗагружен Тогда
		SBLayoutEditor.МодельУстановитьВидимость(0);
		ГлавнаяФорма.ЭлементыФормы.ПанельПланЗала.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКартинкуВМодель(КартинкаСсылка)
	
	Если НЕ ЗначениеЗаполнено(КартинкаСсылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Картинка = КартинкаСсылка.Хранилище.Получить();
	ИмяФайла = ПолучитьИмяВременногоФайла();
	ИмяКартинки = КартинкаСсылка.Наименование;
	
	Попытка
		Картинка.Записать(ИмяФайла);
		SBLayoutEditor.МодельДобавитьИзображение(ИмяФайла, ИмяКартинки);
	Исключение
	КонецПопытки;
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

// Блокировка или вывод плана зала при возврате из других форм
//
Процедура ДействияПриВозвратеВФорму() Экспорт
	
	Если глФлагБлокировка ИЛИ глПараметрыРМ.БлокировкаПриВозврате И НЕ ЗначениеЗаполнено(БроньВремя1) Тогда
		Заблокировать();
	Иначе
		ПоказатьПланЗала();
	КонецЕсли;
	
	ВыполнитьДействияПриВозврате = Ложь;
	
КонецПроцедуры

// Формирование массива подключаемого на РМ торгового оборудования 
//
Функция ПолучитьМассивПодключаемогоТО()
	
	МассивТО = Новый Массив;
	
	Если глПараметрыРМ.ДПЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.ДП);
	КонецЕсли;
	
	Если глПараметрыРМ.ИнфоДисплейЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.ИнфоДисплей);
	КонецЕсли;
	
	Если глПараметрыРМ.ВесыЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.Весы);
	КонецЕсли;
	
	ЕстьСчитыватель = Ложь;
	Для каждого ТО Из глПараметрыРМ.СписокСУ Цикл
		МассивТО.Добавить(ТО.Значение);
		Если Найти("РидерМК,Проксимити,ПроксимитиPERCo", ТО.Значение.КодМодели) Тогда
			ЕстьСчитыватель = Истина;
		КонецЕсли; 
	КонецЦикла;
	глПараметрыРМ.Вставить("ЕстьСчитыватель", ЕстьСчитыватель);
	
	Если глПараметрыРМ.СпецКВЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.СпецКВ);
	КонецЕсли;
	
	Если глВерсия=3 Тогда
		Для каждого ТО Из глПараметрыРМ.СписокКЭП Цикл
			МассивТО.Добавить(ТО.Значение);
		КонецЦикла;
		
		Если глПараметрыРМ.РегистрацияСобытийВидеоЕсть Тогда
			МассивТО.Добавить(глПараметрыРМ.РегистрацияСобытийВидеонаблюдение);
		КонецЕсли; 
	КонецЕсли; 
	
	// ККМ и Принтеры не занимают порты постоянно, поэтому для корректной проверки подключаем их после сканеров
	// и прочих дисплеев, которые захватывают порт на все время работы
	Если глПараметрыРМ.ККМЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.ККМ);
	КонецЕсли;
	
	Если глПараметрыРМ.ККМЕстьДоп Тогда
		Для каждого ТО Из глПараметрыРМ.ККМСписокДоп Цикл
			МассивТО.Добавить(ТО.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаГП Из глПараметрыРМ.ГруппыПечати.Строки Цикл
		Если НЕ СтрокаГП.ПроверкаСвязи Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаГП.Принтер) Тогда
			Принтер = СтрокаГП.Принтер;
		Иначе
			Попытка
				Принтер = СтрокаГП.Группа.Оборудование[0].Принтер;
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли; 
		
		МассивТО.Добавить(Принтер);
	КонецЦикла;
	
	Если глПараметрыРМ.ПечатьСчета Тогда
		МассивТО.Добавить(глПараметрыРМ.ПечатьСчетаПринтер);
	КонецЕсли; 
	
	Возврат МассивТО;
КонецФункции

// Установка размера главного окна 1С и признака "Поверх всех"
//
Процедура УстановкаОкна1С() Экспорт
	
	//Окно1С = РаботаСокнами.InitWndCtrl( "V8TopLevelFrame", ?(ТекущийЯзыкСистемы()="en","1C:Enterprise", "1С:Предприятие") + " - " + ПолучитьЗаголовокСистемы() );
	
	Если РежимТестирования Тогда
		//РаботаСокнами.DisableWindows1C();	// заблокировать все открытые окна
	КонецЕсли; 
	Если глПараметрыРМ.БлокировкаПереднийПлан Тогда
		РаботаСокнами.OnTop( Окно1С, 1 );		// установтить окно поверх всех окон flag = 0/1
	КонецЕсли; 
	
	Если глПараметрыРМ.ИнтерфейсРазмерОкна = -1 Тогда
		// обычное окно
		глПараметрыРМ.Вставить("ИмяСтиля", "РабочееМесто_CallЦентр");
		
		// Заполнить параметры для экранной клавиатуры
		глПараметрыРМ.Вставить("ШиринаОкна1С", 1024 );
		глПараметрыРМ.Вставить("ВысотаОкна1С", 768 );
		
		Возврат;
	КонецЕсли; 
		
	глПараметрыРМ.Вставить("Окно1С", Окно1С );
	
	РаботаСокнами.ShowSysMenu( Окно1С, 0 );	// убрать/вернуть системное меню окна flag = 0/1
	//РаботаСокнами.ShowCaption( Окно1С, 0 );	// убрать/вернуть заголовок окна flag = 0/1
	
	Если глПараметрыРМ.ИнтерфейсРазмерОкна = 0 Тогда
		// во весь экран
		Ширина = 0;
		Высота = 0;
//		РаботаСокнами.FullScreen( Окно1С );
		РаботаСокнами.GetWndSize( Окно1С, Ширина, Высота );	// получить ширину и высоту окна
		
		// здесь реальные размеры окна
		глПараметрыРМ.Вставить("ШиринаОкна1С", Ширина );
		глПараметрыРМ.Вставить("ВысотаОкна1С", Высота );
		
		Если Ширина=0 ИЛИ Ширина>=1024 Тогда	// будет использоваться стиль для 1024х768
			Ширина = 1024;
			Высота = 768;
		ИначеЕсли Ширина>=800 Тогда	// будет использоваться стиль для 800х600
			Ширина = 800;
			Высота = 600;
		КонецЕсли;
		
	Иначе
		// конкретный размер
		РаботаСокнами.SetWndPos( Окно1С, 0, 0 );	// установить координаты левого-верхнего угла окна
		
		Если глПараметрыРМ.ИнтерфейсТип = 0 Тогда
			Если глПараметрыРМ.ИнтерфейсРазмерОкна = 1 Тогда
				Ширина = 640;
				Высота = 480;
			ИначеЕсли глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
				Ширина = 800;
				Высота = 600;
			ИначеЕсли глПараметрыРМ.ИнтерфейсРазмерОкна = 3 Тогда
				Ширина = 1024;
				Высота = 768;
			Иначе
				Ширина = 1024;
				Высота = 768;
			КонецЕсли;
			
		ИначеЕсли глПараметрыРМ.ИнтерфейсТип = 1 Тогда
			Если глПараметрыРМ.ИнтерфейсРазмерОкна = 1 Тогда
				Ширина = 240;
				Высота = 260;	// на 60 меньше чтобы не перекрывать панели
			ИначеЕсли глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
				Ширина = 480;
				Высота = 580;
			Иначе
				Ширина = 480;
				Высота = 580;
			КонецЕсли;
			
		КонецЕсли;
		
		РаботаСокнами.SetWndSize( Окно1С, Ширина, Высота );	// установить ширину и высоту окна
		
		// здесь реальные размеры окна
		глПараметрыРМ.Вставить("ШиринаОкна1С", Ширина );
		глПараметрыРМ.Вставить("ВысотаОкна1С", Высота );
		
	КонецЕсли; 
	
	глПараметрыРМ.Вставить("ИмяСтиля", "РабочееМесто_" + ?(глПараметрыРМ.ИнтерфейсТип=1,"КПК", Формат(Ширина,"ЧГ=") +"х"+ Формат(Высота,"ЧГ=") ));
	
КонецПроцедуры

// Подключается как обработчик ожидания при выходе из режима тестирования
// Иначе не отрабатывает восстановление панелей инструментов
Процедура ПроцессВыхода() Экспорт
	Если РежимТестирования Тогда
		РаботаСокнами.Деструктор();
		РаботаСокнами = Неопределено;
	КонецЕсли;
	ГлавнаяФорма.Закрыть();
	
КонецПроцедуры

// Выключение компьютера с помощью WMI
//
Процедура ЗапуститьВыключениеКомпутера()
	
	Попытка
		ServicesSet = ПолучитьCOMОбъект("winmgmts:{impersonationLevel=impersonate,(Shutdown)}!\\" + ИмяКомпьютера() + "\root\cimv2");
		Items = ServicesSet.ExecQuery("Select * from Win32_OperatingSystem");
		Для каждого Item Из Items Цикл
			Item.Shutdown();
		КонецЦикла; 
	Исключение
		Предупреждение("Ошибка выключения станции:"+Символы.ПС+ОписаниеОшибки(),30);
	КонецПопытки;
	
КонецПроцедуры

// Выбор посадочного места на плане зала или считыванием карты доступа
//
Процедура ОбработкаВыбораПосадочногоМеста(ВыбМесто, ФлагПоКарте=Ложь)
	
	Если НЕ ФлагПоКарте И глПараметрыРМ.ЗапретРучногоОткрытияЗаказов И 
		НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ИгнорЗапретВводаПаролей) Тогда
		Текст1="Нет доступа!";
		Текст2="Открытие заказов возможно только с помощью карт доступа!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(ВыбМесто.МестоРеализации) И ВыбМесто.МестоРеализации<>глПараметрыРМ.МестоРеализации Тогда
		Текст1 = "Нет доступа!";
		Текст2 = НаимПосадочногоМеста(ВыбМесто)+" относится к другому месту реализации!
				|Обратитесь к администратору...";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
		
	КонецЕсли;
	
	МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( ВыбМесто );
	
	Если МассивЗаказов.Количество()=0 Тогда
		СоздатьНовыйЗаказ(ВыбМесто, ФлагПоКарте);
	Иначе
		ОткрытьЗаказ( МассивЗаказов[0] );
	КонецЕсли;
	
КонецПроцедуры

// Выбор клиента считыванием карты доступа
//
Процедура ОбработкаВыбораКлиента(ВыбКлиент, ВыбКартаДоступа)
// < КС_ВДВ ------------------------------------------------------------ 
//Процедура ОбработкаВыбораКлиента(ВыбКлиент)
	// КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	//МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( Неопределено, ВыбКлиент );
	МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( Неопределено, ВыбКлиент, ВыбКартаДоступа );
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Если МассивЗаказов.Количество()=0 Тогда
		//Z+
		Текст1="Заказ не найден!";
		Текст2="По карте клиента заказ не найден!
		|
		|Создать заказ?";
		Ответ=ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"Да","","Esc=Нет");	
		Если Ответ="Да" Тогда
			СоздатьНовыйЗаказ(ВыбКлиент,Истина,Истина);
		КонецЕсли;
		//Z-
		
	ИначеЕсли МассивЗаказов.Количество()=1 Тогда
		ОткрытьЗаказ( МассивЗаказов[0] );
		
	Иначе
		ВыбЗаказ = ИнтерфейсРМ.ВыборИзСписка( МассивЗаказов );
		Если ВыбЗаказ <> Неопределено Тогда
			ОткрытьЗаказ( ВыбЗаказ );
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы выбранного заказа
//
Процедура ОткрытьЗаказ(ДокСсылка)
	
	Если НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	УбратьПланЗала();
	
	ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("Заказ");
	ОбработкаЗаказ.Заказ = ДокСсылка.ПолучитьОбъект();
	
	Если НЕ ОбработкаЗаказ.ПрочитатьЗаказ() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	ОбработкаЗаказ.ОткрытьРабочуюФормуЗаказа();
	
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры


Функция ПанелиСкрыты() Экспорт
	
	Если Не AHK_СкрытьМенюИПанели.ahkready() Тогда
		Возврат Ложь ;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции

Функция ВыполнитьКонтрольПоТекущемуДокументу() Экспорт
	Возврат Истина;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

ПроцессВыходаЗапущен		= Ложь;
ВыходОС						= Ложь;
ВыполнитьДействияПриВозврате= Ложь;
ПланЗалаЗагружен			= Ложь;

#КонецЕсли
