Перем Драйвер,сч;

Перем Холст;
Перем Холст_Высота;
Перем Холст_Ширина;
Перем ИзображениеФон, ИзображениеОранжевыйПрямоугольник, ИзображениеЗеленыйПрямоугольник, ИзображениеЗеленыйОбведенныйПрямоугольник;
Перем ВыбранноеМесто;

Перем ТаймерОтрисовки;
Перем ТребуетсяПерерисовка_Флаг;

Перем ЗаголовокОкнаОбработки;
Перем ОкноОбработки;
Перем СписокДочернихОкон;

Перем Цвет_АльфаКрасный, Цвет_Занято;
Перем Перо_НовыйГость, Цвет_НовыйГость;
Перем Цвет_АльфаСиний,Перо_АльфаСиний,Перо_Занято;
Перем Цвет_АльфаВыделения,Цвет_Выделения;
Перем КистьЧерная, КистьБелая, Шрифт20;
Перем Выделение_X;
Перем Выделение_Y;
Перем Выделение_Флаг;
Перем ФайлФон;


Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока Истина Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Процедура НарисоватьФон()
	
	//Если глПараметрыРМ.ЗКП Тогда
	//	ЭлементыФормы.РисунокПланЗала.Видимость = Ложь;
	//	Возврат;
	//КонецЕсли;
	
	Если глСтекОкон.Количество()>1 Тогда
		Возврат;
	КонецЕсли;
		
	Холст_Ширина = 744;
	Холст_Высота = 560;
	
	Если НЕ ЭлементыФормы.РисунокПланЗала.Ширина = Холст_Ширина Тогда
		
		
		
		ЭлементыФормы.РисунокПланЗала.Ширина = Холст_Ширина;
		ЭлементыФормы.РисунокПланЗала.Высота = Холст_Высота;
		ЭлементыФормы.РисунокПланЗала.Width = Холст_Ширина;
		ЭлементыФормы.РисунокПланЗала.Height = Холст_Высота;
	КонецЕсли; 

	NativeDraw_ВнешняяКомпонента.ОчиститьПамять();
	
	Холст = NativeDraw_ВнешняяКомпонента.НоваяКартинка(Холст_Ширина, Холст_Высота);
	NativeDraw_ВнешняяКомпонента.ЗагрузитьКартинку(ФайлФон);
	
	Выб = справочники.ПосадочныеМеста.Выбрать();
	Пока Выб.Следующий() Цикл
	
		Если выб.ЭтоГруппа Тогда
		
			 Продолжить;
		
		 КонецЕсли; 
		 
		 Если Не выб.Лево Тогда
		 
		 	Продолжить;
		 
		КонецЕсли; 
		Если выб.ПометкаУдаления Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		эл = выб.ПолучитьОбъект();
			
		Если выб.ЗанятоМест Тогда
			
			Прямоугольник = NativeDraw_ВнешняяКомпонента.СоздатьПрямоугольник(эл.Лево,эл.Верх, эл.Ширина, эл.Высота);
			
			Если выб.НовыйГость Тогда
				Перо = Перо_НовыйГость;
			Иначе
				Перо = Перо_Занято;
			КонецЕсли;
			NativeDraw_ВнешняяКомпонента.РисоватьПрямоугольник(Перо, Прямоугольник);

			//NativeDraw_ВнешняяКомпонента.Рисование_ЗаполненныйПрямоугольник(Холст, эл.Лево, эл.Верх, эл.Ширина, эл.Высота, Цвет_Занято);
			
			//NativeDraw_ВнешняяКомпонента.Рисование_Текст(Холст, ""+выб.ЗанятоМест, эл.Лево, эл.Верх, эл.Ширина, эл.Высота,1,1,"Tahoma",14,0,"Белый");		
		    
		КонецЕсли; 

		//NativeDraw_ВнешняяКомпонента.Рисование_Прямоугольник(Холст, эл.Лево, эл.Верх, эл.Ширина, эл.Высота, 1,Цвет_Выделения);
	КонецЦикла;
	Для Столбец = 1 По 9 Цикл
		
		Для Строка = 1 По 3 Цикл
			НомерМеста = ""+((Строка-1)*9+Столбец);			
			Место = Справочники.ПосадочныеМеста.НайтиПоНаименованию(НомерМеста,истина);    
			Если Место.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			Если Место.ЗанятоМест Тогда
				Если Место.НовыйГость Тогда
					ИзображениеПрямоугольник = ИзображениеЗеленыйОбведенныйПрямоугольник;
				Иначе
					ИзображениеПрямоугольник = ИзображениеЗеленыйПрямоугольник;
				КонецЕсли;
				
			Иначе
				ИзображениеПрямоугольник = ИзображениеОранжевыйПрямоугольник;
			КонецЕсли; 
			Y1 = Строка * 72 + 280;
			X1 = Столбец * 82 + 5 - 82;
			
			//NativeDraw_ВнешняяКомпонента.РисоватьКартинкуБезМасштабирования(ИзображениеПрямоугольник, NativeDraw_ВнешняяКомпонента.СоздатьТочку(X1,Y1));	
			NativeDraw_ВнешняяКомпонента.РисоватьКартинку(ИзображениеПрямоугольник, X1,Y1);	
			//NativeDraw_ВнешняяКомпонента.Рисование_Текст(Холст, НомерМеста, X1, y1, 40, 31,1,1,"Tahoma",20,0,"Чёрный");					
			NativeDraw_ВнешняяКомпонента.РисоватьСтроку(""+НомерМеста,Шрифт20,КистьЧерная,X1+10, Y1);
	   		Если Место.ЗанятоМест Тогда
				NativeDraw_ВнешняяКомпонента.РисоватьСтроку(""+Место.ЗанятоМест,Шрифт20,КистьБелая,X1+38,Y1+28);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; 

	
	//ЭлементыФормы.РисунокПланЗала.Картинка
	//			= Новый Картинка(NativeDraw_ВнешняяКомпонента.Холст_ДвоичныеДанные(Холст));	

					
КонецПроцедуры

Функция NativeDraw_Инициализация()
	NativeDraw_ВнешняяКомпонента = ЭлементыФормы.РисунокПланЗала;
	Цвет_АльфаСиний	 = NativeDraw_ВнешняяКомпонента.ПолучитьЦвет(60, 16, 147);
	Перо_АльфаСиний = NativeDraw_ВнешняяКомпонента.СоздатьПеро(Цвет_АльфаСиний,10);
	
	Цвет_Занято	 = NativeDraw_ВнешняяКомпонента.ПолучитьЦвет(255,255,255);
	Цвет_НовыйГость = NativeDraw_ВнешняяКомпонента.ПолучитьЦвет(246, 97, 41);
	Перо_Занято = NativeDraw_ВнешняяКомпонента.СоздатьПеро(Цвет_Занято,3);
	Перо_НовыйГость = NativeDraw_ВнешняяКомпонента.СоздатьПеро(Цвет_НовыйГость,5);
	Цвет_Синий	 = NativeDraw_ВнешняяКомпонента.ПолучитьЦвет(200, 16, 147);
	Шрифт20 = NativeDraw_ВнешняяКомпонента.СоздатьШрифт("Tahoma",20,"");
	КистьЧерная = NativeDraw_ВнешняяКомпонента.СоздатьКисть(10,10,10);
	КистьБелая  = NativeDraw_ВнешняяКомпонента.СоздатьКисть(255,255,255);	
//	Цвет_Выделения	 = NativeDraw_ВнешняяКомпонента.Рисование_ПолучитьЦвет(100, 140, 140);
	Холст_Высота		 = 744;
	Холст_Ширина		 = 560;
	
	Холст			 = NativeDraw_ВнешняяКомпонента.НоваяКартинка(Холст_Ширина, Холст_Высота);
	
	
	
	ФайлФон = ПолучитьИмяВременногоФайла("bmp");
	БиблиотекаКартинок.СхемаРесторана.Записать(ФайлФон);
	ФайлОранжевыйПрямоугольник = ПолучитьИмяВременногоФайла("bmp");
	БиблиотекаКартинок.ОранжевыйКвадрат.Записать(ФайлОранжевыйПрямоугольник);
	ФайлЗеленыйПрямоугольник = ПолучитьИмяВременногоФайла("bmp");
	БиблиотекаКартинок.ЗеленыйКвадрат.Записать(ФайлЗеленыйПрямоугольник);

	ФайлЗеленыйОбведенныйПрямоугольник = ПолучитьИмяВременногоФайла("bmp");
	БиблиотекаКартинок.ЗеленыйОбведенныйКвадрат.Записать(ФайлЗеленыйОбведенныйПрямоугольник);

	
	ИзображениеФон	 						=  NativeDraw_ВнешняяКомпонента.СоздатьКартинку(ФайлФон);
	ИзображениеОранжевыйПрямоугольник	 	=  NativeDraw_ВнешняяКомпонента.СоздатьКартинку(ФайлОранжевыйПрямоугольник);
	ИзображениеЗеленыйПрямоугольник		 	=  NativeDraw_ВнешняяКомпонента.СоздатьКартинку(ФайлЗеленыйПрямоугольник);
	ИзображениеЗеленыйОбведенныйПрямоугольник	=  NativeDraw_ВнешняяКомпонента.СоздатьКартинку(ФайлЗеленыйОбведенныйПрямоугольник);
КонецФункции // NativeDraw_Инициализация()

Функция NativeDraw_Деинициализация()
	 


КонецФункции // NativeDraw_Деинициализация()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЖИДАНИЯ

// чтобы часики тикали
//
Процедура ОбновитьДатуВремя()
	
	ТекДата = ТекущаяДата();
	ЭлементыФормы.тДата.Заголовок	= Формат(ТекДата,"ДФ='dd.MM.yyyy (ddd)'");
	ЭлементыФормы.тВремя.Заголовок	= Формат(ТекДата,"ДЛФ=В");
	
КонецПроцедуры

// Раз в минуту обновляем колво сотрудников
//
Процедура ОбновитьДанныеСмены()
	
	Смена = ИнтерфейсРМ.ТекущаяСмена();
	Если ЗначениеЗаполнено(Смена) Тогда
		ЭлементыФормы.НадписьСмена.Заголовок = "Смена ТТ №"+Смена.Номер+" от " + Формат(Смена.Дата,"ДФ='dd.MM.yyyy (ddd) HH:mm'") ;
	Иначе
		ЭлементыФормы.НадписьСмена.Заголовок = "СМЕНА ТТ - НЕ ОТКРЫТА"	;		
	КонецЕсли;
	
	//Колво = ИнтерфейсРМ.СоставСмены().Количество();
	//ЭлементыФормы.тКолвоСотрудников.Заголовок = Формат(Колво,"ЧН=") + " чел.";
	
	КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
	ЭлементыФормы.НадписьККМ.Заголовок = "ККМ:";
	Если глПараметрыРМ.ККМЕсть тогда
		оККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
		пТекст = оККМ.Наименование;
		Если Найти(пТекст,оККМ.КодСУП) = 0 тогда
			пТекст = пТекст + " ("+оККМ.КодСУП+")";
		КонецЕсли;
		ЭлементыФормы.тККМ		.Гиперссылка = Ложь;
		Если ЗначениеЗаполнено(КассоваяСмена) тогда
			оКассоваяСмена = КассоваяСмена.ПолучитьОбъект();
			пТекст = пТекст + " смена №"+оКассоваяСмена.НомерСмены+" от "+Формат(оКассоваяСмена.Дата,"ДФ='dd.MM.yyyy (ddd) HH:mm'");
			ЭлементыФормы.тККМ		.Заголовок = пТекст;
		иначе
			ЭлементыФормы.тККМ		.Заголовок = пТекст + " СМЕНА НЕ ОТКРЫТА";
		КонецЕсли;
	иначе
		КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
		ЭлементыФормы.тККМ		.Заголовок = "не установлена";
		ЭлементыФормы.тККМ		.Гиперссылка = Ложь;
	КонецЕсли;

КонецПроцедуры

// Обновляется по событию
//
Процедура ОбновитьККМСтопЛист()
	
	//Если глВерсия=1 ИЛИ глПараметрыРМ.ЭтоCallЦентр Тогда
	//	СтопЛистКолвоПозиций = 0;
	//Иначе
	//	ОбработкаСтопЛист = ИнтерфейсРМ.ПолучитьОбъектОбработки("СтопЛист");
	//	СтопЛистКолвоПозиций = ОбработкаСтопЛист.ПолучитьПозицииСтопЛиста().Количество();
	//КонецЕсли; 
	//
	//Если СтопЛистКолвоПозиций = 0 Тогда
	//	
	//Иначе
	//	ЭлементыФормы.НадписьККМ.Заголовок = "СТОП-лист:";
	//	ЭлементыФормы.тККМ		.Заголовок = Строка(СтопЛистКолвоПозиций) +" "+ СклонениеПозиций(СтопЛистКолвоПозиций);
	//	ЭлементыФормы.тККМ		.Гиперссылка = Истина;
	//КонецЕсли; 
	
КонецПроцедуры

Функция СклонениеПозиций(Колво)

	р1 = Колво%10;			// цифра 1-го разряда
	р2 = Цел(Колво/10)%10;	// цифра 2-го разряда
	
	Возврат "позици" + ?(р1=0 ИЛИ р2=1, "й", ?(р1=1, "я", ?(р1<=4, "и", "й" )));

КонецФункции
 
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ДействияПередОткрытиемФормы(ЭтаФорма, Отказ);
	NativeDraw_Инициализация();
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ДействияПередЗакрытиемФормы(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// неизменяемые надписи
	
	ЭлементыФормы.тККМ				.Заголовок = ?(глПараметрыРМ.ККМЕсть, глПараметрыРМ.ККМ.Наименование, "не установлена");
	
	Если глПараметрыРМ.ЭтоCallЦентр Тогда
		ЭлементыФормы.КнопкаНовыйЗаказ.Заголовок = "Ввод заявок";
		ЭлементыФормы.КнопкаСписокЗаказов.Видимость = Ложь;
		ЭлементыФормы.КнопкаРежимАдминистратора.Видимость = Ложь;
		
	ИначеЕсли глВерсия=3 И глПараметрыРМ.ДоставкаЕсть И глПараметрыРМ.ДоставкаРежимИспользования=0 Тогда
		ЭлементыФормы.КнопкаНовыйЗаказ.Заголовок = "Доставка";
		
	КонецЕсли; 
	
	// периодически обновляемые надписи
	ОбновитьДатуВремя();
	ПодключитьОбработчикОжидания("ОбновитьДатуВремя", 1);
	
	ОбновитьДанныеСмены();
	ПодключитьОбработчикОжидания("ОбновитьДанныеСмены", 60);
	
	ОбновитьККМСтопЛист();
	
	
	
	ПодключитьОбработчикОжидания("НарисоватьФон",10);
	ПодключитьОбработчикОжидания("НарисоватьФон2",1,Истина);
	// вызов должен быть в конце обработчика
	ИнтерфейсРМ.ПриОткрытииОкна(ЭтаФорма);
	
	
КонецПроцедуры
Процедура НарисоватьФон2()
	НарисоватьФон();
КонецПроцедуры 
Процедура ПриЗакрытии()
		
		
	
	ИнтерфейсРМ.ПриЗакрытииОкна();
	NativeDraw_Деинициализация();

	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если ЗначениеЗаполнено(глПользователь) Тогда
		ЭлементыФормы.тПользователь.Заголовок = глПользователь.Наименование;
	Иначе
		ЭлементыФормы.тПользователь.Заголовок = "Система заблокирована";
	КонецЕсли; 
	//Если ОкноОбработки="" Тогда
	//	
	//	ОкноОбработки		 = NativeDraw_ВнешняяКомпонента.Окно_ПолучитьПоЗаголовку(ЭтаФорма.Заголовок);
	//	
	//	Если ПустаяСтрока(ОкноОбработки) Тогда
	//		Закрыть();
	//		Возврат;
	//	КонецЕсли;
	//	
	//КонецЕсли;

	
КонецПроцедуры

Процедура ВнешнееСобытие(Источник, Событие, Данные)
		
	// из-за плана зала ВводДоступен() не всегда срабатывает
	Если глСтекОкон.Количество()=1 Тогда
		ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	КонецЕсли;

КонецПроцедуры

Функция ТочкаВПрямоугольнике(_x,_y,_x1,_x2,_y1,_y2)
	Попытка
		Рез= ?((_x-_x1>0)и(_x2-_x>0)И(_y-_y1>0)И(_y2-_y>0),1,0);		
	Исключение
		Рез= 0;
	КонецПопытки;
	Возврат рез;
КонецФункции 


Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="ИзменениеСмены" Тогда
		ОбновитьДанныеСмены();
		
	ИначеЕсли ИмяСобытия="ОбновитьСтопЛист" Тогда
		ОбновитьККМСтопЛист();
		
	ИначеЕсли ИмяСобытия="ИзменениеЗаказов" Тогда
		ОбновитьПланЗала();
	ИначеЕсли ИмяСобытия="ВводКоличестваГостей" Тогда
		Если Параметр <> Неопределено Тогда
			об = Параметр.ПараметрОповещения.ПолучитьОбъект();
			об.ЗанятоМест   = Параметр.ЗначениеВвода;
			Если Параметр.МассивПомеченных.Количество() Тогда
				об.НовыйГость = Истина;
			Иначе
				об.НовыйГость = Ложь;
			КонецЕсли;
			об.Записать(); 	
			ПодключитьОбработчикОжидания("НарисоватьФон2",0.1,1);
			
		КонецЕсли;		
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура КнопкаНовыйЗаказНажатие(Элемент)
	
	СоздатьНовыйЗаказ();
	
КонецПроцедуры

Процедура КнопкаСписокЗаказовНажатие(Элемент)
	
	ОткрытьСписокЗаказов();
	
КонецПроцедуры

Процедура КнопкаРежимАдминистратораНажатие(Элемент)
	
	ОткрытьРежимАдминистратора();
	
КонецПроцедуры

Процедура КнопкаАвторизацияНажатие(Элемент)
	
	Авторизация( Истина );
	
КонецПроцедуры

Процедура КнопкаЗаблокироватьНажатие(Элемент)
	
	Заблокировать();
	
КонецПроцедуры

Процедура тККМНажатие(Элемент)
	
	ОткрытьСтопЛист();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

// Заполняет переданную структуру для определения положения окна режима брони
//
Процедура ОпределитьПараметрыОкнаБронирования(ПараметрыОкна, МинШирина, МинВысота) Экспорт
	
	ВерхняяКнопка = ЭлементыФормы.КнопкаНовыйЗаказ;
	НижняяКнопка = ЭлементыФормы.КнопкаВыход;
	
	ПараметрыОкна.Лево	 = ВерхняяКнопка.Лево;
	ПараметрыОкна.Верх	 = ВерхняяКнопка.Верх;
	//ПараметрыОкна.Ширина = глПараметрыРМ.ШиринаОкна1С - ПараметрыОкна.Лево - 3;
	//ПараметрыОкна.Высота = глПараметрыРМ.ВысотаОкна1С - ПараметрыОкна.Верх - 3;
	// < КС_ВДВ ------------------------------------------------------------ 
	//ПараметрыОкна.Ширина = Макс(МинШирина, ВерхняяКнопка.Ширина);
	
	ПараметрыОкна.Ширина = Макс(МинШирина, НижняяКнопка.Ширина); // у верхней кнопки ширина в 2 раза уменьшилась.
	// КС_ВДВ > ------------------------------------------------------------ 
	ПараметрыОкна.Высота = Макс(МинВысота, НижняяКнопка.Верх + НижняяКнопка.Высота - ПараметрыОкна.Верх);
	
КонецПроцедуры


// < КС_ВДВ -------------------------------------------------------------------- 
Процедура КнопкаНоваяКартаНажатие(Элемент)
	
	ВыдатьКартуЛояльности();

КонецПроцедуры // КС_ВДВ > -------------------------------------------------------------------- 

// < КС_ВДВ -------------------------------------------------------------------- 
Процедура КнопкаЗаменаКартыНажатие(Элемент)
	
	ЗаменаКартыЛояльности();
	
КонецПроцедуры // КС_ВДВ > -------------------------------------------------------------------- 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура КнопкаМаркиНажатие(Элемент)
	
	ОткрытьМониторЗаказов();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 



Процедура ВключитьОбработкуСобытий() Экспорт
	ОкноОбработки = "";
	ЭтаФорма.Обновить();
	ОбновлениеОтображения();
	//ТаймерОтрисовки	 = NativeDraw_ВнешняяКомпонента.Таймер_Запустить(100);
	NativeDraw_ВнешняяКомпонента.Перехват_Установить();
	
	NativeDraw_ВнешняяКомпонента.Ввод_АктивироватьПерехватМыши();
	
	NativeDraw_ВнешняяКомпонента.Окно_АктивироватьПерехват();
	NativeDraw_ВнешняяКомпонента.Окно_ЗадатьПерехват(ОкноОбработки);
	//NativeDraw_ВнешняяКомпонента.Окно_ЗадатьПерехват(NativeDraw_ВнешняяКомпонента.Окно_Главное());
	
	NativeDraw_ВнешняяКомпонента.Ввод_ЗадатьПерехватДействияМыши("ОтпусканиеЛевойКнопкиМыши", 0);
КонецПроцедуры

Процедура РисунокПланЗалаПриШелчкеМышкой(Элемент, Кнопка, x, y)
	НомерСтроки = Цел((Y - 350) / 70) + 1;
	НомерКолонки = Цел((X - 5) / 80) + 1;
	
	НомерМеста = ""+((НомерСтроки-1) * 9 + НомерКолонки);
	
	//Предупреждение(""+X1+"/"+Y1+" Номер строки: "+НомерСтроки+" НомерКолонки: "+НомерКолонки);
	
	Выб = Справочники.ПосадочныеМеста.НайтиПоНаименованию(НомерМеста,истина);
	
	Если Выб = Справочники.ПосадочныеМеста.ПустаяСсылка() тогда
		//Предупреждение("Не нашли посадочное место: "+НомерМеста);
		Если X>651 и Y<121 и Y>20 Тогда
			Если Вопрос("Все карты сданы? Вы хотите очистить схему?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Справочники.ПосадочныеМеста.ОбнулитьПосадочныеМеста();							
				НарисоватьФон();	
			КонецЕсли; 	
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	ВыбранноеМесто = Выб.Ссылка;
	МассивПомеченных = ?(Выб.НовыйГость, Массив("Новый гость"), Новый Массив);
	Рез = ИнтерфейсРМ.ВводЧисла("Столик №"+выб.Наименование,"Число",2,0,выб.ЗанятоМест,1,"Число",Ложь,,,Массив("Новый гость"),1,МассивПомеченных,Выб.Ссылка);
	//Если Рез <> Неопределено И Рез <> Истина Тогда
	//	об = выб.ПолучитьОбъект();
	//	об.ЗанятоМест   = Рез;
	//	об.Записать();
	//	НарисоватьФон();
	//КонецЕсли;          
КонецПроцедуры

Процедура РисунокПланЗалаПриНажатииКнопкиМышки(Элемент, Кнопка, x, y)
	РисунокПланЗалаПриШелчкеМышкой(Элемент,Кнопка,x,y);
КонецПроцедуры


ОкноОбработки		 = "";
СписокДочернихОкон	 = Новый Соответствие;

Выделение_X			 = 0;
Выделение_Y			 = 0;
Выделение_Флаг		 = Ложь;


ТребуетсяПерерисовка_Флаг = Истина;
W=0;H=0;
