
// Признак изменение пароля пользователя БД
Перем мМенялиПароль;

// Переменная хранит обладает ли пользователь правами администрирования или нет
Перем мЕстьПраваАдминистрирования;

Перем мЗакрытиеФормыИнициированоПользователем;
Перем мФормаМодифицирована;
Перем мПлатформа;

Процедура мСообщитьОбОшибке(Текст)
	
	Сообщить(Текст, СтатусСообщения.Внимание);
	
КонецПроцедуры

// Процедура устанавливает доступность элементов формы, в зависимости от режима "Аутентификации" 
Процедура УстановитьДоступностьАутентификаций()
	
	ЭлементыФормы.Пароль.Доступность              			= АутентификацияСтандартная;
	ЭлементыФормы.НадписьПарольПользователяБД.Доступность 	= АутентификацияСтандартная;

	ЭлементыФормы.ПодтверждениеПароля.Доступность 			= АутентификацияСтандартная;
	ЭлементыФормы.НадписьПодтверждениеПароляБД.Доступность	= АутентификацияСтандартная;

	ЭлементыФормы.ПользовательОС.Доступность 				= АутентификацияОС;
	ЭлементыФормы.НадписьПользовательОС.Доступность 		= АутентификацияОС;
	
КонецПроцедуры

// нажатие на ОК в форме пользователя БД
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	РезультатЗаписи = ЗаписатьПользователя();
	Если РезультатЗаписи = Истина Тогда
		мЗакрытиеФормыИнициированоПользователем = Истина;
		ЭтаФорма.Закрыть(Истина);
	КонецЕсли;
	
КонецПроцедуры

// отмена
Процедура ОсновныеДействияФормыОтмена(Кнопка)
	
	мЗакрытиеФормыИнициированоПользователем = Истина;
	ЭтаФорма.Закрыть(Ложь);
	
КонецПроцедуры

// Процедура заполняет информацию о пользователе БД
Процедура ОбновитьДанныеПользователяБД(ПользовательНастроек, Знач ОтображатьИмя = Истина)
	
	Если ПользовательНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если Сервер И Не Сервер Тогда
	    ПользовательНастроек = ПользователиИнформационнойБазы.ТекущийПользователь();
	#КонецЕсли
	Если ОтображатьИмя Тогда
		
		ЭтаФорма.Имя = ПользовательНастроек.Имя;
		ЭтаФорма.ПолноеИмя = ПользовательНастроек.ПолноеИмя;
		
	КонецЕсли;
	
	ЭтаФорма.Язык = ПользовательНастроек.Язык;
	ЭтаФорма.ОсновнойИнтерфейс = ПользовательНастроек.ОсновнойИнтерфейс;
	
	ЭтаФорма.АутентификацияСтандартная = ПользовательНастроек.АутентификацияСтандартная;
	мМенялиПароль = Ложь;
	
	Если ПользовательНастроек.ПарольУстановлен Тогда
		ЭтаФорма.Пароль = "************";
		ЭтаФорма.ПодтверждениеПароля = "************";
	Иначе
		ЭтаФорма.Пароль = "";
		ЭтаФорма.ПодтверждениеПароля = "";
	КонецЕсли; 

	Попытка
		ЭтаФорма.ПользовательОС = ПользовательНастроек.ПользовательОС;
	Исключение
		ЭтаФорма.ПользовательОС = "<Неверные данные>";
	КонецПопытки; 

 	ЭтаФорма.ПоказыватьВСпискеВыбора = ПользовательНастроек.ПоказыватьВСпискеВыбора;
	ЭтаФорма.АутентификацияОС = ПользовательНастроек.АутентификацияОС;
	ЭтаФорма.АутентификацияOpenID = ПользовательНастроек.АутентификацияOpenID;
	
	Для Каждого СтрокаСпискаДоступныхРолей Из РолиПользователя Цикл
		СтрокаСпискаДоступныхРолей.Включена = ПользовательНастроек.Роли.Содержит(Метаданные.Роли[СтрокаСпискаДоступныхРолей.Роль]);
	КонецЦикла; 
	
	Для Каждого СтрокаРазделителя Из РазделениеДанных Цикл
		СтрокаРазделителя.ЗначениеСтрока = "";
		//СтрокаРазделителя.Значение = Неопределено;
		СтрокаРазделителя.Включена = ПользовательНастроек.РазделениеДанных.Свойство(СтрокаРазделителя.Разделитель); 
		Если СтрокаРазделителя.Включена Тогда
			СтрокаРазделителя.ЗначениеСтрока = ПользовательНастроек.РазделениеДанных[СтрокаРазделителя.Разделитель];
			//СтрокаРазделителя.Значение = ЗначениеРазделителяИзСтроки(СтрокаРазделителя.Разделитель, СтрокаРазделителя.ЗначениеСтрока);
		КонецЕсли; 
	КонецЦикла; 
	
	ЭтаФорма.РежимЗапуска = ПользовательНастроек.РежимЗапуска;
	Если мПлатформа.ВерсияПлатформы > 803009 Тогда
		ЭтаФорма.ПредупреждатьОбОпасныхДействиях = ПользовательНастроек.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях;
	КонецЕсли; 
	
	УстановитьДоступностьАутентификаций();
	
КонецПроцедуры

Функция _ЗначениеРазделителяИзСтроки(ИмяРазделителя, СтрокаЗначения)
	
	МетаРазделитель = Метаданные.ОбщиеРеквизиты.Найти(ИмяРазделителя);
	Если Ложь
		Или МетаРазделитель.ТипЗначения.СодержитТип(Тип("Булево")) 
		Или МетаРазделитель.ТипЗначения.СодержитТип(Тип("Число")) 
		Или МетаРазделитель.ТипЗначения.СодержитТип(Тип("Дата")) 
		Или МетаРазделитель.ТипЗначения.СодержитТип(Тип("Строка"))
	Тогда
		Результат = МетаРазделитель.ТипЗначения.ПривестиЗначение(СтрокаЗначения);
	Иначе
		ОбъектМД = Метаданные.НайтиПоТипу(МетаРазделитель.ТипЗначения.Типы()[0]);
		Менеджер = ирОбщий.ПолучитьМенеджерЛкс(ОбъектМД);
	КонецЕсли; 
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЛЯ РАБОТЫ С ИНФОРМАЦИЕЙ О ПОЛЬЗОВАТЕЛЕ БД

// Процедура - обработчик "При изменении" АутентификацияСтандартная
Процедура АутентификацияСтандартнаяПриИзменении(Элемент)
	
	УстановитьДоступностьАутентификаций();
	
КонецПроцедуры

// Процедура - обработчик "При изменении" АутентификацияОС
Процедура АутентификацияОСПриИзменении(Элемент)
	
	УстановитьДоступностьАутентификаций();
	
КонецПроцедуры

// Процедура - обработчик "При изменении" Пароль
Процедура ПарольПриИзменении(Элемент)
	
	мМенялиПароль = Истина;
	
КонецПроцедуры

// Процедура - обработчик "При изменении" ПодтверждениеПароля
Процедура ПодтверждениеПароляПриИзменении(Элемент)
	
	мМенялиПароль = Истина;
	
КонецПроцедуры

// Процедура заполняет списки выбора атрибутов для пользователя БД
Процедура ИнициализироватьЭлементыРедактированияПользователяБД()
	
	//Язык
	СписокВыбораЯзыка = ЭлементыФормы.Язык.СписокВыбора;
	Для Каждого мЯзык Из Метаданные.Языки Цикл
		СписокВыбораЯзыка.Добавить(мЯзык, мЯзык.Синоним);
	КонецЦикла; 
			
	//Интерфейс
	СписокВыбораИнтерфейса = ЭлементыФормы.ОсновнойИнтерфейс.СписокВыбора;
	Для Каждого мИнтерфейс Из Метаданные.Интерфейсы Цикл
		СписокВыбораИнтерфейса.Добавить(мИнтерфейс, мИнтерфейс.Синоним);
	КонецЦикла; 

	//Роль
	РолиПользователя.Сортировать("Представление");
	
	СписокВыбораРежимаЗапуска = ЭлементыФормы.РежимЗапуска.СписокВыбора;
	СписокВыбораРежимаЗапуска.Добавить(РежимЗапускаКлиентскогоПриложения.Авто);
	СписокВыбораРежимаЗапуска.Добавить(РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение);
	СписокВыбораРежимаЗапуска.Добавить(РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение);

КонецПроцедуры

// Процедура выполняет запись пользователя ИБ
Функция ЗаписатьПользователя()
	
	Если ПользовательБД = Неопределено Тогда
		//Возврат Ложь;
		ПользовательБД = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;
	Имя = СокрЛП(Имя);
	Если НЕ ЗначениеЗаполнено(Имя) Тогда
		мСообщитьОбОшибке("Не заполнено имя пользователя базы данных!");
		Возврат Ложь;
	КонецЕсли;
	
	//проверим что бы было указано то что нужно
	Если Истина
		И АутентификацияОС
		И ПустаяСтрока(ПользовательОС) 
	Тогда
		мСообщитьОбОшибке("Укажите пользователя Windows или запретите Windows-аутентификацию!");
		Возврат Ложь;
	КонецЕсли;
	
	ПользовательБД.Имя = Имя;
	ПользовательБД.ПолноеИмя = ПолноеИмя;
	ПользовательБД.ПользовательОС = ПользовательОС;
	Если мМенялиПароль = Истина Тогда
		Если Пароль <> ПодтверждениеПароля Тогда
			мСообщитьОбОшибке("Пароль и подтверждение пароля не совпадают!!!"); 
			Возврат Ложь;
		КонецЕсли;
		ПользовательБД.Пароль = Пароль;
	КонецЕсли; 
	
	ПользовательБД.АутентификацияСтандартная = АутентификацияСтандартная;
	ПользовательБД.ПоказыватьВСпискеВыбора = ПоказыватьВСпискеВыбора;
	ПользовательБД.АутентификацияОС = АутентификацияОС;
	ПользовательБД.АутентификацияOpenID = АутентификацияOpenID;
	ПользовательБД.Язык = Язык;
	ПользовательБД.ОсновнойИнтерфейс = ОсновнойИнтерфейс;
	Если РежимЗапуска <> Неопределено Тогда
		ПользовательБД.РежимЗапуска = РежимЗапуска;
	КонецЕсли; 
	Если мПлатформа.ВерсияПлатформы > 803009 Тогда
		ПользовательБД.ЗащитаОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = ЭтаФорма.ПредупреждатьОбОпасныхДействиях;
	КонецЕсли; 
	
	// Роли сохраняем
	Для Каждого СтрокаСпискаДоступныхРолей Из РолиПользователя Цикл
		мРоль = Метаданные.Роли[СтрокаСпискаДоступныхРолей.Роль];
		СодержитРоль = ПользовательБД.Роли.Содержит(мРоль);
		Если СодержитРоль И Не СтрокаСпискаДоступныхРолей.Включена Тогда
			ПользовательБД.Роли.Удалить(мРоль);
		ИначеЕсли Не СодержитРоль И СтрокаСпискаДоступныхРолей.Включена Тогда
			ПользовательБД.Роли.Добавить(мРоль);
		КонецЕсли; 
	КонецЦикла;
	
	Если РазделениеДанных.Количество() > 0 Тогда
		ПользовательБД.РазделениеДанных.Очистить();
		Для Каждого СтрокаРазделителя Из РазделениеДанных Цикл
			Если СтрокаРазделителя.Включена Тогда
				ПользовательБД.РазделениеДанных.Вставить(СтрокаРазделителя.Разделитель, СтрокаРазделителя.ЗначениеСтрока);
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 
	
	// запись пользователя БД
	Попытка
		ПользовательБД.Записать();
	Исключение
		мСообщитьОбОшибке("Ошибка при сохранении данных пользователя инфобазы. " + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	// удачно записан пользователь БД
	Оповестить("ИзмененПользовательБД", ПользовательБД, ЭтаФорма); 
	Возврат Истина;
		
КонецФункции

//Процедура - обаботчик события, при нажатии на кнопку "Снять флажки" Командной панели "КоманднаяПанельСпискаДоступныхРолей"
Процедура КоманднаяПанельСпискаДоступныхРолейСнятьФлажки(Кнопка)
	
	Для Каждого СтрокаРоли Из РолиПользователя Цикл
		СтрокаРоли.Включена = Ложь;
	КонецЦикла;
	
КонецПроцедуры

//Процедура - обаботчик события, при нажатии на кнопку "Установить флажки" Командной панели "КоманднаяПанельСпискаДоступныхРолей"
Процедура КоманднаяПанельСпискаДоступныхРолейУстановитьФлажки(Кнопка)
	
	Для Каждого СтрокаРоли Из РолиПользователя Цикл
		СтрокаРоли.Включена = Истина;
	КонецЦикла;
	
КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" в: Поле ввода "ОсновнойИнтерфейс"
Процедура ОсновнойИнтерфейсНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Элемент.СписокВыбора.Скопировать();
	РезультатВыбора = СписокВыбора.ВыбратьЭлемент("Выберите основной интерфейс", Элемент.Значение);
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение = РезультатВыбора.Значение;
	КонецЕсли; 
	
КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" в: Поле ввода "ПользовательОС"
Процедура ПользовательОСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбораПользователяWindows = ирОбщий.ПолучитьФормуЛкс("Обработка.ирПлатформа.Форма.ВыборПользователяWindows", , ЭтаФорма);
	ФормаВыбораПользователяWindows.ВыбранныйПользовательWindows = ПользовательОС;
	Результат = ФормаВыбораПользователяWindows.ОткрытьМодально();
	Если Результат <> Неопределено Тогда
		ПользовательОС = Результат;
	КонецЕсли; 
	
КонецПроцедуры

//Процедура - обаботчик события, "При изменении" у имени пользователя БД
Процедура ИмяПриИзменении(Элемент)
	
	Элемент.Значение = СокрЛП(Имя);
	
	// полное имя пользователя БД тоже ставим если оно пустое
	Если НЕ ЗначениеЗаполнено(ПолноеИмя) Тогда
		ПолноеИмя = Элемент.Значение
	КонецЕсли;
	
КонецПроцедуры

// перед открытием
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	мПлатформа = ирКэш.Получить();
	ИнициализироватьЭлементыРедактированияПользователяБД();
	
	Если ПользовательДляКопированияНастроек = Неопределено Тогда
		ОбновитьДанныеПользователяБД(ПользовательБД);
	Иначе
		ОбновитьДанныеПользователяБД(ПользовательДляКопированияНастроек, Ложь);
	КонецЕсли;
	
	ТолькоПросмотр = НЕ мЕстьПраваАдминистрирования;
	
	мФормаМодифицирована = Модифицированность;
		
КонецПроцедуры

// перед закрытием
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если мЗакрытиеФормыИнициированоПользователем Тогда
		
		мЗакрытиеФормыИнициированоПользователем = Ложь;
		Возврат;
		
	КонецЕсли;
	
	// форму принудительно пытаются закрыть	
	Если Модифицированность Тогда
		
		// есть права на изменение пользователя БД
		ОтветПользователя = Вопрос("Настройки пользователя БД были изменены. Сохранить?", РежимДиалогаВопрос.ДаНетОтмена, ,
			КодВозвратаДиалога.Да);
			
		Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
			
			// записываем внесенные изменения
			РезультатЗаписи = ЗаписатьПользователя();
			Отказ = Не РезультатЗаписи;
			
			Если Не Отказ Тогда
				мЗакрытиеФормыИнициированоПользователем = Истина;
				Закрыть(Истина);
			КонецЕсли;			
				
		ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Нет Тогда	
			
			// ничего делать не надо
			
		Иначе	
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Модифицированность = мФормаМодифицирована;
	Если ПользовательБД <> Неопределено Тогда
		УстановитьОтборТолькоВключенные(Истина);
	КонецЕсли; 
	
КонецПроцедуры

// копирование настроек пользователя БД
Процедура КоманднаяПанельОбщаяСкопироватьНастройки(Кнопка)
	
	СписокВыбора = Новый СписокЗначений;
	
	МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для каждого ВремПользователь Из МассивПользователей Цикл
		
		СписокВыбора.Добавить(ВремПользователь.УникальныйИдентификатор, ВремПользователь.Имя);
								
	КонецЦикла; 
	
	СписокВыбора.СортироватьПоЗначению();
		
	ВыбранныйПользователь = СписокВыбора.ВыбратьЭлемент("Выберите пользователя, от которого копировать настройки", 
		СписокВыбора);
		
	Если ВыбранныйПользователь = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйПользовательБД = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ВыбранныйПользователь.Значение);
	
	// настройки устанавливаются на форму
	ОбновитьДанныеПользователяБД(ВыбранныйПользовательБД, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельСпискаДоступныхРолейТолькоВключенные(Кнопка)
	
	УстановитьОтборТолькоВключенные(Не Кнопка.Пометка);
	
КонецПроцедуры

Процедура УстановитьОтборТолькоВключенные(НовоеЗначение)
	
	ЭлементыФормы.КоманднаяПанельСпискаДоступныхРолей.Кнопки.ТолькоВключенные.Пометка = НовоеЗначение;
	ЭлементыФормы.РолиПользователя.ОтборСтрок.Включена.ВидСравнения = ВидСравнения.Равно;
	ЭлементыФормы.РолиПользователя.ОтборСтрок.Включена.Использование = НовоеЗначение;
	ЭлементыФормы.РолиПользователя.ОтборСтрок.Включена.Значение = Истина;
	
КонецПроцедуры

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Функция СгенерироватьПароль(ДлинаСлучайногоПароля = 10)
	
	ЗапрещенныеСимволы = Новый СписокЗначений();
	ЗапрещенныеСимволы.Добавить(" ");
	НовыйПароль = "";
	Генератор = Новый ГенераторСлучайныхЧисел();
	Счетчик = 0;
	Пока Счетчик < ДлинаСлучайногоПароля цикл
		КодСимвола = Генератор.СлучайноеЧисло(33, 126);
		Символ = Символ(КодСимвола);
		НовыйПароль = НовыйПароль + Символ;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Возврат НовыйПароль;
	
КонецФункции

Процедура СгенерироватьНажатие(Элемент)
	
	НовыйПароль = СгенерироватьПароль();
	ЭтаФорма.Пароль = НовыйПароль;
	ЭтаФорма.ПодтверждениеПароля = НовыйПароль;
	ирОбщий.ПоместитьТекстВБуферОбменаОСЛкс(НовыйПароль);
	Предупреждение("Новый пароль установлен в форме и помещен в буфер обмена");
	
КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирРедакторПользователей.Форма.ПользовательИнфобазы");
мЕстьПраваАдминистрирования = ПравоДоступа("Администрирование", Метаданные);

//Заполняем параметры пользователя БД
мЗакрытиеФормыИнициированоПользователем = Ложь;
ПользовательДляКопированияНастроек = Неопределено;
