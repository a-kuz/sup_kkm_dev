#Если Клиент Тогда
	
Перем фВыборСпецифик;
Перем AutohotkeyDLL Экспорт;
Перем NativeDraw_ВнешняяКомпонента Экспорт;
Перем Плашки Экспорт;
Перем ЛояльностьДанныеЗаказа Экспорт;
Перем МастерТестирования Экспорт;
Перем ГлавнаяФорма Экспорт;
Перем Окно1С;
Перем ПроцессВыходаЗапущен;
Перем РежимТестирования Экспорт;
Перем Обработка_ККМ;
Перем ФормаПодбораТоваров Экспорт;

Перем ВыходОС Экспорт;						// устанавливается в обработке РежимАдминистратора
Перем ВыполнитьДействияПриВозврате Экспорт;	// для отработки в ИнтерфейсРМ.ПриЗакрытииОкна()

Перем ТекКоличество Экспорт;
Перем ДатаОткрытия;

Перем фВводТоваровДоступен Экспорт;
Перем ПротоколРасчетов;
Перем ТекущийРежим Экспорт; // Продажа, Возврат
Перем НадписьСдача Экспорт;
Перем УИДформы Экспорт;
Перем ДопПараметрыИнфо Экспорт;
Перем ГруппыАкций Экспорт;

//ВЕСЫ
Перем Обработка_Весы Экспорт;
Перем ВысотаТаблицыЗаказа Экспорт;
Перем ВысотаПодвала Экспорт;
Перем ЕстьДозаказ Экспорт;
Перем ЕстьУдаление Экспорт;
Перем СтатусДозаказ Экспорт;
Перем СтатусЗаказано Экспорт;
Перем СтатусГотово Экспорт;
Перем СтатусУдалено;
Перем СтатусОтложено Экспорт;
Перем СтатусТарифВкл;
Перем СтатусВыдано; 

Перем ИспользоватьЗаказТоварыДопИнф Экспорт;// Глобальная переменная использование регистра ЗаказТоварыДопИнф
Перем ТаблицаПодач;
Перем ТекущаяПодача Экспорт;		// ссылка на строку ТаблицаПодач; экспорт для формы подбора
Перем РазделятьПодачи;
Перем РазделятьДозаказы;
Перем ИспользоватьКурсы Экспорт;	// Для работы с табличной частию
Перем ПодтверждениеВыдачи Экспорт;	// Для работы с табличной частью
Перем ПодтверждениеГотовностиПриВыдачи Экспорт;

Перем ТаблицаУдалений;
Перем РучнаяСкидка;
Перем ПартнерСкидки;
Перем ИспользоватьГруппыОплаты;
Перем ОсновнаяГруппаОплаты;
//Перем ОбработкаРасчетыПоТарифу;
Перем ТипКолво, ТипСумма;
Перем НомерКлюча;
Перем ГСЧ;

Перем АктивныеАбонементы Экспорт;

Перем МониторыМарок;			// Список РМ мониторов марок для уведомлений
Перем УведомитьМониторыМарок;	// 
Перем СоответствиеКодПодтвержденияНомерМарки;
Перем НовыйЗаказ; // Заказ открыт впервые (получен через СоздатьНовый())

Перем ИспользоватьРекомендации;		// На РМ работают с рекомендациями
Перем СписокРекомендаций Экспорт;	// Список рекомендаций к текущему заказу

  

Перем СтанцияОтбор Экспорт; 			// Текущая станция, используемая для отбора строка заказа в ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа
Перем ОтветЛояльности Экспорт;
Перем ДанныеЛояльности Экспорт;
Перем ТаблицаАкций Экспорт;

// Используются для вычисления суммы по вновь набираемым позициям в текущем сеансе работы с заказом
Перем тзСуммыПоСтанциямНач Экспорт; 	// Содержит итоговые суммы по станциям до начала редактирования
Перем СтанцияОтборСуммаНач Экспорт; 	// Сумма заказа по СтанцияОтбор до начала редактирования
//
Перем СледующийНомерПодачиНач;			// Следующий номер подачи на момент открытия заказа. 
Перем ТекущийМаксНомерПодачи;           // Текущий номер подачи

Перем ПейджерКВыдаче;					// Необходимо выдать при печати марок
Перем ВыданныеПейджерыСтр Экспорт; 		// Строка из номером выданных пейджеров через запятую

Перем ЦветДозаказ;
Перем ЦветЗаказано;						// Цвета выделения ячеек в колонке "Статус" ("Марка")
Перем ЦветГотово;
Перем ЦветВыдано;
Перем ЦветДругое;
Перем ЦветТекстаДозаказ;
Перем ЦветТекстаСтатус;

Перем УстановитьРежимВыдачиЗаказа Экспорт; // Определяет: нужно ли установить режим выдачи в мониторе марок после закрытия заказа

Перем ТаблицаПеревязки;

Перем ТочностьКоличества, ТочностьСуммы;
////////////////////////////////////////////////////////////////////////////////

Процедура ОпределитьТаблицуПодач()
	
	//РазделятьДозаказы = НЕ Доставка И глВерсия>1 И Константы.РазделятьДозаказы.Получить();
	// с 18-го релиза разделение дозаказов нужно всегда для работы монитора кухни
	//РазделятьДозаказы = глВерсия>1 И Константы.РаботаСПодтверждениямиПозицийЗаказа.Получить();
	РазделятьДозаказы = ИспользоватьЗаказТоварыДопИнф;
	
	//pr Разделение по подачам используется, помимо курсов подач, и для разделения дозаказов. (вынесено в переменную)
	//ИспользоватьКурсы = ?(глПараметрыРМ=Неопределено ИЛИ Доставка ИЛИ глВерсия=1, Ложь, глПараметрыРМ.ЗаказИспользоватьКурсы);
	//РазделятьПодачи = ИспользоватьЗаказТоварыДопИнф И (РазделятьДозаказы ИЛИ ИспользоватьКурсы);
	РазделятьПодачи = ИспользоватьЗаказТоварыДопИнф;
	
	ТаблицаПодач = Новый ТаблицаЗначений;
	ТаблицаПодач.Колонки.Добавить("Номер", ПолучитьОписаниеТиповЧисла(2,0));
	ТаблицаПодач.Колонки.Добавить("Время");
	ТаблицаПодач.Колонки.Добавить("Статус");
	ТаблицаПодач.Колонки.Добавить("ДокСсылка");// Оставлено для заказов с документами Подача
	Если НЕ РазделятьПодачи Тогда
		// используется фиктивная подача
		ТекущаяПодача = ТаблицаПодач.Добавить();
		ТекущаяПодача.Номер = 0;
	КонецЕсли; 
	
КонецПроцедуры

// Вызывается перед открытием формы из ИнтерфейсРМ.ЗапуститьРабочееМесто()
//
Функция ИнициализацияРабочегоМеста(ТекущееРМ) Экспорт
	глПараметрыРМ = Новый Структура;
	
	// Проверка даты запуска ТТ
	//ДатаЗапускаТТ = ДатаЗапускаТТ();
	//глПараметрыРМ.Вставить("ФайловаяИБ",ПроцедурыОбменаДанными.ОпределитьЭтаИнформационнаяБазаФайловая());
	
	// Инициализация глобальных переменных
	глТорговоеОборудование	= Новый Структура;	// чтобы убрать все лишнее при запуске в режиме тестирования
	глСтекОкон				= Новый Массив;
	глОбработки				= Новый Структура;
	глФлагБлокировка		= Ложь;
	глФлагЗапретБлокировки	= Ложь;
	глПользователь			= Справочники.Сотрудники.ПустаяСсылка();
	
	// Инициализация параметров рабочего места
	РежимТестирования = ЗначениеЗаполнено(ТекущееРМ);
	
	Если РежимТестирования Тогда
		глРабочееМесто = ТекущееРМ;
		
	Иначе
		ПрофильВхода = "\\"+ИмяКомпьютера()+"\"+ИмяПользователя();
		глРабочееМесто = Справочники.РабочиеМеста.НайтиПоРеквизиту("ПрофильВхода",ПрофильВхода);
		
		Если глРабочееМесто.Пустая() Тогда
			РаботаСокнами.РазблокироватьВвод();
			Предупреждение("Рабочее место с профилем входа """+ПрофильВхода+""" отсутствует!
			|Обратитесь к администратору...");
			Возврат Ложь;
		КонецЕсли; 
		
		
		РазностьВремени = ТекущаяДатаНаСервере() - ТекущаяДата();
		РазностьВремени = Макс(РазностьВремени,-РазностьВремени);
		Если РазностьВремени > 800 Тогда
			ЗарегистрироватьСобытие("Разность времени с сервером", УровеньЖурналаРегистрации.Ошибка, , ,""+РазностьВремени,);
			//ЗапуститьПриложение("cmd /cdate " + Формат(ТекущаяДатаНаСервере(),"ДФ=dd.MM.yyyy") + " && time " + Формат(ТекущаяДатаНаСервере(),"ДФ=H:mm:ss"));
		КонецЕсли;

		Попытка
			
			Для каждого Соединение Из ПолучитьСоединенияИнформационнойБазы() Цикл
				
				Если Соединение.Пользователь = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				
				Если Не ЗначениеЗаполнено(Соединение.НомерСоединения) Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Соединение.НомерСеанса) Тогда
					Продолжить;
				КонецЕсли;
				
				ПрофильСоединения = "\\"+Соединение.ИмяКомпьютера+"\"+Соединение.Пользователь.Имя;
				
				Если Соединение.НомерСоединения <> НомерСоединенияИнформационнойБазы() И ПрофильСоединения = ПрофильВхода Тогда
					Если Сеть.СписокПроцессовЛокально().Количество() > 1 Тогда
						РаботаСокнами.РазблокироватьВвод(); 
						Предупреждение("Рабочее место с профилем входа """+ПрофильВхода+""" запущено в другом сеансе!", 5);
						Возврат Ложь;
					Иначе
						Соединитель = Новый COMObject("V83.COMConnector");
						Агент = Соединитель.ConnectAgent(ПараметрыСеанса.ТекущаяИБ.СерверХост);
						Кластеры = Агент.GetClusters();
						Кластер = Кластеры.GetValue(0);
						
						Агент.Authenticate(Кластер,"","");
						Сеансы = Агент.GetSessions(Кластер).Выгрузить();
						Для Каждого Сеанс Из Сеансы Цикл
							Если Сеанс.SessionID = Соединение.НомерСеанса Тогда
								Агент.TerminateSession(Кластер, Сеанс);	
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
				Если Сеанс.ИмяПриложения = "1CV8" И Сеанс.Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь() Тогда
					Если НомерСеансаИнформационнойБазы() <> Сеанс.НомерСеанса Тогда
						Если НРег(Сеанс.ИмяКомпьютера) = НРег(ИмяКомпьютера()) Тогда
							Соединитель = Новый COMObject("V83.COMConnector");
							Агент = Соединитель.ConnectAgent(ПараметрыСеанса.ТекущаяИБ.СерверХост);
							Кластеры = Агент.GetClusters();
							Кластер = Кластеры.GetValue(0);
							
							Агент.Authenticate(Кластер,"","");
							Sessions = Агент.GetSessions(Кластер).Выгрузить();
							Для Каждого Session Из Sessions Цикл
								Если Session.SessionID = Сеанс.НомерСеанса Тогда
									Агент.TerminateSession(Кластер, Session);	
								КонецЕсли;
							КонецЦикла;
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Исключение
			ЗарегистрироватьСобытие("РМ.Ошибка завершения сеанса",УровеньЖурналаРегистрации.Ошибка, ,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли; 
	
	Если глРабочееМесто.ПометкаУдаления Тогда
		Предупреждение("Рабочее место """+глРабочееМесто+""" помечено на удаление!
		|Обратитесь к администратору...");
		Возврат Ложь;
	КонецЕсли;	
	
	// Чтение параметров РМ через форму настройки для контроля соответствия версии и релизу.
	// Заполняется глобальная переменная-структура глПараметрыРМ,
	// ключи структуры соответствуют именам реквизитов формы НастройкаРМ
	
	глПараметрыРМ = ЗначениеИзСтрокиВнутр(глРабочееМесто.ПараметрыРМ);
	глПараметрыРМ.Вставить("ФайловаяИБ",ПроцедурыОбменаДанными.ОпределитьЭтаИнформационнаяБазаФайловая());
	
	//НастройкаРМ = Справочники.РабочиеМеста.ПолучитьФорму("НастройкаРМ",,Ложь);
	//
	//НастройкаРМ.СправочникОбъект = глРабочееМесто.ПолучитьОбъект();
	//Если НЕ НастройкаРМ.ПроверкаПараметров() Тогда
	//	Предупреждение("Рабочее место """+глРабочееМесто+""" не настроено!
	//					|Обратитесь к администратору...");
	//	Возврат Ложь;
	//КонецЕсли;
	//НастройкаРМ.СохранитьПараметры(глПараметрыРМ);
	// интерфейсные объекты можно создавать только после получения параметров РМ
	глОжидание = Обработки.Ожидание.Создать();
	
	// Загрузка внешних компонент
	Если НЕ РежимТестирования Тогда
		глОжидание.Начало("Запуск системы", "Загрузка внешних компонент,
							|поиск ключа защиты...");
							
		Если Не глЗагрузитьВнешниеКомпоненты() Тогда
			глОжидание.Конец();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// ----------------------------------------------------------------------
	// Подключение торгового оборудования
	глОжидание.Начало("Запуск системы", "Подключение торгового оборудования...");
	
	МассивТО = ПолучитьМассивПодключаемогоТО();
	ТаблицаОшибок = Новый ТаблицаЗначений;
	тоВыполнитьПодключениеОтключение("Подключить", Ложь, МассивТО, ТаблицаОшибок);
	
	Для каждого Ошибка Из ТаблицаОшибок Цикл
		Текст1 = Ошибка.ТО.Наименование;
		Текст2 = Ошибка.Описание+Символы.ПС+Ошибка.Подробно;
		Если ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"ОК","","Esc=Выход")="Выход" Тогда
			глОжидание.Конец();
			// На случай если Торговое оборудование подключено с ошибками 
			// и у рабочего места указана настройка выключения компьтера при выходе
			Если НЕ РежимТестирования И глПараметрыРМ.РежимВыхода = 0 Тогда
				Если Не глРабочееМесто.Тест Тогда
					РаботаСокнами.ShutDown();
				КонецЕсли;
				ЗавершитьРаботуСистемы(Ложь);
			Иначе
				Возврат Ложь;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
	// ----------------------------------------------------------------------
	// если основной режим работы - доставка, то это многое меняет :)
	глДоставкаОсновнойРежим = глВерсия=3 И глПараметрыРМ.ДоставкаЕсть И глПараметрыРМ.ДоставкаРежимИспользования<>1;
	
	// ----------------------------------------------------------------------
	// проверка наличия хотя бы одного элемента в справочнике Сотрудники
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.Сотрудники ГДЕ НЕ ПометкаУдаления И НЕ ЭтоГруппа");
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		Текст1 = "Нет доступа!";
		Текст2 = "Нужно завести хотя бы одного сотрудника!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		глОжидание.Конец();
		Возврат Ложь;
	КонецЕсли; 
	
	Если глПараметрыРМ.РежимВыхода = 0 Тогда        
		Запрос = Новый Запрос( "ВЫБРАТЬ Ссылка ИЗ Справочник.Сотрудники ГДЕ НЕ ПометкаУдаления И НЕ ЭтоГруппа");
		Выборка = Запрос.Выполнить().Выбрать();
		ЕстьПравоНаВыходОС = Ложь;
		Пока Выборка.Следующий() Цикл
			Если ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ВыходОС,Ложь,Выборка.Ссылка) Тогда
				ЕстьПравоНаВыходОС = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЕстьПравоНаВыходОС Тогда
			Текст1 = "Нет доступа!";
			Текст2 = "Нет ни одного сотрудника с правом выхода в ОС!";
			//ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			глОжидание.Конец();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// ----------------------------------------------------------------------
	// проверка текущей смены
	ТекСмена = РегистрыСведений.ТекущиеСмены.Получить(Новый Структура("МестоРеализации", глПараметрыРМ.МестоРеализации )).Смена;
	ТекСменаЗапрос = ИнтерфейсРМ.ТекущаяСменаЗапрос();
	Если ТекСменаЗапрос <> ТекСмена Тогда
		МенеджерЗаписи = РегистрыСведений.ТекущиеСмены.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.МестоРеализации = глПараметрыРМ.МестоРеализации;
		МенеджерЗаписи.Смена = ТекСменаЗапрос;
		Если НЕ ИнтерфейсРМ.ПопыткаДействияСОбъектом( МенеджерЗаписи, "Объект.Записать()" ) Тогда
			глОжидание.Конец();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// ----------------------------------------------------------------------
	// Добавление в глТорговоеОборудование соответствия ГруппПечати и РМ мониторов марок //pr	
	//глТорговоеОборудование.Вставить("СоответствиеМониторРМ", Справочники.РабочиеМеста.ПолучитьСоответствиеМониторРМ());
	
	// ----------------------------------------------------------------------
	// подключение внешней обработки управления формами
	КаталогЛокальныхНастроек = Константы.КаталогЛокальныхНастроек.Получить();
	
	Если НЕ ПустаяСтрока( КаталогЛокальныхНастроек ) Тогда
		ИмяФайла = КаталогЛокальныхНастроек+"\УправлениеФормами.epf";
		Если РаботаСФайлами.ПроверитьСуществованиеФайла( ИмяФайла, , Истина ) Тогда
			глДопУправлениеФормами = ВнешниеОбработки.Создать(ИмяФайла);  
		КонецЕсли;
	КонецЕсли;
	
	// ----------------------------------------------------------------------
	//запись события запуска системы
	ИнтерфейсРМ.ЗаполнитьТаблицуСобытий();
	
	Если РежимТестирования Тогда
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗапускРежимТестирования, , глРабочееМесто);
	Иначе
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗапускРМ);
	КонецЕсли; 
	
	
	глОжидание.Конец();
	
	// пользователь по умолчанию
	Если глПараметрыРМ.ПользовательВходБезАвторизации Тогда
		глПользователь = глПараметрыРМ.ПользовательПоУмолчанию;
	КонецЕсли; 
	
	Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();	
	глПараметрыРМ.Вставить("НомерКассы", глПараметрыРМ.ККМ.КодСУП);	
	ОткрытьЧек();
	
	Возврат Истина;
КонецФункции         

// Вызывается после открытия формы из ИнтерфейсРМ.ЗапуститьРабочееМесто()
//
Процедура ДействияПослеОткрытия() Экспорт
	РаботаСокнами.Инициализация();			// убрать все панели инструментов и главное меню
	ПодождатьПокаОтработаетИнициализация();	
КонецПроцедуры

// Ждет пока отработает поток запущенный в РаботаСокнами.Инициализация(), убирающий панели инструментов,
// иначе не правильно определятся размеры плана зала
Процедура ПодождатьПокаОтработаетИнициализация() Экспорт
	Попытка
		Если НЕ РаботаСокнами.GetMainShowStatusV8() = 1 Тогда
			ГлавнаяФорма.ПодключитьОбработчикОжидания("ПодождатьПокаОтработаетИнициализация",0.3,Истина);
			Возврат;
		КонецЕсли;
	Исключение
	КонецПопытки;	

	// установка фокуса (иногда не возвращается после загрузки плана зала)
	//WshShell.AppActivate(?(ТекущийЯзыкСистемы()="en","1C:Enterprise", "1С:Предприятие") + " - " + ПолучитьЗаголовокСистемы() );
		
	// посылка нажатий работает тоже только после того как все устаканится
	//ИнтерфейсРМ.ЗакрытьОкноСообщений();
	
	// оповещения тоже лучше раньше не выводить
	//ПроверитьОбработкаСобытий();
	//ПодключитьОбработчикОжидания("глОбработкаОчередиСобытий",3);
	
КонецПроцедуры

// Если РМ долго не запускали и накопилось много оповещений, то их можно не показывать
//
Процедура ПроверитьОбработкаСобытий()

	Если глВерсия = 1 ИЛИ (глПараметрыРМ.ОповещенияОтключить И НЕ глПараметрыРМ.СтопЛистПоказыватьОповещения) Тогда
		Возврат;
	КонецЕсли;	
	          	
	Отбор = Новый Структура("РабочееМесто", глРабочееМесто);
	ВыборкаСобытий = РегистрыСведений.ОбработкаСобытий.Выбрать(,ТекущаяДата(),Отбор);
	н = 0;
	Пока ВыборкаСобытий.Следующий() Цикл
		Если ВыборкаСобытий.ТипСобытия = Перечисления.ТипыСобытий.Сообщение И глПараметрыРМ.ОповещенияОтключить ИЛИ 
			 ВыборкаСобытий.ТипСобытия = Перечисления.ТипыСобытий.СтопЛист	И НЕ глПараметрыРМ.СтопЛистПоказыватьОповещения ИЛИ 
			 ВыборкаСобытий.ТипСобытия = Перечисления.ТипыСобытий.МониторМарок
		Тогда
			Продолжить;
		КонецЕсли;	
		н = н + 1;
	КонецЦикла;
	Если н = 0 Тогда
		Возврат
	КонецЕсли; 
	
	Текст1 = "Оповещения";
	Текст2 = "Количество сообщений за время простоя: " + н + Символы.ПС + "Показать?";
	Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","","Esc=Нет");
	
	ИнтерфейсРМ.ОбработкаОчередиСобытий(глРабочееМесто, Ответ="Нет");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Вызывается из обработчика ПередОткрытием форм этой обработки,
// выполняет инициализацию рабочего места
//
Процедура ДействияПередОткрытиемФормы(ТекущаяФорма, Отказ) Экспорт
	УстановкаОкна1С();
	Если Не РежимТестирования Тогда 
		ГлавныйИнтерфейс.ПереключитьИнтерфейс("РабочееМесто");	
	КонецЕсли;
	
	
	ГлавнаяФорма = ТекущаяФорма;
	//: ГлавнаяФорма = ПолучитьФорму();
	ГлавнаяФорма.Стиль = БиблиотекаСтилей[глПараметрыРМ.ИмяСтиля];
	
	ИнтерфейсРМ.ВыводНаДП("Ожидание");
	
КонецПроцедуры

// Вызывается из обработчика ПередЗакрытием форм этой обработки,
//
Процедура ДействияПередЗакрытиемФормы(ТекущаяФорма, Отказ) Экспорт
	
	КолвоОкон = глСтекОкон.Количество();
	
	//:глСтекОкон=Новый Массив;
	Если КолвоОкон > 1 Тогда
		Для н=1 По КолвоОкон-1 Цикл
			//глСтекОкон[0].Закрыть();
			Попытка
				глСтекОкон[0].Форма.Закрыть();
			Исключение
			КонецПопытки;
		КонецЦикла;	
		Если Не ВыходОС Тогда
			Отказ = Истина;
			Возврат;		
		КонецЕсли;
	КонецЕсли; 
	
	// этот механизм с процессом выхода нужен чтобы корректно отработало
	// восстановление панелей инструментов при возврате в обычный интерфейс
	Если ПроцессВыходаЗапущен Тогда
		Попытка
			глТорговоеОборудование.InfoDisplay.Отключить();
		Исключение
		КонецПопытки;	
		Попытка
			Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма, УИДформы);	
		Исключение
		КонецПопытки;
		
		ГлавнаяФорма.ОтключитьОбработчикОжидания("ОбновитьВремя");
		ГлавнаяФорма.ОтключитьОбработчикОжидания("ОбновитьОстальное");
		ГлавнаяФорма	= Неопределено; // иначе объект обработки остается в памяти и работают обработчики ожидания
		глОбработки.ГлавнаяФорма = Неопределено;
		глРабочееМесто	= Неопределено;
		глПараметрыРМ	= Неопределено;
		глПользователь	= Неопределено;
		Возврат;
	КонецЕсли;
	
	
	
	Если глФлагБлокировка Тогда
		Заблокировать();
		Отказ = Истина;
		Возврат;
	ИначеЕсли НЕ Авторизация() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если РежимТестирования Тогда
		Текст2 = "Завершить тестирование?";
		Событие = Справочники.События.ВыходРежимТестрования;
	ИначеЕсли глПараметрыРМ.РежимВыхода=0 Тогда
		Текст2 = "Выключить станцию?";
		Событие = Справочники.События.ВыключениеСтанции;
	Иначе  
		Событие = Справочники.События.ВыходОС;
		Если ИнтерфейсРМ.ПроверкаПраваДоступа("ВыходОС") Тогда
			Текст2 = "Завершить работу программы?";
		Иначе
			Текст1="Недостаточно прав!";
			Текст2="Отказано в праве доступа:
			       |""Выход в ОС""";         
			
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК"," ");
			ВыходОС = Ложь;
			Отказ = Истина;
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Текст1 = "Выход";
	Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","","Esc=Нет")="Нет" Тогда
		ВыходОС = Ложь;
		Отказ = Истина;
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли;
	
	Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма, УИДформы);
	// отключение оборудования
	МассивТО = ПолучитьМассивПодключаемогоТО();
	
	Если РежимТестирования Тогда
		ГлавныйИнтерфейс.ПереключитьИнтерфейс("ирРазработчик");
		
		Если глПараметрыРМ.ИнтерфейсРазмерОкна <> -1 Тогда
			РаботаСокнами.ShowSysMenu( Окно1С, 1 );	// убрать/вернуть системное меню окна flag = 0/1
		КонецЕсли; 
	
		ГлавнаяФорма.ПодключитьОбработчикОжидания("ПроцессВыхода",2,Истина);
		ПроцессВыходаЗапущен = Истина;
		Отказ = Истина;
		
		ИнтерфейсРМ.ЗаписьСобытия(Событие, глПользователь, глРабочееМесто);
		
		ОтключитьОбработчикОжидания("глАвтоблокировка");
		// отключение только после последнего события
		тоВыполнитьПодключениеОтключение("Отключить", Ложь, МассивТО);
		РаботаСокнами.ВернутьПанельЗадач();
		//РаботаСокнами.ВернутьМенюИпанели();
	ИначеЕсли Не ПроцессВыходаЗапущен Тогда
		//ПроцедурыОбменаДанными.ВыполнитьОбменПриЗавершенииРаботыПрограммы(глОбработкаАвтоОбменДанными);		
		ИнтерфейсРМ.ЗаписьСобытия(Событие, глПользователь);
		ОтключитьОбработчикОжидания("глАвтоблокировка");
		// отключение только после последнего события
		//тоВыполнитьПодключениеОтключение("Отключить", Ложь, МассивТО);
		
		Если Не глРабочееМесто.Тест Тогда
			РаботаСокнами.ShutDown();
		КонецЕсли;
		
		РаботаСокнами.ВернутьПанельЗадач();
		РаботаСокнами.Деструктор();
		Если глОбработки.Свойство("ЭмуляторСканера") Тогда
			глОбработки.ЭмуляторСканера.Деструктор();
			глОбработки.ЭмуляторСканера = Null;
		КонецЕсли;
		глОбработки = Неопределено;
		
		РаботаСокнами = Неопределено;
		ГлавнаяФорма.ПодключитьОбработчикОжидания("ПроцессВыхода",5,Истина);
		
		ПроцессВыходаЗапущен = Истина;
		ГлавнаяФорма.Закрыть();
	Иначе
		
		
	КонецЕсли; 
	
КонецПроцедуры

// Обработка внешних событий
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт
	
	глОтсечкаПростоя();
		
	Если Источник = "NativeDraw" Тогда
		Возврат;
	КонецЕсли;
	
	//ВЕСЫ
	Если найти(Источник,"Штрих АС POS") <> 0 Тогда //"Штрих АС POS" Тогда
		Весы = Обработка_Весы.DRV;
		//Весы = глТорговоеОборудование.Scale1C;
		Весы.УдалитьСообщение();
		Весы.ПосылкаДанных = Истина;
		ГлавнаяФорма.Вес = Весы.Вес;
		ГлавнаяФорма.ПодключитьОбработчикОжидания("ОбновитьВес",0.1,1);
		Возврат;
	КонецЕсли;
	
	Если глСтекОкон.Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	
		
	_Знач = ОбработкаВнешнихСобытий.ПолучитьДанные(Источник,Событие,Данные);
	Если НЕ ЗначениеЗаполнено(_Знач) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаказНеВыбран() Тогда
		Возврат;
	КонецЕсли;

	
	Если глОтладкаУровень()<>0 Тогда
		//РаботаСокнами.ПоказатьПлашку(Источник, _Знач);
	КонецЕсли;

	//Если Не ВводТоваровДоступен() Тогда
	//	Возврат;		
	//КонецЕсли;
	
	Если ЗначениеЗаполнено(глПользователь) Тогда
		// Возможно, это сканированик ШК товара
		ШК = ОбработкаВнешнихСобытий.ПолучитьДанные(Источник, Событие, Данные);
		
		Префикс = Лев(ШК, 2);
		КодТовара = ШК;
		Колво = 0;	
		Шаблон = Справочники.ШаблоныШК.НайтиПоКоду(Префикс);
		
		Если НЕ Шаблон.Пустая() И НЕ Шаблон.ПометкаУдаления И Шаблон.Тип = Справочники.ТипыШаблоновШК.Товар Тогда
			
			ВыбТов = Неопределено;
			Каталог = Неопределено;
			Справочники.ШаблоныШК.ПолучитьКодКоличествоИзШК(Префикс, ШК, КодТовара, Колво, ВыбТов, Каталог, глПараметрыРМ.Станция);
			Если ВыбТов = Неопределено Тогда
				ВыбТов = ИнтерфейсРМ.НайтиТоварПоКоду(КодТовара);
			КонецЕсли;
			
		Иначе	
			
			ВыбТов = ИнтерфейсРМ.НайтиТоварПоШтрихКоду(ШК,Колво);
			
		КонецЕсли;	
		
		Если НЕ ЗначениеЗаполнено(ВыбТов) Тогда
			// ничего				
		ИначеЕсли ТипЗнч(ВыбТов) = Тип("Массив") Тогда
			ВыбТов = ВыбратьТоварИзСписка(ВыбТов);
		ИначеЕсли ВыбТов.ЭтоГруппа Тогда
			МассивТоваров = Новый Массив;
			МассивТоваров.Добавить(ВыбТов);
			ВыбТов = ВыбратьТоварИзСписка(МассивТоваров);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбТов) Тогда
			ВводНовойСтроки(ВыбТов,Колво, ШК);
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	
	Если ТипЗнч(_Знач) = Тип("Строка") Тогда
		Если НЕ ЗначениеЗаполнено(глПользователь) Тогда
			// если система заблокирована, то возможна только авторизация сотрудника
			ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Иначе
			ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.Клиенты");
		КонецЕсли;
		
		ФлагПовтора = Ложь;
		
		_КартаДоступаКлиента = Неопределено;
		_Объект = ИнтерфейсРМ.ИдентификацияПоКарте("Идентификатор_"+_Знач, ТипПривязки, ФлагПовтора, _КартаДоступаКлиента, Истина);
		
		Если ЗначениеЗаполнено(_КартаДоступаКлиента) Тогда
			_Объект = Новый Структура("Тип,",Справочники.ТипыШаблоновШК.КартаДоступа);	
			
		КонецЕсли;
		
		Если ТипЗнч(_Объект) = Тип("Структура") Тогда
			
			Если _Объект.Тип = Справочники.ТипыШаблоновШК.КартаЛояльности Тогда
				Если ТекущийРежим <> "ВОЗВРАТ" Тогда
					НКЛ = _Объект.Значение;
					НКЛ = СтрЗаменить(НКЛ, ";","");
					НКЛ = СтрЗаменить(НКЛ, "?","");
					
					ПроинициализироватьЗаказЕслиНеПроинициализирован();
					РезультатПроверки = ЛояльностьКлиентСервер.ИзменитьКартуЛояльностиПоЗаказу(Заказ, НКЛ);
					Если РезультатПроверки.Ошибка Тогда
						ИнтерфейсРМ.ВопросПредупреждение("КеГеЛьБУМ","КеГеЛьБУМ",РезультатПроверки.ТекстОшибки,"","ОК","",,,10);					
					КонецЕсли;
					ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
					Лояльность.ОбновитьПредварительныйРасчетЗаказа(Заказ.Ссылка, глПараметрыРМ.Тест);
					ЗаполнитьНадписиЛояльности();				
					
					ТекущийДокумент.ТипЧекаЛояльность = 0;
				КонецЕсли;
			ИначеЕсли _Объект.Тип = Справочники.ТипыШаблоновШК.Купон Тогда
				ПроинициализироватьЗаказЕслиНеПроинициализирован();
				Если ТекущийРежим = "ПРОДАЖА" Тогда
					ЛояльностьКлиент.ПеренестиКупонВЗаказ(Заказ, _Объект.Значение);
					ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
					ЗаполнитьНадписиЛояльности();
					Если глОтладкаУровень()<>0 Тогда
						РаботаСокнами.ПоказатьПлашку("Добавлен купон", _Знач);
					КонецЕсли;

				КонецЕсли; 
			ИначеЕсли ЗначениеЗаполнено(_КартаДоступаКлиента) Тогда
				ЗаказСсылка = ксТрактир.ЗаказПоКартеДоступа(_КартаДоступаКлиента);				
				
				//:ЗаказСсылка = Документы.Заказ.ПустаяСсылка();
				
				Если ЗначениеЗаполнено(ЗаказСсылка) Тогда
					ОткрытьЗаказ(ЗаказСсылка);
				КонецЕсли;
				
			Иначе
				Текст1="Код не найден!";
				Текст2="Код """+КодТовара+""" не найден в справочнике!
				|Попробуйте повторить ввод кода....";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");			
				ЗарегистрироватьСобытие("Неопознанный штрихкод", УровеньЖурналаРегистрации.Ошибка, , , ""+ШК);
				Возврат;
			КонецЕсли;
		ИначеЕсли НЕ ЗначениеЗаполнено(_Объект) Тогда
			Если МастерТестирования = Неопределено Тогда
				Текст1="Код не найден!";
				Текст2="Неопознанный штрихкод товара";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");			
				Если ТекущийДокумент = Неопределено Тогда
					СсылкаДок = Неопределено;
				Иначе
					СсылкаДок = ТекущийДокумент.Ссылка;
				КонецЕсли;
				ЗарегистрироватьСобытие("Неопознанный штрихкод", УровеньЖурналаРегистрации.Ошибка, , СсылкаДок, ШК);
				Возврат;
			КонецЕсли;
		Иначе
			Сообщить(Строка(_Объект) + " " + ТипЗнч(_Объект));
		КонецЕсли;
	ИначеЕсли ТипЗнч(_Знач) = Тип("ДокументСсылка.Заказ") Тогда
		ОткрытьЗаказ(_Знач);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ОтладкаУровень() Тогда
		//:РаботаСокнами = Обработки.РаботаСокнами.Создать();
		//РаботаСокнами.ПоказатьПлашку(":-|", _Знач);
	КонецЕсли;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Авторизация сотрудников в системе
// ФлагПоКнопке - признак того, что авторизация происходит по кнопке
//
Функция Авторизация(ФлагПоКнопке=Ложь) Экспорт
	ИнтерфейсРМ.ВыводНаИнфоДисплей("УбратьЗаказ");
	Авторизация = ИнтерфейсРМ.ПолучитьОбъектОбработки("Авторизация").ПолучитьФорму( "Форма" + глПараметрыРМ.ИнтерфейсТип );
	Если Авторизация.Открыта() Тогда
		Возврат Ложь;
	КонецЕсли;
	
 	Если ФлагПоКнопке ИЛИ НЕ ЗначениеЗаполнено(глПользователь) Тогда
		ИнтерфейсРМ.СменаПользователя();
		ГлавнаяФорма.ОбновитьВремя();
		ГлавнаяФорма.ОбновитьОстальное();
		РаботаСокнами.УдалитьПлашку(5);
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(глПользователь) Тогда
		Авторизация();
		Возврат ЗначениеЗаполнено(глПользователь);
	Иначе
		ГлавнаяФорма.ОбновитьВремя();
		ГлавнаяФорма.ОбновитьОстальное();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(глПараметрыРМ.НомерСмены) Тогда
		СменаКассы = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИнтерфейсРМ.ТекущаяСмена()) Тогда
		Если ВыходОС <> Истина Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Смена не открыта", "Необходимо открыть смену","","ОК","");
			ОткрытьМенюОпераций();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Заказ.Ссылка) И Не ВыходОС Тогда
		СброситьТекущийДокумент(Ложь);
	КонецЕсли;
	Возврат ЗначениеЗаполнено(глПользователь);
КонецФункции

// Заблокировать систему
//
Процедура Заблокировать(ЗапроситьАвторизациюГостя = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(глПользователь) Тогда
		ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.АвторизацияБлокировка, глПользователь);
		глПользователь = Справочники.Сотрудники.ПустаяСсылка();
		ГлавнаяФорма.ОбновитьВремя();
		ГлавнаяФорма.ОбновитьОстальное();
	КонецЕсли; 
	ИнтерфейсРМ.ВыводНаИнфоДисплей("УбратьЗаказ", Заказ.Ссылка, Неопределено, Неопределено, Неопределено);
	глФлагБлокировка = Ложь;
	Авторизация();
	Если Не ЗначениеЗаполнено(Заказ.Ссылка) Тогда
		СброситьТекущийДокумент(ЗапроситьАвторизациюГостя);
	КонецЕсли;
	ВводТоваровДоступен();
КонецПроцедуры

// Создает новый заказ по кнопке или путем считывания карты доступа
//
Процедура СоздатьНовыйЗаказ(КартаДоступа, СпособРегистрацииБейджа = 0) Экспорт
	//:КартаДоступа = Справочники.КартыДоступа.ПустаяСсылка();
	Если ЗначениеЗаполнено(КартаДоступа) Тогда
		Если КартаДоступа.ИнформационнаяБаза <> ПараметрыСеанса.ТекущаяИБ И глПараметрыРМ.ИнформационнаяБаза <> КартаДоступа.ИнформационнаяБаза Тогда
			Текст1 = "Карта доступа принадлежит другой ТТ";
			Текст2 = "Используйте другую карту";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Заказ = Документы.Заказ.СоздатьДокумент();	
	Заказ.КартаДоступа = КартаДоступа;
	Заказ.СпособРегистрацииБейджа = СпособРегистрацииБейджа;
	Заказ.Дата = ТекущаяДатаНаСервере();
	Заказ.Автор = глПользователь;
	Заказ.МестоРеализации = глПараметрыРМ.МестоРеализации;
	Заказ.РабочееМесто = глРабочееМесто;
	Заказ.Смена = ИнтерфейсРМ.ТекущаяСмена();
	Заказ.ККМрабочегоМеста = глПараметрыРМ.ККМ;
	Заказ.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
	Заказ.УстановитьНовыйНомер("000");
	Заказ.Записать();
	
		
	
	фВводТоваровДоступен = Истина;
	ТекущийРежим = "ПРОДАЖА";
	ТекущийДокумент = Заказ;
	ГлавнаяФорма.тпТовары.Строки.Очистить();
	АвторизацияГостя();
	ПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка();
	ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Открыт);
	ГлавнаяФорма.ОбновитьНадписьИтого();
	ГлавнаяФорма.ОбновитьОстальное();
	
	ДопПараметрыИнфо.СуммаПоСтанцииНач = СуммаРеализации();
	ДопПараметрыИнфо.СброситьНастройки = Ложь;
	
	ПоказатьЗаказНаМонитореГостя();
	ЗаполнитьНадписиЛояльности();	
КонецПроцедуры

Функция ПоказатьЗаказНаМонитореГостя_ОбработчикОжидания() Экспорт
	Если фВыборСпецифик Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущийДокумент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	ТипКолво = ПолучитьОписаниеТиповЧисла(10,3);
	ТипСумма = ПолучитьОписаниеТиповЧисла(12,2);
	
	Попытка
		НомерСтроки = ГлавнаяФорма.ЭлементыФормы.тпТовары.ТекущаяСтрока.НомерСтроки;
	Исключение
		НомерСтроки = Заказ.Товары.Количество();	
	КонецПопытки;
	ДопПараметрыИнфо.НомерСтрокиЗаказа = НомерСтроки;
	ДопПараметрыИнфо.СуммаПоСтанцииНач = СуммаРеализации();
	ДопПараметрыИнфо.СброситьНастройки = Ложь;
	ДопПараметрыИнфо.ЛояльностьДанныеЗаказа = ЛояльностьДанныеЗаказа;
	
	ТаблицаЗаказа = Новый ДеревоЗначений;
	ТаблицаЗаказа.Колонки.Добавить("Ном"			, , "№", 5 );	// только для отображения номера строки
	  
	//ТаблицаЗаказа.Колонки.Добавить("Статус"			, , " ", 3 );
	
	// Новая колонка "Станция" - будет отображаться
	ТаблицаЗаказа.Колонки.Добавить("Станция"		,Новый ОписаниеТипов("СправочникСсылка.Станции"), "Станция", 15);
	ТаблицаЗаказа.Колонки.Добавить("Фирма"			,Новый ОписаниеТипов("СправочникСсылка.Фирмы"), "ФИрма", 15);
	
	// *** Колонка "Статус" хранит статус строки заказа; 
	// *** По умолчанию в табличном поле в этой колонке выводится курс подачи или флажок статуса
	//
	//ТаблицаЗаказа.Колонки.Добавить("Статус"			, , "Марка", 5 ); 	// будем выводить № марки - уже не нужно
	ТаблицаЗаказа.Колонки.Добавить("Статус"			, , " ", 5 ); 			// будем выводить курс для всех статусов; вместо флажков - цвет фона
	ТаблицаЗаказа.Колонки.Добавить("СтатусОплаты"			, , " ", 5 ); 			// будем выводить курс для всех статусов; вместо флажков - цвет фона
	
	// Новая колонка "СтрокаТаблицыЗаказа" - служебная, скрытая.
	// Заполняется только в таблице ТаблицаЗаказаОтбор; в ТаблицаЗаказа она не заполняется.
	// Используется для хранения ссылки на соответствующую строку таблицы ТаблицаЗаказа. 
	ТаблицаЗаказа.Колонки.Добавить("СтрокаТаблицыЗаказа");
	
	ТаблицаЗаказа.Колонки.Добавить("НомерМарки");
	
	ТаблицаЗаказа.Колонки.Добавить("ПолеСортировки");				// используется только в процедуре упаковки для сортировки строк
	ТаблицаЗаказа.Колонки.Добавить("АвтоПозиция"	,Новый ОписаниеТипов("Булево") );
	ТаблицаЗаказа.Колонки.Добавить("Товар");
	ТаблицаЗаказа.Колонки.Добавить("Номенклатура");
	ТаблицаЗаказа.Колонки.Добавить("Наименование"	,ПолучитьОписаниеТиповСтроки(), , 30 );
	ТаблицаЗаказа.Колонки.Добавить("Количество"		,ТипКолво, "Кол."	, 8 );
	ТаблицаЗаказа.Колонки.Добавить("Удалено"		,ТипКолво, "Удал."	, 5 );
	ТаблицаЗаказа.Колонки.Добавить("УдаленоСейчас"	,ТипКолво);
	ТаблицаЗаказа.Колонки.Добавить("ТипЦен");
	ТаблицаЗаказа.Колонки.Добавить("Цена"			,ТипСумма, "Цена"	, 10 );
	ТаблицаЗаказа.Колонки.Добавить("Сумма"			,ТипСумма, "Сумма"	, 10 );
	ТаблицаЗаказа.Колонки.Добавить("СуммаСкидки"	,ТипСумма);
	ТаблицаЗаказа.Колонки.Добавить("ЦенаРеализации"	,ТипСумма, "Цена"	, 10 );
	ТаблицаЗаказа.Колонки.Добавить("СуммаРеализации",ТипСумма, "Сумма"	, 10 );
	ТаблицаЗаказа.Колонки.Добавить("КГЛ");
	ТаблицаЗаказа.Колонки.Добавить("ГруппаАкции");
	ТаблицаЗаказа.Колонки.Добавить("Категория");
	ТаблицаЗаказа.Колонки.Добавить("ГруппаПечати");
	ТаблицаЗаказа.Колонки.Добавить("Автор");
	ТаблицаЗаказа.Колонки.Добавить("Подача");
	ТаблицаЗаказа.Колонки.Добавить("Подарок"		,Новый ОписаниеТипов("СправочникСсылка.Скидки") );
	ТаблицаЗаказа.Колонки.Добавить("ИдСтроки");
	ТаблицаЗаказа.Колонки.Добавить("Источник");
	ТаблицаЗаказа.Колонки.Добавить("КодПодтверждения");
	ТаблицаЗаказа.Колонки.Добавить("СтатусДопИнф");
	//Z+
	ТаблицаЗаказа.Колонки.Добавить("Порядок");
	ТаблицаЗаказа.Колонки.Добавить("ПорядокСпецифики");
	
	Для Каждого стТовары Из Заказ.Товары Цикл
		НовСтр = ТаблицаЗаказа.Строки.Добавить();
		НовСтр.Наименование = СокрЛП(Строка(стТовары.Товар));
		ЗаполнитьЗначенияСвойств(НовСтр, стТовары);
		Если ТипЗнч(ЛояльностьДанныеЗаказа) = Тип ("Структура") Тогда
			Для Каждого Т Из ЛояльностьДанныеЗаказа.СоставЗаказа Цикл // TODO переделать
				Если Т.ИдСтроки = стТовары.ИдСтроки Тогда
					НовСтр.КГЛ = (Формат(Т.КГЛНачислено,"ЧН=' '"));
					НовСтр.ГруппаАкции = Т.ГруппаАкции;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;	
	
	ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ.Ссылка, ТаблицаЗаказа, Неопределено, ДопПараметрыИнфо);
КонецФункции

Функция ПоказатьЗаказНаМонитореГостя(Задержка = 0.5) Экспорт
	ГлавнаяФорма.ОтключитьОбработчикОжидания("ПоказатьЗаказНаМонитореГостя_ОбработчикОжидания");	
	ГлавнаяФорма.ПодключитьОбработчикОжидания("ПоказатьЗаказНаМонитореГостя_ОбработчикОжидания",Задержка,Истина);	
КонецФункции

Функция СуммаРеализации() Экспорт
	Товары = Заказ.Товары;
	СуммаРеализации = 0;
	Для Каждого Т Из Товары Цикл
		Если Т.СтатусОплаты=-1 И глПараметрыРМ.Фирма = Т.Фирма Тогда
			СуммаРеализации = СуммаРеализации + Т.СуммаРеализации;
		КонецЕсли;
	КонецЦикла;
	Возврат СуммаРеализации;
КонецФункции


// Открытие списка  открытых заказов
//
Процедура ОткрытьСписокЗаказов() Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	
	
	ЖурналЗаказов = ИнтерфейсРМ.ПолучитьОбъектОбработки("ЖурналЗаказов").ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип);
	ЖурналЗаказов.Открыть();
	
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

// Открытие режима администратора
//
Процедура ОткрытьРежимАдминистратора() Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
	КонецЕсли;
	
	
	
	РежимАдминистратора = ИнтерфейсРМ.ПолучитьОбъектОбработки("РежимАдминистратора").ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип);
	РежимАдминистратора.Открыть();
	
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

// Открытие режима администратора
//
Процедура ОткрытьСтопЛист() Экспорт
	
	Если НЕ Авторизация() Тогда
		Возврат;
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли;
		
	ВыполнитьДействияПриВозврате = Истина;
	
КонецПроцедуры

  
Процедура ВыдатьКартуЛояльности() Экспорт

	Если НЕ Авторизация() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ВводКлиента", Истина) Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	
	
	ОбработкаВвод = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводКлиента");
	ОбработкаВвод.ВводНового = Истина;
	ОбработкаВвод.ПолучитьФорму().Открыть();
	
	глОтсечкаПростоя();
	
	ВыполнитьДействияПриВозврате = Истина;

КонецПроцедуры // КС_ВДВ > -------------------------------------------------------------------- 

  
Процедура ЗаменаКартыЛояльности() Экспорт

	Если НЕ Авторизация() Тогда
		Возврат;
	КонецЕсли;
	                
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("ЗаменаКартыКеГеЛьБУМ", Истина) Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	
	
	ОбработкаВвод = ИнтерфейсРМ.ПолучитьОбъектОбработки("ЗаменаКартыКеГеЛьБУМ");
	ФормаОткрыта = ОбработкаВвод.ОткрытьФормуЗаменыКарты();
	
	Если НЕ ФормаОткрыта Тогда
		ДействияПриВозвратеВФорму();
		Возврат;
	КонецЕсли; 
	
	глОтсечкаПростоя();
	
	ВыполнитьДействияПриВозврате = Истина;

КонецПроцедуры // КС_ВДВ > -------------------------------------------------------------------- 

  
Процедура ОткрытьМониторЗаказов() Экспорт 

	Если НЕ Авторизация() Тогда
		Возврат;
	ИначеЕсли НЕ ИнтерфейсРМ.ПроверкаПользователяСмены() Тогда
		ДействияПриВозвратеВФорму();
		Возврат;	
	КонецЕсли; 
	
	
	
	МониторМарок = ИнтерфейсРМ.ПолучитьОбъектОбработки("МониторМарок").ПолучитьФорму();
	Если МониторМарок.ПараметрыНастройки = Неопределено Тогда
		
		Если глПараметрыРМ.НастройкиМонитораМарокСписок.Количество() = 0 Тогда
		    Текст1 = "Монитор марок";
			Текст2 = "Не указана настройка монитора марок"+Символы.ПС+""""+глРабочееМесто.Наименование+"""";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли; 
		
		НастройкиОбъект = глПараметрыРМ.НастройкиМонитораМарокСписок[0].Значение.ПолучитьОбъект();
		Если НастройкиОбъект = Неопределено Тогда
			Текст1 = "Монитор марок";
			Текст2 = "Ошибка в настройках монитора марок"+Символы.ПС+""""+глРабочееМесто.Наименование+"""";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли;	
		
		МониторМарок.ПараметрыНастройки = НастройкиОбъект.ПолучитьСтруктуруПараметров();
	КонецЕсли;
	МониторМарок.Открыть();
	
	глОтсечкаПростоя();
	
	ВыполнитьДействияПриВозврате = Истина;

КонецПроцедуры 
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

// Блокировка или вывод плана зала при возврате из других форм
//
Процедура ДействияПриВозвратеВФорму() Экспорт
	
	Если Не ВводТоваровДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	Если глФлагБлокировка ИЛИ глПараметрыРМ.БлокировкаПриВозврате Тогда
		Заблокировать();
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(глПараметрыРМ.НомерСмены) Тогда
		СменаКассы = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(глПараметрыРМ.НомерСмены) Тогда
	//	Если ВыходОС <> Истина Тогда
	//		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Смена не открыта", "Необходимо открыть смену","","ОК","");
	//		ОткрытьМенюОпераций();
	//	КонецЕсли;
	//КонецЕсли;
	ВыполнитьДействияПриВозврате = Ложь;
	ИнтерфейсРМ.ВыводНаДП("Ожидание");
	
КонецПроцедуры

// Формирование массива подключаемого на РМ торгового оборудования 
//
Функция ПолучитьМассивПодключаемогоТО()
	
	МассивТО = Новый Массив;
	
	Если глПараметрыРМ.ДПЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.ДП);
	КонецЕсли;
	
	Если глПараметрыРМ.ИнфоДисплейЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.ИнфоДисплей);
	КонецЕсли;
	
	Если глПараметрыРМ.ВесыЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.Весы);
	КонецЕсли;
	
	ЕстьСчитыватель = Ложь;
	Для каждого ТО Из глПараметрыРМ.СписокСУ Цикл
		МассивТО.Добавить(ТО.Значение);
		Если Найти("РидерМК,Проксимити,ПроксимитиPERCo", ТО.Значение.КодМодели) Тогда
			ЕстьСчитыватель = Истина;
		КонецЕсли; 
	КонецЦикла;
	глПараметрыРМ.Вставить("ЕстьСчитыватель", ЕстьСчитыватель);
	
	Если глПараметрыРМ.СпецКВЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.СпецКВ);
	КонецЕсли;
	
	Если глВерсия=3 Тогда
		Для каждого ТО Из глПараметрыРМ.СписокКЭП Цикл
			МассивТО.Добавить(ТО.Значение);
		КонецЦикла;
		
		Если глПараметрыРМ.РегистрацияСобытийВидеоЕсть Тогда
			МассивТО.Добавить(глПараметрыРМ.РегистрацияСобытийВидеонаблюдение);
		КонецЕсли; 
	КонецЕсли; 
	
	// ККМ и Принтеры не занимают порты постоянно, поэтому для корректной проверки подключаем их после сканеров
	// и прочих дисплеев, которые захватывают порт на все время работы
	Если глПараметрыРМ.ККМЕсть Тогда
		МассивТО.Добавить(глПараметрыРМ.ККМ);
	КонецЕсли;
	
	Если глПараметрыРМ.ККМЕстьДоп Тогда
		Для каждого ТО Из глПараметрыРМ.ККМСписокДоп Цикл
			МассивТО.Добавить(ТО.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого СтрокаГП Из глПараметрыРМ.ГруппыПечати.Строки Цикл
		Если НЕ СтрокаГП.ПроверкаСвязи Тогда
			Продолжить;
		КонецЕсли; 
		
		Если ЗначениеЗаполнено(СтрокаГП.Принтер) Тогда
			Принтер = СтрокаГП.Принтер;
		Иначе
			Попытка
				Принтер = СтрокаГП.Группа.Оборудование[0].Принтер;
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЕсли; 
		
		МассивТО.Добавить(Принтер);
	КонецЦикла;
	
	Если глПараметрыРМ.ПечатьСчета Тогда
		МассивТО.Добавить(глПараметрыРМ.ПечатьСчетаПринтер);
	КонецЕсли; 
	
	Возврат МассивТО;
КонецФункции

// Установка размера главного окна 1С и признака "Поверх всех"
//
Процедура УстановкаОкна1С() Экспорт
	
	Окно1С = 0;
	 
	Если глПараметрыРМ.БлокировкаПереднийПлан Тогда
		//РаботаСокнами.OnTop( Окно1С, 1 );		// установтить окно поверх всех окон flag = 0/1
	КонецЕсли; 
	
	Если глПараметрыРМ.ИнтерфейсРазмерОкна = -1 Тогда
		// обычное окно
		глПараметрыРМ.Вставить("ИмяСтиля", "РабочееМесто_CallЦентр");
		
		// Заполнить параметры для экранной клавиатуры
		глПараметрыРМ.Вставить("ШиринаОкна1С", 1024 );
		глПараметрыРМ.Вставить("ВысотаОкна1С", 768 );
		
		Возврат;
	КонецЕсли; 
		
	глПараметрыРМ.Вставить("Окно1С", Окно1С );
	
	Если глПараметрыРМ.ИнтерфейсРазмерОкна = 0 Тогда
		// во весь экран
		Ширина = 0;
		Высота = 0;
		РаботаСокнами.GetWndSize( Окно1С, Ширина, Высота );	// получить ширину и высоту окна
		Если Не РежимТестирования Тогда
			РаботаСокнами.FullScreen( Окно1С );
			Если Не РежимТестирования Тогда
				РаботаСокнами.СкрытьПенельЗадач();
			КонецЕсли;
		КонецЕсли;
		// здесь реальные размеры окна
		глПараметрыРМ.Вставить("ШиринаОкна1С", Ширина );
		глПараметрыРМ.Вставить("ВысотаОкна1С", Высота );
		
		Если Ширина=0 ИЛИ Ширина>=1024 Тогда	// будет использоваться стиль для 1024х768
			Ширина = 1024;
			Высота = 768;
		ИначеЕсли Ширина>=800 Тогда	// будет использоваться стиль для 800х600
			Ширина = 800;
			Высота = 600;
		КонецЕсли;
		
	Иначе
		// конкретный размер
				
		Если глПараметрыРМ.ИнтерфейсТип = 0 Тогда
			Если глПараметрыРМ.ИнтерфейсРазмерОкна = 1 Тогда
				Ширина = 640;
				Высота = 480;
			ИначеЕсли глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
				Ширина = 800;
				Высота = 600;
				
			ИначеЕсли глПараметрыРМ.ИнтерфейсРазмерОкна = 3 Тогда
				Ширина = 1024;
				Высота = 768;
			Иначе
				Ширина = 800;
				Высота = 600;
			КонецЕсли;
			
		ИначеЕсли глПараметрыРМ.ИнтерфейсТип = 1 Тогда
			Если глПараметрыРМ.ИнтерфейсРазмерОкна = 1 Тогда
				Ширина = 240;
				Высота = 260;	// на 60 меньше чтобы не перекрывать панели
			ИначеЕсли глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
				Ширина = 480;
				Высота = 580;
			Иначе
				Ширина = 480;
				Высота = 580;
			КонецЕсли;
			
		ИначеЕсли глПараметрыРМ.ИнтерфейсТип >= 8 Тогда
			
			Если глПараметрыРМ.ИнтерфейсРазмерОкна = 2 Тогда
				Ширина = 800;
				Высота = 600;
				Если Не РежимТестирования Тогда
					РаботаСокнами.СкрытьПенельЗадач();
				КонецЕсли;
				
				РаботаСокнами.FullScreen(0)
			КонецЕсли;
			
		КонецЕсли;
		
		РаботаСокнами.УстановитьРазмерОкна( Окно1С, Ширина, Высота );	// установить ширину и высоту окна
		
		// здесь реальные размеры окна
		Если Не РежимТестирования Тогда
			РаботаСокнами.FullScreen( Окно1С );
			РаботаСокнами.СкрытьПенельЗадач();
		КонецЕсли;
		
	КонецЕсли; 
	
	Если глПараметрыРМ.ИнтерфейсТип <> 9 Тогда
		глПараметрыРМ.Вставить("ИмяСтиля", "РабочееМесто_" + ?(глПараметрыРМ.ИнтерфейсТип=1,"КПК", Формат(Ширина,"ЧГ=") +"х"+ Формат(Высота,"ЧГ=") ));
	КонецЕсли;
КонецПроцедуры

// Подключается как обработчик ожидания при выходе из режима тестирования
// Иначе не отрабатывает восстановление панелей инструментов
Процедура ПроцессВыхода() Экспорт
	
	Если РежимТестирования Тогда
		РаботаСокнами.ShowCaption( Окно1С, 1 );	// вернуть заголовок окна 
		РаботаСокнами.Деструктор();
		РаботаСокнами = Неопределено;
		Если ГлавнаяФорма.Открыта() Тогда
			ГлавнаяФорма.Закрыть();
		КонецЕсли;
		
	Иначе
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ГлавнаяФорма_ЗавершитьРаботуСистемы() Экспорт
	
КонецПроцедуры

// Выбор посадочного места на плане зала или считыванием карты доступа
//
Процедура ОбработкаВыбораПосадочногоМеста(ВыбМесто, ФлагПоКарте=Ложь)
	
	Если НЕ ФлагПоКарте И глПараметрыРМ.ЗапретРучногоОткрытияЗаказов И 
		НЕ ИнтерфейсРМ.ПроверкаПраваДоступа(ПланыВидовХарактеристик.ПраваДоступа.ИгнорЗапретВводаПаролей) Тогда
		Текст1="Нет доступа!";
		Текст2="Открытие заказов возможно только с помощью карт доступа!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(ВыбМесто.МестоРеализации) И ВыбМесто.МестоРеализации<>глПараметрыРМ.МестоРеализации Тогда
		Текст1 = "Нет доступа!";
		Текст2 = НаимПосадочногоМеста(ВыбМесто)+" относится к другому месту реализации!
				|Обратитесь к администратору...";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат;
		
	КонецЕсли;
	
	МассивЗаказов = ИнтерфейсРМ.ПолучитьМассивОткрытыхЗаказов( ВыбМесто );
	
	Если МассивЗаказов.Количество()=0 Тогда
	Иначе
		ОткрытьЗаказ( МассивЗаказов[0] );
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы выбранного заказа
//
Процедура ОткрытьЗаказ(ЗаказСсылка) Экспорт
	
	
	ОпределитьТаблицуПодач();
	докВозврат = Неопределено;
	Если ЗначениеЗаполнено(Заказ.Ссылка) Тогда
		Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма,УИДформы);
	КонецЕсли;
	Заказ = ЗаказСсылка.ПолучитьОбъект();
	АвторизацияГостя();
	ТекущийДокумент = Заказ;
	ТекущийРежим = "ПРОДАЖА";
	Если Не ПрочитатьТекущийДокумент(Ложь, Истина) Тогда
		ТекущийДокумент = Неопределено;
		Заказ = Неопределено;
		Возврат;
	КонецЕсли;
	Смена = ИнтерфейсРМ.ТекущаяСмена();	
	Заказ.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
	ТекущийДокумент = Заказ;
	фВводТоваровДоступен = Истина;
	ТекущийРежим = "ПРОДАЖА";
	ГлавнаяФорма.ОбновитьНадписьИтого();	
	ГлавнаяФорма.ОбновитьОстальное();
	ПоказатьЗаказНаМонитореГостя();
	Попытка
		Лояльность.ОбновитьДанныеГостяПоЗаказу(ЗаказСсылка,глПараметрыРМ.Тест);
		Лояльность.ОбновитьПредварительныйРасчетЗаказа(ЗаказСсылка, глПараметрыРМ.Тест);	
	Исключение
	КонецПопытки;
	ЗаполнитьНадписиЛояльности(Истина);
	
	фВводТоваровДоступен = Истина;
	ПротоколРасчетов = НефискализированныйПротоколПоЗаказу();
	Если Не ПротоколРасчетов.Пустая() Тогда
		
		фВводТоваровДоступен = Ложь;
		
	КонецЕсли;
	
	Если ксТрактир.ЭтоРМСтанция() Тогда
		Если ФормаПодбораТоваров = Неопределено Тогда
			//СменаМенюПовара();
		Иначе
			Если Не ФормаПодбораТоваров.Открыта() Тогда
				СменаМенюПовара();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



Процедура АвторизацияГостя() Экспорт
	//Если ПустаяСтрока(Заказ.НомерКартыЛояльности) Тогда //и Заказ.НеСправшиватьКарту
	//	СтруктураЗаказа = Новый Структура;
	//	СтруктураЗаказа.Вставить("НомерКартыЛояльности",Заказ.НомерКартыЛояльности);
	//	ОтветЛояльности = ВводКартыЛояльности();
	//	Если ОтветЛояльности и НЕ ПустаяСтрока(СтруктураЗаказа.НомерКартыЛояльности) Тогда
	//		ПрочитатьТекущийДокумент();
	//		Заказ.НомерКартыЛояльности = СтруктураЗаказа.НомерКартыЛояльности;
	//		ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Открыт);
	//		ЛояльностьКлиент.ОткрытьЗаказ(Заказ);
	//		ЗаполнитьНадписиЛояльности_ОбработчикОжидания();
	//	КонецЕсли;
	//КонецЕсли;	
	ВводКартыЛояльности();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СУП ККМ

Процедура СброситьТекущийДокумент(ЗапроситьАвторизациюГостя = Истина, ПоказатьДиалогВводаБэйджа = Истина) Экспорт
		
	Если ЗначениеЗаполнено(Заказ.Ссылка) Тогда
		Если Не ВыполнитьРегистрациюМарок() Тогда
			Возврат;
		КонецЕсли;
		Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма,УИДформы);
	КонецЕсли;
	
	СкрытьМенюПовара();
	ИнтерфейсРМ.ВыводНаИнфоДисплей("УбратьЗаказ", Заказ.Ссылка, Неопределено, Неопределено, Неопределено);
	ОпределитьТаблицуПодач();
	ТекущийМаксНомерПодачи = 0;
	докВозврат = Неопределено;
	ТекущийДокумент = Неопределено;
	ПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка();
	Заказ = Неопределено;
	ТекущийРежим = "";
	ОчиститьИнтерфейсЛояльности();
	фВводТоваровДоступен = Ложь;
	ГлавнаяФорма.ОбновитьНадписьИтого();
	ГлавнаяФорма.ОбновитьОстальное();
	
	Если ЗапроситьАвторизациюГостя Тогда
		Обработка = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводКартыКлиента");
		Форма = Обработка.ПолучитьФорму("Форма9");
		РезОткрытия = Форма.ОткрытьМодально();
		//КартаДоступа = Форма.ОткрытьМодально();
		РаботаСокнами.УдалитьПлашку(5);
		Если ЗначениеЗаполнено(РезОткрытия) И ТипЗнч(РезОткрытия) = Тип("Структура") Тогда
			КартаДоступа = РезОткрытия.КартаДоступа;
		
			Если ЗначениеЗаполнено(КартаДоступа) Тогда // поищем заказы по карте клиента
				РаботаСокнами.УдалитьПлашку(5);
				ЗаказСсылка = ксТрактир.ЗаказПоКартеДоступа(КартаДоступа);				
				
				//:ЗаказСсылка = Документы.Заказ.ПустаяСсылка();
				
				Если ЗначениеЗаполнено(ЗаказСсылка) Тогда
					ОткрытьЗаказ(ЗаказСсылка);
				Иначе
					СоздатьНовыйЗаказ(КартаДоступа, РезОткрытия.СпособРегистрацииБейджа);	
				КонецЕсли;
				
			Иначе // отказ от ввода карты клиента
				ЗаполнитьНадписиЛояльности();
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//{ ИнициализацияЗаказа
Процедура ИнициализацияЗаказа(ПриОткрытии = Ложь, КартаДоступа = Неопределено) Экспорт
//	докВозврат = Неопределено;
//	ТекущийДокумент = Неопределено;
//	Смена = ИнтерфейсРМ.ТекущаяСмена();
//	Если ЗначениеЗаполнено(Смена) И КартаДоступа = Неопределено Тогда
//		
//		Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗаказДопИнф.Заказ КАК Заказ,
//		|	ЗаказДопИнф.Статус КАК Статус,
//		|	ЗаказДопИнф.Заказ.Заблокирован
//		|		ИЛИ ЕСТЬNULL(ЗаказДопИнф.ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис, ЛОЖЬ) КАК Заблокирован,
//		|	ЗаказДопИнф.ПротоколРасчетов КАК ПротоколРасчетов,
//		|	ЗаказДопИнф.Заказ.Смена КАК ЗаказСмена,
//		|	ЗаказДопИнф.Заказ.НомерЧека КАК НомерЧека,
//		|	ЕСТЬNULL(ЗаказДопИнф.ПротоколРасчетов.Фискализирован, ЛОЖЬ) КАК ПротоколРасчетовФискализирован,
//		|	ЗаказДопИнф.ДатаОткрытия КАК ДатаОткрытия
//		|ПОМЕСТИТЬ Закрытые
//		|ИЗ
//		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
//		|ГДЕ
//		|	ЗаказДопИнф.Статус = &СтатусЗакрыт
//		|	И НЕ ЗаказДопИнф.ПротоколРасчетов.Фискализирован
//		|	И ЗаказДопИнф.Заказ.РабочееМесто = &РабочееМесто
//		|	И ЗаказДопИнф.Заказ.Смена = &Смена
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ЗаказДопИнф.ДатаОткрытия УБЫВ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ ПЕРВЫЕ 1
//		|	ЗаказДопИнф.Заказ КАК Заказ,
//		|	ЗаказДопИнф.Статус КАК Статус,
//		|	ЗаказДопИнф.Заказ.Заблокирован
//		|		ИЛИ ЕСТЬNULL(ЗаказДопИнф.ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис, ЛОЖЬ) КАК Заблокирован,
//		|	ЗаказДопИнф.ПротоколРасчетов КАК ПротоколРасчетов,
//		|	ЗаказДопИнф.Заказ.Смена КАК ЗаказСмена,
//		|	ЗаказДопИнф.Заказ.НомерЧека КАК НомерЧека,
//		|	ЕСТЬNULL(ЗаказДопИнф.ПротоколРасчетов.Фискализирован, ЛОЖЬ) КАК ПротоколРасчетовФискализирован,
//		|	ЗаказДопИнф.ДатаОткрытия КАК ДатаОткрытия
//		|ПОМЕСТИТЬ Открытые
//		|ИЗ
//		|	РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
//		|ГДЕ
//		|	ЗаказДопИнф.Статус = &СтатусОткрыт
//		|	И ЗаказДопИнф.Заказ.РабочееМесто = &РабочееМесто
//		|	И ЗаказДопИнф.Заказ.Смена = &Смена
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ЗаказДопИнф.ДатаОткрытия УБЫВ
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	Закрытые.Заказ КАК Заказ,
//		|	Закрытые.Статус КАК Статус,
//		|	Закрытые.Заблокирован КАК Заблокирован,
//		|	Закрытые.ПротоколРасчетов КАК ПротоколРасчетов,
//		|	Закрытые.ЗаказСмена КАК ЗаказСмена,
//		|	Закрытые.НомерЧека КАК НомерЧека,
//		|	Закрытые.ПротоколРасчетовФискализирован КАК ПротоколРасчетовФискализирован,
//		|	Закрытые.ДатаОткрытия КАК ДатаОткрытия
//		|ИЗ
//		|	Закрытые КАК Закрытые
//		|
//		|ОБЪЕДИНИТЬ ВСЕ
//		|
//		|ВЫБРАТЬ ПЕРВЫЕ 1
//		|	Открытые.Заказ,
//		|	Открытые.Статус,
//		|	Открытые.Заблокирован,
//		|	Открытые.ПротоколРасчетов,
//		|	Открытые.ЗаказСмена,
//		|	Открытые.НомерЧека,
//		|	Открытые.ПротоколРасчетовФискализирован,
//		|	Открытые.ДатаОткрытия
//		|ИЗ
//		|	Открытые КАК Открытые
//		|
//		|УПОРЯДОЧИТЬ ПО
//		|	ДатаОткрытия УБЫВ");
//		Запрос.УстановитьПараметр("СтатусОткрыт", Перечисления.СтатусыЗаказа.Открыт);
//		Запрос.УстановитьПараметр("СтатусЗакрыт", Перечисления.СтатусыЗаказа.Закрыт);
//		Запрос.УстановитьПараметр("РабочееМесто", глРабочееМесто);
//		Запрос.УстановитьПараметр("Смена", Смена);
//		Рез = Запрос.Выполнить();
//		РезПустой = Рез.Пустой();
//	Иначе
//		РезПустой = Истина;
//	КонецЕсли;
//	ПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка();
//	ДатаОткрытия = ТекущаяДатаНаСервере();
//	Если РезПустой Тогда
//		ИнициализацияВозврата();
//		Если Не докВозврат.ЭтоНовый() Тогда
//			ТекущийРежим = "ВОЗВРАТ";
//			Возврат;
//		КонецЕсли;
//		Заказ = Документы.Заказ.СоздатьДокумент();
//		
//		Заказ.КартаДоступа = КартаДоступа;
//		Заказ.Дата = ТекущаяДатаНаСервере();
//		Заказ.Автор = глПользователь;
//		Заказ.МестоРеализации = глПараметрыРМ.МестоРеализации;
//		Заказ.РабочееМесто = глРабочееМесто;
//		Заказ.Смена = ИнтерфейсРМ.ТекущаяСмена();
//		Заказ.ККМрабочегоМеста = глПараметрыРМ.ККМ;
//		Заказ.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
//		Заказ.УстановитьНовыйНомер("000");
//		фВводТоваровДоступен = Истина;
//		
//	Иначе
//		ДанныеЗаказа = Рез.Выгрузить()[0];
//		Заказ = ДанныеЗаказа.Заказ.ПолучитьОбъект();
//		Заказ.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
//		ТекущийДокумент = Заказ;
//		Если ЗначениеЗаполнено(ДанныеЗаказа.ПротоколРасчетов) Тогда
//			ПротоколРасчетов = ДанныеЗаказа.ПротоколРасчетов;
//		Иначе
//			ПротоколРасчетов = ПоследнийПротокол();
//		КонецЕсли; 
//		
//		//:ПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка();
//		Если ДанныеЗаказа.Статус = Перечисления.СтатусыЗаказа.Закрыт Или ДанныеЗаказа.Заблокирован Или ПротоколРасчетов.Фискализирован = Истина Тогда
//			фВводТоваровДоступен = Ложь;
//		Иначе
//			фВводТоваровДоступен = Истина;
//			Если Не ПротоколРасчетов.Пустая() Тогда
//				Если ПротоколРасчетов.Протокол.Итог("СуммаФакт") Тогда 
//					фВводТоваровДоступен = Ложь;
//				ИначеЕсли ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) И Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
//					фВводТоваровДоступен = Ложь;
//				КонецЕсли;
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//		глПараметрыРМ.Вставить("НомерТекущегоЧека", ДанныеЗаказа.НомерЧека);
//		
//		Если ПриОткрытии Тогда
//			ТекущийДокумент = Заказ;
//			Если ПроверитьЗаказНаВылетВоВремяФискализации() Тогда
//				Возврат;
//			КонецЕсли;
//		КонецЕсли;
//	КонецЕсли;
//	ТекущийРежим = "ПРОДАЖА";
//	ТекущийДокумент = Заказ;
//	ГлавнаяФорма.ОбновитьНадписьИтого();
//	ГлавнаяФорма.ОбновитьОстальное();
КонецПроцедуры 
//}

Функция ПроверитьЗаказНаВылетВоВремяФискализации()
	//:Заказ = Документы.Заказ.СоздатьДокумент();
	//:ПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка();
	Если Не Заказ.НомерЧека Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПротоколРасчетов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОткрытьЧек();
	НомерТекущегоЧека = 0; НомерТекущейСмены = 0;
	Если Не глПараметрыРМ.Свойство("НомерТекущегоЧека", НомерТекущегоЧека) Тогда НомерТекущегоЧека = 0 КонецЕсли;
	Если Не глПараметрыРМ.Свойство("НомерСмены", НомерТекущейСмены) Тогда НомерТекущейСмены = 0 КонецЕсли;
	
	Если Заказ.НомерЧека < НомерТекущегоЧека и Заказ.НомерСмены = НомерТекущейСмены Тогда
		//{ Получим сумму выручки от ФН
		ККМ=глПараметрыРМ.ККМ.ПолучитьОбъект();
		Обработка_ККМ=Обработка_ККМ;
		ИнициализацияТО(ККМ, Обработка_ККМ,глПараметрыРМ);
		Параметры = Новый Структура;
		ПараметрыВыходные = Новый Структура;
		Попытка
			Обработка_ККМ.ВыполнитьКоманду("Выручка", Параметры, ПараметрыВыходные);
			СуммаВыручка = Число(ПараметрыВыходные.СуммаВыручка);
		Исключение
			ЗарегистрироватьСобытие("Заказ.Ошибка при получении суммы выручки от ФН", УровеньЖурналаРегистрации.Ошибка,,Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат Ложь;
		КонецПопытки;
		//}
		РасчетнаяВыручкаЗаКассовуюСмену = РасчетнаяВыручкаЗаКассовуюСмену();
		обПротокол = ПротоколРасчетов.ПолучитьОбъект();
		Если обПротокол.Протокол.Итог("СуммаФакт") И обПротокол.Проведен Тогда
			РасчетнаяВыручкаЗаКассовуюСмену = РасчетнаяВыручкаЗаКассовуюСмену - обПротокол.Протокол.Итог("СуммаФакт");
		КонецЕсли;
		РазницаВыручек = СуммаВыручка - РасчетнаяВыручкаЗаКассовуюСмену; РазницаВыручек = Sqrt(Pow(РазницаВыручек,2));
		Если РазницаВыручек <= 0.1 Тогда
			ЗарегистрироватьСобытие("Заказ.Автоматическое закрытие после вылета во время фискализации не произведено", УровеньЖурналаРегистрации.Примечание,, Заказ.Ссылка, "РазницаВыручек = " + РазницаВыручек);			
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		обПротокол = ПротоколРасчетов.ПолучитьОбъект();
		
		//{ Проверим, была ли оплата по безналу
		СтрокаБезнал = обПротокол.Протокол.Найти(Справочники.ВариантыОплаты.Карта);
		Если СтрокаБезнал <> Неопределено Тогда
			Если Не СтрокаБезнал.СуммаФакт Тогда
				ИнтерфейсРМ.ВопросПредупреждение("Итоги по банку", "Сверка итогов", "Сейчас произойдет автоматическая сверка по сбербанку", "", "ОК", "");
				ОтчетыККМ = Обработки.ОтчетыККМ.Создать();
				СуммаПоБанку = ВыручкаПоБанкуЗаСмену();
				СуммаПоБанку = СуммаПоБанку + СтрокаБезнал.Сумма;
				Если ОтчетыККМ.СуммаПоБНТекущая(СуммаПоБанку) Тогда
					ЗарегистрироватьСобытие("Заказ.Автоматическое закрытие после вылета во время фискализации", УровеньЖурналаРегистрации.Примечание,, Заказ.Ссылка);			
					обПротокол.Протокол.ЗагрузитьКолонку(обПротокол.Протокол.ВыгрузитьКолонку("Сумма"), "СуммаФакт");	
					обПротокол.ИтогСуммаФакт = обПротокол.Протокол.Итог("СуммаФакт");
					обПротокол.Записать(РежимЗаписиДокумента.Проведение);
					ТекущийДокумент.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
					ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Закрыт);
					ИнициализацияЗаказа();
					Возврат Истина;
				Иначе
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		//}
	КонецЕсли;
	обПротокол = ПротоколРасчетов.ПолучитьОбъект();	
	ЗарегистрироватьСобытие("Заказ.Автоматическое закрытие после вылета во время фискализации", УровеньЖурналаРегистрации.Примечание,, Заказ.Ссылка);			
	обПротокол.Протокол.ЗагрузитьКолонку(обПротокол.Протокол.ВыгрузитьКолонку("Сумма"), "СуммаФакт");
	обПротокол.Фискализирован = Истина;
	обПротокол.ИтогСуммаФакт = обПротокол.Протокол.Итог("СуммаФакт");
	обПротокол.ОтветФН = обПротокол.ОтветФН + Символы.ПС + "Автоматически закрыт после вылета во время фискализации";
	обПротокол.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Закрыт);
	Лояльность.ЗаписатьВСПУЛ(Заказ.Ссылка);		
	
	ИнициализацияЗаказа();
	Возврат Истина;

КонецФункции

Функция РасчетнаяВыручкаЗаКассовуюСмену()
	ТЗ = Обработки.ФормированиеОтчетовФО.ТаблицаОперативнойРеализации(ИнтерфейсРМ.ТекущаяСмена(),1);
	
	ТЗ.Свернуть("КассоваяСмена", "СуммаФакт");
	ОтборПоРМ = Новый Структура("КассоваяСмена", Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы());
	СтрокиПоРМ = ТЗ.НайтиСтроки(ОтборПоРМ);
	Если СтрокиПоРМ.Количество() Тогда
		СуммаВыручки = СтрокиПоРМ[0].СуммаФакт;
	Иначе
		СуммаВыручки = 0;
	КонецЕсли;
	Возврат СуммаВыручки;
КонецФункции

Функция ВыручкаПоБанкуЗаСмену()
	ТЗ = Обработки.ФормированиеОтчетовФО.ТаблицаОперативнойРеализации(ИнтерфейсРМ.ТекущаяСмена(),1);
	
	ТЗ.Свернуть("ККМ, ВариантОплаты", "СуммаФакт");
	ОтборПоРМ = Новый Структура("ККМ, ВариантОплаты", глПараметрыРМ.ККМ, Справочники.ВариантыОплаты.Карта);
	СтрокиПоРМ = ТЗ.НайтиСтроки(ОтборПоРМ);
	Если СтрокиПоРМ.Количество() Тогда
		СуммаВыручки = СтрокиПоРМ[0].СуммаФакт;
	Иначе
		СуммаВыручки = 0;
	КонецЕсли;
	Возврат СуммаВыручки;
КонецФункции

Процедура ИнициализацияВозврата() Экспорт
	Заказ = Неопределено;
	ТекущийДокумент = Неопределено;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВозвратДопИнф.Статус,
	|	ВозвратДопИнф.ПротоколРасчетов,
	|	ВозвратДопИнф.Возврат.НомерЧека НомерЧека,
	|	ВозвратДопИнф.Возврат.НомерСмены НомерСмены, Возврат, Возврат.Заблокирован Заблокирован
	|ИЗ
	|	РегистрСведений.ВозвратДопИнф КАК ВозвратДопИнф
	|ГДЕ
	|	(ВозвратДопИнф.Статус = &СтатусОткрыт
	|			ИЛИ ВозвратДопИнф.Статус = &СтатусЗакрыт
	|				И НЕ ВозвратДопИнф.ПротоколРасчетов.Фискализирован
	|			ИЛИ ВозвратДопИнф.Возврат.Заблокирован)
	|	И ВозвратДопИнф.Возврат.Смена = &Смена
	|	И ВозвратДопИнф.Возврат.РабочееМесто = &РабочееМесто
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозвратДопИнф.ДатаОткрытия УБЫВ");
	Запрос.УстановитьПараметр("СтатусОткрыт", Перечисления.СтатусыЗаказа.Открыт);
	Запрос.УстановитьПараметр("СтатусЗакрыт", Перечисления.СтатусыЗаказа.Закрыт);
	Запрос.УстановитьПараметр("РабочееМесто", глРабочееМесто);
	Запрос.УстановитьПараметр("Смена", ИнтерфейсРМ.ТекущаяСмена());
	Рез = Запрос.Выполнить();
	ПротоколРасчетов = Документы.ПротоколРасчетов.ПустаяСсылка();
	ДатаОткрытия = ТекущаяДатаНаСервере();
	Если Рез.Пустой() Тогда
		докВозврат = Документы.Возврат.СоздатьДокумент();  
		докВозврат.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
		докВозврат.Дата = ТекущаяДатаНаСервере();
		докВозврат.Автор = глПользователь;
		докВозврат.МестоРеализации = глПараметрыРМ.МестоРеализации;
		докВозврат.РабочееМесто = глРабочееМесто;
		докВозврат.Смена = ИнтерфейсРМ.ТекущаяСмена();
		докВозврат.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
		докВозврат.ККМрабочегоМеста = глПараметрыРМ.ККМ;
		докВозврат.УстановитьНовыйНомер();
		фВводТоваровДоступен = Истина;
		
	Иначе
		ДанныеВозврата = Рез.Выгрузить()[0];
		докВозврат = ДанныеВозврата.Возврат.ПолучитьОбъект();
		докВозврат.ДополнительныеСвойства.Вставить("ИмяКомпьютера", ИмяКомпьютера());
		Если ЗначениеЗаполнено(ДанныеВозврата.ПротоколРасчетов) Тогда
		
			ПротоколРасчетов = ДанныеВозврата.ПротоколРасчетов;
		
		КонецЕсли; 
		Если ДанныеВозврата.Статус = Перечисления.СтатусыЗаказа.Закрыт ИЛИ ДанныеВозврата.Заблокирован Тогда
			фВводТоваровДоступен = Ложь;
		Иначе
			фВводТоваровДоступен = Истина;
			Если Не ПротоколРасчетов.Пустая() Тогда
				Если ПротоколРасчетов.Протокол.Итог("СуммаФакт") Тогда 
					фВводТоваровДоступен = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		глПараметрыРМ.Вставить("НомерТекущегоЧека", ДанныеВозврата.НомерЧека);
	КонецЕсли;
	ТекущийДокумент = докВозврат;
	ГлавнаяФорма.ОбновитьНадписьИтого();
КонецПроцедуры 

Процедура ПроинициализироватьЗаказЕслиНеПроинициализирован() Экспорт
	Попытка
		ЭтоНовый = ТекущийДокумент.ЭтоНовый();
	Исключение
		ТекКоличество = 1;
		Если ТекущийРежим = "ВОЗВРАТ" Тогда
			ИнициализацияВозврата();
		ИначеЕсли ТекущийРежим = "ПРОДАЖА" Тогда
			ИнициализацияЗаказа();	
		Иначе
			Возврат;
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

Функция ВыполнитьПроверкуПоСтанции(СтрокаЗаказа, ВыводПредупреждения=Истина) Экспорт
	Если ксТрактир.ЭтоРМСтанция() Тогда
		
		Результат = СтрокаЗаказа.РабочееМесто = глРабочееМесто;
		Текст1="Нет доступа!";
		Текст2="Эта строка была добавлена на другой станции...";
		
		Если НЕ Результат И ВыводПредупреждения Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		КонецЕсли; 
		Возврат Результат;
		
	КонецЕсли; 
	
	
	Возврат Истина;
КонецФункции

Процедура РасчетПоЗаказу() Экспорт
	Для Каждого Т Из Заказ.Товары Цикл
		РасчетПоСтроке(Т);
	КонецЦикла;
	ЗаписатьЗаказ();
	ГлавнаяФорма.ЗаполнитьТПтовары();
	ОбновитьСтатусыСтрок();
КонецПроцедуры

Процедура РасчетПоСтроке(СтрокаЗаказа)
	
		СуммаСпецифик = 0;
		МсСпецифики = Заказ.Специфики.НайтиСтроки(Новый Структура("НомерСтрокиТовара", СтрокаЗаказа.НомерСтроки));
		Для Каждого Т Из МсСпецифики Цикл
			СуммаСпецифик = СуммаСпецифик + Т.Цена*Т.Количество;
		КонецЦикла;
	
		СтрокаЗаказа.Сумма = ОкруглитьЧисло(СтрокаЗаказа.Количество*(СтрокаЗаказа.Цена+СуммаСпецифик), СтрокаЗаказа.Товар.Категория.ПравилоОкругления);
		
		СтрокаЗаказа.ЦенаРеализации	= СтрокаЗаказа.Цена;
		СтрокаЗаказа.СуммаРеализации= СтрокаЗаказа.Сумма;
		
КонецПроцедуры



// Изменение количества в текущей строке заказа
	//
Функция ИзменитьКоличество() Экспорт
	
				  
	//СтрокаЗаказа = ФормаЗаказа.ЭлементыФормы.ТаблицаЗаказа.ТекущаяСтрока;
	СтрокаТабПоля = ГлавнаяФорма.ЭлементыФормы.тпТовары.ТекущаяСтрока;
	Если СтрокаТабПоля.Уровень() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаТабПоля = Неопределено Тогда
		Возврат ложь;
	ИначеЕсли НЕ ВыполнитьПроверкуПоСтанции(СтрокаТабПоля) Тогда
		Возврат ложь; //Корректировка возможна только по строкам, добавленным на текущий станции.
	КонецЕсли;		
	
	Если ЗначениеЗаполнено(СтрокаТабПоля.НомерМарки) Тогда
		Возврат ложь;
	КонецЕсли;
	
	Если ксТрактир.ЭтоРМСтанция() И СтрокаТабПоля.Статус <> СтатусДозаказ Тогда
		Возврат ложь;
	КонецЕсли;	
	
	ИдСтроки = СтрокаТабПоля.ИдСтроки;
	
	Если Не ПрочитатьТекущийДокумент(Ложь, Ложь) Тогда
		Возврат ложь;
	КонецЕсли;
	
	СтрокаЗаказа = Заказ.Товары.Найти(ИдСтроки, "ИдСтроки");
	СтрокаТабПоля = ГлавнаяФорма.тпТовары.Строки.Найти(ИдСтроки, "ИдСтроки");
	
	Если Цел(СтрокаЗаказа.Товар.КратностьКоличества) <> СтрокаЗаказа.Товар.КратностьКоличества Тогда
		Длина		= 10;
		Точность	= 3;
	Иначе
		Длина		= 6;
		Точность	= 0;
	КонецЕсли;
	
	Колво = ИнтерфейсРМ.ВводЧисла("Количество", "Число", Длина, Точность, СтрокаЗаказа.Количество, СтрокаЗаказа.Товар.КратностьКоличества);
	
	Если Колво=СтрокаЗаказа.Количество ИЛИ Колво=Неопределено Тогда
		Возврат ложь;
	КонецЕсли;        	
	
	Если СтрокаТабПоля.Статус = СтатусДозаказ  Тогда
		
		Если Колво=0 Тогда
			Если СтрокаЗаказа.АвтоПозиция Тогда
				Текст1="Нет доступа!";
				Текст2="Нельзя удалить обязательную позицию заказа...";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				Возврат ложь;
			КонецЕсли;
			
			
			СтрокаЗаказа.КоличествоУдалено = СтрокаЗаказа.Количество;
			СтрокаЗаказа.Количество = 0;
			СтрокаТабПоля.Количество = 0;
			СтрокаТабПоля.КоличествоУдалено = СтрокаЗаказа.КоличествоУдалено;
			СтрокаТабПоля.Модифицирована = 1;
			СтрокаТабПоля.Статус = СтатусУдалено;
			СтрокаЗаказа.Статус = СтатусУдалено;
			ЗаписатьЗаказТоварыДопИнф();
			
		Иначе
			СтрокаЗаказа.КоличествоУдалено = СтрокаЗаказа.Количество - Колво;
			СтрокаЗаказа.Количество = Колво;                                 
			СтрокаТабПоля.Количество = Колво;
			СтрокаТабПоля.Модифицирована = 1;
			ЗаписатьЗаказТоварыДопИнф();
			
			ИнтерфейсРМ.ЗаписьСобытия(Справочники.События.ЗаказИзменениеКоличестваНезаказаннойПозиции, Заказ.Ссылка, СтрокаЗаказа.Товар.Код, СтрокаЗаказа.Товар.Наименование, СтрокаЗаказа.Количество);
			
		КонецЕсли;
		
		Модифицирован = Истина;
		
	Иначе
		// изменение кол-ва у заказанной позиции
		Если Колво > СтрокаЗаказа.Количество  Тогда
			
			ВводНовойСтроки(СтрокаЗаказа.Товар, Колво - СтрокаЗаказа.Количество);	
			Возврат Истина;
		Иначе
			Если Не СтрокаТабПоля.НомерМарки и ксТрактир.ЭтоРМСтанция() Тогда
				Текст1="Нет доступа!";
				Текст2="Нельзя удалить позицию заказа по которой есть марки...";
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
				
			КонецЕсли;
			СтрокаЗаказа.Количество = Колво;
			СтрокаТабПоля.Количество = Колво;  				
			СтрокаТабПоля.Модифицирована = 1;
		
			
			РасчетПоСтроке(СтрокаЗаказа);  

		КонецЕсли;
		
	КонецЕсли;
	
		
	ЗаписатьЗаказ(); 
	
	ПоказатьЗаказНаМонитореГостя();
	
	Возврат Истина;
КонецФункции
	
Процедура ЗаписатьЗаказ(Статус =	 "Открыт", Оплачен = Ложь, СоздатьМарки = Ложь) Экспорт
	Если Статус = "Открыт" Тогда
		Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт");
	КонецЕсли;
	
	РезультатБлокировки = Заказ.ЗаблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма, УИДформы);
	Если Не РезультатБлокировки.Успех Тогда
		Заказ = Заказ.Ссылка.ПолучитьОбъект();
		Текст1="Заказ редактируется!";
			Текст2="Этот заказ редактируется на 
			       |" + РезультатБлокировки.КемЗаблокирован + "
			       |Редактирование не возможно!";
			
			ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","");
			СброситьТекущийДокумент();
		Возврат;		
	КонецЕсли;
	//:Заказ = Документы.Заказ.СоздатьДокумент();
	
		
	Если Заказ.Смена.Пустая() Тогда
		Заказ.Смена = ИнтерфейсРМ.ТекущаяСмена();
	КонецЕсли;
	ОбновитьСтатусыСтрок();
	Для Каждого Т Из Заказ.Товары Цикл
		Если Оплачен Тогда
			Если Т.СтатусОплаты = -1 И Т.Фирма = глПараметрыРМ.Фирма Тогда
				Т.СтатусОплаты = 1;
				Т.ДокументОплаты = ПротоколРасчетов;
			КонецЕсли;
		КонецЕсли;
		СтрокаТпТовары = ГлавнаяФорма.тптовары.Строки.Найти(Т.ИдСтроки,"ИдСтроки");
		Если СтрокаТпТовары <> Неопределено Тогда
			Т.Статус = СтрокаТпТовары.Статус;			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Заказ.Записать();
	//ГлавнаяФорма.ЗаполнитьТПтовары();
	ЗаписатьЗаказТоварыДопИнф(СоздатьМарки);
	СсылкаЗаказ = Заказ.Ссылка;
	Заказ = СсылкаЗаказ.ПолучитьОбъект();
	ТекущийДокумент = Заказ;
	
	НЗ = РегистрыСведений.ЗаказДопИнф.СоздатьНаборЗаписей();
	НЗ.Отбор.Заказ.Установить(СсылкаЗаказ);
	НЗ.Прочитать();
	Попытка
		СтатусИзменился = Ложь;
		Если НЗ.Количество() Тогда
			Если НЗ[0].Статус <> Статус Тогда
				СтатусИзменился = Истина;
			КонецЕсли;
		Иначе
			СтатусИзменился = Истина;
		КонецЕсли;
		Если СтатусИзменился Тогда
			ЗарегистрироватьСобытие("Изменение статуса заказа", УровеньЖурналаРегистрации.Информация,,ТекущийДокумент.Ссылка, Статус);	
		КонецЕсли;
	Исключение
	КонецПопытки;
		
	Если НЗ.Количество() Тогда
		ЗаписьРегистра = НЗ[0];
	Иначе 
		ЗаписьРегистра = НЗ.Добавить();
		ЗаписьРегистра.Заказ = СсылкаЗаказ;
		ЗаписьРегистра.ДатаОткрытия = ДатаОткрытия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПротоколРасчетов) Тогда	
		ЗаписьРегистра.ПротоколРасчетов = ПротоколРасчетов;
	КонецЕсли;

	ЗаписьРегистра.Статус = Статус;
	Если Статус = Перечисления.СтатусыЗаказа.Открыт Тогда
		Если ЗначениеЗаполнено(Заказ.КартаДоступа) Тогда
			ксТрактир.РегистрацияЗаказаПоКартеДоступа(Заказ.КартаДоступа, Заказ.Ссылка);
		КонецЕсли;
		
	Иначе
		ЗаписьРегистра.ДатаЗакрытия = ТекущаяДатаНаСервере();
		Если ЗначениеЗаполнено(Заказ.КартаДоступа) Тогда
			ксТрактир.ОсвободитьКартуДоступа(Заказ.КартаДоступа);
		КонецЕсли;
	             
	КонецЕсли;
	
	НЗ.Записать(Истина);	
	//Лояльность.ОбновитьПредварительныйРасчетЗаказа(Заказ.Ссылка, глПараметрыРМ.Тест);
КонецПроцедуры

Процедура ЗаписатьВозврат(Статус)
	Если Статус = Перечисления.СтатусыЗаказа.Удален Тогда
		Для каждого Т Из докВозврат.Товары Цикл
			Т.КоличествоУдалено = Т.КоличествоНачальное;
			Т.Количество = 0;
			Т.Сумма = 0;
		КонецЦикла;
	КонецЕсли;
	
	ПоследнийПротокол = ПоследнийПротокол();
	Если ЗначениеЗаполнено(ПоследнийПротокол) Тогда
		Для Каждого Т Из ПоследнийПротокол.Протокол Цикл
			докВозврат.ВариантОплаты = Т.ВариантОплаты;
			докВозврат.ККМ = ПоследнийПротокол.ККМ;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	РежимЗаписи = ?(Статус = Перечисления.СтатусыЗаказа.Закрыт, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	докВозврат.Записать(РежимЗаписи);
	Если докВозврат.Проведен Тогда
		Попытка
			ЛояльностьКлиент.ОбработатьВозврат(докВозврат, ПоследнийПротокол);
		Исключение
			ЗарегистрироватьСобытие("ГлавнаяФорма.ФинализацияВозврата.Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, , докВозврат.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	СсылкаВозврат = докВозврат.Ссылка;
	
	НЗ = РегистрыСведений.ВозвратДопИнф.СоздатьНаборЗаписей();
	НЗ.Отбор.Возврат.Установить(СсылкаВозврат);
	НЗ.Прочитать();
	
	Если НЗ.Количество() Тогда
		ЗаписьРегистра = НЗ[0];
	Иначе 
		ЗаписьРегистра = НЗ.Добавить();
		ЗаписьРегистра.Возврат = СсылкаВозврат;
		ЗаписьРегистра.ДатаОткрытия = ДатаОткрытия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоследнийПротокол) Тогда
		
		ЗаписьРегистра.ПротоколРасчетов = ПоследнийПротокол;
		
	КонецЕсли;

	ЗаписьРегистра.Статус = Статус;
	Если Статус <> Перечисления.СтатусыЗаказа.Открыт Тогда
		ЗаписьРегистра.ДатаЗакрытия = ТекущаяДатаНаСервере();
	КонецЕсли;
	
	НЗ.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаписатьДокумент(Статус, Оплачен = Ложь)
	Если ТекущийРежим = "ВОЗВРАТ" Тогда
		ЗаписатьВозврат(Статус);
	Иначе
		ЗаписатьЗаказ(Статус, Оплачен);
	КонецЕсли;
КонецПроцедуры
 
Функция ПоследнийПротокол()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколРасчетов.Ссылка
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколРасчетов.Протокол КАК ПротоколТЧ
	|		ПО ПротоколТЧ.Ссылка = ПротоколРасчетов.Ссылка
	|ГДЕ
	|	ПротоколРасчетов.Заказ = &Заказ
	|	И НЕ ПротоколРасчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколРасчетов.Дата УБЫВ,
	|	ПротоколТЧ.СуммаФакт УБЫВ";
	Запрос.УстановитьПараметр("Заказ", ТекущийДокумент.Ссылка);
	
	Рез = Запрос.Выполнить();            
	Если Рез.Пустой() Тогда
		Возврат Документы.ПротоколРасчетов.ПустаяСсылка();
	Иначе 
		Возврат Рез.Выгрузить()[0][0];
	КонецЕсли;
КонецФункции

Функция ПроверитьПДФ()
	Для каждого Т Из ТекущийДокумент.Товары Цикл
		Если Т.Количество И Т.фАлкоголь = 1 И Т.СтатусОплаты = -1 Тогда
			РезультатПроверки = Алкоголь.ПроверитьПДФ(Т.ПДФ, Новый Массив, Т.Товар, ТекущийРежим = "ВОЗВРАТ", ТекущийДокумент.Ссылка);
			Если РезультатПроверки.Успех Тогда
			Иначе
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",РезультатПроверки.ОшибкаЗаголовок,РезультатПроверки.ОшибкаТекст + "
				|" + Т.Товар,"","ОК","",,0);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ЕстьСтрокиКоплате() Экспорт
	Попытка
		Если ТекущийДокумент.Товары.Итог("Количество") Тогда
			
			
			Статусы = ТекущийДокумент.Товары.Выгрузить(,"СтатусОплаты");
			Статусы.Сортировать("СтатусОплаты");
			Возврат Статусы[0][0] = -1;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция ЕстьНеоплаченныеСтроки() Экспорт
	Если ТекущийРежим="ПРОДАЖА" Тогда
		Для Каждого Т Из ТекущийДокумент.Товары Цикл
			Если (Т.Статус = -1 Или Т.Статус = 0) И Т.Количество Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

Функция НефискализированныйПротоколПоЗаказу() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПротоколРасчетовПротокол.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПротоколРасчетов.Протокол КАК ПротоколРасчетовПротокол
	|ГДЕ
	|	НЕ ПротоколРасчетовПротокол.Ссылка.Фискализирован
	|	И ПротоколРасчетовПротокол.Ссылка.Фирма = &Фирма
	|	И ПротоколРасчетовПротокол.СуммаФакт > 0
	|	И ПротоколРасчетовПротокол.Ссылка.Заказ = &Заказ");

	Запрос.УстановитьПараметр("Фирма", глПараметрыРМ.Фирма);
	Запрос.УстановитьПараметр("Заказ", Заказ.Ссылка);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Документы.ПротоколРасчетов.ПустаяСсылка();
	Иначе
		Возврат Рез.Выгрузить()[0][0];
	КонецЕсли;
КонецФункции


Процедура Оплата() Экспорт
	Попытка
		глОтсечкаПростоя();
		Если НЕ ЕстьСтрокиКоплате() Тогда
			ОсвободитьКартуДоступа();
			Возврат;
		КонецЕсли;
		//ГлавнаяФорма.ЭлементыФормы.ОПЛАТА.Видимость = 0;
		Если Обработки.Оплата.ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип).Открыта() Тогда
			Возврат;
		КонецЕсли;
				
		РезультатКонтроля = ВыполнитьКонтрольПоТекущемуДокументу();
		Если Не РезультатКонтроля Тогда
			Возврат;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИнтерфейсРМ.ТекущаяСмена()) Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Смена не открыта", "Для оплаты заказа нужно открыть смену","","ОК","");
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьПДФ() Тогда
			ГлавнаяФорма.УстановитьВидимостьКнопки("Оплата", 1, 1);
			Возврат;
		КонецЕсли;
		
		ОбработкаОплаты = ИнтерфейсРМ.ПолучитьОбъектОбработки("Оплата"); //:ОбработкаОплаты = Обработки.Оплата.Создать();
		Заказ.ПодвалЧека = "";
		ОбработкаОплаты.Заказ = Заказ;
		ОбработкаОплаты.Товары = Заказ.Товары;
		
		ПротоколРасчетов = НефискализированныйПротоколПоЗаказу();
		Если ЗначениеЗаполнено(ПротоколРасчетов) Тогда
			ОбработкаОплаты.ПротоколРасчетов = ПротоколРасчетов.ПолучитьОбъект();
		Иначе
			ОбработкаОплаты.ИнициализироватьПротокол();		
			ОбработкаОплаты.ОткрытьЧек();
		КонецЕсли;
		
		
		//ПротоколРасчетов = ОбработкаОплаты.ПротоколРасчетов.Ссылка;
		
		НомерКартыЛояльности = Заказ.НомерКартыЛояльности;
		
				
		
		
		// Сохраняем состояние заказа (ДокументОбъект.Заказ) на момент до применения лояльности	
		ЗаказXDTO = СериализаторXDTO.ЗаписатьXDTO(Заказ);
		
		фВозврат = 0;
		Если ОбработкаОплаты.ПротоколРасчетов.Протокол.Итог("СуммаФакт") = 0 Тогда
			// Если заказ заблокирован или оплачен, то его сумму менять нельзя. 
			// Соответственно, первичный запрос не отправляем.
			Если фВводТоваровДоступен Тогда 
				
				Попытка
					//:Заказ=Документы.Заказ.СоздатьДокумент();
					
					Если Не Заказ.НомерЧека Тогда
						НомерЧека = НомерЧека;
						НомерСмены = НомерСмены;
						глПараметрыРМ.Свойство("НомерТекущегоЧека", НомерЧека);
						глПараметрыРМ.Свойство("НомерТекущейСмены", НомерСмены);
						Если ЗначениеЗаполнено(НомерСмены) Тогда
							Заказ.НомерСмены = НомерСмены;
							Заказ.НомерЧека = НомерЧека;
						КонецЕсли;
					КонецЕсли;
					
					ЗарегистрироватьСобытие("Оплата.РасчетЧека.До вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
					РезультатЛояльности = ЛояльностьКлиент.РасчетЧека(Заказ,ОбработкаОплаты.ПротоколРасчетов);
					ИнтерфейсРМ.ПопыткаДействияСОбъектом(ОбработкаОплаты.ПротоколРасчетов, "Объект.Записать()",,, Заказ.Ссылка);
					ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Открыт);
					ЗарегистрироватьСобытие("Оплата.РасчетЧека.После вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка, "Товары: " + ЗначениеВСтрокуВнутр(Заказ.Товары.Выгрузить()));
					Если ЗначениеЗаполнено(Заказ.НомерКартыЛояльности) Тогда
						НомерКартыЛояльности = Заказ.НомерКартыЛояльности;
					КонецЕсли;
					Если РезультатЛояльности.Параметр = "Возврат в чек" Тогда
						фВозврат = 1;
					КонецЕсли;
					
				Исключение
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка лояльности", "Ошибка при применении лояльности", ОписаниеОшибки(),"","ОК","");
					ЗарегистрироватьСобытие("Заказ.Ошибка лояльности",УровеньЖурналаРегистрации.Предупреждение,,Заказ.Ссылка, "Товары: " + Символы.ПС + ЗначениеВСтрокуВнутр(Заказ.Товары.Выгрузить()));
					Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
					Заказ.ОбработанСистемойЛояльности = 2;
					ЗаписатьЗаказ();
					ПрочитатьТекущийДокумент(Истина,Истина);
				КонецПопытки;
				
				Если фВозврат = 1 Тогда
					ЗарегистрироватьСобытие("Заказ.Востановление состояния заказа",УровеньЖурналаРегистрации.Предупреждение,,Заказ.Ссылка, "Товары: " + Символы.ПС + ЗначениеВСтрокуВнутр(Заказ.Товары.Выгрузить()));
					Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
					Заказ.ОбработанСистемойЛояльности = 2;
					ЗаписатьЗаказ();
					ПрочитатьТекущийДокумент(Истина,Истина);
					ГлавнаяФорма.УстановитьВидимостьКнопки("Оплата", 1, 1);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;		
		КонецЕсли;
	
		ОбработкаОплаты.Заказ = Заказ;
		ОбработкаОплаты.Товары = Заказ.Товары;
		ПротоколРасчетов = ОбработкаОплаты.ПротоколРасчетов.Ссылка;
		ФормаОплаты = ОбработкаОплаты.ПолучитьФорму("Форма"+глПараметрыРМ.ИнтерфейсТип);
		Попытка
			РезультатОплаты = ФормаОплаты.ОткрытьМодально();
		Исключение
			РезультатОплаты = Неопределено;
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьСобытие("Заказ.Ошибка в процессе оплаты", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, ПодробноеПредставлениеОшибки);
		КонецПопытки;
		ЗарегистрироватьСобытие("Получен результат оплаты", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.Заказ, Заказ.Ссылка, "РезультатОплаты = " + ЗначениеВСтрокуВнутр(РезультатОплаты));
		Если РезультатОплаты = Неопределено Тогда // Закрыли по Esc или крестик в окне оплаты
			Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
			Заказ.НомерКартыЛояльности = НомерКартыЛояльности;
			ТекущийДокумент = Заказ;
			ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Открыт);
			ГлавнаяФорма.УстановитьВидимостьКнопки("Оплата", 1, 1);
			Возврат;
		КонецЕсли;
		
		Если РезультатОплаты.СделанаОтменаОплатыКартой Тогда // 
			ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Открыт);
			ИнициализацияЗаказа();
		ИначеЕсли РезультатОплаты.Успех Тогда
			ТекущийДокумент.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
			ПротоколРасчетов = ОбработкаОплаты.ПротоколРасчетов.Ссылка;
			Заказ = Заказ.Ссылка.ПолучитьОбъект();
			
			ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Открыт, Истина);
			РезультатОплаты.Свойство("Сдача", НадписьСдача);
			Если ЗначениеЗаполнено(НадписьСдача) Тогда
				//Если глОтладкаУровень() Тогда
					РаботаСокнами.ПоказатьПлашку("Не забудьте сдачу", НадписьСдача,5,0);
				//КонецЕсли;
			КонецЕсли;
			ГлавнаяФорма.ОбновитьНадписьИтого();
			//ГлавнаяФорма.ОбновитьОстальное();
			Если Заказ.Товары.Итог("СтатусОплаты") = Заказ.Товары.Количество() Тогда
				ОсвободитьКартуДоступа();
			Иначе
				СброситьТекущийДокумент();
			КонецЕсли;
			НадписьСдача = Неопределено;
			Если Не глПараметрыРМ.Свойство("НомерТекущегоЧека") Тогда
				глПараметрыРМ.Вставить("НомерТекущегоЧека", 9999);
			КонецЕсли; 
			
		ИначеЕсли РезультатОплаты.Неудача Тогда
			СброситьТекущийДокумент();
		ИначеЕсли РезультатОплаты.Отмена Тогда
			ЗарегистрироватьСобытие("Заказ.Востановление состояния заказа при отмене оплат",УровеньЖурналаРегистрации.Предупреждение,,Заказ.Ссылка, "Товары: " + Символы.ПС + ЗначениеВСтрокуВнутр(Заказ.Товары.Выгрузить()));
			Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
			Заказ.НомерКартыЛояльности = НомерКартыЛояльности;
			ТекущийДокумент = Заказ;
			ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Открыт);						
		КонецЕсли;
	Исключение
		ЗарегистрироватьСобытие("Ошибка при оплате", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Заказ, Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ВозвратОплаты() Экспорт
	глОтсечкаПростоя();
	
	ГлавнаяФорма.УстановитьДоступностьКнопки("Оплата",0);
	Если Обработки.Оплата.ПолучитьФорму("Форма" + глПараметрыРМ.ИнтерфейсТип).Открыта() Тогда
		ГлавнаяФорма.УстановитьВидимостьКнопки("Оплата", 1, 1);
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьПДФ() Тогда
		ГлавнаяФорма.УстановитьВидимостьКнопки("Оплата", 1, 1);
		Возврат;
	КонецЕсли;
	
	ОбработкаОплаты = ИнтерфейсРМ.ПолучитьОбъектОбработки("Оплата");
	ОбработкаОплаты.докВозврат = докВозврат;
	Если ПротоколРасчетов.Пустая() Тогда
		ОбработкаОплаты.ОткрытьЧек();	
		ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Открыт);
	КонецЕсли;

	ОбработкаОплаты = ИнтерфейсРМ.ПолучитьОбъектОбработки("Оплата");
	ОбработкаОплаты.докВозврат = докВозврат;
	ОбработкаОплаты.ИнициализироватьПротоколПоВозврату();
	ФормаОплаты = ОбработкаОплаты.ПолучитьФорму("Возврат"+глПараметрыРМ.ИнтерфейсТип);
	Попытка
		РезультатОплаты = ФормаОплаты.ОткрытьМодально();
	Исключение
		РезультатОплаты = Неопределено;
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗарегистрироватьСобытие("Возврат.Ошибка в процессе оплаты", УровеньЖурналаРегистрации.Ошибка, , докВозврат.Ссылка, ПодробноеПредставлениеОшибки);
	КонецПопытки;
	ЗарегистрироватьСобытие("Возврат.Получен результат оплаты", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.Возврат, докВозврат.Ссылка, "РезультатОплаты = " + ЗначениеВСтрокуВнутр(РезультатОплаты));
	Если РезультатОплаты = Неопределено Тогда // Закрыли по Esc или крестик в окне оплаты
		ТекущийДокумент = докВозврат;
		ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Открыт);
		ГлавнаяФорма.УстановитьВидимостьКнопки("Оплата", 1, 1);
		Возврат;
	КонецЕсли;
	
	Если РезультатОплаты.Успех Тогда
		ТекущийДокумент.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
		//{ Затачка от бага с двойным входом в возврат оплаты на TPX 
		ТекущийДокумент.ККМ = глПараметрыРМ.ККМ;
		Попытка
			ТекущийДокумент.ВариантОплаты = РезультатОплаты.ВариантОплаты;
		Исключение
		КонецПопытки;
		//}
		ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Закрыт);
		ТекущийРежим = "ПРОДАЖА";
		ИнициализацияЗаказа();
		Заблокировать();
	ИначеЕсли РезультатОплаты.Неудача Тогда
		ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Открыт);
	ИначеЕсли РезультатОплаты.Отмена Тогда
		
	КонецЕсли;
	ГлавнаяФорма.УстановитьВидимостьКнопки("Оплата", 1, 1);
КонецПроцедуры

Функция Сторно(НомерСтроки = 0) Экспорт 
	
	Если Не ПрочитатьТекущийДокумент(Ложь,Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ВводТоваровДоступен() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЗаказНеВыбран() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЗарегистрироватьСобытие("Сторно", УровеньЖурналаРегистрации.Информация,,ТекущийДокумент.Ссылка);	
	Исключение
	КонецПопытки;
	
	ПоследняяСтрока = 0;
	КоличествоСтрок = 0;
	НужнаяСтрока = 0;
	
	Если ТекущийРежим = "ПРОДАЖА" Тогда
		
		
		Для Каждого Т Из ТекущийДокумент.Товары Цикл 
			Если Т.Количество И Т.СтатусОплаты = -1 Тогда
				ПоследняяСтрока = Т;
				КоличествоСтрок = КоличествоСтрок + 1;
				Если Т.НомерСтроки = НомерСтроки Тогда
					НужнаяСтрока = Т;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НужнаяСтрока = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если НужнаяСтрока.СтатусОплаты <> -1 Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		ПоследняяСтрока = 0;
		КоличествоСтрок = 0;
		Для Каждого Т Из ТекущийДокумент.Товары Цикл 
			Если Т.Количество Тогда
				ПоследняяСтрока = Т;
				НужнаяСтрока = Т;
				КоличествоСтрок = КоличествоСтрок + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;


	Если КоличествоСтрок = 1 Тогда
		СторноВсе();
	ИначеЕсли КоличествоСтрок Тогда
		Если НужнаяСтрока.фАлкоголь = 1 Тогда
			МС = ТекущийДокумент.Товары.НайтиСтроки(Новый Структура("Товар, Количество", НужнаяСтрока.Товар, 1));
			КолСтрокСэтойБутылкой = МС.Количество();
			Если КолСтрокСэтойБутылкой > 1 Тогда
				ПДФ = ВводПДФ(НужнаяСтрока.Товар, Ложь);
				Если Не ЗначениеЗаполнено(ПДФ) Тогда
					Возврат Ложь;
				КонецЕсли;
				
				МС = ТекущийДокумент.Товары.НайтиСтроки(Новый Структура("Товар, ПДФ, Количество", НужнаяСтрока.Товар, ПДФ, 1));
				Если МС.Количество() Тогда
					НужнаяСтрока = МС[0];
				Иначе
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Неверный PDF","PDF в чеке не найден","","ОК","",,0);
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли;
		
		НужнаяСтрока.КоличествоУдалено = НужнаяСтрока.КоличествоНачальное;
		НужнаяСтрока.Количество = 0;
		НужнаяСтрока.Сумма = 0;
		Если ТекущийРежим = "ПРОДАЖА" Тогда
			НужнаяСтрока.СуммаРеализации = 0;
		КонецЕсли;
		ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Открыт);	
	КонецЕсли;
	
	глОтсечкаПростоя();
	ПоказатьЗаказНаМонитореГостя();
КонецФункции

Функция СторноВсе() Экспорт
	
	Если Не ПрочитатьТекущийДокумент(Ложь, Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ВводТоваровДоступен() Тогда
		Возврат Ложь;
	КонецЕсли; 
	
	Попытка
		ЗарегистрироватьСобытие("Сторно все", УровеньЖурналаРегистрации.Информация,,ТекущийДокумент.Ссылка);	
	Исключение
	КонецПопытки;
	
	Если ТекущийРежим = "ВОЗВРАТ" Тогда
		ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Удален);	
		ТекущийДокумент = Неопределено;
		ТекущийРежим = "";
		Заблокировать();
	Иначе
		Статус = Перечисления.СтатусыЗаказа.Удален;
		Для каждого Т Из ТекущийДокумент.Товары Цикл    
			Если Т.СтатусОплаты = -1 Тогда
				Т.КоличествоУдалено = Т.КоличествоНачальное;
				Т.Количество = 0;
				Т.СуммаРеализации = 0;
				Т.Сумма = 0;
			ИначеЕсли Т.СтатусОплаты = 1 Тогда
				Если Статус = Перечисления.СтатусыЗаказа.Удален Тогда
					Статус = Перечисления.СтатусыЗаказа.Закрыт;
				КонецЕсли;                                     				
			ИначеЕсли Т.СтатусОплаты = 0 Тогда
				Статус = Перечисления.СтатусыЗаказа.Открыт;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьДокумент(Статус);
		
		Если Статус <> Перечисления.СтатусыЗаказа.Открыт И не ЕстьНеоплаченныеСтроки() Тогда
			
			ОсвободитьКартуДоступа();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ОсвободитьКартуДоступа(Интерактивно = Истина) Экспорт
	
	Если Интерактивно Тогда
		Текст1 = "Вопрос гостю";
		Текст2 = "Гость завершил покупки?";
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "ДА", "", "Esc=НЕТ",,,,,ТекущийДокумент.Ссылка);
		РаботаСокнами.УдалитьПлашку(5);
		Если Ответ = "НЕТ" Тогда
			СброситьТекущийДокумент(Ложь);
			Заблокировать(Истина);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	ксТрактир.ОсвободитьКартуДоступаОтЗаказа(Заказ.Ссылка);
	ПрочитатьТекущийДокумент(ложь,ложь);
	Если Заказ.Товары.Итог("Количество") Тогда
		Попытка
			ЛояльностьКлиент.ЗакрытьЗаказ(Заказ, ПротоколРасчетов);	
		Исключение
		КонецПопытки;
		
		ПечатьПодвалаЛояльности();
		ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Закрыт);
	Иначе
		ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Удален);
	КонецЕсли;
	глПользователь = Неопределено;
	СброситьТекущийДокумент(Ложь);
	Заблокировать(Истина);
КонецФункции

Процедура ПечатьПодвалаЛояльности()
	
	ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
	Обработка_ККМ = Неопределено;	
	ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
	
	СтрокиПодвала = РазложитьСтрокуВМассив(Заказ.ПодвалЧека, Символы.ПС);
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", СтрокиПодвала);
	Параметры.Вставить("ТипШрифта", 0);
	ПараметрыВыходные = ПараметрыВыходные;
	Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",Параметры,ПараметрыВыходные);
	ПоказатьОшибкуККМ(ПараметрыВыходные);

КонецПроцедуры

Функция ВводПДФ(Товар, ИсключатьПДФчека = Истина) Экспорт
	Если Ложь Тогда Заказ = Документы.Заказ.СоздатьДокумент() КонецЕсли;
	МассивПДФчека = Новый Массив;
	Если ИсключатьПДФчека Тогда
		Для каждого Т Из ТекущийДокумент.Товары Цикл
			Если Т.Количество Тогда
				МассивПДФчека.Добавить(Т.ПДФ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Обработка = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВводПДФ");
	Обработка.ЭтоВозврат = ТекущийРежим = "ВОЗВРАТ";
	Форма = Обработка.ПолучитьФорму("Форма"+глПараметрыРМ.ИнтерфейсТип);
	Форма.Товар = Товар;
	Форма.ПДФЧека = МассивПДФчека;
	Возврат Форма.ОткрытьМодально();
КонецФункции

Процедура ОткрытьЧек() Экспорт
	Если Найти(глПараметрыРМ.ККМ, "автономная") Тогда
		НомерЧека = 999;
		НомерСмены = 999;	
		глПараметрыРМ.Вставить("НомерТекущегоЧека", НомерЧека);
		глПараметрыРМ.Вставить("НомерСмены",  НомерСмены);
		Возврат;
	КонецЕсли;
	
	ККМ=глПараметрыРМ.ККМ.ПолучитьОбъект();
	Обработка_ККМ=Обработка_ККМ;
	ИнициализацияТО(ККМ, Обработка_ККМ,глПараметрыРМ);
	Параметры = Новый Структура;
	Параметры.Вставить("Кассир", Строка(глПользователь));
	Параметры.Вставить("ТипЧека", Ложь);
	ПараметрыВыходные = Новый Массив;
	Попытка
		Р = Обработка_ККМ.ВыполнитьКоманду("ПолучитьТекущееСостояние", Параметры, ПараметрыВыходные);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если ПараметрыВыходные.Количество() > 2 Тогда
		глПараметрыРМ.Вставить("НомерТекущегоЧека", ПараметрыВыходные.НомерЧека);
		глПараметрыРМ.Вставить("НомерСмены",  ПараметрыВыходные.НомерСмены);
	КонецЕсли;
	ПоказатьОшибкуККМ(ПараметрыВыходные);
	
КонецПроцедуры

Функция ПрочитатьТекущийДокумент(ОбновитьСтатусыСтрок = Истина, ЗаполнитьТПтовары = Истина) Экспорт
	
	ГлавнаяФорма.ОтключитьОбработчикОжидания("ЗаполнитьНадписиЛояльности_ОбработчикОжидания");	
	Если ТекущийРежим = "" Тогда
		Возврат Ложь;
	ИначеЕсли ТекущийРежим = "ПРОДАЖА" Тогда
		докВозврат = Неопределено;
		Заказ = Заказ.Ссылка.ПолучитьОбъект();
		ТекущийДокумент = Заказ;
		
		РезультатБлокировки = Заказ.ЗаблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма, УИДформы);
		Если Не РезультатБлокировки.Успех Тогда
			
			Если ИнтерфейсРМ.СообщитьСброситьЗаказНаАвтокассе(РезультатБлокировки.КемЗаблокирован) = 1 Тогда
				Возврат ПрочитатьТекущийДокумент(ОбновитьСтатусыСтрок,ЗаполнитьТПтовары);
			КонецЕсли; 

			//ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Не удалось заблокировать заказ", "Заказ редактируется на РМ " + РезультатБлокировки.КемЗаблокирован,"","ОК","");
			ТекущийРежим = "";
			Заказ.РазблокироватьРедактированиеПоФирме(глПараметрыРМ.Фирма, УИДформы);
			Возврат Ложь;
		Иначе
			Если ЗаполнитьТПтовары Тогда
				ГлавнаяФорма.ЗаполнитьТПтовары();
				ОбновитьСтатусыСтрок();
			ИначеЕсли ОбновитьСтатусыСтрок Тогда
				ОбновитьСтатусыСтрок();
			КонецЕсли;
			ИтогКоличество = Заказ.Товары.Итог("Количество");
			ИтогЦена 	   = Заказ.Товары.Итог("Цена");
			ТочностьКоличества = ИтогКоличество = Цел(ИтогКоличество);
			ТочностьСуммы 	   = ИтогЦена 		= Цел(ИтогЦена);
			ГлавнаяФорма.ЭлементыФормы.тпТовары.Колонки.СуммаРеализации.Формат 	= ("ЧДЦ="+ТочностьСуммы);
			ГлавнаяФорма.ЭлементыФормы.тпТовары.Колонки.ЦенаРеализации.Формат 			= ("ЧДЦ="+ТочностьСуммы);
			ГлавнаяФорма.ЭлементыФормы.тпТовары.Колонки.Количество.Формат 		= ("ЧДЦ="+ТочностьКоличества);
			
			//:Заказ = Документы.Заказ.СоздатьДокумент();
			Для Каждого Т Из Заказ.Товары Цикл
				Если ЗначениеЗаполнено(Т.ДокументОплаты) И Т.СтатусОплаты = -1  Тогда
					Т.СтатусОплаты = 1;
				ИначеЕсли Т.СтатусОплаты = 0 и Т.Фирма = глПараметрыРМ.Фирма Тогда
					Т.СтатусОплаты = -1;
				ИначеЕсли Т.СтатусОплаты = -1 И т.Фирма <> глПараметрыРМ.Фирма Тогда
					т.СтатусОплаты = 0;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
		Возврат РезультатБлокировки.Успех;
	ИначеЕсли ТекущийРежим = "ВОЗВРАТ" Тогда
		Возврат Истина;
	КонецЕсли;
	Если ЗаполнитьТПтовары Тогда
		ЗаполнитьНадписиЛояльности();
	КонецЕсли;
КонецФункции

функция ОбновитьСтатусыСтрок() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.ИдСтроки КАК ИдСтроки,
	|	ЗаказТоварыДопИнф.Статус КАК Статус,
	|	ЗаказТоварыДопИнф.КодПодтверждения КАК КодПодтверждения,
	|	ЗаказТоварыДопИнф.РабочееМесто КАК РабочееМесто,
	|	ЗаказТоварыДопИнф.Подача КАК Подача,
	|	ЗаказТоварыДопИнф.ГруппаПечати КАК ГруппаПечати,
	|	ЗаказТоварыДопИнф.АвторЗаказано КАК АвторЗаказано,
	|	ЗаказТоварыДопИнф.АвторГотово КАК АвторГотово,
	|	ЗаказТоварыДопИнф.Товар КАК Товар,
	|	ЗаказТоварыДопИнф.Количество КАК Количество,
	|	ЗаказТоварыДопИнф.КоличествоУдалено КАК КоличествоУдалено,
	|	ЗаказТоварыДопИнф.ИдСтрокиВладельца КАК ИдСтрокиВладельца,
	|	ЗаказТоварыДопИнф.НомерМарки КАК НомерМарки,
	|	ЗаказТоварыДопИнф.Станция КАК Станция
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.Заказ = &Заказ");

	Запрос.УстановитьПараметр("Заказ", Заказ.Ссылка);
	ТЗ = Запрос.Выполнить().Выгрузить();
	Для Каждого Т Из ТЗ Цикл
		ЭтоСпецифика = ЗначениеЗаполнено(Т.ИдСтрокиВладельца);
		ТЧ = ?(ЭтоСпецифика, Заказ.Специфики, Заказ.Товары);
		//:ТЧ = заказ.Товары;
		СтрокаЗаказа = ТЧ.Найти(Т.ИдСтроки, "ИдСтроки");
		Если СтрокаЗаказа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТекущийМаксНомерПодачи = Макс(ТекущийМаксНомерПодачи, Т.Подача);
		
		ЗаполнитьЗначенияСвойств(СтрокаЗаказа, Т);
		тпТовары = ГлавнаяФорма.тпТовары;
		//:тпТовары = новый ДеревоЗначений;
		
		СтрокаТП = тпТовары.Строки.Найти(Т.ИдСтроки, "ИдСтроки",ИСтина);
		Если СтрокаТП<> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(строкатп, т);
		КонецЕсли;
	КонецЦикла;

КонецФункции



Функция ВводНовойСтроки(ВыбТов, Количество = 0, ШК = "") Экспорт
	Если Не ПрочитатьТекущийДокумент(Ложь, Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	глОтсечкаПростоя();
	Если Не ЗначениеЗаполнено(ВыбТов) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИнтерфейсРМ.ТекущаяСмена()) Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Смена не открыта", "Для редактирования заказа нужно открыть смену","","ОК","");
		Возврат Неопределено;
	КонецЕсли;
	НомерТекущегоЧека = НомерТекущегоЧека;
	Если Не глПараметрыРМ.Свойство("НомерТекущегоЧека", НомерТекущегоЧека) Тогда
		НомерТекущегоЧека = 0;	
	КонецЕсли;
	Если НомерТекущегоЧека <= 1 Тогда
		Если Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы().Пустая() Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Смена ККМ не открыта", "Для редактирования заказа нужно открыть смену ККМ","","ОК","");
			Возврат Неопределено;	
		КонецЕсли;
	КонецЕсли;
	
	Если Не ВводТоваровДоступен() Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ПроинициализироватьЗаказЕслиНеПроинициализирован();
	фАлкоголь = ВыбТов.фАлкоголь;
	ГруппаКонтроля = ВыбТов.ГруппаКонтроляПродажи;
	Если Не ВыполнитьКонтроль(ГруппаКонтроля, фАлкоголь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Количество) Тогда
		Если ЗначениеЗаполнено(ТекКоличество) Тогда
			Количество = ТекКоличество;
			Если Не ВыбТов.ЗапросКоличества Тогда
				Если Количество <> Цел(Количество) Тогда
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Неверное количество", "Количество для данного товара не может быть дробным","","ОК","");	
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Количество = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Количество > 1 И фАлкоголь = 1 Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Неверное количество", "Количество для данного товара 
		|не может быть больше 1 бутылки!","","ОК","");	
		Возврат Неопределено;
	КонецЕсли;

	ПДФ = ПДФ;

	Если фАлкоголь = 1 Тогда // Крепкий алкоголь
		МаксимальноеКоличествоПДФвЧеке = Константы.МаксимальноеКоличествоПДФвЧеке.Получить();
		МаксимальноеКоличествоПДФвЧеке = ?(МаксимальноеКоличествоПДФвЧеке, МаксимальноеКоличествоПДФвЧеке, 150);
		Если ТекущийДокумент.Товары.НайтиСтроки(Новый Структура("фАлкоголь",1)).Количество() > МаксимальноеКоличествоПДФвЧеке Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка проверки количества строк алкоголя", "Количество строк, отправляемых в ЕГАИС не может превышать " + МаксимальноеКоличествоПДФвЧеке,"","ОК","");	
			Возврат Неопределено;
		КонецЕсли;
		ПДФ = ВводПДФ(ВыбТов);
		Если Не ЗначениеЗаполнено(ПДФ) Тогда
			Возврат Неопределено;
		КонецЕсли;
		Количество = 1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ШК) Тогда
		ШК = ОбщегоНазначенияПовтИсп.НайтиПоРеквизиту("Справочник.Штрихкоды", "Товар", ВыбТов, Ложь);
		Если Не ЗначениеЗаполнено(ШК) Тогда
			ШК = " ";
		КонецЕсли;
	КонецЕсли;
	
	ЦенаТовара = ЦенаТовара(ВыбТов).Цена;
	
	Если ТекущийРежим = "ВОЗВРАТ" Тогда
		ЦенаКорр = ИнтерфейсРМ.ВводЧисла("ВВЕДИТЕ ЦЕНУ", "Число", 10, 2, ЦенаТовара);
		Если ЦенаКорр = Неопределено ИЛИ ЦенаТовара = 0 Тогда
			Возврат Неопределено;
		Иначе
			МаксимальныйПроцентПревышения = Константы.МаксимальныйПроцентПревышенияЦеныПриВозврате.Получить();
			МаксимальныйПроцентПревышения = ?(МаксимальныйПроцентПревышения, МаксимальныйПроцентПревышения, 0);
			
			Если (ЦенаКорр/ЦенаТовара-1)*100 > МаксимальныйПроцентПревышения Тогда
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка при проверке цены","Некорректная цена", "","ОК","",,0);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Цена = ЦенаКорр;
	Иначе
		Цена = ЦенаТовара;
	КонецЕсли;
	
	МаксимальнаяСумма = Константы.МаксимальнаяСуммаВстрокеЧека.Получить();
	МаксимальнаяСумма = ?(МаксимальнаяСумма, МаксимальнаяСумма, 1000);
	Если МаксимальнаяСумма < Цена*Количество Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Слишком большая сумма строки","Максимальная сумма в строке чека - " + МаксимальнаяСумма + " " + глСимволРубля,"","ОК","",,0);
		Возврат Неопределено;
	КонецЕсли;

	
	//Если Не ПрочитатьТекущийДокумент() Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	Нов = ТекущийДокумент.Товары.Добавить();
	Если ТекущийРежим = "ВОЗВРАТ" Тогда
		Нов.ЦенаРозничная = ЦенаТовара;
		Нов.СуммаРозничная = ЦенаТовара * Количество;
	Иначе
		Нов.ЦенаРеализации = Цена;
		Нов.СуммаРеализации = Цена * Количество;
	КонецЕсли;
	
	Нов.Товар 		= ВыбТов;
	Нов.ПДФ 		= ПДФ;
	Нов.Автор 		= глПользователь;
	Нов.фАлкоголь 	= фАлкоголь;
	Нов.Количество 	= Количество;
	Нов.КоличествоНачальное = Количество;
	Нов.Цена 		= Цена;
	Нов.Сумма 		= Нов.Цена * Нов.Количество;
	Нов.ШК 			= ШК;
	Нов.Фирма 		= ФирмаПоТовару(ВыбТов);
	Нов.идСтроки 	= ТекущийДокумент.идСтроки(Нов.НомерСтроки);
	Нов.ВремяДобавления = ТекущаяДатаНаСервере();
	Нов.СтатусОплаты	= -1;
	Нов.Статус = СтатусДозаказ;
	фВыборСпецифик = 1;
	ГлавнаяФорма.ЗаполнитьТПтовары();
	ОбновитьСтатусыСтрок();
	ГлавнаяФорма.ЭлементыФормы.тптовары.ТекущаяСтрока = ГлавнаяФорма.тптовары.Строки.найти(Нов.ИдСтроки, "ИдСтроки");
	Если НЕ ПроверитьДобавитьСпецифику(Нов,Неопределено,Истина,Ложь) Тогда
		ТекущийДокумент.Товары.Удалить(Нов);
		фВыборСпецифик = 0;
		Возврат Ложь;
	КонецЕсли; 
	фВыборСпецифик = 0;
	ГлавнаяФорма.тпТовары.Строки.Найти(Нов.ИдСтроки).Модифицирована = 1;
	ТекКоличество = 1;
	ЗаписатьДокумент(Перечисления.СтатусыЗаказа.Открыт);
	ЗаполнитьНадписиЛояльности();
	ПоказатьЗаказНаМонитореГостя();
	Возврат Нов.ИдСтроки;
КонецФункции

// Описание процедуры
//
Функция ПроверитьДобавитьСпецифику(СтрокаДокЗаказ, ВыбСпецифика=Неопределено, ОбязательноОткрыватьФорму=Ложь,АвтоПозиция=Ложь)
		ОбработкаВыборСпецифик = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборСпецифик");
		
		СтрокаТпТовары = ГлавнаяФорма.тпТовары.строки.Найти(СтрокаДокЗаказ.ИдСтроки, "ИдСтроки");
		СтрокаТпТовары.Модифицирована = 1;
		Если НЕ ОбязательноОткрыватьФорму Тогда
			// проверим выполнение условий по спецификам без открытия формы выбора
			РезультатВыбора = ОбработкаВыборСпецифик.ВыполнитьВыборСпецифик(СтрокаТпТовары, Истина, АвтоПозиция);	
			
			Если РезультатВыбора.Контроль Тогда
				// условия не нарушены; подчистим лишние (пустые) группы-специфики в заказе
				ОбновитьСпецификиПоСтрокеТовара(СтрокаДокЗаказ, РезультатВыбора.Специфики, Ложь);
				Возврат РезультатВыбора.Контроль;	
			Иначе	
				// нарушены условия по спецификам - открываем форму для пользователя
				ОбязательноОткрыватьФорму = Истина;
			КонецЕсли; 
		КонецЕсли; 	
		
		РезультатВыбора = ОбработкаВыборСпецифик.ВыполнитьВыборСпецифик(СтрокаТпТовары);
		
		Если РезультатВыбора.Контроль Тогда
			ОбновитьСпецификиПоСтрокеТовара(СтрокаДокЗаказ, РезультатВыбора.Специфики, Ложь);
			//				СтрокаТовара.Строки.Сортировать("Порядок,ПорядокСпецифик");
			Если ГлавнаяФорма <> Неопределено Тогда
				//СтрокаТовара.Строки.Сортировать("Цена");
				
			КонецЕсли; 
		КонецЕсли; 
		//			ВыводЗаказаНаИнфоДисплей();
		Возврат РезультатВыбора.Контроль;
КонецФункции



Процедура ВыводНаДПТекущейСтроки(СтрокаТовар) Экспорт
	Текст1 = лев(СтрокаТовар.Товар.Наименование,20) + Символы.ПС;
	Текст2 = "" + СтрокаТовар.Количество + СтрокаТовар.Товар.ЕдиницаИзмерения + " ";
	СтрДлина2 = СтрДлина(Текст2);
	Текст2 = Текст2 + Прав("                    =" + СтрокаТовар.Сумма, 20 - СтрДлина2);
	Текст = Текст1 + Текст2;
	ИнтерфейсРМ.ВыводНаДП("ВывестиТекст", Текст);
КонецПроцедуры

Процедура ОткрытьМенюОпераций() Экспорт
	СброситьТекущийДокумент(Ложь);
	ОбработкаРА = ИнтерфейсРМ.ПолучитьОбъектОбработки("РежимАдминистратора");
	Результат = ОбработкаРА.ПолучитьФорму("Форма"+глПараметрыРМ.ИнтерфейсТип).ОткрытьМодально();
	Если Результат = "Возврат" Тогда
		Если ТекущийРежим = "ВОЗВРАТ" Тогда
			Возврат;
		КонецЕсли;
		ТекущийРежим = "ВОЗВРАТ";
		ИнициализацияВозврата();
	ИначеЕсли Результат = "ВыходОС" Тогда
		ВыходОС = Истина;
		ГлавнаяФорма.Закрыть();
	ИначеЕсли Результат = "ВыходИзРежима" Тогда
		
		ДействияПриВозвратеВФорму();
	ИначеЕсли Результат = "Заблокировать" Тогда
		Заблокировать();
	КонецЕсли;
КонецПроцедуры

Функция ФирмаПоТовару(Товар)
	
	Возврат глПараметрыРМ.Фирма;
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|	ТоварыПоФирмам.Фирма
	//|ИЗ
	//|	РегистрСведений.ТоварыПоФирмам КАК ТоварыПоФирмам
	//|ГДЕ
	//|	ТоварыПоФирмам.ИнформационнаяБаза = &ИнформационнаяБаза
	//|	И ТоварыПоФирмам.ВидМеню = &ВидМеню");	
	//Запрос.УстановитьПараметр("ВидМеню", Товар.Владелец);
	//Запрос.УстановитьПараметр("ИнформационнаяБаза", ПараметрыСеанса.ТекущаяИБ);
	//тзФирмаИзРегистра = Запрос.Выполнить().Выгрузить(); 
	//Если тзФирмаИзРегистра.Количество() Тогда
	//	Возврат тзФирмаИзРегистра[0][0];
	//Иначе
	//	Возврат Константы.ОсновноеМестоРеализации.Получить().Фирма;
	//КонецЕсли;
	
КонецФункции

// Выбор конкретного товара для ввода из списка предложенных
//
Функция ВыбратьТоварИзСписка(МассивТоваров)
	
	Возврат МассивТоваров[0];
	МассивТоваров = РазвернутьМассивТоваров(МассивТоваров);
	
	Если МассивТоваров.Количество()=0 Тогда
		Возврат Справочники.Товары.ПустаяСсылка();
	ИначеЕсли МассивТоваров.Количество()=1 Тогда
		Возврат МассивТоваров[0];
	Иначе	
		Возврат ИнтерфейсРМ.ВыборИзСписка(МассивТоваров);
	КонецЕсли;
	
КонецФункции

// В исходном списке могут быть и товары "не в продаже" и группы,
// надо из него получить полный список всех товаров "в продаже"
Функция РазвернутьМассивТоваров(МассивТоваров)
	
	МассивДляВыбора = Новый Массив;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ Ссылка ИЗ Справочник.Товары
	|ГДЕ Ссылка В ИЕРАРХИИ (&МассивТоваров) И НЕ ЭтоГруппа И НЕ ПометкаУдаления И ЕстьВПродаже
	|
	|УПОРЯДОЧИТЬ ПО Порядок");
	
	Запрос.УстановитьПараметр("МассивТоваров", МассивТоваров);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивДляВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла; 
	
	Если МассивДляВыбора.Количество()=0 Тогда
		Текст1="Нет доступа!";
		
		Если МассивТоваров.Количество()=1 Тогда
			Тов = МассивТоваров[0];
			Если Тов.ЭтоГруппа Тогда
				Текст2="В группе """+Тов.Наименование+""" ничего нет в продаже...";
			Иначе
				Текст2="Товара """+Тов.Наименование+""" нет в продаже...";
			КонецЕсли;
		Иначе
			Текст2="Среди выбранных товаров ничего нет в продаже...";
		КонецЕсли;
		
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
	КонецЕсли;
	
	Возврат МассивДляВыбора;
КонецФункции

// Выводит диалог ввода возраста, если по заказу возраст еще не запрашивался
//
// Параметры:
//  Заказ  				- ДокументОбъект.Заказ
//	МинимальныйВозраст  - Число - минимальный возраст, лет
//
// Возвращаемое значение:
//   Булево
//
Функция КонтрольВозвраста(ГруппаКонтроля, фАлкоголь)
	МинимальныйВозраст = МинимальныйВозраст(ГруппаКонтроля);
	ПервыйВводДаты = Ложь;
	ДатаРождения = Заказ.ДатаРождения;
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		ПервыйВводДаты = Истина;
		ДатаРождения = ИнтерфейсРМ.ВводДаты("Введите дату рождения покупателя");
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ДатаРождения) Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Контроль возраста", "Ошибка ввода даты", "Некорректная дата.
		|Дата вводится в формате `23.06.1989`","","ОК","");
		ДатаРождения = '00010101';
		Возврат Ложь
	КонецЕсли;
	
	Если ДатаРождения < Дата(1880,1,1) Тогда // Надеюсь, не будет более "взрослых" покупателей
		ИнтерфейсРМ.ВопросПредупреждение("Контроль возраста", "> 140 лет", "Некорректная дата.
		|Дата вводится в формате `23.06.1989`","","ОК","");
		Заказ.ДатаРождения = '00010101';
		Возврат Ложь;
	КонецЕсли;
	
	Если ДобавитьМесяц(ДатаРождения, 12 * МинимальныйВозраст) > ТекущаяДатаНаСервере() Тогда 
		ИнтерфейсРМ.ВопросПредупреждение("Контроль возраста", "Продажа данного товара запрещена", "Покупателю меньше " + МинимальныйВозраст + " лет." ,"","ОК","");
		Заказ.ДатаРождения = '00010101';
		Возврат Ложь;
	ИначеЕсли ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Алкоголь и фАлкоголь = 1 Тогда
		Заказ.ДатаРождения = ДатаРождения;
		ЗаписатьЗаказ();
		Возврат Не ПервыйВводДаты;
	Иначе
		Заказ.ДатаРождения = ДатаРождения;
		ЗаписатьЗаказ();
		Возврат Истина;
	КонецЕсли;
	
КонецФункции // ()

Функция ЗначениеПараметраОграничения(ПараметрОграниченийПродаж, ГруппаКонтроля)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗначенияПараметровОграниченийПродажи.ЗначениеПараметраОграничения
	|ИЗ
	|	РегистрСведений.ЗначенияПараметровОграниченийПродажи КАК ЗначенияПараметровОграниченийПродажи
	|ГДЕ
	|	ЗначенияПараметровОграниченийПродажи.КодГруппыОграниченияПродажи = &КодГруппыОграниченияПродажи
	|	И ЗначенияПараметровОграниченийПродажи.ГруппаКонтроляПродажи = &ГруппаКонтроляПродажи
	|	И ЗначенияПараметровОграниченийПродажи.ПараметрОграниченийПродаж = &ПараметрОграниченийПродаж");
	Запрос.УстановитьПараметр("КодГруппыОграниченияПродажи", ПараметрыСеанса.ТекущаяИБ.КодГруппыОграниченияПродажи);
	Запрос.УстановитьПараметр("ГруппаКонтроляПродажи", ГруппаКонтроля);
	Запрос.УстановитьПараметр("ПараметрОграниченийПродаж", ПараметрОграниченийПродаж);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда Возврат Неопределено Иначе Возврат Рез.Выгрузить()[0][0] КонецЕсли;
	
КонецФункции

Функция МинимальныйВозраст(ГруппаКонтроля)
	
	МинимальныйВозраст = ЗначениеПараметраОграничения(Справочники.ПараметрыОграниченийПродаж.МинимальныйВозраст, ГруппаКонтроля);
	Если МинимальныйВозраст = Неопределено Тогда МинимальныйВозраст = 0 КонецЕсли;
	Попытка
		МинимальныйВозраст = Число(МинимальныйВозраст);
	Исключение
		МинимальныйВозраст = 18;
	КонецПопытки;
	
	Если ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Алкоголь ИЛИ ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Сигареты Тогда
		МинимальныйВозраст = Макс(18, МинимальныйВозраст);
	КонецЕсли;
	
	Возврат МинимальныйВозраст;
	
КонецФункции

Функция ВремяПродажиВрамках(ГруппаКонтроля)
	Результат = Ложь;
	// Время хранится строкой, в формате "8-21" (или "8:30-21:30")
	ВремяПродажи = ЗначениеПараметраОграничения(Справочники.ПараметрыОграниченийПродаж.ЧасыПродажи, ГруппаКонтроля);
	Если ВремяПродажи = Неопределено Тогда ВремяПродажи = "" КонецЕсли;
	ПозицияДефиса = СтрНайти(ВремяПродажи, "-");
	Если ПозицияДефиса > 1 Тогда
		ВремяС = Лев(ВремяПродажи, ПозицияДефиса - 1);
		ВремяПо = Сред(ВремяПродажи, ПозицияДефиса + 1);
		ВремяС = ВремяИзСтроки(ВремяС);
		ВремяПо = ВремяИзСтроки(ВремяПо);
		ТекВремя = ВремяИзДаты(ТекущаяДатаНаСервере());
		
		Результат = ЗначениеВДиапазоне(ТекВремя, ВремяС, ВремяПо);
		Если Не Результат Тогда
			//ИнтерфейсРМ.ВопросПредупреждение("Ошибка проверки времени", "Проверка времени", "Продажа " + ГруппаКонтроля + " возможна только в период " + ВремяПродажи,"" ,"ОК" ,"");	
			ТекстСообщения = "Действует ограничение времени розничной продажи алкогольной продукции.
			|Сторнируйте чек - возможна продажа только безалкогольной продукции.";
			Если ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Энергетики Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "алкогольной продукции", "энергетиков");
			КонецЕсли;
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "В чеке есть блокированный товар!", ТекстСообщения,"" ,"ОК" ,"");	
		ИначеЕсли Не ЗначениеВДиапазоне(ТекВремя, ВремяС, ВремяПо - 300) Тогда	// за 5 минут
			ТекстСообщения = "Действует ограничение времени розничной продажи алкогольной продукции. 
			|Возможна продажа только безалкогольной продукции.";
			Если ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Энергетики Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "алкогольной продукции", "энергетиков");
			КонецЕсли;
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Запрещена продажа товара!", ТекстСообщения,"" ,"ОК" ,"");	
			Результат = Ложь;
		Иначе
			ПредупреждатьОбОграниченииПродажи = Константы.ПредупреждатьОбОграниченииПродажи.Получить(); // параметр в минутах
			Если Не ЗначениеЗаполнено(ПредупреждатьОбОграниченииПродажи) Тогда
				ПредупреждатьОбОграниченииПродажи = 15;
			КонецЕсли;
			ВремяПо2 = ВремяПо - ПредупреждатьОбОграниченииПродажи * 60;
			Если Не ЗначениеВДиапазоне(ТекВремя, ВремяС, ВремяПо2) Тогда
				МинутДоБлокировки = Цел(((ВремяПо - 300) - ТекВремя) / 60);
				СловоМинут = СтрРазделить(ЧислоПрописью(МинутДоБлокировки, , "минуту, минуты, минут,ж")," ")[1];
				ТекстСообщения = СтрШаблон("Внимание! Через %1 %2 продажа алкогольной продукции будет запрещена.", МинутДоБлокировки, СловоМинут);
				Если ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.Энергетики Тогда
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "алкогольной продукции", "энергетиков");
				КонецЕсли;
				ИнтерфейсРМ.ВопросПредупреждение("Время продажи", СтрШаблон("До наступления блокировки осталось %1 %2", МинутДоБлокировки, СловоМинут), 
				ТекстСообщения, "", "ОК", "");	
			КонецЕсли;
		КонецЕсли;
	Иначе
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка проверки времени", "Проверка времени", "Не задано допостимое время продажи для " + ГруппаКонтроля,,"ОК","");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ВыполнитьКонтрольПоТекущемуДокументу() Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 0 ЗНАЧЕНИЕ(Справочник.ГруппыКонтроляПродажи.ПустаяСсылка) ГруппаКонтроля, 0 фАлкоголь");
	ТаблицаКонтроля = Запрос.Выполнить().Выгрузить();
	Для Каждого Т Из ТекущийДокумент.Товары Цикл
		Если Т.СтатусОплаты = -1 Тогда
			Нов = ТаблицаКонтроля.Добавить();
			Нов.ГруппаКонтроля = Т.Товар.ГруппаКонтроляПродажи;
			Нов.фАлкоголь = Т.фАлкоголь;		
		КонецЕсли;
	КонецЦикла;
	ТаблицаКонтроля.Свернуть("ГруппаКонтроля");
	Для Каждого Т Из ТаблицаКонтроля Цикл
		Если Не ВыполнитьКонтроль(Т.ГруппаКонтроля, 2) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

// Выполняет контроль по алгоритму группы контроля
//
// Параметры:
//  ГруппаКонтроля	- СправочникСсылка.ГруппыКонтроляПродажи
//
// Возвращаемое значение:
//   Булево   		- результат контрольной проверки
//
Функция ВыполнитьКонтроль(ГруппаКонтроля, фАлкоголь) Экспорт
	Результат = Истина;
	
	Если ТекущийРежим = "ВОЗВРАТ" Тогда
		Возврат Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ГруппаКонтроля) И Не ГруппаКонтроля = Справочники.ГруппыКонтроляПродажи.НетКонтроля Тогда
		
		Результат = ВремяПродажиВрамках(ГруппаКонтроля);
		Если Результат Тогда 
			Результат = КонтрольВозвраста(ГруппаКонтроля, фАлкоголь);
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Результат;
КонецФункции 

// Открытие формы подбора товаров
//
Процедура ПодборТоваров(ВыводПредупреждения=Истина, ОсновноеМеню=Неопределено) Экспорт
	
	
	Если ФормаПодбораТоваров <> Неопределено Тогда
		Если ФормаПодбораТоваров.открыта() Тогда
			ФормаПодбораТоваров.ВыборМеню();
		Возврат;

		КонецЕсли;
		// меню уже открыто, выбираем другое меню
	КонецЕсли; 
	
	// обновим меню
	ИнтерфейсАдмина.ОбновлениеПризнакаНаличияВПродаже(Истина);
	
	ОбработкаПодбора = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПодборТоваров");
	ОбработкаПодбора.ТипЦен = Справочники.ТипыЦен.Розничная;
	
	ФормаПодбораТоваров = ОбработкаПодбора.ПолучитьРабочуюФорму(ОсновноеМеню);
	Если ФормаПодбораТоваров = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ФормаПодбораТоваров.ВладелецФормы	= ГлавнаяФорма;
	ФормаПодбораТоваров.ВерхняяГраницаПоложения = 400;			
	ФормаПодбораТоваров.Открыть();
	// видоизменение формы заказа в зависимости от настройки меню
	глПараметрыРМ.Вставить("Окно1СИзменено", Ложь);
	ЭлементФормыТаблицаЗаказа		= ГлавнаяФорма.ЭлементыФормы.тпТовары;
	//ЭлементФормыТаблицаЗаказаТень	= ГлавнаяФорма.ЭлементыФормы.ТеньТовары;
	ЭлементФормыТаблицаВозврат		= ГлавнаяФорма.ЭлементыФормы.тпТоварыВозврат;	
	
	// уменьшаем таблицу заказа так, чтобы была видна панель с кнопками
	ЭлементФормыТаблицаЗаказа.Высота		= ВысотаТаблицыЗаказа - ФормаПодбораТоваров.ПараметрыОкна.Высота + ВысотаПодвала;
	ЭлементФормыТаблицаВозврат.Высота		= ЭлементФормыТаблицаЗаказа.Высота;
	//ЭлементФормыТаблицаЗаказаТень.Высота	= ЭлементФормыТаблицаЗаказа.Высота;
	
КонецПроцедуры

Функция ВыполнитьРегистрациюМарок() Экспорт 
	
	Если НЕ ксТрактир.ЭтоРМСтанция() Тогда
		ЗаписатьЗаказТоварыДопИнф(Истина);
		Возврат Истина;
	КонецЕсли; 
	
	ТекСтанция = глРабочееМесто.Станция;
		
	
	Если ЕстьДозаказ() Тогда
		// Выданный пейджер по станции
		МассивПейджеров = ксТрактир.ВыданныеПейджеры(Заказ.Ссылка, ТекСтанция);
		ТекПейджер = ?(МассивПейджеров.Количество() > 0, МассивПейджеров[0], Неопределено);
		
		// Выбор очередности в форме
		ОбработкаВыборОчередности 	= ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборОчередности");
		РезультатВыбора				= ОбработкаВыборОчередности.ВыполнитьВыборОчередности(ГлавнаяФорма, Заказ.Ссылка, ГлавнаяФорма.тпТовары, ТекСтанция, ТекПейджер, СледующийНомерПодачиНач, СтанцияОтборСуммаНач);
		
		Если НЕ РезультатВыбора.ВыборСделан Тогда
			// После открытия формы назначения очередности заказ на мониторе гостя отображен в режиме назначения очередности.
			// Необходимо вывести заказ в режиме редактирования 
			
			
			Возврат Ложь; // пользователь нажал кнопку "Отмена" в форме выбора
		КонецЕсли; 
		
		СледующийНомерПодачиНач = ТекущийМаксНомерПодачи + 1;
		// Заполним курсы в ТаблицаЗаказа
		ТаблицаОчередность      = РезультатВыбора.ТаблицаТовары;		
		
		Для каждого СтрокаОчередность Из ТаблицаОчередность Цикл
			
			СтрокаТовара = СтрокаОчередность.СтрокаТаблицыЗаказа;
			Курс         = СтрокаОчередность.Курс;
			ТекущийМаксНомерПодачи = Макс(Курс, ТекущийМаксНомерПодачи);
			
			Если СтрокаТовара = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			
			
			ТекущаяПодача = НайтиДобавитьПодачу(Курс, СтатусДозаказ);
			СтрокаТовара.Подача = ТекущаяПодача;
		КонецЦикла; 
		
		// Пейджер
		Если РезультатВыбора.Пейджер <> Неопределено Тогда
			ПейджерКВыдаче = РезультатВыбора.Пейджер;	
			ОбновитьИнформациюОВыданныхПейджерах();
		КонецЕсли; 
		
		
		РезультатСтр = ксТрактир.РегистрацияВыдачиПейджера(Заказ.Ссылка, глРабочееМесто.Станция, ПейджерКВыдаче);
		ЗаписатьЗаказТоварыДопИнф(Истина);
		ксТрактир.РегистрацияНовыхМарок(Заказ.Ссылка, глПараметрыРМ.Станция);
	КонецЕсли;
	
			
	Возврат Истина;
	
КонецФункции 

Функция ЗаписатьЗаказТоварыДопИнф(СоздатьМарки = Ложь) Экспорт
	
	НЗ = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьНаборЗаписей();
	ВремяНаСервере = ТекущаяДатаНаСервере();	
	Для Каждого Т Из ГлавнаяФорма.тпТовары.Строки Цикл
		НЗ.Отбор.Заказ.Установить(Заказ.Ссылка);
		НЗ.Отбор.ИдСтроки.Установить(т.ИдСтроки);
		НЗ.Прочитать();
		
		Если НЗ.Количество() = 0 Тогда
			ЗаписьРегистра = НЗ.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Т);
			ЗаписьРегистра.Заказ = Заказ.Ссылка;
			ЗаписьРегистра.РабочееМесто = ?(ЗначениеЗаполнено(Т.РабочееМесто), Т.РабочееМесто, глРабочееМесто);	
			ЗаписьРегистра.ВремяДозаказ = ТекущаяДатаНаСервере();
			ЗаписьРегистра.Станция = глРабочееМесто.Станция;
			ЗаписьРегистра.АвторЗаказано = глПользователь;
			ЗаписьРегистра.Статус = СтатусДозаказ;//;?(ксТрактир.ЭтоРМСтанция(),СтатусДозаказ, СтатусВыдано);
			Записать = Истина;
		ИначеЕсли Не т.Модифицирована Тогда
			ЗаписьРегистра = НЗ[0];
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Т);
			Записать = Истина;

			Записать = Ложь;	
		Иначе
			
			ЗаписьРегистра = НЗ[0];
			//:ЗаписьРегистра = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьМенеджерЗаписи();
			ЗаписьРегистра.Количество = Т.Количество;
			ЗаписьРегистра.КоличествоУдалено = Т.КоличествоУдалено;		
			
			Если ЗначениеЗаполнено(Т.Статус) И Т.Статус <> ЗаписьРегистра.Статус Тогда
				ЗаписьРегистра.Статус = Т.Статус;
			иначеЕсли Т.Количество-Т.КоличествоУдалено> 0 и не ксТрактир.ЭтоРМСтанция() Тогда
				//ЗаписьРегистра.Статус = СтатусВыдано;
			ИначеЕсли т.Количество = 0 Тогда
				//если удалили строку
				ЗаписьРегистра.Статус = СтатусУдалено;
			КонецЕсли;
			ЗаписьРегистра.Подача = т.Подача;
			Записать = Истина;
		КонецЕсли;
		
		
		ЗаписьРегистра.Станция = глРабочееМесто.Станция;
		ЗаписьРегистра.РабочееМесто = глРабочееМесто;
		
		Если СоздатьМарки 	
			и не ЗначениеЗаполнено(ЗаписьРегистра.НомерМарки) 
			и т.РабочееМесто = глРабочееМесто 
			и (ЗаписьРегистра.Статус = СтатусДозаказ)
			и ксТрактир.ЭтоРМСтанция()
			и т.Количество Тогда
			НомерМарки = НомерМарки;
			ЗаписьРегистра.НомерМарки = ?(НомерМарки = Неопределено, ксТрактир.ПолучитьНовыйНомерМарки(), НомерМарки);
			НомерМарки = ЗаписьРегистра.НомерМарки;
			ЗаписьРегистра.КодПодтверждения = ЗаписьРегистра.ИдСтроки;
			ЗаписьРегистра.Статус = СтатусЗаказано;
			ЗаписьРегистра.Станция = глРабочееМесто.Станция;
			ЗаписьРегистра.РабочееМесто = глРабочееМесто;
			ЗаписьРегистра.ВремяЗаказано = ВремяНаСервере;
			Записать = Истина;
		ИначеЕсли СоздатьМарки 
			и не ЗначениеЗаполнено(ЗаписьРегистра.НомерМарки) 
			и т.РабочееМесто = глРабочееМесто 
			и (ЗаписьРегистра.Статус = СтатусДозаказ) Тогда
			ЗаписьРегистра.Статус = СтатусВыдано;
			ЗаписьРегистра.Станция = глРабочееМесто.Станция;
			ЗаписьРегистра.РабочееМесто = глРабочееМесто;
			ЗаписьРегистра.ВремяВыдано = ВремяНаСервере;
			ЗаписьРегистра.ВремяЗаказано = ВремяНаСервере;
			ЗаписьРегистра.ВремяГотово = ВремяНаСервере;
			Записать = Истина;
		КонецЕсли;
		
		Если Записать Тогда
			НЗ.Записать(Истина);		
			
			для Каждого тСпециф из т.строки Цикл
				НЗспециф = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьНаборЗаписей();
				НЗспециф.Отбор.Заказ.Установить(Заказ.Ссылка);
				НЗспециф.Отбор.ИдСтроки.Установить(тСпециф.ИдСтроки);
				Записьспецифики = НЗспециф.добавить();
				Записьспецифики.Заказ = Заказ.Ссылка;
				Записьспецифики.ИдСтроки = тСпециф.ИдСтроки;;
				Записьспецифики.ИдСтрокиВладельца = ЗаписьРегистра.ИдСтроки;
				Записьспецифики.Товар = тСпециф.товар;
				ЗаполнитьЗначенияСвойств(Записьспецифики, ЗаписьРегистра,,"ИдСтроки,ИдСтрокиВладельца,Товар");
				НЗспециф.Записать(Истина);
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;	
	
КонецФункции


Функция ЕстьДозаказ() Экспорт
	Возврат Заказ.Товары.НайтиСтроки(Новый Структура("Статус", СтатусДозаказ)).Количество();
КонецФункции



Процедура ОпределитьПараметрыОкнаОчередности(ПараметрыОкна, МинШирина, МинВысота) Экспорт
	
	Если ГлавнаяФорма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВерхнийЭлемент = ГлавнаяФорма.ЭлементыФормы.тДата;
	НижнийЭлемент  = ГлавнаяФорма.ЭлементыФормы.ВыборМеню;
	
	ШиринаОкнаЗаказа = ГлавнаяФорма.Ширина;
	
	ПараметрыОкна.Центр  = Истина;
	ПараметрыОкна.Верх   = ВерхнийЭлемент.Верх;
	ПараметрыОкна.Ширина = Макс(МинШирина, Цел(ШиринаОкнаЗаказа*0.7)); // 70% от ширины экрана
	ПараметрыОкна.Лево	 = Макс(1, Цел((ШиринаОкнаЗаказа - ПараметрыОкна.Ширина) / 2));
	ПараметрыОкна.Высота = Макс(МинВысота, (НижнийЭлемент.Верх + НижнийЭлемент.Высота) - ВерхнийЭлемент.Верх);
	
	ОтступПоВертикали = 10;
	Если ПараметрыОкна.Высота - 2*ОтступПоВертикали > МинВысота Тогда
		// сделаем ещё отступы сверху и снизу
		ПараметрыОкна.Высота = ПараметрыОкна.Высота - 2*ОтступПоВертикали;
		ПараметрыОкна.Верх   = ПараметрыОкна.Верх + ОтступПоВертикали;
	КонецЕсли; 
	
КонецПроцедуры 


Функция НайтиДобавитьПодачу(НомерПодачи, Статус, ВремяПодачи=Неопределено, ДокСсылка=Неопределено)
		
		ВыбПодача = Неопределено;
		Для каждого Подача Из ТаблицаПодач Цикл
			Если Подача.Статус=Статус И ?(ДокСсылка=Неопределено, Подача.Номер=НомерПодачи, Подача.ДокСсылка=ДокСсылка) И ?(ВремяПодачи=Неопределено, Истина, Подача.Время=ВремяПодачи) Тогда
				ВыбПодача = Подача;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
		Если ВыбПодача=Неопределено Тогда
			ВыбПодача = ТаблицаПодач.Добавить();
		КонецЕсли; 
		
		ВыбПодача.Номер		= НомерПодачи;
		ВыбПодача.Статус	= Статус;
		ВыбПодача.Время		= ВремяПодачи;
		ВыбПодача.ДокСсылка	= ДокСсылка;
		
		Возврат ВыбПодача;
	КонецФункции


Процедура ОбрезкаОкнаПодбора() Экспорт
	ИнтерфейсРМ.ОбрезкаОкна(ФормаПодбораТоваров.Заголовок, ГлавнаяФорма.ЭлементыФормы.тпТовары.Ширина+10);
КонецПроцедуры

// Открытие формы подбора товаров
//
Процедура СменаМенюПовара() Экспорт
	
	
	Если ФормаПодбораТоваров <> Неопределено Тогда
		Если ФормаПодбораТоваров.открыта() Тогда
			// обновим меню
			ИнтерфейсАдмина.ОбновлениеПризнакаНаличияВПродаже(Истина);
			ФормаПодбораТоваров.ВыборМеню(Ложь);
			
		Иначе
			ФормаПодбораТоваров.Открыть();
			//ГлавнаяФорма.ПодключитьОбработчикОжидания("ОбрезкаОкнаПодбора",0.1,1);
			//Возврат;
		КонецЕсли;
		// меню уже открыто, выбираем другое меню
	Иначе
		ИнтерфейсАдмина.ОбновлениеПризнакаНаличияВПродаже(Истина);
		
		ОбработкаПодбора = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПодборТоваров");
		ОбработкаПодбора.ТипЦен = Справочники.ТипыЦен.Розничная;
		
		ФормаПодбораТоваров = ОбработкаПодбора.ПолучитьРабочуюФорму(Неопределено);
		Если ФормаПодбораТоваров = Неопределено Тогда
			Возврат;
		КонецЕсли; 
	
	КонецЕсли; 
	
	// обновим меню
		
	ФормаПодбораТоваров.ВладелецФормы	= ГлавнаяФорма;
		
	ФормаПодбораТоваров.ОбрезатьОкно = Истина;
	ФормаПодбораТоваров.ОкноЛево  = ГлавнаяФорма.ЭлементыФормы.тпТовары.Лево - 5;
	ФормаПодбораТоваров.ОбрезкаОкнаШирина = Мин(ГлавнаяФорма.ЭлементыФормы.тпТовары.Ширина+10,800);
	Если Не ФормаПодбораТоваров.Открыта() Тогда
		ФормаПодбораТоваров.Открыть();
	КонецЕсли;
	
	
	// видоизменение формы заказа в зависимости от настройки меню
	ЭлементФормыТаблицаЗаказа		= ГлавнаяФорма.ЭлементыФормы.тпТовары;
	ЭлементФормыТаблицаВозврат		= ГлавнаяФорма.ЭлементыФормы.тпТоварыВозврат;	
	
	// уменьшаем таблицу заказа так, чтобы была видна панель с кнопками
	БылаВысота = ЭлементФормыТаблицаЗаказа.Высота;
	Попытка
		ЭлементФормыТаблицаЗаказа.Высота		= ГлавнаяФорма.Высота - (ЭлементФормыТаблицаЗаказа.Верх + ФормаПодбораТоваров.ПараметрыОкна.Высота + ВысотаПодвала);
	Исключение
	КонецПопытки;
	
	ЭлементФормыТаблицаВозврат.Высота		= ЭлементФормыТаблицаЗаказа.Высота;
	Кнопки = Массив("КнопкаКоличество","КнопкаОбщиеСпецифики", "КнопкаСпецифики","КнопкаВыдача","КнопкаИнфо");
	Для Каждого Кнопка  Из Кнопки Цикл
		//:ГлавнаяФорма = ПолучитьФорму();
		элКнопка = ГлавнаяФорма.ЭлементыФормы.Найти(Кнопка);
		Если Неопределено <> элКнопка Тогда
			элКнопка.Верх = ЭлементФормыТаблицаЗаказа.Верх+ЭлементФормыТаблицаЗаказа.Высота - 1;
		КонецЕсли;
	КонецЦикла;	
	//ЭлементФормыТаблицаЗаказаТень.Высота	= ЭлементФормыТаблицаЗаказа.Высота;
	Если БылаВысота <> ЭлементФормыТаблицаЗаказа.Высота Тогда
		//ГлавнаяФорма.ПодключитьОбработчикОжидания("ВосстановитьФорму",0.2,1);
	КонецЕсли;
КонецПроцедуры

Процедура ВосстановитьФормуМодуль(Лайтово = Ложь) Экспорт
	ЗаблокироватьВформе = Не ЗначениеЗаполнено(глПользователь);
	Если AutohotkeyDLL = Неопределено Тогда
		AutohotkeyDLL = РаботаСокнами.AHK(,"ВосстановитьФорму");
	КонецЕсли;
	
	Cкрипт = "
	|#NoTrayIcon
	|#NoEnv
	|WinWaitActive, ahk_pid %pid ahk_class V8TopLevelFrame,,15
	|;Лайтово Sleep 100
	|;Лайтово WinRestore, ahk_pid %pid ahk_class V8TopLevelFrame
	|;Лайтово WinMaximize, ahk_pid %pid ahk_class V8TopLevelFrame
	|Sleep 100
	|Send {alt down}{shift down}{VK52}{alt up}{shift up}
	|Exitapp";	
	Cкрипт = СтрЗаменить(Cкрипт, "%pid", формат(РаботаСокнами.pid, "ЧГ=0"));
	
	Если не Лайтово Тогда
		Скрипт = СтрЗаменить(Cкрипт, ";Лайтово ","");
	КонецЕсли;
	AutohotkeyDLL.ahkTextDll(Cкрипт);		
	Если ЗаблокироватьВформе Тогда
		ГлавнаяФорма.ПодключитьОбработчикОжидания("ЗаблокироватьВформе", 0.5,1);
	КонецЕсли;	
		
КонецПроцедуры


Процедура СкрытьМенюПовара() Экспорт
	ФормаПодбораТоваров.Закрыть();
	
КонецПроцедуры

Процедура МенюЛояльности() Экспорт
	Если ЗаказНеВыбран() Тогда
		Возврат;
	КонецЕсли;
	
	
	РезультатПоиска = ИнтерфейсРМЛояльность.ОткрытьМенюЛояльности();
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Если ТипЗнч(РезультатПоиска) = Тип("СправочникСсылка.Товары") Тогда
			ВыбТов = РезультатПоиска;
			Если ВыбТов.ЗапросКоличества Тогда
				ИзменитьКоличество();
			Иначе
				ТекКоличество = 1;
			КонецЕсли;
			ВводНовойСтроки(ВыбТов);
		ИначеЕсли РезультатПоиска = Справочники.ДействияЭлементовМеню.ОчиститьКупоны Тогда
			Заказ.Купоны.Очистить();
		ИначеЕсли РезультатПоиска = Справочники.ДействияЭлементовМеню.ОчиститьНомерКартыЛояльности Тогда
			ПрочитатьТекущийДокумент(Ложь,Ложь);
			РезультатПроверки = ЛояльностьКлиентСервер.ИзменитьКартуЛояльностиПоЗаказу(Заказ, "");
			Если Не РезультатПроверки.Ошибка Тогда
				
			КонецЕсли;
			Заказ.ОтказОтКартыЛояльности = 0;
			ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Открыт);
			ГлавнаяФорма.ЭлементыФормы.НадписьЛояльность1.Заголовок = "Здавствуйте!
			|Карта не применена";
			
			ЗаполнитьНадписиЛояльности();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВводТоваровДоступен()
	Попытка
		Если Не фВводТоваровДоступен Тогда
			
			Если ТекущийДокумент.Заблокирован Тогда
				Заголовок = "Заказ заблокирован, обратитесь в ОТК";
				ТекстОшибки = "Добавление позиций и сторнирование в заблокированном заказе 
				|недоступно!";
			ИначеЕсли Не ПротоколРасчетов.Пустая() И ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) И Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
				Заголовок = "Заказ был отправлен в ЕГАИС";
				ТекстОшибки = "Пробейте чек или обратитесь в ОТК"
			Иначе
				Заголовок = "Заказ оплачен";
				ТекстОшибки = "Заказ был оплачен. Добавление позиций и сторнирование в оплаченном заказе 
				|недоступно!";
			КонецЕсли;
			
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Заголовок, ТекстОшибки, "", "ОК", "", , , );
			ГлавнаяФорма.ПодключитьОбработчикОжидания("Оплата", 0.2, 1);
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
КонецФункции

Процедура ОткрытьФормуПоиска()  Экспорт 
	Если Не ВводТоваровДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаказНеВыбран() Тогда
		Возврат;
	КонецЕсли;


	ОбработкаПоиска = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПоискТовара");
	Попытка
		РезультатПоиска = ОбработкаПоиска.ВыполнитьПоиск();
	Исключение
		ЗарегистрироватьСобытие("Ошибка выполнения.Ошибка открытия формы поиска", УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		ВыбТов = РезультатПоиска.Товар;
		Если ВыбТов.ЗапросКоличества Тогда
			Если Не ЗначениеЗаполнено(ТекКоличество) Или ТекКоличество = 1 Тогда
				ИзменитьКоличество();
			КонецЕсли;
		КонецЕсли;
		ВводНовойСтроки(ВыбТов, , РезультатПоиска.ШК);
	КонецЕсли;
КонецПроцедуры

Функция НомерТекущегоЗаказа() Экспорт
	Если ТекущийРежим = "" Тогда
		Возврат "";
	КонецЕсли;
	ПроинициализироватьЗаказЕслиНеПроинициализирован();
	Попытка
		НомерТекущегоЗаказа = Число(УбратьВсеБуквы(ТекущийДокумент.Номер));
		НомерТекущегоЗаказа = Формат(НомерТекущегоЗаказа, "ЧГ=0");
		Возврат НомерТекущегоЗаказа;
	Исключение
		Возврат ТекущийДокумент.Номер;
	КонецПопытки;
КонецФункции

Функция НомерТекущейСмены() Экспорт
	НомерТекущейСмены = НомерТекущейСмены;
	глПараметрыРМ.Свойство("НомерСмены", НомерТекущейСмены);
	Если Не ЗначениеЗаполнено(НомерТекущейСмены) Тогда
		ОткрытьЧек();
	КонецЕсли;
	Если ТипЗнч(глПараметрыРМ.НомерСмены) = Тип("Число") Тогда
		Возврат Формат(глПараметрыРМ.НомерСмены, "ЧГ=0");
	КонецЕсли;

	Возврат глПараметрыРМ.НомерСмены;
КонецФункции

Функция НомерТекущегоЧека() Экспорт
	НомерТекущегоЧека = 0;
	глПараметрыРМ.Свойство("НомерТекущегоЧека", НомерТекущегоЧека);
	Если НомерТекущегоЧека = Неопределено Тогда 
		ОткрытьЧек();
		глПараметрыРМ.Свойство("НомерТекущегоЧека", НомерТекущегоЧека);
	КонецЕсли;
	Если ТипЗнч(НомерТекущегоЧека) = Тип("Число") Тогда
		Возврат Формат(НомерТекущегоЧека, "ЧГ=0");
	КонецЕсли;
	Возврат НомерТекущегоЧека;
КонецФункции

Процедура ЗаполнитьНадписиЛояльности(Сразу = Ложь) Экспорт
	Если Сразу Тогда
		ГлавнаяФорма.ОтключитьОбработчикОжидания("ЗаполнитьНадписиЛояльности_ОбработчикОжидания");		
		ЗаполнитьНадписиЛояльности_ОбработчикОжидания();
		
	Иначе
		ГлавнаяФорма.ПодключитьОбработчикОжидания("ЗаполнитьНадписиЛояльности_ОбработчикОжидания",0.5,Истина);		
	КонецЕсли;                                                                                                  	
КонецПроцедуры

Процедура ЗаполнитьНадписиЛояльности_ОбработчикОжидания() Экспорт
	//ЭлементыФормы = ГлавнаяФорма.ЭлементыФормы;
	//НомерКартыЛояльности = Заказ.НомерКартыЛояльности;
	//Если ПустаяСтрока(НомерКартыЛояльности) Тогда
	//	ДанныеГостя = ЛояльностьКлиентСервер.СтруктураДанныхЛояльностиПоЗаказу("INFO", , Истина);
	//	Для Сч = 1 По 2 Цикл
	//		//ЭлементыФормы["Плашка" + Сч].Заголовок = "";
	//		ГлавнаяФорма.УстановитьВидимостьКнопки("Плашка"+Сч,0,,,0);
	//	КонецЦикла;
	//	ЭлементыФормы.НадписьЛояльность2.Заголовок = "";
	//	//ГлавнаяФорма.СкрытьПлашки();		
	//Иначе
	//	
	//	ДанныеГостя = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Заказ.Ссылка, "INFO");
	//	
	//	КупоныГостя = Лояльность.ПолучитьСписокКупоновГостя(Заказ.Ссылка, глРабочееМесто.Фирма.КодТТ, глПараметрыРМ.Тест);
	//	Для Сч = 0 По КупоныГостя.ВГраница() Цикл
	//		Если Сч > 1 Тогда
	//			Прервать;
	//		КонецЕсли;
	//		ЭлементыФормы["Плашка" + (Сч+1)].Заголовок = КупоныГостя[Сч].ИнфоСтанции;
	//		ГлавнаяФорма.УстановитьВидимостьКнопки("Плашка" + (Сч+1),1,,,0);
	//	КонецЦикла;
	//	
	//	ПредвРасчет = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Заказ.Ссылка, "CALC");
	//	Если НЕ ПредвРасчет.Ошибка Тогда
	//		СтрокиИнфо = СтрокиИнфо;
	//		ПредвРасчет.Свойство("ИнфоСтанции", СтрокиИнфо);
	//		стр = "";
	//		Для Каждого Т Из СтрокиИнфо Цикл
	//			Поз = СтрНайти(Т, "|");
	//			
	//			Текстрл = Лев(Т, Поз - 1);
	//			Длина = СтрДлина(Текстрл);
	//			стр = стр + Текстрл + СтрДополнитьСлева(Сред(Т,Поз+1), 27-Длина) + Символы.ПС;
	//		КонецЦикла;
	//		ЭлементыФормы.НадписьЛояльность2.Заголовок = стр;
	//		ЭлементыФормы.НадписьЛояльность2.Видимость = 1;
	//	Иначе
	//		ЭлементыФормы.НадписьЛояльность2.Заголовок = "";
	//	КонецЕсли;
	//	//ГлавнаяФорма.ПоказатьПлашки();		
	//КонецЕсли;
	//
	//Если ДанныеГостя.Ошибка Тогда
	//	ЭлементыФормы.НадписьЛояльность1.Заголовок = "Здравствуйте!";
	//	ГлавнаяФорма.СкрытьПлашки();
	//	
	//Иначе	
	//	НомерКартыЛояльности = СокрЛП(Формат(ДанныеГостя.НомерКарты, "ЧГ=0"));
	//	Попытка
	//		Имя = СтрРазделить(ДанныеГостя.ФИО, " ")[0];
	//	Исключение
	//	    Имя = "Гость";
	//	КонецПопытки;
	//	ЭлементыФормы.НадписьЛояльность1.Заголовок = СтрШаблон("Здравствуйте, %1!
	//	|Карта %2*****%3", Имя, Лев(НомерКартыЛояльности, 2), Прав(НомерКартыЛояльности, 4));
	//	
	//КонецЕсли;
	//
	ЛояльностьДанныеЗаказа = ИнтерфейсРМЛояльность.ОбновитьТовары(ГлавнаяФорма);
	тзЛояльностьДанныеЗаказа = тзЛояльностьДанныеЗаказа();
	ИнтерфейсРМЛояльность.ОбновитьНадписьПриветствие(ГлавнаяФорма);
	ИнтерфейсРМЛояльность.ОбновитьКупоны(ГлавнаяФорма,,ЛояльностьДанныеЗаказа);
	ИнтерфейсРМЛояльность.ОбновитьТабДокЛояльность(ГлавнаяФорма,,ЛояльностьДанныеЗаказа);
	ПоказатьЗаказНаМонитореГостя();
	ГлавнаяФорма.ЭлементыФормы.тпТовары.ОбновитьСтроки();
КонецПроцедуры

Процедура ОчиститьИнтерфейсЛояльности() Экспорт
	ЛояльностьДанныеЗаказа = ИнтерфейсРМЛояльность.ОбновитьТовары(ГлавнаяФорма);
	ИнтерфейсРМЛояльность.ОбновитьНадписьПриветствие(ГлавнаяФорма);
	ИнтерфейсРМЛояльность.ОбновитьКупоны(ГлавнаяФорма,,ЛояльностьДанныеЗаказа);
	ИнтерфейсРМЛояльность.ОбновитьТабДокЛояльность(ГлавнаяФорма,,ЛояльностьДанныеЗаказа);
КонецПроцедуры

Функция тзЛояльностьДанныеЗаказа() Экспорт
	тзЛояльностьДанныеЗаказа = Новый ТаблицаЗначений;
		
	Если ЛояльностьДанныеЗаказа = Неопределено Тогда
		Возврат тзЛояльностьДанныеЗаказа;
	КонецЕсли;	
	
	
	
	
КонецФункции

Процедура ВводКартыЛояльности() Экспорт 
	
	РезультатВвода = ИнтерфейсРМЛояльность.ВводКартыЛояльности(Заказ);
	Если РезультатВвода.Ошибка = Истина Тогда
		Возврат;
	КонецЕсли;
	БылаКартаДоЗаписи = Заказ.НомерКартыЛояльности;
	ЗаписатьЗаказ(Перечисления.СтатусыЗаказа.Открыт);
	Если БылаКартаДоЗаписи <> Заказ.НомерКартыЛояльности Тогда
		Возврат;
	КонецЕсли;  	
	
	Если ЗначениеЗаполнено(РезультатВвода.ТоварКарты) Тогда
		СтрокаТЧ = Заказ.Товары.Найти(РезультатВвода.ТоварКарты, "Товар");
		Если СтрокаТЧ = Неопределено Тогда
			ВводНовойСтроки(РезультатВвода.ТоварКарты);			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Заказ.НомерКартыЛояльности) Тогда
		ЛояльностьКлиент.ОткрытьЗаказ(Заказ);
		ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
		Лояльность.ОбновитьПредварительныйРасчетЗаказа(Заказ.Ссылка, глПараметрыРМ.Тест);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаказНеВыбран() Экспорт 
	
	флЗаказОткрыт = ТекущийРежим <> "";
	
	Если НЕ флЗаказОткрыт Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Предупреждение", "Заказ не выбран!", "Добавление/сторно товаров не возможно.
		|Откройте заказ и попробуйте еще раз.", "", "ОК", "", , Ложь);
		СброситьТекущийДокумент(Истина, Истина);
	КонецЕсли;
	
	Возврат НЕ флЗаказОткрыт;
	
	
КонецФункции

// Выбор специфики
//
Процедура ВыборСпецифики(ФлагОбщая=Ложь, СтрокаЗаказа=Неопределено) Экспорт
	
	Если глВерсия=1 Тогда   
		Возврат;
	КонецЕсли;
	
	Если СтрокаЗаказа = Неопределено Тогда
		  
		СтрокаЗаказаОтбор = ГлавнаяФорма.ЭлементыФормы.тпТовары.ТекущаяСтрока;
		СтрокаЗаказа = СтрокаЗаказаОтбор;
		
	КонецЕсли;
	
	Если СтрокаЗаказа = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	  
	//Если Защита.ВыборСпецифики(ФормаЗаказа, ФлагОбщая, СтрокаЗаказа) Тогда
	//	ЕстьДозаказ = Истина;
	//	Модифицирован = Истина;
	//КонецЕсли; 
	
	Способ = 1;
	
	Если Способ = 0 Тогда
		Если ВыполнитьВыборСпецификВФорме(ГлавнаяФорма, ФлагОбщая, СтрокаЗаказа) Тогда
			ЕстьДозаказ = Истина;
			Модифицирован = Истина;
		КонецЕсли; 
		
	Иначе	
		// выбор через обработку "ВыборСпецифик" 
		Если ВыполнитьВыборСпецификВФорме(ГлавнаяФорма, ФлагОбщая, СтрокаЗаказа) Тогда
			ЕстьДозаказ = Истина;
			Модифицирован = Истина;
		КонецЕсли; 
	КонецЕсли; 
	
	ПоказатьЗаказНаМонитореГостя();
	
	
КонецПроцедуры

  
Функция ВыполнитьВыборСпецификВФорме(ФормаЗаказа, ФлагОбщая, СтрокаЗаказа)
	
	СтрокаТовара = ПолучитьСтрокуТовара(СтрокаЗаказа);
	Модиф = Ложь;
	НайтиСтатусТовара=СтрокаЗаказа.Статус;
	Если ЗначениеЗаполнено(НайтиСтатусТовара) Тогда
		Статус = СтрокаЗаказа.Статус;
		Если (Статус <> СтатусДозаказ) Или ЗначениеЗаполнено(СтрокаТовара.НомерМарки) Тогда
			Текст="Нельзя добавлять специфику в записанном заказе. Удалите блюдо и создайте его заново!!!";
			Заголовок="Нет доступа!";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Заголовок,Текст,"","ОК","");
			Возврат Модиф;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ФлагОбщая Тогда
		СтрокаТовара = ПолучитьСтрокуТовара(СтрокаЗаказа);
		//Модиф = Защита.ВыборСпецифики(ФормаЗаказа, ФлагОбщая, СтрокаЗаказа);
		
		ГруппаОбщих=Константы.ГруппаОбщихСпецифик.Получить();
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	Специфики.Ссылка
		|ИЗ
		|	Справочник.Специфики КАК Специфики
		|ГДЕ
		|	НЕ Специфики.ЭтоГруппа
		|	И НЕ Специфики.ПометкаУдаления
		|	//Убрать 
		|	//Группа
		|
		|УПОРЯДОЧИТЬ ПО
		|	Специфики.Порядок";
		Если ЗначениеЗаполнено(ГруппаОбщих) Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"//Группа","И Специфики.Ссылка В ИЕРАРХИИ(&ГруппаОбщих)");				 
			Запрос.УстановитьПараметр("ГруппаОбщих",ГруппаОбщих);
		КонецЕсли;
		МассивПомеченных=Новый Массив;
		//МассивПомеченных=СтрокаТовара.Строки.ВыгрузитьКолонку("Товар");
		Для Каждого СтрТ из СтрокаТовара.Строки Цикл
			Если ксТрактир.ОбщаяСпецифика(СтрТ.Товар) Тогда
				МассивПомеченных.Добавить(СтрТ.Товар);
			КонецЕсли;
		КонецЦикла;	
		
		Если МассивПомеченных.Количество()<>0 Тогда
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"//Убрать","И НЕ Специфики.Ссылка В (&Помеченные)");
			Запрос.УстановитьПараметр("Помеченные",МассивПомеченных);
		КонецЕсли;	
		МассивВыбора=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		РезультатВыбора=ИнтерфейсРМ.ВыборИзСписка(МассивВыбора, Истина, МассивПомеченных,"Выбор специфики", "Специфики приготовления");
		Модиф=Ложь;
		Если (ТипЗнч(РезультатВыбора)=Тип("СправочникСсылка.Специфики") и ЗначениеЗаполнено(РезультатВыбора)) или (ТипЗнч(РезультатВыбора)=Тип("Массив") и РезультатВыбора.Количество()>0) Тогда
			Модиф=ДобавитьНовыеСпецифики(СтрокаТовара, РезультатВыбора);
		КонецЕсли;
		Если Модиф Тогда
			//ИсправитьСтрокуСОбщейСпецификой(СтрокаТовара);
		КонецЕсли; 
		
		Если ФормаЗаказа <> Неопределено Тогда
			ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.тпТовары;
			ТабПолеТЗ.ТекущаяСтрока = СтрокаТовара;
			ТабПолеТЗ.Развернуть(СтрокаТовара, Истина);
						
		КонецЕсли; 
		Возврат Модиф;                 
	КонецЕсли; 
	
	// выбор специфик через форму выбора
	//Модиф = Ложь;
	//
	//СтрокаТовара = ПолучитьСтрокуТовара(СтрокаЗаказа);
	
	Если (СтрокаТовара.Количество = 0) И (СтрокаТовара.КоличествоУдалено + СтрокаТовара.УдаленоСейчас > 0) Тогда // в типовом варианте это можно сделать...
		Текст1="Нет доступа!";
		Текст2="Нельзя добавлять специфику к удаленному товару!";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
		Возврат Модиф;		
	КонецЕсли; 
	ГлавнаяФорма.ОтключитьОбработчикОжидания("ПоказатьЗаказНаМонитореГостя_ОбработчикОжидания");	
	фВыборСпецифик = 1;
	Попытка
		ОбработкаВыборСпецифик = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборСпецифик");
		РезультатВыбора = ОбработкаВыборСпецифик.ВыполнитьВыборСпецифик(СтрокаТовара,,,СтрокаЗаказа);	
	Исключение
		фВыборСпецифик = 0;
	КонецПопытки;
	
	
	Если РезультатВыбора.ВыборСделан И РезультатВыбора.Контроль Тогда
		Модиф = ОбновитьСпецификиПоСтрокеТовара(СтрокаТовара, РезультатВыбора.Специфики);
		//Z+			
		//СтрокаТовара.Строки.Сортировать("НомерСтроки, ");
	КонецЕсли; 
	
	Если ФормаЗаказа <> Неопределено Тогда
		//СтрокаТовара.Строки.Сортировать("Цена");
		// разворачиваем специфики
		ТабПолеТЗ = ФормаЗаказа.ЭлементыФормы.тпТовары;
		ТабПолеТЗ.ТекущаяСтрока = СтрокаТовара;
		ТабПолеТЗ.Развернуть(СтрокаТовара, Истина);
		
		ТабПолеТЗ.ТекущаяСтрока = СтрокаТовара;
	КонецЕсли; 
	
	Возврат Модиф;
КонецФункции 

Функция ПолучитьСтрокуТовара(СтрокаЗаказа)
	
	Если СтрокаЗаказа.Родитель = Неопределено Тогда
		Возврат СтрокаЗаказа;
	Иначе
		Возврат ПолучитьСтрокуТовара(СтрокаЗаказа.Родитель);
	КонецЕсли; 
	
КонецФункции 

Функция ОбновитьСпецификиПоСтрокеТовара(Знач СтрокаДокЗаказ, ДеревоСпецифик, Перечитывать = Истина)
	
	ИдСтроки = СтрокаДокЗаказ.ИдСтроки;
	
	НЗспецифики = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьНаборЗаписей();
	НЗспецифики.Отбор.Заказ.Установить(Заказ.Ссылка);
	НЗспецифики.Прочитать();
	
	Для Каждого Т Из НЗспецифики Цикл
		Если Т.ИдСтрокиВладельца = СтрокаДокЗаказ.ИдСтроки Тогда
			МЗ = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьМенеджерЗаписи();
			МЗ.Заказ = Заказ.Ссылка;
			МЗ.ИдСтроки = Т.ИдСтроки;
			мз.Прочитать();
			МЗ.Удалить();
		КонецЕсли;
	КонецЦикла;

	Если Перечитывать Тогда
		ПрочитатьТекущийДокумент(Ложь, Ложь);
	КонецЕсли;
	
	СтрокаТпТовары = ГлавнаяФорма.тпТовары.строки.Найти(ИдСтроки, "ИдСтроки");
	СтрокаТпТовары.Модифицирована = 1;
	СтрокаДокЗаказ = Заказ.Товары.Найти(ИдСтроки, "ИдСтроки");
	МсСпецифики = Заказ.Специфики.НайтиСтроки(Новый Структура("НомерСтрокиТовара", СтрокаДокЗаказ.НомерСтроки));
	Для Каждого Т Из МсСпецифики Цикл
		//:Т = Заказ.Товары[0];
		Заказ.Специфики.Удалить(Т);
	КонецЦикла;
	
	СтрокаТпТовары.Строки.Очистить();
	Для Каждого СтрокаСпецифика из ДеревоСпецифик.Строки Цикл
		НовСтрокаСпецифика = Заказ.Специфики.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаСпецифика, СтрокаСпецифика);
		НовСтрокаСпецифика.НомерСтрокиТовара = СтрокаДокЗаказ.НомерСтроки;
		НовСтрокаСпецифика.ЦенаРеализации = НовСтрокаСпецифика.Цена;
		НовСтрокаСпецифика.Цена = НовСтрокаСпецифика.Цена;
		НовСтрокаСпецифика.ИдСтроки = Заказ.идСтроки("" + НовСтрокаСпецифика.НомерСтрокиТовара + "_" + НовСтрокаСпецифика.НомерСтроки);
		
		НовСтрокаТПспецифика = СтрокаТпТовары.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаТПспецифика, НовСтрокаСпецифика);
		НовСтрокаТПспецифика.Товар = НовСтрокаСпецифика.Специфика;
		НовСтрокаТПспецифика.Статус = СтатусДозаказ;
	КонецЦикла;
	РасчетПоСтроке(СтрокаДокЗаказ);
	
	ЗаписатьЗаказ();
	ГлавнаяФорма.ЗаполнитьТПтовары();
	ОбновитьСтатусыСтрок();
	ПоказатьЗаказНаМонитореГостя();
	ГлавнаяФорма.ОбновитьНадписьИтого();
	Возврат Истина;
	
КонецФункции 

// Изменение курса подачи или отметить выдачу
//
Процедура ИзменитьКурс(РаботаСВыдачей = Ложь) Экспорт
	
	СтрокаЗаказа = ГлавнаяФорма.ЭлементыФормы.тпТовары.ТекущаяСтрока;	
	
	Если СтрокаЗаказа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	// Курсы и выдача идут только по строке заказа (не по специфике).
	// Поэтому сразу определим правильную строку.
	
	СтрокаЗаказа = ПолучитьСтрокуТовара(СтрокаЗаказа);
	
	
	Если СтрокаЗаказа = Неопределено ИЛИ СтрокаЗаказа.Количество = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если СтрокаЗаказа = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ВыполнитьПроверкуПоСтанции(СтрокаЗаказа) Тогда
		Возврат; //Корректировка возможна только по строкам, добавленным на текущий станции.
	КонецЕсли;
	
	//Если (СтрокаЗаказа.Статус=СтатусДозаказ ИЛИ СтрокаЗаказа.Статус=СтатусОтложено) Тогда
	//	ИзменитьКурсПозиции(СтрокаЗаказа);
	//	Возврат;
	//КонецЕсли;	
	
	ТекСтатус = РегистрыСведений.ЗаказТоварыДопИнф.Получить(Новый Структура("Заказ,ИдСтроки", Заказ.Ссылка, СтрокаЗаказа.ИдСтроки)).Статус;
	
	Если ЗначениеЗаполнено(ТекСтатус) И (ТекСтатус = СтатусГотово ИЛИ (ТекСтатус = СтатусЗаказано)) Тогда
		ОтметитьВыдачу(СтрокаЗаказа);
		Возврат;
	КонецЕсли;	
	
	Текст1="Нет доступа!";
	Текст2="К этой позиции нет курсов и выдачи...";
	ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
	Возврат;
	
	
КонецПроцедуры

// Отметить выдачу
	//
Процедура ОтметитьВыдачу(СтрокаТовара,ВыводПредупреждения=Истина)
		Если ВыводПредупреждения Тогда
			Текст1="Подтвердить выдачу?";
			Текст2="Подтвердить выдачу "+СтрокаТовара.Товар.Наименование+"?";
			фПодтвердитьВыдачу = ИнтерфейсРМ.ВопросПредупреждение("Вопрос",Текст1,Текст2,"Да","","Esc=Нет") = "Да";	
		Иначе
			фПодтвердитьВыдачу = Истина;
		КонецЕсли; 
		Если фПодтвердитьВыдачу Тогда		
			  
			//Защита.ПодтверждениеВыдачи(СтрокаТовара.ИдСтроки, Заказ.Ссылка, Истина);
			Защита.ПодтверждениеВыдачи(СтрокаТовара.ИдСтроки, Заказ.Ссылка); // убран третий параметр, чтобы не появлялись всплавающие окна
			
			
			  
			// Подтверждение выдачи у специфик. 
			// Почему-то в Защита.ПодтверждениеВыдачи не подтверждается выдача специфик!
			ПодтвердитьВыдачуСпецифик(СтрокаТовара.Строки);
			
			//ПерезаполнитьСтатусыПозиций();
			  
			ксТрактир.ОбработкаПриПолнойВыдачеМарки(СтрокаТовара.ИдСтроки, Заказ.Ссылка);
			
		КонецЕсли;
		
		РасчетПоЗаказу();
		ОбновитьСтатусыСтрок();
	КонецПроцедуры
	
Процедура ПодтвердитьВыдачуСпецифик(СтрокиСпецифик)
		
		Для каждого СтрокаСпецифик Из СтрокиСпецифик Цикл
			
			//Защита.ПодтверждениеВыдачи(СтрокаСпецифик.ИдСтроки, Заказ.Ссылка, Истина);
			Защита.ПодтверждениеВыдачи(СтрокаСпецифик.ИдСтроки, Заказ.Ссылка); // убран третий параметр, чтобы не появлялись всплавающие окна
			
			Если ЗначениеЗаполнено(СтрокаСпецифик.Строки) Тогда
				ПодтвердитьВыдачуСпецифик(СтрокаСпецифик.Строки)
			КонецЕсли;	
		КонецЦикла; 
		 ОбновитьСтатусыСтрок();
	КонецПроцедуры   
	
	// Отмети


// Изменение курса подачи
//
Процедура ИзменитьКурсПозиции(СтрокаТовара)
	
	//Курс = ИнтерфейсРМ.ВводЧисла("Подача", "Число", 2, 0, ТекущаяПодача.Номер);
	//
	//Если Курс=Неопределено ИЛИ Курс=0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//  
	//Если Курс < СледующийНомерПодачиНач Тогда
	//	Текст1="Неверный курс!";
	//	Текст2="Курс ("+Курс+") меньше, чем начальный курс ("+СледующийНомерПодачиНач+")...";
	//	ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
	//	Возврат;
	//КонецЕсли; 
	//
	//ТекущийМаксНомерПодачи = Макс(Курс, ТекущийМаксНомерПодачи);
	//
	//
	//ТекущаяПодача = НайтиДобавитьПодачу(Курс, СтатусДозаказ);
	//СтрокаТовара.Подача = ТекущаяПодача;
	//
	//  
	//ЗаполнитьПоСтрокеЗаказаСтрокуОтбора(СтрокаТовара);
	//
КонецПроцедуры
	


Функция ДобавитьНовыеСпецифики(СтрокаТпТовары, ДеревоНовыхСпецифик)
	//ис(Новый Структура("СтрокаЗаказа, ДеревоНовыхСпецифик",СтрокаЗаказа, ДеревоНовыхСпецифик));
	
	ИдСтроки = СтрокаТпТовары.ИдСтроки;
	
	Если Не ПрочитатьТекущийДокумент(Ложь,Ложь) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаДокЗаказа = Заказ.Товары.Найти(ИдСтроки, "ИдСтроки");
	СтрокаТпТовары = ГлавнаяФорма.тпТовары.строки.Найти(ИдСтроки, "ИдСтроки");
	СтрокаТпТовары.Модифицирована = 1;
	СтрокаДокЗаказа = Заказ.Товары.Найти(ИдСтроки, "ИдСтроки");
	
	Если ТипЗнч(ДеревоНовыхСпецифик) = Тип("Массив") Тогда
		Для Каждого Специфика из ДеревоНовыхСпецифик Цикл
			Если СтрокаТпТовары.Строки.Найти(Специфика) = Неопределено Тогда
				Нов = Заказ.Специфики.Добавить();
				Нов.Специфика = Специфика;
				Нов.НомерСтрокиТовара = СтрокаДокЗаказа.НомерСтроки;
				Нов.ИдСтроки = Заказ.идСтроки("" + Нов.НомерСтрокиСпецифики + "_" + Нов.НомерСтроки);
				Нов.Количество = 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаСпецифика из ДеревоНовыхСпецифик.Строки Цикл
			
			Нов = Заказ.Специфики.Добавить();
			ЗаполнитьЗначенияСвойств(Нов, СтрокаСпецифика);
			Нов.НомерСтрокиТовара = СтрокаДокЗаказа.НомерСтроки;
			Нов.ИдСтроки = Заказ.идСтроки("" + Нов.НомерСтрокиСпецифики + "_" + Нов.НомерСтроки);
		КонецЦикла;
	КонецЕсли;
	ЗаписатьЗаказ();
	ПрочитатьТекущийДокумент(Истина,Истина);
	ПоказатьЗаказНаМонитореГостя();
	ГлавнаяФорма.ОбновитьНадписьИтого();
	
	Возврат Истина;
	
КонецФункции   
	


	#Область ВЕСЫ

Процедура МенюВесов(Вес) Экспорт 
	
	Если Не ВводТоваровДоступен() Тогда
		Возврат;
	КонецЕсли;
	ОбработкаПоиска = ИнтерфейсРМ.ПолучитьОбъектОбработки("ПоискPLU");
	ФормаПоиска = ОбработкаПоиска.ПолучитьФорму("Форма"+глПараметрыРМ.ИнтерфейсТип);
	ФормаПоиска.Вес = Вес;
	Если ФормаПоиска.Открыта() Тогда
		ФормаПоиска.Закрыть();
	КонецЕсли;
	Попытка
		РезультатПоиска = ФормаПоиска.ОткрытьМодально();	
	Исключение
		ЗарегистрироватьСобытие("Ошибка выполнения.Ошибка открытия формы поиска", УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		ВыбТов = РезультатПоиска.Товар;
		Если НЕ ВыбТов.ЗапросКоличества Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Неверное количество", "Количество для данного товара не может быть дробным","","ОК","");	
			Возврат;
		КонецЕсли;
		//ШК = ШтрихкодСВесом(РезультатПоиска.ШК, Вес);
		ВводНовойСтроки(ВыбТов, Вес);//, ШК);
		//Если не ПустаяСтрока(глПараметрыРМ.ИмяПринтераВесы) Тогда
		//	НапечататьЦенник(ВыбТов,ШК,Вес);
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Стандартное оформление строки заказа в соответствии с настройками РМ
//
Процедура ОформлениеСтрокиЗаказа(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	СтрокаТовара = ДанныеСтроки;
	КартинкаСтрокиТовара = 0;
	
	// статус
	ЯчейкаСтатус = ОформлениеСтроки.Ячейки.НомерСтроки;

	Если ДанныеСтроки.фАлкоголь = 1 Тогда
		ОформлениеСтроки.Ячейки.Количество.Шрифт = Новый Шрифт("FontAwesome",24);
		ОформлениеСтроки.Ячейки.Количество.УстановитьТекст(Шрифты.ПолучитьСимвол("glass"));
		ОформлениеСтроки.Ячейки.Цена.ОтображатьТекст = 0;
	Иначе
		ОформлениеСтроки.Ячейки.х.УстановитьТекст("х");	
		Если ДанныеСтроки.Количество = 0 Тогда
			ОформлениеСтроки.Ячейки.Количество.УстановитьТекст(ДанныеСтроки.КоличествоНачальное);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.Количество И не ДанныеСтроки.Уровень() Тогда
		ОформлениеСтроки.Ячейки.Равно.УстановитьТекст("=");	
	ИначеЕсли (ДанныеСтроки.Уровень() И ДанныеСтроки.Родитель.Количество = 0) Или ДанныеСтроки.Количество = 0 Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,6,,,,Истина); // зачеркнутый
	КонецЕсли; 

	
	Если ДанныеСтроки.Фирма <> глПараметрыРМ.Фирма Тогда
		ОформлениеСтроки.ЦветТекста = Метаданные.ЭлементыСтиля.НеактивнаяКнопка.Значение;
	КонецЕсли;
	
	Если ДанныеСтроки.СтатусОплаты = 1 Тогда
		ОформлениеСтроки.Ячейки.СуммаРеализации.ЦветФона = Метаданные.ЭлементыСтиля.БолееИнтенсивныйЗеленый.Значение;
		//ОформлениеСтроки.Ячейки.Сумма.ЦветФона = Метаданные.ЭлементыСтиля.ЦветФонаОплаченнойСтроки.Значение;
		//ОформлениеСтроки.Ячейки.Сумма.ЦветТекстаВыделения = Метаданные.ЭлементыСтиля.ЦветТемы.Значение;
	КонецЕсли;                                                                   	
	
	Если ДанныеСтроки.СтатусОплаты >= 0 Тогда
		ОформлениеСтроки.ЦветТекста =  Метаданные.ЭлементыСтиля.ЦветТекстаНедоступнойСтроки.Значение;
		//ОформлениеСтроки.ЦветТекстаВыделения = ОформлениеСтроки.ЦветТекста;
		//ОформлениеСтроки.ЦветФонаВыделения = Новый Цвет(255,255,255);
	КонецЕсли;
	
	Если ДанныеСтроки.Уровень() Тогда // это специфика     
		СтрокаТовара = СтрокаТовара.Родитель;
		ОформлениеСтроки.Ячейки.НомерСтроки.ВысотаЯчейки=1;
		ОформлениеСтроки.Ячейки.НомерСтроки.ОтображатьТекст = 0;
		ОформлениеСтроки.Ячейки.Товар.УстановитьТекст("    - " + ДанныеСтроки.ТОвар);
		Если ДанныеСтроки.Количество = 1 Тогда
			ОформлениеСтроки.Ячейки.Количество.ОтображатьТекст = 0;
			ОформлениеСтроки.Ячейки.Цена.ОтображатьТекст = 0;
			ОформлениеСтроки.Ячейки.х.ОтображатьТекст = 0;
			ОформлениеСтроки.Ячейки.Равно.ОтображатьТекст = 0;
		КонецЕсли;
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,7);
		ЯчейкаСтатус.ОтображатьТекст	= Ложь;
	Иначе
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,12);
		ЯчейкаСтатус.ОтображатьТекст	= Истина;
		ОформлениеСтроки.Ячейки.НомерСтроки.ВысотаЯчейки=3;

	КонецЕсли;    
	
		
	Колво = СтрокаТовара.Количество;
	
	
	Если ДанныеСтроки.Уровень() = 0 Тогда
		Статус = ДанныеСтроки.Статус;
	Иначе
		Статус = ДанныеСтроки.Родитель.Статус;
	КонецЕсли;                                   		
	
	Если Статус = СтатусУдалено Тогда
		ЯчейкаСтатус.ЦветФона	= ЦветДругое;
	ИначеЕсли Статус = СтатусГотово Тогда 
		ЯчейкаСтатус.ЦветФона	= ЦветГотово;
	ИначеЕсли Статус = СтатусДозаказ Тогда
		ЯчейкаСтатус.ЦветФона	= ЦветДозаказ; 
	ИначеЕсли Статус = СтатусВыдано Тогда
		ЯчейкаСтатус.ЦветФона	= ЦветВыдано; 
	ИначеЕсли Статус = СтатусЗаказано Тогда
		Если Колво=0 Тогда
			// здесь зачеркнутый текст - в строке товара нет количества
			ЯчейкаСтатус.ЦветФона	= ЦветДругое;
		Иначе	
			ЯчейкаСтатус.ЦветФона	= ЦветЗаказано;
		КонецЕсли; 
	Иначе
		ЯчейкаСтатус.ЦветФона	= ЦветДругое;
	КонецЕсли; 
	
	ЯчейкаСтатус.ЦветТекста = ЦветТекстаСтатус;
	
	
	
	//Если ТипЗнч(ДанныеСтроки.Товар)=Тип("СправочникСсылка.Специфики") и ксТрактир.ОбщаяСпецифика(ДанныеСтроки.Товар) Тогда
	//	ОформлениеСтроки.Ячейки.Товар.ЦветТекста=WebЦвета.Синий;
	//КонецЕсли;	
	
	
КонецПроцедуры

Процедура ИнициализацияРеквизитов()
	
	//--------------------------------------------------
	СтатусДозаказ	= Перечисления.СтатусыПозицийЗаказа.Дозаказ;
	СтатусЗаказано	= Перечисления.СтатусыПозицийЗаказа.Заказано;
	СтатусГотово	= Перечисления.СтатусыПозицийЗаказа.Готово;
	СтатусУдалено	= Перечисления.СтатусыПозицийЗаказа.Удалено;
	СтатусОтложено	= Перечисления.СтатусыПозицийЗаказа.Отложено;
	СтатусТарифВкл	= Перечисления.СтатусыПозицийЗаказа.ТарифВкл;
	
	  
	СтатусВыдано	= Перечисления.СтатусыПозицийЗаказа.Выдано;
	
	ЦветДозаказ		= Метаданные.ЭлементыСтиля.ЦветДозаказ.Значение;
	ЦветЗаказано 	= Метаданные.ЭлементыСтиля.ЦветЗаказано.Значение;
	ЦветГотово 		= Метаданные.ЭлементыСтиля.ЦветГотово.Значение;
	ЦветВыдано 		= Новый Цвет(255,255,255);
	ЦветДругое		= Новый Цвет(255,255,255);	// белый
	
	ЦветТекстаДозаказ 	= Новый Цвет(255,255,255);	// белый
	ЦветТекстаСтатус	= Новый Цвет(0,0,0); 		// черный
	
	ДопПараметрыИнфо	= Новый Структура("НомерСтрокиЗаказа, СуммаПоСтанцииНач, СброситьНастройки, ЛояльностьДанныеЗаказа");
	ТекущийМаксНомерПодачи = 1;
	фВыборСпецифик = 0;
	
	Если глВерсия>1 И Константы.РаботаСПодтверждениямиПозицийЗаказа.Получить() Тогда
		ИспользоватьЗаказТоварыДопИнф			= Истина;
		СоответствиеКодПодтвержденияНомерМарки	= Новый Соответствие;
		// Соответствие ГруппыПечати - Список РМ мониторов марок где используются эти группы
		//СоответствиеМониторРМ	= Справочники.РабочиеМеста.ПолучитьСоответствиеМониторРМ();
		// Список РМ Мониторы марок для уведомлений
		МониторыМарок			= Новый СписокЗначений;
		// Признак работы с РМ мониторы марок
		УведомитьМониторыМарок = ?(глТорговоеОборудование.Свойство("СоответствиеМониторРМ"), глТорговоеОборудование.СоответствиеМониторРМ.Количество() > 0, Ложь);
	Иначе
		ИспользоватьЗаказТоварыДопИнф			= Ложь;
		// Признак работы с РМ мониторы марок
		УведомитьМониторыМарок					= Ложь;
	КонецЕсли;
	
	ИспользоватьГруппыОплаты			= Константы.ИспользоватьГруппыОплаты.Получить();
	ОсновнаяГруппаОплаты				= Константы.ОсновнаяГруппаОплаты.Получить();
	
	// Разделение по подачам используется, помимо курсов подач, и для разделения дозаказов.
	ИспользоватьКурсы					= ?(глПараметрыРМ=Неопределено ИЛИ НЕ ИспользоватьЗаказТоварыДопИнф, Ложь, глПараметрыРМ.ЗаказИспользоватьКурсы);
	ПодтверждениеВыдачи					= ?(ИспользоватьЗаказТоварыДопИнф, Константы.ПодтверждениеВыдачи.Получить(), Ложь);
	ПодтверждениеГотовностиПриВыдачи	= ?(ИспользоватьЗаказТоварыДопИнф, Константы.ПодтверждениеГотовностиПриВыдачиБлюда.Получить(), Ложь);
	ИспользоватьРекомендации			= ?(глПараметрыРМ=Неопределено, Ложь, глПараметрыРМ.ЗаказИспользоватьРекомендации);
	СписокРекомендаций					= Неопределено;
	
	//--------------------------------------------------
	
	НомерКлюча = СтрЗаменить( Константы.КлючЗащиты_НомерКлюча.Получить(), Символы.НПП, "");
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	// Создается новый заказ
	НовыйЗаказ		= Ложь;
	
	ОпределитьТаблицуПодач();
КонецПроцедуры


Процедура МониторМарок() Экспорт
	МониторМарок = ИнтерфейсРМ.ПолучитьОбъектОбработки("МониторМарок").ПолучитьФормуМОКП();
	Если МониторМарок.ПараметрыНастройки = Неопределено Тогда
		
		Если глПараметрыРМ.НастройкиМонитораМарокСписок.Количество() = 0 Тогда
			Текст1 = "Монитор марок";
			Текст2 = "Не указана настройка монитора марок"+Символы.ПС+""""+глРабочееМесто.Наименование+"""";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли; 
		
		НастройкиОбъект = глПараметрыРМ.НастройкиМонитораМарокСписок[0].Значение.ПолучитьОбъект();
		Если НастройкиОбъект = Неопределено Тогда
			Текст1 = "Монитор марок";
			Текст2 = "Ошибка в настройках монитора марок"+Символы.ПС+""""+глРабочееМесто.Наименование+"""";
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Текст1,Текст2,"","ОК","");
			
			ДействияПриВозвратеВФорму();
			Возврат;
		КонецЕсли;	
		МониторМарок.ПараметрыНастройки = НастройкиОбъект.ПолучитьСтруктуруПараметров();
	КонецЕсли;
	Если ТекущийРежим = "ПРОДАЖА" Тогда
		МониторМарок.ЗаказОтбор = ТекущийДокумент.Ссылка;
	КонецЕсли;
	Если ВыполнитьРегистрациюМарок() Тогда
		ОбновитьСтатусыСтрок();
		МониторМарок.Открыть();
	КонецЕсли;
		
	
КонецПроцедуры

Процедура ОбновитьИнформациюОВыданныхПейджерах() Экспорт
	ГлавнаяФорма.ЭлементыФормы.кнПейджер.Видимость = ЗначениеЗаполнено(ПейджерКВыдаче);
	ГлавнаяФорма.ЭлементыФормы.кнПейджер.Заголовок = Строка(ПейджерКВыдаче);
КонецПроцедуры

Процедура ВозвратПейджера() Экспорт

	Результат = ксТрактир.ВыполнитьВозвратПейджера(Заказ.Ссылка, , Истина);
	
	Если Результат.Возвращен Тогда
		
		ОбновитьИнформациюОВыданныхПейджерах();	
		
	КонецЕсли; 
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

ПроцессВыходаЗапущен		= Ложь;
ВыходОС						= Ложь;
ВыполнитьДействияПриВозврате= Ложь;

фВводТоваровДоступен = Ложь;

ТекущийРежим = "";
ДопПараметрыИнфо	= Новый Структура("НомерСтрокиЗаказа, СуммаПоСтанцииНач, СброситьНастройки, ЛояльностьДанныеЗаказа");

Плашки = Новый Массив;

ИнициализацияРеквизитов();

#КонецЕсли
