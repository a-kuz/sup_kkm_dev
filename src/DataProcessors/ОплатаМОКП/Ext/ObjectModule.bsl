#Если Клиент Тогда
Перем Получено Экспорт;
Перем Коплате Экспорт ;
Перем Товары Экспорт;
Перем РезультатОплаты Экспорт;
Перем Оплачено Экспорт;
Перем ККМ, Обработка_ККМ;
Перем ККМ1, Обработка_ККМ1;
Перем СтрокаНал, СтрокаБезнал;
Перем ВыбВариант Экспорт;
Перем фИдетОплата Экспорт;

Перем Показатель_ПечатьЧеков Экспорт;
Перем Показатель_УТМ Экспорт;

//Перем СписокПротоколов Экспорт;

// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
// Вызывается каждый раз при обращении к объекту обработки.
// Здесь надо прописать сброс переменных в начальные значения
// Реквизиты и табличные части уже сброшены
Процедура УстановкаНачальныхЗначений() Экспорт
	СтрокаНал = Неопределено;
	СтрокаБезнал = Неопределено;
	Оплачено = 0;
	СтрокаНал = Неопределено;
	СтрокаБезнал = Неопределено;
	Коплате = 0;
	Получено = 0;
	РезультатОплаты = Новый Структура("Успех, Отмена, Неудача, СделанаОтменаОплатыКартой, Сдача", Ложь, Ложь, Ложь, Ложь, 0);
	Товары = Неопределено;
	фИдетОплата = Ложь;
	ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
	ВыбВариант = Неопределено;
	ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
	Если глПараметрыРМ.ККМЕстьДоп тогда
		Попытка
			ККМ1 = глПараметрыРМ.ККМСписокДоп[0].Значение.ПолучитьОбъект();
			ИнициализацияТО(ККМ1, Обработка_ККМ1, глПараметрыРМ);
		Исключение
			ККМ1 = Неопределено;
		КонецПопытки;
	Иначе
		ККМ1 = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция СуммаРеализации() Экспорт
	СписокФирм = ПолучитьСписокККМПоРМ();
	
	//Если глПараметрыРМ.МестоРеализации = Справочники.МестаРеализации.Ресторан Тогда
	//	Возврат Заказ.Товары.Итог("СуммаРеализации");
	//КонецЕсли;
	СуммаРеализации = 0;
	Для Каждого Т Из Товары Цикл
		Если Т.СтатусОплаты=-1 И СписокФирм.Найти(Т.Фирма,"Фирма") <> Неопределено Тогда
			СуммаРеализации = СуммаРеализации + Т.СуммаРеализации;
		КонецЕсли;
	КонецЦикла;
	Возврат СуммаРеализации;
КонецФункции

Процедура ИнициализироватьПротокол() Экспорт
	ПротоколРасчетов = Документы.ПротоколРасчетов.СоздатьДокумент();
	СсылкаНового = Документы.ПротоколРасчетов.ПолучитьСсылку(Новый УникальныйИдентификатор);
	ПротоколРасчетов.УстановитьСсылкуНового(СсылкаНового);
	ЗаполнитьЗначенияСвойств(ПротоколРасчетов, Заказ);
	ПротоколРасчетов.Заказ = Заказ.Ссылка;
	ПротоколРасчетов.Дата = ТекущаяДатаНаСервере();
	ПротоколРасчетов.ККМ = ККМ.Ссылка;
	ПротоколРасчетов.Смена = ИнтерфейсРМ.ТекущаяСмена();
	ПротоколРасчетов.МестоРеализации = ККМ.Фирма.МестоРеализации;//глПараметрыРМ.МестоРеализации;
	ПротоколРасчетов.Фирма = ККМ.Фирма;//глПараметрыРМ.Фирма;
	ПротоколРасчетов.РабочееМесто = глРабочееМесто;
	ПротоколРасчетов.Автор = глПользователь;
	Товары = Заказ.Товары;
	Попытка
		ПротоколРасчетов.РегистрацияExcise = -1;
		ПротоколРасчетов.РегистрацияЕГАИС = -1;
		ПротоколРасчетов.РегистрацияОплатаБанк = -1;
		ПротоколРасчетов.РегистрацияФН = -1;
	Исключение
	КонецПопытки;
	ВыводНаДПитого(СуммаРеализации());
КонецПроцедуры

Процедура ИнициализироватьПротоколПоВозврату() Экспорт
	ПротоколРасчетов = Документы.ПротоколРасчетов.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ПротоколРасчетов, докВозврат);
	ПротоколРасчетов.Заказ = докВозврат.Ссылка;
	ПротоколРасчетов.Дата = ТекущаяДата();
	ПротоколРасчетов.ККМ = ККМ.Ссылка;
	ПротоколРасчетов.Смена = ИнтерфейсРМ.ТекущаяСмена();
	ПротоколРасчетов.Фирма = глПараметрыРМ.Фирма;
	ПротоколРасчетов.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
	ПротоколРасчетов.МестоРеализации = глПараметрыРМ.МестоРеализации;
	ПротоколРасчетов.РабочееМесто = глРабочееМесто;
	ПротоколРасчетов.Автор = глПользователь;
	Попытка
		ПротоколРасчетов.РегистрацияExcise = -1;
		ПротоколРасчетов.РегистрацияЕГАИС = -1;
		ПротоколРасчетов.РегистрацияОплатаБанк = -1;
		ПротоколРасчетов.РегистрацияФН = -1;
	Исключение
	КонецПопытки;
	
	ВыводНаДПитого(докВозврат.Товары.Итог("Сумма"));
КонецПроцедуры

Функция ЗначениеНДС(СтавкаНДС, Числом = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		Возврат 0;
	КонецЕсли;
	стрНДС = Строка(СтавкаНДС);
	Если Найти(стрНДС,"18") Тогда
		Возврат "18";
	ИначеЕсли Найти(стрНДС,"10") Тогда
		Возврат "10";
	Иначе
		Возврат ?(Числом, 0, "без НДС");
	КонецЕсли;
КонецФункции

Функция ОплатаКартой() Экспорт

	Если СтрокаБезнал.СуммаФакт Тогда
		Возврат Истина;
	КонецЕсли;
	ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
	Обработка_ПС = Обработка_ПС;
	РезультатИнит = ИнициализацияТО(ОбъектТерминал,Обработка_ПС,глПараметрыРМ);
	ВыходныеПараметры = ВыходныеПараметры;
	
	Попытка
		Обработка_ПС.ВыполнитьКоманду("ОплатитьПлатежнойКартой",Новый Структура("Сумма,Отдел", СтрокаБезнал.Сумма,ПротоколРасчетов.Фирма.Мерчант), ВыходныеПараметры);
	Исключение
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
		Возврат Ложь;
	КонецПопытки;
	
	Если ВыходныеПараметры.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
	идТранзакцииПлатежнойСистемы = ВыходныеПараметры[1];
	ПротоколРасчетов.идТранзакцииПлатежнойСистемы = идТранзакцииПлатежнойСистемы;
	Строки = Строки;
	Попытка
		Строки = ВыходныеПараметры[2].Строки;
		ПротоколРасчетов.Слип = ПротоколРасчетов.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
	Исключение
		Если ТипЗнч(Строки) <> Тип("Массив") Тогда
			Строки = Массив("Ошибка при получении слип чека от терминала");
		КонецЕсли;
	КонецПопытки;
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	
	// Печать слипчека
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", Строки);
	ПараметрыВыходные = ПараметрыВыходные;
	Попытка
		Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",Параметры,ПараметрыВыходные);
	Исключение
		ЗарегистрироватьСобытие("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка,, Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ВозвратНаКарту() Экспорт
	

	Если СтрокаБезнал.СуммаФакт Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
	Обработка_ПС = Обработка_ПС;
	РезультатИнит = ИнициализацияТО(ОбъектТерминал,Обработка_ПС,глПараметрыРМ);
	ВыходныеПараметры = ВыходныеПараметры;
	
	Попытка
		Обработка_ПС.ВыполнитьКоманду("ВернутьПлатежПоПлатежнойКарте",Новый Структура("Сумма,Отдел", СтрокаБезнал.Сумма,ПротоколРасчетов.Фирма.Мерчант), ВыходныеПараметры);
	Исключение
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
		Возврат Ложь;
	КонецПопытки;
	
	Если ВыходныеПараметры.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
	идТранзакцииПлатежнойСистемы = ВыходныеПараметры[1];
	ПротоколРасчетов.идТранзакцииПлатежнойСистемы = идТранзакцииПлатежнойСистемы;
	Строки = Строки;
	Попытка
		Строки = ВыходныеПараметры[2].Строки;
		ПротоколРасчетов.Слип = ПротоколРасчетов.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
	Исключение
		Если ТипЗнч(Строки) <> Тип("Массив") Тогда
			Строки = Массив("Ошибка при получении слип чека от терминала");
		КонецЕсли;
	КонецПопытки;
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", Строки);
	ПараметрыВыходные = ПараметрыВыходные;
	Попытка
		Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста", Параметры, ПараметрыВыходные);
		ПоказатьОшибкуККМ(ПараметрыВыходные);	
	Исключение
		ЗарегистрироватьСобытие("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка,, докВозврат.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция Фискализация(СуммаЮрлицо) Экспорт
	//Если глПараметрыРМ.МестоРеализации = Справочники.МестаРеализации.Ресторан Тогда
	//	Возврат Фискализация_КП();		
	//КонецЕсли;
	Если ПротоколРасчетов.Фискализирован Тогда
		Возврат Истина;
	КонецЕсли;

	//Если СтрокаБезнал = Неопределено Тогда
	//	СуммаБезнал = 0;
	//Иначе
	//	СуммаБезнал = СтрокаБезнал.Сумма;
	//КонецЕсли;
	
	
	//СуммаНал = Получено;
	СтрокаБезНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Карта, "ВариантОплаты");
	Если СтрокаБезНал = Неопределено Тогда
		СуммаБезНал = 0;
	Иначе
		СуммаБезНал = СтрокаБезНал.Сумма;
	КонецЕсли;
	
	СтрокаНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Наличные, "ВариантОплаты");
	Если СтрокаНал = Неопределено Тогда
		СуммаНал = 0;
	Иначе
		СуммаНал = СтрокаНал.Сумма;
	КонецЕсли;
	
	
	//{ Автономная
	Если КассаАвтономная() Тогда
		РезультатОплаты.Успех = Истина;

		Если СуммаБезнал Тогда
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты через ПС", "Операция оплаты прошла?","ДА","","НЕТ") = "ДА" Тогда
				СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
				Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты", "Чек пробит?","ДА","","НЕТ") = "ДА" Тогда
					Если Не СтрокаНал = Неопределено Тогда
						СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
					КонецЕсли;
					ПротоколРасчетов.Фискализирован = 1;
					ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = 0;
					РезультатОплаты.Успех = Истина;
				Иначе
					РезультатОплаты.Неудача = Истина;
					РезультатОплаты.Успех = Ложь;
				КонецЕсли;

			Иначе
				СтрокаБезнал.СуммаФакт = 0;
				РезультатОплаты.Отмена =Истина;
				РезультатОплаты.Успех = Ложь;
				
			КонецЕсли;
						
		ИначеЕсли СуммаНал Тогда
		
			СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
			ПротоколРасчетов.Фискализирован = 1;
			
		КонецЕсли;	
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		ПечатьПодвалаЛояльности();
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()"); // Касса автономная
		Если ПротоколРасчетов.Фискализирован Тогда
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать(РежимЗаписиДокумента.Проведение)",,,Заказ.Ссылка);
		КонецЕсли;
		
		Возврат РезультатОплаты.Успех;
		
	КонецЕсли;
	//} Автономная	
	Если СуммаБезнал Тогда
		ПротоколРасчетов.РегистрацияОплатаБанк = 1;
		ЗарегистрироватьСобытие("Оплата.Оплата картой.До вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
		Пока Истина Цикл
			
			Если Не ОплатаКартой() Тогда
				ЗарегистрироватьСобытие("Оплата.Оплата картой.После вызова.Ошибка",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Если ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Оплата картой не удалась", "Ошибка при работе с платежным терминалом","Повтор","","Отмена",,,,,Заказ.Ссылка,"") = "Отмена" Тогда
					ПротоколРасчетов.РегистрацияОплатаБанк = 0;
					ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов,"Объект.Записать()");
					Если ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) Тогда
						Если ИнтерфейсРМ.ВопросПредупреждение("Предложение", "Чек будет оплачен наличными?", "","Да","","Нет",,,,,Заказ.Ссылка,"") = "Да" Тогда
							Получено = Коплате;
							СуммаНал = Коплате;
							СуммаБезнал = 0;
							ПротоколРасчетов.Протокол.Очистить();
							ЗаполнитьПротокол(СуммаБезНал, СуммаНал, СуммаЮрлицо);						
							Прервать;
						Иначе
							Возврат Ложь;
						КонецЕсли;
					Иначе
						Возврат Ложь;	
					КонецЕсли;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ПротоколРасчетов.РегистрацияОплатаБанк = 2;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов,"Объект.Записать()");
		ЗарегистрироватьСобытие("Оплата.Оплата картой.После вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
	КонецЕсли;
	КонтрольныеПоказатели.НачатьЗамер(Показатель_ПечатьЧеков);
	СтрокиЧека = Новый Массив;
	СуммаСкидкиНаЧек = 0;
	Для Каждого Т Из Товары Цикл
		Если Не ЗначениеЗаполнено(Т.Товар) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Т.СтатусОплаты <> -1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Т.Фирма <> ПротоколРасчетов.Фирма Тогда
			Продолжить;
		КонецЕсли;
		
		Т.ДокументОплаты = ПротоколРасчетов.Ссылка;
		Если Т.КоличествоУдалено И Т.СуммаРеализации * Т.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиЧека.Добавить(Новый Структура);
		СтрокаЧека = СтрокиЧека.Получить(СтрокиЧека.Количество()-1);
		
		СтрокаЧека.Вставить("ФискальнаяСтрока", "");
		СтрокаЧека.Вставить("Наименование", Т.Товар.Наименование);
		СтрокаЧека.Вставить("Количество",?(Т.Количество,Т.Количество,1));
		Если Т.Количество Тогда
			Цена = Т.ЦенаРеализации;
		Иначе
			Цена = 0;
		КонецЕсли;
		СтрокаЧека.Вставить("Цена", Цена);
		СтрокаЧека.Вставить("Сумма", Окр(СтрокаЧека.Цена*СтрокаЧека.Количество,2));
		СтрокаЧека.Вставить("НомерСекции", Т.Товар.Категория.НомерОтдела);
		
		СтрокаЧека.Вставить("СтавкаНДС", ЗначениеНДС(Т.Товар.Категория.СтавкаНДС));
		
		Попытка
			СтавкаНДСчислом = ЗначениеНДС(Т.Товар.Категория.СтавкаНДС,Истина);
			СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*СтавкаНДСчислом/100);
		Исключение
		КонецПопытки;
		СуммаСкидкиНаЧек = СуммаСкидкиНаЧек + Окр((СтрокаЧека.Цена*СтрокаЧека.Количество),2) - Т.СуммаРеализации;
	КонецЦикла;
	СтрокиОплат = Новый Массив;
	
	Если СуммаБезнал Тогда
		
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Безнал");
		СтрокаОплат.Вставить("Сумма", СуммаБезнал);
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;
	
	Если СуммаНал Тогда
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Нал");
		СтрокаОплат.Вставить("Сумма", СуммаНал);          	
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;	
	
	Параметры = Новый Структура;
	Параметры.Вставить("Кассир", Строка(глПользователь));
	Параметры.Вставить("СтрокиЧека", СтрокиЧека);
	Параметры.Вставить("СтрокиОплат", СтрокиОплат);
	
	СуммаСкидкиНаЧек = Цел(СуммаСкидкиНаЧек * 100);
	СуммаСкидкиНаЧек  = СуммаСкидкиНаЧек / 100;
	Если СуммаСкидкиНаЧек >= 0.01 Тогда
		Параметры.Вставить("СуммаСкидкиНаЧек", СуммаСкидкиНаЧек);
	Иначе
		Параметры.Вставить("СуммаСкидкиНаЧек", 0);
	КонецЕсли;
	Параметры.Вставить("ТипЧека", Ложь);
	Если ЗначениеЗаполнено(Email) Тогда
		Параметры.Вставить("EmailКлиента", Email);
	КонецЕсли;
	// попробуем взять из протокола
	ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(Заказ.Ссылка, "INFO");
	Если ТипЗнч(ДанныеЛояльностиПоЗаказу) = Тип("Структура") и ЗначениеЗаполнено(ДанныеЛояльностиПоЗаказу.ЭлектроннаяПочта) Тогда
		Параметры.Вставить("EmailКлиента", ДанныеЛояльностиПоЗаказу.ЭлектроннаяПочта);
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		R = ирКэш.Получить().RegExp;
		R.Global = 1;
		R.Pattern = "\D";
		НомерТелефона=R.Replace(НомерТелефона,"");
		Параметры.Вставить("ТелефонКлиента", НомерТелефона);
	КонецЕсли;
	//Параметры.Вставить("Электронно",0);
	ПараметрыВыходные = ПараметрыВыходные;
	Если СтрокиЧека.Количество() Тогда
		Попытка
			ЗарегистрироватьСобытие("Оплата.Фискализация.Входные параметры",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()",,2,Заказ.Ссылка);
			Пока Истина Цикл
				Если ККМ.Фирма = ПротоколРасчетов.Фирма Тогда
					РезультатКомандыФискализация = Обработка_ККМ.ВыполнитьКоманду("ФискализацияЧека",Параметры,ПараметрыВыходные);
				Иначе
					РезультатКомандыФискализация = Обработка_ККМ1.ВыполнитьКоманду("ФискализацияЧека",Параметры,ПараметрыВыходные);
				КонецЕсли;
				ЗарегистрироватьСобытие("Оплата.Фискализация.Выходные параметры",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка,ЗначениеВСтрокуВнутр(ПараметрыВыходные));
				Если Не РезультатКомандыФискализация Тогда // проверим на "НОМЕР ФД ИЗМЕНИЛСЯ"
					Если ТипЗнч(ПараметрыВыходные) = Тип("Структура") Тогда
						Ошибки = Ошибки;
						Если ПараметрыВыходные.Свойство("ОписаниеОшибки", Ошибки) Тогда
							Если ТипЗнч(Ошибки) = Тип("Массив")  Тогда
								СтрОшибка = СтрСоединить(Ошибки, Символы.ПС);
								Если ЗначениеЗаполнено(СтрОшибка) Тогда
									Если СтрНайти(СтрОшибка, "НОМЕР ФД ИЗМЕНИЛСЯ") Тогда
										РезультатКомандыФискализация = Истина;
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если РезультатКомандыФискализация = Истина Тогда
					Прервать;
				Иначе
					Если ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Фискализация не удалась", "Ошибка при работе с принтером чеков","Повтор","","Отмена",,,,,,"к") = "Отмена" Тогда
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			фОшибка = Ложь;
		Исключение
			РезультатОплаты.Неудача = Истина;
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка ККМ", ОписаниеОшибки(), "","ОК", "");
			фОшибка = Истина;
		КонецПопытки;
	Иначе
		РезультатКомандыФискализация = Истина;
		фОшибка = Ложь;
		ПараметрыВыходные = "Не фискализирован";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПротоколРасчетов.ОтветФН) Тогда
		ЗарегистрироватьСобытие("Фискализация.Изменение ответа ФН", УровеньЖурналаРегистрации.Предупреждение, , Заказ.Ссылка, ПротоколРасчетов.ОтветФН);
	КонецЕсли;
	ПротоколРасчетов.ОтветФН = ПротоколРасчетов.ОтветФН + ЗначениеВСтрокуВнутр(ПараметрыВыходные);
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	
	Если фОшибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РезультатКомандыФискализация Тогда
		Если Не СтрокаБезнал = Неопределено Тогда
			СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;	
		КонецЕсли; 
		
		Если Не СтрокаНал = Неопределено Тогда
			СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
		КонецЕсли; 
		
		ПротоколРасчетов.Фискализирован = Истина;
		ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = Ложь;
		ПротоколРасчетов.ИтогСуммаФакт = СуммаЮрлицо;//СуммаРеализации();
		// допишем параметры для печати QR на чеке лояльности {
		Попытка
			ПротоколРасчетов.ДатаЧека = ПараметрыВыходные.ДатаДокумента;
			ПротоколРасчетов.НомерФД = ПараметрыВыходные.НомерДокумента;
			ПротоколРасчетов.НомерФПД = ПараметрыВыходные.ФискальныйПризнак;
		Исключение
		КонецПопытки;
		//}
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		
		Если Не Заказ.НомерЧека Тогда
			Если ТипЗнч(ПараметрыВыходные) = Тип("Структура") Тогда
				ПараметрыВыходные.Свойство("НомерЧека", Заказ.НомерЧека);
				ПараметрыВыходные.Свойство("НомерСмены", Заказ.НомерСмены);
				ПараметрыВыходные.Свойство("НомерЧека", ПротоколРасчетов.НомерЧека);
				ПараметрыВыходные.Свойство("НомерСмены", ПротоколРасчетов.НомерСмены);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) Тогда
			РезультатОплаты.Неудача = Истина;
		ИначеЕсли ПротоколРасчетов.Протокол.Итог("СуммаФакт") Тогда
			РезультатОплаты.Неудача = Истина;
		Иначе
			РезультатОплаты.Отмена = Истина;
		КонецЕсли;
		
		ПоказатьОшибкуККМ(ПараметрыВыходные);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

// TODO: объединить функции Фискализация() И Фискализация_КП() 
Функция Фискализация_КП() Экспорт
		
	Если ПротоколРасчетов.Фискализирован Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтрокаБезнал = Неопределено Тогда
		СуммаБезнал = 0;
	Иначе
		СуммаБезнал = СтрокаБезнал.Сумма;
	КонецЕсли;
	
	Если СтрокаНал = Неопределено Тогда
		СуммаНал = 0;
	Иначе
		СуммаНал = СтрокаНал.Сумма;
	КонецЕсли;
		
	//{ Автономная
	Если КассаАвтономная() Тогда
		РезультатОплаты.Успех = Истина;

		Если СуммаБезнал Тогда
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты через ПС", "Операция оплаты прошла?","ДА","","НЕТ") = "ДА" Тогда
				СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
				Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты", "Чек пробит?","ДА","","НЕТ") = "ДА" Тогда
					Если Не СтрокаНал = Неопределено Тогда
						СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
					КонецЕсли;
					ПротоколРасчетов.Фискализирован = 1;
					ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = 0;
					РезультатОплаты.Успех = Истина;
				Иначе
					РезультатОплаты.Неудача = Истина;
					РезультатОплаты.Успех = Ложь;
				КонецЕсли;

			Иначе
				СтрокаБезнал.СуммаФакт = 0;
				РезультатОплаты.Отмена =Истина;
			КонецЕсли;
			
							
		ИначеЕсли СуммаНал Тогда
		
			СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
			ПротоколРасчетов.Фискализирован = 1;
			
		КонецЕсли;	
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()"); // Касса автономная
		Если ПротоколРасчетов.Фискализирован Тогда
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать(РежимЗаписиДокумента.Проведение)",,,Заказ.Ссылка);
		КонецЕсли;
		
		Возврат РезультатОплаты.Успех;
	КонецЕсли;
	//} Автономная
	
	Если СуммаБезнал Тогда
		ЗарегистрироватьСобытие("Оплата.Оплата картой.До вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
		Если Не ОплатаКартой() Тогда
			ЗарегистрироватьСобытие("Оплата.Оплата картой.После вызова.Ошибка",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Оплата картой не удалась", "Ошибка при работе с платежным терминалом","","ОК","");
			Возврат Ложь;
		КонецЕсли;
		ЗарегистрироватьСобытие("Оплата.Оплата картой.После вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
	КонецЕсли;

	Товары = Заказ.Товары;
	СтрокиЧека = Новый Массив;
	СуммаПоСтрокам = 0;
	Для Каждого Т Из Товары Цикл
		Если Не ЗначениеЗаполнено(Т.Товар) Тогда
			Продолжить;
		КонецЕсли;
				
		//Если Не (Т.Количество И Т.СуммаРеализации) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если Не (Т.Количество) Тогда
			Продолжить;
		КонецЕсли;

		Т.ДокументОплаты = ПротоколРасчетов.Ссылка;
		СтрокиЧека.Добавить(Новый Структура);
		СтрокаЧека = СтрокиЧека.Получить(СтрокиЧека.Количество()-1);
		
		СтрокаЧека.Вставить("ФискальнаяСтрока", "");
		СтрокаЧека.Вставить("Наименование", Т.Товар.Наименование);
		СтрокаЧека.Вставить("Количество",?(Т.Количество,Т.Количество,1));
		Цена = Т.ЦенаРеализации;
		СтрокаЧека.Вставить("Цена", Цена);
		СтрокаЧека.Вставить("Сумма",
		СтрокаЧека.Цена*СтрокаЧека.Количество);
		СтрокаЧека.Вставить("НомерСекции", Т.Товар.Категория.НомерОтдела);
		
		СтрокаЧека.Вставить("СтавкаНДС", ЗначениеНДС(Т.Товар.Категория.СтавкаНДС));
		Попытка
			СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*СтрокаЧека.СтавкаНДС/100);	
		Исключение
			СтрокаЧека.Вставить("НДС", 0);
		КонецПопытки;
		СуммаПоСтрокам = СуммаПоСтрокам + СтрокаЧека.Сумма;
		
		СпецификиСтроки = Заказ.Специфики.НайтиСтроки(Новый Структура("НомерСтрокиТовара", Т.НомерСтроки));
		Для Каждого СтрокаСпецифика Из СпецификиСтроки Цикл
			Если Не СтрокаСпецифика.ЦенаРеализации Тогда
				Продолжить;
			КонецЕсли;

			СтрокиЧека.Добавить(Новый Структура);
			СтрокаЧека = СтрокиЧека.Получить(СтрокиЧека.Количество()-1);
			
			СтрокаЧека.Вставить("ФискальнаяСтрока", "");
			СтрокаЧека.Вставить("Наименование", СтрокаСпецифика.Специфика.Наименование);
			СтрокаЧека.Вставить("Количество",?(Т.Количество,Т.Количество,1));
			Цена = СтрокаСпецифика.ЦенаРеализации;
			СтрокаЧека.Вставить("Цена", Цена);
			СтрокаЧека.Вставить("Сумма",
			СтрокаЧека.Цена * СтрокаЧека.Количество);
			СтрокаЧека.Вставить("НомерСекции", Т.Товар.Категория.НомерОтдела);
			
			СтрокаЧека.Вставить("СтавкаНДС", ЗначениеНДС(Т.Товар.Категория.СтавкаНДС));
			Попытка
				СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*СтрокаЧека.СтавкаНДС/100);	
			Исключение
				СтрокаЧека.Вставить("НДС", 0);
			КонецПопытки;
			СуммаПоСтрокам = СуммаПоСтрокам + СтрокаЧека.Сумма;
			
		КонецЦикла;
	КонецЦикла;
	
	СтрокиОплат = Новый Массив;
	
	Если СуммаНал Тогда
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Нал");
		СтрокаОплат.Вставить("Сумма", СуммаНал);
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;	
	Если СуммаБезнал Тогда
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Безнал");
		СтрокаОплат.Вставить("Сумма", СуммаБезнал);
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;
	
	Если СуммаПоСтрокам <> СуммаРеализации() Тогда
		
		Текст1 = "Ошибка подготовки чека" ;
		Текст2 = "Сумма по строкам чека не равна сумме всех оплат";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Текст1, Текст2, "","ОК","");
		ЗарегистрироватьСобытие("Оплата.Ошибка подготовки чека",УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, "Сумма по строкам = " + СуммаПоСтрокам + "; СуммаЗаказа = " + (СуммаБезнал + СуммаНал));
		РезультатОплаты.Вставить("Неудача", Истина);
		Возврат Ложь;
		
	КонецЕсли;
	
		
	Параметры = Новый Структура;
	Параметры.Вставить("Кассир", Строка(глПользователь));
	Параметры.Вставить("СтрокиЧека", СтрокиЧека);
	Параметры.Вставить("СтрокиОплат", СтрокиОплат);
	//Параметры.Вставить("СуммаСкидкиНаЧек",0.99);
	Параметры.Вставить("ТипЧека", Ложь);
	Если ЗначениеЗаполнено(Email) Тогда
		Параметры.Вставить("EmailКлиента", Email);
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		R = ирКэш.Получить().RegExp;
		R.Global = 1;
		R.Pattern = "\D";
		НомерТелефона=R.Replace(НомерТелефона,"");
		Параметры.Вставить("ТелефонКлиента", НомерТелефона);
	КонецЕсли;

	ПараметрыВыходные = ПараметрыВыходные;
	Если ПараметрыВыходные = Неопределено Тогда
		ПараметрыВыходные = Новый Структура;
	КонецЕсли;
	
	Если СтрокиЧека.Количество() Тогда
		
		ЗарегистрироватьСобытие("Оплата.Фискализация.Входные параметры",УровеньЖурналаРегистрации.Информация,,Заказ, ЗначениеВСтрокуВнутр(Параметры));
		Попытка
			РезультатКомандыФискализация = Обработка_ККМ.ВыполнитьКоманду("ФискализацияЧека",Параметры,ПараметрыВыходные);
			ПротоколРасчетов.Фискализирован = РезультатКомандыФискализация;
			фОшибка = Не РезультатКомандыФискализация;
		Исключение
			ОписаниеОшибки = Новый Массив;
			ОписаниеОшибки.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПараметрыВыходные.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			Р = Новый Структура("Ошибка, Описание, Подробно", Истина, ОписаниеОшибки[0], ОписаниеОшибки[0]);
			РезультатКомандыФискализация = Ложь;
			фОшибка = Истина;
		КонецПопытки;
	Иначе
		ПараметрыВыходные = "Не фискализирован";
		Возврат Истина;
	КонецЕсли;
		
	Если фОшибка Тогда
		Если ПротоколРасчетов.Протокол.Итог("СуммаФакт") Тогда
			РезультатОплаты.Неудача = Истина;
		Иначе
			РезультатОплаты.Отмена = Истина;
		КонецЕсли;
		ПоказатьОшибкуККМ(ПараметрыВыходные);
		Возврат Ложь;
	Иначе
		ПротоколРасчетов.ОтветФН = ПротоколРасчетов.ОтветФН + ЗначениеВСтрокуВнутр(ПараметрыВыходные);
		ПротоколРасчетов.Протокол.ЗагрузитьКолонку(ПротоколРасчетов.Протокол.ВыгрузитьКолонку("Сумма"), "СуммаФакт");
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()"); // Касса автономная
		Если ПротоколРасчетов.Фискализирован Тогда
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать(РежимЗаписиДокумента.Проведение)",,,Заказ.Ссылка);
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция ФискализацияВозврата() Экспорт
	
	Если ПротоколРасчетов.Фискализирован Тогда
		Возврат Истина;
	КонецЕсли;
	
	//Если СтрокаБезнал = Неопределено Тогда
	//	СуммаБезнал = 0;
	//Иначе
	//	СуммаБезнал = СтрокаБезнал.Сумма;
	//КонецЕсли;
	//
	//Если СтрокаНал = Неопределено Тогда
	//	СуммаНал = 0;
	//Иначе
	//	СуммаНал = СтрокаНал.Сумма;
	//КонецЕсли;
	
	СтрокаБезНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Карта, "ВариантОплаты");
	Если СтрокаБезНал = Неопределено Тогда
		СуммаБезНал = 0;
	Иначе
		СуммаБезНал = СтрокаБезНал.Сумма;
	КонецЕсли;
	
	СтрокаНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Наличные, "ВариантОплаты");
	Если СтрокаНал = Неопределено Тогда
		СуммаНал = 0;
	Иначе
		СуммаНал = СтрокаНал.Сумма;
	КонецЕсли;
	
	
	Если КассаАвтономная() Тогда
		
		Если СуммаБезнал Тогда
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты через ПС", "Операция оплаты прошла?","ДА","","НЕТ") = "ДА" Тогда
				СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
			КонецЕсли;
			
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты", "Чек пробит?","ДА","","НЕТ") = "ДА" Тогда
				Если Не СтрокаНал = Неопределено Тогда
					СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
				КонецЕсли;
				ПротоколРасчетов.Фискализирован = 1;
			КонецЕсли;
				
		Иначе
			СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
			ПротоколРасчетов.Фискализирован = 1;
		КонецЕсли;	
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Если ПротоколРасчетов.Фискализирован Тогда
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать(РежимЗаписиДокумента.Проведение)",,,докВозврат.Ссылка);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
		
	Если СуммаБезнал Тогда
		Если Не ВозвратНаКарту() Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Возврат на карту не удался",
			"Ошибка при работе с платежным терминалом","","Ок","");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиЧека = Новый Массив;
	Для Каждого Т Из Товары Цикл
		Если Не ЗначениеЗаполнено(Т.Товар) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Т.КоличествоУдалено И Т.Сумма * Т.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Т.Фирма <> ПротоколРасчетов.Фирма Тогда
			Продолжить;
		КонецЕсли;

		СтрокиЧека.Добавить(Новый Структура);
		СтрокаЧека = СтрокиЧека.Получить(СтрокиЧека.Количество()-1);
		
		СтрокаЧека.Вставить("ФискальнаяСтрока", "");
		СтрокаЧека.Вставить("Наименование", Т.Товар.Наименование);
		СтрокаЧека.Вставить("Количество",Т.Количество);
		СтрокаЧека.Вставить("Цена", Т.Цена);
		СтрокаЧека.Вставить("Сумма", Т.Сумма);
		СтрокаЧека.Вставить("НомерСекции", Т.Товар.Категория.НомерОтдела);
		
		СтрокаЧека.Вставить("СтавкаНДС", ЗначениеНДС(Т.Товар.Категория.СтавкаНДС));
		СтавкаНДСчислом = ЗначениеНДС(Т.Товар.Категория.СтавкаНДС,Истина);
		СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*СтавкаНДСчислом/100);
	КонецЦикла;
	
	СтрокиОплат = Новый Массив;
	
	Если СуммаНал Тогда
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Нал");
		СтрокаОплат.Вставить("Сумма", СуммаНал);
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;	
	Если СуммаБезнал Тогда
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Безнал");
		СтрокаОплат.Вставить("Сумма", СуммаБезнал);
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;
		
	Параметры = Новый Структура;
	Параметры.Вставить("Кассир", Строка(глПользователь));
	Параметры.Вставить("СтрокиЧека", СтрокиЧека);
	Параметры.Вставить("СтрокиОплат", СтрокиОплат);
	Параметры.Вставить("ТипЧека", Истина);
	Параметры.Вставить("СуммаСкидкиНаЧек", 0);
	ПараметрыВыходные = ПараметрыВыходные;
	Попытка
		Пока Истина Цикл
				Если ККМ.Фирма = ПротоколРасчетов.Фирма Тогда
					РезультатКомандыФискализация = Обработка_ККМ.ВыполнитьКоманду("ФискализацияЧека",Параметры,ПараметрыВыходные);
				Иначе
					РезультатКомандыФискализация = Обработка_ККМ1.ВыполнитьКоманду("ФискализацияЧека",Параметры,ПараметрыВыходные);
				КонецЕсли;
				ЗарегистрироватьСобытие("Оплата.Фискализация.Выходные параметры",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка,ЗначениеВСтрокуВнутр(ПараметрыВыходные));
				Если РезультатКомандыФискализация = Истина Тогда
					Прервать;
				Иначе
					Если ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Фискализация не удалась", "Ошибка при работе с принтером чеков","Повтор","","Отмена",,,,,,"м") = "Отмена" Тогда
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		фОшибка = Ложь;
	Исключение
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка ККМ", ОписаниеОшибки(), "","ОК", "");
		фОшибка = Истина;
	КонецПопытки;
	ПротоколРасчетов.ОтветФН = ПротоколРасчетов.ОтветФН + ЗначениеВСтрокуВнутр(ПараметрыВыходные);
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	Если ПротоколРасчетов.Протокол.Количество() Тогда
		РезультатОплаты.Вставить("ВариантОплаты", ПротоколРасчетов.Протокол[0].ВариантОплаты);
	КонецЕсли;
	
	Если фОшибка Тогда
		Возврат Ложь;
	КонецЕсли;
	    
	Если РезультатКомандыФискализация Тогда
		Если Не СтрокаБезнал = Неопределено Тогда
			СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;	
		КонецЕсли; 
		
		Если Не СтрокаНал = Неопределено Тогда
			СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
		КонецЕсли; 
		
		ПротоколРасчетов.Фискализирован = Истина;
		ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = 0;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Возврат Истина;
	Иначе
		
		СтрОшибка = ПараметрыВыходные.ОписаниеОшибки[0];
		СтрОшибка2 = "";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка оплаты",СтрОшибка, СтрОшибка2,"","ОК","");
		Возврат Ложь;
		
	КонецЕсли;
	



КонецФункции

Процедура ОткрытьЧек() Экспорт
	Если Найти(глПараметрыРМ.ККМ, "автономная") Тогда
		Попытка
			Заказ.НомерЧека = 999;
			Заказ.НомерСмены = 999;	
		Исключение
			докВозврат.НомерЧека = 999;
			докВозврат.НомерСмены = 999;
		КонецПопытки;
		
		Попытка
			ПротоколРасчетов.НомерЧека = 999;
			ПротоколРасчетов.НомерСмены = 999;
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;

	ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
	Обработка_ККМ = Обработка_ККМ;
	ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
	Если глПараметрыРМ.ККМЕстьДоп тогда
		Попытка
			ККМ1 = глПараметрыРМ.ККМСписокДоп[0].Значение.ПолучитьОбъект();
			ИнициализацияТО(ККМ1, Обработка_ККМ1, глПараметрыРМ);
		Исключение
			ККМ1 = Неопределено;
		КонецПопытки;
	Иначе
		ККМ1 = Неопределено;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Кассир", Строка(глПользователь));
	Параметры.Вставить("ТипЧека", Ложь);
	ПараметрыВыходные = Новый Массив;
	Попытка
		РезультатКомандыФискализация = Обработка_ККМ.ВыполнитьКоманду("ПолучитьТекущееСостояние",Параметры,ПараметрыВыходные);
		ПоказатьОшибкуККМ(ПараметрыВыходные);
	Исключение
		//Сообщить(ОписаниеОшибки());		
	КонецПопытки;
	
	Если ПараметрыВыходные.Количество() > 2 Тогда
		ЭтоЗаказ = Ложь;
		Попытка
			ЭтоНовый = Заказ.ЭтоНовый();
			ЭтоЗаказ = Истина;
		Исключение
		КонецПопытки;
		Если ЭтоЗаказ Тогда
			Попытка
				Фискализирован = ПротоколРасчетов.Фискализирован
			Исключение
				Фискализирован = Ложь;
			КонецПопытки;
			
			Если Не Фискализирован Тогда
				Заказ.НомерЧека = ПараметрыВыходные.НомерЧека;
				Заказ.НомерСмены = ПараметрыВыходные.НомерСмены;
				Попытка
					ПротоколРасчетов.НомерЧека = ПараметрыВыходные.НомерЧека;
					ПротоколРасчетов.НомерСмены = ПараметрыВыходные.НомерСмены;	
				Исключение
				КонецПопытки;

			КонецЕсли;
			
		Иначе
			докВозврат.НомерЧека = ПараметрыВыходные.НомерЧека;
			докВозврат.НомерСмены = ПараметрыВыходные.НомерСмены;
		КонецЕсли;
		
		глПараметрыРМ.Вставить("НомерТекущегоЧека", ПараметрыВыходные.НомерЧека);
		глПараметрыРМ.Вставить("НомерСмены",  ПараметрыВыходные.НомерСмены);
	КонецЕсли;
	
		
КонецПроцедуры

Процедура ЗаполнитьПротокол(знач СуммаБезНал,знач СуммаНал,знач СуммаЮрлицо) Экспорт
	УдяляемыеСтрокиПротокола = Новый Массив;
	Для Каждого Т Из ПротоколРасчетов.Протокол Цикл
		Если Не Т.СуммаФакт Тогда
			УдяляемыеСтрокиПротокола.Добавить(Т);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Т Из УдяляемыеСтрокиПротокола Цикл
		ПротоколРасчетов.Протокол.Удалить(Т);
	КонецЦикла;
		Если СуммаБезНал <> 0 Тогда // есть платеж по б/н
			Если СуммаЮрлицо > СуммаБезНал Тогда 
				СтрокаБезНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Карта, "ВариантОплаты");
				Если СтрокаБезНал = Неопределено Тогда
					СтрокаБезНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаБезнал.ВариантОплаты = Справочники.ВариантыОплаты.Карта;
					СтрокаБезнал.Сумма = СуммаБезНал;
					//СтрокаБезнал.СуммаФакт = СуммаБезНал;
					СуммаБезНал = 0;
					СуммаЮрлицо = СуммаЮрлицо - СуммаБезНал;
				Иначе 
					СуммаБезНал = СуммаБезНал - СтрокаБезнал.Сумма;
					СуммаЮрлицо = СуммаЮрлицо - СтрокаБезнал.Сумма;
				КонецЕсли;
				Если СуммаБезНал <> 0 Тогда // пока не знаю зачем !?
					СтрокаБезНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаБезнал.ВариантОплаты = Справочники.ВариантыОплаты.Карта;
					СтрокаБезнал.Сумма = СуммаБезНал;
					//СтрокаБезнал.СуммаФакт = СуммаБезНал;
					СуммаБезНал = 0;
					СуммаЮрлицо = СуммаЮрлицо - СуммаБезНал;
				КонецЕсли;
				СтрокаНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Наличные,"ВариантОплаты");
				Если СтрокаНал = Неопределено Тогда
					СтрокаНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаНал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаНал.ВариантОплаты = Справочники.ВариантыОплаты.Наличные;
				КонецЕсли;
				СтрокаНал.Сумма = СуммаЮрлицо;
				//СтрокаНал.СуммаФакт = СуммаЮрлицо;
				СуммаНал = СуммаНал - СуммаЮрлицо;
				СуммаЮрлицо = 0;
			Иначе   // сумма по б/н больше чем по Юр лицу
				СтрокаБезНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Карта, "ВариантОплаты");
				Если СтрокаБезНал = Неопределено Тогда
					СтрокаБезНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаБезнал.ВариантОплаты = Справочники.ВариантыОплаты.Карта;
					СтрокаБезнал.Сумма = СуммаЮрлицо;
					//СтрокаБезнал.СуммаФакт = СуммаЮрлицо;
					СуммаБезНал = СуммаБезНал - СуммаЮрлицо;
					СуммаЮрлицо = 0;
				Иначе 
					СуммаБезНал = СуммаБезНал - СтрокаБезнал.Сумма;
					СуммаЮрлицо = СуммаЮрлицо - СтрокаБезнал.Сумма;
				КонецЕсли;
				Если СуммаЮрлицо <> 0 Тогда // подпишем б/н по остатку
					СтрокаБезНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаБезнал.ВариантОплаты = Справочники.ВариантыОплаты.Карта;
					СтрокаБезнал.Сумма = СуммаЮрлицо;
					//СтрокаБезнал.СуммаФакт = СуммаЮрлицо;
					СуммаБезНал = СуммаБезНал - СуммаЮрлицо;
					СуммаЮрлицо = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаЮрлицо <> 0 и СуммаНал <> 0 Тогда
			Если СуммаЮрлицо > СуммаНал Тогда // ошибка
				ЗарегистрироватьСобытие("Ошибка формирования протокола расчетов", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, "Сумма наличных и безналичных оплат меньше суммы по заказу");
			Иначе
				СтрокаНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Наличные,"ВариантОплаты");
				Если СтрокаНал = Неопределено Тогда
					СтрокаНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаНал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаНал.ВариантОплаты = Справочники.ВариантыОплаты.Наличные;
				КонецЕсли;
				СтрокаНал.Сумма = СуммаЮрлицо;
				//СтрокаНал.СуммаФакт = СуммаЮрлицо;
				СуммаНал = СуммаНал - СуммаЮрлицо;
				СуммаЮрлицо = 0;
			КонецЕсли;
		КонецЕсли;
			
		ПротоколРасчетов.НомерЧека = Заказ.НомерЧека;
		ПротоколРасчетов.НомерСмены = Заказ.НомерСмены;
КонецПроцедуры

Процедура ОчиститьПротокол() Экспорт
	УдяляемыеСтрокиПротокола = Новый Массив;
	Для Каждого Т Из ПротоколРасчетов.Протокол Цикл
		Если Не Т.СуммаФакт Тогда
			УдяляемыеСтрокиПротокола.Добавить(Т);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Т Из УдяляемыеСтрокиПротокола Цикл
		ПротоколРасчетов.Протокол.Удалить(Т);
	КонецЦикла;
КонецПроцедуры

Процедура ВыводНаДПитого(Сумма) Экспорт
	ИнтерфейсРМ.ВыводНаДП("ВывестиТекст", "ИТОГО: "+Символы.ПС + формат(Сумма,"ЧДЦ=2") + " руб.");
КонецПроцедуры

Процедура ЗаполнитьПротоколПоВозврату(Картой, знач СуммаБезНал,знач СуммаНал,знач СуммаЮрлицо) Экспорт
	Если ПротоколРасчетов.Фискализирован Тогда
		Возврат;
	КонецЕсли;
	УдяляемыеСтрокиПротокола = Новый Массив;
	Для Каждого Т Из ПротоколРасчетов.Протокол Цикл
		Если Не Т.СуммаФакт Тогда
			УдяляемыеСтрокиПротокола.Добавить(Т);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Т Из УдяляемыеСтрокиПротокола Цикл
		ПротоколРасчетов.Протокол.Удалить(Т);
	КонецЦикла;
		Если СуммаБезНал <> 0 Тогда // есть платеж по б/н
			Если СуммаЮрлицо > СуммаБезНал Тогда 
				СтрокаБезНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Карта, "ВариантОплаты");
				Если СтрокаБезНал = Неопределено Тогда
					СтрокаБезНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаБезнал.ВариантОплаты = Справочники.ВариантыОплаты.Карта;
					СтрокаБезнал.Сумма = СуммаБезНал;
					//СтрокаБезнал.СуммаФакт = СуммаБезНал;
					СуммаБезНал = 0;
					СуммаЮрлицо = СуммаЮрлицо - СуммаБезНал;
				Иначе 
					СуммаБезНал = СуммаБезНал - СтрокаБезнал.Сумма;
					СуммаЮрлицо = СуммаЮрлицо - СтрокаБезнал.Сумма;
				КонецЕсли;
				Если СуммаБезНал <> 0 Тогда // пока не знаю зачем !?
					СтрокаБезНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаБезнал.ВариантОплаты = Справочники.ВариантыОплаты.Карта;
					СтрокаБезнал.Сумма = СуммаБезНал;
					//СтрокаБезнал.СуммаФакт = СуммаБезНал;
					СуммаБезНал = 0;
					СуммаЮрлицо = СуммаЮрлицо - СуммаБезНал;
				КонецЕсли;
				СтрокаНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Наличные,"ВариантОплаты");
				Если СтрокаНал = Неопределено Тогда
					СтрокаНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаНал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаНал.ВариантОплаты = Справочники.ВариантыОплаты.Наличные;
				КонецЕсли;
				СтрокаНал.Сумма = СуммаЮрлицо;
				//СтрокаНал.СуммаФакт = СуммаЮрлицо;
				СуммаНал = СуммаНал - СуммаЮрлицо;
				СуммаЮрлицо = 0;
			Иначе   // сумма по б/н больше чем по Юр лицу
				СтрокаБезНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Карта, "ВариантОплаты");
				Если СтрокаБезНал = Неопределено Тогда
					СтрокаБезНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаБезнал.ВариантОплаты = Справочники.ВариантыОплаты.Карта;
					СтрокаБезнал.Сумма = СуммаЮрлицо;
					//СтрокаБезнал.СуммаФакт = СуммаЮрлицо;
					СуммаБезНал = СуммаБезНал - СуммаЮрлицо;
					СуммаЮрлицо = 0;
				Иначе 
					СуммаБезНал = СуммаБезНал - СтрокаБезнал.Сумма;
					СуммаЮрлицо = СуммаЮрлицо - СтрокаБезнал.Сумма;
				КонецЕсли;
				Если СуммаЮрлицо <> 0 Тогда // подпишем б/н по остатку
					СтрокаБезНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаБезнал.ВариантОплаты = Справочники.ВариантыОплаты.Карта;
					СтрокаБезнал.Сумма = СуммаЮрлицо;
					//СтрокаБезнал.СуммаФакт = СуммаЮрлицо;
					СуммаБезНал = СуммаБезНал - СуммаЮрлицо;
					СуммаЮрлицо = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаЮрлицо <> 0 и СуммаНал <> 0 Тогда
			Если СуммаЮрлицо > СуммаНал Тогда // ошибка
				ЗарегистрироватьСобытие("Ошибка формирования протокола расчетов", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, "Сумма наличных и безналичных оплат меньше суммы по заказу");
			Иначе
				СтрокаНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Наличные,"ВариантОплаты");
				Если СтрокаНал = Неопределено Тогда
					СтрокаНал = ПротоколРасчетов.Протокол.Добавить();
					СтрокаНал.Действие = Перечисления.ДействияПриОплате.Взнос;
					СтрокаНал.ВариантОплаты = Справочники.ВариантыОплаты.Наличные;
				КонецЕсли;
				СтрокаНал.Сумма = СуммаЮрлицо;
				//СтрокаНал.СуммаФакт = СуммаЮрлицо;
				СуммаНал = СуммаНал - СуммаЮрлицо;
				СуммаЮрлицо = 0;
			КонецЕсли;
		КонецЕсли;
			
		ПротоколРасчетов.НомерЧека = Заказ.НомерЧека;
		ПротоколРасчетов.НомерСмены = Заказ.НомерСмены;

	//УдяляемыеСтрокиПротокола = Новый Массив;
	//Для Каждого Т Из ПротоколРасчетов.Протокол Цикл
	//	Если Не Т.СуммаФакт Тогда
	//		УдяляемыеСтрокиПротокола.Добавить(Т);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для Каждого Т Из УдяляемыеСтрокиПротокола Цикл
	//	ПротоколРасчетов.Протокол.Удалить(Т);
	//КонецЦикла;

	//СтрокаБезнал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Карта, "ВариантОплаты");
	//СтрокаНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Наличные, "ВариантОплаты");
	//СуммаБезнал = ?(Картой, Коплате, 0);
	//СуммаНал	= ?(Картой, 0, Коплате);
	//
	//Если СтрокаНал <> Неопределено Тогда
	//	СтрокаНал.Сумма = СуммаНал;
	//	СтрокаНал.СуммаФакт = 0;
	//КонецЕсли;

	//Если СтрокаБезнал <> Неопределено Тогда
	//	СтрокаБезнал.Сумма = 0;
	//	СтрокаБезнал.СуммаФакт = 0;
	//КонецЕсли;

	//Если СуммаНал Тогда
	//	Если СтрокаНал = Неопределено Тогда
	//		СтрокаНал = ПротоколРасчетов.Протокол.Добавить();
	//		СтрокаНал.Действие = Перечисления.ДействияПриОплате.Взнос;
	//		СтрокаНал.ВариантОплаты = Справочники.ВариантыОплаты.Наличные;
	//	КонецЕсли;
	//	СтрокаНал.Сумма = СуммаНал;
	//КонецЕсли;		
	//
	//Если СуммаБезнал Тогда
	//	
	//	Если СтрокаБезнал = Неопределено Тогда
	//		
	//		СтрокаБезнал = ПротоколРасчетов.Протокол.Добавить();
	//		СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
	//		СтрокаБезнал.ВариантОплаты = Справочники.ВариантыОплаты.Карта;
	//		
	//	КонецЕсли;
	//	СтрокаБезнал.Сумма = СуммаБезнал;
	//КонецЕсли;
КонецПроцедуры

Процедура ОтменаТранзакцииПлатежнойСистемы() Экспорт
	ЗарегистрироватьСобытие("Оплата.ОтменаТранзакцииПлатежнойСистемы.ВходВпроцедуру", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
	
	ТаблицаЮрЛиц = Новый ТаблицаЗначений;
	ТаблицаЮрЛиц.Колонки.Добавить("Фирма");
	ТаблицаЮрЛиц.Колонки.Добавить("Сумма");
	Для каждого стр из товары Цикл
		Если Стр.СтатусОплаты = -1 Тогда
			Продолжить;
		КонецЕсли;
		Если ТаблицаЮрЛиц.Найти(Стр.Фирма,"Фирма") = Неопределено Тогда
			СтрТабл = ТаблицаЮрЛиц.Добавить();
			СтрТабл.Фирма = Стр.Фирма;
			СтрТабл.Сумма = Стр.СуммаРеализации;
		Иначе
			СтрТабл.Сумма = СтрТабл.Сумма + стр.СуммаРеализации;
		КонецЕсли;
	КонецЦикла;
	
	// цикл по юр.лицам
	СуммаБезНал = Окр(Макс(Коплате - Получено,0),2);
	СуммаНал = Окр(Макс(Получено,0),2);
	Для Инд = 1 по ТаблицаЮрЛиц.Количество() Цикл
		
		// создадим новый протокол
		Если Инд <> 1 тогда
			ИнициализироватьПротокол();
			ПротоколРасчетов.Фирма = ТаблицаЮрЛиц[Инд-1].Фирма;
		КонецЕсли;
		
		// заполним суммы по протоколу
		СуммаЮрлицо = ТаблицаЮрЛиц[Инд-1].Сумма;
		
		Если СуммаЮрлицо = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьПротокол(СуммаБезНал, СуммаНал, СуммаЮрлицо);
	
		Если КассаАвтономная() Тогда
			ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена = Истина;
			ПротоколРасчетов.Протокол.Очистить();
			РезультатОплаты.СделанаОтменаОплатыКартой = Истина;  
			РезультатОплаты.Неудача = Ложь;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
			Возврат;
		КонецЕсли;
		ОтменаВегаис();
		ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
		Обработка_ПС = Обработка_ПС;
		РезультатИнит = ИнициализацияТО(ОбъектТерминал,Обработка_ПС,глПараметрыРМ);		
		ВыходныеПараметры = Новый Массив;
		
		фОшибка = Ложь;
		Попытка
			СуммаБезнал = Макс(СтрокаБезнал.СуммаФакт, 0);
			Обработка_ПС.ВыполнитьКоманду("ОтменитьПлатежПоПлатежнойКарте",Новый Структура("Сумма, СсылочныйНомер",СуммаБезнал, ПротоколРасчетов.идТранзакцииПлатежнойСистемы), ВыходныеПараметры);
		Исключение
			ЗарегистрироватьСобытие("Платежная система", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Заказ, Заказ.Ссылка, "Не удалось отменить транзакцию " + ПротоколРасчетов.идТранзакцииПлатежнойСистемы + " " + ОписаниеОшибки());
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
			фОшибка = Истина;
		КонецПопытки;
		РезультатОплаты.Неудача = Истина;
		Если Не фОшибка Тогда
			Если ВыходныеПараметры.Количество() = 3 Тогда
				Строки = ВыходныеПараметры[2].Строки;
				Если ТипЗнч(Строки) = Тип("Массив") Тогда
					ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена = Истина;
					Попытка
						Строки = ВыходныеПараметры[2].Строки;
					Исключение
						Если ТипЗнч(Строки) <> Тип("Массив") Тогда
							Строки = Массив("Ошибка при получении слип чека от терминала");
						КонецЕсли;
					КонецПопытки;
					ПротоколРасчетов.Слип = ПротоколРасчетов.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
					ПротоколРасчетов.Протокол.Очистить();
					РезультатОплаты.СделанаОтменаОплатыКартой = Истина;
					РезультатОплаты.Неудача = Ложь;
					ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");                       				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОтменаТранзакцииПлатежнойСистемыПоВозврату(Картой) Экспорт
	ЗарегистрироватьСобытие("Оплата.ОтменаТранзакцииПлатежнойСистемыПоВозврату.ВходВпроцедуру", УровеньЖурналаРегистрации.Информация, , докВозврат.Ссылка);
	
	ТаблицаЮрЛиц = Новый ТаблицаЗначений;
	ТаблицаЮрЛиц.Колонки.Добавить("Фирма");
	ТаблицаЮрЛиц.Колонки.Добавить("Сумма");
	Для каждого стр из товары Цикл
		Если Стр.СтатусОплаты = -1 Тогда
			Продолжить;
		КонецЕсли;
		Если ТаблицаЮрЛиц.Найти(Стр.Фирма,"Фирма") = Неопределено Тогда
			СтрТабл = ТаблицаЮрЛиц.Добавить();
			СтрТабл.Фирма = Стр.Фирма;
			СтрТабл.Сумма = Стр.СуммаРеализации;
		Иначе
			СтрТабл.Сумма = СтрТабл.Сумма + стр.СуммаРеализации;
		КонецЕсли;
	КонецЦикла;
	
	// цикл по юр.лицам
	СуммаБезНал = Окр(Макс(Коплате - Получено,0),2);
	СуммаНал = Окр(Макс(Получено,0),2);
	Для Инд = 1 по ТаблицаЮрЛиц.Количество() Цикл
		
		// создадим новый протокол
		Если Инд <> 1 тогда
			ИнициализироватьПротокол();
			ПротоколРасчетов.Фирма = ТаблицаЮрЛиц[Инд-1].Фирма;
		КонецЕсли;
		
		// заполним суммы по протоколу
		СуммаЮрлицо = ТаблицаЮрЛиц[Инд-1].Сумма;
		
		Если СуммаЮрлицо = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьПротоколПоВозврату(Картой,СуммаБезНал, СуммаНал, СуммаЮрлицо);
		
		Если КассаАвтономная() Тогда
			ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена = Истина;
			ПротоколРасчетов.Протокол.Очистить();
			РезультатОплаты.СделанаОтменаОплатыКартой = Истина;  
			РезультатОплаты.Неудача = Ложь;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
			Возврат;
		КонецЕсли;
		ОтменаВегаис();
		ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
		Обработка_ПС = Обработка_ПС;
		РезультатИнит = ИнициализацияТО(ОбъектТерминал,Обработка_ПС,глПараметрыРМ);		
		ВыходныеПараметры = Новый Массив;
		
		фОшибка = Ложь;
		Попытка
			СуммаБезнал = Макс(СтрокаБезнал.СуммаФакт, 0);
			Обработка_ПС.ВыполнитьКоманду("ОтменитьПлатежПоПлатежнойКарте",Новый Структура("Сумма, СсылочныйНомер",СуммаБезнал, ПротоколРасчетов.идТранзакцииПлатежнойСистемы), ВыходныеПараметры);
		Исключение
			ЗарегистрироватьСобытие("Платежная система", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Возврат, докВозврат.Ссылка, "Не удалось отменить транзакцию " + ПротоколРасчетов.идТранзакцииПлатежнойСистемы + " " + ОписаниеОшибки());
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
			фОшибка = Истина;
		КонецПопытки;
		РезультатОплаты.Неудача = Истина;
		Если Не фОшибка Тогда
			Если ВыходныеПараметры.Количество() = 3 Тогда
				Строки = ВыходныеПараметры[2].Строки;
				Если ТипЗнч(Строки) = Тип("Массив") Тогда
					ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена = Истина;
					Попытка
						Строки = ВыходныеПараметры[2].Строки;
					Исключение
						Если ТипЗнч(Строки) <> Тип("Массив") Тогда
							Строки = Массив("Ошибка при получении слип чека от терминала");
						КонецЕсли;
					КонецПопытки;
					ПротоколРасчетов.Слип = ПротоколРасчетов.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
					ПротоколРасчетов.Протокол.Очистить();
					РезультатОплаты.СделанаОтменаОплатыКартой = Истина;
					РезультатОплаты.Неудача = Ложь;
					ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");                       				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОткрытьДенежныйЯщик() Экспорт
	Если КассаАвтономная() Тогда
		Возврат;
	КонецЕсли;
	Обработка_ККМ.ВыполнитьКоманду("ОткрытьДенежныйЯщик",Новый Структура, Новый Структура);
КонецПроцедуры

Функция ПолучитьСписокФирмПоРМ()
	Список = новый СписокЗначений;
	Если глПараметрыРМ.ККМЕсть ТОгда
		Список.Добавить(глПараметрыРМ.ККМ.Фирма);
	КонецЕсли;
	Если глПараметрыРМ.ККМЕстьДоп тогда
		Попытка
			Для каждого эл из глПараметрыРМ.ККМСписокДоп Цикл
				Список.Добавить(эл.Значение.Фирма);
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат Список;
КонецФункции

Функция ПолучитьСписокККМПоРМ()
	ТаблицаККМ = Новый ТаблицаЗначений;
	ТаблицаККМ.Колонки.Добавить("Фирма");
	ТаблицаККМ.Колонки.Добавить("ККМ");
	Если глПараметрыРМ.ККМЕсть ТОгда
		СтрТабл = ТаблицаККМ.Добавить();
		СтрТабл.Фирма = глПараметрыРМ.ККМ.Фирма;
		СтрТабл.ККМ = глПараметрыРМ.ККМ;
	КонецЕсли;
	Если глПараметрыРМ.ККМЕстьДоп тогда
		Попытка
			Для каждого эл из глПараметрыРМ.ККМСписокДоп Цикл
				СтрТабл = ТаблицаККМ.Добавить();
				СтрТабл.Фирма = эл.Значение.Фирма;
				СтрТабл.ККМ = эл.Значение;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат ТаблицаККМ;	
КонецФункции

Функция Оплата() Экспорт
	ЗарегистрироватьСобытие("Оплата.Вход в процедуру оплаты", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
	
	Если фИдетОплата Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Идет оплата","Процесс оплаты уже запущен","","ОК","",,6);
		ЗарегистрироватьСобытие("Оплата.ПовторныйВходВОплату",УровеньЖурналаРегистрации.Ошибка,,Заказ.Ссылка);
		Возврат Ложь;
	КонецЕсли;
	
	Товары = Заказ.Товары;
	Если Не Товары.Итог("Количество") Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Заказ сторнирован","","","ОК","",,6);
		ЗарегистрироватьСобытие("Оплата.Заказ сторнирован",УровеньЖурналаРегистрации.Ошибка,,Заказ.Ссылка);
		Возврат Ложь;
	КонецЕсли;
	
	РезультатКонтроля = глОбработки.ГлавнаяФорма.ВыполнитьКонтрольПоТекущемуДокументу();
	Если Не РезультатКонтроля Тогда
		РезультатОплаты.Вставить("Успех", Ложь);
		РезультатОплаты.Вставить("Отмена", Истина);
		РезультатОплаты.Вставить("Неудача", Ложь);
		фИдетОплата = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	фИдетОплата = Истина;
	Если Получено > 0 Тогда
		ОткрытьДенежныйЯщик();
	КонецЕсли;
	
	ТаблицаЮрЛиц = Новый ТаблицаЗначений;
	ТаблицаЮрЛиц.Колонки.Добавить("Фирма");
	ТаблицаЮрЛиц.Колонки.Добавить("Сумма");
	СписокФирм = ПолучитьСписокККМПоРМ();
	Для каждого стр из товары Цикл
		Если не Стр.ДокументОплаты.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		Если СписокФирм.Найти(Стр.Фирма,"Фирма") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрТабл = ТаблицаЮрЛиц.Найти(Стр.Фирма,"Фирма");
		Если СтрТабл = Неопределено Тогда
			СтрТабл = ТаблицаЮрЛиц.Добавить();
			СтрТабл.Фирма = Стр.Фирма;
			СтрТабл.Сумма = Стр.СуммаРеализации;
		Иначе
			СтрТабл.Сумма = СтрТабл.Сумма + стр.СуммаРеализации;
		КонецЕсли;
	КонецЦикла;
	Если ТаблицаЮрЛиц.Количество() = 0 Тогда
		РезультатОплаты.Успех = Ложь;
		РезультатОплаты.Отмена = Истина;
		Возврат ложь;
	КонецЕсли;
	
	СписокПротоколов = Новый СписокЗначений;
	// цикл по юр.лицам
	СуммаБезНал = Окр(Макс(Коплате - Получено,0),2);
	СуммаНал = Окр(Макс(Получено,0),2);
	Для Инд = 1 по ТаблицаЮрЛиц.Количество() Цикл
		
		// создадим новый протокол
		Если Инд <> 1 тогда
			ИнициализироватьПротокол();
		КонецЕсли;
		ПротоколРасчетов.Фирма = ТаблицаЮрЛиц[Инд-1].Фирма;
		ПротоколРасчетов.ККМ = СписокФирм.Найти(ПротоколРасчетов.Фирма,"Фирма").ККМ;
		
		Если СписокПротоколов.НайтиПоЗначению(ПротоколРасчетов.Ссылка) = Неопределено Тогда
			СписокПротоколов.Добавить(?(ПротоколРасчетов.ЭтоНовый(),ПротоколРасчетов.ПолучитьСсылкуНового(),ПротоколРасчетов.Ссылка));
		КонецЕсли;
		// заполним суммы по протоколу
		СуммаЮрлицо = ТаблицаЮрЛиц[Инд-1].Сумма;
		
		//Если СуммаЮрлицо = 0 Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ЗаполнитьПротокол(СуммаБезНал, СуммаНал, СуммаЮрлицо);
		
		ПротоколРасчетов.Заблокировать();
	
		//{ Отправка в ЕГАИС
		Если Товары.Итог("фАлкоголь") Тогда	
			Если Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) Или ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
				
				ПротоколРасчетов.РегистрацияExcise = 1;
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов,"Объект.Записать()");
				
				Если Алкоголь.ЗаписатьВExcise(Заказ) Тогда
					ПротоколРасчетов.ДобавленыЗаписиВexcise = 1;
					ПротоколРасчетов.РегистрацияExcise = 2;
					ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
				Иначе
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка при записи в Excise", "Не удалось записать PDF в Excise.
					|Обратитесь в ЦТО");
					РезультатОплаты.Отмена = Истина;
					ПротоколРасчетов.РегистрацияExcise = 0;
					ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
					ПротоколРасчетов.Разблокировать(); 
					Возврат Ложь;
				КонецЕсли;
				
				ПротоколРасчетов.РегистрацияЕГАИС = 1;
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов,"Объект.Записать()");
				КонтрольныеПоказатели.НачатьЗамер(Показатель_УТМ);
				РезультатЕГАИС = Алкоголь.ОтправитьЗаказВЕГАИС(Заказ,Ложь,ПротоколРасчетов);
				КонтрольныеПоказатели.ЗакончитьЗамер(Показатель_УТМ);
				Если РезультатЕГАИС.Успех Тогда 
					ПротоколРасчетов.ИдентификаторЗапросаЕГАИС = РезультатЕГАИС.ИдентификаторЗапроса; 
					ПротоколРасчетов.ПодписьЕГАИС = РезультатЕГАИС.Подпись;
					ПротоколРасчетов.ОтветМодуляЕГАИС = РезультатЕГАИС.ОтветМодуляЕГАИС;
					ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = "";
					ПротоколРасчетов.ОтветМодуляЕГАИС_Отмена = "";
					ПротоколРасчетов.РегистрацияЕГАИС = 2;
					ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
				Иначе
					ИнтерфейсРМ.ВопросПредупреждение("Ошибка",РезультатЕГАИС.ОшибкаЗаголовок,РезультатЕГАИС.ОшибкаТекст,"","ОК","",,0);
					РезультатОплаты.Отмена = Истина;
					ПротоколРасчетов.Разблокировать(); 
					Алкоголь.ЗаписатьВExcise(Заказ, Истина);
					ПротоколРасчетов.ДобавленыЗаписиВexcise = Ложь;
					ПротоколРасчетов.РегистрацияЕГАИС = 0;
					ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
					фИдетОплата = Ложь;
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; //}
		
		Заказ.ПересчетНДС(); 
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ, "Объект.Записать()");
		
		Если ВыбВариант <> Неопределено Тогда
			Если ВыбВариант = Справочники.ВариантыОплаты.Наличные или ВыбВариант = Справочники.ВариантыОплаты.Карта Тогда
				СтрокаПротокола = ПротоколРасчетов.Протокол.Найти(ВыбВариант,"ВариантыОплаты");
				
				СтрокаПротокола.СуммаФакт = СтрокаПротокола.Сумма;
				СтрокаПротокола.ВариантыОплаты = ВыбВариант;
				РезультатФискализации = Истина;
			Иначе
				ЗарегистрироватьСобытие("Ошибка", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка,"Выбранный вариант оплаты не совпадает с допустимыми");
				РезультатОплаты.Отмена = Истина;
				ПротоколРасчетов.Разблокировать(); 
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
				фИдетОплата = Ложь;
				Возврат Ложь;
			КонецЕсли;	
		Иначе
			ЗарегистрироватьСобытие("Оплата.Фискализация.До вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
			ПротоколРасчетов.РегистрацияФН = 1;
			РезультатФискализации = Фискализация(СуммаЮрлицо);
			ЗарегистрироватьСобытие("Оплата.Фискализация.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, СтрШаблон("РезультатФискализации = %1",РезультатФискализации));
		КонецЕсли;
		
		РезультатОплаты.Успех = РезультатФискализации;
		ПротоколРасчетов.Фискализирован = РезультатФискализации;
		Если РезультатФискализации Тогда
			ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
			ПротоколРасчетов.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
			ПротоколРасчетов.ККМ = ПротоколРасчетов.КассоваяСмена.Касса;
			ПротоколРасчетов.РабочееМесто = глРабочееМесто;
			ПротоколРасчетов.РегистрацияФН = 2;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
			Попытка
				ПротоколРасчетов.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ЗарегистрироватьСобытие("Ошибка проведения протокола расчетов", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			Если ЗначениеЗаполнено(ПротоколРасчетов.КассоваяСмена) Тогда
				Заказ.КассоваяСмена = ПротоколРасчетов.КассоваяСмена;
				Для Каждого Т Из Заказ.Товары Цикл
				КонецЦикла;
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ, "Объект.Записать()",,, Заказ.Ссылка);
			КонецЕсли;
			
			Попытка ПечатьЧекаЕГАИС() Исключение КонецПопытки;
		
			//{ Закрываем заказ, чтобы при вылете на финализации попадали в новый заказ
			ЗарегистрироватьСобытие("Оплата.Закрытие заказа перед финализацией", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
			НЗ = РегистрыСведений.ЗаказДопИнф.СоздатьНаборЗаписей();
			НЗ.Отбор.Заказ.Установить(Заказ.Ссылка);
			НЗ.Прочитать();
			Если НЗ.Количество() Тогда
				НЗ.ЗагрузитьКолонку(Массив(ПротоколРасчетов.Ссылка),"ПротоколРасчетов");
				НЗ.ЗагрузитьКолонку(Массив(Перечисления.СтатусыЗаказа.Закрыт),"Статус");
				НЗ.Записать();
			КонецЕсли;//}
				
			ЗарегистрироватьСобытие("Оплата.ФинализацияЧека.До вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
			Для Каждого Т Из Заказ.Товары Цикл
				Если Т.СтатусОплаты = -1 И Т.Фирма = ПротоколРасчетов.Фирма Тогда //Т.Фирма = глПараметрыРМ.Фирма Тогда
					Т.СтатусОплаты = 1;
					Т.ДокументОплаты = ПротоколРасчетов.Ссылка;
				КонецЕсли;
			КонецЦикла;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ, "Объект.Записать()",,, Заказ.Ссылка);
			Попытка
				ЛояльностьКлиент.ФинализацияЧека(Заказ, ПротоколРасчетов);
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ, "Объект.Записать()",,, Заказ.Ссылка);
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()",,, Заказ.Ссылка);
			Исключение
				ЗарегистрироватьСобытие("Оплата.ФинализацияЧека.Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			ЗарегистрироватьСобытие("Оплата.ФинализацияЧека.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
			
			//Если Не глПараметрыРМ.МестоРеализации = Справочники.МестаРеализации.Ресторан Тогда
			//Если ПротоколРасчетов.Фирма.МестоРеализации = Справочники.МестаРеализации.Ресторан Тогда
			//	Если Инд = ТаблицаЮрЛиц.Количество() Тогда
			//		Попытка ПечатьПодвалаЛояльности() Исключение КонецПопытки;
			//		ЗарегистрироватьСобытие("Оплата.ПечатьПодвалаЛояльности.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
			//	КонецЕсли;
			//КонецЕсли;
		Иначе // если РезультатФискализации = Ложь
			ПротоколРасчетов.РегистрацияФН = 0;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
			ОтменаВегаис();
		КонецЕсли;
		ПротоколРасчетов.Разблокировать();
	КонецЦикла;
	фИдетОплата = Ложь;
	ПечатьЧека(СписокПротоколов);
	Возврат РезультатФискализации;
КонецФункции

Функция ВозвратОплаты(Картой = Ложь) Экспорт 
	ЗарегистрироватьСобытие("Возврат оплаты.Вход в процедуру", УровеньЖурналаРегистрации.Информация, , докВозврат.Ссылка);
	Если фИдетОплата Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Идет оплата","Процесс оплаты уже запущен","","ОК","",,6);
		ЗарегистрироватьСобытие("Оплата.ПовторныйВходВОплату",УровеньЖурналаРегистрации.Ошибка,,докВозврат.Ссылка);
		Возврат Ложь;
	КонецЕсли;
	фИдетОплата = Истина;
	
	СписокФирм = ПолучитьСписокККМПоРМ();

	ТаблицаЮрЛиц = Новый ТаблицаЗначений;
	ТаблицаЮрЛиц.Колонки.Добавить("Фирма");
	ТаблицаЮрЛиц.Колонки.Добавить("Сумма");
	Для каждого стр из товары Цикл
		Если не Стр.ДокументОплаты.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		Если СписокФирм.Найти(Стр.Фирма,"Фирма") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрТабл = ТаблицаЮрЛиц.Найти(Стр.Фирма,"Фирма");
		Если СтрТабл = Неопределено Тогда
			СтрТабл = ТаблицаЮрЛиц.Добавить();
			СтрТабл.Фирма = Стр.Фирма;
			СтрТабл.Сумма = Стр.СуммаРеализации;
		Иначе
			СтрТабл.Сумма = СтрТабл.Сумма + стр.СуммаРеализации;
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаЮрЛиц.Количество() = 0 Тогда
		РезультатОплаты.Успех = Ложь;
		РезультатОплаты.Отмена = Истина;
		Возврат ложь;
	КонецЕсли;
	
	// цикл по юр.лицам
	СуммаБезНал = Окр(Макс(Коплате - Получено,0),2);
	СуммаНал = Окр(Макс(Получено,0),2);
	Для Инд = 1 по ТаблицаЮрЛиц.Количество() Цикл
		// создадим новый протокол
		Если Инд <> 1 тогда
			ИнициализироватьПротокол();
			ПротоколРасчетов.Фирма = ТаблицаЮрЛиц[Инд-1].Фирма;
		КонецЕсли;
		
		// заполним суммы по протоколу
		СуммаЮрлицо = ТаблицаЮрЛиц[Инд-1].Сумма;
		
		Если СуммаЮрлицо = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьПротоколПоВозврату(Картой,СуммаБезНал,СуммаНал,СуммаЮрлицо);
		
		ПротоколРасчетов.Заблокировать();
		Если Товары.Итог("фАлкоголь") Тогда
			РезультатЕГАИС = ВозвратВегаис();	
			Если Не РезультатЕГАИС.Успех Тогда
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",РезультатЕГАИС.ОшибкаЗаголовок,РезультатЕГАИС.ОшибкаТекст,"","ОК","",,0);
				РезультатОплаты.Отмена = Истина;
				ПротоколРасчетов.Разблокировать();
				фИдетОплата = Ложь;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	
		РезультатФискализации = ФискализацияВозврата();	
		РезультатОплаты.Успех = РезультатФискализации;
		Если РезультатФискализации Тогда
			ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
			ПротоколРасчетов.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
			ПротоколРасчетов.ККМ = ПротоколРасчетов.КассоваяСмена.Касса;
			ПротоколРасчетов.РабочееМесто = глРабочееМесто;
			
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
			Попытка
				ПротоколРасчетов.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ЗарегистрироватьСобытие("Ошибка проведения протокола расчетов", УровеньЖурналаРегистрации.Ошибка, , докВозврат.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Попытка
				ПечатьЧекаЕГАИС();	
			Исключение
			КонецПопытки;
			
			
			Попытка
				Если Товары.Итог("фАлкоголь") Тогда
					Если Алкоголь.ЗаписатьВExcise(докВозврат, Истина) Тогда
						ПротоколРасчетов.ДобавленыЗаписиВexcise = 1;
						ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
					Иначе
						ЗарегистрироватьСобытие("Excise", УровеньЖурналаРегистрации.Ошибка, 	, докВозврат.Ссылка, "Не удалось записать в Excise");
					КонецЕсли;
				КонецЕсли;
			Исключение
				ЗарегистрироватьСобытие("Excise", УровеньЖурналаРегистрации.Ошибка, , докВозврат.Ссылка, "Не удалось записать в Excise");
			КонецПопытки;
			
		Иначе // РезультатФискализации = Ложь
			
			Если ЗначениеЗаполнено(ПротоколРасчетов.идТранзакцииПлатежнойСистемы) И Не ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена Тогда
				ОтменаТранзакцииПлатежнойСистемыПоВозврату(Картой);
				РезультатФискализации = Ложь;
				РезультатОплаты.Отмена = Истина;
			Иначе
				ОтменаВозвратаВегаис();	
			КонецЕсли;
			
		КонецЕсли;
		Попытка
			ПротоколРасчетов.Разблокировать();
		Исключение
			ЗарегистрироватьСобытие("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка,, докВозврат.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	фИдетОплата = Ложь;
	Возврат РезультатФискализации;
КонецФункции

Процедура ОтменаВегаис()
	ОтменаЧека = Истина;
	Если ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) И Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
		ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = Истина;
		Заказ.Заблокирован = 1;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		ЗарегистрироватьСобытие("Оплата.ОтменаВегаис.До вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "ПротоколРасчетов.ИдентификаторЗапросаЕГАИС = " + ПротоколРасчетов.ИдентификаторЗапросаЕГАИС + "
		|ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = " + ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена);
		РезультатЕГАИС = Алкоголь.ОтправитьЗаказВЕГАИС(Заказ, ОтменаЧека);		
		ЗарегистрироватьСобытие("Оплата.ОтменаВегаис.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "ПротоколРасчетов.ИдентификаторЗапросаЕГАИС = " + ПротоколРасчетов.ИдентификаторЗапросаЕГАИС + "
		|ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = " + РезультатЕГАИС.ИдентификаторЗапроса);
		Если РезультатЕГАИС.Успех Тогда                                     	
			ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = Ложь;
			Заказ.Заблокирован = 0;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Иначе
			РезультатОплаты.Вставить("Неудача", Истина);
		КонецЕсли;
		ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = РезультатЕГАИС.ИдентификаторЗапроса; 
		ПротоколРасчетов.ОтветМодуляЕГАИС_Отмена = РезультатЕГАИС.ОтветМодуляЕГАИС;
		Алкоголь.ЗаписатьВExcise(Заказ, Истина);
		ПротоколРасчетов.ДобавленыЗаписиВexcise = Ложь;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	КонецЕсли;
КонецПроцедуры

Процедура ОтменаВозвратаВегаис()
	Если ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) И Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
		РезультатЕГАИС = Алкоголь.ОтправитьЗаказВЕГАИС(докВозврат);
		//РезультатЕГАИС = Новый Структура("Успех, ИдентификаторЗапроса, Подпись, ОтветМодуляЕГАИС", 1, "1","1","1");
		Если Не РезультатЕГАИС.Успех Тогда                                     	
			ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = Истина;
			докВозврат.Заблокирован = 1;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
			РезультатОплаты.Вставить("Неудача", Истина);
		КонецЕсли;
		ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = РезультатЕГАИС.ИдентификаторЗапроса; 
		ПротоколРасчетов.ОтветМодуляЕГАИС_Отмена = РезультатЕГАИС.ОтветМодуляЕГАИС;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	КонецЕсли;

КонецПроцедуры

Функция ВозвратВегаис()
	Если Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) ИЛИ ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
		РезультатЕГАИС = Алкоголь.ОтправитьЗаказВЕГАИС(докВозврат, Истина);
		//РезультатЕГАИС = Новый Структура("Успех, ИдентификаторЗапроса, Подпись, ОтветМодуляЕГАИС", 1, "1","1","1");
		Если РезультатЕГАИС.Успех Тогда
			ПротоколРасчетов.ИдентификаторЗапросаЕГАИС = РезультатЕГАИС.ИдентификаторЗапроса; 
			ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = "";
			ПротоколРасчетов.ОтветМодуляЕГАИС = РезультатЕГАИС.ОтветМодуляЕГАИС;
			ПротоколРасчетов.ПодписьЕГАИС = РезультатЕГАИС.Подпись;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		КонецЕсли;
		Возврат РезультатЕГАИС;
	Иначе
		РезультатЕГАИС = Новый Структура("Успех, ИдентификаторЗапроса, Подпись, ОтветМодуляЕГАИС", 1, "1","1","1");
		Возврат РезультатЕГАИС;
	КонецЕсли;
	
КонецФункции

Функция КассаАвтономная()
	КассаАвтономная = Неопределено;
	глПараметрыРМ.Свойство("КассаАвтономная", КассаАвтономная);
	Если КассаАвтономная = Неопределено Тогда
		 КассаАвтономная = Найти(НРег(глПараметрыРМ.ККМ), "автономная");
		 глПараметрыРМ.Вставить("КассаАвтономная", КассаАвтономная);
	КонецЕсли;
	Если КассаАвтономная Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Функция ПолучитьСписокПротоколовПоЗаказу()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПротоколРасчетов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	               |ГДЕ
	               |	ПротоколРасчетов.Заказ = &Заказ
	               |	И ПротоколРасчетов.Фискализирован
	               |	И НЕ ПротоколРасчетов.ПометкаУдаления";
	Запрос.УстановитьПараметр("Заказ",Заказ.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокВозврата = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		СписокВозврата.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат СписокВозврата;
КонецФункции

Процедура ПечатьПодвалаЛояльности()
	Если ПустаяСтрока(Заказ.ПодвалЧека) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПодвала = РазложитьСтрокуВМассив(Заказ.ПодвалЧека, Символы.ПС);
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", СтрокиПодвала);
	Параметры.Вставить("ТипШрифта", 0);
	// Напечатаем QR если нужно
	Если РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(глРабочееМесто,"ПечататьЧек") = 0 Тогда // 0 - не печатать фискальный чек
		Параметры.Вставить("ПечататьШКЧека","");
		МассивШК = Новый Массив;
		СписокПротоколов = ПолучитьСписокПротоколовПоЗаказу();
		Для каждого эл из СписокПротоколов Цикл
			СтруктураШК = новый Структура;
			СтруктураШК.Вставить("ДатаЧека",эл.Значение.ДатаЧека);
			СтруктураШК.Вставить("СуммаЧека",эл.Значение.ИтогСуммаФакт);
			СтруктураШК.Вставить("НомерФН",эл.Значение.КассоваяСмена.КассаЗаводскойФН);
			СтруктураШК.Вставить("НомерФД",эл.Значение.НомерФД);
			СтруктураШК.Вставить("НомерФПД",эл.Значение.НомерФПД);
			СтруктураШК.Вставить("СНО",?(найти(эл.Значение.Фирма.НаименованиеЮридическогоЛица,"ИП") <> 0,3,0));
			МассивШК.Добавить(СтруктураШК);
		КонецЦикла;
		Параметры.Вставить("МассивШКЧеков",МассивШК);
	КонецЕсли;
	//
	ПараметрыВыходные = ПараметрыВыходные;
	Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",Параметры,ПараметрыВыходные);
	ПоказатьОшибкуККМ(ПараметрыВыходные);

КонецПроцедуры

Функция ДополнитьСтроку(Стр, ДлинаСтроки, Выравнивание=0, СтрДоб=" ")
	
	ТекДлинаСтроки = СтрДлина(Стр);
	
	Если ТекДлинаСтроки >= ДлинаСтроки Тогда
		Если Выравнивание=2 Тогда	// по правому краю
			Возврат Прав(Стр, ДлинаСтроки);
		Иначе
			Возврат Лев(Стр, ДлинаСтроки);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьСлева	=0;
	ДобавитьСправа	=0;
	
	Если Выравнивание=0 Тогда		// по левому краю
		ДобавитьСправа=ДлинаСтроки-ТекДлинаСтроки;
		
	ИначеЕсли Выравнивание=2 Тогда	// по правому краю
		ДобавитьСлева =ДлинаСтроки-ТекДлинаСтроки;
		
	Иначе							// по центру
		ДобавитьСлева =Цел((ДлинаСтроки-ТекДлинаСтроки)/2);
		ДобавитьСправа=ДлинаСтроки-ТекДлинаСтроки-ДобавитьСлева;
		
	КонецЕсли;
	
	Для н=1 По ДобавитьСлева Цикл
		Стр=СтрДоб+Стр;
	КонецЦикла;
	
	Для н=1 По ДобавитьСправа Цикл
		Стр=Стр+СтрДоб;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

Функция ПечатьЧека(СписПротоколов) 
	
	ТаблицаОтделов = Новый ТаблицаЗначений;
	ТаблицаОтделов.Колонки.Добавить("Отдел");
	ТаблицаОтделов.Колонки.Добавить("Сумма");
	
	ДлинаСтроки = 48;
	МассивСтрок = Новый Массив;
	СуммаИтогоПоПротоколам = 0;

	Для каждого элТекПротокол из СписПротоколов Цикл
		//Сообщить(ЭлТекПротокол.Значение);
		Если не элТекПротокол.Значение.Фискализирован Тогда
			Продолжить;
		КонецЕсли;
		ТекПротокол = ЭлТекПротокол.Значение;
		// добавим данные по ЮрЛицу
		СтрНаим = ТекПротокол.Фирма.НаименованиеЮридическогоЛица;
		СтрНаим = ДополнитьСтроку(СтрНаим,ДлинаСтроки,0);
		СтрИНН = "ИНН " + ТекПротокол.Фирма.ИНН;
		СтрНаим = Лев(СтрНаим,ДлинаСтроки - 1 -СтрДлина(СтрИНН));
		МассивСтрок.Добавить(СтрНаим + " " + СтрИНН);
		Стр = ДополнитьСтроку(Строка(ТекПротокол.Фирма.Наименование),ДлинаСтроки,1);
		МассивСтрок.Добавить(Стр);
		МассивСтрок.Добавить("");
		
		//// открытие чека - было раньше вроде не обрабатывается ?????
		//Задание = ТаблицаЗадания.Добавить();
		//Если Заказ.ИтоговаяСумма > ОплаченнаяСумма или Заказ.ИтоговаяСумма = 0 Тогда
		//	Задание.ТипДанных = "ОткрытьЧекПродажа";
		//ИначеЕсли Заказ.ИтоговаяСумма < ОплаченнаяСумма Тогда
		//	Задание.ТипДанных = "ОткрытьЧекВозврат";
		//КонецЕсли;
		
		ДатаЗаказ = ?(ЗначениеЗаполнено(ТекПротокол.ДатаЧека),ТекПротокол.ДатаЧека,ТекПротокол.Дата);
		МассивСтрок.Добавить(Формат(ДатаЗаказ,"ДЛФ=Д"));
		Стр = "Ваш заказ на станциях ""Ресторана"" №"+Формат(Число(ТекПротокол.Номер),"ЧГ=") + ?(ЗначениеЗаполнено(ТекПротокол.Заказ.ВнешнийНомер), " / "+ТекПротокол.Заказ.ВнешнийНомер, "");
		МассивСтрок.Добавить(ДополнитьСтроку(Стр,ДлинаСтроки,1));
		
		ТабТовары = ТекПротокол.Заказ.Товары.Выгрузить();
		СтрокиПротокола = ТабТовары.НайтиСтроки(Новый Структура("ДокументОплаты",ТекПротокол));
		СписокКУдалению = Новый Массив;
		Если СтрокиПротокола.Количество() <> 0 Тогда
			Для каждого СтрЗаказа из ТабТовары Цикл
				Если СтрЗаказа.ДокументОплаты <> ТекПротокол Тогда
					СписокКУдалению.Добавить(СтрЗаказа);
				КонецЕсли;
			КонецЦикла;
			Для каждого эл из СписокКУдалению Цикл
				ТабТовары.удалить(эл);
			КонецЦикла;
		КонецЕсли;
		ТабТовары.Колонки.Добавить("Станция");
		ТабТовары.Колонки.Добавить("Порядок");
		Для Каждого СтрЗаказа из ТабТовары цикл
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗаказТоварыДопИнф.Станция
			|ИЗ
			|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
			|ГДЕ
			|	ЗаказТоварыДопИнф.Заказ = &Заказ
			|	И ЗаказТоварыДопИнф.ИдСтроки = &ИдСтроки";
			
			Запрос.УстановитьПараметр("Заказ", ТекПротокол.Заказ);
			Запрос.УстановитьПараметр("ИдСтроки", СтрЗаказа.ИдСтроки);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрЗаказа.Станция = Выборка.Станция;
				Если ЗначениеЗаполнено(СтрЗаказа.Станция) тогда
					СтрЗаказа.Порядок = СтрЗаказа.Станция.Код;
				Иначе
					СтрЗаказа.Порядок = "9"; //заказы без станции убираем в хвост
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ТабТовары.Сортировать("Порядок");
		
		Если глПараметрыРМ.ПечатьЧекаТовары Тогда
			ИтогоСумма = 0;
			ИтогоСуммаРеализации = 0;
			ИтогоПоАбонементам = 0;
			
			текСтанция = "";
			ВремяЗаказа = Дата(1,1,1);
			
			
			НомСтр=0;
			Для каждого СтрЗаказа Из ТабТовары Цикл
				Если ТекСтанция <> СтрЗаказа.Станция тогда
					//выводим шапку для станции
					ТекСтанция = СтрЗаказа.Станция;
					
					Если НомСтр<>0 тогда
						МассивСтрок.Добавить(ДополнитьСтроку("",ДлинаСтроки,1,"_"));
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтрЗаказа.Станция) тогда
						//если не пустая станция
						Если Найти(""+ТекСтанция,"БАР")>0 тогда
							МассивСтрок.Добавить(ДополнитьСтроку("Ваш заказ в БАРе, бармен: "+СтрЗаказа.Автор,ДлинаСтроки,1));
						иначе
							МассивСтрок.Добавить(ДополнитьСтроку("Шеф станции: "+ТекСтанция + "   "+СтрЗаказа.Автор,ДлинаСтроки,1));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Товар = СтрЗаказа.Товар;
				Если СтрЗаказа.Количество=0 ИЛИ Товар.ВариантПечати=0 Тогда
					Продолжить;
				КонецЕсли;
				
				//посчитаем сумму платных специфик
				СуммаСпецифик = 0;
				ОтборСпецифик = Новый Структура("НомерСтрокиТовара", СтрЗаказа.НомерСтроки);
				ТЗ = ТекПротокол.Заказ.Специфики.Выгрузить();
				ТЗ.Свернуть("Специфика, НомерСтрокиТовара, ГруппаПечати, ГруппаОплаты, Цена, ЦенаРеализации", "Количество, НомерСтроки");
				Для Каждого Т Из ТЗ Цикл
					Т.НомерСтроки = ТЗ.Индекс(Т)+1;
				КонецЦикла;		
				МассивСтрокСпецифик = ТЗ.НайтиСтроки(ОтборСпецифик);
				Для каждого СтрСпецифики Из МассивСтрокСпецифик Цикл
					СуммаСпецифик = СуммаСпецифик + СтрСпецифики.ЦенаРеализации;
				КонецЦикла; 
				
				ИтогоСумма = ИтогоСумма + СтрЗаказа.Сумма;
				ИтогоСуммаРеализации = ИтогоСуммаРеализации + СтрЗаказа.СуммаРеализации;
				
				СуммаПоАбонементу = 0;
				
				//Если СчетПодробно Тогда
				//	ВремяЗаказаСтроки = РегистрыСведений.ЗаказТоварыДопИнф.Получить(Новый Структура("Заказ,ИдСтроки", Заказ.Ссылка, СтрЗаказа.ИдСтроки) ).ВремяЗаказано;
				//	Если ВремяЗаказаСтроки - ВремяЗаказа > 60 Тогда
				//		
				//		Задание = ТаблицаЗадания.Добавить();
				//		Задание.Данные    = Перевод("Время заказа",Язык) + " " + Формат(ВремяЗаказаСтроки,"ДФ=ЧЧ:мм");
				//		Задание.ТипДанных = "Строка";
				//		Задание.Параметры = "Жирный,Лево,ПереводСтроки";
				//		
				//		ВремяЗаказа = ВремяЗаказаСтроки;
				//	КонецЕсли; 
				//КонецЕсли; 
				
				НомСтр=НомСтр+1;
				
				КолонкиПечати = Новый СписокЗначений;
				ИнтерфейсАдмина.ЗаполнитьСписокЧтоПечататьВСчете(КолонкиПечати, Товар.ВариантПечати);
				
				СтрПеч="";
				Если КолонкиПечати[0].Пометка Тогда
					СтрПеч=СтрПеч+Строка(НомСтр)+". ";
				КонецЕсли;
				Если КолонкиПечати[1].Пометка Тогда
					СтрПеч=СтрПеч+Товар.Наименование;
				КонецЕсли;
				Если КолонкиПечати[2].Пометка Тогда
					Если ИнтерфейсРМ.ЭтоТариф(Товар) Тогда
						СтрПеч=СтрПеч+" ["+Товар.Тариф.ВремяЦены+"]";
					Иначе
						СтрПеч=СтрПеч+" ["+СокрЛП(Товар.ЕдиницаИзмерения.Наименование)+"]";
					КонецЕсли;                      	
				КонецЕсли;
				
				// Выход в граммах добавился позднее, поэтому он в конце списка с индексом 8
				Если КолонкиПечати[8].Пометка И ЗначениеЗаполнено(Товар.Выход) Тогда
					СтрПеч=СтрПеч+" ["+Товар.Выход+"]";
				КонецЕсли;
				
				
				Если ЗначениеЗаполнено(СтрПеч) Тогда
					МассивСтрок.Добавить(ДополнитьСтроку(СтрПеч,ДлинаСтроки));
				КонецЕсли;
				
				КолСтрЗаданияТовар = МассивСтрок.Количество();	// для тарификации
				
				СтрПеч="";
				Если КолонкиПечати[3].Пометка Тогда
					СтрПеч=СтрПеч+Строка(СтрЗаказа.Количество);
				КонецЕсли;
				Если КолонкиПечати[4].Пометка Тогда
					СтрПеч=СтрПеч+" * "+ФорматСумм(СтрЗаказа.Цена);
				КонецЕсли;
				Если КолонкиПечати[5].Пометка Тогда
					Если СтрЗаказа.Сумма=0 И ЗначениеЗаполнено(СтрЗаказа.Подарок) Тогда
						СтрПеч=СтрПеч+СтрДополнитьСлева("Подарок",15);
					Иначе
						СтрПеч=СтрПеч+СтрДополнитьСлева("= "+ФорматСумм(СтрЗаказа.СуммаРеализации-СуммаСпецифик*СтрЗаказа.Количество) ,15);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрПеч) Тогда
					МассивСтрок.Добавить(ДополнитьСтроку(СтрПеч,ДлинаСтроки,2));
					
					//-------------------------------------------
					// тарификация
					Если ИнтерфейсРМ.ЭтоТариф(Товар) Тогда
						
						РасчетыПоТарифу = СтрЗаказа.РасчетыПоТарифу;
						Если ЗначениеЗаполнено(РасчетыПоТарифу) Тогда
							
							ВариантРасшифровки	= РасчетыПоТарифу.Тариф.ВариантРасшифровки;
							ПоказыватьДаты		= РасчетыПоТарифу.Тариф.ПоказыватьДаты;
							ТаблицаРасчетов		= РасчетыПоТарифу.ТаблицаРасчетов;
							
							Если ВариантРасшифровки=1 Тогда
								// общий период
								Время1 = ТаблицаРасчетов[0].Время1;
								Время2 = ТаблицаРасчетов[ТаблицаРасчетов.Количество()-1].Время2;
								
								Если ПоказыватьДаты Тогда
									МассивСтрок.Добавить(?(ДлинаСтроки>32,"  ","")+"("+Формат(Время1,"ДФ=дд.ММ.гг,ЧЧ:мм")+" - "+Формат(Время2,"ДФ=дд.ММ.гг,ЧЧ:мм")+")");
								Иначе
									МассивСтрок.Добавить("  ("+Формат(Время1,"ДФ=ЧЧ:мм")+" - "+Формат(Время2,"ДФ=ЧЧ:мм")+")");
								КонецЕсли;
								
							ИначеЕсли ВариантРасшифровки=2 Тогда
								// подробно
								// убираем строку с общим количеством
								Пока МассивСтрок.Количество() > КолСтрЗаданияТовар Цикл
									МассивСтрок.Удалить(КолСтрЗаданияТовар);
								КонецЦикла; 
								
								Для каждого СтрокаРасчетов Из ТаблицаРасчетов Цикл
									СтрПеч="";
									Если КолонкиПечати[3].Пометка Тогда
										СтрПеч=СтрПеч+Строка(СтрокаРасчетов.Количество);
									КонецЕсли;
									Если КолонкиПечати[4].Пометка Тогда
										СтрПеч=СтрПеч+" * "+ФорматСумм(СтрокаРасчетов.Цена);
									КонецЕсли;
									Если КолонкиПечати[5].Пометка Тогда
										СтрПеч=СтрПеч+СтрДополнитьСлева("= "+ФорматСумм(СтрокаРасчетов.Сумма) ,15);
									КонецЕсли;
									Если ЗначениеЗаполнено(СтрПеч) Тогда
										МассивСтрок.Добавить(ДополнитьСтроку(СтрПеч,ДлинаСтроки,2));
									КонецЕсли;
									
									Время1 = СтрокаРасчетов.Время1;
									Время2 = СтрокаРасчетов.Время2;
									
									Если ПоказыватьДаты Тогда
										МассивСтрок.Добавить(?(ДлинаСтроки>32,"  ","")+"("+Формат(Время1,"ДФ=дд.ММ.гг,ЧЧ:мм")+" - "+Формат(Время2,"ДФ=дд.ММ.гг,ЧЧ:мм")+")");
									Иначе
										МассивСтрок.Добавить("  ("+Формат(Время1,"ДФ=ЧЧ:мм")+" - "+Формат(Время2,"ДФ=ЧЧ:мм")+")");
									КонецЕсли;
									
								КонецЦикла;
								
								Если КолонкиПечати[5].Пометка И ТаблицаРасчетов.Количество()>1 Тогда
									МассивСтрок.Добавить(ДополнитьСтроку("Всего"+": "+ФорматСумм(СтрЗаказа.Сумма),ДлинаСтроки,2));
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				// специфики
				Для каждого СтрСпецифики Из МассивСтрокСпецифик Цикл
					Если (СтрСпецифики.Специфика.ПечатьНаСчете) или (СтрСпецифики.ЦенаРеализации>0) Тогда
						Для каждого СтрокаТовара  Из МассивСтрокСпецифик Цикл
							Если СтрокаТовара.НомерСтроки = СтрСпецифики.НомерСтрокиТовара Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла; 
						
						
						СтрПечать = " - "+СтрСпецифики.Специфика.Наименование;
						Если СтрСпецифики.Цена > 0 тогда
							пСтрока = "" + СтрокаТовара.Количество + " * " + ФорматСумм(СтрСпецифики.Цена);
							пСтрока = пСтрока + СтрДополнитьСлева(" = " + ФорматСумм(СтрСпецифики.ЦенаРеализации*СтрокаТовара.Количество),15);
							ДлинаИмени = ДлинаСтроки - СтрДлина(пСтрока);
							СтрПечать = Лев(СтрПечать+"                                               ",ДлинаИмени)+пСтрока;
						КонецЕсли;
						МассивСтрок.Добавить(ДополнитьСтроку(СтрПечать,ДлинаСтроки));
						
						СуммаСпецифик = СуммаСпецифик + СтрСпецифики.ЦенаРеализации;
					КонецЕсли;
				КонецЦикла; 
				
				//-------------------------------------------
				СуммаСкидки = СтрЗаказа.СуммаРеализации + СуммаПоАбонементу - СтрЗаказа.Сумма;
				
				Если СуммаСкидки<>0 Тогда
					Если КолонкиПечати[6].Пометка Тогда
						МассивСтрок.Добавить(ДополнитьСтроку(?(СуммаСкидки<0,"Скидка:","Наценка:")+ФорматСумм1(СуммаСкидки,15),ДлинаСтроки,2));
					КонецЕсли;
					Если КолонкиПечати[7].Пометка Тогда
						СтрПеч = "С учетом "+?(СуммаСкидки<0, "скидки:", "наценки:" ) + ДополнитьСтроку("= "+ФорматСумм(СтрЗаказа.СуммаРеализации + СуммаПоАбонементу),15,1);
						МассивСтрок.Добавить(ДополнитьСтроку(СтрПеч,ДлинаСтроки,2));
					КонецЕсли;
				КонецЕсли;
				
				
			КонецЦикла;
			
			//-------------------------------------------
			ДлинаСуммы		 = СтрДлина(ФорматСумм(ИтогоСумма)) + 2;	// плюс 2 для "= "
			ДлинаРасшифровки = ДлинаСтроки - ДлинаСуммы - 1;			// минус 1 для ":"
			
			// формирование "подвала" счета
			МассивСтрок.Добавить(ДополнитьСтроку("",ДлинаСтроки,1,"_"));
			
			Если ТекПротокол.Заказ.Скидки.Количество()=0 И ИтогоПоАбонементам=0 Тогда
				МассивСтрок.Добавить(ДополнитьСтроку(ДополнитьСтроку("ИТОГО",ДлинаРасшифровки,1)+":"+ФорматСумм1(ИтогоСуммаРеализации, ДлинаСуммы),ДлинаСтроки,2));
				
			Иначе
				// подробно со скидками и абонементами
				МассивСтрок.Добавить(ДополнитьСтроку(ДополнитьСтроку("ИТОГО без скидок",ДлинаРасшифровки,1)+":"+ФорматСумм1(ИтогоСумма, ДлинаСуммы),ДлинаСтроки,2));
				
				Если ИтогоСуммаРеализации = ТекПротокол.ИтогСуммаФакт Тогда
					// нет разделения по группам оплаты
					
					Если ТекПротокол.Заказ.Скидки.Количество()>0 Тогда
						МассивСтрок.Добавить(ДополнитьСтроку(ДополнитьСтроку("Скидки (наценки)",ДлинаРасшифровки,1)+":"+СтрДополнитьСправа("",ДлинаСуммы),ДлинаСтроки,2));
						
						НетНеНулевыхСкидок = Истина;	// подарки выводить не надо
						Для каждого СтрокаСкидки Из ТекПротокол.Заказ.Скидки Цикл
							Если СтрокаСкидки.Сумма=0 Тогда
								Продолжить;
							КонецЕсли; 
							НетНеНулевыхСкидок = Ложь;
							
							НаименованиеДляПечати = СтрокаСкидки.Скидка.НаименованиеДляПечати;
							Если НЕ ЗначениеЗаполнено(НаименованиеДляПечати) Тогда
								НаименованиеДляПечати = ДополнитьСтроку(НРег(Строка(СтрокаСкидки.Тип)),ДлинаРасшифровки,1);
							КонецЕсли;
							Если НЕ ЗначениеЗаполнено(НаименованиеДляПечати) Тогда
								НаименованиеДляПечати = ДополнитьСтроку(?(СтрокаСкидки.Сумма<0,"скидка","наценка"),ДлинаРасшифровки,1);
							КонецЕсли;
							
							МассивСтрок.Добавить(ДополнитьСтроку(НаименованиеДляПечати + ":" + ФорматСумм1(СтрокаСкидки.Сумма, ДлинаСуммы),ДлинаСтроки,2));
						КонецЦикла;
						
						Если НетНеНулевыхСкидок Тогда
							МассивСтрок.Удалить(МассивСтрок.Количество()-1);
						КонецЕсли; 
					КонецЕсли; 
					
				Иначе
					// нет возможности расшифровать по типам скидок
					ИтогоСкидка = ИтогоСуммаРеализации + ИтогоПоАбонементам - ИтогоСумма;
					
					Если ИтогоСкидка>0 Тогда
						МассивСтрок.Добавить(ДополнитьСтроку(ДополнитьСтроку(?(ИтогоСкидка<0,"Скидка","Наценка"),ДлинаРасшифровки,1)+":"+ФорматСумм1(ИтогоСкидка, ДлинаСуммы),ДлинаСтроки,2));
					КонецЕсли;
					
				КонецЕсли;
				
				Если ИтогоПоАбонементам>0 Тогда
					МассивСтрок.Добавить(ДополнитьСтроку(ДополнитьСтроку("Закрыто абонементом",ДлинаРасшифровки,1)+":"+ФорматСумм1(-ИтогоПоАбонементам, ДлинаСуммы),ДлинаСтроки,2));
				КонецЕсли; 
				
			КонецЕсли;
		Иначе
			ДлинаСуммы = СтрДлина(ФорматСумм(Заказ.ИтоговаяСумма)) + 2;   // плюс 2 для "= "
		КонецЕсли;
		// это уже для регистрации по отделам
		Для каждого СтрЗаказа Из ТабТовары Цикл
			
			Товар = СтрЗаказа.Товар;
			Если СтрЗаказа.СуммаРеализации=0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если Товар.Категория.НомерОтдела <> 0 Тогда
				Отдел = Товар.Категория.НомерОтдела;
			ИначеЕсли Заказ.МестоРеализации.НомерОтдела <> 0 Тогда
				Отдел = ТекПротокол.Фирма.МестоРеализации.НомерОтдела;
			Иначе
				Отдел = 1;
			КонецЕсли;
			
			СтрОтдел = ТаблицаОтделов.Добавить();
			СтрОтдел.Отдел = Отдел;
			СтрОтдел.Сумма = СтрЗаказа.СуммаРеализации;
			
		КонецЦикла;
		ТаблицаОтделовИтогСумма = ТаблицаОтделов.Итог("Сумма");
		
		СписокПараметровЗакрытия = Новый Структура;
		СуммаИтогоПоПротоколам = СуммаИтогоПоПротоколам + ТекПротокол.ИтогСуммаФакт;
		
		// добавим QR чека
		Если РегистрыСведений.ДополнительныеСвойства.ЗначениеСвойства(глРабочееМесто,"ПечататьЧек") = 0 Тогда // 0 - не печатать фискальный чек
			МассивСтрок.Добавить(" ");
			СтрШК = "t=" + Формат(ТекПротокол.ДатаЧека,"ДФ=yyyyMMddTHHmm");
			СтрШК = СтрШК + "&s=" + Формат(ТекПротокол.ИтогСуммаФакт,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
			СтрШК = СтрШК + "&fn=" + СтрЗаменить(СтрЗаменить(ТекПротокол.КассоваяСмена.КассаЗаводскойФН," ",""),Символ(160),"");
			СтрШК = СтрШК + "&i=" + Формат(ТекПротокол.НомерФД,"ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
			СтрШК = СтрШК + "&pf=" + СтрЗаменить(СтрЗаменить(ТекПротокол.НомерФПД," ",""),Символ(160),"");
			СтрШК = СтрШК + "&n=" + ?(найти(ТекПротокол.Фирма.НаименованиеЮридическогоЛица,"ИП") <> 0,3,0); // число 0 - общая, 3 - ЕНВД
			
			МассивСтрок.Добавить("|ШтрихКод|" + СтрШК); 
			МассивСтрок.Добавить(" ");
		КонецЕсли;
	КонецЦикла;
	// дописать итого по оплатам если их несколько
	Если СписПротоколов.Количество() <> 1 Тогда
		МассивСтрок.Добавить(ДополнитьСтроку("",ДлинаСтроки,1,"_"));
		ДлинаСуммы		 = СтрДлина(ФорматСумм(СуммаИтогоПоПротоколам)) + 2;	// плюс 2 для "= "
		ДлинаРасшифровки = ДлинаСтроки - ДлинаСуммы - 1;			// минус 1 для ":"
		МассивСтрок.Добавить(ДополнитьСтроку(ДополнитьСтроку("ВСЕГО",ДлинаРасшифровки,1)+":"+ФорматСумм1(СуммаИтогоПоПротоколам, ДлинаСуммы),ДлинаСтроки,2));
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("Строки",МассивСтрок);
	ПараметрыВыходные = ПараметрыВыходные;
	Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",Параметры,ПараметрыВыходные);
	ПоказатьОшибкуККМ(ПараметрыВыходные);
	
КонецФункции                    	

// Выводит на ККТ слип ЕГАИС: QR код, ссылку и подпись
Функция ПечатьЧекаЕГАИС() Экспорт
 
	Если Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗарегистрироватьСобытие("Оплата.Печать чека ЕГАИС.До вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
	Строки = Новый Массив;
	Строки.Добавить("|ШтрихКод|" + ПротоколРасчетов.ИдентификаторЗапросаЕГАИС);
	Строки.Добавить(" ");
	Строки.Добавить(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС);
	Строки.Добавить(" ");
	Строки.Добавить(ПротоколРасчетов.ПодписьЕГАИС);
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", Строки);
	ПараметрыВыходные = ПараметрыВыходные;
	ЗарегистрироватьСобытие("Оплата.Печать чека ЕГАИС.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
	Попытка
		Результат = Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",Параметры,ПараметрыВыходные);
		ПоказатьОшибкуККМ(ПараметрыВыходные);
	Исключение
	КонецПопытки;
	Возврат Результат;
КонецФункции

СписокПротоколов = Новый СписокЗначений;
#КонецЕсли
Показатель_ПечатьЧеков 		= КонтрольныеПоказатели.КодПоказателя("Печать чеков");
Показатель_УТМ 				= КонтрольныеПоказатели.КодПоказателя("УТМ");
