
Перем ПараметрыТО Экспорт;   // Параметры торгового оборудования.
Перем Результат Экспорт;     // Результат выполнения действия.
Перем DRV Экспорт;           // Драйвер

Перем Пароль, ИгнорироватьОбщийПароль, Кассир;
Перем ТаблицаПараметрыСтроки;
Перем МаксДлинаСтроки;

Перем мНомерСтроки;			// для формирования буфера чека

#Если Клиент Тогда

// Производит инициализацию торгового оборудования.
//
Процедура Инициализация() Экспорт
	
	Если НЕ ЗагрузитьДрайвер() Тогда
		Возврат;
	КонецЕсли; 
	
	ПрочитатьПараметр("НеФискальныйРежим"	, Ложь );
	ПрочитатьПараметр("PortNumber"			, 1 );
	ПрочитатьПараметр("BaudRate"			, 9600 );
	ПрочитатьПараметр("Password"		    , "0000" );
	ПрочитатьПараметр("InternalTimeout"		, 500 );
    ПрочитатьПараметр("ExternalTimeout"		, 30000);
	
	ЗаполнитьПараметрыСтроки();
	
КонецПроцедуры

// Загружает драйвер ТО.
//
// Возвращаемое значение:
//  Истина - драйвер загружен, ложь - нет.
//
Функция ЗагрузитьДрайвер()
	
	Если глТорговоеОборудование.Свойство("MercuryFPrtCOM",DRV) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Попытка 
		// Создание объекта принтера MercuryFPrtX.ocx без визуализации
		DRV=НОВЫЙ COMОбъект("Incotex.MercuryFPrtCOM");
	Исключение
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Ошибка загрузки драйвера!";
		Результат.Подробно	= "Программе не удалось загрузить компоненту MercuryFPrtX.ocx";
		Возврат Ложь;
	КонецПопытки;
	
	глТорговоеОборудование.Вставить("MercuryFPrtCOM", DRV);
	
	Возврат Истина;
КонецФункции

// Выполняет чтение параметра ТО.
//
// Параметры:
//  ИмяПараметра        - имя параметра,
//  ЗначениеПоУмолчанию - значение по умолчанию для данного параметра.
//
// Возвращаемое значение:
//  Значение параметра или значение по умолчанию
//
Процедура ПрочитатьПараметр(ИмяПараметра,ЗначениеПоУмолчанию)
	
	Если НЕ ПараметрыТО.Свойство(ИмяПараметра) Тогда
		ПараметрыТО.Вставить(ИмяПараметра,ЗначениеПоУмолчанию);
	КонецЕсли; 
	
	ЭтотОбъект[ИмяПараметра] = ПараметрыТО[ИмяПараметра];
	
КонецПроцедуры

// Выполняет действие с ТО.
//
// Параметры:
//  Действие - имя действия,
//  ПараметрыДействия - произвольный набор параметров
//
Процедура ВыполнитьДействие( Действие, ПараметрыДействия=Неопределено ) Экспорт
	
	ПараметрыДействия.Свойство("Пароль",Пароль);
	ПараметрыДействия.Свойство("Кассир",Кассир);
	
	Если НЕ ПараметрыДействия.Свойство("ИгнорироватьОбщийПароль",ИгнорироватьОбщийПароль) Тогда
		ИгнорироватьОбщийПароль = Ложь;
	КонецЕсли; 
	
	Если Действие = "Подключить" Тогда
		Подключить();
		Отключить();
		
	ИначеЕсли Действие = "Отключить" Тогда
		Отключить();
		
	ИначеЕсли Действие = "Регистрация" Тогда
		РегистрацияНаККМ( ПараметрыДействия.ТаблицаЗадания );
		Отключить();
		
	ИначеЕсли Действие = "Печать" Тогда
		КолвоКопий = 1;
		Если НЕ ПараметрыДействия.Свойство("КолвоКопий",КолвоКопий) Тогда
			КолвоКопий = 1;
		КонецЕсли;
		
		Печать( ПараметрыДействия.ТаблицаЗадания, КолвоКопий );
		Отключить();
		
	ИначеЕсли Действие="Отчет" Тогда
		ПолучитьОтчет(ПараметрыДействия.ТипОтчета);
		Отключить();
		
	ИначеЕсли Действие="СинхронизироватьВремя" Тогда
		СинхронизироватьВремя();
		Отключить();
		
	ИначеЕсли Действие="ОткрытьСмену" Тогда
		//ОткрытьСмену(); не известно как
		
	Иначе
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Неизвестная команда!";
		Результат.Подробно	= "Команда """+Действие+""" не определена для "+ТО.Наименование;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка ошибок
//
Функция Ошибка(ОписаниеОшибки="") Экспорт
	
	Если DRV.ErrCode = 0 Тогда
		// ошибка не расшифрована драйвером, попробуем выцепить ее из описания
		КодОшибки = "";
		
		Если НЕ ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОписаниеОшибки = "Неизвестная ошибка";
			
		Иначе
			н = Найти(ОписаниеОшибки, "(Incotex.MercuryFPrtCOM):");
			Если н>0 Тогда
				ОписаниеОшибки = Сред(ОписаниеОшибки, н+25);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		КодОшибки = ""+DRV.ErrCode+":"+DRV.ErrCodeEx;
		ОписаниеОшибки = DRV.ErrMessage;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Торговое оборудование.Ошибка", УровеньЖурналаРегистрации.Ошибка, ТО.Метаданные(), ТО.Ссылка, ОписаниеОшибки);
	
	Результат.Ошибка = Истина;
	Результат.Описание = "Ошибка ККМ: "+КодОшибки;
	Результат.Подробно = ОписаниеОшибки;
	
КонецФункции

// Установка параметров подключения
//
Функция Подключить(БезПроверок=Ложь) Экспорт
	
	Результат.Ошибка = Ложь;
	
	// если прошлый сеанс почему либо не закрылся, то будет ошибка
	// поэтому закроем еще раз
	Если DRV.Active Тогда
		Отключить();
	КонецЕсли; 
	
	// Параметры связи
	Попытка
		DRV.Password	   = ?(ПустаяСтрока(Password), "0000", Password);
		DRV.PortNum 	   = PortNumber;
		DRV.BaudRate	   = BaudRate;
		DRV.InternalTimeout= ?(InternalTimeout=0,   500, InternalTimeout);
		DRV.ExternalTimeout= ?(ExternalTimeout=0, 30000, ExternalTimeout);
		
		DRV.Open();
		
	Исключение
		Ошибка(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Если БезПроверок Тогда
		Возврат Истина;
	КонецЕсли;
	
	// проверка соответствия времени
	Д1 = DRV.QueryEcrDateTime();
	Д2 = ТекущаяДата();
	
	// в секундах
	РазницаВремени = Д2-Д1;
	РазницаВремени = ?(РазницаВремени<0,-РазницаВремени,РазницаВремени) / 60;
	Если РазницаВремени>5 Тогда
		Результат.Ошибка = Истина;
		Результат.Описание = "Ошибка ККМ";
		Результат.Подробно = "Время ККМ отличается от системного времени более, чем на 5 минут...";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Отключение драйвера
//
Функция Отключить() Экспорт
	
	Попытка
		DRV.Close(Истина);
	Исключение
	КонецПопытки;
		
КонецФункции

// Синхронизация времени ККМ с системным
//
Процедура СинхронизироватьВремя()
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		DRV.SynchronizeEcrDateTime();
	Исключение
		Ошибка(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Форматирование строк
//
Функция ДополнитьСтроку(Стр, ДлинаСтроки, Выравнивание=0, СтрДоб=" ")
	
	ТекДлинаСтроки = СтрДлина(Стр);
	
	Если ТекДлинаСтроки >= ДлинаСтроки Тогда
		Возврат Лев(Стр, ДлинаСтроки);
	КонецЕсли;
	
	ДобавитьСлева	=0;
	ДобавитьСправа	=0;
	
	Если Выравнивание=0 Тогда		// по левому краю
		ДобавитьСправа=ДлинаСтроки-ТекДлинаСтроки;
		
	ИначеЕсли Выравнивание=2 Тогда	// по правому краю
		ДобавитьСлева =ДлинаСтроки-ТекДлинаСтроки;
		
	Иначе							// по центру
		ДобавитьСлева =Цел((ДлинаСтроки-ТекДлинаСтроки)/2);
		ДобавитьСправа=ДлинаСтроки-ТекДлинаСтроки-ДобавитьСлева;
		
	КонецЕсли;
	
	Для н=1 По ДобавитьСлева Цикл
		Стр=СтрДоб+Стр;
	КонецЦикла;
	
	Для н=1 По ДобавитьСправа Цикл
		Стр=Стр+СтрДоб;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

// Перенос строк по словам
//
Функция ПереносСтрок(ИсходнаяСтрока,ФрмДлина)
	
	// сначала получим список слов исходной строки
	СписокСлов = Новый Массив;
	Стр=СокрЛП(ИсходнаяСтрока)+" ";
	
	Пока ЗначениеЗаполнено(Стр) Цикл
		н=Найти(Стр," ");
		СписокСлов.Добавить(Лев(Стр,н-1));
		Стр=Сред(Стр,н+1);
	КонецЦикла;
	
	// а теперь отформатируем под нужную длину
	СписокСтрок = Новый Массив;
	
	нс=0;
	Пока нс<=СписокСлов.Количество()-1 Цикл
		
		Стр="";
		Пока СтрДлина(Стр+СписокСлов[нс]) + ?(Стр="",0,1) <= ФрмДлина Цикл
			
			Стр=Стр+?(Стр="",""," ")+СписокСлов[нс];
			
			нс=нс+1;
			Если нс>СписокСлов.Количество()-1 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДлинаСтроки=СтрДлина(Стр)+?(Стр="",0,1);
		
		Если нс<=СписокСлов.Количество()-1 И ДлинаСтроки < Цел(ФрмДлина/2)+1 Тогда
			// строка заполнена меньше чем на половину, а следующее слово уже не помещается - 
			// обрезаем его и переносим остаток
			Слово=СписокСлов[нс];
			
			Стр=Стр+?(Стр="",""," ")+Лев(Слово,ФрмДлина-ДлинаСтроки-1)+"-";
			СписокСлов.Вставить(нс+1,Сред(Слово,ФрмДлина-ДлинаСтроки));
			
			нс=нс+1;
		КонецЕсли;
		
		СписокСтрок.Добавить(Стр);
	КонецЦикла;
	
	Возврат СписокСтрок;
КонецФункции

// Выполнение конкретных действий на ККМ
//
Функция ВыполнитьДействиеККМ(Тип, Параметры)
	
	// все команды драйвера , в случае неудачного выполнения, генерят исключение
	Попытка
	
	Если Тип="Строка" Тогда
		СтрПечати		= Строка(Параметры.Caption);
		Выравнивание	= Число(Параметры.Alignment);
		Перенос			= Число(Параметры.TextWrap);
		
		// неразрывный пробел драйвер не понимает и заменяет на "?"
		СтрПечати = СтрЗаменить(СтрПечати, Символы.НПП, " ");
		
		// встроенного переноса нет вообще
		Если (Перенос=0) ИЛИ (СтрДлина(СтрПечати)<=МаксДлинаСтроки) Тогда
			
			Стр = ДополнитьСтроку(СтрПечати, МаксДлинаСтроки, Выравнивание, " ");
			ВывестиСтрокуНаПечать(Стр);
			
		Иначе
			
			СписокСтрок = ПереносСтрок(СтрПечати,МаксДлинаСтроки);
			Для каждого СтрПечати Из СписокСтрок Цикл
				Стр = ДополнитьСтроку(СтрПечати, МаксДлинаСтроки, Выравнивание, " ");
				ВывестиСтрокуНаПечать(Стр);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Тип="Картинка" Тогда
		//Операция поддерживается только молдавской версией ККМ Меркурий-114.1Ф.
		//PrintGraphic(Width, Height, Data);
		
	ИначеЕсли Тип="ШтрихКод" Тогда
		// Поддерживается только ККМ поколений 2, 6 и 8.
		//Barcode	=Строка(Параметры.Caption);
		//		
		//Если ЗначениеЗаполнено(Barcode) Тогда
		//	DRV.AddBarcode(Barcode,Ложь,0,0,0);
		//	DRV.PrintFiscalDocBuffer();
		//КонецЕсли;
		
	ИначеЕсли Тип="Внесение" Тогда
		DRV.OpenFiscalDoc(5);
		ДобавитьЗаголовокЧека();
		
		DRV.AddItem(
					0,                         // - тип позиции: услуга, товар или денежная сумма
					Число(Параметры.Summ),     // - цена товара
					0,                         // - товар не является тарой
					1,                         // - номер отдела
					0,                         // - код товара
					0,                         // - значение скидки / надбавки - здесь должно быть равно 0
					1,                         // - количество товара
					0,                         // - число значащих цифр после десятичной точки для количества
					0,                         // - индекс налога
					"",                        // - наименование единицы измерения
					0,                         // - флаги
					0,                         // - смещение по горизонтали
					мНомерСтроки,                         // - смещение по вертикали
					0                          // - смещение правой границы
					);
		мНомерСтроки = мНомерСтроки + 1;

		// Печать полной суммы чека
		DRV.AddTotal(0, 0, мНомерСтроки, 0);
				
		DRV.CloseFiscalDoc();
		
	ИначеЕсли Тип="Выплата" Тогда
		DRV.OpenFiscalDoc(6);
		ДобавитьЗаголовокЧека();
		
		DRV.AddItem(
					0,                         // - тип позиции: услуга, товар или денежная сумма
					Число(Параметры.Summ),     // - цена товара
					0,                         // - товар не является тарой
					1,                         // - номер отдела
					0,                         // - код товара
					0,                         // - значение скидки / надбавки - здесь должно быть равно 0
					1,                         // - количество товара
					0,                         // - число значащих цифр после десятичной точки для количества
					0,                         // - индекс налога
					"",                        // - наименование единицы измерения
					0,                         // - флаги
					0,                         // - смещение по горизонтали
					0,                         // - смещение по вертикали
					0                          // - смещение правой границы
					);
		
		мНомерСтроки = мНомерСтроки + 1;
		
		// Печать полной суммы чека
		DRV.AddTotal(0, 0, мНомерСтроки, 0);
		
		DRV.CloseFiscalDoc();
		
	ИначеЕсли Тип="ОткрытьЧекПродажа" Тогда
		DRV.OpenFiscalDoc(1);
		ДобавитьЗаголовокЧека();
		
	ИначеЕсли Тип="ОткрытьЧекВозврат" Тогда
		DRV.OpenFiscalDoc(2);
		ДобавитьЗаголовокЧека();
		
	ИначеЕсли Тип="ЗакрытьЧек" Тогда
		
		// обязательный реквизит общий итог 
		DRV.AddTotal(0, 0, мНомерСтроки, 0);
		мНомерСтроки = мНомерСтроки + 1;
		
		СуммаНал	= ?(Параметры.Свойство("Summ1"), Параметры.Summ1, 0);
		СуммаБН		= ?(Параметры.Свойство("Summ2"), Параметры.Summ2, 0);
		СуммаКарта	= ?(Параметры.Свойство("Summ3"), Параметры.Summ3, 0);
		
		Если Параметры.Свойство("Summ4") Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка ККМ";
			Результат.Подробно = "Недопустимый номер типа оплаты!";
		КонецЕсли;
		
		СуммаВсего = СуммаНал + СуммаБН + СуммаКарта;
		
		Если СуммаНал = СуммаВсего Тогда
			ТипОплаты = 0;
			
		ИначеЕсли СуммаБН = СуммаВсего Тогда
			ТипОплаты = 1;
			
		ИначеЕсли СуммаКарта = СуммаВсего Тогда
			ТипОплаты = 2;
			
		ИначеЕсли СуммаНал + СуммаБН = СуммаВсего Тогда
			ТипОплаты = 3;
			
		ИначеЕсли СуммаНал + СуммаКарта = СуммаВсего Тогда
			ТипОплаты = 4;
			
		Иначе
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка ККМ";
			Результат.Подробно = "Недопустимая комбинация типов оплаты!";
			
		КонецЕсли; 
		
		// если чек продажи
		Если DRV.CurrentOper = 1 Тогда
			// обязательный реквизит оплата
			DRV.AddPay( ТипОплаты,    			// - тип оплаты - по карте + наличными
						СуммаНал,   			// - сумма наличных
						СуммаБН + СуммаКарта,	// - сумма безналичных
						"",           			// - дополнительная информация при безналичном расчете
						0,            			// - флаги шрифта
						0,            			// - смещение по горизонтали
						мНомерСтроки, 			// - смещение по вертикали
						0             			// - смещение правой границы
						);
			мНомерСтроки = мНомерСтроки + 1;
			
			Если СуммаНал>0 Тогда
				// обязательный реквизит сдача
				DRV.AddChange(0, 0, мНомерСтроки, 0);
				мНомерСтроки = мНомерСтроки + 1;
			КонецЕсли; 
			
		КонецЕсли; 
		
		DRV.CloseFiscalDoc();
		
	ИначеЕсли Тип="ОтменаЧека" Тогда
		DRV.CancelFiscalDoc();
		
	ИначеЕсли Тип="Регистрация" Тогда
		DRV.AddItem(
					0,                                 // - тип позиции: услуга, товар или денежная сумма
					Число(Параметры.Price),            // - цена товара
					0,                                 // - товар не является тарой
					Число(Параметры.Department),       // - номер отдела
					0,                                 // - код товара
					0,                                 // - значение скидки / надбавки - здесь должно быть равно 0
					Число(Параметры.Quantity) * 1000,  // - количество товара
					3,                                 // - число значащих цифр после десятичной точки для количества
					0,                                 // - индекс налога
					"",                                // - наименование единицы измерения
					0,                                 // - флаги
					0,                                 // - смещение по горизонтали
					мНомерСтроки,                      // - смещение по вертикали
					0                                  // - смещение правой границы
					);
					
		мНомерСтроки = мНомерСтроки + 1;
		
	ИначеЕсли Тип="Возврат" Тогда
		DRV.AddItem(
					0,                                 // - тип позиции: услуга, товар или денежная сумма
					Число(Параметры.Price),            // - цена товара
					0,                                 // - товар не является тарой
					1,                                 // - номер отдела
					0,                                 // - код товара
					0,                                 // - значение скидки / надбавки - здесь должно быть равно 0
					Число(Параметры.Quantity) * 1000,  // - количество товара
					3,                                 // - число значащих цифр после десятичной точки для количества
					0,                                 // - индекс налога
					"",                                // - наименование единицы измерения
					0,                                 // - флаги
					0,                                 // - смещение по горизонтали
					мНомерСтроки,                      // - смещение по вертикали
					0                                  // - смещение правой границы
					);
		
		мНомерСтроки = мНомерСтроки + 1;
		
	ИначеЕсли Тип="Оплата" Тогда
		// операция оплаты не может повторяться, поэтому
		// выполняется при закрытии чека
		
		
	КонецЕсли;
	
	// обработка ошибок выполнения команд
	Исключение
		Ошибка(ОписаниеОшибки());
		
		Попытка
			// Отмена открытого фискального документа
			DRV.CancelFiscalDoc(Ложь);
		Исключение
		КонецПопытки;
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Печать строки зависит от текущего состояния ККМ
//
Процедура ВывестиСтрокуНаПечать(Стр)
	
	Если DRV.CurrentOper = 0 Тогда
		// просто нефискальная печать
		DRV.PrintNonFiscal(Стр + Символы.ПС + Символы.ВК, 0, 0);
	Иначе
		// внутри открытого чека
		DRV.AddCustom(Стр,0,0,мНомерСтроки);
		мНомерСтроки = мНомерСтроки + 1;
	КонецЕсли;
	
КонецПроцедуры
 
// Добавление обязательных реквизитов чека
//
Процедура ДобавитьЗаголовокЧека()
	
	мНомерСтроки = 0;

	// Добавление обязательных реквизитов:
	// Строки клише
	Для Индекс = 1 По 4 Цикл
		СтрокаКлише = DRV.QueryHeaderLine(Индекс);
		Если НЕ ПустаяСтрока(СтрокаКлише) Тогда
			DRV.AddHeaderLine(Индекс, 0, 0, мНомерСтроки);
			мНомерСтроки = мНомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;

	// - серийный номер ККМ
	DRV.AddSerialNumber(0, 0, мНомерСтроки);
	мНомерСтроки = мНомерСтроки + 1;

	// ИНН
	DRV.AddTaxPayerNumber(0, 0, мНомерСтроки);
	мНомерСтроки = мНомерСтроки + 1;

	// Номер документа
	DRV.AddDocNumber(0, 0, мНомерСтроки);
	//мНомерСтроки = мНомерСтроки + 1;

	// Номер документа
	DRV.AddReceiptNumber(0, 32, мНомерСтроки);
	мНомерСтроки = мНомерСтроки + 1;

	// Текущие дата и время
	DRV.AddDateTime(0, 0, мНомерСтроки);
	мНомерСтроки = мНомерСтроки + 1;

	// Информация об операторе (номер + имя, если поддерживается)
	DRV.AddOperInfo(2, 0, 0, мНомерСтроки);
	мНомерСтроки = мНомерСтроки + 1;
	
	// пропустим строчку
	мНомерСтроки = мНомерСтроки + 1;
	
КонецПроцедуры
 
// Определяет использовать общий пароль или нет
//
Функция РегистрацияКассира()
	
	// таблицы кассиров нет, используется просто номер и имя
	НомерКассира = ?(ФлагОбщийПароль И НЕ ИгнорироватьОбщийПароль, ОбщийПароль, Число(Пароль));
	НомерКассира = Мин( 99, Число(Пароль) );
	ИмяКассира   = Лев( Кассир, 40);
	
	Попытка
		DRV.OpenDay(НомерКассира, ИмяКассира, 0, 0);
	Исключение
		Ошибка(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Процедура печати чека
//
Процедура РегистрацияНаККМ(ТаблицаЗадания)
	
	Если НЕ Подключить() Тогда
		Возврат;
	КонецЕсли;
	
	// проверка текущего состояния 
	Если DRV.DocStatus > 1 Тогда
		// есть открытый фискальный документ
		Попытка
			DRV.CancelFiscalDoc(Ложь);
		Исключение
			Ошибка(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ РегистрацияКассира() Тогда
		Возврат;
	КонецЕсли; 
	
	Если НеФискальныйРежим Тогда
		ПреобразоватьЗаданиеВНефискальное(ТаблицаЗадания);
		Печать(ТаблицаЗадания);
		Возврат;
	КонецЕсли; 
	
	СтрПечати="";
	Для каждого Задание Из ТаблицаЗадания Цикл
		
		ТипДанных=Задание.ТипДанных;
		
		Если (ТипДанных="Строка") ИЛИ (ТипДанных="ШтрихКод") ИЛИ (ТипДанных="Картинка") Тогда
			Параметры = СформироватьСтруктуруПараметровСтроки(Задание.Данные, Задание.Параметры);
			
			СтрПечати=СтрПечати+Параметры.Caption;
			Если Параметры.TextNewLine=0 Тогда
				Продолжить;
			КонецЕсли;
			Параметры.Caption = СтрПечати;
			СтрПечати="";
			
		Иначе
			Параметры=Задание.Параметры;
		КонецЕсли;
		
		Если НЕ ВыполнитьДействиеККМ(ТипДанных,Параметры) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	Отрезка();
	
КонецПроцедуры

// Заменяет в таблице задания фискальные команды печатью строк
//
Процедура ПреобразоватьЗаданиеВНефискальное(ТаблицаЗадания)
	
	Задание = ТаблицаЗадания.Вставить(0);
	Задание.Данные    = "НЕФИСКАЛЬНЫЙ ЧЕК";
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Центр,ПереводСтроки";
	
	ИтогоСуммаЧека		= 0;
	ИтогоСуммаОплаты	= 0;
	ИндексСтроки		= 0;
	
	Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
		
		Задание = ТаблицаЗадания[ИндексСтроки];
		Тип = Задание.ТипДанных;
		
		Если Тип="Внесение" Тогда
			СтрВправо = "="+Формат( Задание.Параметры.Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку("ВНЕСЕНИЕ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
		ИначеЕсли Тип="Выплата" Тогда
			СтрВправо = "="+Формат( Задание.Параметры.Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку("ВЫПЛАТА", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
		ИначеЕсли Тип="ОткрытьЧекПродажа" Тогда
			Задание.ТипДанных = "Пропустить";
			
		ИначеЕсли Тип="ОткрытьЧекВозврат" Тогда
			Задание.Данные    = "ВОЗВРАТ";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
		ИначеЕсли Тип="ЗакрытьЧек" Тогда
			Если ИтогоСуммаОплаты > ИтогоСуммаЧека Тогда
				СтрВправо = "="+Формат( ИтогоСуммаОплаты - ИтогоСуммаЧека, "ЧЦ=15;ЧДЦ=2");
				Задание.Данные    = ДополнитьСтроку("СДАЧА", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
				Задание.ТипДанных = "Строка";
				Задание.Параметры = "Право,ПереводСтроки";
				Задание = ТаблицаЗадания.Добавить();
			КонецЕсли; 
			
			Задание.Данные    = "НЕФИСКАЛЬНЫЙ ЧЕК";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Центр,ПереводСтроки";
			
		ИначеЕсли Тип="Регистрация" ИЛИ Тип="Возврат" Тогда
			Price		=Число(Задание.Параметры.Price);
			Quantity	=Число(Задание.Параметры.Quantity);
			
			Задание.Данные    = "="+Формат( Price*Quantity, "ЧЦ=15;ЧДЦ=2" );
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
			ИтогоСуммаЧека = ИтогоСуммаЧека + Price*Quantity;
			
		ИначеЕсли Тип="Оплата" Тогда
			Summ		=Число(Задание.Параметры.Summ);
			TypeClose	=Макс(1,Число(Задание.Параметры.TypeClose)) - 1;	// в драйвере наличные - 0, а у нас 1
			
			Если ИтогоСуммаОплаты = 0 Тогда
				СтрВправо = "="+Формат(ИтогоСуммаЧека, "ЧЦ=15;ЧДЦ=2");
				Задание.Данные    = ДополнитьСтроку("ИТОГ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
				Задание.ТипДанных = "Строка";
				Задание.Параметры = "Право,ПереводСтроки";
				
				ИндексСтроки = ИндексСтроки + 1;
				Задание = ТаблицаЗадания.Вставить(ИндексСтроки);
			КонецЕсли;
			
			СтрВлево  = ?(TypeClose=0, "НАЛИЧНЫМИ", "ТИП ОПЛАТЫ "+TypeClose);
			СтрВправо = "="+Формат(Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку(СтрВлево, МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
			ИтогоСуммаОплаты = ИтогоСуммаОплаты + Summ;
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Задание = ТаблицаЗадания.Добавить();
	СтрВправо = Формат( ТекущаяДата(), "ДФ=дд-ММ-гг")+" "+Формат( ТекущаяДата(), "ДФ=ЧЧ:мм");
	Задание.Данные    = ДополнитьСтроку("#0001", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,ПереводСтроки";
	
	Задание = ТаблицаЗадания.Добавить();
	СтрВправо = "0000001 ";
	Задание.Данные    = ДополнитьСтроку(" ККМ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,ПереводСтроки";
	
КонецПроцедуры
 
// Нефискальная печать задания
//
Процедура Печать(ТаблицаЗадания, КолвоКопий=1)
	
	Перем ТипДанных,Параметры;
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РегистрацияКассира() Тогда
		Возврат;
	КонецЕсли; 
	
	Для н=1 По КолвоКопий Цикл
		
		// начало нефискальной печати
		DRV.PrintNonFiscal("", 1, 0);
		
		ИндексСтроки = 0;
		Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
			
			Если НЕ СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,ТипДанных,Параметры,"Строка,ШтрихКод,Картинка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ВыполнитьДействиеККМ(ТипДанных,Параметры) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		// конец нефискальной печати
		DRV.PrintNonFiscal("", 0, 1);
		
		Отрезка();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Отрезка()
	
	Попытка
		DRV.FeedAndCut(5, Истина);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,ТипДанных="",Параметры,СтрТипыДанных)
	
	СтрПечати="";
	Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
		
		Задание = ТаблицаЗадания[ИндексСтроки];
		
		ТипДанных=Задание.ТипДанных;
		Если Найти(СтрТипыДанных,ТипДанных)=0 Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Если ТипДанных = "ЧастичнаяОтрезка" Тогда
				Возврат Истина;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Параметры = СформироватьСтруктуруПараметровСтроки(Задание.Данные, Задание.Параметры);
		
		СтрПечати=СтрПечати+Параметры.Caption;
		Если Параметры.TextNewLine=0 Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		Параметры.Caption = СтрПечати;
		ИндексСтроки = ИндексСтроки + 1;
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// Формирование отчетов ККМ
//
Процедура ПолучитьОтчет(ТипОтчета)
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РегистрацияКассира() Тогда
		Возврат;
	КонецЕсли; 
	
	Попытка
		
		Если ТипОтчета="Z" Тогда
			DRV.ZReport(7);
			
		ИначеЕсли ТипОтчета="X" Тогда
			DRV.XReport(7);
			
		ИначеЕсли ТипОтчета="ПоСекциям" Тогда
			DRV.XReportByDep(-1,7);
			
		ИначеЕсли ТипОтчета="ПоКассирам" Тогда
			DRV.XReportByOper(-1,7);
			
		Иначе
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка ККМ";
			Результат.Подробно = "Запрашиваемый отчет не поддерживается!";
			
		КонецЕсли;
		
	Исключение
		Ошибка(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Формирует таблицу значений из макета "ПараметрыСтроки"
//
Процедура ЗаполнитьПараметрыСтроки()
	
	ТаблицаПараметрыСтроки = Новый ТаблицаЗначений;
	ТаблицаПараметрыСтроки.Колонки.Добавить("ИдПарам");
	ТаблицаПараметрыСтроки.Колонки.Добавить("СтрЗнач");
	ТаблицаПараметрыСтроки.Колонки.Добавить("ЧислЗач");
	
	Таб = ПолучитьМакет("ПараметрыСтроки");
	
	Для НомСтр=1 По Таб.ВысотаТаблицы Цикл
		
		ИдПарам = Таб.Область(НомСтр,1).Текст;
		Если НЕ ЗначениеЗаполнено(ИдПарам) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСтроки = ТаблицаПараметрыСтроки.Добавить();
		ПараметрыСтроки.ИдПарам = ИдПарам;
		ПараметрыСтроки.СтрЗнач = Врег(Таб.Область(НомСтр,2).Текст);
		ПараметрыСтроки.ЧислЗач = Число(Таб.Область(НомСтр,3).Текст);
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует строку параметров в структуру, используя таблицу параметров
//
Функция СформироватьСтруктуруПараметровСтроки(Знач СтрПечати, Знач СтрПараметры)
	
	СтруктураПараметров = Новый Структура;
	
	Если СтрПечати="СтрОтчерк" Тогда
		СтрПечати="==================================================";
	ИначеЕсли СтрПечати="СтрЧерта" Тогда
		СтрПечати="--------------------------------------------------";
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Caption",СтрПечати);
	
	РазделительСтрок = Символы.ПС + Символы.ВК;
	СтрПараметры = СтрЗаменить(СтрПараметры, РазделительСтрок,"");	// убираем лишние переводы строк
	СтрПараметры = СтрЗаменить(СтрПараметры, ",", РазделительСтрок);
	
	Для н=1 По СтрЧислоСтрок(СтрПараметры) Цикл
		
		Парам = СтрПолучитьСтроку(СтрПараметры,н);
		
		Если Лев(Парам,8)="ВысотаШК" Тогда
			ЧислЗач = Число(Сред(Парам,9))*5;	// в драйвере ККМ не в мм, а в неких элементарных строках
			СтруктураПараметров.Вставить("BarCodeHeight", ЧислЗач);
		Иначе
			ПараметрыСтроки = ТаблицаПараметрыСтроки.Найти(Врег(Парам), "СтрЗнач");
			Если ПараметрыСтроки <> Неопределено Тогда
				СтруктураПараметров.Вставить(ПараметрыСтроки.ИдПарам, ПараметрыСтроки.ЧислЗач);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ПараметрыСтроки Из ТаблицаПараметрыСтроки Цикл
		
		Если НЕ СтруктураПараметров.Свойство(ПараметрыСтроки.ИдПарам) Тогда
			СтруктураПараметров.Вставить(ПараметрыСтроки.ИдПарам, ПараметрыСтроки.ЧислЗач);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
КонецФункции

#КонецЕсли

Результат = Новый Структура("Ошибка,Описание,Подробно,СменаНеОткрыта", Ложь,"","",Ложь);

МаксДлинаСтроки	= 40;
мНомерСтроки = 0;
