
/// события формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораКоллекцияОбъектовМетаданных();
	ЗаполнитьНедавноОтредактированные();
	
	Если ЗначениеЗаполнено(Параметры.Объект) Тогда
		РедактируемыйОбъект = Параметры.Объект;
		РедактируемыйОбъектКэш = РедактируемыйОбъект;
		ПрочитатьОбъект();
	КонецЕсли;
	
КонецПроцедуры

/// выбор объекта

&НаКлиенте
Процедура КоллекцияОбъектовПриИзменении(Элемент)
	
	КоллекцияОбъектовПриИзмененииНаСервере();
	
	Если ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		ОчиститьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияОбъектовПриИзмененииНаСервере()
	ЗаполнитьТипЗначенияРедактируемыйОбъект();
КонецПроцедуры

&НаКлиенте
Процедура КоллекцияОбъектовМетаданныхПриИзменении(Элемент)
	
	КоллекцияОбъектовМетаданныхПриИзмененииНаСервере();
	
	ВидимостьЭлементовДляДокумента = КоллекцияОбъектовМетаданных = "Документ";
	Элементы.ПараметрыЗаписиЗаписыватьДвижения.Видимость = ВидимостьЭлементовДляДокумента;
	Элементы.Проведение.Видимость = ВидимостьЭлементовДляДокумента;
	Элементы.ОтменаПроведения.Видимость = ВидимостьЭлементовДляДокумента;
	
	Если ЗначениеЗаполнено(КоллекцияОбъектов) Тогда
		КоллекцияОбъектов = "";
	КонецЕсли;
	Если ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		ОчиститьФорму();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КоллекцияОбъектовМетаданныхПриИзмененииНаСервере()
	ЗаполнитьСписокВыбораКоллекцияОбъектов();
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыйОбъектПриИзменении(Элемент)
	
	Если РедактируемыйОбъектМодифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("РедактируемыйОбъектПриИзмененииОповещениеПодтверждения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Редактируемый объект был изменен. Продолжить без сохранения?", РежимДиалогаВопрос.ДаНет);
	Иначе
		РедактируемыйОбъектПриИзмененииОповещениеПодтверждения(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактируемыйОбъектПриИзмененииОповещениеПодтверждения(РезультатЗакрытия, СтруктураПараметров) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		РедактируемыйОбъектКэш = РедактируемыйОбъект;
		ПрочитатьОбъект();
	Иначе
		РедактируемыйОбъект = РедактируемыйОбъектКэш;
	КонецЕсли;
	
КонецПроцедуры

/// работа с метаданными

&НаСервере
Процедура ЗаполнитьСписокВыбораКоллекцияОбъектовМетаданных()
	
	Элементы.КоллекцияОбъектовМетаданных.СписокВыбора.Очистить();
	
	Элементы.КоллекцияОбъектовМетаданных.СписокВыбора.Добавить("Справочник");
	Элементы.КоллекцияОбъектовМетаданных.СписокВыбора.Добавить("Документ");
	Элементы.КоллекцияОбъектовМетаданных.СписокВыбора.Добавить("ПланВидовХарактеристик");
	Элементы.КоллекцияОбъектовМетаданных.СписокВыбора.Добавить("ПланВидовРасчета");
	Элементы.КоллекцияОбъектовМетаданных.СписокВыбора.Добавить("ПланСчетов");
	Элементы.КоллекцияОбъектовМетаданных.СписокВыбора.Добавить("ПланОбмена");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораКоллекцияОбъектов()
	
	Если Не ЗначениеЗаполнено(КоллекцияОбъектовМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.КоллекцияОбъектов.СписокВыбора.Очистить();
	
	Если КоллекцияОбъектовМетаданных = "Справочник" Тогда
		КоллекцияОбъектовМетаданныхСсылка = Метаданные.Справочники;
	ИначеЕсли КоллекцияОбъектовМетаданных = "Документ" Тогда
		КоллекцияОбъектовМетаданныхСсылка = Метаданные.Документы;
	ИначеЕсли КоллекцияОбъектовМетаданных = "ПланВидовХарактеристик" Тогда
		КоллекцияОбъектовМетаданныхСсылка = Метаданные.ПланыВидовХарактеристик;
	ИначеЕсли КоллекцияОбъектовМетаданных = "ПланВидовРасчета" Тогда
		КоллекцияОбъектовМетаданныхСсылка = Метаданные.ПланыВидовРасчета;
	ИначеЕсли КоллекцияОбъектовМетаданных = "ПланСчетов" Тогда
		КоллекцияОбъектовМетаданныхСсылка = Метаданные.ПланыСчетов;
	ИначеЕсли КоллекцияОбъектовМетаданных = "ПланОбмена" Тогда
		КоллекцияОбъектовМетаданныхСсылка = Метаданные.ПланыОбмена;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого ОбъектМетаданных Из КоллекцияОбъектовМетаданныхСсылка Цикл
		Элементы.КоллекцияОбъектов.СписокВыбора.Добавить(ОбъектМетаданных.Имя, ОбъектМетаданных.Синоним);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипЗначенияРедактируемыйОбъект()
	
	Если Не ЗначениеЗаполнено(КоллекцияОбъектовМетаданных) или Не ЗначениеЗаполнено(КоллекцияОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип(КоллекцияОбъектовМетаданных + "Ссылка." + КоллекцияОбъектов));
	ТипЗначения = Новый ОписаниеТипов(МассивТипов);
	
	Элементы.РедактируемыйОбъект.КнопкаВыбора = Истина;
	Элементы.РедактируемыйОбъект.ОграничениеТипа = ТипЗначения;
	
КонецПроцедуры

/// параметры записи

&НаКлиенте
Процедура ПараметрыЗаписиОбменДаннымиПриИзменении(Элемент)
	
	ВидимостьЭлементовДополнительныхРежимовЗаписи = не ПараметрыЗаписиЗаписыватьДвижения и не ПараметрыЗаписиОбменДанными;
	
	Элементы.Проведение.Видимость = ВидимостьЭлементовДополнительныхРежимовЗаписи;
	Элементы.ОтменаПроведения.Видимость = ВидимостьЭлементовДополнительныхРежимовЗаписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыЗаписиЗаписыватьДвиженияПриИзменении(Элемент)
	
	Элементы.ГруппаДвижения.ТолькоПросмотр = не ПараметрыЗаписиЗаписыватьДвижения;
	
	ВидимостьЭлементовДополнительныхРежимовЗаписи = не ПараметрыЗаписиЗаписыватьДвижения и не ПараметрыЗаписиОбменДанными;
	
	Элементы.Проведение.Видимость = ВидимостьЭлементовДополнительныхРежимовЗаписи;
	Элементы.ОтменаПроведения.Видимость = ВидимостьЭлементовДополнительныхРежимовЗаписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДополнительныеПараметры(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ТекущиеПараметры", ПоместитьТекущиеПараметрыВоВременноеХранилище());
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДополнительныеПараметрыОповещениеЗакрытия", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.РедакторОбъектов.Форма.ФормаДополнительныхПараметров", ПараметрыОткрытия,,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТекущиеПараметрыВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ПараметрыЗаписи.Выгрузить());
	
КонецФункции

&НаКлиенте
Процедура ДополнительныеПараметрыОповещениеЗакрытия(РезультатЗакрытия, СтруктураПараметров) Экспорт
	
	Если не РезультатЗакрытия = Неопределено Тогда
		ЗагрузитьПараметрыЗаписи(РезультатЗакрытия);
		КоличествоПараметров = ПараметрыЗаписи.Количество();
		СтрокаКоличестваПараметров = ?(КоличествоПараметров = 0, "", "(" + Строка(КоличествоПараметров) + ")");
		Элементы.ОткрытьДополнительныеПараметры.Заголовок = "Дополнительные параметры " + СтрокаКоличестваПараметров;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПараметрыЗаписи(НовыеПараметрыЗаписи)
	
	ПараметрыЗаписи.Загрузить(ПолучитьИзВременногоХранилища(НовыеПараметрыЗаписи));
	
КонецПроцедуры

/// история изменений

&НаСервере
Процедура ЗаполнитьНедавноОтредактированные()
	
	/// удаление
	
	Для Каждого СуществующаяКоманда Из НедавноОтредактированные Цикл
		НайденнаяКоманда = ЭтаФорма.Команды.Найти(СуществующаяКоманда.ИмяКоманды);
		Если Не НайденнаяКоманда = Неопределено Тогда
			ЭтаФорма.Команды.Удалить(НайденнаяКоманда);
		КонецЕсли;
	КонецЦикла;
	НедавноОтредактированные.Очистить();
	
	Для Каждого Элемент Из Элементы.ГруппаНедавноОтредактированные.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	/// добавление
	
	НедавноОтредактированныеИзХранилища = ХранилищеНастроекДанныхФорм.Загрузить("РедакторОбъектов");
	Если НедавноОтредактированныеИзХранилища = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Инд = НедавноОтредактированныеИзХранилища.Количество();
	Пока Инд > 0 Цикл
		
		Инд = Инд - 1;
		СсылкаОтредактированного = НедавноОтредактированныеИзХранилища[Инд].Ссылка;
		
		ИдентификаторСтроки = Новый УникальныйИдентификатор();
		
		ИмяКоманды = "кмд" + СтрЗаменить(ИдентификаторСтроки, "-", "");
		ИмяЭлемента = "элт" + СтрЗаменить(ИдентификаторСтроки, "-", "");
		
		НоваяСтрока = НедавноОтредактированные.Добавить();
		НоваяСтрока.Ссылка = СсылкаОтредактированного;
		НоваяСтрока.ИмяКоманды = ИмяКоманды;
		
		НоваяКоманда = Команды.Добавить(ИмяКоманды);
		НоваяКоманда.Действие = "КомандаОткрытьНедавноОтредактированный";
		НоваяКоманда.Заголовок = Строка(СсылкаОтредактированного);
		
		НоваяКнопка = Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Элементы.ГруппаНедавноОтредактированные);
		НоваяКнопка.ИмяКоманды = ИмяКоманды;
		НоваяКнопка.Заголовок = Строка(СсылкаОтредактированного);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзменениеОбъекта(Ссылка, РежимЗаписи)
	
	РанееСохраненные = ХранилищеНастроекДанныхФорм.Загрузить("РедакторОбъектов");
	
	Если РанееСохраненные = Неопределено Тогда
		РанееСохраненные = Новый ТаблицаЗначений();
		РанееСохраненные.Колонки.Добавить("Ссылка");
		РанееСохраненные.Колонки.Добавить("РежимЗаписи");
		РанееСохраненные.Колонки.Добавить("Дата");
	КонецЕсли;
	
	СуществующиеСтроки = РанееСохраненные.НайтиСтроки(Новый Структура("Ссылка", Ссылка));
	
	Если СуществующиеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = РанееСохраненные.Добавить();
		НоваяСтрока.Ссылка = Ссылка;
		НоваяСтрока.РежимЗаписи = РежимЗаписи;
		НоваяСтрока.Дата = ТекущаяДата();
		
	Иначе
		
		РанееСохраненные.Сдвинуть(СуществующиеСтроки[0], РанееСохраненные.Количество() - РанееСохраненные.Индекс(СуществующиеСтроки[0]) - 1);
		
	КонецЕсли;
	
	Если РанееСохраненные.Количество() > 17 Тогда
		РанееСохраненные.Удалить(РанееСохраненные.Получить(0));
	КонецЕсли;
	
	ХранилищеНастроекДанныхФорм.Сохранить("РедакторОбъектов",, РанееСохраненные);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьНедавноОтредактированный(Команда)
	
	НайденныеСтроки = НедавноОтредактированные.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КомандаОткрытьНедавноОтредактированныйНаСервере(НайденныеСтроки[0].Ссылка);
	
	РедактируемыйОбъектПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура КомандаОткрытьНедавноОтредактированныйНаСервере(Ссылка)
	
	МедатанныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	Если МедатанныеОбъекта = Неопределено Тогда
		ВызватьИсключение "Ошибка чтения объекта: невозможно определить тип";
	КонецЕсли;
	
	ПолноеИмяМетаданных = МедатанныеОбъекта.ПолноеИмя();
	КоллекцияОбъектовМетаданных = СтрРазделить(ПолноеИмяМетаданных, ".", Ложь)[0];
	ЗаполнитьТипЗначенияРедактируемыйОбъект();
	КоллекцияОбъектов = СтрРазделить(ПолноеИмяМетаданных, ".", Ложь)[1];
	ЗаполнитьТипЗначенияРедактируемыйОбъект();
	
	РедактируемыйОбъект = Ссылка;
	
КонецПроцедуры

/// события редактирования объекта

&НаКлиенте
Процедура Обновить(Команда)
	
	Если Не ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактируемыйОбъектМодифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьОповещениеПодтверждения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Редактируемый объект был изменен. Обновление приветед к потере изменений. Обновить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ОбновитьОповещениеПодтверждения(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОповещениеПодтверждения(РезультатЗакрытия, СтруктураПараметров) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		ПрочитатьОбъект();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыЗначениеРеквизитаПриИзменении(Элемент)
	
	Элементы.Реквизиты.ТекущиеДанные.Модифицированность = Истина;
	РедактируемыйОбъектМодифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныеЧастиПриИзменении(Элемент)
	
	ИмяТекущейТаблицы = Элемент.Имя;
	ЭтаФорма[ИмяТекущейТаблицы + "Модифицированность"] = Истина;
	РедактируемыйОбъектМодифицированность = Истина;
	Элемент.Родитель.ЦветФона = Новый Цвет(204,255,204);
	Элементы["СсылкаСтраница" + ИмяТекущейТаблицы].ЦветФона = Новый Цвет(204,255,204);
	
КонецПроцедуры

&НаКлиенте
Процедура ДвиженияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если не Элемент.ТекущиеДанные = Неопределено Тогда
			Элемент.ТекущиеДанные[Элемент.Имя + "Регистратор"] = РедактируемыйОбъект;
			Если не Элементы.Найти(Элемент.Имя + "Период") = Неопределено Тогда
				СтрокаДата = Реквизиты.НайтиСтроки(Новый Структура("ИмяРеквизита", "Дата"));
				Если СтрокаДата.Количество() = 1 Тогда
					Элемент.ТекущиеДанные[Элемент.Имя + "Период"] = СтрокаДата[0].ЗначениеРеквизита;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПриАктивизацииСтроки(Элемент)
	
	Если Не ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Реквизиты.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОписаниеТиповТекущейСтроки = РеквизитыПриАктивизацииСтрокиНаСервере(РедактируемыйОбъект, Элементы.Реквизиты.ТекущиеДанные.ИмяРеквизита, Элементы.Реквизиты.ТекущиеДанные.СтандартныйРеквизит);
	Элементы.РеквизитыЗначениеРеквизита.ОграничениеТипа = ОписаниеТиповТекущейСтроки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыПриАктивизацииСтрокиНаСервере(СсылкаНаОбъект, ИмяРеквизита, Стандартный)
	
	Если Стандартный Тогда
		Возврат СсылкаНаОбъект.Метаданные().СтандартныеРеквизиты[ИмяРеквизита].Тип;
	Иначе
		Возврат СсылкаНаОбъект.Метаданные().Реквизиты[ИмяРеквизита].Тип;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПодсветитьАктивнуюСтраницу();
	
КонецПроцедуры

/// закрытие формы

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если не ЗавершениеРаботы и РедактируемыйОбъектМодифицированность и не БезусловноеЗакрытиеФормы Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемОповещениеПодтверждения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Редактируемый объект был изменен. Закрыть без сохранения?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемОповещениеПодтверждения(РезультатЗакрытия, СтруктураПараметров) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		БезусловноеЗакрытиеФормы = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

/// работа с объектом - чтение

&НаСервере
Процедура ПрочитатьОбъект()
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ОбновитьРеквизитыОбъекта();
	ОбновитьДанныеТаблиц();
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	ЗаполнитьНедавноОтредактированные();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьФорму()
	
	//КоллекцияОбъектовМетаданных = "";
	//КоллекцияОбъектов = "";
	РедактируемыйОбъект = Неопределено;
	
	Реквизиты.Очистить();
	
	Если ЗначениеЗаполнено(АдресВременногоХранилищаДобавленныхРеквизитов) Тогда
		
		МассивРеквизитовДляУдаления = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаДобавленныхРеквизитов);
		Если не МассивРеквизитовДляУдаления = Неопределено Тогда
			Для Каждого Реквизит Из МассивРеквизитовДляУдаления Цикл
				УдалитьТаблицуСФормы(Реквизит);
			КонецЦикла;
		КонецЕсли;
		
		МассивЭлементовДляУдаления = Новый Массив();
		Для Каждого Элемент Из Элементы.СтраницыТабличныеЧасти.ПодчиненныеЭлементы Цикл
			МассивЭлементовДляУдаления.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из Элементы.СтаницыДвижения.ПодчиненныеЭлементы Цикл
			МассивЭлементовДляУдаления.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из МассивЭлементовДляУдаления Цикл
			Элементы.Удалить(Элемент);
		КонецЦикла;
		
	КонецЕсли;
	
	МассивРеквизитовДляУдаления = Новый Массив();
	
	АдресВременногоХранилищаДобавленныхРеквизитов = ПоместитьВоВременноеХранилище(МассивРеквизитовДляУдаления, ЭтаФорма.УникальныйИдентификатор);
	
	ЗаполнитьНедавноОтредактированные();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыОбъекта()
	
	Реквизиты.Очистить();
	
	КоличествоРеквизитов = 0;
	
	Если не ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из РедактируемыйОбъект.Метаданные().СтандартныеРеквизиты Цикл
		Если Стр.Имя = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		НовСтр = Реквизиты.Добавить();
		НовСтр.ИмяРеквизита = Стр.Имя;
		НовСтр.СтандартныйРеквизит = Истина;
		НовСтр.ЗначениеРеквизита = РедактируемыйОбъект[Стр.Имя];
		КоличествоРеквизитов = КоличествоРеквизитов + 1;
	КонецЦикла;
	
	Для Каждого Стр Из РедактируемыйОбъект.Метаданные().Реквизиты Цикл
		НовСтр = Реквизиты.Добавить();
		НовСтр.ИмяРеквизита = Стр.Имя;
		НовСтр.ЗначениеРеквизита = РедактируемыйОбъект[Стр.Имя];
		КоличествоРеквизитов = КоличествоРеквизитов + 1;
	КонецЦикла;
	
	РедактируемыйОбъектМодифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеТаблиц()
	
	/// удаление реквизитов
	
	Если ЗначениеЗаполнено(АдресВременногоХранилищаДобавленныхРеквизитов) Тогда
		
		МассивРеквизитовДляУдаления = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаДобавленныхРеквизитов);
		Если не МассивРеквизитовДляУдаления = Неопределено Тогда
			Для Каждого Реквизит Из МассивРеквизитовДляУдаления Цикл
				УдалитьТаблицуСФормы(Реквизит);
			КонецЦикла;
		КонецЕсли;
		
		МассивЭлементовДляУдаления = Новый Массив();
		Для Каждого Элемент Из Элементы.СтраницыТабличныеЧасти.ПодчиненныеЭлементы Цикл
			МассивЭлементовДляУдаления.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из Элементы.ГруппаСтраницыТЧСсылки.ПодчиненныеЭлементы Цикл
			МассивЭлементовДляУдаления.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из Элементы.СтаницыДвижения.ПодчиненныеЭлементы Цикл
			МассивЭлементовДляУдаления.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из Элементы.ГруппаСтраницыДвиженияСсылки.ПодчиненныеЭлементы Цикл
			МассивЭлементовДляУдаления.Добавить(Элемент);
		КонецЦикла;
		Для Каждого Элемент Из МассивЭлементовДляУдаления Цикл
			Элементы.Удалить(Элемент);
		КонецЦикла;
		
		СоответствиеКомандСтраницам.Очистить();
		
	КонецЕсли;
	
	МассивРеквизитовДляУдаления = Новый Массив();
	
	/// чтение табличных частей
	
	КоличествоТабличныхЧастей = 0;
	
	Для Каждого ТабличнаяЧасть Из РедактируемыйОбъект.Метаданные().ТабличныеЧасти Цикл
		
		ИмяТабличнойЧастиДокумента = ТабличнаяЧасть.Родитель().ПолноеИмя() + "." + ТабличнаяЧасть.Имя;
		ИмяТабличнойЧастиДокументаБезТочки = СтрЗаменить(ИмяТабличнойЧастиДокумента, ".", "");
		
		Запрос = Новый Запрос("Выбрать т1.* Из " + ИмяТабличнойЧастиДокумента + " как т1 Где т1.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", РедактируемыйОбъект);
		
		ИмяСтраницы = "Страница" + "ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки;
		ИмяКоманды = "КомандаСтраница" + "ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки;
		ИмяСсылки = "СсылкаСтраница" + "ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки;
		
		СтраницаФормы = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы.СтраницыТабличныеЧасти);
		СтраницаФормы.Заголовок = ТабличнаяЧасть.Синоним;
		СтраницаФормы.Вид = ВидГруппыФормы.Страница;
		
		СуществующаяКоманда = Команды.Найти(ИмяКоманды);
		Если СуществующаяКоманда = Неопределено Тогда
			НоваяКоманда = Команды.Добавить(ИмяКоманды);
			НоваяКоманда.Действие = "СменаСтраницыПоСсылке";
		Иначе
			НоваяКоманда = СуществующаяКоманда;
		КонецЕсли;
		НоваяСсылка = Элементы.Добавить(ИмяСсылки, Тип("КнопкаФормы"), Элементы.ГруппаСтраницыТЧСсылки);
		НоваяСсылка.Заголовок = ТабличнаяЧасть.Синоним;
		НоваяСсылка.Вид = ВидКнопкиФормы.Гиперссылка;
		НоваяСсылка.ИмяКоманды = ИмяКоманды;
		НоваяСтрокаСоответствия = СоответствиеКомандСтраницам.Добавить();
		НоваяСтрокаСоответствия.ИмяКоманды = ИмяКоманды;
		НоваяСтрокаСоответствия.ИмяСтраницы = ИмяСтраницы;
		НоваяСтрокаСоответствия.ИмяСсылки = ИмяСсылки;
		
		ДобавитьТаблицуНаФорму("ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки, "", СтраницаФормы, Запрос.Выполнить().Выгрузить());
		
		Если не ЭтотОбъект["ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки + "Количество"] = 0 Тогда
			НоваяСсылка.Заголовок = НоваяСсылка.Заголовок + " (" + Строка(ЭтотОбъект["ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки + "Количество"]) + ")";
		КонецЕсли;
		
		МассивРеквизитовДляУдаления.Добавить("ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки);
		МассивРеквизитовДляУдаления.Добавить("ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки + "Модифицированность");
		МассивРеквизитовДляУдаления.Добавить("ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки + "Количество");
		
		КоличествоТабличныхЧастей = КоличествоТабличныхЧастей + 1;
		
	КонецЦикла;
	
	/// чтение движений
	
	КоличествоДвижений = 0;
	
	Если КоллекцияОбъектовМетаданных = "Документ" Тогда
		
		Для Каждого Движение Из РедактируемыйОбъект.Метаданные().Движения Цикл
			
			ИмяКоллекцииДвижений = Лев(Движение.ПолноеИмя(), Найти(Движение.ПолноеИмя(), ".") - 1);
			
			ГруппаСсылок = Элементы.Найти("ГруппаКоллекции" + ИмяКоллекцииДвижений);
			Если ГруппаСсылок = Неопределено Тогда
				ГруппаСсылок = Элементы.Добавить("ГруппаКоллекции" + ИмяКоллекцииДвижений, Тип("ГруппаФормы"), Элементы.ГруппаСтраницыДвиженияСсылки);
				Если ИмяКоллекцииДвижений = "РегистрСведений" Тогда
					ГруппаСсылок.Заголовок = "Регистры сведений";
				ИначеЕсли ИмяКоллекцииДвижений = "РегистрНакопления" Тогда
					ГруппаСсылок.Заголовок = "Регистры накопления";
				ИначеЕсли ИмяКоллекцииДвижений = "РегистрБухгалтерии" Тогда
					ГруппаСсылок.Заголовок = "Регистры бухгалтерии";
				ИначеЕсли ИмяКоллекцииДвижений = "РегистрРасчета" Тогда
					ГруппаСсылок.Заголовок = "Регистры расчета";
				Иначе
					ГруппаСсылок.Заголовок = ИмяКоллекцииДвижений;
				КонецЕсли;
				ГруппаСсылок.Вид = ВидГруппыФормы.ОбычнаяГруппа;
				ГруппаСсылок.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			КонецЕсли;
			
			ИмяРегистра = Движение.ПолноеИмя();
			ИмяРегистраБезТочки = СтрЗаменить(ИмяРегистра, ".", "");
			
			Запрос = Новый Запрос("Выбрать * Из " + ИмяРегистра + " Где Регистратор = &Регистратор");
			Запрос.УстановитьПараметр("Регистратор", РедактируемыйОбъект);
			
			ИмяСтраницы = "Страница" + "Движение" + ИмяРегистраБезТочки;
			ИмяКоманды = "КомандаСтраница" + "Движение" + ИмяРегистраБезТочки;
			ИмяСсылки = "СсылкаСтраница" + "Движение" + ИмяРегистраБезТочки;
		
			СтраницаФормы = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы.СтаницыДвижения);
			СтраницаФормы.Заголовок = Движение.Синоним;
			СтраницаФормы.Вид = ВидГруппыФормы.Страница;
			
			СуществующаяКоманда = Команды.Найти(ИмяКоманды);
			Если СуществующаяКоманда = Неопределено Тогда
				НоваяКоманда = Команды.Добавить(ИмяКоманды);
				НоваяКоманда.Действие = "СменаСтраницыПоСсылке";
			Иначе
				НоваяКоманда = СуществующаяКоманда;
			КонецЕсли;
			НоваяСсылка = Элементы.Добавить(ИмяСсылки, Тип("КнопкаФормы"), ГруппаСсылок);
			НоваяСсылка.Заголовок = Движение.Синоним;
			НоваяСсылка.Вид = ВидКнопкиФормы.Гиперссылка;
			НоваяСсылка.ИмяКоманды = ИмяКоманды;
			НоваяСтрокаСоответствия = СоответствиеКомандСтраницам.Добавить();
			НоваяСтрокаСоответствия.ИмяКоманды = ИмяКоманды;
			НоваяСтрокаСоответствия.ИмяСтраницы = ИмяСтраницы;
			НоваяСтрокаСоответствия.ИмяСсылки = ИмяСсылки;
			
			ДобавитьТаблицуНаФорму("Движение" + ИмяРегистраБезТочки, "", СтраницаФормы, Запрос.Выполнить().Выгрузить(), Истина);
			
			Если не ЭтотОбъект["Движение" + ИмяРегистраБезТочки + "Количество"] = 0 Тогда
				НоваяСсылка.Заголовок = НоваяСсылка.Заголовок + " (" + Строка(ЭтотОбъект["Движение" + ИмяРегистраБезТочки + "Количество"]) + ")";
			КонецЕсли;
			
			МассивРеквизитовДляУдаления.Добавить("Движение" + ИмяРегистраБезТочки);
			МассивРеквизитовДляУдаления.Добавить("Движение" + ИмяРегистраБезТочки + "Модифицированность");
			МассивРеквизитовДляУдаления.Добавить("Движение" + ИмяРегистраБезТочки + "Количество");
			
			КоличествоДвижений = КоличествоДвижений + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	АдресВременногоХранилищаДобавленныхРеквизитов = ПоместитьВоВременноеХранилище(МассивРеквизитовДляУдаления, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТаблицуНаФорму(ИмяТаблицы, РеквизитРодитель, ЭлементРодитель, ДанныеТаблицы, ЭтоДвижение = Ложь)
	
	/// реквизиты формы
	
	ДобавленныеРеквизиты = Новый Массив();
	
	НоваяТаблица = Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений"), РеквизитРодитель);
	ДобавленныеРеквизиты.Добавить(НоваяТаблица);
	
	ПризнакМодифицированности = Новый РеквизитФормы(ИмяТаблицы + "Модифицированность", Новый ОписаниеТипов("Булево"), РеквизитРодитель);
	ДобавленныеРеквизиты.Добавить(ПризнакМодифицированности);
	
	КоличествоСтрок = Новый РеквизитФормы(ИмяТаблицы + "Количество", Новый ОписаниеТипов("Число"), РеквизитРодитель);
	ДобавленныеРеквизиты.Добавить(КоличествоСтрок);
	
	Для Каждого Колонка Из ДанныеТаблицы.Колонки Цикл
		ДобавленныеРеквизиты.Добавить(Новый РеквизитФормы(ИмяТаблицы + Колонка.Имя, Новый ОписаниеТипов(Колонка.ТипЗначения,, "Null"), ИмяТаблицы));
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавленныеРеквизиты);
	
	/// элементы формы
	
	ТаблицаФормы = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), ЭлементРодитель);
	ТаблицаФормы.ПутьКДанным = ИмяТаблицы;
	
	Для Каждого Колонка Из ДанныеТаблицы.Колонки Цикл
		
		Если Колонка.Имя = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		
		Элемент = Элементы.Добавить(ИмяТаблицы + Колонка.Имя, Тип("ПолеФормы"), ТаблицаФормы);
		Элемент.Заголовок = Колонка.Имя;
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяТаблицы + "." + ИмяТаблицы + Колонка.Имя;
		
		Если Колонка.Имя = "НомерСтроки" Тогда
			Элемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаФормы.УстановитьДействие("ПриИзменении", "ТабличныеЧастиПриИзменении");
	Если ЭтоДвижение Тогда
		ТаблицаФормы.УстановитьДействие("ПриНачалеРедактирования", "ДвиженияПриНачалеРедактирования");
	КонецЕсли;
	
	/// данные таблицы
	
	ЭтотОбъект[ИмяТаблицы + "Количество"] = ДанныеТаблицы.Количество();
	
	Для Каждого СтрокаДанных Из ДанныеТаблицы Цикл
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицы].Добавить();
		
		Для Каждого Колонка Из ДанныеТаблицы.Колонки Цикл
			НоваяСтрока[ИмяТаблицы + Колонка.Имя] = СтрокаДанных[Колонка.Имя];
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьТаблицуСФормы(ИмяТаблицы)
	
	МассивУдаляемыхРеквизитов = Новый Массив();
	МассивУдаляемыхРеквизитов.Добавить(ИмяТаблицы);
	
	Если не Элементы.Найти(ИмяТаблицы) = Неопределено Тогда
		Элементы.Удалить(Элементы[ИмяТаблицы]);
	КонецЕсли;
	
	ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);

КонецПроцедуры

&НаКлиенте
Процедура СменаСтраницыПоСсылке(Команда)
	
	НайданнаяСтрока = СоответствиеКомандСтраницам.НайтиСтроки(Новый Структура("ИмяКоманды", Команда.Имя));
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТабличныеЧасти Тогда
		ГруппаСтраниц = Элементы.СтраницыТабличныеЧасти;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДвижения Тогда
		ГруппаСтраниц = Элементы.СтаницыДвижения;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не НайданнаяСтрока = Неопределено Тогда
		ГруппаСтраниц.ТекущаяСтраница = Элементы[НайданнаяСтрока[0].ИмяСтраницы];
		ПодсветитьАктивнуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодсветитьАктивнуюСтраницу()
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТабличныеЧасти Тогда
		АктивнаяСтраница = Элементы.СтраницыТабличныеЧасти.ТекущаяСтраница;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДвижения Тогда
		АктивнаяСтраница = Элементы.СтаницыДвижения.ТекущаяСтраница;
	Иначе
		АктивнаяСтраница = Неопределено;
	КонецЕсли;
	
	Если АктивнаяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяАктивнойСтраницы = АктивнаяСтраница.Имя;
	
	Для Каждого СтрокаСоответствия Из СоответствиеКомандСтраницам Цикл
		Если СтрокаСоответствия.ИмяСтраницы = ИмяАктивнойСтраницы Тогда
			Элементы[СтрокаСоответствия.ИмяСсылки].Шрифт = Новый Шрифт(Элементы[СтрокаСоответствия.ИмяСсылки].Шрифт,,,Истина);
		Иначе
			Элементы[СтрокаСоответствия.ИмяСсылки].Шрифт = Новый Шрифт(Элементы[СтрокаСоответствия.ИмяСсылки].Шрифт,,,Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

/// работа с объектом - запись

&НаКлиенте
Процедура Записать(Команда)
	
	Если ЗначениеЗаполнено(РедактируемыйОбъект) и РедактируемыйОбъектМодифицированность Тогда
		ЗаписатьНаСервере("Запись");
		ПрочитатьОбъект();
	ИначеЕсли ЗначениеЗаполнено(РедактируемыйОбъект) и не РедактируемыйОбъектМодифицированность Тогда
		ПоказатьПредупреждение(,"Объект не изменен");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Проведение(Команда)
	
	Если ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		ЗаписатьНаСервере("Проведение");
		ПрочитатьОбъект();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)
	
	Если ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		ЗаписатьНаСервере("ОтменаПроведения");
		ПрочитатьОбъект();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере(ПараметрыЗаписиРежимЗаписи)
	
	Если Не ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	Если ПараметрыЗаписиЗаписыватьДвижения и не Элементы.ПараметрыЗаписиЗаписыватьДвижения.Видимость Тогда
		ПараметрыЗаписиЗаписыватьДвижения = Ложь;
	КонецЕсли;
	
	Если ПараметрыЗаписиЗаписыватьДвижения и не ПараметрыЗаписиРежимЗаписи = "Запись" Тогда
		ВызватьИсключение "Записывать движения можно только в режиме записи";
	КонецЕсли;
	
	Если ПараметрыЗаписиОбменДанными и не ПараметрыЗаписиРежимЗаписи = "Запись" Тогда
		ВызватьИсключение "Записывать объект в режиме обмена данными можно только в режиме записи";
	КонецЕсли;
	
	РедактируемыйОбъектОбъект = РедактируемыйОбъект.ПолучитьОбъект();
	
	Для Каждого Стр Из Реквизиты Цикл
		Если Стр.Модифицированность Тогда
			РедактируемыйОбъектОбъект[Стр.ИмяРеквизита] = Стр.ЗначениеРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из РедактируемыйОбъект.Метаданные().ТабличныеЧасти Цикл
		
		ИмяТабличнойЧастиДокумента = ТабличнаяЧасть.Родитель().ПолноеИмя() + "." + ТабличнаяЧасть.Имя;
		ИмяТабличнойЧастиДокументаБезТочки = СтрЗаменить(ИмяТабличнойЧастиДокумента, ".", "");
		
		Если ЭтаФорма["ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки + "Модифицированность"] Тогда
			тзТабличнаяЧастьФормы = ЭтаФорма["ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки].Выгрузить();
			РедактируемыйОбъектОбъект[ТабличнаяЧасть.Имя].Очистить();
			Для Каждого Стр Из тзТабличнаяЧастьФормы Цикл
				СтрокаТЧОбъекта = РедактируемыйОбъектОбъект[ТабличнаяЧасть.Имя].Добавить();
				Для Каждого Кол Из тзТабличнаяЧастьФормы.Колонки Цикл
					ИмяКолонкиОбъекта = СтрЗаменить(Кол.Имя, "ТабличнаяЧасть" + ИмяТабличнойЧастиДокументаБезТочки, "");
					Если ИмяКолонкиОбъекта = "Ссылка" или ИмяКолонкиОбъекта = "НомерСтроки" Тогда
						Продолжить;
					КонецЕсли;
					СтрокаТЧОбъекта[ИмяКолонкиОбъекта] = Стр[Кол.Имя];
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПараметрыЗаписиЗаписыватьДвижения Тогда
		
		Для Каждого Движение Из РедактируемыйОбъект.Метаданные().Движения Цикл
			
			ИмяРегистра = Движение.ПолноеИмя();
			ИмяРегистраБезТочки = СтрЗаменить(ИмяРегистра, ".", "");
			
			Если ЭтаФорма["Движение" + ИмяРегистраБезТочки + "Модифицированность"] Тогда
				тзДвижениеФормы = ЭтаФорма["Движение" + ИмяРегистраБезТочки].Выгрузить();
				РедактируемыйОбъектОбъект.Движения[Движение.Имя].Очистить();
				Для Каждого Стр Из тзДвижениеФормы Цикл
					СтрокаДвиженияОбъекта = РедактируемыйОбъектОбъект.Движения[Движение.Имя].Добавить();
					Для Каждого Кол Из тзДвижениеФормы.Колонки Цикл
						ИмяКолонкиОбъекта = СтрЗаменить(Кол.Имя, "Движение" + ИмяРегистраБезТочки, "");
						Если ИмяКолонкиОбъекта = "НомерСтроки" Тогда
							Продолжить;
						КонецЕсли;
						СтрокаДвиженияОбъекта[ИмяКолонкиОбъекта] = Стр[Кол.Имя];
					КонецЦикла;
				КонецЦикла;
				РедактируемыйОбъектОбъект.Движения[Движение.Имя].Записывать = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыЗаписиОбменДанными Тогда
		РедактируемыйОбъектОбъект.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	Для Каждого Стр Из ПараметрыЗаписи Цикл
		РедактируемыйОбъектОбъект.ДополнительныеСвойства.Вставить(Стр.ИмяСвойства, Стр.ЗначениеСвойства);
	КонецЦикла;
	
	Если ПараметрыЗаписиРежимЗаписи = "Запись" Тогда
		РежимЗаписиЭтогоОбъекта = РежимЗаписиДокумента.Запись;
	ИначеЕсли ПараметрыЗаписиРежимЗаписи = "Проведение" Тогда
		РежимЗаписиЭтогоОбъекта = РежимЗаписиДокумента.Проведение;
	ИначеЕсли ПараметрыЗаписиРежимЗаписи = "ОтменаПроведения" Тогда
		РежимЗаписиЭтогоОбъекта = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит(РедактируемыйОбъект.Метаданные()) Тогда
		РедактируемыйОбъектОбъект.Записать(РежимЗаписиЭтогоОбъекта);
	Иначе
		РедактируемыйОбъектОбъект.Записать();
	КонецЕсли;
	
	СохранитьИзменениеОбъекта(РедактируемыйОбъектОбъект.Ссылка, ПараметрыЗаписиРежимЗаписи);
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

/// привилегированный режим

&НаКлиенте
Процедура _ПривилегированныйРежим(Команда)
	
	ПривилегированныйРежим = не ПривилегированныйРежим;
	
	Если ПривилегированныйРежим Тогда
		Элементы.ПривилегированныйРежим.Картинка = БиблиотекаКартинок.Пользователь;
		Элементы.ПривилегированныйРежим.Пометка = Истина;
		Элементы.ПривилегированныйРежим.РасширеннаяПодсказка.Заголовок = "Включить контроль прав пользователя (снять привилегированный режим)";
	Иначе
		Элементы.ПривилегированныйРежим.Картинка = БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		Элементы.ПривилегированныйРежим.Пометка = Ложь;
		Элементы.ПривилегированныйРежим.РасширеннаяПодсказка.Заголовок = "Отключить контроль прав пользователя (установить привилегированный режим)";
	КонецЕсли;
	
КонецПроцедуры

/// удаление объекта

&НаКлиенте
Процедура УдалитьОбъект(Команда)
	
	Если не ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УдалитьОбъектПодтверждение", ЭтотОбъект);
	
	ПоказатьВопрос(Оповещение, "Объект будет удален без возможности восстановления, продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбъектПодтверждение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		УдалитьОбъектНаСервере();
		
		ОчиститьФорму();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОбъектНаСервере()
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	РедактируемыйОбъектОбъект = РедактируемыйОбъект.ПолучитьОбъект();
	
	СохранитьИзменениеОбъекта(Строка(РедактируемыйОбъект), "Удаление");
	
	РедактируемыйОбъектОбъект.Удалить();
	
	Если ПривилегированныйРежим Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
КонецПроцедуры

/// внутренняя форма списка

&НаКлиенте
Процедура Выбрать(Команда)
	
	Если ЗначениеЗаполнено(КоллекцияОбъектовМетаданных) и ЗначениеЗаполнено(КоллекцияОбъектов) Тогда
		
		ПараметрыОткрытияФормыВыбора = Новый Структура();
		ПараметрыОткрытияФормыВыбора.Вставить("КоллекцияОбъектовМетаданных", КоллекцияОбъектовМетаданных);
		ПараметрыОткрытияФормыВыбора.Вставить("КоллекцияОбъектов", КоллекцияОбъектов);
		
		ОповещениеОВыборе = Новый ОписаниеОповещения("ВыбратьЗавершение", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.РедакторОбъектов.Форма.ФормаВыбора", ПараметрыОткрытияФормыВыбора,,,,, ОповещениеОВыборе, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыбора = Неопределено Тогда
		
		РедактируемыйОбъект = РезультатВыбора;
		
		РедактируемыйОбъектПриИзменении(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

/// сохранение и восстановление данных формы

&НаКлиенте
Процедура СохранитьВерсиюОбъекта(Команда)
	
	Если Не ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхФайла = ДанныеРедактируемогоОбъектаВФайл();
	
	ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(СтруктураДанныхФайла.ИмяВременногоФайла, СтруктураДанныхФайла.АдресВХ);//, СтруктураДанныхФайла.ИмяВременногоФайла);
	ПередаваемыеФайлы = Новый Массив();
	ПередаваемыеФайлы.Добавить(ПередаваемыйФайл);
	
	ОписаниеОкончанияСохранения = Новый ОписаниеОповещения("ОписаниеОкончанияСохранения", ЭтотОбъект, СтруктураДанныхФайла);
	
	НачатьПолучениеФайлов(ОписаниеОкончанияСохранения, ПередаваемыеФайлы, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОкончанияСохранения(РезультатСохранения, ДополнительныеПараметры) Экспорт
	
	УдалитьВременныйФайлНаСервере(ДополнительныеПараметры.ПолноеИмяВременногоФайла);
	
	Если РезультатСохранения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, "Объект успешно сохранен в файл");
	
КонецПроцедуры

&НаСервере
Функция ДанныеРедактируемогоОбъектаВФайл()
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("РедактируемыйОбъектТип", Строка(ТипЗнч(РедактируемыйОбъект)));
	СтруктураДанных.Вставить("РедактируемыйОбъектУИД", Строка(РедактируемыйОбъект.УникальныйИдентификатор()));
	СтруктураДанных.Вставить("РедактируемыйОбъектПредставление", Строка(РедактируемыйОбъект));
	
	СтруктураДанных.Вставить("Реквизиты", Реквизиты.Выгрузить());
	
	СтруктураДанных.Вставить("ТабличныеЧасти", Новый Структура());
	Для Каждого ТабЧасть Из ПолучитьМассивИменТабличныхЧастей(РедактируемыйОбъект) Цикл
		СтруктураДанных.ТабличныеЧасти.Вставить(ТабЧасть, ЭтаФорма["ТабличнаяЧасть" + ТабЧасть].Выгрузить());
	КонецЦикла;
	
	Если КоллекцияОбъектовМетаданных = "Документ" Тогда
		СтруктураДанных.Вставить("Движения", Новый Структура());
		Для Каждого Движение Из ПолучитьМассивИменДвижений(РедактируемыйОбъект) Цикл
			СтруктураДанных.Движения.Вставить(ТабЧасть, ЭтаФорма["Движение" + Движение].Выгрузить());
		КонецЦикла;
	КонецЕсли;
	
	ИмяВременногоФайла = СтрЗаменить(СтруктураДанных.РедактируемыйОбъектТип, " ", "") + СтруктураДанных.РедактируемыйОбъектУИД + ".obj";
	ПолноеИмяВременногоФайла = КаталогВременныхФайлов() + ИмяВременногоФайла;
	ЗначениеВФайл(ПолноеИмяВременногоФайла, СтруктураДанных);
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяВременногоФайла);
	АдресВХ = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	СтруктураРезультата = Новый Структура();
	СтруктураРезультата.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	СтруктураРезультата.Вставить("ПолноеИмяВременногоФайла", ПолноеИмяВременногоФайла);
	СтруктураРезультата.Вставить("АдресВХ", АдресВХ);
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьВременныйФайлНаСервере(ИмяВременногоФайла)
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьВерсиюОбъекта(Команда)
	
	Если Не ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВыборФайла.МножественныйВыбор = Ложь;
	ВыборФайла.Фильтр = "Текст (*.obj)|*.obj";
	
	ОписаниеВыбора = Новый ОписаниеОповещения("ВосстановитьВерсиюОбъектаВыборФайла", ЭтотОбъект);
	
	ВыборФайла.Показать(ОписаниеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьВерсиюОбъектаВыборФайла(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Данные = Новый ДвоичныеДанные(РезультатВыбора[0]);
	СтруктураРезультат = ВосстановитьСтруктуруДанныхИзДвоичныхДанных(Данные, УникальныйИдентификатор);
	
	Если СтруктураДанныхНарушена(СтруктураРезультат) Тогда
		ПоказатьПредупреждение(, "Структура данных в файле не соответствует ожидаемой, восстановление данных невозможно");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РедактируемыйОбъект) Тогда
		Если СтруктураРезультат.РедактируемыйОбъектУИД = Строка(РедактируемыйОбъект.УникальныйИдентификатор()) Тогда
			ВыполнитьВосстановлениеДанныхИзСтруктуры(СтруктураРезультат);
			Если РедактируемыйОбъектМодифицированность Тогда
				ПоказатьПредупреждение(, "Восстановление объекта из файла успешно завершено");
			Иначе
				ПоказатьПредупреждение(, "Данные объекта и файла совпадают");
			КонецЕсли;
		Иначе
			Если СтруктураРезультат.РедактируемыйОбъектТип = Строка(ТипЗнч(РедактируемыйОбъект)) Тогда
				ТекстВопроса = "Сохраненная версия не относится к выбранному объекту." + Символы.ПС + "Был сохранен " + СтруктураРезультат.РедактируемыйОбъектПредставление + Символы.ПС + "Продолжить восстановление?"
			Иначе
				ТекстВопроса = "Сохраненный объект имеет другой тип!" + Символы.ПС + "Был сохранен " + СтруктураРезультат.РедактируемыйОбъектПредставление + Символы.ПС + "Результат восстановления непредсказуем. Продолжить?";
			КонецЕсли;
			ПараметрыПодтверждения = Новый Структура("СтруктураРезультат", СтруктураРезультат);
			ОписаниеПодтверждения = Новый ОписаниеОповещения("ВосстановитьВерсиюОбъектаПодтверждениеВосстановления", ЭтотОбъект, ПараметрыПодтверждения);
			ПоказатьВопрос(ОписаниеПодтверждения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		РезультатЗаполнения = ЗаполнитьРедактируемыйОбъект(СтруктураРезультат);
		Если РезультатЗаполнения = Неопределено Тогда
			ПоказатьПредупреждение(, "Неудалось найти тип данных соответствующий объекту." + Символы.ПС + "Возможно, объект был сохранен из другой информационной базы" + Символы.ПС + "Выберите объект для восстановления данных");
		ИначеЕсли РезультатЗаполнения = Истина Тогда
			ВыполнитьВосстановлениеДанныхИзСтруктуры(СтруктураРезультат);
			Если РедактируемыйОбъектМодифицированность Тогда
				ПоказатьПредупреждение(, "Восстановление объекта из файла успешно завершено");
			Иначе
				ПоказатьПредупреждение(, "Данные объекта и файла совпадают");
			КонецЕсли;
		Иначе
			ПараметрыОповещения = Новый Структура("СтруктураРезультат", СтруктураРезультат);
			ОповещениеПодтверждения = Новый ОписаниеОповещения("ЗаполнитьРедактируемыйОбъектПодтверждениеНового", ЭтотОбъект, ПараметрыОповещения);
			ПоказатьВопрос(ОповещениеПодтверждения, "Неудалось найти объект в базе данных, возможно он был удален." + Символы.ПС + "Восстановить данные в новый объект?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВосстановитьСтруктуруДанныхИзДвоичныхДанных(ДвоичныеДанные, УникальныйИдентификатор)
	
	ИмяВременногоФайла = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор());
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	СтруктураДанных = ЗначениеИзФайла(ИмяВременногоФайла);
	УдалитьВременныйФайлНаСервере(ИмяВременногоФайла);
	
	СтруктураРезультат = Новый Структура();
	СтруктураРезультат.Вставить("РедактируемыйОбъектТип", СтруктураДанных.РедактируемыйОбъектТип);
	СтруктураРезультат.Вставить("РедактируемыйОбъектУИД", СтруктураДанных.РедактируемыйОбъектУИД);
	СтруктураРезультат.Вставить("РедактируемыйОбъектПредставление", СтруктураДанных.РедактируемыйОбъектПредставление);
	СтруктураРезультат.Вставить("АдресВХ", ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор));
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Функция СтруктураДанныхНарушена(СтруктураРезультат)
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРезультат.АдресВХ);
	
	Если Не ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
		Возврат Истина;
	КонецЕсли;
	
	/// основные данные
	
	Если Не СтруктураДанных.Свойство("РедактируемыйОбъектТип") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не СтруктураДанных.Свойство("РедактируемыйОбъектУИД") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не СтруктураДанных.Свойство("РедактируемыйОбъектПредставление") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если не ТипЗнч(СтруктураДанных.РедактируемыйОбъектТип) = Тип("Строка") или не ЗначениеЗаполнено(СтруктураДанных.РедактируемыйОбъектТип) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если не ТипЗнч(СтруктураДанных.РедактируемыйОбъектУИД) = Тип("Строка") или не ЗначениеЗаполнено(СтруктураДанных.РедактируемыйОбъектУИД) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если не ТипЗнч(СтруктураДанных.РедактируемыйОбъектПредставление) = Тип("Строка") или не ЗначениеЗаполнено(СтруктураДанных.РедактируемыйОбъектПредставление) Тогда
		Возврат Истина;
	КонецЕсли;
	
	/// реквизиты
	
	Если Не СтруктураДанных.Свойство("Реквизиты") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Не ТипЗнч(СтруктураДанных.Реквизиты) = Тип("ТаблицаЗначений") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтруктураДанных.Реквизиты.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	/// табличные части
	
	Если Не СтруктураДанных.Свойство("ТабличныеЧасти") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если не ТипЗнч(СтруктураДанных.ТабличныеЧасти) = Тип("Структура") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТабЧасть Из СтруктураДанных.ТабличныеЧасти Цикл
		Если не ТипЗнч(ТабЧасть.Значение) = Тип("ТаблицаЗначений") Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	/// Движения
	
	Если Лев(СтруктураДанных.Свойство("РедактируемыйОбъектТип"), 9)  = "Документ." Тогда
		
		Если Не СтруктураДанных.Свойство("Движения") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если не ТипЗнч(СтруктураДанных.Движения) = Тип("Структура") Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого Движение Из СтруктураДанных.Движения Цикл
			Если не ТипЗнч(Движение.Значение) = Тип("ТаблицаЗначений") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьВерсиюОбъектаПодтверждениеВосстановления(РезультатПодтверждения, ДополнительныеПараметры) Экспорт
	
	Если РезультатПодтверждения = КодВозвратаДиалога.Да Тогда
		ВыполнитьВосстановлениеДанныхИзСтруктуры(ДополнительныеПараметры.СтруктураРезультат);
		Если РедактируемыйОбъектМодифицированность Тогда
			ПоказатьПредупреждение(, "Восстановление объекта из файла успешно завершено");
		Иначе
			ПоказатьПредупреждение(, "Данные объекта и файла совпадают");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьРедактируемыйОбъект(СтруктураРезультат)
	
	СсылкаНаСохраненныйОбъект = ПолучитьСсылкуНаСервере(СтруктураРезультат.РедактируемыйОбъектТип, СтруктураРезультат.РедактируемыйОбъектУИД);
	
	Если СсылкаНаСохраненныйОбъект = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Если ОбъектСуществуетНаСервере(СсылкаНаСохраненныйОбъект) Тогда
			РедактируемыйОбъект = СсылкаНаСохраненныйОбъект;
			ПрочитатьОбъект();
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьРедактируемыйОбъектПодтверждениеНового(РезультатПодтверждения, ДополнительныеПараметры)
	
	Если РезультатПодтверждения = КодВозвратаДиалога.Да Тогда
		РедактируемыйОбъект = ПолучитьСсылкуНаСервере(ДополнительныеПараметры.СтруктураДанных.РедактируемыйОбъектТип, ДополнительныеПараметры.СтруктураДанных.РедактируемыйОбъектУИД);
		ПрочитатьОбъект();
		ВыполнитьВосстановлениеДанныхИзСтруктуры(ДополнительныеПараметры.СтруктураРезультат);
		Если РедактируемыйОбъектМодифицированность Тогда
			ПоказатьПредупреждение(, "Восстановление объекта из файла успешно завершено");
		Иначе
			ПоказатьПредупреждение(, "Данные объекта и файла совпадают");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВыполнитьВосстановлениеДанныхИзСтруктуры(СтруктураРезультат)
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(СтруктураРезультат.АдресВХ);
	
	/// реквизиты
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		СтрокаВосстанавливаемыхДанных = СтруктураДанных.Реквизиты.Найти(Реквизит.ИмяРеквизита, "ИмяРеквизита");
		
		Если СтрокаВосстанавливаемыхДанных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.ЗначениеРеквизита = СтрокаВосстанавливаемыхДанных.ЗначениеРеквизита Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизит.ЗначениеРеквизита = СтрокаВосстанавливаемыхДанных.ЗначениеРеквизита;
		Реквизит.Модифицированность = Истина;
		РедактируемыйОбъектМодифицированность = Истина;
		
	КонецЦикла;
	
	/// табличные части
	
	ТабЧасти = ПолучитьМассивИменТабличныхЧастей(РедактируемыйОбъект);
	Для Каждого ТабЧасть Из ТабЧасти Цикл
		Если СтруктураДанных.ТабличныеЧасти.Свойство(ТабЧасть) Тогда
			Если Не ТаблицыЗначенийРавны(ЭтаФорма["ТабличнаяЧасть" + ТабЧасть].Выгрузить(), СтруктураДанных.ТабличныеЧасти[ТабЧасть]) Тогда
				ЭтаФорма["ТабличнаяЧасть" + ТабЧасть].Очистить();
				ЭтаФорма["ТабличнаяЧасть" + ТабЧасть].Загрузить(СтруктураДанных.ТабличныеЧасти[ТабЧасть]);
				ЭтаФорма["ТабличнаяЧасть" + ТабЧасть + "Модифицированность"] = Истина;
				РедактируемыйОбъектМодифицированность = Истина;
				Элементы["ТабличнаяЧасть" + ТабЧасть].Родитель.ЦветФона = Новый Цвет(204,255,204);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	/// движения
	
	Если КоллекцияОбъектовМетаданных = "Документ" и СтруктураДанных.Свойство("Движения") Тогда
		Движения = ПолучитьМассивИменДвижений(РедактируемыйОбъект);
		Для Каждого Движение Из Движения Цикл
			Если СтруктураДанных.Движения.Свойство(Движение) Тогда
				Если Не ТаблицыЗначенийРавны(ЭтаФорма["Движение" + Движение].Выгрузить(), СтруктураДанных.Движения[Движение]) Тогда
					ЭтаФорма["Движение" + Движение].Очистить();
					ЭтаФорма["Движение" + Движение].Загрузить(СтруктураДанных.ТабличныеЧасти[Движение]);
					ЭтаФорма["Движение" + Движение + "Модифицированность"] = Истина;
					РедактируемыйОбъектМодифицированность = Истина;
					Элементы["Движение" + Движение].Родитель.ЦветФона = Новый Цвет(204,255,204);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицыЗначенийРавны(Объект1, Объект2)
	
	/// приводим типы к таблице значений
	
	Если ТипЗнч(Объект1) = Тип("ТаблицаЗначений") Тогда
		ТаблицаЗначений1 = Объект1;
	ИначеЕсли ТипЗнч(Объект1) = Тип("ДанныеФормыКоллекция") Тогда
		ТаблицаЗначений1 = Объект1.Выгрузить();
	Иначе
		ВызватьИсключение "Тип данных не поддерживается";
	КонецЕсли;
	
	Если ТипЗнч(Объект2) = Тип("ТаблицаЗначений") Тогда
		ТаблицаЗначений2 = Объект2;
	ИначеЕсли ТипЗнч(Объект2) = Тип("ДанныеФормыКоллекция") Тогда
		ТаблицаЗначений2 = Объект2.Выгрузить();
	Иначе
		ВызватьИсключение "Тип данных не поддерживается";
	КонецЕсли;
	
	КоллекцияКолонок1 = ТаблицаЗначений1.Колонки;
	КоллекцияКолонок2 = ТаблицаЗначений2.Колонки;
	
	/// сравниваем количество и состав колонок
	
	Если не КоллекцияКолонок1.Количество() = КоллекцияКолонок2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Колонка1 Из КоллекцияКолонок1 Цикл
		Если КоллекцияКолонок2.Найти(Колонка1.Имя) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	/// сравниванием количество и состав строк
	
	Если не ТаблицаЗначений1.Количество() = ТаблицаЗначений2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для НомерСтроки = 0 По ТаблицаЗначений1.Количество() - 1 Цикл
		Для Каждого Колонка Из КоллекцияКолонок1 Цикл
			Если не ТаблицаЗначений1[НомерСтроки][Колонка.Имя] = ТаблицаЗначений2[НомерСтроки][Колонка.Имя] Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектСуществуетНаСервере(Ссылка)
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСсылкуНаСервере(Тип, УИД)
	
	МенеджерОбъекта = ПолучитьМенеджерНаСервере(Тип);
	
	Если МенеджерОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаНаОбъект = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД));
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМенеджерНаСервере(Тип)
	
	ИмяМетаданных = СтрЗаменить(Тип, "Справочник.", "Справочники."); 
	ИмяМетаданных = СтрЗаменить(Тип, "Документ.", "Документы."); 
	ИмяМетаданных = СтрЗаменить(Тип, "ПланВидовХарактеристик.", "ПланыВидовХарактеристик."); 
	ИмяМетаданных = СтрЗаменить(Тип, "ПланВидовРасчета.", "ПланыВидовРасчета."); 
	ИмяМетаданных = СтрЗаменить(Тип, "ПланСчетов.", "ПланыСчетов."); 
	ИмяМетаданных = СтрЗаменить(Тип, "ПланОбмена.", "ПланыОбмена."); 
	
	Попытка
		МенеджерОбъекта = Вычислить(ИмяМетаданных);
		Возврат МенеджерОбъекта;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивИменТабличныхЧастей(ДокументСсылка)
	
	МассивРезультат = Новый Массив();
	
	ПрефиксДокумента = ДокументСсылка.Метаданные().ПолноеИмя();
	ПрефиксДокумента = СтрЗаменить(ПрефиксДокумента, ".", "");
	
	Для Каждого ТабЧасть Из ДокументСсылка.Метаданные().ТабличныеЧасти Цикл
		МассивРезультат.Добавить(ПрефиксДокумента + ТабЧасть.Имя);
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивИменДвижений(ДокументСсылка)
	
	МассивРезультат = Новый Массив();
	
	Для Каждого Движение Из ДокументСсылка.Метаданные().Движения Цикл
		ИмяДвижения = Движение.ПолноеИмя();
		МассивРезультат.Добавить(СтрЗаменить(ИмяДвижения, ".", ""));
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьИзакрыть(Команда)
	Записать(Команда);
	Закрыть();
КонецПроцедуры
