Перем КолвоМарокНаЭкране;
Перем НомерПервойМарки;
Перем ОчередьМарок;
Перем ВсегоСтраниц;
Перем ТекСтраница;
Перем РежимВозврата;
Перем НомерМаркиВозврат;
Перем ВыбФильтр;
Перем СписокФильтров;
Перем СписокГруппаПечати;
Перем ВремяГотовностиВнимание;
Перем БлокироватьПодтверждения;
Перем СписокРедактированияШапки;
Перем СписокРедактированияТаблицы;
Перем ИспользоватьКурсы;
Перем МаркиЗакреплятьЗаСотрудниками;

// < КС_ВДВ ------------------------------------------------------------ 

// Чтобы не переделывать алгоритмы, пусть РежимВозврата = РежимВыдачи
// Сам по себе РежимВозврата в производство готовых блюд не применяется

Перем РежимПросмотра;		// Истина, если нет прав на работу с марками
Перем ВыдачаЗаказаКлиенту;  // Истина, если идёт выдача заказа клиенту

Перем ЗаказОтбор Экспорт;			// текущий фильтр по заказу
Перем ПросроченныеОтбор;	// текущий по просроченным заказам
Перем СтанцияОтбор;			// текущий фильтр по стнации

Перем ОбработчикПроверкиМарокПодключен;
Перем ПанельМарокЗаполнена;
Перем ДопПараметрыИнфо;
// КС_ВДВ > ------------------------------------------------------------ 

////////////////////////////////////////////////////////////////////////////////

// Инициализация реквизитов обработки и переменных модуля,
// 
Процедура ИнициализацияРеквизитов()
	
	Если РежимНастройки = Неопределено Тогда
		РежимНастройки = Ложь;		
	ИначеЕсли РежимНастройки Тогда
		СписокРедактированияШапки	= Новый СписокЗначений;
		СписокРедактированияШапки.Добавить("Шрифт");
		СписокРедактированияШапки.Добавить("ЦветТекста", "Цвет текста");
		СписокРедактированияТаблицы	= Новый СписокЗначений;
		СписокРедактированияТаблицы.Добавить("Шрифт");
		СписокРедактированияТаблицы.Добавить("ЦветТекста", "Цвет текста");
		СписокРедактированияТаблицы.Добавить("ЦветФона", "Цвет фона");
		
	КонецЕсли;	
	
	// < КС_ВДВ ------------------------------------------------------------ 
	РежимПросмотра		= НЕ ксТрактир.ЭтоРМСтанция();
	ВыдачаЗаказаКлиенту = Ложь;
	
	// Фильтры по умолчанию
	СтанцияОтбор		= ?(ЗначениеЗаполнено(глРабочееМесто.Станция) и глПараметрыРМ.Тип = Перечисления.ТипыРМ.Производство, глРабочееМесто.Станция, Неопределено);
	ПросроченныеОтбор	= Ложь;
	
	// Для оптимизации
	СтатусДозаказ	= Перечисления.СтатусыПозицийЗаказа.Дозаказ;
	СтатусЗаказано	= Перечисления.СтатусыПозицийЗаказа.Заказано;
	СтатусГотово	= Перечисления.СтатусыПозицийЗаказа.Готово;
	СтатусУдалено	= Перечисления.СтатусыПозицийЗаказа.Удалено;
	СтатусОтложено	= Перечисления.СтатусыПозицийЗаказа.Отложено;
	СтатусТарифВкл	= Перечисления.СтатусыПозицийЗаказа.ТарифВкл;
	СтатусВыдано	= Перечисления.СтатусыПозицийЗаказа.Выдано;
	
	ОбработчикПроверкиМарокПодключен = Ложь;
	
	
	ДопПараметрыИнфо = Новый Структура("РежимВывода, СброситьНастройки, СписокКодовПодтверждений");
	ДопПараметрыИнфо.РежимВывода = "Марки";
	// КС_ВДВ > ------------------------------------------------------------ 
	
	НомерПервойМарки		= 1;
	ТекСтраница				= 1;
	
	Если ПараметрыНастройки = Неопределено Тогда
		НастройкиОбъект = глПараметрыРМ.НастройкиМонитораМарокСписок[0].Значение.ПолучитьОбъект();
		Если НастройкиОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		ПараметрыНастройки = НастройкиОбъект.ПолучитьСтруктуруПараметров();
	КонецЕсли;
	
	КолвоМарокНаЭкране	= ПараметрыНастройки.КоличествоМарокПоГоризонтали * ПараметрыНастройки.КоличествоМарокПоВертикали;
	
	ВремяГотовностиВнимание = ПараметрыНастройки.ВремяГотовностиВнимание / 100;
	
	ОчередьМарок = Новый ТаблицаЗначений;
	ОчередьМарок.Колонки.Добавить("Номер");
	ОчередьМарок.Колонки.Добавить("ВремяПоявления");
	ОчередьМарок.Колонки.Добавить("Автор");
	ОчередьМарок.Колонки.Добавить("ПосадочноеМесто");
	ОчередьМарок.Колонки.Добавить("МестоРеализации");
	ОчередьМарок.Колонки.Добавить("Заказ");
	ОчередьМарок.Колонки.Добавить("Состав");
	ОчередьМарок.Колонки.Добавить("Порядок");
	ОчередьМарок.Колонки.Добавить("ПорядокСпецифики");
	// < КС_ВДВ ------------------------------------------------------------ 
	ОчередьМарок.Колонки.Добавить("Пейджер");
	// КС_ВДВ > ------------------------------------------------------------ 
	
	РежимВозврата			= Ложь;
	
	СписокФильтров = Новый СписокЗначений;
	СписокФильтров.Добавить("ПО МАРКАМ");
	//СписокФильтров.Добавить("По подтверждениям");
	СписокФильтров.Добавить("ПО ЗАКАЗАМ");
	СписокФильтров.Добавить("ПО ВРЕМЕНИ");
	//СписокФильтров.Добавить("По повару");
	
	Если РежимНастройки Тогда
		//ЭлементыФормы.КнопкаМесто.Заголовок		= "Группа печати";
		СписокГруппПечати = Новый СписокЗначений;
		СписокГруппПечати.Добавить(Справочники.ГруппыПечати.ПустаяСсылка());
		ГруппаПечати = СписокГруппПечати;
	Иначе
		МестоПроизводстваСписок = Новый СписокЗначений;
		МестоПроизводстваСписок.ЗагрузитьЗначения(глПараметрыРМ.МестоПроизводстваТаблица.ВыгрузитьКолонку("МестоПроизводства"));
		ГруппаПечати = МестоПроизводстваСписок;
		СписокГруппаПечати = МестоПроизводстваСписок.Скопировать();
		Если ГруппаПечати.Количество() > 1 Тогда
			СписокФильтров.Добавить("ПО ГРУППАМ ПЕЧАТИ");
			//ЭлементыФормы.КнопкаМесто.Заголовок = "Группа печати: [Все доступные]";
			//			СписокГруппаПечати.Добавить("[Все доступные]");
			СписокГруппаПечати.СортироватьПоЗначению();
		Иначе
			//ЭлементыФормы.КнопкаМесто.Заголовок		= ГруппаПечати;
		КонецЕсли;
	КонецЕсли;
	
	БлокироватьПодтверждения		= Истина;
	ИспользоватьКурсы 				= ?(глПараметрыРМ = Неопределено, Истина, глПараметрыРМ.ЗаказИспользоватьКурсы);
	МаркиЗакреплятьЗаСотрудниками	= ?(глПараметрыРМ = Неопределено, Истина, глПараметрыРМ.ПроизводствоЗакреплятьМаркиЗаСотрудниками);
	
КонецПроцедуры	

// чтобы часики тикали
//
Процедура ОбновитьТаймер()
	
	ТекВремя = ТекущаяДатаНаСервере();
	ЭлементыФормы.тДата.Заголовок	= Формат(ТекВремя,"ДЛФ=Д");
	ЭлементыФормы.тВремя.Заголовок	= Формат(ТекВремя,"ДЛФ=В");
	
	ИсточникДанных = ОчередьМарок;
	
	Для н = 1  По КолвоМарокНаЭкране Цикл
		
		НомерМаркиВОчереди = НомерПервойМарки + н - 1;
		Если НомерМаркиВОчереди >  ИсточникДанных.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		Марка = ИсточникДанных[НомерМаркиВОчереди-1];
		Попытка
			КолвоСекунд = ТекВремя - Марка.ВремяПоявления;	
		Исключение
			КолвоСекунд = 0;
		КонецПопытки;
		
		Попытка
			тТаймер = ЭлементыФормы["тТаймерОчереди"+н];
			тТаймер.Заголовок = ТаймерСтрокой(КолвоСекунд);
			
			// часики по блюдам
			ЭлементыФормы["СоставМарки"+н].ОбновитьСтроки();
		Исключение
		КонецПопытки;
	КонецЦикла; 
	
КонецПроцедуры

Функция ТаймерСтрокой(Знач КолвоСекунд) Экспорт
	
	ОтрицательныйТаймер = КолвоСекунд < 0;
	Если ОтрицательныйТаймер Тогда
		КолвоСекунд = 0 -КолвоСекунд;
	КонецЕсли;
	
	КолвоЧасов = Цел(КолвоСекунд/(60*60));
	КолвоСекунд = КолвоСекунд - КолвоЧасов*60*60;
	
	КолвоМинут = Цел(КолвоСекунд/60);
	КолвоСекунд = КолвоСекунд - КолвоМинут*60;
	
	Стр = ?(ОтрицательныйТаймер, "-", "") + ?(КолвоЧасов=0, "", Формат(КолвоЧасов,"")+":") + Формат(КолвоМинут,"ЧЦ=2; ЧН=00; ЧВН=") + ":" + Формат(КолвоСекунд,"ЧЦ=2; ЧН=00; ЧВН=");
	
	Возврат Стр;
КонецФункции

// Обновить очередь марок
//
Процедура ОбновитьОчередьМарок()
	
	Если РежимНастройки Тогда
		ДобавитьОбразецВОчередьМарок();
		Возврат;
	КонецЕсли;
	
	ОчередьМарок.Очистить();
	
	// Как сгруппировать марки
	Если ВыбФильтр = "По маркам" Тогда
		ФильтрПО	= "НомерМарки";
	ИначеЕсли ВыбФильтр = "По подтверждениям" Тогда
		ФильтрПО	= "КодПодтверждения";
	ИначеЕсли ВыбФильтр = "По времени" Тогда
		ФильтрПО	= "ВремяМаркиГр";
	ИначеЕсли ВыбФильтр = "По заказам" Тогда
		ФильтрПО	= "Заказ";
	Иначе
		ФильтрПО	= "ГруппаПечати";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	//| Предварительно создается временная таблица всех Товаров и Специфик с заполненым реквизитом ГруппаПечати	
	|ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.Заказ,
	|	ЗаказТоварыДопИнф.ИдСтроки,
	|	ЗаказТоварыДопИнф.ВремяДозаказ,
	|	ЗаказТоварыДопИнф.ВремяЗаказано,
	|	ЗаказТоварыДопИнф.ВремяГотово,
	|	ЗаказТоварыДопИнф.ВремяВыдано,
	|	ЗаказТоварыДопИнф.Статус,
	|	ЗаказТоварыДопИнф.КодПодтверждения,
	|	ЗаказТоварыДопИнф.РабочееМесто,
	|	ЗаказТоварыДопИнф.Подача,
	|	ЗаказТоварыДопИнф.ГруппаПечати,
	|	ЗаказТоварыДопИнф.АвторЗаказано,
	|	ЗаказТоварыДопИнф.АвторГотово,
	|	ЗаказТоварыДопИнф.Товар,
	|	ЗаказТоварыДопИнф.Количество,
	|	ЗаказТоварыДопИнф.КоличествоУдалено,
	|	ЗаказТоварыДопИнф.ИдСтрокиВладельца,
	|	ЗаказТоварыДопИнф.НомерМарки,
	|   ТоварыЗаказа.НомерСтроки,
	|	ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачалаДня, ЗаказТоварыДопИнф.ВремяЗаказано, МИНУТА)/10 КАК ЧИСЛО(10,0)) КАК ВремяМаркиГр
	|ПОМЕСТИТЬ СписокТоваров_
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|// < КС_ВДВ ------------------------------------------------------------ 
	|"+?(ПросроченныеОтбор, "
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Марки КАК Марки
	|		ПО ЗаказТоварыДопИнф.Заказ = Марки.Заказ
	|			И ЗаказТоварыДопИнф.НомерМарки = Марки.НомерМарки", "") + "	
	|// КС_ВДВ > ------------------------------------------------------------ 
	|		Левое соединение Документ.Заказ.Товары как ТоварыЗаказа 
	|			по ТоварыЗаказа.ссылка = ЗаказТоварыДопИнф.Заказ и ТоварыЗаказа.идСтроки = ЗаказТоварыДопИнф.ИдСтроки
	|ГДЕ
	|	ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1)
	|	И ЗаказТоварыДопИнф.ВремяЗаказано > &ДатаНачала
	|	И ЗаказТоварыДопИнф.Статус В (&Статус)
	//|	И ЗаказТоварыДопИнф.АвторГотово В (&СписокПоваров)
	|// < КС_ВДВ ------------------------------------------------------------ 
	|"+?(ЗначениеЗаполнено(ЗаказОтбор), "
	|	И ЗаказТоварыДопИнф.Заказ = &Заказ", "") + "
	|"+?(ЗначениеЗаполнено(СтанцияОтбор), "
	|	И ЗаказТоварыДопИнф.Станция = &Станция", "") + "
	|"+?(ПросроченныеОтбор, "
	|	И ВЫБОР
	|			КОГДА НЕ Марки.КВыдаче
	|					И Марки.НормативноеВремяПриготовления < &ТекВремя
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ", "") + "
	|// КС_ВДВ > ------------------------------------------------------------ 
	|   И (ЗаказТоварыДопИнф.Количество > 0 ИЛИ ЗаказТоварыДопИнф.Статус = Значение(Перечисление.СтатусыПозицийЗаказа.Удалено))
	//| Проверка на уже отображенные в мониторе позиции в разрезе статусов
	//|	И ((ЗаказТоварыДопИнф.Статус = Значение(Перечисление.СтатусыПозицийЗаказа.Заказано) И НЕ ЗаказТоварыДопИнф.ИдСтроки В (&МаркиВРаботе) И ЗаказТоварыДопИнф.Количество > 0) 
	//|		ИЛИ (ЗаказТоварыДопИнф.Статус = Значение(Перечисление.СтатусыПозицийЗаказа.Удалено) И НЕ ЗаказТоварыДопИнф.ИдСтроки В (&ПозицииМаркиУдалены)) )	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокТоваров_.Заказ КАК Заказ,
	|	МАКСИМУМ(СписокТоваров_.ИдСтроки) КАК ИдСтроки,
	|	СписокТоваров_.ВремяДозаказ КАК ВремяДозаказ,
	|	СписокТоваров_.ВремяЗаказано КАК ВремяЗаказано,
	|	СписокТоваров_.ВремяГотово КАК ВремяГотово,
	|	СписокТоваров_.ВремяВыдано КАК ВремяВыдано,
	|	СписокТоваров_.Статус КАК Статус,
	|	СписокТоваров_.КодПодтверждения КАК КодПодтверждения,
	|	СписокТоваров_.РабочееМесто КАК РабочееМесто,
	|	СписокТоваров_.Подача КАК Подача,
	|	СписокТоваров_.ГруппаПечати КАК ГруппаПечати,
	|	СписокТоваров_.АвторЗаказано КАК АвторЗаказано,
	|	СписокТоваров_.АвторГотово КАК АвторГотово,
	|	СписокТоваров_.Товар КАК Товар,
	|	СУММА(СписокТоваров_.Количество) КАК Количество,
	|	СУММА(СписокТоваров_.КоличествоУдалено) КАК КоличествоУдалено,
	|	СписокТоваров_.ИдСтрокиВладельца КАК ИдСтрокиВладельца,
	|	СписокТоваров_.НомерМарки КАК НомерМарки,
	|	СписокТоваров_.НомерСтроки КАК НомерСтроки,
	|	СписокТоваров_.ВремяМаркиГр КАК ВремяМаркиГр,
	|	ВЫБОР
	|		КОГДА СписокТоваров_.НомерСтроки ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ СписокТоваров_.НомерСтроки
	|	КОНЕЦ КАК Поле1
	|ПОМЕСТИТЬ СписокТоваров
	|ИЗ
	|	СписокТоваров_ КАК СписокТоваров_
	|
	|СГРУППИРОВАТЬ ПО
	|	СписокТоваров_.Заказ,
	|	СписокТоваров_.ВремяДозаказ,
	|	СписокТоваров_.ВремяЗаказано,
	|	СписокТоваров_.ГруппаПечати,
	|	СписокТоваров_.ИдСтрокиВладельца,
	|	СписокТоваров_.АвторЗаказано,
	|	СписокТоваров_.АвторГотово,
	|	СписокТоваров_.РабочееМесто,
	|	СписокТоваров_.ВремяВыдано,
	|	СписокТоваров_.Статус,
	|	СписокТоваров_.Товар,
	|	СписокТоваров_.ВремяГотово,
	|	СписокТоваров_.КодПодтверждения,
	|	СписокТоваров_.Подача,
	|	СписокТоваров_.НомерМарки,
	|	СписокТоваров_.НомерСтроки,
	|	СписокТоваров_.ВремяМаркиГр,
	|	ВЫБОР
	|		КОГДА СписокТоваров_.НомерСтроки ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ СписокТоваров_.НомерСтроки
	|	КОНЕЦ
	|;
	//| Выборка из временной таблицы 
	
	|ВЫБРАТЬ
	|	СписокТоваров.Заказ,
	|	СписокТоваров.ИдСтроки,
	|	СписокТоваров.ВремяДозаказ,
	|	СписокТоваров.ВремяЗаказано,
	|	СписокТоваров.ВремяГотово,
	|	СписокТоваров.ВремяВыдано,
	|	СписокТоваров.Статус,
	|	СписокТоваров.КодПодтверждения,
	|	СписокТоваров.РабочееМесто,
	|	СписокТоваров.Подача,
	|	СписокТоваров.ГруппаПечати,
	|	СписокТоваров.АвторЗаказано,
	|	СписокТоваров.АвторГотово,
	|	СписокТоваров.Товар,
	|	СписокТоваров.НомерСтроки,
	|	СписокТоваров.Количество,
	|	СписокТоваров.КоличествоУдалено,
	|	СписокТоваров.ИдСтрокиВладельца,
	|	СписокТоваров.НомерМарки,
	|	СписокТоваров.ВремяМаркиГр,
	//Z+	
	|	ВЫБОР
	|	КОГДА ТИПЗНАЧЕНИЯ(СписокТоваров.Товар) = ТИП(Справочник.Специфики) И СписокТоваров.Товар.ЕстьЦена
	|		ТОГДА 1
	|	КОГДА ТИПЗНАЧЕНИЯ(СписокТоваров.Товар) = ТИП(Справочник.Специфики) И НЕ СписокТоваров.Товар.ЕстьЦена
	|	 	ТОГДА ВЫБОР КОГДА СписокТоваров.Товар В ИЕРАРХИИ (Выбрать Константы.ГруппаОбщихСпецифик ИЗ Константы как константы) ТОГДА 3 ИНАЧЕ 2 КОНЕЦ
	|	КОГДА ТИПЗНАЧЕНИЯ(СписокТоваров.Товар) = ТИП(Справочник.Товары)
	|		ТОГДА 0  
	|	ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок
	//Z-
	|ИЗ
	|	СписокТоваров КАК СписокТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//| Выборка Специфик пренадлежащих товарам и спецификам из временной таблицы с не заполненным реквизитом ГруппаПечати
	|ВЫБРАТЬ
	|	СписокТоваров.Заказ,
	|	ЗаказТоварыДопИнф.ИдСтроки,
	|	ЗаказТоварыДопИнф.ВремяДозаказ,
	|	ЗаказТоварыДопИнф.ВремяЗаказано,
	|	ЗаказТоварыДопИнф.ВремяГотово,
	|	ЗаказТоварыДопИнф.ВремяВыдано,
	|	ЗаказТоварыДопИнф.Статус,
	|	ЗаказТоварыДопИнф.КодПодтверждения,
	|	СписокТоваров.РабочееМесто,
	|	СписокТоваров.Подача,
	|	СписокТоваров.ГруппаПечати,
	|	ЗаказТоварыДопИнф.АвторЗаказано,
	|	ЗаказТоварыДопИнф.АвторГотово,
	|	ЗаказТоварыДопИнф.Товар,
	|	СписокТоваров.НомерСтроки,
	|	ЗаказТоварыДопИнф.Количество,
	|	ЗаказТоварыДопИнф.КоличествоУдалено,
	|	ЗаказТоварыДопИнф.ИдСтрокиВладельца,
	|	ЗаказТоварыДопИнф.НомерМарки,
	|	ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачалаДня, ЗаказТоварыДопИнф.ВремяЗаказано, МИНУТА)/10 КАК ЧИСЛО(10,0)) КАК ВремяМаркиГр,
	//Z+	
	|	ВЫБОР
	|	КОГДА ТИПЗНАЧЕНИЯ(ЗаказТоварыДопИнф.Товар) = ТИП(Справочник.Специфики) И ЗаказТоварыДопИнф.Товар.ЕстьЦена
	|		ТОГДА 1
	|	КОГДА ТИПЗНАЧЕНИЯ(ЗаказТоварыДопИнф.Товар) = ТИП(Справочник.Специфики) И НЕ ЗаказТоварыДопИнф.Товар.ЕстьЦена
	|	 	ТОГДА ВЫБОР КОГДА ЗаказТоварыДопИнф.Товар В ИЕРАРХИИ (Выбрать Константы.ГруппаОбщихСпецифик ИЗ Константы как константы) ТОГДА 3 ИНАЧЕ 2 КОНЕЦ
	|	КОГДА ТИПЗНАЧЕНИЯ(ЗаказТоварыДопИнф.Товар) = ТИП(Справочник.Товары)
	|		ТОГДА 0  
	|	ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок
	//Z-	
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокТоваров КАК СписокТоваров
	|		ПО ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1)
	|			И ЗаказТоварыДопИнф.Статус В (&Статус)
	//|			И ЗаказТоварыДопИнф.АвторГотово В (&СписокПоваров)    //
	|			И ЗаказТоварыДопИнф.ИдСтрокиВладельца = СписокТоваров.ИдСтроки
	|			И ЗаказТоварыДопИнф.ГруппаПечати = ЗНАЧЕНИЕ(Справочник.ГруппыПечати.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|Порядок, ИдСтроки 
	|
	|ИТОГИ
	|	МИНИМУМ(ВремяЗаказано),
	|	МАКСИМУМ(АвторЗаказано),
	|	МАКСИМУМ(Заказ)
	|ПО
	|	" + ФильтрПо + "
	|");
	
	// Параметры запроса
	//Запрос.УстановитьПараметр("ГруппаПечати"		, Справочники.ГруппыПечати.);
	Запрос.УстановитьПараметр("ДатаНачала"			, ТекущаяДатаНаСервере()-60*60*24); // отслеживаем марки за последние 12 часов
	Запрос.УстановитьПараметр("ДатаНачалаДня"		, НачалоДня(ТекущаяДатаНаСервере())); // Дата для сортировки по времени с начала дня
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыПозицийЗаказа.Заказано);
	СписокСтатусов.Добавить(Перечисления.СтатусыПозицийЗаказа.Дозаказ);
	Запрос.УстановитьПараметр("Статус"				, СписокСтатусов); // 	
	СписокПоваров = Новый Массив;
	СписокПоваров.Добавить(глПользователь);
	СписокПоваров.Добавить(Справочники.Сотрудники.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокПоваров"		, СписокПоваров); // 
	// < КС_ВДВ ------------------------------------------------------------ 
	Запрос.УстановитьПараметр("Заказ"				, ЗаказОтбор);
	Запрос.УстановитьПараметр("Станция"				, СтанцияОтбор);
	Запрос.УстановитьПараметр("ТекВремя"			, ТекущаяДатаНаСервере());
	// КС_ВДВ > ------------------------------------------------------------ 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		// новых марок не появилось
		ПоказатьМарки();
		Возврат;
	КонецЕсли;
	
	// Выгрузить Запрос в дерево                                                             
	ДеревоТоваров = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Преобразовать дерево в соответствии с иерархией специфик
	ДереваТоваровСформироватьСтруктуру(ДеревоТоваров);
	
	// Заполнить марки из дерева
	Для каждого СтрокаДереваМарки Из ДеревоТоваров.Строки Цикл
		
		Если ВыбФильтр = "По маркам" Тогда
			ОтборМарок = СтрокаДереваМарки.НомерМарки;
		ИначеЕсли ВыбФильтр = "По подтверждениям" Тогда	
			ОтборМарок = СтрокаДереваМарки.КодПодтверждения;
		ИначеЕсли ВыбФильтр = "По времени" Тогда
			ОтборМарок = СтрокаДереваМарки.ВремяМаркиГр;
		ИначеЕсли ВыбФильтр = "По заказам" Тогда
			ОтборМарок = СтрокаДереваМарки.Заказ;
			//ИначеЕсли ВыбФильтр = "По повару" Тогда
			//	ОтборМарок = СтрокаДереваМарки.АвторГотово;
		Иначе
			ОтборМарок = СтрокаДереваМарки.ГруппаПечати;
		КонецЕсли;
		
		// Найти марку если уже отображена на мониторе
		Марка = ОчередьМарок.Найти(ОтборМарок,"Номер");
		
		// Если марки нет то добавляем
		Если Марка = Неопределено Тогда
			Марка = ОчередьМарок.Добавить();
			Марка.Номер = ОтборМарок;
			Если ВыбФильтр = "По маркам" ИЛИ ВыбФильтр = "По заказам" ИЛИ ВыбФильтр = "По подтверждениям" Тогда
				Марка.Автор				= СтрокаДереваМарки.АвторЗаказано;
				Марка.ПосадочноеМесто	= НаимПосадочногоМеста(СтрокаДереваМарки.Заказ.ПосадочноеМесто);
				Марка.Заказ				= СтрокаДереваМарки.Заказ;
			КонецЕсли;	
			Марка.ВремяПоявления		= СтрокаДереваМарки.ВремяЗаказано;
			Марка.Состав				= СоставМарки_.СкопироватьКолонки();
		КонецЕсли;	
		
		Если глПараметрыРМ.ПроизводствоЗвукВключить И Марка.Номер<>НомерМаркиВозврат Тогда 
			РаботаСокнами.PlayWav(глПараметрыРМ.ПроизводствоЗвукИмяФайла);
		КонецЕсли; 
		
		// Отсортировать состав марки по времени
		СтрокаДереваМарки.Строки.Сортировать("Подача, НомерСтроки");
		
		// Заполнить/дополнить марку позициями
		Для каждого СтрокаДереваТовар Из СтрокаДереваМарки.Строки Цикл
			СоставМаркиДобавитьПозиции(Марка, СтрокаДереваТовар);	
		КонецЦикла;
		Марка.Состав.Сортировать("ПорядокСпецифики");
		// Удалить марку если позиций "0"
		Если Марка.Состав.Количество() = 0 Тогда
			ОчередьМарок.Удалить(Марка);
		КонецЕсли; 
		
	КонецЦикла;
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Заполнение колонки "Пейджер"
	
	Если ВыбФильтр = "По маркам" ИЛИ ВыбФильтр = "По заказам" ИЛИ ВыбФильтр = "По подтверждениям" Тогда
		ЗаполнитьПейджерыВОчередиМарок(ВыбФильтр);	
	КонецЕсли;	
	// КС_ВДВ > ------------------------------------------------------------ 
	
	// Упорядочить марки по времени
	ОчередьМарок.Сортировать("ВремяПоявления");
	
	ПоказатьМарки();
	
КонецПроцедуры

// Формируется дерево Товаров и Специфик
//
Процедура ДереваТоваровСформироватьСтруктуру(ДеревоТоваров)
	
	ДеревоТоваров.Колонки.Добавить("КонтрольноеВремя",Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя))); // Когда должно быть готово или готово для возвратов
	ДеревоТоваров.Колонки.Добавить("ВремяПриготовления",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,0)));
	ДеревоТоваров.Колонки.Добавить("ПометкаУдаления"); // Пометка удаления при переносе строки в дереве
	
	// Первый уровень это группировка марок
	Для каждого СтрокаДерева Из ДеревоТоваров.Строки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.Строки) Тогда
			Продолжить;
		КонецЕсли;	
		
		// Второй уровень это товары и специфики в составе марки
		Для каждого СтрокаДереваТовар Из СтрокаДерева.Строки Цикл
			
			// Получить контрольное время приготовления
			Если РежимВозврата Тогда
				СтрокаДереваТовар.КонтрольноеВремя = СтрокаДереваТовар.ВремяГотово;
			Иначе
				СтрокаДереваТовар.ВремяПриготовления = СтрокаДереваТовар.Товар.ВремяПриготовления;
				Если ТипЗнч(СтрокаДереваТовар.Товар) = Тип("СправочникСсылка.Товары") Тогда
					
					СтрокаДереваТовар.КонтрольноеВремя = СтрокаДереваТовар.ВремяЗаказано + СтрокаДереваТовар.Товар.ВремяПриготовления * 60;
				Иначе
					Если СтрокаДереваТовар.Товар.ВремяПриготовления Тогда
						
						СтрокаДереваТовар.КонтрольноеВремя = СтрокаДереваТовар.ВремяЗаказано + СтрокаДереваТовар.Товар.ВремяПриготовления * 60;	
						
					Иначе
						
						СтрокаДереваТовар.КонтрольноеВремя = СтрокаДереваТовар.ВремяЗаказано + ПолучитьВремяПриготовления(СтрокаДереваТовар.ИдСтрокиВладельца);	
					
					КонецЕсли; 
					
				КонецЕсли;
			КонецЕсли;
			
			// Строка уже была обработана
			Если СтрокаДереваТовар.ПометкаУдаления <> Неопределено И СтрокаДереваТовар.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			// Найти подчиненные строки
			СтрокаДереваНайтиПодчиненныеСтроки(СтрокаДерева, СтрокаДереваТовар);
			
			Для каждого СтрокаСпецифика ИЗ СтрокаДереваТовар.Строки Цикл
				Если СтрокаСпецифика.Товар.ВремяПриготовления Тогда
					
					СтрокаСпецифика.КонтрольноеВремя = СтрокаСпецифика.ВремяЗаказано + СтрокаСпецифика.Товар.ВремяПриготовления * 60;	
					
				Иначе
					
					СтрокаСпецифика.КонтрольноеВремя = СтрокаСпецифика.ВремяЗаказано + ПолучитьВремяПриготовления(СтрокаСпецифика.ИдСтрокиВладельца);	
					
				КонецЕсли; 
				
				СтрокаДереваТовар.КонтрольноеВремя = Макс(СтрокаДереваТовар.КонтрольноеВремя,СтрокаСпецифика.КонтрольноеВремя);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Получить перечень помеченных исходных строк
	ВыборкаУдаляемыхСтрок = ДеревоТоваров.Строки.НайтиСтроки(Новый Структура("ПометкаУдаления", Истина),Истина);
	
	// < КС_ВДВ ------------------------------------------------------------ 
	//// Удалить помеченные исходные строки 
	//Для каждого УдаляемаяСтрокаДерева Из ВыборкаУдаляемыхСтрок Цикл
	//	УдаляемаяСтрокаДерева.Родитель.Строки.Удалить(УдаляемаяСтрокаДерева);
	//КонецЦикла;
	
	// Может случиться так, что строка-родитель уже удалена, а дочерние строки - нет.
	// Здесь более корректное удаление.
	УдалениеПомеченныхСтрокДереваТоваров(ДеревоТоваров);
	
	// КС_ВДВ > ------------------------------------------------------------ 
	
КонецПроцедуры	

// < КС_ВДВ ------------------------------------------------------------ 
Процедура УдалениеПомеченныхСтрокДереваТоваров(УзелДерева)
	
	СтрокиУзла = УзелДерева.Строки;
	
	Инд = СтрокиУзла.Количество() - 1;
	
	Пока Инд >= 0 Цикл
		
		СтрокаУзла = СтрокиУзла[Инд];
		
		Если СтрокаУзла.ПометкаУдаления = Истина Тогда
			УдалитьСтрокуДерева(УзелДерева, СтрокаУзла);
		Иначе	
			Если ЗначениеЗаполнено(СтрокаУзла.Строки) Тогда
				УдалениеПомеченныхСтрокДереваТоваров(СтрокаУзла);
			КонецЕсли; 
		КонецЕсли; 
		
		Инд = Инд - 1;
		
	КонецЦикла; 
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 


// Формируется правильная иерархия товаров и специфик в соответствии с подчинением
//
Процедура СтрокаДереваНайтиПодчиненныеСтроки(СтрокаДерева, СтрокаДереваТовар)
	
	// Выборка подчиненных строк Специфик к исходной строке 
	ВыборкаСтрок = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("ИдСтрокиВладельца", СтрокаДереваТовар.ИдСтроки),Истина);	
	
	Если ВыборкаСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Создаем копии найденных строк подчиненные исходной строке
	Для каждого ПеремещаемаяСтрокаДерева Из ВыборкаСтрок Цикл
		// Строка уже скопированна
		Если ПеремещаемаяСтрокаДерева.ПометкаУдаления <> Неопределено И ПеремещаемаяСтрокаДерева.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		СтрокаДереваСоздаваемая = СтрокаДереваТовар.Строки.Добавить();
		// Создаем копию строки
		ЗаполнитьЗначенияСвойств(СтрокаДереваСоздаваемая, ПеремещаемаяСтрокаДерева);
		// Помечаем как уже скопированную
		ПеремещаемаяСтрокаДерева.ПометкаУдаления = Истина;
		// Проверка текущей Строки на подчиненные специцифики
		СтрокаДереваНайтиПодчиненныеСтроки(СтрокаДерева, СтрокаДереваСоздаваемая);
		
	КонецЦикла;	
	
КонецПроцедуры	

// Заполнить состав марки
//
Процедура СоставМаркиДобавитьПозиции(Марка, СтрокаДереваТовар, КонтрольноеВремя = 0);
	
	ТипТовар = ТипЗнч(СтрокаДереваТовар.Товар) = Тип("СправочникСсылка.Товары");
	
	// Получить контрольное время приготовления
	Если ЗначениеЗаполнено(СтрокаДереваТовар.КонтрольноеВремя) Тогда
		КонтрольноеВремя = СтрокаДереваТовар.КонтрольноеВремя;
	КонецЕсли;
	
	// Если 1 уровень и это специфика то нужно добавить строку с наименованием родителя
	Если НЕ ТипТовар И СтрокаДереваТовар.Уровень() = 1 Тогда			
		СтрокаМарки = Марка.Состав.Добавить();
		СтрокаМарки.Товар				= СтрокаДереваТовар.Товар;                          
		СтрокаМарки.Количество			= ФорматКоличества(СтрокаДереваТовар.Количество);
		СтрокаМарки.КоличествоУдалено	= СтрокаДереваТовар.КоличествоУдалено;
		СтрокаМарки.Наименование		= СтрокаДереваТовар.Товар.Родитель.ПолноеНаименование();
		СтрокаМарки.КодПодтверждения	= СтрокаДереваТовар.КодПодтверждения;
		СтрокаМарки.ИдСтроки			= СтрокаДереваТовар.ИдСтроки;
		СтрокаМарки.ВремяЗаказано		= СтрокаДереваТовар.ВремяЗаказано;
		СтрокаМарки.КонтрольноеВремя	= КонтрольноеВремя;
		СтрокаМарки.Статус				= СтрокаДереваТовар.Статус;
		СтрокаМарки.Подача				= СтрокаДереваТовар.Подача;
		СтрокаМарки.Сотрудник			= СтрокаДереваТовар.АвторГотово;
		СтрокаМарки.Порядок				= СтрокаДереваТовар.Порядок;
		Если НЕ ТипТовар Тогда
			СпрГруппа=СтрокаДереваТовар.Товар;
			Пока 1=1 Цикл
				Если НЕ ЗначениеЗаполнено(СпрГруппа.Родитель) Тогда
					Прервать;
				КонецЕсли;	
				СпрГруппа=СпрГруппа.Родитель;
				Если СпрГруппа.Уровень()=1 Тогда
					Прервать;
				КонецЕсли;		
				Если СпрГруппа.Родитель=0 Тогда
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			СтрокаМарки.ПорядокСпецифики=?(СтрокаДереваТовар.Родитель.НомерСтроки=NULL,0,СтрокаДереваТовар.Родитель.НомерСтроки)*1000000+СпрГруппа.Порядок*1000+СтрокаДереваТовар.Товар.Порядок;
		Иначе
			СтрокаМарки.ПорядокСпецифики=?(СтрокаДереваТовар.НомерСтроки=NULL,0,СтрокаДереваТовар.НомерСтроки)*1000000;
		КонецЕсли;	
	КонецЕсли;
	
	СтрокаМарки = Марка.Состав.Добавить();
	
	// Заполняем поля состава марки
	СтрокаМарки.Товар				= ?(ТипТовар, СтрокаДереваТовар.Товар, "");                          
	СтрокаМарки.Количество			= ФорматКоличества(СтрокаДереваТовар.Количество);
	СтрокаМарки.КоличествоУдалено	= СтрокаДереваТовар.КоличествоУдалено;
	СтрокаМарки.Наименование		= ФорматНаименования(СтрокаДереваТовар);
	СтрокаМарки.КодПодтверждения	= СтрокаДереваТовар.КодПодтверждения;
	СтрокаМарки.ИдСтроки			= СтрокаДереваТовар.ИдСтроки;
	СтрокаМарки.ВремяЗаказано		= СтрокаДереваТовар.ВремяЗаказано;
	СтрокаМарки.КонтрольноеВремя	= КонтрольноеВремя;
	СтрокаМарки.Статус				= СтрокаДереваТовар.Статус;
	СтрокаМарки.Подача				= СтрокаДереваТовар.Подача;
	СтрокаМарки.Сотрудник			= СтрокаДереваТовар.АвторГотово;
	СтрокаМарки.Порядок				= СтрокаДереваТовар.Порядок;
	Если НЕ ТипТовар Тогда
		СпрГруппа=СтрокаДереваТовар.Товар;
		Пока 1=1 Цикл
			Если НЕ ЗначениеЗаполнено(СпрГруппа.Родитель) Тогда
				Прервать;
			КонецЕсли;	
			СпрГруппа=СпрГруппа.Родитель;
			Если СпрГруппа.Уровень()=1 Тогда
				Прервать;
			КонецЕсли;		
			Если СпрГруппа.Родитель=0 Тогда
				Прервать;
			КонецЕсли;	
		КонецЦикла;	
		СтрокаМарки.ПорядокСпецифики=?(СтрокаДереваТовар.Родитель.НомерСтроки=NULL,0,СтрокаДереваТовар.Родитель.НомерСтроки)*1000000+СпрГруппа.Порядок*1000+СтрокаДереваТовар.Товар.Порядок;
	Иначе
		СтрокаМарки.ПорядокСпецифики=?(СтрокаДереваТовар.НомерСтроки=NULL,0,СтрокаДереваТовар.НомерСтроки)*1000000;
	КонецЕсли;	
	//	СтрокаМарки.ПорядокСпецифики	= СтрокаДереваТовар.ПорядокСпецифики;
	
	// Если есть подчиненные Специфики то добавляем
	Если ЗначениеЗаполнено(СтрокаДереваТовар.Строки) Тогда
		Для каждого СтрокаДереваДополнить Из СтрокаДереваТовар.Строки Цикл
			СоставМаркиДобавитьПозиции(Марка, СтрокаДереваДополнить, КонтрольноеВремя);	
		КонецЦикла;
	КонецЕсли;	
	Марка.Состав.Сортировать("ПорядокСпецифики");
	
КонецПроцедуры	

// Для Специфики получить время приготовления из владельца
//
Функция ПолучитьВремяПриготовления(ИдСтрокиВладельца)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.Товар,
	|	ЗаказТоварыДопИнф.ИдСтроки,
	|	ЗаказТоварыДопИнф.ИдСтрокиВладельца
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.ИдСтроки = &ИдСтрокиВладельца
	|");
	
	Запрос.УстановитьПараметр("ИдСтрокиВладельца", ИдСтрокиВладельца);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.Товар) = Тип("СправочникСсылка.Товары") Тогда
			Возврат Выборка.Товар.ВремяПриготовления * 60;
		КонецЕсли;
		
		// Если владжелец Специфика то ищем ее владельца
		Если ЗначениеЗаполнено(Выборка.ИдСтрокиВладельца) Тогда
			ПолучитьВремяПриготовления(Выборка.ИдСтрокиВладельца);
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции	

Процедура ЗаполнитьТаблицуГотовых()
	
	ОчередьМарок.Очистить();
	
	// Как сгруппировать марки
	Если ВыбФильтр = "По маркам" Тогда	
		ФильтрПО	= "НомерМарки";
	ИначеЕсли ВыбФильтр = "По подтверждениям" Тогда	
		ФильтрПО	= "КодПодтверждения";
	ИначеЕсли ВыбФильтр = "По времени" Тогда
		ФильтрПО	= "ВремяМаркиГр";
	ИначеЕсли ВыбФильтр = "По заказам" Тогда
		ФильтрПО	= "Заказ";
	Иначе
		ФильтрПО	= "ГруппаПечати";
	КонецЕсли;
	
	Запрос = Новый Запрос("
	//| Предварительно создается временная таблица всех Товаров и Специфик с заполненым реквизитом ГруппаПечати	
	|ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.Заказ КАК Заказ,
	|	МАКСИМУМ(ЗаказТоварыДопИнф.ИдСтроки) КАК ИдСтроки,
	|	ЗаказТоварыДопИнф.ВремяДозаказ КАК ВремяДозаказ,
	|	ЗаказТоварыДопИнф.ВремяЗаказано КАК ВремяЗаказано,
	|	ЗаказТоварыДопИнф.ВремяГотово КАК ВремяГотово,
	|	ЗаказТоварыДопИнф.ВремяВыдано КАК ВремяВыдано,
	|	ЗаказТоварыДопИнф.Статус КАК Статус,
	|	ЗаказТоварыДопИнф.КодПодтверждения КАК КодПодтверждения,
	|	ЗаказТоварыДопИнф.РабочееМесто КАК РабочееМесто,
	|	ЗаказТоварыДопИнф.Подача КАК Подача,
	|	ЗаказТоварыДопИнф.ГруппаПечати КАК ГруппаПечати,
	|	ЗаказТоварыДопИнф.АвторЗаказано КАК АвторЗаказано,
	|	ЗаказТоварыДопИнф.АвторГотово КАК АвторГотово,
	|	ЗаказТоварыДопИнф.Товар КАК Товар,
	|	СУММА(ЗаказТоварыДопИнф.Количество) КАК Количество,
	|	СУММА(ЗаказТоварыДопИнф.КоличествоУдалено) КАК КоличествоУдалено,
	|	ЗаказТоварыДопИнф.ИдСтрокиВладельца КАК ИдСтрокиВладельца,
	|	ЗаказТоварыДопИнф.НомерМарки КАК НомерМарки,
	|	МАКСИМУМ(ТоварыЗаказа.НомерСтроки) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачалаДня, ЗаказТоварыДопИнф.ВремяЗаказано, МИНУТА) / 10 КАК ЧИСЛО(10, 0)) КАК ВремяМаркиГр
	|ПОМЕСТИТЬ СписокТоваров
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|// < КС_ВДВ ------------------------------------------------------------ 
	|"+?(ПросроченныеОтбор, "
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Марки КАК Марки
	|		ПО ЗаказТоварыДопИнф.Заказ = Марки.Заказ
	|			И ЗаказТоварыДопИнф.НомерМарки = Марки.НомерМарки", "") + "	
	|		Левое соединение Документ.Заказ.Товары как ТоварыЗаказа 
	|			по ТоварыЗаказа.ссылка = ЗаказТоварыДопИнф.Заказ и ТоварыЗаказа.идСтроки = ЗаказТоварыДопИнф.ИдСтроки
	|// КС_ВДВ > ------------------------------------------------------------ 
	|ГДЕ
	//|	ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1)
	|	ЗаказТоварыДопИнф.ВремяГотово > &ДатаГотово
	//|	И ЗаказТоварыДопИнф.ГруппаПечати В (&ГруппаПечати)
	|	И ЗаказТоварыДопИнф.Статус В (&Статус)
	|// < КС_ВДВ ------------------------------------------------------------ 
	|"+?(ЗначениеЗаполнено(ЗаказОтбор), "
	|	И ЗаказТоварыДопИнф.Заказ = &Заказ", "") + "
	|"+?(ЗначениеЗаполнено(СтанцияОтбор), "
	|	И ЗаказТоварыДопИнф.Станция = &Станция", "") + "
	|"+?(ПросроченныеОтбор, "
	|	И ВЫБОР
	|			КОГДА Марки.КВыдаче
	|					И Марки.ПервоеНормативноеВремяВыдачи < &ТекВремя
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ", "") + "
	|// КС_ВДВ > ------------------------------------------------------------ 
	|   И (ЗаказТоварыДопИнф.Количество > 0 ИЛИ ЗаказТоварыДопИнф.Статус = Значение(Перечисление.СтатусыПозицийЗаказа.Удалено))
	//| Проверка на уже отображенные в мониторе позиции в разрезе статусов
	//|	И ((ЗаказТоварыДопИнф.Статус = Значение(Перечисление.СтатусыПозицийЗаказа.Заказано) И НЕ ЗаказТоварыДопИнф.ИдСтроки В (&МаркиВРаботе) И ЗаказТоварыДопИнф.Количество > 0) 
	//|		ИЛИ (ЗаказТоварыДопИнф.Статус = Значение(Перечисление.СтатусыПозицийЗаказа.Удалено) И НЕ ЗаказТоварыДопИнф.ИдСтроки В (&ПозицииМаркиУдалены)) )	
	|СГРУППИРОВАТЬ ПО
	|	ЗаказТоварыДопИнф.ВремяВыдано,
	|	ЗаказТоварыДопИнф.ГруппаПечати,
	|	ЗаказТоварыДопИнф.ИдСтрокиВладельца,
	|	ЗаказТоварыДопИнф.ВремяДозаказ,
	|	ЗаказТоварыДопИнф.КодПодтверждения,
	|	ЗаказТоварыДопИнф.ВремяЗаказано,
	|	ЗаказТоварыДопИнф.РабочееМесто,
	|	ЗаказТоварыДопИнф.ВремяГотово,
	|	ЗаказТоварыДопИнф.АвторЗаказано,
	|	ЗаказТоварыДопИнф.Товар,
	|	ЗаказТоварыДопИнф.АвторГотово,
	|	ЗаказТоварыДопИнф.Заказ,
	|	ЗаказТоварыДопИнф.Статус,
	|	ЗаказТоварыДопИнф.НомерМарки,
	|	ЗаказТоварыДопИнф.Подача,
	|	ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачалаДня, ЗаказТоварыДопИнф.ВремяЗаказано, МИНУТА) / 10 КАК ЧИСЛО(10, 0));
	|
	|////////////////////////////////////////////////////////////////////////////////
	//| Выборка из временной таблицы
	|ВЫБРАТЬ
	|	СписокТоваров.Заказ,
	|	СписокТоваров.ИдСтроки,
	|	СписокТоваров.ВремяДозаказ,
	|	СписокТоваров.ВремяЗаказано,
	|	СписокТоваров.ВремяГотово,
	|	СписокТоваров.ВремяВыдано,
	|	СписокТоваров.Статус,
	|	СписокТоваров.КодПодтверждения,
	|	СписокТоваров.РабочееМесто,
	|	СписокТоваров.Подача,
	|	СписокТоваров.ГруппаПечати,
	|	СписокТоваров.АвторЗаказано,
	|	СписокТоваров.АвторГотово,
	|	СписокТоваров.Товар,
	|	СписокТоваров.НомерСтроки,
	|	СписокТоваров.Количество,
	|	СписокТоваров.КоличествоУдалено,
	|	СписокТоваров.ИдСтрокиВладельца,
	|	СписокТоваров.НомерМарки,
	|	СписокТоваров.ВремяМаркиГр,
	//Z+	
	|	ВЫБОР
	|	КОГДА ТИПЗНАЧЕНИЯ(СписокТоваров.Товар) = ТИП(Справочник.Специфики) И СписокТоваров.Товар.ЕстьЦена
	|		ТОГДА 1
	|	КОГДА ТИПЗНАЧЕНИЯ(СписокТоваров.Товар) = ТИП(Справочник.Специфики) И НЕ СписокТоваров.Товар.ЕстьЦена
	|	 	ТОГДА ВЫБОР КОГДА СписокТоваров.Товар В ИЕРАРХИИ (Выбрать Константы.ГруппаОбщихСпецифик ИЗ Константы как константы) ТОГДА 3 ИНАЧЕ 2 КОНЕЦ
	|	КОГДА ТИПЗНАЧЕНИЯ(СписокТоваров.Товар) = ТИП(Справочник.Товары)
	|		ТОГДА 0  
	|	ИНАЧЕ 3
	|	КОНЕЦ КАК Порядок
	//Z-
	|ИЗ
	|	СписокТоваров КАК СписокТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	//| Выборка Специфик пренадлежащих товарам и спецификам из временной таблицы с не заполненным реквизитом ГруппаПечати
	|ВЫБРАТЬ
	|	СписокТоваров.Заказ,
	|	ЗаказТоварыДопИнф.ИдСтроки,
	|	ЗаказТоварыДопИнф.ВремяДозаказ,
	|	ЗаказТоварыДопИнф.ВремяЗаказано,
	|	ЗаказТоварыДопИнф.ВремяГотово,
	|	ЗаказТоварыДопИнф.ВремяВыдано,
	|	ЗаказТоварыДопИнф.Статус,
	|	ЗаказТоварыДопИнф.КодПодтверждения,
	|	СписокТоваров.РабочееМесто,
	|	СписокТоваров.Подача,
	|	СписокТоваров.ГруппаПечати,
	|	ЗаказТоварыДопИнф.АвторЗаказано,
	|	ЗаказТоварыДопИнф.АвторГотово,
	|	ЗаказТоварыДопИнф.Товар,
	|	СписокТоваров.НомерСтроки,
	|	ЗаказТоварыДопИнф.Количество,
	|	ЗаказТоварыДопИнф.КоличествоУдалено,
	|	ЗаказТоварыДопИнф.ИдСтрокиВладельца,
	|	ЗаказТоварыДопИнф.НомерМарки,
	|	ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачалаДня, ЗаказТоварыДопИнф.ВремяЗаказано, МИНУТА)/10 КАК ЧИСЛО(10,0)) КАК ВремяМаркиГр,
	|	NULL
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокТоваров КАК СписокТоваров
	//|		ПО ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1)
	|		ПО ЗаказТоварыДопИнф.Статус В (&Статус)
	|			И ЗаказТоварыДопИнф.ИдСтрокиВладельца = СписокТоваров.ИдСтроки
	|			И ЗаказТоварыДопИнф.ГруппаПечати = ЗНАЧЕНИЕ(Справочник.ГруппыПечати.ПустаяСсылка)
	//Z+	
	|УПОРЯДОЧИТЬ ПО
	|Порядок, ИдСтроки 
	//Z-	
	|ИТОГИ
	|	МИНИМУМ(ВремяЗаказано),
	|	МАКСИМУМ(АвторЗаказано),
	|	МАКСИМУМ(Заказ)
	|ПО
	|	" + ФильтрПо + "
	|");
	
	// Параметры запроса
	Запрос.УстановитьПараметр("ГруппаПечати"		, ГруппаПечати);
	// < КС_ВДВ ------------------------------------------------------------ 
	//Запрос.УстановитьПараметр("ДатаГотово"			, ТекущаяДатаНаСервере()-60*60); // отслеживаем марки за последний час
	Запрос.УстановитьПараметр("ДатаГотово"			, ТекущаяДатаНаСервере()-60*60*12); // отслеживаем марки за последние 12 часов
	// КС_ВДВ > ------------------------------------------------------------ 
	Запрос.УстановитьПараметр("ДатаНачалаДня"		, НачалоДня(ТекущаяДатаНаСервере())); // Дата для сортировки по времени с начала дня
	Запрос.УстановитьПараметр("Статус"				, Перечисления.СтатусыПозицийЗаказа.Готово); // 	
	// < КС_ВДВ ------------------------------------------------------------ 
	Запрос.УстановитьПараметр("Заказ"				, ЗаказОтбор);
	Запрос.УстановитьПараметр("Станция"				, СтанцияОтбор);
	Запрос.УстановитьПараметр("ТекВремя"			, ТекущаяДатаНаСервере());
	// КС_ВДВ > ------------------------------------------------------------ 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		// новых марок не появилось
		ПоказатьМарки();
		Возврат;
	КонецЕсли;
	
	// Выгрузить Запрос в дерево
	ДеревоТоваров = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Преобразовать дерево в соответствии с иерархией специфик
	ДереваТоваровСформироватьСтруктуру(ДеревоТоваров);
	
	// Заполнить марки из дерева
	Для каждого СтрокаДереваМарки Из ДеревоТоваров.Строки Цикл
		
		Если ВыбФильтр = "По маркам" Тогда
			ОтборМарок = СтрокаДереваМарки.НомерМарки;
		ИначеЕсли ВыбФильтр = "По подтверждениям" Тогда	
			ОтборМарок = СтрокаДереваМарки.КодПодтверждения;
		ИначеЕсли ВыбФильтр = "По времени" Тогда
			ОтборМарок = СтрокаДереваМарки.ВремяМаркиГр;
		ИначеЕсли ВыбФильтр = "По заказам" Тогда
			ОтборМарок = СтрокаДереваМарки.Заказ;
		Иначе
			ОтборМарок = СтрокаДереваМарки.ГруппаПечати;
		КонецЕсли;
		
		// Найти марку если уже отображена на мониторе
		Марка = ОчередьМарок.Найти(ОтборМарок,"Номер");
		
		// Если марки нет то добавляем
		
		Если Марка = Неопределено Тогда
			Марка = ОчередьМарок.Добавить();
			Марка.Номер = ОтборМарок;
			Если ВыбФильтр = "По маркам" ИЛИ ВыбФильтр = "По заказам" ИЛИ ВыбФильтр = "По подтверждениям" Тогда
				Марка.Автор				= СтрокаДереваМарки.АвторЗаказано;
				Марка.ПосадочноеМесто	= НаимПосадочногоМеста(СтрокаДереваМарки.Заказ.ПосадочноеМесто);
				Марка.Заказ				= СтрокаДереваМарки.Заказ;
			КонецЕсли;	
			Марка.Порядок				= СтрокаДереваМарки.Порядок;
			Марка.ПорядокСпецифики		= 0;
			Марка.ВремяПоявления		= СтрокаДереваМарки.ВремяЗаказано;
			Марка.Состав				= СоставМарки_.СкопироватьКолонки();
		КонецЕсли;		
		
		Если глПараметрыРМ.ПроизводствоЗвукВключить И Марка.Номер<>НомерМаркиВозврат Тогда 
			РаботаСокнами.PlayWav(глПараметрыРМ.ПроизводствоЗвукИмяФайла);
		КонецЕсли; 
		
		// Отсортировать состав марки по времени
		СтрокаДереваМарки.Строки.Сортировать("Подача, НомерСтроки");
		
		// Заполнить/дополнить марку позициями
		Для каждого СтрокаДереваТовар Из СтрокаДереваМарки.Строки Цикл
			СоставМаркиДобавитьПозиции(Марка, СтрокаДереваТовар);	
		КонецЦикла;
		
		// Удалить марку если позиций "0"
		Если Марка.Состав.Количество() = 0 Тогда
			ОчередьМарок.Удалить(Марка);
		КонецЕсли; 
		
	КонецЦикла;
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// Заполнение колонки "Пейджер"
	
	Если ВыбФильтр = "По маркам" ИЛИ ВыбФильтр = "По заказам" ИЛИ ВыбФильтр = "По подтверждениям" Тогда
		ЗаполнитьПейджерыВОчередиМарок(ВыбФильтр);	
	КонецЕсли;	
	// КС_ВДВ > ------------------------------------------------------------ 
	
	// Упорядочить марки по времени
	ОчередьМарок.Сортировать("ВремяПоявления");
	
	ПоказатьМарки();
	
	
КонецПроцедуры

// Сформировать наименование товара
//
Функция ФорматНаименования(СтрокаДереваТовар)
	
	Если ТипЗнч(СтрокаДереваТовар.Товар) = Тип("СправочникСсылка.Товары") Тогда
		//ТекНаименование = СтрокаДереваТовар.Товар.Наименование + " ["+СтрокаДереваТовар.Товар.ЕдиницаИзмерения+"]";
		Если ЗначениеЗаполнено(СтрокаДереваТовар.Товар.НаименованиеДляМарки) тогда
			ТекНаименование = СтрокаДереваТовар.Товар.НаименованиеДляМарки;
		иначе
			ТекНаименование = СтрокаДереваТовар.Товар.Наименование;
		КонецЕсли;
	Иначе
		ТекНаименование = СтрДополнитьСправа("",(СтрокаДереваТовар.Уровень()-1)*3) + " - "+СтрокаДереваТовар.Товар;
	КонецЕсли;	
	
	Возврат ТекНаименование;
	
КонецФункции

// Отображать количество
//
Функция ФорматКоличества(Колво)
	
	Возврат ?(Колво = 1, "", ?(Колво = 0, "0", "х "+Колво));
	
КонецФункции

// Отобразить марки на мониторе
//
Процедура ПоказатьМарки()
		// < КС_ВДВ ------------------------------------------------------------ 
	Если НЕ ПанельМарокЗаполнена Тогда
		Возврат;
	КонецЕсли; 
	// КС_ВДВ > ------------------------------------------------------------ 
	
	БлокироватьПодтверждения = Истина;
	
	//ЭлементыФормы.тКоличествоМарок.Заголовок = ОчередьМарок.Количество();
	
	//ИсточникДанных		= ?(РежимВозврата, ТаблицаГотовых, ОчередьМарок);
	ИсточникДанных		= ОчередьМарок;
	ВсегоМарок			= ИсточникДанных.Количество();
	ВсегоСтраниц		= ВсегоМарок / КолвоМарокНаЭкране;
	Если Цел(ВсегоСтраниц) <> ВсегоСтраниц Тогда
		ВсегоСтраниц = Цел(ВсегоСтраниц) + 1;
	КонецЕсли;
	ТекСтраница			= Макс(1, Мин(ВсегоСтраниц, ТекСтраница) );
	НомерПервойМарки	= (ТекСтраница-1) * КолвоМарокНаЭкране + 1;
	
	ЭлементыФормы.тКолвоСтраниц.Заголовок = Строка(ТекСтраница)+"/"+Строка(ВсегоСтраниц);
	ЭлементыФормы.ПанельЛистаниеСтраниц.Видимость = ВсегоСтраниц>1;
	
	Для н = 1 По КолвоМарокНаЭкране Цикл
		
		ПанельМарка = ЭлементыФормы["ПанельМарка"+н];
		ТабПолеМарки = ЭлементыФормы["СоставМарки"+н];
		
		НомерМаркиВОчереди = НомерПервойМарки + н - 1;
		Если НомерМаркиВОчереди >  ВсегоМарок Тогда
			
			ПанельМарка.Видимость = Ложь;
			
		Иначе
			ПанельМарка.Видимость = Истина;
			Марка = ИсточникДанных[НомерМаркиВОчереди-1];
		    ЭлементыФормы["тНадписьОплачено"+н].Видимость = ЗаказОплачен(Марка.Заказ);
			ЭлементыФормы["тНадписьОплачено"+н].Заголовок = глСимволРубля; 
			
			ТабПолеМарки.ЦветФона		= ?(РежимВозврата, Новый Цвет(179,172,134), Новый Цвет());
			ТабПолеМарки.ЦветФонаПоля	= ?(РежимВозврата, Новый Цвет(179,172,134), Новый Цвет());
			
			ЭлементыФормы["КнопкаМарки"+н]				.Заголовок = НомерМаркиВОчереди;
			Если ВыбФильтр = "По маркам" Тогда	
				ЭлементыФормы["тНаименованиеМарки"+н]	.Заголовок = "Марка № " + Марка.Номер;
				// < КС_ВДВ ------------------------------------------------------------ 
				//ЭлементыФормы["тНаименованиеМаркиДоп"+н].Заголовок = Марка.ПосадочноеМесто + " (заказ №" + Марка.Заказ.Номер + ")";
				
				
				
				
				ЭлементыФормы["тНаименованиеМаркиДоп"+н].Заголовок = ""+Марка.Пейджер + "  Z:" + УбратьВсеБуквы(Марка.Заказ.Номер) + "";
				
				// КС_ВДВ > ------------------------------------------------------------ 
				ЭлементыФормы["тАвтор"+н]				.Заголовок = Марка.Автор;
			ИначеЕсли ВыбФильтр = "По подтверждениям" Тогда
				ЭлементыФормы["тНаименованиеМарки"+н]	.Заголовок = "подтверждение № " + Марка.Номер;
				// < КС_ВДВ ------------------------------------------------------------ 
				//ЭлементыФормы["тНаименованиеМаркиДоп"+н].Заголовок = Марка.ПосадочноеМесто + " (заказ №" + Марка.Заказ.Номер + ")";
				ЭлементыФормы["тНаименованиеМаркиДоп"+н].Заголовок = ""+Марка.Пейджер + " (заказ №" + УбратьВсеБуквы(Марка.Заказ.Номер) + ")";
				// КС_ВДВ > ------------------------------------------------------------ 
				ЭлементыФормы["тАвтор"+н]				.Заголовок = Марка.Автор;
			ИначеЕсли ВыбФильтр = "По времени" Тогда
				ЭлементыФормы["тНаименованиеМарки"+н]	.Заголовок = "Время " + Формат(Марка.ВремяПоявления,"ДФ=ЧЧ:мм");
				ЭлементыФормы["тНаименованиеМаркиДоп"+н].Заголовок = "";
				ЭлементыФормы["тАвтор"+н]				.Заголовок = "";
			ИначеЕсли ВыбФильтр = "По группам печати" Тогда
				ЭлементыФормы["тНаименованиеМарки"+н]	.Заголовок = "Группа печати " + Марка.Номер;
				ЭлементыФормы["тНаименованиеМаркиДоп"+н].Заголовок = "";
				ЭлементыФормы["тАвтор"+н]				.Заголовок = "";
			Иначе				
				ЭлементыФормы["тНаименованиеМарки"+н]	.Заголовок = "Заказ № " + УбратьВсеБуквы(Марка.Номер.Номер);
				ЭлементыФормы["тАвтор"+н]				.Заголовок = Марка.Автор;
				// < КС_ВДВ ------------------------------------------------------------ 
				//ЭлементыФормы["тНаименованиеМаркиДоп"+н].Заголовок = Марка.ПосадочноеМесто;
				ЭлементыФормы["тНаименованиеМаркиДоп"+н].Заголовок = ""+Марка.Пейджер;
				// КС_ВДВ > ------------------------------------------------------------ 
			КонецЕсли;	
			
			СоставМарки = ТабПолеМарки.Значение;
			СоставМарки.Очистить();
			Для каждого СтрокаСостава Из Марка.Состав Цикл
				ЗаполнитьЗначенияСвойств(СоставМарки.Добавить(), СтрокаСостава);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	ОбновитьТаймер();
	
	// снять выделение текущей строки в таблице можно только после ее отрисовки
	ПодключитьОбработчикОжидания("ОчиститьВыделенныеСтроки", 0.3, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПанельМарокПриОткрытии()
	
	Если не ПанельМарокЗаполнена Тогда
		ЗаполнитьПанельМарок();              
	КонецЕсли;
	
	
КонецПроцедуры

// Заполнить панель марок заданным количеством марок
//
Процедура ЗаполнитьПанельМарок()	
	
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Очистить();
	
	// Определяем размеры марки в зависимости отколичества на экране 
	//ШиринаМарки				= Окр(ЭлементыФормы.ОсновнаяПанель.Ширина / ПараметрыНастройки.КоличествоМарокПоГоризонтали, 0, 0);
	//ВысотаМарки				= Окр(ЭлементыФормы.ОсновнаяПанель.Высота / ПараметрыНастройки.КоличествоМарокПоВертикали, 0, 0);
	//КоэффициентШирины		= ШиринаМарки / ЭлементыФормы.ПанельМарка_.Ширина;
	//КоэффициентВысоты		= ВысотаМарки / ЭлементыФормы.ПанельМарка_.Высота;
	ШиринаМарки				= Цел(ЭлементыФормы.ОсновнаяПанель.Ширина / ПараметрыНастройки.КоличествоМарокПоГоризонтали) - 3;
	ВысотаМарки				= Цел(ЭлементыФормы.ОсновнаяПанель.Высота / ПараметрыНастройки.КоличествоМарокПоВертикали) - 3;
	КоэффициентШирины		= ШиринаМарки / ЭлементыФормы.ПанельМарка_.Ширина;
	КоэффициентВысоты		= ВысотаМарки / ЭлементыФормы.ПанельМарка_.Высота;	
	//КоэффициентШирины		= ШиринаМарки / (ЭлементыФормы.ПанельМарка_.Ширина / ПараметрыНастройки.КоличествоМарокПоГоризонтали);
	//КоэффициентВысоты		= ВысотаМарки / (ЭлементыФормы.ПанельМарка_.Высота / ПараметрыНастройки.КоличествоМарокПоВертикали);	
	ПанельМаркиЛево = 0;
	ПанельМаркиВерх = 0;
	
	// Создаем первую марку для образца
	НовыйЭлементФормы =  "ПанельМарка1";
	ПанельМарка = ЭлементыФормы.Добавить(Тип("Панель"), НовыйЭлементФормы,,ЭлементыФормы.ОсновнаяПанель);
	//ПанельМарка.Верх    = ПанельМаркиВерх + 1;
	//ПанельМарка.Лево    = ПанельМаркиЛево + 1;
	ПанельМарка.Верх    = ПанельМаркиВерх;
	ПанельМарка.Лево    = ПанельМаркиЛево;	
	ПанельМарка.Ширина	= ШиринаМарки; 
	ПанельМарка.Высота	= ВысотаМарки;
	ЗаполнитьЗначенияСвойств(ПанельМарка, ЭлементыФормы.ПанельМарка_, , "Данные, Имя, Видимость, Верх, Лево, Ширина, Высота");	
	//УстановитьПривязкуЭлементу(ПанельМарка, ЭлементыФормы.ОсновнаяПанель);
	
	// КнопкаМарки_
	НовыйЭлементФормы =  "КнопкаМарки1";
	ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Кнопка"), ЭлементыФормы.КнопкаМарки_, "Данные, ИсточникДействий, Имя, Заголовок, Видимость", ПанельМарка, Истина, КоэффициентШирины, КоэффициентВысоты);
	ЭлементыФормы[НовыйЭлементФормы].Заголовок = 1;
	Если РежимНастройки Тогда
		ЭлементыФормы[НовыйЭлементФормы].Доступность = Ложь;
	Иначе
		ЭлементыФормы[НовыйЭлементФормы].УстановитьДействие("Нажатие", Новый Действие("КнопкаМаркаНажатие"));
	КонецЕсли;
	
	// тНаименованиеМарки_
	НовыйЭлементФормы =  "тНаименованиеМарки1";
	ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тНаименованиеМарки_, "Данные, Значение, Имя, Заголовок, Видимость", ПанельМарка, Истина, КоэффициентШирины, КоэффициентВысоты, ПараметрыНастройки.НадписьЗаголовокОсновнойШрифтТекста, ПараметрыНастройки.НадписьЗаголовокОсновнойЦветТекста);
	ЭлементыФормы[НовыйЭлементФормы].Гиперссылка = РежимНастройки;
	
	// тНаименованиеМаркиДоп_
	НовыйЭлементФормы =  "тНаименованиеМаркиДоп1";
	ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тНаименованиеМаркиДоп_, "Данные, Значение, Имя, Заголовок, Видимость", ПанельМарка, Истина, КоэффициентШирины, КоэффициентВысоты, ПараметрыНастройки.НадписьЗаголовокДополнительныйШрифтТекста, ПараметрыНастройки.НадписьЗаголовокДополнительныйЦветТекста);
	ЭлементыФормы[НовыйЭлементФормы].Гиперссылка = РежимНастройки;
	
	// тНадписьОплачено_
	НовыйЭлементФормы =  "тНадписьОплачено1";
	ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тНадписьОплачено_, "Данные, Значение, Имя, Видимость", ПанельМарка, Истина, КоэффициентШирины, КоэффициентВысоты);
	ЭлементыФормы[НовыйЭлементФормы].Гиперссылка = РежимНастройки;
	

	// тТаймерОчереди_
	НовыйЭлементФормы =  "тТаймерОчереди1";
	ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тТаймерОчереди_, "Данные, Имя, Заголовок, Видимость", ПанельМарка, Истина, КоэффициентШирины, КоэффициентВысоты, ПараметрыНастройки.НадписьВремяШрифтТекста, ПараметрыНастройки.НадписьВремяЦветТекста);
	ЭлементыФормы[НовыйЭлементФормы].Гиперссылка = РежимНастройки;
	
	// тАвтор_
	НовыйЭлементФормы =  "тАвтор1";
	// < КС_ВДВ ------------------------------------------------------------ 
	//ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тАвтор_, "Имя, Заголовок, Видимость", ПанельМарка, Истина, КоэффициентШирины, КоэффициентВысоты, ПараметрыНастройки.НадписьАвторШрифтТекста, ПараметрыНастройки.НадписьАвторЦветТекста);
	
	// Ещё нужен прозрачный фон
	//ДопСвойства =  ", ПрозрачныйФон";
	ДопСвойства1="";
	ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тАвтор_, "Имя, Заголовок, Видимость"+ДопСвойства1, ПанельМарка, Истина, КоэффициентШирины, КоэффициентВысоты, ПараметрыНастройки.НадписьАвторШрифтТекста, ПараметрыНастройки.НадписьАвторЦветТекста);
	// КС_ВДВ > ------------------------------------------------------------ 
	ЭлементыФормы[НовыйЭлементФормы].Гиперссылка = РежимНастройки;
	
	// СоставМарки_
	НовыйЭлементФормы =  "СоставМарки1";
	ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("ТабличноеПоле"), ЭлементыФормы.СоставМарки_, "ТипЗначения, ТекущаяКолонка, ТекущаяСтрока, Данные, Имя, Видимость", ПанельМарка, Истина, КоэффициентШирины, КоэффициентВысоты, ПараметрыНастройки.ПроизводствоСписокБлюдОформление[0].Шрифт, ПараметрыНастройки.ПроизводствоСписокБлюдОформление[0].ЦветТекста, ПараметрыНастройки.ПроизводствоСписокБлюдОформление[0].ЦветФона);
	
	ПанельМаркиЛево = ПанельМаркиЛево + ШиринаМарки + 3;
	
	// Заполняем остальными по образцу
	Для н = 2 По КолвоМарокНаЭкране Цикл	
		
		Если ПанельМаркиЛево + ШиринаМарки > ЭлементыФормы.ОсновнаяПанель.Ширина  Тогда
			
			ПанельМаркиЛево = 0;
			ПанельМаркиВерх = ПанельМаркиВерх + ВысотаМарки + 3;
			
			Если ПанельМаркиВерх + ВысотаМарки > ЭлементыФормы.ОсновнаяПанель.Высота Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЕсли; 
		
		НовыйЭлементФормы =  "ПанельМарка"+н;
		ПанельМарка = ЭлементыФормы.Добавить(Тип("Панель"), НовыйЭлементФормы,,ЭлементыФормы.ОсновнаяПанель);
		
		//ПанельМарка.Верх    = ПанельМаркиВерх + 1;
		//ПанельМарка.Лево    = ПанельМаркиЛево + 1;
		ПанельМарка.Верх    = ПанельМаркиВерх;
		ПанельМарка.Лево    = ПанельМаркиЛево;			
		ЗаполнитьЗначенияСвойств(ПанельМарка, ЭлементыФормы.ПанельМарка1, , "Данные, Имя, Видимость, Лево, Верх");
		ПанельМарка.Доступность = Не РежимНастройки;
		//УстановитьПривязкуЭлементу(ПанельМарка, ЭлементыФормы.ОсновнаяПанель);
		
		// КнопкаМарки_
		НовыйЭлементФормы =  "КнопкаМарки"+н;
		ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Кнопка"), ЭлементыФормы.КнопкаМарки1, "Данные, ИсточникДействий, Имя, Видимость", ПанельМарка);
		ЭлементыФормы[НовыйЭлементФормы].Заголовок = н;
		ЭлементыФормы[НовыйЭлементФормы].УстановитьДействие("Нажатие", Новый Действие("КнопкаМаркаНажатие"));
		
		// тНаименованиеМарки_
		НовыйЭлементФормы =  "тНаименованиеМарки"+н;
		ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тНаименованиеМарки1, "Данные, Значение, Имя, Видимость", ПанельМарка);
		
				// < КС_ВДВ ------------------------------------------------------------ 
		// тАвтор_ лучше создавать до тНаименованиеМаркиДоп_, чтобы тАвтор_ не перекрывал тНаименованиеМаркиДоп_
		
		// тАвтор_
		НовыйЭлементФормы =  "тАвтор"+н;
		ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тАвтор1, "Имя, Видимость", ПанельМарка);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		// тНаименованиеМаркиДоп_
		НовыйЭлементФормы =  "тНаименованиеМаркиДоп"+н;
		ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тНаименованиеМаркиДоп1, "Данные, Значение, Имя, Видимость", ПанельМарка);
		
		// тНадписьОплачено_
		НовыйЭлементФормы =  "тНадписьОплачено"+н;
		ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тНадписьОплачено1, "Данные, Значение, Имя, Видимость", ПанельМарка);
		

		// тТаймерОчереди_
		НовыйЭлементФормы =  "тТаймерОчереди"+н;
		ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тТаймерОчереди1, "Данные, Имя, Видимость", ПанельМарка);
		
		// < КС_ВДВ ------------------------------------------------------------ 
		//// тАвтор_
		//НовыйЭлементФормы =  "тАвтор"+н;
		//ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("Надпись"), ЭлементыФормы.тАвтор1, "Имя, Видимость", ПанельМарка);
		// КС_ВДВ > ------------------------------------------------------------ 
		
		// СоставМарки_
		НовыйЭлементФормы =  "СоставМарки"+н;
		ДобавитьНовыйЭлементФормы(НовыйЭлементФормы, Тип("ТабличноеПоле"), ЭлементыФормы.СоставМарки1, "Данные, ТипЗначения, ТекущаяКолонка, ТекущаяСтрока, Имя, Видимость", ПанельМарка);				
		
		ПанельМаркиЛево = ПанельМаркиЛево + ШиринаМарки + 3;
		
	КонецЦикла; 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	ПанельМарокЗаполнена = Истина;
	// КС_ВДВ > ------------------------------------------------------------ 
	
	ОбновитьОчередь();
	
КонецПроцедуры

//// Надпись сделать гиперссылкой для режима настройки
////
//Процедура НадписьКакГиперссылка(ТекЭлементФормы)
//	
//	ТекЭлементФормы.Гиперссылка = Истина;
//	
//КонецПроцедуры	

// Добавляем новый элемент 
//
Процедура ДобавитьНовыйЭлементФормы(ТекНовыйЭлемент, ТекТип, ТекОбразец, ТекОбразецИсключения, ТекЭлементВладелец, УстановитьРазмер = Ложь, КоэффициентШирины = 1, КоэффициентВысоты = 1, Шрифт = Неопределено, ЦветТекста = Неопределено, ЦветФона = Неопределено)
	
	НовыйЭлементФормы = ЭлементыФормы.Добавить(ТекТип, ТекНовыйЭлемент,,ТекЭлементВладелец);
	ЗаполнитьЗначенияСвойств(НовыйЭлементФормы, ТекОбразец, , ТекОбразецИсключения);
	
	// Если таблица перезаполняем колонки и нужные реквизиты
	Если ТекТип = Тип("ТабличноеПоле") Тогда
		// Копируем колонки в реквизит формы
		ЭтаФорма[ТекНовыйЭлемент] = СоставМарки_.СкопироватьКолонки();
		// Присваиваем реквизит новому элементу
		НовыйЭлементФормы.Данные = ТекНовыйЭлемент;
		// Создаем колонки
		НовыйЭлементФормы.СоздатьКолонки();
		// Заполняем колонки по образцу
		Для Каждого Колонка Из НовыйЭлементФормы.Колонки Цикл  
			ЗаполнитьЗначенияСвойств(Колонка, ТекОбразец.Колонки[Колонка.Имя]);
			Если Колонка.Имя = "Подача" Тогда
				Колонка.Видимость = ИспользоватьКурсы;
			КонецЕсли;	
		КонецЦикла;
		
		Если РежимНастройки Тогда
			НовыйЭлементФормы.УстановитьДействие("Выбор", Новый Действие("СоставМарки_Выбор"));
		Иначе
			НовыйЭлементФормы.УстановитьДействие("ПриАктивизацииСтроки", Новый Действие("ПроверкаВыбораМарки"));
		КонецЕсли;
		
		НовыйЭлементФормы.УстановитьДействие("ПриВыводеСтроки", Новый Действие("СоставМарки1ПриВыводеСтроки"));
		
	Иначе
		Если РежимНастройки Тогда
			НовыйЭлементФормы.УстановитьДействие("Нажатие", Новый Действие("РежимНастройкиЕлементНажатие"));
		КонецЕсли;
	КонецЕсли;
	
	Если УстановитьРазмер Тогда
		// Задаем размеры первой марки
		НовыйЭлементФормы.Ширина = Цел(ТекОбразец.Ширина * КоэффициентШирины);
		НовыйЭлементФормы.Высота = Цел(ТекОбразец.Высота * КоэффициентВысоты);
		НовыйЭлементФормы.Лево = Цел(ТекОбразец.Лево * КоэффициентШирины);
		НовыйЭлементФормы.Верх = Цел(ТекОбразец.Верх * КоэффициентВысоты);  
		//НовыйЭлементФормы.Лево = Цел(ТекОбразец.Лево / ПараметрыНастройки.КоличествоМарокПоГоризонтали);
		//НовыйЭлементФормы.Верх = Цел(ТекОбразец.Верх / ПараметрыНастройки.КоличествоМарокПоВертикали); 
		//НовыйЭлементФормы.Высота = Цел(ТекОбразец.Высота / ПараметрыНастройки.КоличествоМарокПоВертикали);
		//НовыйЭлементФормы.Ширина = Цел(ТекОбразец.Ширина / ПараметрыНастройки.КоличествоМарокПоГоризонтали);
		
		Если Шрифт = Неопределено Тогда
			// Устанавливаем шрифт пропорционатьно ширине
			НовыйЭлементФормы.Шрифт = Новый Шрифт(НовыйЭлементФормы.Шрифт, , Цел(НовыйЭлементФормы.Шрифт.Размер * КоэффициентШирины)); 
			//НовыйЭлементФормы.Шрифт = Новый Шрифт(НовыйЭлементФормы.Шрифт, , Цел(НовыйЭлементФормы.Шрифт.Размер / ПараметрыНастройки.КоличествоМарокПоВертикали)); 
		Иначе
			НовыйЭлементФормы.Шрифт = Новый Шрифт(Шрифт);
		КонецЕсли;	
		
		Если ЦветТекста <> Неопределено Тогда
			НовыйЭлементФормы.ЦветТекста = ЦветТекста;
		КонецЕсли;	
		
		Если ЦветФона <> Неопределено Тогда
			НовыйЭлементФормы.ЦветФона = ЦветФона;
		КонецЕсли;			
		
	КонецЕсли;
	
	//УстановитьПривязкуЭлементу(НовыйЭлементФормы, ТекЭлементВладелец);
	
КонецПроцедуры	

// Установить привязки программно созданным элементам
//
Процедура УстановитьПривязкуЭлементу(ТекНовыйЭлемент, ТекЭлементФормы)
	
	ТекНовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ТекЭлементФормы, ГраницаЭлементаУправления.Лево, ТекЭлементФормы, ГраницаЭлементаУправления.Право);
	ТекНовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, ТекЭлементФормы, ГраницаЭлементаУправления.Лево, ТекЭлементФормы, ГраницаЭлементаУправления.Право);
	ТекНовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ТекЭлементФормы, ГраницаЭлементаУправления.Верх, ТекЭлементФормы, ГраницаЭлементаУправления.Низ);
	ТекНовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ТекЭлементФормы, ГраницаЭлементаУправления.Верх, ТекЭлементФормы, ГраницаЭлементаУправления.Низ);
	
КонецПроцедуры	

//
//
Процедура ОчиститьВыделенныеСтроки()
	
	//БлокироватьПодтверждения = Ложь;
	
	Для н = 1 По КолвоМарокНаЭкране Цикл
		ТабПолеМарки = ЭлементыФормы["СоставМарки"+н];
		ТабПолеМарки.ВыделенныеСтроки.Очистить();
	КонецЦикла; 
	
	БлокироватьПодтверждения = Ложь;
	
	//ЭлементыФормы.КнопкаПустая.Видимость = Истина;
	//WshShell.SendKeys("+^E");
	
КонецПроцедуры

//
//
Процедура ПроверкаВыбораМарки(ТекущийЭлемент)
	
	Если БлокироватьПодтверждения Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимНастройки Тогда
		РежимНастройкиЕлементНажатие(ТекущийЭлемент);
		Возврат;
	КонецЕсли;	
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли; 
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Если Лев(ТекущийЭлемент.Имя,11) = "СоставМарки" Тогда
		
		БлокироватьПодтверждения = Истина;
		
		Если МаркиЗакреплятьЗаСотрудниками И НЕ ЗначениеЗаполнено(ТекущийЭлемент.ТекущаяСтрока.Сотрудник) И ТекущийЭлемент.ТекущаяСтрока.Статус <> Перечисления.СтатусыПозицийЗаказа.Удалено Тогда
			ОбработкаВыбораПовара(ТекущийЭлемент);
		Иначе 
			ОбработкаВыбораМарки(ТекущийЭлемент);
		КонецЕсли;	
		//ЭлементыФормы.КнопкаПустая.Видимость = Истина;
		//WshShell.SendKeys("+^E");
		
	КонецЕсли; 
	
КонецПроцедуры

// Выбор марки
//
Процедура ОбработкаВыбораМарки(ТабПолеМарки, ШапкаМарки=Ложь)
	// < КС_ВДВ ------------------------------------------------------------ 
	//Было: Процедура ОбработкаВыбораМарки(ТабПолеМарки)
	// КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Если ТабПолеМарки = Неопределено Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ТабПолеМарки) <> Тип("ТабличноеПоле") Тогда	
		Возврат; // Иногда сюда попадает элемент с типом "Кнопка"
	КонецЕсли; 
	// КС_ВДВ > ------------------------------------------------------------ 
	
	ЦветФона			= ТабПолеМарки.ЦветФона;
	ЦветФонаПоля		= ТабПолеМарки.ЦветФонаПоля;
	ТекКодПодтверждения	= ТабПолеМарки.ТекущаяСтрока.КодПодтверждения;
	ТекСтатус			= ТабПолеМарки.ТекущаяСтрока.Статус;
	ВижуУдаления		= ТабПолеМарки.ТекущаяСтрока.Статус = Перечисления.СтатусыПозицийЗаказа.Удалено;
	
	СписокКодовПодтверждений = Новый Массив;
	СписокКодовПодтверждений.Добавить(ТекКодПодтверждения);
	
	СписокПодтвержденных = Новый СписокЗначений;
	СписокПодтвержденных.Добавить(ТабПолеМарки.ТекущаяСтрока.ИдСтроки);
	
	// < КС_ВДВ ------------------------------------------------------------ 
	ОбработкаВсехСтрокМарки = Истина;	// Будут обработаны все строки марки
	// КС_ВДВ > ------------------------------------------------------------ 
	
	// таким образом одинаково выделяем нужную область таблицы
	Для каждого Стр Из ТабПолеМарки.Значение Цикл
		// < КС_ВДВ ------------------------------------------------------------ 
		//Если Стр.Статус = ТекСтатус И (ВижуУдаления ИЛИ Стр.КодПодтверждения = ТекКодПодтверждения) Тогда
		Если Стр.Статус = ТекСтатус И (ВижуУдаления ИЛИ ШапкаМарки ИЛИ Стр.КодПодтверждения = ТекКодПодтверждения) Тогда
			// КС_ВДВ > ------------------------------------------------------------ 
			ТабПолеМарки.ВыделенныеСтроки.Добавить(Стр);
			СписокПодтвержденных.Добавить(Стр.ИДСтроки);
			Если СписокКодовПодтверждений.Найти(Стр.КодПодтверждения) = Неопределено Тогда
				СписокКодовПодтверждений.Добавить(Стр.КодПодтверждения);
			КонецЕсли;	
		Иначе
			// < КС_ВДВ ------------------------------------------------------------ 
			ОбработкаВсехСтрокМарки = Ложь;
			// КС_ВДВ > ------------------------------------------------------------ 
		КонецЕсли;
	КонецЦикла; 
	// конец выделения
	
	// Проверка на подтверждение из других групп (при разделении)
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.Товар КАК Товар,
	|	ЗаказТоварыДопИнф.Количество КАК Количество,
	|	ЗаказТоварыДопИнф.Статус,
	|	ЗаказТоварыДопИнф.ИдСтроки
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.КодПодтверждения В (&КодПодтверждения)
	|	И ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1)
	|	И ЗаказТоварыДопИнф.Количество > 0
	|	И ЗаказТоварыДопИнф.Статус В (&Статус)
	|	И ЗаказТоварыДопИнф.ИдСтроки НЕ В (&ИдСтроки)
	|");
	
	Запрос.УстановитьПараметр("ИдСтроки"		, СписокПодтвержденных);
	Запрос.УстановитьПараметр("КодПодтверждения", СписокКодовПодтверждений);
	Запрос.УстановитьПараметр("Статус"			, ТекСтатус);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Есть подтверждения в других группах?
	//Если НЕ РезультатЗапроса.Пустой() Тогда
	//	Выборка = РезультатЗапроса.Выбрать();
	//	Текст = "";
	//	Пока Выборка.Следующий() Цикл 
	//		СписокПодтвержденных.Добавить(Выборка.ИДСтроки);
	//		Текст = Текст + Символы.ПС + Выборка.Товар + " - " + Выборка.Количество + " шт.";
	//	КонецЦикла;	
	//	// Вывести сообщение с перечнем дополнительно подтверждаемых позиций
	//	// < КС_ВДВ ------------------------------------------------------------ 
	//	//ИнтерфейсРМ.Подсказка(?(РежимВозврата, "Дополнительно вернутся", "Дополнительно подтвердится"), Текст);
	//	ИнтерфейсРМ.Подсказка(?(РежимВозврата, "Дополнительно нужно выдать", "Дополнительно подтвердится"), Текст);
	//	// КС_ВДВ > ------------------------------------------------------------ 
	//КонецЕсли;
	
	ТабПолеМарки.ЦветФона		= Новый Цвет(83,109,194);
	
	// < КС_ВДВ ------------------------------------------------------------ 
	//Текст1 = ?(ТекСтатус = Перечисления.СтатусыПозицийЗаказа.Удалено, "НЕ ГОТОВИТЬ!", ?(РежимВозврата, "ВОЗВРАТ!", "ГОТОВО!"));
	Текст1 = ?(ТекСтатус = Перечисления.СтатусыПозицийЗаказа.Удалено, "НЕ ГОТОВИТЬ!", ?(РежимВозврата, "ВЫДАНО!", "ГОТОВО!"));
	// КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	ВыводЗаказаНаИнфоДисплей(, СписокКодовПодтверждений); // будут выделены выбранные позиции
	// КС_ВДВ > ------------------------------------------------------------ 
	
	//Z+
	Кнопка1="ОК";
	Кнопка2="";
	Кнопка3="Esc=Отмена";
	Текст2 = "";
	ЕстьОплаченные = Ложь;
	СтрПейджеры = ""; НомерЗаказа="";ЗаказДляЖР=Неопределено;
	Если СписокКодовПодтверждений.Количество() > 0 Тогда
		ВыводитьПредупреждениеПейджер=Истина;
		Текст3="";	
		Если РежимВозврата Тогда // Режим "К Выдаче"
			ВыдачаЗаказов =	ПолучитьСписокЗаказов(СписокКодовПодтверждений, глРабочееМесто.Станция);
			
			Если ВыбФильтр <> "По маркам" ИЛИ ОбработкаВсехСтрокМарки Тогда
				СтрПейджеры="";
				Если ВыдачаЗаказов.Пейджеры.Количество()>0 Тогда
					Для Каждого СтрМ из ВыдачаЗаказов.Пейджеры Цикл
						Если СтрПейджеры="" Тогда
							СтрПейджеры=СтрПейджеры+""+СтрМ; 
						Иначе
							СтрПейджеры=СтрПейджеры+", "+СтрМ;
						КонецЕсли;
					КонецЦикла;	
					ПроверкаЗаказов = ПолностьюОбработан("Заказ", ВыдачаЗаказов.Заказы, глРабочееМесто.Станция,СписокКодовПодтверждений);
					Если ПроверкаЗаказов.ВсеОбработаны Тогда
						ЕстьОплаченные = Ложь;
						ПолучитьСписокПейджеров(СписокКодовПодтверждений, глРабочееМесто.Станция, ЕстьОплаченные);
						Текст3 = "";
						
						Если ЕстьОплаченные  Тогда
							Текст2 = "Гость вернул вам пейджер №05?";
							Текст3 = " 
							|Если гость не вернул пейджер №05, нажмите «нет» и сообщите менеджеру.
							|
							|Заказ уже оплачен.";
							Текст3 = СтрЗаменить(Текст3,"№05","№"+СокрЛП(СтрПейджеры)); 
							Текст2 = СтрЗаменить(Текст2,"№05","№"+СокрЛП(СтрПейджеры)); 
							Если ВыдачаЗаказов.Заказы.Количество() Тогда
							
								НомерЗаказа = ВыдачаЗаказов.Заказы[0].Номер;
								ЗаказДляЖР = ВыдачаЗаказов.Заказы[0];
							
							КонецЕсли; 


						Иначе
							Текст3 = Текст3 + Символы.ПС + "Гость сдал пейджер № "+СокрЛП(СтрПейджеры)+"?";
						КонецЕсли; 
						

						ВыводитьПредупреждениеПейджер=Ложь;
						Кнопка1="Да";
						Кнопка2="Нет";
						Кнопка3="Esc=Отмена";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 
			
		Иначе // Режим "Приготовление"
			Если ВыбФильтр <> "По маркам" ИЛИ ОбработкаВсехСтрокМарки Тогда
				ЕстьОплаченные = Ложь;
				ЕстьДругиеМарки = Ложь;
				СтрПейджеры=ПолучитьСписокПейджеров(СписокКодовПодтверждений, глРабочееМесто.Станция, ЕстьОплаченные, ЕстьДругиеМарки);
				Если НЕ ПустаяСтрока(СтрПейджеры) Тогда
					Текст3="
					|
					|Нажмите кнопку вызова пейджера № "+СтрПейджеры;
					Если ЕстьОплаченные И не ЕстьДругиеМарки Тогда
						
						
						Текст2 = Текст3;
						
						Текст3="
						|
						|Заказ уже оплачен! 
						|
						|Гость должен сдать пейджер!";
					
					КонецЕсли; 
					ВыводитьПредупреждениеПейджер=Ложь;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;	
	КонецЕсли;	
	//Z-
	
	Если глПараметрыРМ.ПроизводствоПодтверждатьВыборМарки Тогда
		Если Текст2 = "" Тогда
			Текст2 = "Подтвердите выбор!";
		КонецЕсли;
		
		Если СокрЛП(Текст3)<>"" Тогда
			Текст2=Текст2+" 
			|
			|"+Текст3;
		КонецЕсли;	
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Подтверждение",Текст1,Текст2,Кнопка1,Кнопка2,Кнопка3,,,,,ЗаказДляЖР);
	Иначе
		Текст2 = "";
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Подтверждение",Текст1,Текст2,"","Esc=ОК","",,,2,,ЗаказДляЖР);
	КонецЕсли; 
	
	Если Ответ = Кнопка2 И ЕстьОплаченные Тогда
		
		ОбработкаСобытийЗапись = РегистрыСведений.ОбработкаСобытий.СоздатьМенеджерЗаписи();
		ОбработкаСобытийЗапись.Период			= '20010101';	// событие не отложенное, но пустую дату записывать нельзя
		ОбработкаСобытийЗапись.РабочееМесто	= Справочники.РабочиеМеста.НайтиПоНаименованию("Хостес");
		ОбработкаСобытийЗапись.ИдСобытия	= 1;
		ОбработкаСобытийЗапись.ТипСобытия	= Перечисления.ТипыСобытий.Сообщение;
		ОбработкаСобытийЗапись.Описание = "Пейджер №" + СтрПейджеры + " по оплаченному заказу №" + НомерЗаказа+" не возвращен.";
		Если ЗначениеЗаполнено(глРабочееМесто.Станция) Тогда
		
			ОбработкаСобытийЗапись.Описание = ОбработкаСобытийЗапись.Описание + Символы.ПС + "Станция: " + глРабочееМесто.Станция;	
		
		КонецЕсли; 
		ОбработкаСобытийЗапись.Записать();
		
		ОбработкаСобытийЗапись = РегистрыСведений.ОбработкаСобытий.СоздатьМенеджерЗаписи();
		ОбработкаСобытийЗапись.Период			= '20010101';	// событие не отложенное, но пустую дату записывать нельзя
		ОбработкаСобытийЗапись.РабочееМесто	= Справочники.РабочиеМеста.НайтиПоНаименованию("Касса1");
		ОбработкаСобытийЗапись.ИдСобытия	= 2;
		ОбработкаСобытийЗапись.ТипСобытия	= Перечисления.ТипыСобытий.Сообщение;
		ОбработкаСобытийЗапись.Описание = "Пейджер №" + СтрПейджеры + " по оплаченному заказу №" + НомерЗаказа+" не возвращен.";
		Если ЗначениеЗаполнено(глРабочееМесто.Станция) Тогда
		
			ОбработкаСобытийЗапись.Описание = ОбработкаСобытийЗапись.Описание + Символы.ПС + "Станция: " + глРабочееМесто.Станция;	
		
		КонецЕсли; 
		ОбработкаСобытийЗапись.Записать();
		
			ОбработкаСобытийЗапись = РегистрыСведений.ОбработкаСобытий.СоздатьМенеджерЗаписи();
		ОбработкаСобытийЗапись.Период			= '20010101';	// событие не отложенное, но пустую дату записывать нельзя
		ОбработкаСобытийЗапись.РабочееМесто	= Справочники.РабочиеМеста.НайтиПоНаименованию("Касса2");
		ОбработкаСобытийЗапись.ИдСобытия	= 1;
		ОбработкаСобытийЗапись.ТипСобытия	= Перечисления.ТипыСобытий.Сообщение;
		ОбработкаСобытийЗапись.Описание = "Пейджер №" + СтрПейджеры + " по оплаченному заказу №" + НомерЗаказа+" не возвращен.";
		Если ЗначениеЗаполнено(глРабочееМесто.Станция) Тогда
		
			ОбработкаСобытийЗапись.Описание = ОбработкаСобытийЗапись.Описание + Символы.ПС + "Станция: " + глРабочееМесто.Станция;	
		
		КонецЕсли; 
		ОбработкаСобытийЗапись.Записать();


	
	КонецЕсли;
	
	//ПодключитьОбработчикОжидания("ОчиститьВыделенныеСтроки", 0.1, Истина);
	//ТабПолеМарки.ЦветФона		= ЦветФона;
	//ТабПолеМарки.ЦветФонаПоля	= ЦветФонаПоля;
	//ТекущийЭлемент = ЭлементыФормы.КнопкаПереключитьФильтр;
	
	Если Ответ = "Отмена" Тогда
		ОбновитьОчередь();
		// < КС_ВДВ ------------------------------------------------------------ 
		ВыводЗаказаНаИнфоДисплей(); // будет снято выделение
		// КС_ВДВ > ------------------------------------------------------------ 
		Возврат;
	КонецЕсли;
	
	Если СписокКодовПодтверждений.Количество() > 0 Тогда
		Для каждого ТекКодПодтверждения Из СписокКодовПодтверждений Цикл
			Если РежимВозврата Тогда
				// < КС_ВДВ ------------------------------------------------------------ 
				//Защита.ПодтверждениеГотовности(ТекКодПодтверждения, ТекСтатус, Ложь, Истина);
				
				// См. ниже вызов функции ОтметитьВыдачу
				// КС_ВДВ > ------------------------------------------------------------ 
			Иначе
				Защита.ПодтверждениеГотовности(ТекКодПодтверждения, ТекСтатус, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	// < КС_ВДВ ------------------------------------------------------------ 
	РежимПослеВыдачи = "";
	
	Если СписокКодовПодтверждений.Количество() > 0 Тогда
		
		// Если в мониторе марки группируются по номерам марок, то проверку марок на закрытие
		// оптимально выполнять в том случае, если обрабатываются все строки марки.
		//
		// Если используется другой режим вывода марок, то проверку марок на закрытие нужно
		// выполнять после обработки даже единичной позиции.
		// Например, при группировке марок "По заказам" одна марка на экране может состоять 
		// из нескольких настоящих марок, ведь в одном заказе может быть несколько марок.
		
		Если РежимВозврата Тогда // Режим "К Выдаче"
			РезультатВыдачи = ксТрактир.ОтметитьВыдачу(СписокКодовПодтверждений);
			
			Если ВыбФильтр <> "По маркам" ИЛИ ОбработкаВсехСтрокМарки Тогда
				
				РежимПослеВыдачи = ДействиеПослеВыдачи(РезультатВыдачи,ВыводитьПредупреждениеПейджер,Ответ);
				
			КонецЕсли; 
			
		Иначе // Режим "Приготовление"
			
			Если ВыбФильтр <> "По маркам" ИЛИ ОбработкаВсехСтрокМарки Тогда
				//Z+				
				ксТрактир.ПереводМарокКВыдаче(СписокКодовПодтверждений, глРабочееМесто.Станция,ВыводитьПредупреждениеПейджер);	
				//ксТрактир.ПереводМарокКВыдаче(СписокКодовПодтверждений, глРабочееМесто.Станция);	
				//Z-
			КонецЕсли; 
			
		КонецЕсли;	
	КонецЕсли;	
	// КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	//ОбновитьОчередь();
	
	Если РежимПослеВыдачи = "РежимПриготовление" Тогда
		// отключаем отборы
		ЗаказОтбор 			= Неопределено;
		ПросроченныеОтбор 	= Ложь;
		УстановитьРежимПриготовление();	
		
	Иначе
		ОбновитьОчередь();
		
	КонецЕсли; 
	
	ВыводЗаказаНаИнфоДисплей();
	// КС_ВДВ > ------------------------------------------------------------ 
	
КонецПроцедуры

Процедура ОбработкаВыбораПовара(ТабПолеМарки)
	
	ТекКодПодтверждения	= ТабПолеМарки.ТекущаяСтрока.КодПодтверждения;
	
	СписокКодовПодтверждений = Новый Массив;
	СписокКодовПодтверждений.Добавить(ТекКодПодтверждения);
	
	СписокПодтвержденных = Новый СписокЗначений;
	СписокПодтвержденных.Добавить(ТабПолеМарки.ТекущаяСтрока.ИдСтроки);
	
	// таким образом одинаково выделяем нужную область таблицы
	Для каждого Стр Из ТабПолеМарки.Значение Цикл
		Если  Стр.КодПодтверждения = ТекКодПодтверждения Тогда
			ТабПолеМарки.ВыделенныеСтроки.Добавить(Стр);
			СписокПодтвержденных.Добавить(Стр.ИДСтроки);
			Если СписокКодовПодтверждений.Найти(Стр.КодПодтверждения) = Неопределено Тогда
				СписокКодовПодтверждений.Добавить(Стр.КодПодтверждения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	// конец выделения
	
	// Проверка на подтверждение из других групп (при разделении)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.Товар КАК Товар,
	|	ЗаказТоварыДопИнф.Количество КАК Количество,
	|	ЗаказТоварыДопИнф.Статус КАК Статус,
	|	ЗаказТоварыДопИнф.ИдСтроки КАК ИдСтроки,
	|	ЗаказТоварыДопИнф.Заказ КАК Заказ
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.КодПодтверждения В(&КодПодтверждения)
	|	И ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1)
	|	И ЗаказТоварыДопИнф.Количество > 0
	|	И НЕ ЗаказТоварыДопИнф.ИдСтроки В (&ИдСтроки)");
	
	Запрос.УстановитьПараметр("ИдСтроки"		, СписокПодтвержденных);
	Запрос.УстановитьПараметр("КодПодтверждения", СписокКодовПодтверждений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Заказ = Заказ;
	// Есть подтверждения в других группах?
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Текст = "";
		Пока Выборка.Следующий() Цикл 
			СписокПодтвержденных.Добавить(Выборка.ИДСтроки);
			Текст = Текст + Символы.ПС + Выборка.Товар + " - " + Выборка.Количество + " шт.";
			Заказ = Выборка.Заказ;
		КонецЦикла;	
		// Вывести сообщение с перечнем дополнительно подтверждаемых позиций
		ИнтерфейсРМ.Подсказка("Дополнительно закрепится", Текст);
	КонецЕсли;
	
	ЦветФона			= ТабПолеМарки.ЦветФона;
	ЦветФонаПоля		= ТабПолеМарки.ЦветФонаПоля;
	ТабПолеМарки.ЦветФона		= Новый Цвет(83,109,194);
	
	Текст1 = "Блюдо будет готовить";
	Если глПараметрыРМ.ПроизводствоПодтверждатьВыборМарки Тогда
		Текст2 = Строка(глПользователь) + Символы.ПС + " Подтвердить?";
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Подтверждение",Текст1,Текст2,"ОК","","Esc=Отмена",,,,,Заказ);
	Иначе
		Текст2 = Строка(глПользователь);
		Ответ = ИнтерфейсРМ.ВопросПредупреждение("Подтверждение",Текст1,Текст2,"","Esc=ОК","",,,,,Заказ);
	КонецЕсли; 	
	
	//ПодключитьОбработчикОжидания("ОчиститьВыделенныеСтроки", 0.1, Истина);
	//ТабПолеМарки.ЦветФона		= ЦветФона;
	//ТабПолеМарки.ЦветФонаПоля	= ЦветФонаПоля;
	//ТекущийЭлемент = ЭлементыФормы.КнопкаПереключитьФильтр;
	
	Если Ответ = "Отмена" Тогда
		ОбновитьОчередь();
		Возврат;
	КонецЕсли;
	
//	Защита.ПодтверждениеЗакрепленияЗаПоваром(ТабПолеМарки.ТекущаяСтрока.ИдСтроки, ТабПолеМарки.ТекущаяСтрока.КодПодтверждения);
	
	ОбновитьОчередь();
	
КонецПроцедуры	

// Оформление строки
//
Процедура ОформлениеСтрокиМарки(Элемент, ОформлениеСтроки, ДанныеСтроки) 
	
	// Отмененные к приготовлению 
	Если НЕ РежимВозврата И ДанныеСтроки.Статус = Перечисления.СтатусыПозицийЗаказа.Удалено Тогда
		ОформлениеСтроки.Ячейки.КонтрольноеВремя.Текст		= ?(ЗначениеЗаполнено(ДанныеСтроки.КоличествоУдалено), "удал. " +  ДанныеСтроки.КоличествоУдалено, "-");
		ПолучитьОформленнуюСтроку(ОформлениеСтроки, 3);
		Возврат;
	КонецЕсли;		
	
	// Оформление колонки время приготовления (осталось)
	КолвоСекунд = ДанныеСтроки.КонтрольноеВремя - ТекущаяДатаНаСервере();
	// < КС_ВДВ ------------------------------------------------------------ 
	//ОформлениеСтроки.Ячейки.КонтрольноеВремя.Текст		= ТаймерСтрокой(КолвоСекунд);		
	
	// Для специфик не выводим время
	ОформлениеСтроки.Ячейки.КонтрольноеВремя.Текст		= ?(ЗначениеЗаполнено(ДанныеСтроки.Товар), ТаймерСтрокой(КолвоСекунд), "");
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Если РежимВозврата Тогда
		Возврат;
	КонецЕсли;	
	
	Если ДанныеСтроки.КонтрольноеВремя - ДанныеСтроки.ВремяЗаказано = 0 Тогда
		ОформлениеСтроки.Ячейки.КонтрольноеВремя.Текст = "";
	КонецЕсли;
	
	ВидСпецифика	= НЕ ЗначениеЗаполнено(ДанныеСтроки.Товар);
	
	Если РежимНастройки Тогда
		ПолучитьОформленнуюСтроку(ОформлениеСтроки, Элемент.Значение.Индекс(ДанныеСтроки));
	ИначеЕсли МаркиЗакреплятьЗаСотрудниками И НЕ ЗначениеЗаполнено(ДанныеСтроки.Сотрудник) Тогда
		ПолучитьОформленнуюСтроку(ОформлениеСтроки, 4, ВидСпецифика);	
	ИначеЕсли (КолвоСекунд <= 0 ИЛИ ДанныеСтроки.КонтрольноеВремя = ДанныеСтроки.ВремяЗаказано) И (ДанныеСтроки.КонтрольноеВремя - ДанныеСтроки.ВремяЗаказано) Тогда
		ПолучитьОформленнуюСтроку(ОформлениеСтроки, 2, ВидСпецифика);
	ИначеЕсли ДанныеСтроки.КонтрольноеВремя - ДанныеСтроки.ВремяЗаказано Тогда
		Если КолвоСекунд / (ДанныеСтроки.КонтрольноеВремя - ДанныеСтроки.ВремяЗаказано) < ВремяГотовностиВнимание Тогда
			ПолучитьОформленнуюСтроку(ОформлениеСтроки, 1, ВидСпецифика);
		Иначе
			ПолучитьОформленнуюСтроку(ОформлениеСтроки, 0, ВидСпецифика);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.Порядок=3 Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Синий;	
	КонецЕсли;	
КонецПроцедуры

// Получить оформленную строку
Процедура ПолучитьОформленнуюСтроку(ОформлениеСтроки, ВариантОформления = 0, ВидСпецифика = Ложь)
	
	Если НЕ ВидСпецифика Тогда
		ОформлениеСтроки.Шрифт		= ПараметрыНастройки.ПроизводствоСписокБлюдОформление[ВариантОформления].Шрифт;
	Иначе
		РазмерШрифтаСпецифики		= Окр(ПараметрыНастройки.ПроизводствоСписокБлюдОформление[ВариантОформления].Шрифт.Размер - (ПараметрыНастройки.ПроизводствоСписокБлюдОформление[ВариантОформления].Шрифт.Размер / 10), 2, 0);
		ОформлениеСтроки.Шрифт		= Новый Шрифт(ПараметрыНастройки.ПроизводствоСписокБлюдОформление[ВариантОформления].Шрифт, ,РазмерШрифтаСпецифики, Ложь);
	КонецЕсли;	
	ОформлениеСтроки.ЦветТекста	= ПараметрыНастройки.ПроизводствоСписокБлюдОформление[ВариантОформления].ЦветТекста;
	ОформлениеСтроки.ЦветФона	= ПараметрыНастройки.ПроизводствоСписокБлюдОформление[ВариантОформления].ЦветФона;
	
	// Оформление колонки подача
	Если ИспользоватьКурсы Тогда
		ОформлениеСтроки.Ячейки.Подача.ЦветФона	= Новый Цвет(128,0,128);	// бардовый
		ОформлениеСтроки.Ячейки.Подача.ЦветТекста = Новый Цвет(255,255,255);	// белый
	КонецЕсли; 
	
КонецПроцедуры

// Режим настройки редактирование оформления элемента
//
Процедура РежимНастройкиЕлементНажатие(ТекущийЭлемент)
	
	Если ТекущийЭлемент.Данные = "СоставМарки1" Тогда
		ТекущаяНастройкаСтрокиТаблицы = ПараметрыНастройки.ПроизводствоСписокБлюдОформление.Найти(ТекущийЭлемент.ТекущаяСтрока.Наименование, "Наименование");
		Если ТекущаяНастройкаСтрокиТаблицы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущаяНастройка	= ТекущаяНастройкаСтрокиТаблицы;
		СписокДляВыбора = СписокРедактированияТаблицы;
	Иначе
		ТекущаяНастройка	= ТекущийЭлемент;
		СписокДляВыбора = СписокРедактированияШапки;
	КонецЕсли;
	
	ВыбЗнач = ВыбратьИзМеню(СписокДляВыбора);
	Если ВыбЗнач = Неопределено Тогда
		Возврат;
	КонецЕсли; 	
	
	Если ВыбЗнач.Значение = "Шрифт" Тогда
		ДиалогВыбора = Новый ДиалогВыбораШрифта;
		ДиалогВыбора.Шрифт	= ТекущаяНастройка.Шрифт;
		Если ДиалогВыбора.Выбрать() Тогда 
			ТекущаяНастройка.Шрифт	= ДиалогВыбора.Шрифт; 
		КонецЕсли;
		
	ИначеЕсли ВыбЗнач.Значение = "ЦветТекста" Тогда
		ДиалогВыбора = Новый ДиалогВыбораЦвета;
		ДиалогВыбора.Цвет	= ТекущаяНастройка.ЦветТекста;
		Если ДиалогВыбора.Выбрать() Тогда 
			ТекущаяНастройка.ЦветТекста	= ДиалогВыбора.Цвет; 
		КонецЕсли;
		
	Иначе
		ДиалогВыбора = Новый ДиалогВыбораЦвета;
		ДиалогВыбора.Цвет	= ТекущаяНастройка.ЦветФона;
		Если ДиалогВыбора.Выбрать() Тогда 
			ТекущаяНастройка.ЦветФона	= ДиалогВыбора.Цвет; 
		КонецЕсли;
		
	КонецЕсли;
	
	ОчиститьВыделенныеСтроки();
	
КонецПроцедуры	

// Листать очередь
//
Процедура ПролистатьОчередь(Направление)
	
	// < КС_ВДВ ------------------------------------------------------------ 
	// заплатка; если нажать кнопку листания до показа марок
	Если ВсегоСтраниц = Неопределено Тогда
		Возврат; 
	КонецЕсли; 
	// КС_ВДВ > ------------------------------------------------------------ 
	
	ТекСтраница = Макс(1, Мин(ВсегоСтраниц, ТекСтраница + Направление) );
	
	ПоказатьМарки();
	
КонецПроцедуры

// Обновить очередь марок
//
Процедура ОбновитьОчередь()
	
	Если РежимВозврата Тогда
		ЗаполнитьТаблицуГотовых();
	Иначе
		ОбновитьОчередьМарок();
	КонецЕсли;
	
КонецПроцедуры	

// Добавляем одну марку для образца
//
Процедура ДобавитьОбразецВОчередьМарок(н = 1)
	
	Марка = ОчередьМарок.Добавить();
	Марка.Номер				= н;
	Марка.Автор				= "Иванов Иван Иванович";
	Марка.ПосадочноеМесто	= "Стол №1";
	Марка.Заказ				= Документы.Заказ.ПустаяСсылка();
	Марка.ВремяПоявления	= ТекущаяДатаНаСервере();
	Марка.Состав			= СоставМарки_.СкопироватьКолонки();
	
	СтрокаМарки = Марка.Состав.Добавить();
	СтрокаМарки.Подача				= 1;
	СтрокаМарки.Товар				= "";                          
	СтрокаМарки.Количество			= 3;
	СтрокаМарки.КоличествоУдалено	= 0;
	СтрокаМарки.Наименование		= "Время приготовления блюда в норме";
	СтрокаМарки.КодПодтверждения	= "";
	СтрокаМарки.ИдСтроки			= "";
	СтрокаМарки.ВремяЗаказано		= ТекущаяДатаНаСервере();
	СтрокаМарки.КонтрольноеВремя	= ТекущаяДатаНаСервере() + 600;
	СтрокаМарки.Статус				= Перечисления.СтатусыПозицийЗаказа.Заказано;
	СтрокаМарки.Сотрудник			= Справочники.Сотрудники.ПустаяСсылка();
	
	СтрокаМарки = Марка.Состав.Добавить();
	СтрокаМарки.Подача				= 1;
	СтрокаМарки.Товар				= "";                          
	СтрокаМарки.Количество			= 1;
	СтрокаМарки.КоличествоУдалено	= 0;
	СтрокаМарки.Наименование		= "Внимание время приготовления блюда заканчивается";
	СтрокаМарки.КодПодтверждения	= "";
	СтрокаМарки.ИдСтроки			= "";
	СтрокаМарки.ВремяЗаказано		= ТекущаяДатаНаСервере() - 480;
	СтрокаМарки.КонтрольноеВремя	= ТекущаяДатаНаСервере() + 120;
	СтрокаМарки.Статус				= Перечисления.СтатусыПозицийЗаказа.Заказано;
	СтрокаМарки.Сотрудник			= Справочники.Сотрудники.ПустаяСсылка();
	
	СтрокаМарки = Марка.Состав.Добавить();
	СтрокаМарки.Подача				= 1;
	СтрокаМарки.Товар				= "";                          
	СтрокаМарки.Количество			= 1;
	СтрокаМарки.КоличествоУдалено	= 0;
	СтрокаМарки.Наименование		= "Время приготовления блюда просрочено";
	СтрокаМарки.КодПодтверждения	= "";
	СтрокаМарки.ИдСтроки			= "";
	СтрокаМарки.ВремяЗаказано		= ТекущаяДатаНаСервере() - 601;
	СтрокаМарки.КонтрольноеВремя	= ТекущаяДатаНаСервере() - 1;
	СтрокаМарки.Статус				= Перечисления.СтатусыПозицийЗаказа.Заказано;
	СтрокаМарки.Сотрудник			= Справочники.Сотрудники.ПустаяСсылка();
	
	СтрокаМарки = Марка.Состав.Добавить();
	СтрокаМарки.Подача				= 2;
	СтрокаМарки.Товар				= "";                          
	СтрокаМарки.Количество			= 5;
	СтрокаМарки.КоличествоУдалено	= 2;
	СтрокаМарки.Наименование		= "Отмена приготовления блюда";
	СтрокаМарки.КодПодтверждения	= "";
	СтрокаМарки.ИдСтроки			= "";
	СтрокаМарки.ВремяЗаказано		= ТекущаяДатаНаСервере();
	СтрокаМарки.КонтрольноеВремя	= ТекущаяДатаНаСервере() + 600;
	СтрокаМарки.Статус				= Перечисления.СтатусыПозицийЗаказа.Удалено;
	СтрокаМарки.Сотрудник			= Справочники.Сотрудники.ПустаяСсылка();
	
	СтрокаМарки = Марка.Состав.Добавить();
	СтрокаМарки.Подача				= 2;
	СтрокаМарки.Товар				= "";                          
	СтрокаМарки.Количество			= 1;
	СтрокаМарки.КоличествоУдалено	= 0;
	СтрокаМарки.Наименование		= """Свободное"" блюдо";
	СтрокаМарки.КодПодтверждения	= "";
	СтрокаМарки.ИдСтроки			= "";
	СтрокаМарки.ВремяЗаказано		= ТекущаяДатаНаСервере();
	СтрокаМарки.КонтрольноеВремя	= ТекущаяДатаНаСервере() + 600;
	СтрокаМарки.Статус				= Перечисления.СтатусыПозицийЗаказа.Заказано;
	
	Для н = 2 По КолвоМарокНаЭкране Цикл
		
		Марка = ОчередьМарок.Добавить();
		ЗаполнитьЗначенияСвойств(Марка, ОчередьМарок[0]);
		Марка.Номер = н;
		
	КонецЦикла;
	
	ПоказатьМарки();
	
КонецПроцедуры	

// Сохранить измененные настройки
//
Процедура СохранитьНастройки()
	
	//Проставить параметры настройки из формы
	ПараметрыНастройки.НадписьАвторШрифтТекста						= ЭлементыФормы.тАвтор1.Шрифт;
	ПараметрыНастройки.НадписьАвторЦветТекста						= ЭлементыФормы.тАвтор1.ЦветТекста;
	ПараметрыНастройки.НадписьВремяШрифтТекста						= ЭлементыФормы.тТаймерОчереди1.Шрифт;
	ПараметрыНастройки.НадписьВремяЦветТекста						= ЭлементыФормы.тТаймерОчереди1.ЦветТекста;
	ПараметрыНастройки.НадписьЗаголовокОсновнойШрифтТекста			= ЭлементыФормы.тНаименованиеМарки1.Шрифт;
	ПараметрыНастройки.НадписьЗаголовокОсновнойЦветТекста			= ЭлементыФормы.тНаименованиеМарки1.ЦветТекста;
	ПараметрыНастройки.НадписьЗаголовокДополнительныйШрифтТекста	= ЭлементыФормы.тНаименованиеМаркиДоп1.Шрифт;
	ПараметрыНастройки.НадписьЗаголовокДополнительныйЦветТекста		= ЭлементыФормы.тНаименованиеМаркиДоп1.ЦветТекста;
	
КонецПроцедуры	

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ВыводЗаказаНаИнфоДисплей(СброситьНастройки = Ложь, СписокКодовПодтверждений = Неопределено) Экспорт
	
	// Отобразить изменения на ИнфоДисплее
	
	Если НЕ глПараметрыРМ.ИнфоДисплейЕсть Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЗаказОтбор) Тогда
		ОтключитьВыводНаИнфоДисплей(Истина);
		Возврат;
	КонецЕсли; 
	
	Если НЕ РежимВозврата Тогда
		ОтключитьВыводНаИнфоДисплей();
		Возврат;
	КонецЕсли; 
	
	Если НЕ ВыдачаЗаказаКлиенту Тогда
		Возврат;
	КонецЕсли;
	
	сзКодыПодтверждений = Новый СписокЗначений;
	
	Если СписокКодовПодтверждений <> Неопределено Тогда
		Если СписокКодовПодтверждений.Количество() > 0 Тогда
			сзКодыПодтверждений.ЗагрузитьЗначения(СписокКодовПодтверждений);
		КонецЕсли; 
	КонецЕсли; 
	
	ДопПараметрыИнфо.СброситьНастройки = СброситьНастройки;
	ДопПараметрыИнфо.СписокКодовПодтверждений = сзКодыПодтверждений;
	
	ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", ЗаказОтбор, Неопределено, Неопределено, ДопПараметрыИнфо);
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ОтключитьВыводНаИнфоДисплей(Принудительно=Ложь)
	
	Если Принудительно Тогда
		ВыдачаЗаказаКлиенту = Ложь;
	КонецЕсли; 
	
	ИнтерфейсРМ.ВыводНаИнфоДисплей("УбратьЗаказ");
	
КонецПроцедуры

// < КС_ВДВ ------------------------------------------------------------ 
// Возвращает строку. Если строку заполнена, то нужно переключиться в указанный режим.
// Также выполняется возврат пейджеров по заказам.
Функция ДействиеПослеВыдачи(РезультатВыдачи,ВыводитьПредупреждение=Истина, Ответ="Да")
	
	РежимПослеВыдачи = "";
	
	Если НЕ РезультатВыдачи.Выдача Тогда
		Возврат РежимПослеВыдачи; // ничего не было выдано
	КонецЕсли; 
	
	// *** Сначала определим, какой режим нужно установить после выдачи.
	
	НетМарокКВыдаче = НЕ ксТрактир.ПоЗаказуЕстьМаркиКВыдаче(РезультатВыдачи.Заказы, глРабочееМесто.Станция);
	
	РежимПослеВыдачи = ?(НетМарокКВыдаче, "РежимПриготовление", "");
	
	// *** Теперь можно снимать марки с учета и возвращать пейджер.
	
	ПроверкаЗаказов = ксТрактир.ПолностьюОбработан("Заказ", РезультатВыдачи.Заказы, глРабочееМесто.Станция);
	
	Если ПроверкаЗаказов.МассивОбработанных.Количество() > 0 Тогда
		// Заказ обработан - марки больше не нужны
		ксТрактир.СнятьМаркиСУчета("Заказ", ПроверкаЗаказов.МассивОбработанных, глРабочееМесто.Станция);
		
		// по обработанным заказам нужно сдать пейджеры
		ксТрактир.ВозвратПейджеровПоЗаказам(ПроверкаЗаказов.МассивОбработанных, глРабочееМесто.Станция,ВыводитьПредупреждение, Ответ);
	КонецЕсли; 
	
	Если НЕ ПроверкаЗаказов.ВсеОбработаны Тогда
		// Если не все заказы обработаны, то нужно проверить каждую марку
		ПроверкаМарок = ксТрактир.ПолностьюОбработан("НомерМарки", РезультатВыдачи.Марки, глРабочееМесто.Станция);
		
		Если ПроверкаМарок.МассивОбработанных.Количество() > 0 Тогда
			// Марка обработана и больше не нужна
			ксТрактир.СнятьМаркиСУчета("НомерМарки", ПроверкаМарок.МассивОбработанных, глРабочееМесто.Станция);
		КонецЕсли; 
	КонецЕсли;	
	
	Возврат РежимПослеВыдачи; 
	
КонецФункции // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ОформитьДиалог()
	
	Если РежимВозврата Тогда
		// Режим "МАРКИ К ВЫДАЧЕ"
		ЭлементыФормы.тЗаголовок			.Заголовок = "К ВЫДАЧЕ";
		ЭлементыФормы.КнопкаПереключитьРежим.Заголовок = "ПЕРЕКЛЮЧИТЬ РЕЖИМ"; //"МАРКИ ПРИГОТОВЛЕНИЕ";
	Иначе
		// Режим "МАРКИ ПРИГОТОВЛЕНИЕ"
		ЭлементыФормы.тЗаголовок			.Заголовок = "ПРИГОТОВЛЕНИЕ";
		ЭлементыФормы.КнопкаПереключитьРежим.Заголовок = "ПЕРЕКЛЮЧИТЬ РЕЖИМ"; //"МАРКИ К ВЫДАЧЕ";
	КонецЕсли;
	
		
	Если ПросроченныеОтбор Тогда
		ЭлементыФормы.КнопкаПросроченные.Картинка		= БиблиотекаКартинок.УстановитьВремя;
		ЭлементыФормы.КнопкаПросроченные.Заголовок		= "";
		ЭлементыФормы.КнопкаПросроченные.ЦветФонаКнопки	= ЦветаСтиля.ЦветФона5;
	Иначе	
		ЭлементыФормы.КнопкаПросроченные.Картинка		= Новый Картинка;
		ЭлементыФормы.КнопкаПросроченные.Заголовок		= "...";
		ЭлементыФормы.КнопкаПросроченные.ЦветФонаКнопки	= ЦветаСтиля.ЦветФонаГлавнойФормы;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ЗаказОтбор) Тогда
		ЭлементыФормы.КнопкаЗаказ.Заголовок 		= "Заказ №"+УбратьВсеБуквы(СокрЛП(ЗаказОтбор.Номер));
		ЭлементыФормы.КнопкаЗаказ.ЦветФонаКнопки	= ЦветаСтиля.ЦветФона5;
	Иначе	
		ЭлементыФормы.КнопкаЗаказ.Заголовок 		= "Заказ № ...";
		ЭлементыФормы.КнопкаЗаказ.ЦветФонаКнопки	= ЦветаСтиля.ЦветФонаГлавнойФормы;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтанцияОтбор) Тогда
		ЭлементыФормы.КнопкаСтанция.Заголовок 		= СокрЛП(СтанцияОтбор.Наименование);
		ЭлементыФормы.КнопкаСтанция.ЦветФонаКнопки	= ?(РежимПросмотра, ЦветаСтиля.ЦветФона5, ЦветаСтиля.ЦветФонаГлавнойФормы);
	Иначе	
		ЭлементыФормы.КнопкаСтанция.Заголовок 		= "Все станции";
		ЭлементыФормы.КнопкаСтанция.ЦветФонаКнопки	= ЦветаСтиля.ЦветФонаГлавнойФормы;
	КонецЕсли; 
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
// Обработчик работает только в режиме "Приготовление"
Процедура ВыполнятьПроверкуМарокКВыдаче(ПроверятьМарки)
	
	Если НЕ РежимПросмотра Тогда
		Если глПараметрыРМ.ПроизводствоПериодОпросаКВыдаче > 0 Тогда
			
			Если ПроверятьМарки Тогда
				Если НЕ ОбработчикПроверкиМарокПодключен Тогда
					//Сообщить("+++ подключен ПроверкаПросроченныхМарокКВыдаче");
					ПодключитьОбработчикОжидания("ПроверкаПросроченныхМарокКВыдаче", глПараметрыРМ.ПроизводствоПериодОпросаКВыдаче);		
					ОбработчикПроверкиМарокПодключен = Истина;
				КонецЕсли; 
			Иначе
				Если ОбработчикПроверкиМарокПодключен Тогда
					//Сообщить("--- подключен ПроверкаПросроченныхМарокКВыдаче");
					ОтключитьОбработчикОжидания("ПроверкаПросроченныхМарокКВыдаче");
					ОбработчикПроверкиМарокПодключен = Ложь;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура УстановитьРежим(ВыбРежимВозврата)
	
	РежимВозврата = ВыбРежимВозврата;
	
	ТекСтраница = 1;
	
	ОформитьДиалог();
	
	ОбновитьОчередь();
	
	ВыполнятьПроверкуМарокКВыдаче(НЕ РежимВозврата);
	
	ВыводЗаказаНаИнфоДисплей();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура УстановитьРежимПриготовление()
	
	УстановитьРежим(Ложь);
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура УстановитьРежимКВыдаче()
	
	УстановитьРежим(Истина);
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура УстановитьРежимВыдачиЗаказа(ВыбЗаказ)
	
	ЗаказОтбор = ВыбЗаказ;
	ВыдачаЗаказаКлиенту = Истина;
	
	УстановитьРежимКВыдаче();
	
	ВыводЗаказаНаИнфоДисплей(Истина);
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура УстановитьРежимПриготовленияЗаказа(ВыбЗаказ)
	
	ЗаказОтбор = ВыбЗаказ;
	
	УстановитьРежимПриготовление();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура УстановитьОтборПоЗаказу(ВыбЗаказ)
	
	ЗаказОтбор = ВыбЗаказ;
	
	ТекСтраница = 1;
	
	ОформитьДиалог();
	
	ОбновитьОчередь();
	
	ОтключитьВыводНаИнфоДисплей(Истина);
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура УстановитьОтборПоСтанции(ВыбСтанция)
	
	СтанцияОтбор = ВыбСтанция;
	
	ТекСтраница = 1;
	
	ОформитьДиалог();
	
	ОбновитьОчередь();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ВыборЗаказа()
	
	Если ЗначениеЗаполнено(ЗаказОтбор) Тогда
		// Сброс фильтра
		УстановитьОтборПоЗаказу(Неопределено);
		Возврат;
	КонецЕсли; 
	
	ВыбЗаказ = ксТрактир.НайтиЗаказКлиента();
	
	Если ВыбЗаказ <> Неопределено Тогда
		УстановитьОтборПоЗаказу( ВыбЗаказ );
	КонецЕсли;
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ВыборПросроченные()
	
	ПросроченныеОтбор = НЕ ПросроченныеОтбор;
	
	ОформитьДиалог();
	
	ОбновитьОчередь();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ВыборСтанции()
	
	Если ЗначениеЗаполнено(СтанцияОтбор) Тогда
		// Сброс фильтра
		УстановитьОтборПоСтанции(Неопределено);
		
		Возврат;
	КонецЕсли; 
	
	// Если попадут "лишние" станции, то не критично.
	// Может, лучше вообще давать выбор из всех станций, а не только по тем, где есть марки
	
	Запрос = Новый Запрос;
	
	Если РежимВозврата Тогда
		// Готовые
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказТоварыДопИнф.Станция КАК Станция
		|ИЗ
		|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
		|ГДЕ
		|	ЗаказТоварыДопИнф.ВремяГотово > &ДатаГотово
		|	И ЗаказТоварыДопИнф.Статус В(&Статус)
		|	И (ЗаказТоварыДопИнф.Количество > 0
		|			ИЛИ ЗаказТоварыДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПозицийЗаказа.Удалено))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказТоварыДопИнф.Станция
		|
		|УПОРЯДОЧИТЬ ПО
		|	Станция
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		// Параметры запроса
		Запрос.УстановитьПараметр("ДатаГотово"			, ТекущаяДатаНаСервере()-60*60*12); // отслеживаем марки за последние 12 часов
		Запрос.УстановитьПараметр("Статус"				, Перечисления.СтатусыПозицийЗаказа.Готово);
	Иначе
		// К приготовлению
		СписокСтатусов = Новый Массив;
		СписокСтатусов.Добавить(Перечисления.СтатусыПозицийЗаказа.Заказано);
		//СписокСтатусов.Добавить(Перечисления.СтатусыПозицийЗаказа.Удалено);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказТоварыДопИнф.Станция КАК Станция
		|ИЗ
		|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
		|ГДЕ
		|	ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1)
		|	И ЗаказТоварыДопИнф.ВремяЗаказано > &ДатаНачала
		|	И ЗаказТоварыДопИнф.Статус В(&Статус)
		|	И (ЗаказТоварыДопИнф.Количество > 0
		|			ИЛИ ЗаказТоварыДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПозицийЗаказа.Удалено))
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказТоварыДопИнф.Станция
		|
		|УПОРЯДОЧИТЬ ПО
		|	Станция
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		// Параметры запроса
		Запрос.УстановитьПараметр("ДатаНачала"			, ТекущаяДатаНаСервере()-60*60*12); // отслеживаем марки за последние 12 часов
		Запрос.УстановитьПараметр("Статус"				, СписокСтатусов);
	КонецЕсли; 
	
	МассивСтанций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Станция");
	//МассивСтанций.Вставить(0, "По Всем Станциям");
	
	ВыбСтанция = ИнтерфейсРМ.ВыборИзСписка( МассивСтанций, , , "Выбор станции", "Показать строки по станции:" );
	Если ВыбСтанция = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ВыбСтанция = ?(ТипЗнч(ВыбСтанция) = Тип("Строка"), Неопределено, ВыбСтанция);
	
	УстановитьОтборПоСтанции(ВыбСтанция);
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
// Открытие формы выбранного заказа
Процедура ОткрытьЗаказ(ВыбЗаказСсылка)
	
	Если ТипЗнч(ВыбЗаказСсылка) <> Тип("ДокументСсылка.Заказ") Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаЗаказ = ИнтерфейсРМ.ПолучитьОбъектОбработки("Заказ");
	ОбработкаЗаказ.Заказ = ВыбЗаказСсылка.ПолучитьОбъект();
	ОбработкаЗаказ.РежимМонитор = Истина; // признак открытия заказа из монитора марок
	
	Если НЕ ОбработкаЗаказ.ПрочитатьЗаказ() Тогда
		Возврат;
	КонецЕсли; 
	
	ОбработкаЗаказ.ОткрытьРабочуюФормуЗаказа();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ПринятьЗаказ()
	
	ВыбЗаказ = ксТрактир.НайтиЗаказКлиента();
	
	Если ВыбЗаказ <> Неопределено Тогда
		
		// Здесь лучше отключить отбор по заказу (и по просроченным), 
		// т.к. при возврате можно не увидеть новые марки из-за отборов.
		ПросроченныеОтбор 	= Ложь;
		УстановитьОтборПоЗаказу( Неопределено ); // отключаем через процедуру, чтобы обновился диалог формы и очередь марок
		
		ОткрытьЗаказ( ВыбЗаказ );
		
	КонецЕсли;
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ВыдатьЗаказ()
	
	ВыбЗаказ = ксТрактир.НайтиЗаказКлиента();
	
	Если ВыбЗаказ <> Неопределено Тогда
		
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ВыбЗаказ);
		
		Если ксТрактир.ПоЗаказуЕстьМаркиКВыдаче(МассивЗаказов, глРабочееМесто.Станция) Тогда
			УстановитьРежимВыдачиЗаказа( ВыбЗаказ );
			
		Иначе
			Текст1="Нет марок для выдачи!";
			Текст2="По текущему заказу нет марок для выдачи!";
			ИнтерфейсРМ.ВопросПредупреждение("Предупреждение",Текст1,Текст2,"","ОК","",,,,,ВыбЗаказ);	
			
			УстановитьРежимПриготовленияЗаказа( ВыбЗаказ );
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ВозвратПейджера()
	
	// Из монитора марок можно возвратить пейджеры только по станции рабочего места
	Результат = ксТрактир.ВыполнитьВозвратПейджера(, глРабочееМесто.Станция); 
	
	НужноОбновитьОчередь = Результат.Возвращен; // чтобы обновились пейджеры
	
	Если Результат.ЕстьНевыданные Тогда
		Если Результат.НеобработанныеЗаказы.Количество() > 0 Тогда
			
			ВыбЗаказ = Результат.НеобработанныеЗаказы[0];
			УстановитьРежимВыдачиЗаказа(ВыбЗаказ);
			
			НужноОбновитьОчередь = Ложь; // чтобы второй раз не обновлять очередь (ниже есть вызов ОбновитьОчередь())
		КонецЕсли; 
	КонецЕсли; 
	
	Если НужноОбновитьОчередь Тогда
		ОбновитьОчередь();
	КонецЕсли; 
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ВызовКлиента()
	
	ксТрактир.ВыполнитьВызовПейджера(глРабочееМесто.Станция);
	
	ОбновитьОчередь(); // чтобы обновились счетчики оповещений пейджеров
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ЗаполнитьПейджерыВОчередиМарок(ВыбФильтр)
	
	// Количество оповещений пейджераможно рассчитывать в целом на заказ или на марку.
	// В зависимости от того, как выводятся марки в мониторе, так и будем получать кол-во.
	ОбъектОповещений = ?(ВыбФильтр = "По маркам", "НомерМарки", "Заказ");
	
	ТабЗаказы = ОчередьМарок.Скопировать(,"Заказ");
	ТабЗаказы.Свернуть("Заказ", "");
	
	Если ТабЗаказы.Количество() > 0 Тогда
		ДеревоПейджеров = ксТрактир.ПолучитьПейджерыПоЗаказам(ОбъектОповещений, ТабЗаказы.ВыгрузитьКолонку("Заказ"), СтанцияОтбор);
		
		ЗаказыСПейджерами = ДеревоПейджеров.Строки;
		
		Для каждого Марка Из ОчередьМарок Цикл
			
			ПейджерыПоЗаказу = ЗаказыСПейджерами.Найти(Марка.Заказ);
			
			Если ПейджерыПоЗаказу <> Неопределено Тогда
				Марка.Пейджер = СписокПейджеров(Марка.Номер, ОбъектОповещений, ПейджерыПоЗаказу.Строки);	
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Функция СписокПейджеров(ОбъектМарки, ОбъектОповещений, СтрокиПейджеров)
	
	ПейджерыСтр = "";
	
	Если СтрокиПейджеров.Количество() = 0 Тогда
		Возврат ПейджерыСтр;	
	КонецЕсли; 
	
	Если ОбъектОповещений = "Заказ" Тогда
		
		Для каждого Строка Из СтрокиПейджеров Цикл
			ПейджерыСтр = ПейджерыСтр + ?(ПустаяСтрока(ПейджерыСтр), "", ", ") + "#"+СокрЛП(Строка.Пейджер) + 
			?(Строка.КоличествоОповещений = 0, "", " ("+Строка.КоличествоОповещений+")");
		КонецЦикла; 
		
	Иначе // ОбъектОповещений = "НомерМарки"
		
		// Номер марки появляется только тогда, когда марка готова к выдаче.
		ПараметрыОтбора = Новый Структура("НомерМарки", ОбъектМарки);
		СтрокиПейджерПоМарке = СтрокиПейджеров.НайтиСтроки(ПараметрыОтбора, Ложь);
		
		Если СтрокиПейджерПоМарке.Количество() > 0 Тогда
			
			Для К = 0 По СтрокиПейджерПоМарке.Количество() - 1 Цикл
				Строка = СтрокиПейджерПоМарке[К];
				
				ПейджерыСтр = ПейджерыСтр + ?(ПустаяСтрока(ПейджерыСтр), "", ", ") + "#"+СокрЛП(Строка.Пейджер) + 
				?(Строка.КоличествоОповещений = 0, "", " ("+Строка.КоличествоОповещений+")");
			КонецЦикла; 
			
		Иначе	
			
			// Выведем все уникальные пейджеры, но без кол-ва оповещений
			ТекПейджер = Неопределено;
			Для каждого Строка Из СтрокиПейджеров Цикл
				Если ТекПейджер <> Строка.Пейджер Тогда
					ПейджерыСтр = ПейджерыСтр + ?(ПустаяСтрока(ПейджерыСтр), "", ", ") + "#"+СокрЛП(Строка.Пейджер);
					ТекПейджер = Строка.Пейджер;
				КонецЕсли; 
			КонецЦикла; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ПейджерыСтр;
	
КонецФункции // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура ПроверкаПросроченныхМарокКВыдаче()
	
	Если ЭтаФорма.ВводДоступен() Тогда
		
		ксТрактир.ПроверкаПросроченныхМарокКВыдаче();	
		
	КонецЕсли; 
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//ДействияПередОткрытиемФормы(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	//ДействияПередЗакрытиемФормы(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ИнициализацияРеквизитов();
	
	// неизменяемые надписи
	// < КС_ВДВ ------------------------------------------------------------ 
	//ЭлементыФормы.тЗаголовок	.Заголовок = "Режим производства!";
	ЭлементыФормы.тЗаголовок	.Заголовок = "ПРИГОТОВЛЕНИЕ";
	// КС_ВДВ > ------------------------------------------------------------ 
	ЭлементыФормы.тПользователь	.Заголовок = глПользователь;
	
	// периодически обновляемые надписи
	ВыбФильтр = "По маркам";
	// < КС_ВДВ ------------------------------------------------------------ 
	//ЭлементыФормы.КнопкаПереключитьФильтр.Заголовок = "Группировка:
	ЭлементыФормы.КнопкаПереключитьФильтр.Заголовок = "ГРУППИРОВКА:
	// КС_ВДВ > ------------------------------------------------------------ 
	|"+ВыбФильтр;
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Если НЕ РежимПросмотра Тогда
		// Это РМ "Станция" - запрещено изменять фильтр по станции
		ЭлементыФормы.КнопкаСтанция.УстановитьДействие("Нажатие", Неопределено);	
	Иначе	
		// В режиме просмотра нельзя выполнять действия по производству
		//ЭлементыФормы.КнопкаПриемЗаказа.УстановитьДействие("Нажатие", Неопределено);
		//ЭлементыФормы.КнопкаВыдачаЗаказа.УстановитьДействие("Нажатие", Неопределено);
		//ЭлементыФормы.КнопкаВозвратПейджера.УстановитьДействие("Нажатие", Неопределено);
		
	КонецЕсли; 
	
	ОформитьДиалог();
	
	ВыполнятьПроверкуМарокКВыдаче(НЕ РежимВозврата);
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Если ПанельМарокЗаполнена Тогда
		ОбновитьОчередь();
	Иначе
		ПодключитьОбработчикОжидания("ЗаполнитьПанельМарокПриОткрытии", 0.5, Истина);
	КонецЕсли;
	ОбновитьТаймер();
	ПодключитьОбработчикОжидания("ОбновитьТаймер", 1);
	
	Если ЗначениеЗаполнено(ЗаказОтбор) Тогда
		УстановитьОтборПоЗаказу( ЗаказОтбор );
	КонецЕсли;
	
	Если НЕ РежимНастройки Тогда
		// вызов должен быть в конце обработчика
		ИнтерфейсРМ.ПриОткрытииОкна(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	// < КС_ВДВ ------------------------------------------------------------ 
	ОтключитьВыводНаИнфоДисплей(Истина);
	// КС_ВДВ > ------------------------------------------------------------ 
	
	Если РежимНастройки Тогда
		СохранитьНастройки();
	Иначе
		Оповестить("ЗакрытМониторМарок");
		ИнтерфейсРМ.ПриЗакрытииОкна();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	//ЭлементыФормы.КнопкаМесто.Доступность				= НЕ РежимНастройки И СписокГруппаПечати.Количество() > 1;
	ЭлементыФормы.ПанельЛистаниеСтраниц.Доступность		= НЕ РежимНастройки;	
	// < КС_ВДВ ------------------------------------------------------------
	ЭлементыФормы.КнопкаНастройки.Видимость			= РежимНастройки;
	
	ЭлементыФормы.КнопкаЗаказ.Доступность				= НЕ РежимНастройки;
	ЭлементыФормы.КнопкаСтанция.Доступность				= НЕ РежимНастройки;
	ЭлементыФормы.КнопкаПросроченные.Доступность		= НЕ РежимНастройки;
	// КС_ВДВ > ------------------------------------------------------------ 
	ЭлементыФормы.КнопкаПереключитьФильтр.Доступность	= НЕ РежимНастройки;
	ЭлементыФормы.КнопкаПереключитьРежим.Доступность	= НЕ РежимНастройки;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если БлокироватьПодтверждения Тогда
		Возврат;
	КонецЕсли;		
	
	Если ИмяСобытия = "ОбновитьСтатусыПозицийЗаказа" Тогда
		ОбновитьОчередь();
		
		// < КС_ВДВ ------------------------------------------------------------ 
	ИначеЕсли ИмяСобытия = "УстановитьРежимВыдачиЗаказа" Тогда
		//данное оповещение возникает при записи заказа, при наличии в нем "коротких" блюд
		//по согласованию с П.Караевой решили убрать фильтр по заказам, т.е. открываем список всех марок к выдаче
		
		//УстановитьРежимВыдачиЗаказа(Параметр.Заказ);	
		УстановитьРежимВыдачиЗаказа(Неопределено);
		// КС_ВДВ > ------------------------------------------------------------ 
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура СоставМарки1ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтрокиМарки(Элемент, ОформлениеСтроки, ДанныеСтроки);
КонецПроцедуры

Процедура КнопкаЛистатьВпередНажатие(Элемент)
	ПролистатьОчередь(1);
КонецПроцедуры

Процедура КнопкаЛистатьНазадНажатие(Элемент)
	ПролистатьОчередь(-1);
КонецПроцедуры

Процедура КнопкаПереключитьРежимНажатие(Элемент)
	
	// < КС_ВДВ ------------------------------------------------------------ 
	//РежимВозврата = НЕ РежимВозврата;
	//
	//ТекСтраница = 1;
	//
	//Если РежимВозврата Тогда
	//	ЭлементыФормы.тЗаголовок			.Заголовок = "Режим возврата в производство!";
	//	ЭлементыФормы.КнопкаПереключитьРежим.Заголовок = "Очередь марок";
	//Иначе
	//	ЭлементыФормы.тЗаголовок			.Заголовок = "Режим производства!";
	//	ЭлементыФормы.КнопкаПереключитьРежим.Заголовок = "Готовые заказы";
	//КонецЕсли;
	//
	//ОбновитьОчередь();
	
	УстановитьРежим(НЕ РежимВозврата);
	// КС_ВДВ > ------------------------------------------------------------ 
	
КонецПроцедуры

Процедура КнопкаМаркаНажатие(Элемент)
	
	// < КС_ВДВ ------------------------------------------------------------ 
	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли; 
	
	БлокироватьПодтверждения = Истина;
	
	// КС_ВДВ > ------------------------------------------------------------ 
	
	// < КС_ВДВ ------------------------------------------------------------ 
	//Если ВыбФильтр = "По маркам" Тогда
	Если Истина Тогда
		// КС_ВДВ > ------------------------------------------------------------ 
		ТабПолеМарки = ЭлементыФормы[СтрЗаменить(Элемент.Имя,"Кнопка","Состав")];
		ТабПолеМарки.ТекущаяСтрока = ТабПолеМарки.Значение[0];	
		ТекущийЭлемент = ТабПолеМарки;
		// < КС_ВДВ ------------------------------------------------------------ 
		//ОбработкаВыбораМарки(ТекущийЭлемент);
		ОбработкаВыбораМарки(ТекущийЭлемент, Истина);
		// КС_ВДВ > ------------------------------------------------------------ 
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаПустаяНажатие(Элемент)
	
	ТекущийЭлемент = ЭлементыФормы.КнопкаВыход;
	ЭлементыФормы.КнопкаПустая.Видимость = Ложь;
	
КонецПроцедуры

Процедура КнопкаПереключитьФильтрНажатие(Элемент)
	
	ТекВыбФильтр = ИнтерфейсРМ.ВыборИзСписка(СписокФильтров);
	
	Если ТекВыбФильтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбФильтр = ТекВыбФильтр;
	
	// < КС_ВДВ ------------------------------------------------------------ 
	//ЭлементыФормы.КнопкаПереключитьФильтр.Заголовок = "Группировка:
	ЭлементыФормы.КнопкаПереключитьФильтр.Заголовок = "ГРУППИРОВКА:
	// КС_ВДВ > ------------------------------------------------------------ 
	|"+ВыбФильтр;
	
	ОбновитьОчередь();
	
КонецПроцедуры

Процедура КнопкаМестоНажатие(Элемент)
	
	ВыборИзСписка = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборИзСписка");
	ВыборИзСписка.МассивВыбора			= СписокГруппаПечати;
	ВыборИзСписка.МножественныйПодбор	= Ложь;
	ФормаВыбора = ВыборИзСписка.ПолучитьФорму( "Кнопки0" );
	ТекВыбФильтр = ФормаВыбора.ОткрытьМодально();
	
	Если ТекВыбФильтр = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекВыбФильтр = "[Все доступные]" Тогда
		ГруппаПечати =МестоПроизводстваСписок;
		ЭлементыФормы.КнопкаМесто.Заголовок	= "Группа печати: [Все доступные]";
		ПрименитьВыбраннуюНастройку();
	Иначе	
		ТекСписок = Новый СписокЗначений;
		ТекСписок.Добавить(ТекВыбФильтр);
		ГруппаПечати = ТекСписок;
		ЭлементыФормы.КнопкаМесто.Заголовок	= "Группа печати: " + ГруппаПечати;
		
		ТекВыбНастройки = глПараметрыРМ.МестоПроизводстваТаблица.Найти(ТекВыбФильтр, "МестоПроизводства");
		
		ПрименитьВыбраннуюНастройку(ТекВыбНастройки.ВариантНастройки);
		
	КонецЕсли;
	
	ОбновитьОчередь();	
	
КонецПроцедуры

Процедура КнопкаНастройкиНажатие(Элемент)
	
	ТекВыбНастройки = ИнтерфейсРМ.ВыборИзСписка(глПараметрыРМ.НастройкиМонитораМарокСписок);
	
	Если ТекВыбНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрименитьВыбраннуюНастройку(ТекВыбНастройки);
	
	ОбновитьОчередь();
	
КонецПроцедуры

Процедура ПрименитьВыбраннуюНастройку(ТекВыбНастройки = Неопределено)
	
	Если ТекВыбНастройки = Неопределено Тогда
		ТекВыбНастройки = глПараметрыРМ.НастройкиМонитораМарокСписок[0].Значение;
	КонецЕсли;	
	
	Попытка
		ПараметрыНастройки = ТекВыбНастройки.ПолучитьОбъект().ПолучитьСтруктуруПараметров();
	Исключение
		Возврат;
	КонецПопытки;
	
	КолвоМарокНаЭкране	= ПараметрыНастройки.КоличествоМарокПоГоризонтали * ПараметрыНастройки.КоличествоМарокПоВертикали;
	
	ВремяГотовностиВнимание = ПараметрыНастройки.ВремяГотовностиВнимание / 100;
	
	ЗаполнитьПанельМарок();
	
КонецПроцедуры	

Процедура СоставМарки_Выбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	РежимНастройкиЕлементНажатие(Элемент);
	
	// Вставить содержимое обработчика.
КонецПроцедуры

// < КС_ВДВ ------------------------------------------------------------ 
Процедура КнопкаПриемЗаказаНажатие(Элемент)
	
	ПринятьЗаказ();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура КнопкаВозвратПейджераНажатие(Элемент)
	
	ВозвратПейджера();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура КнопкаСтанцияНажатие(Элемент)
	
	ВыборСтанции();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура КнопкаЗаказНажатие(Элемент)
	
	ВыборЗаказа();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура КнопкаПросроченныеНажатие(Элемент)
	
	ВыборПросроченные();
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

// < КС_ВДВ ------------------------------------------------------------ 
Процедура КнопкаВыдачаЗаказаНажатие(Элемент)
	
	ВыдатьЗаказ();	
	
КонецПроцедуры // КС_ВДВ > ------------------------------------------------------------ 

////////////////////////////////////////////////////////////////////////////////

Функция ЗаказОплачен(Заказ)

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПротоколРасчетов.Заказ
	                      |ИЗ
	                      |	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	                      |ГДЕ
	                      |	ПротоколРасчетов.Заказ = &Заказ");	
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции 
 

Функция ПолучитьСписокПейджеров(СписокКодовПодтверждений, Станция, ЕстьОплаченные = Ложь, ЕстьДругие = Ложь)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.НомерМарки,
	|	ЗаказТоварыДопИнф.Заказ,
	|	ЗаказТоварыДопИнф.Станция,
	|	ВЫБОР
	|		КОГДА ЗаказДопИнф.ПротоколРасчетов = ЗНАЧЕНИЕ(Документ.ПРотоколРАсчетов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Оплачен
	|ПОМЕСТИТЬ ВТМарки
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|		ПО ЗаказТоварыДопИнф.Заказ = ЗаказДопИнф.Заказ
	|ГДЕ
	|	ЗаказТоварыДопИнф.ВремяЗаказано > &ДатаНачала
	|	И ЗаказТоварыДопИнф.КодПодтверждения В(&КодПодтверждения)
	|	И ЗаказТоварыДопИнф.Станция = &Станция
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказТоварыДопИнф.НомерМарки,
	|	ЗаказТоварыДопИнф.Заказ,
	|	ЗаказТоварыДопИнф.Станция,
	|	ВЫБОР
	|		КОГДА ЗаказДопИнф.ПротоколРасчетов = ЗНАЧЕНИЕ(Документ.ПРотоколРАсчетов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТМарки.НомерМарки,
	|	ВТМарки.Заказ,
	|	ВыданныеПейджеры.Пейджер,
	|	МАКСИМУМ(ВТМарки.Оплачен) КАК Оплачен,
	|	ВЫБОР
	|		КОГДА ДругиеМаркиПриготовление.Заказ ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьДругиеМарки
	|ИЗ
	|	ВТМарки КАК ВТМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЗаказТоварыДопИнф.Заказ КАК Заказ,
	|			ЗаказТоварыДопИнф.НомерМарки КАК НомерМарки
	|		ИЗ
	|			РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|		ГДЕ
	|			ЗаказТоварыДопИнф.ВремяГотово = ДАТАВРЕМЯ(1, 1, 1)
	|			И ЗаказТоварыДопИнф.ВремяЗаказано > &ДатаНачала
	|			И ЗаказТоварыДопИнф.Количество > 0
	|			И ЗаказТоварыДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПозицийЗаказа.Заказано)
	|			И ЗаказТоварыДопИнф.НомерМарки В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТМарки.НомерМарки
	|					ИЗ
	|						ВТМарки КАК ВТМарки)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЗаказТоварыДопИнф.НомерМарки,
	|			ЗаказТоварыДопИнф.Заказ) КАК НеготовыеМарки
	|		ПО ВТМарки.Заказ = НеготовыеМарки.Заказ
	|			И ВТМарки.НомерМарки = НеготовыеМарки.НомерМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|		ПО ВТМарки.Заказ = ВыданныеПейджеры.Заказ
	|			И ВТМарки.Станция = ВыданныеПейджеры.Станция
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВТМарки.Заказ КАК Заказ
	|		ИЗ
	|			ВТМарки КАК ВТМарки
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Марки КАК Марки
	|					ПО Марки.НомерМарки = ЗаказТоварыДопИнф.НомерМарки
	|				ПО ВТМарки.Заказ = ЗаказТоварыДопИнф.Заказ
	|		ГДЕ
	|			НЕ ЗаказТоварыДопИнф.КодПодтверждения В (&КодПодтверждения)
	|			И НЕ Марки.КВыдаче
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВТМарки.Заказ) КАК ДругиеМаркиПриготовление
	|		ПО ВТМарки.Заказ = ДругиеМаркиПриготовление.Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТМарки.НомерМарки,
	|	ВТМарки.Заказ,
	|	ВыданныеПейджеры.Пейджер,
	|	ВЫБОР
	|		КОГДА ДругиеМаркиПриготовление.Заказ ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДатаНачала",			ТекущаяДатаНаСервере()-60*60*12); // за последние 12 часов
	Запрос.УстановитьПараметр("КодПодтверждения",	СписокКодовПодтверждений);
	Запрос.УстановитьПараметр("Станция",			Станция);
	
	тзМаркиКВыдаче = Запрос.Выполнить().Выгрузить();
	
	Если тзМаркиКВыдаче.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли; 
	
	тзПейджеры = тзМаркиКВыдаче.Скопировать( ,"Пейджер,Оплачен,ЕстьДругиеМарки");	
	тзПейджеры.Свернуть("Пейджер,Оплачен,ЕстьДругиеМарки", "");
	СтрПейджеры = "";
	Для Каждого Строка Из тзПейджеры Цикл
		Если ЗначениеЗаполнено(Строка.Пейджер) Тогда
			СтрПейджеры = СтрПейджеры + ?(ПустаяСтрока(СтрПейджеры), "", ", ") + СокрЛП(Строка.Пейджер.Наименование);
			ЕстьОплаченные = ЕстьОплаченные ИЛИ Строка.Оплачен;
			ЕстьДругие = ЕстьДругие ИЛИ Строка.ЕстьДругиеМарки;
		КонецЕсли; 
		
	КонецЦикла; 
	Возврат СтрПейджеры;	
КонецФункции	

Функция ПолучитьСписокЗаказов(СписокКодовПодтверждений,Станция)
	
	МассивЗаказов = Новый Массив;
	МассивПейджеров = Новый Массив;
	//МассивМарок0  = Новый Массив;
	
	РезультатВыдачи = Новый Структура("Выдача, Заказы, Пейджеры", Ложь, МассивЗаказов, МассивПейджеров);
	
	Если СписокКодовПодтверждений.Количество() = 0 Тогда
		Возврат РезультатВыдачи;
	КонецЕсли; 
	
	// Для Защита.ПодтверждениеВыдачи нужны ИдСтроки, в т.ч. и для специфик!
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.ИдСтроки,
	|	ЗаказТоварыДопИнф.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ЗаказТоварыДопИнф.Товар ССЫЛКА Справочник.Товары
	|			ТОГДА ЗаказТоварыДопИнф.Товар.ВремяПриготовления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВремяПриготовления,
	|	ЗаказТоварыДопИнф.НомерМарки КАК НомерМарки
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.КодПодтверждения В(&КодПодтверждения)
	//|	И ЗаказТоварыДопИнф.ВремяГотово > &ДатаГотово
	//|	И ЗаказТоварыДопИнф.Статус = &Статус
	|ИТОГИ
	|	МАКСИМУМ(ВремяПриготовления)
	|ПО
	|	Заказ,
	|	НомерМарки";
	
	Запрос.УстановитьПараметр("КодПодтверждения", СписокКодовПодтверждений);
	Запрос.УстановитьПараметр("Статус"			, Перечисления.СтатусыПозицийЗаказа.Готово);
	Запрос.УстановитьПараметр("ДатаГотово"		, ТекущаяДатаНаСервере()-60*60*12); // за последние 12 часов; как в мониторе марок
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат РезультатВыдачи;
	КонецЕсли; 
	
	НормативныйПериодПриготовленияСек	= Константы.НормативныйПериодПриготовленияСек.Получить();
	
	ВыборкаЗаказы = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказы.Следующий() Цикл
		
		МассивЗаказов.Добавить(ВыборкаЗаказы.Заказ);
	КонецЦикла; 
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВыданныеПейджеры.Пейджер КАК Пейджер,
	|	ВыданныеПейджеры.Пейджер.Наименование КАК НомерПейджера
	|ИЗ
	|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры
	|ГДЕ
	|	ВыданныеПейджеры.Заказ В(&Заказы)
	|	И ВыданныеПейджеры.Станция = &Станция
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыданныеПейджеры.Пейджер,
	|	ВыданныеПейджеры.Пейджер.Наименование";
	
	Запрос.УстановитьПараметр("Заказы", МассивЗаказов);
	Запрос.УстановитьПараметр("Станция", Станция);
	Выборка = Запрос.Выполнить().Выбрать();
	
	
	Пока Выборка.Следующий() Цикл
		МассивПейджеров.Добавить(Выборка.Пейджер);
	КонецЦикла;
	РезультатВыдачи.Выдача = Истина;
	РезультатВыдачи.Заказы = МассивЗаказов;
	РезультатВыдачи.Пейджеры  = МассивПейджеров;
	
	Возврат РезультатВыдачи; 
	
КонецФункции

Функция ПолностьюОбработан(ИмяПараметра, МассивЗначений, Станция=Неопределено,СписокКодовПодтверждений)

	РезультатПроверки = Новый Структура("ВсеОбработаны, МассивОбработанных", Истина, Новый Массив);
	
	Если МассивЗначений.Количество() = 0 Тогда
		Возврат РезультатПроверки;
	КонецЕсли; 
	
	МассивОбработанных = РезультатПроверки.МассивОбработанных;
	
	Для К = 0 По МассивЗначений.Количество() - 1 Цикл
		МассивОбработанных.Добавить(МассивЗначений[К]);
	КонецЦикла; 
	
	// Проверим, что по указанным маркам НЕТ позиций заказа со статусом "Дозаказ", "Заказано" и "Готово".
	// Если результат запроса не пустой, значит, ещё есть позиции "в работе".
	
	// ЗаказТоварыДопИнф.Количество > 0 - чтобы не мешали подтвержденные удаленные строки
	// У специфик тоже Количество=0, но они должны выдаваться одновременно с товарами.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказТоварыДопИнф.НомерМарки КАК ИмяПараметра
	|ИЗ
	|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
	|ГДЕ
	|	ЗаказТоварыДопИнф.ВремяЗаказано > &ДатаОтсчета
	|	И НЕ ЗаказТоварыДопИнф.КодПодтверждения В (&КодПодтверждения)
	|	И ЗаказТоварыДопИнф.НомерМарки В(&МассивЗначений)
	|	И ЗаказТоварыДопИнф.Количество > 0
	|	И ЗаказТоварыДопИнф.Статус В(&СтатусыВРаботе)
	|"+?(ЗначениеЗаполнено(Станция), "
	|	И ЗаказТоварыДопИнф.Станция = &Станция", "") + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказТоварыДопИнф.НомерМарки";

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "НомерМарки", ИмяПараметра);
	
	СтатусыВРаботе = Новый Массив;
	СтатусыВРаботе.Добавить(Перечисления.СтатусыПозицийЗаказа.Дозаказ);
	СтатусыВРаботе.Добавить(Перечисления.СтатусыПозицийЗаказа.Заказано);
	СтатусыВРаботе.Добавить(Перечисления.СтатусыПозицийЗаказа.Готово);
	
	Запрос.УстановитьПараметр("МассивЗначений",	МассивЗначений);
	Запрос.УстановитьПараметр("Станция",		Станция);
	Запрос.УстановитьПараметр("СтатусыВРаботе",	СтатусыВРаботе);
	Запрос.УстановитьПараметр("ДатаОтсчета",	ТекущаяДатаНаСервере()-60*60*12); // за последние 12 часов
	Запрос.УстановитьПараметр("КодПодтверждения",		СписокКодовПодтверждений);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
	    Возврат РезультатПроверки; // Все обработаны, т.к. нет строк со статусами "в работе"
	КонецЕсли; 
	
	РезультатПроверки.ВсеОбработаны = Ложь;
	
	// Удалим из МассивОбработанных необработанные учетные объекты
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Инд = МассивОбработанных.Найти(Выборка.ИмяПараметра);	
		
		Если Инд <> Неопределено Тогда
			МассивОбработанных.Удалить(Инд);	
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат РезультатПроверки;
	
КонецФункции

ЭлементыФормы.НадписьВсегоДокументов.Видимость = Ложь;
ЭлементыФормы.НадписьВсегоДокументов.Ширина = 2;
ПанельМарокЗаполнена = Ложь;