#Если НЕ ТонкийКлиент Тогда

#Область ОписаниеПеременных

&НаКлиенте
Перем Заказ;
&НаКлиенте
Перем Товары, Специфики;
&НаКлиенте
Перем ПротоколРасчетов;
&НаКлиенте
Перем ККМ, Обработка_ККМ;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "Email,НомерТелефона,ТипЧекаЛояльность,СпособПолученияЧека,ВариантОплаты,НадписьКартаЛОЛ,ЗаказСсылка,НомерКартыЛояльности,ЗаказСсылка,РабочееМесто,ДанныеЛояльности");
	
	Для каждого ТекСтрока Из Параметры.МестаРеализации Цикл
		ЗаполнитьЗначенияСвойств(МестаРеализации.Добавить(), ТекСтрока);
	КонецЦикла;
	////ВывестиИнформациюПоМестамРеализации();
	
	флОплатаВПроцессе = Истина;
	
	ОбновитьОтображениеСостоянияОплаты(РабочееМесто.МестоРеализации);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Страница_5_1;
	
	ОбновитьОтображениеЭлементовДляМестаРеализации(РабочееМесто.МестоРеализации);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеЭлементовДляМестаРеализации(МестоРеализации)
	
	// блок Кухни Полли
	Если МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		
		ВывестиИнформациюПоМестамРеализации();
		
		Элементы.ЛогоККГурмэ.Картинка = БиблиотекаКартинок.ЛогоКухняПолли;
//УДАЛИТЬ		Элементы.ЛогоККГурмэ.Ширина = 0;
//УДАЛИТЬ		Элементы.ЛогоККГурмэ.Высота = 0;
//УДАЛИТЬ		Элементы.ЛогоККГурмэ.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		
		Элементы.ЛогоККГурмэ1.Картинка = БиблиотекаКартинок.ЛогоКухняПолли;

		Элементы.СтрокаСостояния.Видимость = Ложь;
		Элементы.ГруппаСтрокаСостояния.Видимость = Истина;
		
		Элементы.НадписьСостояниеОплаты.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
		Элементы.НадписьСостояниеОплаты.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
	
//УДАЛИТЬ		Элементы.НадписьКартаЛОЛ.Видимость = Ложь;
		
	КонецЕсли;
	
	// блок Классного магазина
	Если МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.КМ") Тогда
		
		// шапка
//УДАЛИТЬ		Элементы.ЛогоККГурмэ.Ширина = 19;
//УДАЛИТЬ		Элементы.ЛогоККГурмэ.Высота = 2;
//УДАЛИТЬ		Элементы.ЛогоККГурмэ.РазмерКартинки = РазмерКартинки.Растянуть;
		
		Элементы.СтрокаСостояния.Видимость = Ложь;
		Элементы.ГруппаСтрокаСостояния.Видимость = Истина;
		
//УДАЛИТЬ		Элементы.Назад.ЦветФона = WebЦвета.СеребристоСерый;
//УДАЛИТЬ		Элементы.Назад.ЦветРамки = WebЦвета.СеребристоСерый;
//УДАЛИТЬ		Элементы.Назад.ЦветТекста = ЦветаСтиля.ЦветФонаФормы;
//УДАЛИТЬ		Элементы.Назад.Картинка = БиблиотекаКартинок.СтрелкаВлевоУголок;
//УДАЛИТЬ		Элементы.Назад.Высота = 1;
//УДАЛИТЬ		Элементы.Назад.Заголовок = "НАЗАД";
		
		Элементы.НадписьСостояниеОплаты.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
		Элементы.НадписьСостояниеОплаты.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Низ;
	
//УДАЛИТЬ		Элементы.НадписьКартаЛОЛ.Видимость = Ложь;
		
	КонецЕсли; 
	
	// блок МОКП
	
	
	// блок Общий
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнформациюПоМестамРеализации()
	
	глСимволРубля = Символ(8381);
	ГруппаРодитель = Элементы.ГруппаСтрокиМР;
	
	Для каждого ТекСтрока Из МестаРеализации Цикл
		
		ИД = СокрЛП(ТекСтрока.Фирма.Код);

		НоваяГруппаСтрока = Элементы.Добавить("МР_Строка" + ИД, Тип("ГруппаФормы"), ГруппаРодитель);
		НоваяГруппаСтрока.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппаСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		НоваяГруппаСтрока.Отображение = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппаСтрока.РастягиватьПоГоризонтали = Истина;
		
		// картинка
		НовыйЭлемент = Элементы.Добавить("МР_Картинка" + ИД, Тип("ДекорацияФормы"), НоваяГруппаСтрока);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
		НовыйЭлемент.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
		НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		
		// надпись МР
		НовыйЭлемент = Элементы.Добавить("МР_Текст" + ИД, Тип("ДекорацияФормы"), НоваяГруппаСтрока);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		НовыйЭлемент.Шрифт = Новый Шрифт("Segoe UI", 16);
		НовыйЭлемент.Заголовок = "Оплата заказа " + ТекСтрока.Фирма;
		
		// надпись сумма
		НовыйЭлемент = Элементы.Добавить("МР_Сумма" + ИД, Тип("ДекорацияФормы"), НоваяГруппаСтрока);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
		НовыйЭлемент.Шрифт = Новый Шрифт("Segoe UI", 16);
		Если ТекСтрока.КОплате = 0 Тогда
			НовыйЭлемент.Заголовок = "";
		Иначе
			НовыйЭлемент.Заголовок = Формат(ТекСтрока.КОплате, "ЧДЦ=2") + " " + глСимволРубля;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеСостоянияОплаты(МестоРеализации)
	
	Если флОплатаВПроцессе Тогда
		
		флОплатаВПроцессе = Ложь;
		
		МассивСтрок = Новый Массив;
		Для каждого ТекСтрока Из МестаРеализации Цикл
			
			ИД = СокрЛП(ТекСтрока.Фирма.Код);
			
			Если МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
				Если ТекСтрока.Фискализирован Тогда                      // ТекСтрока.КОплате = 0 ИЛИ 
					МассивСтрок.Добавить("Оплата заказа " + ТекСтрока.Фирма + " завершена." + Символы.ПС);
					Элементы["МР_Картинка" + ИД].Картинка = БиблиотекаКартинок.CheckMark48;
				Иначе	
					МассивСтрок.Добавить(БиблиотекаКартинок.ДлительнаяОперация48);
					МассивСтрок.Добавить("Ожидается оплата заказа " + ТекСтрока.Фирма + "...");
					флОплатаВПроцессе = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.КМ") Тогда
				ФирмаКратко = Лев(СокрЛП(ТекСтрока.Фирма), 7);
				СуммаСтрокой = Формат(ТекСтрока.КОплате, "ЧДЦ=2; ЧГ=3,0") + " " + Символ(8381);
				Если ТекСтрока.Фискализирован Тогда                      // ТекСтрока.КОплате = 0 ИЛИ 
					МассивСтрок.Добавить(БиблиотекаКартинок.CheckMark48);
					МассивСтрок.Добавить(СтрШаблон("Оплачен заказ %1 (%2)", ФирмаКратко, СуммаСтрокой) + Символы.ПС);
				ИначеЕсли ТекСтрока.ККМ.Пустая() Тогда
					МассивСтрок.Добавить(БиблиотекаКартинок.Внимание48);
					МассивСтрок.Добавить(СтрШаблон("Не забудьте оплатить заказ %1:  %2", ФирмаКратко, СуммаСтрокой) + Символы.ПС);
				Иначе
					МассивСтрок.Добавить(БиблиотекаКартинок.ДлительнаяОперация48);
					МассивСтрок.Добавить(СтрШаблон("Ожидается оплата заказа %1      %2.", ФирмаКратко, СуммаСтрокой) + Символы.ПС);
					флОплатаВПроцессе = Истина;
					//Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		НадписьСостояниеОплаты = Новый ФорматированнаяСтрока(МассивСтрок);
		
	КонецЕсли;
	
	Если МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.КМ") Тогда
		Элементы.Далее.Видимость = Ложь;
	ИначеЕсли МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда	
		Элементы.Далее.Видимость = НЕ флОплатаВПроцессе;
	КонецЕсли;
	
	Элементы.ГруппаИнструкции.Видимость = флОплатаВПроцессе;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	глОтключитьОбработчикОжидания("глАвтоблокировка");
	глФлагЗапретБлокировки = Истина;
	
	ПодключитьОбработчикОжидания("ОжиданиеНачалоОплаты", 2, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжиданиеНачалоОплаты()
	
	Если Открыта() Тогда
		
		ОтключитьОбработчикОжидания("ОжиданиеНачалоОплаты");
		
		Для каждого ТекСтрока Из МестаРеализации Цикл
			
			Если НЕ ТекСтрока.Фискализирован 
				И НЕ ТекСтрока.ККМ.Пустая() Тогда
				
				РезультатОплаты = ОплатаПоМестуРеализации(ТекСтрока.Фирма, ТекСтрока.КОплате);

				Если РезультатОплаты.Ошибка = 0 Тогда
					ТекСтрока.Фискализирован = Истина;
				ИначеЕсли Открыта() Тогда
					Закрыть(РезультатОплаты);
				Иначе
					глФлагЗапретБлокировки = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьОтображениеСостоянияОплаты(РабочееМесто.МестоРеализации);
			
		КонецЦикла;
		
		Если НЕ флОплатаВПроцессе Тогда
			СекундОжидать = 2;
			Если РабочееМесто.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.КМ") Тогда
				СекундОжидать = 0.1;
			КонецЕсли;
			ПодключитьОбработчикОжидания("ЗавершитьОплату", СекундОжидать, Истина);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	глФлагЗапретБлокировки = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ГлавнаяФормаАК_СбросЗаказаСоСтандартнойКассы" Тогда
		Если (Параметр = глРабочееМесто ИЛИ СокрЛП(Параметр) = СокрЛП(глРабочееМесто.ПрофильВхода)) 
			И Открыта() И НЕ флОплатаВПроцессе = Истина Тогда
			Закрыть(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаТовары
//Код процедур и функций
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	//TODO остановка обработки оплаты
	
	Если флОплатаВПроцессе Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Страница_5_2;
	Иначе
		Закрыть(СтруктураРезультата());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	// кнопка доступна только когда все прошло гладко
	ЗарегистрироватьСобытие("Автокасса.Нажатие кнопки", ПредопределенноеЗначение("УровеньЖурналаРегистрации.Информация"), , "Форма=" + ИмяФормы, "Кнопка=" + ТекущийЭлемент.Заголовок);
	ЗавершитьОплату();
	
КонецПроцедуры

&НаКлиенте
Процедура Выход(Команда)
	
	ЗарегистрироватьСобытие("Автокасса.Нажатие кнопки", ПредопределенноеЗначение("УровеньЖурналаРегистрации.Информация"), , "Форма=" + ИмяФормы, "Кнопка=" + ТекущийЭлемент.Заголовок);
	Закрыть(СтруктураРезультата(-1));
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОплату(Команда)
	
	ЗарегистрироватьСобытие("Автокасса.Нажатие кнопки", ПредопределенноеЗначение("УровеньЖурналаРегистрации.Информация"), , "Форма=" + ИмяФормы, "Кнопка=" + ТекущийЭлемент.Заголовок);
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Страница_5_2;
	ПодключитьОбработчикОжидания("ОжиданиеНачалоОплаты", 3.5, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОплату()
	Закрыть(СтруктураРезультата());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ОплатаПоМестуРеализации(Фирма, КОплате)
	
	Попытка
		
		Если глПараметрыРМ.РежимТестированияПередЗапуском Тогда
			Возврат СтруктураРезультата();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ИнтерфейсРМ.ТекущаяСмена(Фирма.МестоРеализации)) Тогда
			Возврат СтруктураРезультата(-1, "Смена не открыта", "Обратитесь к продавцу-консультанту.", "НачальноеОкно");
		КонецЕсли;
		
		Заказ = ЗаказСсылка.ПолучитьОбъект();
		Заказ.ТипЧекаЛояльность = ТипЧекаЛояльность;
		Товары = Заказ.Товары;
		Специфики = Заказ.Специфики;
		
		ИнициализацияККМ(Фирма);
		
		ПротоколСсылка = ПоследнийПротокол(Фирма);
		Если ПротоколСсылка.Пустая() Тогда
			// работать будет эта ветка
			ОбработкаОплаты_ИнициализироватьПротокол(Фирма, КОплате);
		Иначе
			ПротоколРасчетов = ПротоколСсылка.ПолучитьОбъект();
			ПротоколРасчетов.Заблокировать();
		КонецЕсли;
		
		ОбработкаОплаты_ОткрытьЧек();
		
		// Сохраняем состояние заказа (ДокументОбъект.Заказ) на момент до применения лояльности	
		ЗаказXDTO = СериализаторXDTO.ЗаписатьXDTO(Заказ);
		
		Попытка
			РезультатОплаты = ОбработкаОплаты_Оплата(Фирма, КОплате);
		Исключение
			РезультатОплаты = Неопределено;
			ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗарегистрироватьСобытие("Заказ.Ошибка в процессе оплаты", УровеньЖурналаРегистрации.Ошибка, , ЗаказСсылка, ПодробноеПредставлениеОшибки);
		КонецПопытки;
		ЗарегистрироватьСобытие("Получен результат оплаты", УровеньЖурналаРегистрации.Информация, Метаданные.Документы.Заказ, ЗаказСсылка, "РезультатОплаты = " + ЗначениеВСтрокуВнутр(РезультатОплаты));
		Если РезультатОплаты = Неопределено Тогда // Закрыли по Esc или крестик в окне оплаты
			Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
			ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
			Возврат СтруктураРезультата(-1, "Отмена оплаты", , "НачальноеОкно");
		ИначеЕсли РезультатОплаты.Успех Тогда
			//Если НЕ Заказ.ВерсияДанных = ЗаказСсылка.ВерсияДанных Тогда
			//	// заказ перезаписан лояльностью
			//	Заказ = ЗаказСсылка.ПолучитьОбъект();
			//КонецЕсли;
			ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
			Если Не глПараметрыРМ.Свойство("НомерТекущегоЧека") Тогда
				глПараметрыРМ.Вставить("НомерТекущегоЧека", 9999);
			КонецЕсли; 
			Возврат СтруктураРезультата(0);
		ИначеЕсли РезультатОплаты.Неудача Тогда
			Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
			ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
			Возврат СтруктураРезультата(-1, "Оплата не удалась", "Обратитесь к продавцу-консультанту", "НачальноеОкно");
		ИначеЕсли РезультатОплаты.Отмена Тогда
			ЗарегистрироватьСобытие("Заказ.Востановление состояния заказа при отмене оплат",УровеньЖурналаРегистрации.Предупреждение,,ЗаказСсылка, "Товары: " + Символы.ПС + ЗначениеВСтрокуВнутр(Заказ.Товары.Выгрузить()));
			Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
			ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
			Возврат СтруктураРезультата(-1, "Отмена оплаты", , "НачальноеОкно");
		ИначеЕсли РезультатОплаты.СделанаОтменаОплатыКартой Тогда
			Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
			ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
			Возврат СтруктураРезультата(-1, "Отмена оплаты картой.", "Обратитесь к продавцу-консультанту", "НачальноеОкно");
		Иначе // НЕ Успех	
			Заказ = СериализаторXDTO.ПрочитатьXDTO(ЗаказXDTO);
			ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
			Возврат СтруктураРезультата(-1, "Отмена оплаты", "", "НачальноеОкно");
		КонецЕсли;
	Исключение
		ЗарегистрироватьСобытие("Ошибка при оплате", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Заказ, ЗаказСсылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат СтруктураРезультата(-1, "Ошибка при оплате", "Обратитесь к продавцу-консультанту", "НачальноеОкно");
	КонецПопытки;
	
	Возврат СтруктураРезультата(-1, "Произошла ошибка", "Обратитесь к продавцу-консультанту", "НачальноеОкно");

КонецФункции 

&НаКлиенте
Функция ОбработкаОплаты_Оплата(Фирма, КОплате) Экспорт
	
	РезультатОплаты = Новый Структура("Успех, Отмена, Неудача, СделанаОтменаОплатыКартой, Сдача", Ложь, Ложь, Ложь, Ложь, 0);
	
	ЗарегистрироватьСобытие("Оплата.Вход в процедуру оплаты", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, СтрШаблон("Фирма: %1, К оплате: %2", Фирма, КОплате));
	
	Если Не Товары.Итог("Количество") Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Заказ сторнирован","","","ОК","",,6);
		ЗарегистрироватьСобытие("Оплата.Заказ сторнирован",УровеньЖурналаРегистрации.Ошибка,,Заказ.Ссылка);
		Возврат РезультатОплаты;
	КонецЕсли;
	
	ОбработкаОплаты_ЗаполнитьПротокол(КОплате);
	
	ЗарегистрироватьСобытие("Оплата.Обработка лояльности.Начало", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, СтрШаблон("ДанныеЛояльности: %1", ДанныеЛояльности));
	ДанныеЛояльностиСтруктура = ЗначениеИзСтрокиВнутр(ДанныеЛояльности);
	Если НЕ ДанныеЛояльностиСтруктура = Неопределено Тогда
		Обработано = Ложь;
		ИдентификаторЛояльности = "";
		Если ТипЧекаЛояльность = 1 Тогда
			Обработано = ЛояльностьКлиент.ОбработатьНачисление(Заказ, ПротоколРасчетов, ДанныеЛояльностиСтруктура, Фирма);
		ИначеЕсли ТипЧекаЛояльность = 2 Тогда
			Обработано = ЛояльностьКлиент.ОбработатьСписание(Заказ, ПротоколРасчетов, ДанныеЛояльностиСтруктура, Фирма);
		КонецЕсли;
		
		Если Обработано Тогда
			ДанныеЛояльностиСтруктура.Свойство("request_id", ИдентификаторЛояльности);
			ВнестиЛояльностьВПротокол(ТипЧекаЛояльность, Заказ.ПодвалЧека, ИдентификаторЛояльности, Заказ.ОбработанСистемойЛояльности);
		КонецЕсли;
	КонецЕсли;
	ЗарегистрироватьСобытие("Оплата.Обработка лояльности.Окончание", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
		
	Заказ.ПересчетНДС(); 
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ, "Объект.Записать()");
	Товары = Заказ.Товары;
	Специфики = Заказ.Специфики;
	
	ЗарегистрироватьСобытие("Оплата.Фискализация.До вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
	РезультатФискализации = ОбработкаОплаты_Фискализация(РезультатОплаты, Фирма);
	ЗарегистрироватьСобытие("Оплата.Фискализация.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, СтрШаблон("РезультатФискализации = %1",РезультатФискализации));
	
	РезультатОплаты.Успех = РезультатФискализации;
	ПротоколРасчетов.Фискализирован = РезультатФискализации;
	Если РезультатФискализации Тогда
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		ПротоколРасчетов.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
		
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Попытка
			ПротоколРасчетов.Записать(РежимЗаписиДокумента.Проведение);
			ЗаписатьПротоколВЗаказ(Фирма);
		Исключение
			ЗарегистрироватьСобытие("Ошибка проведения протокола расчетов", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
				
		//{ Закрываем заказ, чтобы при вылете на финализации попадали в новый заказ
		ЗарегистрироватьСобытие("Оплата.Закрытие заказа перед финализацией", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
		НЗ = РегистрыСведений.ЗаказДопИнф.СоздатьНаборЗаписей();
		НЗ.Отбор.Заказ.Установить(ЗаказСсылка);
		НЗ.Прочитать();
		Если НЗ.Количество() Тогда
			НЗ.ЗагрузитьКолонку(Массив(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Закрыт")),"Статус");
			НЗ.Записать();
		КонецЕсли;//}
		
		ЗарегистрироватьСобытие("Оплата.ФинализацияЧека.До вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
		Попытка
			
			ПротоколСсылка = ПротоколРасчетов.Ссылка;
			ЛояльностьКлиент.ФинализацияЧека(Заказ, ПротоколСсылка);
			Заказ = ЗаказСсылка.ПолучитьОбъект();
			Товары = Заказ.Товары;
			Специфики = Заказ.Специфики;
			ПротоколРасчетов = ПротоколСсылка.ПолучитьОбъект();

		Исключение
			ЗарегистрироватьСобытие("Оплата.ФинализацияЧека.Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		ЗарегистрироватьСобытие("Оплата.ФинализацияЧека.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
		
		Обработки.ГлавнаяФормаАК.ПечатьПодвалаЛояльности(Фирма, ККМ.Ссылка, Заказ.Ссылка, ПротоколРасчетов.Ссылка);
		
	Иначе
		Если РезультатОплаты.Неудача Тогда
			ОбработкаОплаты_ОтменаТранзакцииПлатежнойСистемы(РезультатОплаты, КОплате);
		КонецЕсли;
	КонецЕсли;
	
	Если ПротоколРасчетов.Заблокирован() Тогда
		ПротоколРасчетов.Разблокировать();
	КонецЕсли;

	Возврат РезультатОплаты;
	
КонецФункции

&НаКлиенте
Функция ОбработкаОплаты_Фискализация(РезультатОплаты, Фирма) Экспорт
	
	СтрокаБезнал = ПротоколРасчетов.Протокол.Найти(ПредопределенноеЗначение("Справочник.ВариантыОплаты.Карта"), "ВариантОплаты");
	Если СтрокаБезнал = Неопределено Тогда
		СуммаБезнал = 0;
	Иначе
		СуммаБезнал = СтрокаБезнал.Сумма;
	КонецЕсли;
	
	Если ПротоколРасчетов.Фискализирован Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СуммаБезнал Тогда
		ЗарегистрироватьСобытие("Оплата.Оплата картой.До вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
		Если Не ОбработкаОплаты_ОплатаКартой(РезультатОплаты) Тогда
			ЗарегистрироватьСобытие("Оплата.Оплата картой.После вызова.Ошибка",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Оплата картой не удалась", "Ошибка при работе с платежным терминалом","","ОК","");
			Возврат Ложь;
		КонецЕсли;
		ЗарегистрироватьСобытие("Оплата.Оплата картой.После вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
	КонецЕсли;
	
	СтрокиЧека = Новый Массив;
	СуммаСкидкиНаЧек = 0;
	ЗарегистрироватьСобытие("Оплата.Фискализация.Расчет параметров для ФН.Начало",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
	Для Каждого Т Из Товары Цикл
		Если НЕ Т.Фирма = Фирма Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Т.Товар) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ Т.ДокументОплаты.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если Т.СуммаРеализации = 0 И Т.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЧека = Новый Структура;
		
		СтрокаЧека.Вставить("ФискальнаяСтрока", "");
		СтрокаЧека.Вставить("Наименование", Т.Товар.Наименование);
		СтрокаЧека.Вставить("Количество",?(Т.Количество,Т.Количество,1));
		Если Т.Количество Тогда
			Цена = Т.ЦенаРеализации;
		Иначе
			Цена = 0;
		КонецЕсли;
		СтрокаЧека.Вставить("Цена", Цена);
		СтрокаЧека.Вставить("Сумма", СтрокаЧека.Цена*СтрокаЧека.Количество);
		СтрокаЧека.Вставить("НомерСекции", Т.Товар.Категория.НомерОтдела);
		
		СтрокаЧека.Вставить("СтавкаНДС", ИнтерфейсРМ.ЗначениеНДС(Т.Товар.Категория.СтавкаНДС));
		СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*ОбщегоНазначенияПовтИсп.ЗначениеСтавкиНДС(СтрокаЧека.СтавкаНДС)/100);
		СуммаСкидкиНаЧек = СуммаСкидкиНаЧек + Окр((СтрокаЧека.Цена*СтрокаЧека.Количество),2) - Т.СуммаРеализации;
		
		СтрокиЧека.Добавить(СтрокаЧека);
		
		СтрокиСпецифик = Специфики.НайтиСтроки(Новый Структура("НомерСтрокиТовара", Т.НомерСтроки));
		Для каждого С Из СтрокиСпецифик Цикл
			Если Не ЗначениеЗаполнено(С.Специфика) Тогда
				Продолжить;
			КонецЕсли;
			Если Не (С.Количество) Тогда
				Продолжить;
			КонецЕсли;
			Если С.Цена = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЧека = Новый Структура;
			
			СтрокаЧека.Вставить("ФискальнаяСтрока", "");
			СтрокаЧека.Вставить("Наименование", С.Специфика.Наименование);
			СтрокаЧека.Вставить("Количество",?(С.Количество,С.Количество,1));
			Если С.Количество Тогда
				Цена = С.ЦенаРеализации;
			Иначе
				Цена = 0;
			КонецЕсли;
			СтрокаЧека.Вставить("Цена", Цена);
			СтрокаЧека.Вставить("Сумма", СтрокаЧека.Цена*СтрокаЧека.Количество);
			Если С.Специфика.Номенклатура.Категория.Пустая() Тогда
				СтрокаЧека.Вставить("СтавкаНДС", "без НДС");
			Иначе
				СтрокаЧека.Вставить("СтавкаНДС", ИнтерфейсРМ.ЗначениеНДС(С.Специфика.Номенклатура.Категория.СтавкаНДС));
			КонецЕсли;
			Попытка
				СтрокаЧека.Вставить("НомерСекции", С.Специфика.Номенклатура.Категория.НомерОтдела);
				СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*ОбщегоНазначенияПовтИсп.ЗначениеСтавкиНДС(СтрокаЧека.СтавкаНДС)/100);
			Исключение
				СтрокаЧека.Вставить("НДС", 0);
			КонецПопытки;
			
			СтрокиЧека.Добавить(СтрокаЧека);
		КонецЦикла;
	
	КонецЦикла;

	ЗарегистрироватьСобытие("Оплата.Фискализация.Расчет параметров для ФН.Конец цикла по товарам",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
	СтрокиОплат = Новый Массив;
	
	// Строки оплат нужно передавать всегда.
	СтрокаОплат = Новый Структура;
	СтрокаОплат.Вставить("ТипОплаты", "Безнал");
	СтрокаОплат.Вставить("Сумма", СуммаБезнал);
	СтрокиОплат.Добавить(СтрокаОплат);
		
	ПараметрыВходные = Новый Структура;
	ПараметрыВходные.Вставить("Кассир", Строка(Заказ.Автор));
	ПараметрыВходные.Вставить("СтрокиЧека", СтрокиЧека);
	ПараметрыВходные.Вставить("СтрокиОплат", СтрокиОплат);
//326	ПараметрыВходные.Вставить("МестоРеализации", ПротоколРасчетов.МестоРеализации);//!
	
	СуммаСкидкиНаЧек = Цел(СуммаСкидкиНаЧек * 100);
	СуммаСкидкиНаЧек  = СуммаСкидкиНаЧек / 100;
	Если СуммаСкидкиНаЧек >= 0.01 Тогда
		ПараметрыВходные.Вставить("СуммаСкидкиНаЧек", СуммаСкидкиНаЧек);
	Иначе
		ПараметрыВходные.Вставить("СуммаСкидкиНаЧек", 0);
	КонецЕсли;
	ПараметрыВходные.Вставить("ТипЧека", Ложь);
	Если СпособПолученияЧека = 2 И ЗначениеЗаполнено(Email) Тогда
		ПараметрыВходные.Вставить("EmailКлиента", Email);
	КонецЕсли;
	Если СпособПолученияЧека = 1 И ЗначениеЗаполнено(НомерТелефона) Тогда
		ПараметрыВходные.Вставить("ТелефонКлиента", НомерТелефона);
	КонецЕсли;
	ПараметрыВходные.Вставить("Электронно",?(СпособПолученияЧека = 0,1,0));
	
	ЗарегистрироватьСобытие("Оплата.Фискализация.Расчет параметров для ФН.Конец",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
	ПараметрыВыходные = ПараметрыВыходные;
	Если СтрокиЧека.Количество() Тогда
		Попытка
			ЗарегистрироватьСобытие("Оплата.Фискализация.Входные параметры",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
			РезультатКомандыФискализация = Обработка_ККМ.ВыполнитьКоманду("ФискализацияЧека",ПараметрыВходные,ПараметрыВыходные);
			ЗарегистрироватьСобытие("Оплата.Фискализация.Выходные параметры",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
			фОшибка = Ложь;
		Исключение
			РезультатОплаты.Неудача = Истина;
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка ККМ", ОписаниеОшибки(), "","ОК", "");
			фОшибка = Истина;
		КонецПопытки;
	Иначе
		РезультатКомандыФискализация = Истина;
		фОшибка = Ложь;
		ПараметрыВыходные = "Не фискализирован";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПротоколРасчетов.ОтветФН) Тогда
		ЗарегистрироватьСобытие("Фискализация.Изменение ответа ФН", УровеньЖурналаРегистрации.Предупреждение, , Заказ.Ссылка, ПротоколРасчетов.ОтветФН);
	КонецЕсли;
	ПротоколРасчетов.ОтветФН = ПротоколРасчетов.ОтветФН + ЗначениеВСтрокуВнутр(ПараметрыВыходные);
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	
	Если фОшибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не РезультатКомандыФискализация Тогда // проверим на "НОМЕР ФД ИЗМЕНИЛСЯ"
		Если ТипЗнч(ПараметрыВыходные) = Тип("Структура") Тогда
			Ошибки = Ошибки;
			Если ПараметрыВыходные.Свойство("ОписаниеОшибки", Ошибки) Тогда
				Если ТипЗнч(Ошибки) = Тип("Массив")  Тогда
					СтрОшибка = СтрСоединить(Ошибки, Символы.ПС);
					Если ЗначениеЗаполнено(СтрОшибка) Тогда
						Если СтрНайти(СтрОшибка, "НОМЕР ФД ИЗМЕНИЛСЯ") Тогда
							РезультатКомандыФискализация = Истина;
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатКомандыФискализация Тогда
		Если Не СтрокаБезнал = Неопределено Тогда
			СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;	
		КонецЕсли; 
		
		ПротоколРасчетов.Фискализирован = Истина;
		ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = Ложь;
		ПротоколРасчетов.ИтогСуммаФакт = СуммаБезнал;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		
		Если Не ПротоколРасчетов.НомерЧека Тогда
			Если ТипЗнч(ПараметрыВыходные) = Тип("Структура") Тогда
				ПараметрыВыходные.Свойство("НомерЧека", ПротоколРасчетов.НомерЧека);
				ПараметрыВыходные.Свойство("НомерСмены", ПротоколРасчетов.НомерСмены);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ПротоколРасчетов.Протокол.Итог("СуммаФакт") Тогда
			РезультатОплаты.Неудача = Истина;
		Иначе
			РезультатОплаты.Отмена = Истина;
		КонецЕсли;
		
		ПоказатьОшибкуККМ(ПараметрыВыходные);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиенте
Функция ОбработкаОплаты_ОплатаКартой(РезультатОплаты) Экспорт
	
	Если глПараметрыРМ.РежимТестированияПередЗапуском Тогда
		Возврат Истина;
	КонецЕсли;

	СтрокаБезнал = ПротоколРасчетов.Протокол.Найти(ПредопределенноеЗначение("Справочник.ВариантыОплаты.Карта"), "ВариантОплаты");
	Если СтрокаБезнал.СуммаФакт Тогда
		Возврат Истина;
	КонецЕсли;
	ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
	Обработка_ПС = Обработка_ПС;
	РезультатИнит = ИнициализацияТО(ОбъектТерминал,Обработка_ПС,глПараметрыРМ);
	ВыходныеПараметры = ВыходныеПараметры;
	
	Попытка
		Обработка_ПС.ВыполнитьКоманду("ОплатитьПлатежнойКартой",Новый Структура("Сумма", СтрокаБезнал.Сумма), ВыходныеПараметры);
	Исключение
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
		Возврат Ложь;
	КонецПопытки;
	
	Если ВыходныеПараметры.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
	идТранзакцииПлатежнойСистемы = ВыходныеПараметры[1];
	ПротоколРасчетов.идТранзакцииПлатежнойСистемы = идТранзакцииПлатежнойСистемы;
	Строки = Строки;
	Попытка
		Строки = ВыходныеПараметры[2].Строки;
		ПротоколРасчетов.Слип = ПротоколРасчетов.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
	Исключение
		Если ТипЗнч(Строки) <> Тип("Массив") Тогда
			Строки = Массив("Ошибка при получении слип чека от терминала");
		КонецЕсли;
	КонецПопытки;
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	
	// Печать слипчека
	ПараметрыВходные = Новый Структура;
	ПараметрыВходные.Вставить("Строки", Строки);
//326	ПараметрыВходные.Вставить("МестоРеализации", ПротоколРасчетов.МестоРеализации);
	ПараметрыВыходные = ПараметрыВыходные;
	Попытка
		Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",ПараметрыВходные,ПараметрыВыходные);
	Исключение
		ЗарегистрироватьСобытие("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка,, Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ОбработкаОплаты_ОтменаТранзакцииПлатежнойСистемы(РезультатОплаты, КОплате) Экспорт
	
	ЗарегистрироватьСобытие("Оплата.ОтменаТранзакцииПлатежнойСистемы.ВходВпроцедуру", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
	ОбработкаОплаты_ЗаполнитьПротокол(КОплате);
	
	Если КассаАвтономная() Тогда
		ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена = Истина;
		ПротоколРасчетов.Протокол.Очистить();
		РезультатОплаты.СделанаОтменаОплатыКартой = Истина;  
		РезультатОплаты.Неудача = Ложь;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Возврат;
	КонецЕсли;
	
	ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
	Обработка_ПС = Обработка_ПС;
	РезультатИнит = ИнициализацияТО(ОбъектТерминал, Обработка_ПС, глПараметрыРМ);		
	ВыходныеПараметры = Новый Массив;
	
	фОшибка = Ложь;
	Попытка
		СтрокаБезнал = ПротоколРасчетов.Протокол.Найти(ПредопределенноеЗначение("Справочник.ВариантыОплаты.Карта"), "ВариантОплаты");
		СуммаБезнал = Макс(СтрокаБезнал.СуммаФакт, 0);
		Обработка_ПС.ВыполнитьКоманду("ОтменитьПлатежПоПлатежнойКарте",Новый Структура("Сумма, СсылочныйНомер",СуммаБезнал, ПротоколРасчетов.идТранзакцииПлатежнойСистемы), ВыходныеПараметры);
	Исключение
		ЗарегистрироватьСобытие("Платежная система", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Заказ, Заказ.Ссылка, "Не удалось отменить транзакцию " + ПротоколРасчетов.идТранзакцииПлатежнойСистемы + " " + ОписаниеОшибки());
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
		фОшибка = Истина;
	КонецПопытки;
	РезультатОплаты.Неудача = Истина;
	Если Не фОшибка Тогда
		Если ВыходныеПараметры.Количество() = 3 Тогда
			Строки = ВыходныеПараметры[2].Строки;
			Если ТипЗнч(Строки) = Тип("Массив") Тогда
				ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена = Истина;
				Попытка
					Строки = ВыходныеПараметры[2].Строки;
				Исключение
					Если ТипЗнч(Строки) <> Тип("Массив") Тогда
						Строки = Массив("Ошибка при получении слип чека от терминала");
					КонецЕсли;
				КонецПопытки;
				ПротоколРасчетов.Слип = ПротоколРасчетов.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
				ПротоколРасчетов.Протокол.Очистить();
				РезультатОплаты.СделанаОтменаОплатыКартой = Истина;
				РезультатОплаты.Неудача = Ложь;
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");                       				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


#Область ОбновлениеДанных

&НаКлиенте
Процедура ЗаписатьЗаказ(Статус)
	//:Заказ = Документы.Заказ.СоздатьДокумент();
	
	Попытка
		ЗарегистрироватьСобытие("Изменение статуса заказа", УровеньЖурналаРегистрации.Информация,,ЗаказСсылка, Статус);	
	Исключение
	КонецПопытки;
	
	Заказ.Записать();
	
	НЗ = РегистрыСведений.ЗаказДопИнф.СоздатьНаборЗаписей();
	НЗ.Отбор.Заказ.Установить(ЗаказСсылка);
	НЗ.Прочитать();
	
	Если НЗ.Количество() Тогда
		ЗаписьРегистра = НЗ[0];
	Иначе 
	КонецЕсли;
	
	ЗаписьРегистра.Статус = Статус;
	Если Статус <> Перечисления.СтатусыЗаказа.Открыт Тогда
		ЗаписьРегистра.ДатаЗакрытия = ТекущаяДатаСеансаНаСервере();
		Если ЗначениеЗаполнено(Заказ.КартаДоступа) Тогда
			ксТрактир.ОсвободитьКартуДоступа(Заказ.КартаДоступа);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Заказ.КартаДоступа) Тогда
			ксТрактир.РегистрацияЗаказаПоКартеДоступа(Заказ.КартаДоступа, ЗаказСсылка);
		КонецЕсли;
	КонецЕсли;
	Если НЕ ПротоколРасчетов.Ссылка.Пустая() Тогда
		ЗаписьРегистра.ПротоколРасчетов = ПротоколРасчетов.Ссылка;
	КонецЕсли;
	
	НЗ.Записать(Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОплаты_ЗаполнитьПротокол(КОплате) Экспорт
	
	УдаляемыеСтрокиПротокола = ПротоколРасчетов.Протокол.НайтиСтроки(Новый Структура("СуммаФакт", 0));
	Для Каждого Т Из УдаляемыеСтрокиПротокола Цикл
		ПротоколРасчетов.Протокол.Удалить(Т);
	КонецЦикла;
	
	СтрокаБезнал = ПротоколРасчетов.Протокол.Найти(ПредопределенноеЗначение("Справочник.ВариантыОплаты.Карта"), "ВариантОплаты");
	Если СтрокаБезнал = Неопределено Тогда   // И КОплате > 0
		СтрокаБезнал = ПротоколРасчетов.Протокол.Добавить();
		СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
		СтрокаБезнал.ВариантОплаты = ПредопределенноеЗначение("Справочник.ВариантыОплаты.Карта");
		СтрокаБезнал.Сумма = КОплате;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВнестиЛояльностьВПротокол(ТипЧекаЛояльность, ПодвалЧека, ИдентификаторЛояльности, СтатусЛояльности)
	
	ПротоколРасчетов.ТипЧекаЛояльность = ТипЧекаЛояльность;
//заполняется в лояльности//	ПротоколРасчетов.ПодвалЧека = ПодвалЧека;
	ПротоколРасчетов.ИдентификаторЛояльности = ИдентификаторЛояльности;
	ПротоколРасчетов.СтатусЛояльности = СтатусЛояльности;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПротоколВЗаказ(Фирма)
	Для каждого ТекСтрока Из Заказ.Товары Цикл
		Если ТекСтрока.Фирма = Фирма И ТекСтрока.ДокументОплаты.Пустая() И ТекСтрока.Количество > 0 Тогда  //TODO  И ТекСтрока.СуммаРеализации <> 0
			ТекСтрока.ДокументОплаты = ПротоколРасчетов.Ссылка;
			ТекСтрока.СтатусОплаты = 1;
		КонецЕсли;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Заказ, ПротоколРасчетов, "НомерЧека,НомерСмены,КассоваяСмена");
	Заказ.ККМрабочегоМеста = ПротоколРасчетов.ККМ;
	ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Открыт"));
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИнициализации

&НаКлиенте
Процедура ИнициализацияККМ(Фирма)

	Если глПараметрыРМ.ККМЕстьДоп Тогда
		СтрокаМестоРеализации = МестаРеализации.НайтиСтроки(Новый Структура("Фирма", Фирма));
		Попытка
			ККМ = СтрокаМестоРеализации[0].ККМ.ПолучитьОбъект();
		Исключение
			Закрыть(СтруктураРезультата(-1, "Ошибка ККМ", "Отсутствует ККМ - " + Фирма, "НачальноеОкно"));
		КонецПопытки;
	Иначе
		ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
	КонецЕсли;
	
	Обработка_ККМ = Обработка_ККМ;
	ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);

КонецПроцедуры

&НаКлиенте
Функция СтруктураРезультата(Ошибка = 0, ТекстОшибки1 = "", ТекстОшибки2 = "", РезультатКнопкиОК = "")
	
	Результат = Новый Структура("Ошибка,ТекстОшибки1,ТекстОшибки2,РезультатКнопкиОК,ВариантОплаты,СпособПолученияЧека,ТипЧекаЛояльность,ПротоколРасчетов", Ошибка, ТекстОшибки1, ТекстОшибки2, РезультатКнопкиОК, ВариантОплаты, СпособПолученияЧека, ТипЧекаЛояльность, Неопределено);
	Попытка
		Результат.Вставить("ПротоколРасчетов", ПротоколРасчетов.Ссылка);
	Исключение
	КонецПопытки;
	Результат.Вставить("НадписьСостояниеОплаты", НадписьСостояниеОплаты);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПоследнийПротокол(Фирма)
	
	// пока всегда содзаем новый протокол
	Возврат ПредопределенноеЗначение("Документ.ПротоколРасчетов.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
	Запрос.УстановитьПараметр("Фирма", Фирма);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколРасчетов.Протокол КАК ПротоколТЧ
	|		ПО (ПротоколТЧ.Ссылка = ПротоколРасчетов.Ссылка)
	|ГДЕ
	|	ПротоколРасчетов.Заказ = &Заказ
	|	И ПротоколРасчетов.Фирма = &Фирма
	|	И НЕ ПротоколРасчетов.ПометкаУдаления
	|	И НЕ ПротоколРасчетов.Фискализирован
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПротоколРасчетов.Дата УБЫВ,
	|	ПротоколТЧ.СуммаФакт УБЫВ";
	
	Рез = Запрос.Выполнить().Выбрать();            
	Если Рез.Следующий() Тогда
		Возврат Рез.Ссылка;
	Иначе
		Возврат ПредопределенноеЗначение("Документ.ПротоколРасчетов.ПустаяСсылка");
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОплаты_ОткрытьЧек() 

	ПараметрыВходные = Новый Структура;
	ПараметрыВыходные = Новый Массив;
	Попытка
		РезультатКомандыФискализация = Обработка_ККМ.ВыполнитьКоманду("ПолучитьТекущееСостояние",ПараметрыВходные,ПараметрыВыходные);
		ПоказатьОшибкуККМ(ПараметрыВыходные);
	Исключение
		Сообщить(ОписаниеОшибки());		
	КонецПопытки;
	
	Если ПараметрыВыходные.Количество() > 2 Тогда
		
		Попытка
			Фискализирован = ПротоколРасчетов.Фискализирован
		Исключение
			Фискализирован = Ложь;
		КонецПопытки;
		
		Если Не Фискализирован Тогда
			ПротоколРасчетов.НомерЧека = ПараметрыВыходные.НомерЧека;
			ПротоколРасчетов.НомерСмены = ПараметрыВыходные.НомерСмены;
		КонецЕсли;
		
		глПараметрыРМ.Вставить("НомерТекущегоЧека", ПараметрыВыходные.НомерЧека);
		глПараметрыРМ.Вставить("НомерСмены",  ПараметрыВыходные.НомерСмены);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОплаты_ИнициализироватьПротокол(Фирма, КОплате) 
	
	МестоРеализации = Фирма.МестоРеализации;
	
	ПротоколРасчетов = Документы.ПротоколРасчетов.СоздатьДокумент();
	
	ПротоколРасчетов.Номер = ЗаказСсылка.Номер;
	ПротоколРасчетов.Заказ = ЗаказСсылка;
	ПротоколРасчетов.Автор = ЗаказСсылка.Автор;
	ПротоколРасчетов.Дата = ТекущаяДатаСеансаНаСервере();
	ПротоколРасчетов.ККМ = ККМ.Ссылка;
	ПротоколРасчетов.Смена = ИнтерфейсРМ.ТекущаяСмена(МестоРеализации);
	ПротоколРасчетов.МестоРеализации = МестоРеализации;
	ПротоколРасчетов.Фирма = Фирма;
	ПротоколРасчетов.РабочееМесто = глРабочееМесто;
	
	СтрокаБезнал = ПротоколРасчетов.Протокол.Добавить();
	СтрокаБезнал.Действие = ПредопределенноеЗначение("Перечисление.ДействияПриОплате.Взнос");
	СтрокаБезнал.ВариантОплаты = ПредопределенноеЗначение("Справочник.ВариантыОплаты.Карта");
	СтрокаБезнал.Сумма = КОплате;
		
КонецПроцедуры

#КонецОбласти


#Область Проверки

&НаСервереБезКонтекста
Функция ТекущаяДатаСеансаНаСервере()
	Возврат ТекущаяДатаСеанса();
КонецФункции

&НаКлиенте
Функция КассаАвтономная()
	КассаАвтономная = Неопределено;
	глПараметрыРМ.Свойство("КассаАвтономная", КассаАвтономная);
	Если КассаАвтономная = Неопределено Тогда
		 КассаАвтономная = Найти(НРег(глПараметрыРМ.ККМ), "автономная");
		 глПараметрыРМ.Вставить("КассаАвтономная", КассаАвтономная);
	КонецЕсли;
	Если КассаАвтономная Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
