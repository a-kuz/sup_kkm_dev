#Если НЕ ТонкийКлиент Тогда
	
	
#Область ОписаниеПеременных

&НаКлиенте	
Перем ЗаказОбъектБлок;
&НаКлиенте	
Перем ЗаказСМарками;
&НаКлиенте	
Перем СчетчикНажатий;


#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//TODO языков пока нет, поэтому убираю соотв. элементы
	Элементы.ВыборЯзыка.Видимость = Ложь;
	Элементы.НормировочнаяНадпись.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПроверитьОбновитьДатуСеанса();
	РезультатИнициализации = Обработки.ГлавнаяФормаАК.ИнициализацияРабочегоМеста(Неопределено);
	Если РезультатИнициализации.Ошибка Тогда
		Отказ = Истина;
		ВывестиСообщениеОбОшибке(РезультатИнициализации);
	КонецЕсли;
	
	//Проверка наличия открытых смен по всем местам реализации
	РезультатПроверки = ПроверкаНаличияОткрытыхСмен(глПараметрыРМ.МестоРеализации);
	
	////// все таки мест реализации может быть несколько
	////// поэтому проверяем все, по которым можно произвести оплату
	////мМестаРеализации = Новый Массив;
	////Для каждого ТекФирма Из ПолучитьМассивФирмРМ() Цикл
	////	мМестаРеализации.Добавить(ТекФирма.МестоРеализации);
	////КонецЦикла;
	////РезультатПроверки = ПроверкаНаличияОткрытыхСмен(мМестаРеализации);
	
	Если РезультатПроверки.Ошибка Тогда
		Отказ = Истина;
		ВывестиСообщениеОбОшибке(РезультатПроверки);
	КонецЕсли;
	
	РезультатПроверки = ПроверкаКассовойСмены(глПараметрыРМ.ККМ);
	Если РезультатПроверки.Ошибка Тогда
		Отказ = Истина;
		ВывестиСообщениеОбОшибке(РезультатПроверки);
	КонецЕсли;
	
	ОбновитьОтображениеЭлементовДляМестаРеализации(глПараметрыРМ.МестоРеализации);
	//Если глПараметрыРМ.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
	//	Элементы.НадписьПриветствие1.Заголовок = Новый ФорматированнаяСтрока("ОПЛАТА ЗАКАЗА:");
	//	Элементы.ЛогоККГурмэ.Картинка = БиблиотекаКартинок.ЛогоКухняПолли;
	//	Элементы.ЛогоККГурмэ1.Картинка = БиблиотекаКартинок.ЛогоКухняПолли;
	//	Элементы.ЛогоККГурмэ2.Картинка = БиблиотекаКартинок.ЛогоКухняПолли;
	//	Элементы.ЛогоККГурмэ3.Картинка = БиблиотекаКартинок.ЛогоКухняПолли;
	//ИначеЕсли глПараметрыРМ.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.КМ") Тогда
	//	Элементы.НадписьПриветствие1.Заголовок = Новый ФорматированнаяСтрока("ОПЛАТА заказа МясновЪ");
	//КонецЕсли;
	
	СчетчикНажатий = 0;
	Элементы.ЛогоККГурмэ.Гиперссылка  = глПараметрыРМ.Тест;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// тут было закрытие смены, но решили делать его вручную.
	//
	//Если НЕ глРабочееМесто.Тест Тогда
	//	РезультатЗакрытия = ЗакрытьКассовуюСмену();
	//	Если РезультатЗакрытия.Ошибка Тогда
	//		ВывестиСообщениеОбОшибке(РезультатЗакрытия);
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Если НЕ ЗавершениеРаботы Тогда
	//		ЗавершитьРаботуСистемы(Ложь, Ложь);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	СтруктураОшибки = СтруктураОшибки();
	ЗаказСсылка = Неопределено;
	
	Если Источник = "NativeDraw" Тогда
		Возврат;
	КонецЕсли;
	
	_Знач = ОбработкаВнешнихСобытий.ПолучитьДанные(Источник, Событие, Данные);
	Если НЕ ЗначениеЗаполнено(_Знач) Тогда
		Возврат;
	КонецЕсли;
	
	Если флЗаказОткрыт Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ТипЗнч(_Знач) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОжидание();
	
	ТипПривязки = Новый ОписаниеТипов("СправочникСсылка.Сотрудники, СправочникСсылка.Клиенты");
		
	ФлагПовтора = Ложь;
	_КартаДоступаКлиента = Неопределено;
	_Объект = ИнтерфейсРМ.ИдентификацияПоКарте("Идентификатор_"+_Знач, ТипПривязки, ФлагПовтора, _КартаДоступаКлиента);
	
	Если ЗначениеЗаполнено(_Объект) Тогда
		
		Если ТипЗнч(_Объект) = Тип("Структура") 
			И _Объект.Тип = ПредопределенноеЗначение("Справочник.ТипыШаблоновШК.КартаДоступа") 
			И ЗначениеЗаполнено(_КартаДоступаКлиента) Тогда
			Если ТипЗнч(_КартаДоступаКлиента.Привязка) = Тип("СправочникСсылка.Сотрудники") Тогда
				
				ОткрытьМенюОпераций(_КартаДоступаКлиента.Привязка);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(_Объект) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ОткрытьМенюОпераций(_Объект);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(_КартаДоступаКлиента) 
		//ИЛИ НЕ ТипЗнч(_КартаДоступаКлиента.Привязка) = Тип("СправочникСсылка.Клиенты") 
		Тогда
		
		Если глРабочееМесто.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "Извините, Карта гостя не найдена.", "Попробуйте еще раз или обратитесь к продавцу-консультанту.", "НачальноеОкно"));	
		Иначе	
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "Извините, БЕЙДЖ ГОСТЯ не найден.", "Попробуйте еще раз или обратитесь к продавцу-консультанту.", "НачальноеОкно"));	
		КонецЕсли;

		Возврат;
		
	КонецЕсли;
	
	РезультатПоиска = ЗаказПоКартеДоступаНаСервере(_КартаДоступаКлиента);
	ЗаказСсылка = РезультатПоиска.ЗаказСсылка;
	Если НЕ ЗначениеЗаполнено(ЗаказСсылка) Тогда
		Если глРабочееМесто.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "По данной Карте гостя заказ не открыт.", "", "НачальноеОкно"));
		Иначе	
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "По данному БЕЙДЖУ ГОСТЯ заказ не открыт.", "", "НачальноеОкно"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
//-	_КартаДоступа = _Знач;
	Если НЕ ПустаяСтрока(РезультатПоиска.ОткрытыеМарки) Тогда
		ЗаказСМарками = ЗаказСсылка;
		Элементы.НадписьСписокМарок.Заголовок = РезультатПоиска.ОткрытыеМарки;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПриветствие_1;
		Возврат;
	КонецЕсли;
	
	ОтобразитьЗаказВФорме(ЗаказСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьЗаказВФорме(ЗаказСсылка, ЛояльностьДоступна = Истина)
	
	флЗаказОткрыт = Истина;
	глОтсечкаПростоя();
	
	Если ЗаказСсылка.Товары.Количество() = 0 ИЛИ ЗаказСсылка.Товары.Итог("Количество") = 0 Тогда
		Если глРабочееМесто.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "На даннй Карте гостя в заказе товаров нет.", "", "НачальноеОкно"));
		Иначе	
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "На данном БЕЙДЖЕ ГОСТЯ в заказе товаров нет.", "", "НачальноеОкно"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РезультатБлокировки = ЗаблокироватьЗаказПоФирмамРМ(ЗаказСсылка);
	Если НЕ РезультатБлокировки.Успех Тогда
		ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "Заказ заблокирован " + РезультатБлокировки.КемЗаблокирован, "Обратитесь к продавцу-консультанту.", "НачальноеОкно")); 
		Возврат;	
	КонецЕсли;
	//Попытка
	//	ЗаказОбъектБлок = ЗаказСсылка.ПолучитьОбъект();
	//	ЗаказОбъектБлок.Заблокировать();
	//Исключение
	//	ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "Заказ заблокирован", "Обратитесь к администратору...", "НачальноеОкно")); 
	//	Возврат;	
	//КонецПопытки;
	
	
	РезультатОткрытия = ОбновитьРеквизитыПоЗаказу(ЗаказСсылка, глПараметрыРМ.Тест);
	Если РезультатОткрытия.Ошибка Тогда
		ВывестиСообщениеОбОшибке(РезультатОткрытия);
		Возврат;
	КонецЕсли;
	
	Если глПараметрыРМ.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		РезультатПроверки = ЛояльностьКлиент.ПроверкаКарты_КП(ЗаказСсылка.НомерКартыЛояльности, глПараметрыРМ.Тест);
		Если НЕ РезультатПроверки.Ошибка И НЕ ПустаяСтрока(РезультатПроверки.НомерКарты) Тогда
			ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, РезультатПроверки);
			
			НомерТелефона = Формат(РезультатПроверки.НомерТелефона, "ЧДЦ=; ЧГ=0");
			Email = РезультатПроверки.ЭлектроннаяПочта;
			ФИО = РезультатПроверки.ФИО;
			Баланс = РезультатПроверки.Баланс;
			НомерКартыЛояльности = СокрЛП(Формат(РезультатПроверки.НомерКарты, "ЧГ=0"));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаказОплаченПолностью(ЗаказСсылка) Тогда
		Если глПараметрыРМ.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
			ЗавершитьОбслуживание(Неопределено);
			Возврат;
		КонецЕсли;
		
		Элементы.НадписьЗавершение_6_1.Заголовок = "Ваш заказ полностью оплачен.";
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершение_6;
		
		Возврат;
	КонецЕсли;
	
	Если глПараметрыРМ.ККМЕсть Тогда
		СтрокаМестаРеализации = МестаРеализации.НайтиСтроки(Новый Структура("Фирма", глПараметрыРМ.ККМ.Фирма));
		Для каждого ТекСтрока Из СтрокаМестаРеализации Цикл
			ТекСтрока.ККМ = глПараметрыРМ.ККМ;
		КонецЦикла;
		СтрокаТовары = ТаблицаТовары.НайтиСтроки(Новый Структура("Фирма", глПараметрыРМ.ККМ.Фирма));
		Для каждого ТекСтрока Из СтрокаТовары Цикл
			ТекСтрока.ККМ = глПараметрыРМ.ККМ;
		КонецЦикла;
	КонецЕсли;
	
	Если глПараметрыРМ.ККМЕстьДоп Тогда //TODO проверить
		Для каждого ТО Из глПараметрыРМ.ККМСписокДоп Цикл
			СтрокаМестаРеализации = МестаРеализации.НайтиСтроки(Новый Структура("Фирма", ТО.Значение.Фирма));
			Для каждого ТекСтрока Из СтрокаМестаРеализации Цикл
				ТекСтрока.ККМ = ТО.Значение;
			КонецЦикла;
			СтрокаТовары = ТаблицаТовары.НайтиСтроки(Новый Структура("Фирма", глПараметрыРМ.ККМ.Фирма));
			Для каждого ТекСтрока Из СтрокаТовары Цикл
				ТекСтрока.ККМ = ТО.Значение;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
//DeBuG	Если глПараметрыРМ.Тест Тогда
//DeBuG		Для каждого ТекМестоРеализации Из МестаРеализации Цикл
//DeBuG			ТекМестоРеализации.ККМ = глПараметрыРМ.ККМ;
//DeBuG		КонецЦикла;
//DeBuG	КонецЕсли;
	
	Для каждого ТекМестоРеализации Из МестаРеализации Цикл
		
		Если ТекМестоРеализации.ККМ.Пустая() Тогда
			Если НЕ ТекМестоРеализации.КОплате = 0 Тогда
				//ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "Не забудьте оплатить Ваш заказ в " + ТекМестоРеализации.Фирма, "", ""));
				ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "Не забудьте оплатить Ваш заказ в " + ТекМестоРеализации.Фирма, "", "НачальноеОкно"));
				//Возврат;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ККМ = ТекМестоРеализации.ККМ.ПолучитьОбъект();
		Обработка_ККМ = Обработка_ККМ;
		ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
		
		ПараметрыВходные = Новый Структура;
		ПараметрыВыходные = Новый Массив;
		Попытка
			Ошибки = "";
			РезультатТекСостояние = Обработка_ККМ.ВыполнитьКоманду("ПолучитьТекущееСостояние", ПараметрыВходные, ПараметрыВыходные);
			Если ТипЗнч(ПараметрыВыходные) = Тип("Структура") Тогда
				Если ПараметрыВыходные.Свойство("ОписаниеОшибки", Ошибки) Тогда
					Если ТипЗнч(Ошибки) = Тип("Массив")  Тогда
						СтрОшибка = СтрСоединить(Ошибки, Символы.ПС);
						Если ЗначениеЗаполнено(СтрОшибка) Тогда
							ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "Ошибка ККМ", СтрОшибка, "НачальноеОкно"));		
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;		
			КонецЕсли;
		Исключение
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "Ошибка ККМ", ОписаниеОшибки(), "НачальноеОкно"));		
			Возврат;
		КонецПопытки;
		
		Если ПараметрыВыходные.Количество() > 2 Тогда
			ТекМестоРеализации.НомерЧека = ПараметрыВыходные.НомерЧека;
			ТекМестоРеализации.НомерСмены = ПараметрыВыходные.НомерСмены;
		КонецЕсли;
	КонецЦикла;
	
	// отработка лояльности
	Чек = Неопределено;
	Для каждого ТекМестоРеализации Из МестаРеализации Цикл
		Если НЕ ТекМестоРеализации.Фискализирован Тогда
			НомерЧека = ТекМестоРеализации.НомерЧека;
			НомерСмены = ТекМестоРеализации.НомерСмены;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	СтруктураЗаказа = СформироватьЗаказПоМестуРеализации(, НомерЧека, НомерСмены);
		
	Если ЛояльностьДоступна Тогда
		РезультатПресейл = ЛояльностьКлиент.РасчетЧека(СтруктураЗаказа);
		
		Если РезультатПресейл.Ошибка = 0 Тогда
			Если РезультатПресейл.Свойство("Результат", Чек) Тогда
				ОбновитьТаблицуТоваровПоЧеку(Чек);
			КонецЕсли;
		ИначеЕсли РезультатПресейл.Ошибка = -1 Тогда
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, РезультатПресейл.ТекстОшибки, "", "ПеречитатьБезЛояльности"));
			Возврат;
		Иначе
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, РезультатПресейл.ТекстОшибки, "", "ПеречитатьБезЛояльности"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КОплате = 0;
	Для каждого ТекСтрока Из МестаРеализации Цикл
		Если НЕ ТекСтрока.ККМ.Пустая() Тогда
			КОплате = КОплате + ТекСтрока.КОплате;
		КонецЕсли;
	КонецЦикла;
	
	//КОплате = ТаблицаТовары.Итог("КОплате");
	НачислениеНачисление = 0;
	НачислениеОплата = КОплате;
	СписаниеНачисление = 0;
	СписаниеОплата = 0;
	СписаниеСписание = 0;
	
	НадписьКартаЛОЛ = "";
	ДисплейИнфо = "";
	ПИН_Нужен = 1;
	ПИН_Хэш = "";
	
	Если НЕ Чек = Неопределено Тогда
		Чек.Свойство("display_info", ДисплейИнфо);
		Чек.Свойство("need_pin", ПИН_Нужен);
		Чек.Свойство("pin_md", ПИН_Хэш);
		Чек.Свойство("request_id", ИдентификаторЛояльности);
		
		Чек.Свойство("n_kgl_add", НачислениеНачисление);
		Чек.Свойство("n_sum", НачислениеОплата);
		Чек.Свойство("s_kgl_add", СписаниеНачисление);
		Чек.Свойство("s_sum", СписаниеОплата);
		Чек.Свойство("s_kgl_rem", СписаниеСписание);
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(НомерКартыЛояльности) Тогда
		НадписьКартаЛОЛ = СтрШаблон("Карта КеГеЛьБУМ %1*****%2", Лев(НомерКартыЛояльности, 2), Прав(НомерКартыЛояльности, 4));
	Иначе
		НадписьКартаЛОЛ = "Нет карты КеГеЛьБУМ";
	КонецЕсли;
	
	//Если НЕ ПустаяСтрока(НадписьКартаЛОЛ) Тогда
	//	НадписьКартаЛОЛ = СтрСоединить(НадписьКартаЛОЛ, Символы.ПС);
	//	НадписьКартаЛОЛ = Новый ФорматированнаяСтрока(НадписьКартаЛОЛ);
	//КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МестаРеализации", ПолучитьМассивМестаРеализации());
	ПараметрыФормы.Вставить("НомерКартыЛояльности", НомерКартыЛояльности);
	ПараметрыФормы.Вставить("НомерЗаказа",ЗаказСсылка.Номер);
	ПараметрыФормы.Вставить("НадписьКартаЛОЛ", НадписьКартаЛОЛ);
	ПараметрыФормы.Вставить("ДисплейИнфо", ДисплейИнфо);
	ПараметрыФормы.Вставить("ФИО", ФИО);
	ПараметрыФормы.Вставить("Баланс", Баланс);
	ПараметрыФормы.Вставить("ПИН_Нужен", ПИН_Нужен);
	ПараметрыФормы.Вставить("ПИН_Хэш", ПИН_Хэш);
	Если глРабочееМесто.Тип = Перечисления.ТипыРМ.Автокасса
		И глПараметрыРМ.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		ПараметрыФормы.Вставить("ПоказатьТаблицуТовары", Истина);
	Иначе
		ПараметрыФормы.Вставить("ПоказатьТаблицуТовары", Ложь);
	КонецЕсли;
	ПараметрыФормы.Вставить("НомерТелефона", НомерТелефона);
		
	ПараметрыФормы.Вставить("КОплате", КОплате);
	ПараметрыФормы.Вставить("НачислениеНачисление", НачислениеНачисление);
	ПараметрыФормы.Вставить("НачислениеОплата", НачислениеОплата);
	ПараметрыФормы.Вставить("СписаниеНачисление", СписаниеНачисление);
	ПараметрыФормы.Вставить("СписаниеОплата", СписаниеОплата);
	ПараметрыФормы.Вставить("СписаниеСписание", СписаниеСписание);
	ПараметрыФормы.Вставить("ТаблицаТовары", СформироватьТоварыДляПередачи(, "Товар,Количество,фАлкоголь,МестоРеализации,КОплате,action_group,ЦенаРеализации,Наименование,Фирма,ККМ,ЛояльностьГруппаАкции,СуммаРеализации"));
		
//DeBuG	ПараметрыФормы.Вставить("ПИН_Нужен", 1); 
//DeBuG	ПараметрыФормы.Вставить("ПИН_Хэш", "81dc9bdb52d04dc20036dbd8313ed055"); 
	ПараметрыФормы.Вставить("РабочееМесто", глРабочееМесто);
	ПараметрыФормы.Вставить("ИдентификаторЛояльности", ИдентификаторЛояльности);
		
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НомерКартыЛояльности", НомерКартыЛояльности);
	ДополнительныеПараметры.Вставить("НадписьКартаЛОЛ", НадписьКартаЛОЛ);
	ДополнительныеПараметры.Вставить("ПИН_Нужен",ПИН_Нужен);
	ДополнительныеПараметры.Вставить("ПИН_Хэш", ПИН_Хэш);
	ДополнительныеПараметры.Вставить("ПараметрыФормы_ВыборСпособаОплаты", ПараметрыФормы);
	ДополнительныеПараметры.Вставить("ДанныеЛояльности", Чек);
	ДополнительныеПараметры.Вставить("ДисплейИнфо", ДисплейИнфо);
	
//DeBuG	ДополнительныеПараметры.Вставить("ПИН_Хэш", "81dc9bdb52d04dc20036dbd8313ed055"); 
		
	ОткрытьФорму("Обработка.ГлавнаяФормаАК.Форма.ВыборСпособаОплаты", ПараметрыФормы, ЭтаФорма, , , , Новый ОписаниеОповещения("ОбрабокаЗакрытияФормыВыборСпособаОплаты", ЭтотОбъект, ДополнительныеПараметры));
	
	ЗавершитьОжидание();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьЗаказПоКартеКлиента(ЛояльностьДоступна = Истина)
	
	НачатьОжидание();
	
	ЗаказСсылка = Заказ.Ссылка;
	ОчиститьДанныеФормы();
	ОтобразитьЗаказВФорме(ЗаказСсылка, ЛояльностьДоступна);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ГлавнаяФормаАК_СбросЗаказаСоСтандартнойКассы" Тогда
		Если (Параметр = глРабочееМесто ИЛИ СокрЛП(Параметр) = СокрЛП(глРабочееМесто.ПрофильВхода)) И Открыта() Тогда
			ОтобразитьНачальнуюСтраницу();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаСервере
Процедура ЗавершитьОбслуживаниеНаСервере(МестоРеализации, ПодвалЧека = "")
	
	Если МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		
		НачальнаяПозиция = СтрНайти(ПодвалЧека, "Спасибо,");
		Если НачальнаяПозиция > 0 Тогда
			Надпись_7_1 = Сред(ПодвалЧека, НачальнаяПозиция);
		Иначе	
			Надпись_7_1 = 
			"Спасибо, что стали гостем ""Кухни Полли""!" + Символы.ПС +
			"Поделитесь своими впечатлениями" + Символы.ПС +
			"на www.kitchenpolly.ru";
		КонецЕсли;
		
		Элементы.НадписьЗавершение_7_1.Заголовок = Надпись_7_1;
	ИначеЕсли МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.КМ") Тогда 	
		Элементы.НадписьЗавершение_7_1.Заголовок = 
			"Спасибо за покупки в
			|МясновЪ и Отдохни!
			|Ждём Вас снова!";
		Элементы.НадписьЗавершение_7_2.Заголовок = 
			"Оставьте БЕЙДЖ ГОСТЯ
			|в корзинке на кассе";
	КонецЕсли;
	//Элементы.НадписьЗавершение_7_2.Заголовок = "Не забудьте сдать Бейдж гостя";
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершение_7;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбслуживание(Команда)
	
	ЗаказОбъект = Заказ.Ссылка.ПолучитьОбъект();
	ЗаписатьЗаказ(ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Закрыт"), ЗаказОбъект);
	
	ЗавершитьОбслуживаниеНаСервере(глРабочееМесто.МестоРеализации, ЗаказОбъект.ПодвалЧека);
	
	ОбождатьМиллисекунд();
	ОтобразитьНачальнуюСтраницу();
	
КонецПроцедуры

&НаСервере
Процедура ПродолжитьПокупкиНаСервере(МестоРеализации)
	
	//Если МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		
		Элементы.НадписьЗавершение_7_1.Заголовок = "Отличный выбор!";
		Элементы.НадписьЗавершение_7_2.Заголовок = "Желаем Вам приятных покупок!";
	//ИначеЕсли МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.КМ") Тогда 	
	//	Элементы.НадписьЗавершение_7_1.Заголовок = 
	//		"Желаем Вам
	//		|приятных покупок!";
	//	Элементы.НадписьЗавершение_7_2.Заголовок = 
	//		"";
	//КонецЕсли;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершение_7;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПокупки(Команда)

	ПродолжитьПокупкиНаСервере(глРабочееМесто.МестоРеализации);
	
	ОбождатьМиллисекунд();
	ОтобразитьНачальнуюСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОплату(Команда)
	ЗаказСсылка = ЗаказСМарками;
	НачатьОжидание();
	ОтобразитьЗаказВФорме(ЗаказСсылка);
	ЗаказСМарками = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОтказатьсяОтОплаты(Команда)
	ОтобразитьНачальнуюСтраницу();
КонецПроцедуры


#Область ПереходыПоФормамОбработки

&НаКлиенте
Процедура ОбрабокаЗакрытияФормыВыборСпособаОплаты(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		// по таймауту
		Возврат;
	КонецЕсли;
	
	глОтсечкаПростоя();
	
	Если Результат.ВариантОплаты = -1 Тогда
		
		Если ДополнительныеПараметры.Свойство("Фирма") И ЗначениеЗаполнено(ДополнительныеПараметры.Фирма) Тогда
			// значит передумали платить по частям
			ПеречитатьЗаказПоКартеКлиента();
		Иначе
			ОтобразитьНачальнуюСтраницу();
		КонецЕсли;
		
	ИначеЕсли Результат.ВариантОплаты = 0 Тогда
		// выбираем способ по каждому месту реализации
		// сначала надо найти первое неоплаченное место реализации
		// они отсортированы - сначала уже оплаченные, потом по убыванию суммы
		Для Инд = 0 По МестаРеализации.Количество() - 1 Цикл
			Если МестаРеализации[Инд].КОплате > 0 И НЕ МестаРеализации[Инд].ККМ.Пустая() Тогда
				Фирма = МестаРеализации[Инд].Фирма;
				КОплате = МестаРеализации[Инд].КОплате;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НачислениеНачисление = 0;
		НачислениеОплата = КОплате;
		СписаниеНачисление = 0;
		СписаниеОплата = 0;
		СписаниеСписание = 0;
		НадписьКартаЛОЛ = "";
		
		Чек = Неопределено;
		
		ПИН_Нужен = 1;
		ПИН_Хэш = "";
		
		//отработка лояльности
		СтруктураЗаказа = СформироватьЗаказПоМестуРеализации(Фирма, МестаРеализации[Инд].НомерЧека, МестаРеализации[Инд].НомерСмены);
		
		РезультатПресейл = ЛояльностьКлиент.РасчетЧека(СтруктураЗаказа);
		
		Если РезультатПресейл.Ошибка = 0 Тогда
			Если РезультатПресейл.Свойство("Результат", Чек) Тогда
				ОбновитьТаблицуТоваровПоЧеку(Чек);
			КонецЕсли;
		ИначеЕсли РезультатПресейл.Ошибка = -1 Тогда
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, РезультатПресейл.ТекстОшибки, "", "ПеречитатьБезЛояльности"));
			Возврат;
		Иначе
			ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, РезультатПресейл.ТекстОшибки, "", "ПеречитатьБезЛояльности"));
			Возврат;
		КонецЕсли;
		
		
		ДополнительныеПараметры.Свойство("ПИН_Нужен", ПИН_Нужен);
		ДополнительныеПараметры.Свойство("ПИН_Хэш", ПИН_Хэш);
		
		Если НЕ Чек = Неопределено Тогда
			Чек.Свойство("display_info", НадписьКартаЛОЛ);
			Чек.Свойство("request_id", ИдентификаторЛояльности);
			
			Чек.Свойство("n_kgl_add", НачислениеНачисление);
			Чек.Свойство("n_sum", НачислениеОплата);
			Чек.Свойство("s_kgl_add", СписаниеНачисление);
			Чек.Свойство("s_sum", СписаниеОплата);
			Чек.Свойство("s_kgl_rem", СписаниеСписание);
		КонецЕсли;	
		
		Если НЕ ПустаяСтрока(НомерКартыЛояльности) Тогда
			НадписьКартаЛОЛ = СтрШаблон("Карта КеГеЛьБУМ %1*****%2", Лев(НомерКартыЛояльности, 2), Прав(НомерКартыЛояльности, 4));
		Иначе
			НадписьКартаЛОЛ = "Нет карты КеГеЛьБУМ";
		КонецЕсли; 
		
		//Если НЕ ПустаяСтрока(НадписьКартаЛОЛ) Тогда
		//	НадписьКартаЛОЛ = СтрСоединить(НадписьКартаЛОЛ, Символы.ПС);
		//	НадписьКартаЛОЛ = Новый ФорматированнаяСтрока(НадписьКартаЛОЛ);
		//КонецЕсли;
		
		ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы_ВыборСпособаОплаты;
		ПараметрыФормы.Вставить("НомерКартыЛояльности", НомерКартыЛояльности);
		ПараметрыФормы.Вставить("НадписьКартаЛОЛ", НадписьКартаЛОЛ);
		ПараметрыФормы.Вставить("ПИН_Нужен", ПИН_Нужен);
		ПараметрыФормы.Вставить("ПИН_Хэш", ПИН_Хэш);
		ПараметрыФормы.Вставить("Баланс", Баланс);
		ПараметрыФормы.Вставить("МестаРеализации", ПолучитьМассивМестаРеализации(Фирма));
		
		ПараметрыФормы.Вставить("КОплате", КОплате);
		ПараметрыФормы.Вставить("НачислениеНачисление", НачислениеНачисление);
		ПараметрыФормы.Вставить("НачислениеОплата", НачислениеОплата);
		ПараметрыФормы.Вставить("СписаниеНачисление", СписаниеНачисление);
		ПараметрыФормы.Вставить("СписаниеОплата", СписаниеОплата);
		ПараметрыФормы.Вставить("СписаниеСписание", СписаниеСписание);
		ПараметрыФормы.Вставить("ТаблицаТовары", СформироватьТоварыДляПередачи(Фирма, "Товар,Количество,фАлкоголь,МестоРеализации,КОплате,action_group,ЦенаРеализации,Наименование,Фирма,ККМ,ЛояльностьГруппаАкции,СуммаРеализации"));
		ПараметрыФормы.Вставить("ПоказатьТаблицуТовары", Истина);
		ПараметрыФормы.Вставить("ИдентификаторЛояльности", ИдентификаторЛояльности);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НомерКартыЛояльности", НомерКартыЛояльности);
		ДополнительныеПараметры.Вставить("НадписьКартаЛОЛ", НадписьКартаЛОЛ);
		ДополнительныеПараметры.Вставить("ПИН_Нужен",ПИН_Нужен);
		ДополнительныеПараметры.Вставить("ПИН_Хэш", ПИН_Хэш);
		ДополнительныеПараметры.Вставить("ПараметрыФормы_ВыборСпособаОплаты", ПараметрыФормы);
		ДополнительныеПараметры.Вставить("ДанныеЛояльности", Чек);
		ДополнительныеПараметры.Вставить("Фирма", Фирма);

		ОткрытьФорму("Обработка.ГлавнаяФормаАК.Форма.ВыборСпособаОплаты", ПараметрыФормы, ЭтаФорма, , , , Новый ОписаниеОповещения("ОбрабокаЗакрытияФормыВыборСпособаОплаты", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		// выбор сделан
		ТипЧекаЛояльность = Результат.ТипЧекаЛояльность;
		
		Если Результат.ВариантОплаты = 2 Тогда
			// уже ввели корректный ПИН
			ДополнительныеПараметры.Вставить("ПИН_Нужен", 0);
			Если ДополнительныеПараметры.Свойство("ПараметрыФормы_ВыборСпособаОплаты") Тогда
			    ДополнительныеПараметры.ПараметрыФормы_ВыборСпособаОплаты.Вставить("ПИН_Нужен", 0);
			КонецЕсли;
			Фирма = Неопределено;
			ДополнительныеПараметры.Свойство("Фирма", Фирма);
			Если ЗначениеЗаполнено(Фирма) Тогда
				// пришли из варианта 0 - платим по-очереди
				СтрокаМестаРеализации = МестаРеализации.НайтиСтроки(Новый Структура("Фирма", Фирма));
				СтрокаМестаРеализации[0].КОплате = Результат.КОплате;
			Иначе
				// платим все сразу со списанием
				Для каждого СтрокаМестаРеализации Из МестаРеализации Цикл
					Если НЕ СтрокаМестаРеализации.Фискализирован Тогда
						СтрокаМестаРеализации.КОплате = СтрокаМестаРеализации.СписаниеОплата;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;
		ДополнительныеПараметры.Вставить("ДекорацияКеглиРубли", Результат.ДекорацияКеглиРубли);
		ПараметрыФормы = Новый Структура("НомерТелефона,Email,РабочееМесто,ДекорацияКеглиРубли", НомерТелефона, Email, глРабочееМесто, Результат.ДекорацияКеглиРубли); 		
		ОткрытьФорму("Обработка.ГлавнаяФормаАК.Форма.ЗапросВариантаПолученияЧека", ПараметрыФормы, ЭтаФорма, , , , Новый ОписаниеОповещения("ОбрабокаЗакрытияФормыЗапросВариантаПолученияЧека", ЭтотОбъект, ДополнительныеПараметры));
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбрабокаЗакрытияФормыЗапросВариантаПолученияЧека(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = Неопределено Тогда
		// по таймауту
		Возврат;
	КонецЕсли;
	
	глОтсечкаПростоя();
	
	Если Результат.СпособПолученияЧека = -1 Тогда

		ОткрытьФорму("Обработка.ГлавнаяФормаАК.Форма.ВыборСпособаОплаты", ДополнительныеПараметры.ПараметрыФормы_ВыборСпособаОплаты, ЭтаФорма, , , , Новый ОписаниеОповещения("ОбрабокаЗакрытияФормыВыборСпособаОплаты", ЭтотОбъект, ДополнительныеПараметры));
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат, "СпособПолученияЧека,НомерТелефона,Email");
		//дальше пошла оплата
		
		ПараметрыФормы = Новый Структура;
		
		Фирма = Неопределено;
		Если ДополнительныеПараметры.Свойство("Фирма", Фирма) И ЗначениеЗаполнено(Фирма) Тогда
			ПараметрыФормы.Вставить("МестаРеализации", ПолучитьМассивМестаРеализации(Фирма));
		Иначе
			ПараметрыФормы.Вставить("МестаРеализации", ПолучитьМассивМестаРеализации());
		КонецЕсли;
		ПараметрыФормы.Вставить("НомерКартыЛояльности", НомерКартыЛояльности);
		ПараметрыФормы.Вставить("НадписьКартаЛОЛ", ДополнительныеПараметры.НадписьКартаЛОЛ);
		ПараметрыФормы.Вставить("ЗаказСсылка", Заказ.Ссылка);
		
		ПараметрыФормы.Вставить("ВариантОплаты", ВариантОплаты);
		ПараметрыФормы.Вставить("ТипЧекаЛояльность", ТипЧекаЛояльность);
		
		ПараметрыФормы.Вставить("СпособПолученияЧека", СпособПолученияЧека);
		ПараметрыФормы.Вставить("НомерТелефона", НомерТелефона);
		ПараметрыФормы.Вставить("Email", Email);
		ПараметрыФормы.Вставить("РабочееМесто", глРабочееМесто);
		
		ПараметрыФормы.Вставить("ДанныеЛояльности", ЗначениеВСтрокуВнутр(ДополнительныеПараметры.ДанныеЛояльности));
		
		ОткрытьФорму("Обработка.ГлавнаяФормаАК.Форма.ФормаОплаты", ПараметрыФормы, ЭтаФорма, , , , Новый ОписаниеОповещения("ОбрабокаЗакрытияФормыОплаты", ЭтотОбъект, ДополнительныеПараметры));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбрабокаЗакрытияФормыОплаты(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		// по таймауту
		Возврат;
	КонецЕсли;
	
	Результат.Свойство("ПротоколРасчетов", ПротоколРасчетов);
	глОтсечкаПростоя();
	
	Если Результат.Ошибка = -1 Тогда
		// нажали оплатить позже
		ВывестиСообщениеОбОшибке(Результат);
		Возврат;
	ИначеЕсли Результат.Ошибка = 0 Тогда
		
		Если глРабочееМесто.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
			ЗавершитьОбслуживание(Неопределено);
			Возврат;
		КонецЕсли;
		
		Если ЗаказОплаченПолностью(Заказ.Ссылка) Тогда
			Элементы.ЗавершитьОбслуживание.Доступность = Истина;
		Иначе
			Элементы.ЗавершитьОбслуживание.Доступность = Ложь;
			ПеречитатьЗаказПоКартеКлиента();
		КонецЕсли;
		
		// все оплачено успешно
		Если СпособПолученияЧека = 1 Тогда
			Заголовок_6_1 = 
				"Чек/Чеки отправлен/ы Вам в СМС";
		ИначеЕсли СпособПолученияЧека = 2 Тогда
			Заголовок_6_1 = 
				"Чек/Чеки отправлен/ы Вам на e-mail";
		Иначе
			Заголовок_6_1 = 
				"Не забудьте забрать распечатанные чеки.";
		КонецЕсли;
		
		Если ПустаяСтрока(НомерКартыЛояльности) Тогда
			Если СпособПолученияЧека > 0 Тогда
				Заголовок_6_1 = Заголовок_6_1 + Символы.ПС +
					"Сохраните чек и потом Вы сможете привязать его в личном кабинете";
			Иначе
				Заголовок_6_1 = Заголовок_6_1 + Символы.ПС +
					"Вы сможете привязать их к своей карте КеГеЛьБУМ в Личном кабинете.";
			КонецЕсли;
		КонецЕсли;
		Элементы.НадписьЗавершение_6_1.Заголовок = Заголовок_6_1;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаЗавершение_6;
		
	Иначе
		// такого быть не должно
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти


&НаКлиенте
Процедура ЛогоККГурмэНажатие(Элемент)
	Если НЕ глПараметрыРМ.Тест Тогда
		Возврат;
	КонецЕсли;
	Если СчетчикНажатий = 12 Тогда
		ЗаказСсылка = ОткрытьФормуМодально("Документ.Заказ.ФормаВыбора");
		
		НачатьОжидание();
		
		РезультатПоиска = ЗаказПоКартеДоступаНаСервере(ЗаказСсылка.КартаДоступа);
		ЗаказСсылка = РезультатПоиска.ЗаказСсылка;
		Если НЕ ЗначениеЗаполнено(ЗаказСсылка) Тогда
			Если глРабочееМесто.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
				ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "По данной Карте гостя заказ не открыт.", "", "НачальноеОкно"));
			Иначе	
				ВывестиСообщениеОбОшибке(СтруктураОшибки(Истина, "По данному БЕЙДЖУ ГОСТЯ заказ не открыт.", "", "НачальноеОкно"));
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(РезультатПоиска.ОткрытыеМарки) Тогда
			ЗаказСМарками = ЗаказСсылка;
			Элементы.НадписьСписокМарок.Заголовок = РезультатПоиска.ОткрытыеМарки;
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПриветствие_1;
			Возврат;
		КонецЕсли;
		
		ОтобразитьЗаказВФорме(ЗаказСсылка);
		СчетчикНажатий = 0;
	Иначе
		СчетчикНажатий = СчетчикНажатий + 1;
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область РаботаСЛояльностью

&НаСервере
Процедура ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, РезультатПроверки)
	Лояльность.ЗаписатьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "INFO", РезультатПроверки);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуТоваровПоЧеку(Чек)
	
	Начисления = Неопределено;
	Списания = Неопределено;
	
	Если Чек.Свойство("sale_places") Тогда
		Для каждого ТекМестоРеализацииЛОЛ Из Чек.sale_places Цикл
			СтрокаМестаРеализации = МестаРеализации.НайтиСтроки(Новый Структура("КодТТ", ТекМестоРеализацииЛОЛ.sale_place));
			Если СтрокаМестаРеализации.Количество() = 1 Тогда
				ТекМестоРеализацииЛОЛ.Свойство("n_kgl_add", СтрокаМестаРеализации[0].НачислениеНачисление);
				ТекМестоРеализацииЛОЛ.Свойство("n_sum", СтрокаМестаРеализации[0].НачислениеОплата);
				ТекМестоРеализацииЛОЛ.Свойство("s_kgl_add", СтрокаМестаРеализации[0].СписаниеНачисление);
				ТекМестоРеализацииЛОЛ.Свойство("s_sum", СтрокаМестаРеализации[0].СписаниеОплата);
				ТекМестоРеализацииЛОЛ.Свойство("s_kgl_rem", СтрокаМестаРеализации[0].СписаниеСписание);
			КонецЕсли;
			
			Если ТекМестоРеализацииЛОЛ.Свойство("order_str_n", Начисления) Тогда
				Для каждого СтрокаЛОЛ Из Начисления Цикл
					ОбновитьСтрокуТоваров(СтрокаЛОЛ, 1);
				КонецЦикла;
			КонецЕсли;
			Если ТекМестоРеализацииЛОЛ.Свойство("order_str_s", Списания) Тогда
				Для каждого СтрокаЛОЛ Из Списания Цикл
					ОбновитьСтрокуТоваров(СтрокаЛОЛ, 2);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Чек.Свойство("order_str_n", Начисления) Тогда
			Для каждого СтрокаЛОЛ Из Начисления Цикл
				ОбновитьСтрокуТоваров(СтрокаЛОЛ, 1);
				//Если СтрокаЛОЛ.str_type = "T" Тогда
				//	СтрокаТовары = ТаблицаТовары.НайтиСтроки(Новый Структура("ИдСтроки", СтрокаЛОЛ.str_no));
				//	Если СтрокаТовары.Количество() > 0 Тогда
				//		СтрокаТовары[0].action_group = СтрокаЛОЛ.action_group;
				//		СтрокаТовары[0].НачислениеОплата = СтрокаЛОЛ.strsum_fact;
				//		СтрокаТовары[0].НачислениеЦена = СтрокаЛОЛ.price_fact;
				//	КонецЕсли;
				//ИначеЕсли СтрокаЛОЛ.str_type = "S" Тогда
				//	СтрокаТовары = ТаблицаТовары.НайтиСтроки(Новый Структура("ИдСтроки", СтрокаЛОЛ.str_no));
				//	Если СтрокаТовары.Количество() > 0 Тогда
				//		СтрокаТовары[0].action_group = СтрокаЛОЛ.action_group;
				//	КонецЕсли;
				//КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Чек.Свойство("order_str_s", Списания) Тогда
			Для каждого СтрокаЛОЛ Из Списания Цикл
				ОбновитьСтрокуТоваров(СтрокаЛОЛ, 2);
				//Если СтрокаЛОЛ.str_type = "T" Тогда
				//	СтрокаТовары = ТаблицаТовары.НайтиСтроки(Новый Структура("ИдСтроки", СтрокаЛОЛ.str_no));
				//	Если СтрокаТовары.Количество() > 0 Тогда
				//		СтрокаТовары[0].action_group = СтрокаЛОЛ.action_group;
				//		СтрокаТовары[0].СписаниеОплата = СтрокаЛОЛ.strsum_fact;
				//		СтрокаТовары[0].СписаниеЦена = СтрокаЛОЛ.price_fact;
				//	КонецЕсли;
				//ИначеЕсли СтрокаЛОЛ.str_type = "S" Тогда
				//	СтрокаТовары = ТаблицаТовары.НайтиСтроки(Новый Структура("ИдСтроки", СтрокаЛОЛ.str_no));
				//	Если СтрокаТовары.Количество() > 0 Тогда
				//		СтрокаТовары[0].action_group = СтрокаЛОЛ.action_group;
				//	КонецЕсли;
				//КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуТоваров(СтрокаЛОЛ, СписаниеНачисление)
	
	СтрокаТовары = ТаблицаТовары.НайтиСтроки(Новый Структура("ИдСтроки", СтрокаЛОЛ.str_no));
	Если СтрокаТовары.Количество() > 0 Тогда
		СтрокаТовары[0].action_group = СтрокаЛОЛ.action_group;
		СтрокаТовары[0].ЛояльностьГруппаАкции = СтрокаЛОЛ.action_group;
		Если СтрокаЛОЛ.str_type = "T" Тогда
			Если СписаниеНачисление = 1 Тогда // начисление
				СтрокаТовары[0].НачислениеОплата = СтрокаЛОЛ.strsum_fact;
				СтрокаТовары[0].НачислениеЦена = СтрокаЛОЛ.price_fact;
			ИначеЕсли СписаниеНачисление = 2 Тогда // списание
				СтрокаТовары[0].СписаниеОплата = СтрокаЛОЛ.strsum_fact;
				СтрокаТовары[0].СписаниеЦена = СтрокаЛОЛ.price_fact;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ВыводОшибок

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураОшибки(Ошибка = Ложь, ТекстОшибки1 = "", ТекстОшибки2 = "", РезультатКнопкиОК = "")
	
	Возврат Новый Структура("Ошибка,ТекстОшибки1,ТекстОшибки2,РезультатКнопкиОК", Ошибка, ТекстОшибки1, ТекстОшибки2, РезультатКнопкиОК);

КонецФункции

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(СтруктураОшибки, КлючУникальности = Истина)

	ЗавершитьОжидание();
	Попытка
		СтруктураОшибки.Вставить("ПараметрШаблона1", ?(глПараметрыРМ.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан"), "ресторан", "магазин"));
	Исключение
	    СтруктураОшибки.Вставить("ПараметрШаблона1", "магазин");
	КонецПопытки;
	ОткрытьФорму("Обработка.ГлавнаяФормаАК.Форма.ФормаОшибка", СтруктураОшибки, ЭтотОбъект, КлючУникальности, , , Новый ОписаниеОповещения("ВывестиСообщениеОбОшибкеЗавершение", ЭтотОбъект), );
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОбОшибкеЗавершение(Результат, ДополнительныеПараметры) Экспорт 
#Если ТолстыйКлиентУправляемоеПриложение Тогда
      	
	Если ПустаяСтрока(Результат) Тогда
	    // ничего не делаем
	ИначеЕсли ВРег(Результат) = "НАЧАЛЬНОЕОКНО" Тогда
		ОтобразитьНачальнуюСтраницу();
	ИначеЕсли ВРег(Результат) = "ОШИБКАЗАПУСКА" Тогда
		ОткрытьГлавнуюФорму();
	ИначеЕсли ВРег(Результат) = "ЗАКРЫТЬПРИЛОЖЕНИЕ" Тогда
		ОткрытьГлавнуюФорму();
	ИначеЕсли ВРег(Результат) = "ОТКРЫТЬГЛАВНУЮФОРМУ" Тогда
		ОткрытьГлавнуюФорму();
	ИначеЕсли ВРег(Результат) = "СЕРВИСНОЕМЕНЮ" Тогда
		ОткрытьМенюОпераций();
	ИначеЕсли ВРег(Результат) = "ПЕРЕЧИТАТЬБЕЗЛОЯЛЬНОСТИ" Тогда
		ПеречитатьЗаказПоКартеКлиента(Ложь);
	Иначе
		ОтобразитьНачальнуюСтраницу();
	КонецЕсли;
#КонецЕсли	
	
КонецПроцедуры

#КонецОбласти


#Область ПроцедурыИнициализации

&НаСервереБезКонтекста
Функция ТекущаяДатаСеансаНаСервере()
	Возврат ТекущаяДатаСеанса();
КонецФункции

&НаКлиенте
Процедура ПроверитьОбновитьДатуСеанса()
	
	РазностьВремени = ТекущаяДата() - ТекущаяДатаСеансаНаСервере();
	РазностьВремени = Макс(РазностьВремени, -РазностьВремени);
	Если РазностьВремени > 800 Тогда
		ЗаписьЖурналаРегистрации("Разность времени с сервером", УровеньЖурналаРегистрации.Ошибка, , ,""+РазностьВремени,);
		ДатаСервера = ТекущаяДатаСеансаНаСервере();
		//ЗапуститьПриложение("cmd /cdate " + Формат(ДатаСервера, "ДФ=dd.MM.yyyy") + " && time " + Формат(ДатаСервера, "ДФ=H:mm:ss"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаНаличияОткрытыхСмен(МестоРеализации)
	
	СтруктураОшибки = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МестоРеализации",	МестоРеализации);	 //
	Запрос.УстановитьПараметр("ТекДата",	ТекущаяДатаСеанса());	 //Дата
	Запрос.Текст = 
	"
	//|ВЫБРАТЬ РАЗЛИЧНЫЕ
	//|	РабочиеМеста.МестоРеализации КАК МестоРеализации
	//|ПОМЕСТИТЬ втВсеМестаРеализации
	//|ИЗ
	//|	Справочник.РабочиеМеста КАК РабочиеМеста
	//|ГДЕ
	//|	НЕ РабочиеМеста.ПометкаУдаления
	//|	И НЕ РабочиеМеста.МестоРеализации.Ссылка ЕСТЬ NULL
	//|	И РабочиеМеста.ИнформационнаяБаза = &ИБ
	//|
	//|ИНДЕКСИРОВАТЬ ПО
	//|	МестоРеализации
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеСмены.МестоРеализации КАК МестоРеализации,
	|	ТекущиеСмены.Смена.Дата КАК ПараметрОшибки,
	|	ВЫБОР
	|		КОГДА ТекущиеСмены.Смена.Ссылка ЕСТЬ NULL
	|			ТОГДА ""Смена за %1 не открыта""
	|		КОГДА РАЗНОСТЬДАТ(ТекущиеСмены.Смена.Дата, &ТекДата, ДЕНЬ) > 0
	|			ТОГДА ""Смена за %1 не закрыта""
	|	КОНЕЦ КАК ШаблонОшибки
	|ИЗ
	|	РегистрСведений.ТекущиеСмены КАК ТекущиеСмены
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеМестаРеализации КАК втВсеМестаРеализации
	//|		ПО ТекущиеСмены.МестоРеализации = втВсеМестаРеализации.МестоРеализации
	|ГДЕ
	|	ТекущиеСмены.МестоРеализации = (&МестоРеализации) И
	|	(ТекущиеСмены.Смена.Ссылка ЕСТЬ NULL
	|			ИЛИ РАЗНОСТЬДАТ(ТекущиеСмены.Смена.Дата, &ТекДата, ДЕНЬ) > 0)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		СтруктураОшибки.Вставить("Ошибка", Ложь);
	Иначе
		СтруктураОшибки.Вставить("Ошибка", Истина);
		СтруктураОшибки.Вставить("ТекстОшибки2", "Произвести попытку перезапуска?");
		СтруктураОшибки.Вставить("РезультатКнопкиОК", "ОткрытьГлавнуюФорму");
		ВыборкаОшибок = РезультатЗапроса.Выбрать();
		ТекстОшибки = "";
		Пока ВыборкаОшибок.Следующий() Цикл
			ТекстОшибки = ТекстОшибки + СтрЗаменить(ВыборкаОшибок.ШаблонОшибки, "%1", Формат(ВыборкаОшибок.ПараметрОшибки, "ДЛФ=D")) + Символы.ПС;	
		КонецЦикла;
		СтруктураОшибки.Вставить("ТекстОшибки1", ТекстОшибки);
	КонецЕсли;
	
	Возврат СтруктураОшибки;
	
КонецФункции

&НаКлиенте
Функция ПроверкаКассовойСмены(Касса)
	
	ККМ = Касса.ПолучитьОбъект();
	Обработка_ККМ = Обработка_ККМ;
	ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
	
	// поиск и закрытие вчерашней открытой смены ККТ
	ВыходныеПараметры = Новый Структура;
	ВходныеПараметры = Новый Структура;
	Попытка
		Ответ = Обработка_ККМ.ВыполнитьКоманду("ПолучитьТекущееСостояние", ВходныеПараметры, ВыходныеПараметры);
	Исключение
		Возврат СтруктураОшибки(Истина, "Ошибка ККМ", ОписаниеОшибки(), "ОшибкаЗапуска");
	КонецПопытки;
	Если НЕ Ответ Тогда
		ТекстОшибки = "";
		Если ВходныеПараметры.Свойство("ОписаниеОшибки") Тогда
			ТекстОшибки = СтрСоединить(ВыходныеПараметры.ОписаниеОшибки, Символы.ПС);
		КонецЕсли;
		Возврат СтруктураОшибки(Истина, "Текущее состояние ККТ", ТекстОшибки, "ОшибкаЗапуска");
	ИначеЕсли НЕ ВыходныеПараметры.СменаОткрыта Тогда
		Возврат СтруктураОшибки(Истина, "Текущее состояние ККТ", "Не открыта смена ККТ.", "ОшибкаЗапуска");
	ИначеЕсли НачалоДня(ВыходныеПараметры.ДатаСменыККТ) <> НачалоДня(ТекущаяДата()) 
		И НЕ ВыходныеПараметры.ДатаСменыККТ = '00010101' Тогда
		Возврат СтруктураОшибки(Истина, "Текущее состояние ККТ", "Не закрыта смена прошлого дня.", "ОшибкаЗапуска");
	КонецЕсли;
	
	ДокСмены = Обработки.ГлавнаяФормаАК.ПолучитьСменуКассы(Касса);
	Если ДокСмены.Пустая() Тогда
		Возврат СтруктураОшибки(Истина, "Смена ККМ", "Смена ККМ не открыта.", "ОшибкаЗапуска");
	КонецЕсли;
	
	Возврат СтруктураОшибки();
	
КонецФункции

#КонецОбласти


#Область ОтображениеЭлементовИнтерфейса

&НаКлиенте
Процедура ОбождатьМиллисекунд(Миллисекунды = 5000)
	
	Дедлайн = ТекущаяУниверсальнаяДатаВМиллисекундах() + Миллисекунды;
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < Дедлайн Цикл
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНачальнуюСтраницу() Экспорт
	
	ЗавершитьОжидание();
	ОчиститьДанныеФормы();
	ЗаказСМарками = Неопределено;
//-	_КартаДоступа = "";

	РазблокироватьЗаказПоФирмамРМ();
	//Попытка
	//	ЗаказОбъектБлок.Разблокировать();
	//	ЗаказОбъектБлок = Неопределено;
	//Исключение
	//КонецПопытки;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПриветствие;
	DRV = глТорговоеОборудование.Scaner1C;
	Пока DRV.DataCount Цикл
		DRV.УдалитьСообщение();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеФормы()
	
	Email = "";
	Баланс = 0;
	ВариантОплаты = 0;
	ЗначениеВРеквизитФормы(РеквизитФормыВЗначение("ПустойЗаказ"), "Заказ");
	КОплате = 0;
	МестаРеализации.Очистить();
	НомерКартыЛояльности = "";
	НомерТелефона = "";
	СпособПолученияЧека = 0;
	СуммаЗаказа = 0;
	ТаблицаТовары.Очистить();	
	ТипЧекаЛояльность = 1;
	ФИО = "";
	флЗаказОткрыт = Ложь;
	ИдентификаторЛояльности = "";
	
КонецПроцедуры

&НаСервере
Функция ОбновитьРеквизитыПоЗаказу(ЗаказСсылка, Тест)
	
	Если ЗначениеЗаполнено(ЗаказСсылка) Тогда
		
		ЗначениеВРеквизитФормы(ЗаказСсылка.ПолучитьОбъект(), "Заказ");
		НомерКартыЛояльности = Заказ.НомерКартыЛояльности;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказТовары.Сумма КАК СуммаЗаказа,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗаказТовары.ДокументОплаты.Фискализирован, ЛОЖЬ)
		|			ТОГДА 0
		|		ИНАЧЕ ЗаказТовары.СуммаРеализации
		|	КОНЕЦ КАК КОплате,
		|	ЗаказТовары.Автор КАК Автор,
		|	ЗаказТовары.АвтоПозиция КАК АвтоПозиция,
		|	ЗаказТовары.Товар КАК Товар,
		|	ЗаказТовары.Количество КАК Количество,
		|	ЗаказТовары.КоличествоУдалено КАК КоличествоУдалено,
		|	ЗаказТовары.Цена КАК Цена,
		|	ЗаказТовары.Сумма КАК Сумма,
		|	ЗаказТовары.ЦенаРеализации КАК ЦенаРеализации,
		|	ЗаказТовары.СуммаРеализации КАК СуммаРеализации,
		|	ЗаказТовары.Статус КАК Статус,
		|	ЗаказТовары.Подача КАК Подача,
		|	ЗаказТовары.ГруппаПечати КАК ГруппаПечати,
		|	ЗаказТовары.ГруппаОплаты КАК ГруппаОплаты,
		|	ЗаказТовары.РасчетыПоТарифу КАК РасчетыПоТарифу,
		|	ЗаказТовары.Подарок КАК Подарок,
		|	ЗаказТовары.ТипЦен КАК ТипЦен,
		|	ЗаказТовары.ИдСтроки КАК ИдСтроки,
		|	ЗаказТовары.Источник КАК Источник,
		|	ЗаказТовары.Акция КАК Акция,
		|	ЗаказТовары.Фирма КАК Фирма,
		|	ЗаказТовары.ПДФ КАК ПДФ,
		|	ЗаказТовары.ШК КАК ШК,
		|	ЗаказТовары.фАлкоголь КАК фАлкоголь,
		|	ЗаказТовары.ДокументОплаты КАК ДокументОплаты,
		|	ЗаказТовары.ЛояльностьСтатус КАК ЛояльностьСтатус,
		|	ЗаказТовары.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
		|	ЗаказТовары.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
		|	ЗаказТовары.КоличествоНачальное КАК КоличествоНачальное,
		|	ЗаказТовары.ВремяДобавления КАК ВремяДобавления,
		|	ЗаказТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказТовары.СуммаНДС КАК СуммаНДС,
		|	ЗаказТовары.Фирма.МестоРеализации КАК МестоРеализации,
		|	ЗаказТовары.Фирма.МестоРеализации.Код КАК МестоРеализации_ИД,
		|	0 КАК НомерСтрокиСпецифики,
		|	ЗаказТовары.НомерСтроки КАК НомерСтрокиТовара,
		|	ЗаказТовары.Товар.Наименование КАК Наименование,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗаказТовары.ДокументОплаты.Фискализирован, ЛОЖЬ)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СтатусОплаты,
		|	""T"" КАК _ТоварТип,
		|	NULL КАК Специфика,
		|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА ЗаказТовары.ДокументОплаты.Фискализирован ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА ЗаказТовары.ДокументОплаты.Фискализирован = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК ОшибкаОплаты,
		|	ЗаказТовары.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
		|ПОМЕСТИТЬ втТоварыСпецифики
		|ИЗ
		|	Документ.Заказ.Товары КАК ЗаказТовары
		|ГДЕ
		|	ЗаказТовары.Ссылка = &ЗаказСсылка
		|	И ЗаказТовары.Количество <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	ЗаказСпецифики.Специфика,
		|	0,
		|	0,
		|	ЗаказСпецифики.ЦенаРеализации,
		|	0,
		|	0,
		|	0,
		|	NULL,
		|	NULL,
		|	ЗаказСпецифики.ГруппаПечати,
		|	ЗаказСпецифики.ГруппаОплаты,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ЗаказСпецифики.ИдСтроки,
		|	NULL,
		|	NULL,
		|	ЗаказТовары.Фирма,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ЗаказСпецифики.Ссылка.МестоРеализации,
		|	ЗаказСпецифики.Ссылка.МестоРеализации.Код,
		|	ЗаказСпецифики.НомерСтроки,
		|	ЗаказСпецифики.НомерСтрокиТовара,
		|	"" - "" + ЗаказСпецифики.Специфика.Наименование,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗаказТовары.ДокументОплаты.Фискализирован, ЛОЖЬ)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ,
		|	""S"",
		|	ЗаказСпецифики.Специфика,
		|	ЗаказСпецифики.НомерСтроки,
		|	ВЫБОР
		|		КОГДА ЗаказТовары.ДокументОплаты.Фискализирован ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА ЗаказТовары.ДокументОплаты.Фискализирован = ИСТИНА
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ,
		|	ЗаказСпецифики.ЛояльностьГруппаАкции
		|ИЗ
		|	Документ.Заказ.Специфики КАК ЗаказСпецифики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ.Товары КАК ЗаказТовары
		|		ПО ЗаказСпецифики.Ссылка = ЗаказТовары.Ссылка
		|			И ЗаказСпецифики.НомерСтрокиТовара = ЗаказТовары.НомерСтроки
		|ГДЕ
		|	ЗаказСпецифики.Ссылка = &ЗаказСсылка
		|	И ЗаказСпецифики.Количество <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТоварыСпецифики.СуммаЗаказа КАК СуммаЗаказа,
		|	втТоварыСпецифики.КОплате КАК КОплате,
		|	втТоварыСпецифики.Автор КАК Автор,
		|	втТоварыСпецифики.АвтоПозиция КАК АвтоПозиция,
		|	втТоварыСпецифики.Товар КАК Товар,
		|	втТоварыСпецифики.Количество КАК Количество,
		|	втТоварыСпецифики.КоличествоУдалено КАК КоличествоУдалено,
		|	втТоварыСпецифики.Цена КАК Цена,
		|	втТоварыСпецифики.Сумма КАК Сумма,
		|	втТоварыСпецифики.ЦенаРеализации КАК ЦенаРеализации,
		|	втТоварыСпецифики.СуммаРеализации КАК СуммаРеализации,
		|	втТоварыСпецифики.Статус КАК Статус,
		|	втТоварыСпецифики.Подача КАК Подача,
		|	втТоварыСпецифики.ГруппаПечати КАК ГруппаПечати,
		|	втТоварыСпецифики.ГруппаОплаты КАК ГруппаОплаты,
		|	втТоварыСпецифики.РасчетыПоТарифу КАК РасчетыПоТарифу,
		|	втТоварыСпецифики.Подарок КАК Подарок,
		|	втТоварыСпецифики.ТипЦен КАК ТипЦен,
		|	втТоварыСпецифики.ИдСтроки КАК ИдСтроки,
		|	втТоварыСпецифики.Источник КАК Источник,
		|	втТоварыСпецифики.Акция КАК Акция,
		|	втТоварыСпецифики.Фирма КАК Фирма,
		|	втТоварыСпецифики.ПДФ КАК ПДФ,
		|	втТоварыСпецифики.ШК КАК ШК,
		|	втТоварыСпецифики.фАлкоголь КАК фАлкоголь,
		|	втТоварыСпецифики.ДокументОплаты КАК ДокументОплаты,
		|	втТоварыСпецифики.ЛояльностьСтатус КАК ЛояльностьСтатус,
		|	втТоварыСпецифики.ЛояльностьСтатусАкции КАК ЛояльностьСтатусАкции,
		|	втТоварыСпецифики.ЛояльностьДопСтатусАкции КАК ЛояльностьДопСтатусАкции,
		|	втТоварыСпецифики.КоличествоНачальное КАК КоличествоНачальное,
		|	втТоварыСпецифики.ВремяДобавления КАК ВремяДобавления,
		|	втТоварыСпецифики.СтавкаНДС КАК СтавкаНДС,
		|	втТоварыСпецифики.СуммаНДС КАК СуммаНДС,
		|	втТоварыСпецифики.МестоРеализации КАК МестоРеализации,
		|	втТоварыСпецифики.МестоРеализации_ИД КАК МестоРеализации_ИД,
		|	втТоварыСпецифики.НомерСтрокиСпецифики КАК НомерСтрокиСпецифики,
		|	втТоварыСпецифики.НомерСтрокиТовара КАК НомерСтрокиТовара,
		|	втТоварыСпецифики.Наименование КАК Наименование,
		|	втТоварыСпецифики.СтатусОплаты КАК СтатусОплаты,
		|	втТоварыСпецифики._ТоварТип КАК _ТоварТип,
		|	втТоварыСпецифики.Специфика КАК Специфика,
		|	втТоварыСпецифики.ОшибкаОплаты КАК ОшибкаОплаты,
		|	втТоварыСпецифики.ЛояльностьГруппаАкции КАК ЛояльностьГруппаАкции
		|ИЗ
		|	втТоварыСпецифики КАК втТоварыСпецифики
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтрокиТовара,
		|	НомерСтрокиСпецифики
		|ИТОГИ
		|	СУММА(СуммаЗаказа),
		|	СУММА(КОплате),
		|	СУММА(Сумма),
		|	СУММА(СуммаРеализации),
		|	МИНИМУМ(СтатусОплаты),
		|	МИНИМУМ(ОшибкаОплаты)
		|ПО
		|	ОБЩИЕ,
		|	Фирма";
		
		ИтогиПоЗаказу = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Если ИтогиПоЗаказу.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИтогиПоЗаказу, "СуммаЗаказа,КОплате");
			
			ИтогиПоМестуРеализации = ИтогиПоЗаказу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ИтогиПоМестуРеализации.Следующий() Цикл
				СтрокаМестаРеализации = МестаРеализации.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаМестаРеализации, ИтогиПоМестуРеализации, "Фирма,КОплате");
				СтрокаМестаРеализации.МестоРеализации = СтрокаМестаРеализации.Фирма.МестоРеализации;
				СтрокаМестаРеализации.КодТТ = СтрокаМестаРеализации.Фирма.КодТТ;
				СтрокаМестаРеализации.Фискализирован = ИтогиПоМестуРеализации.СтатусОплаты = 1;
				
				Если ИтогиПоМестуРеализации.СтатусОплаты < 1 И ИтогиПоМестуРеализации.ОшибкаОплаты = -1 Тогда
					Возврат СтруктураОшибки(Истина, "Нельзя оплатить заказ " + ИтогиПоМестуРеализации.Фирма, "Не завершена предыдущая оплата. Обратитесь к продавцу-консультанту %1а.", "НачальноеОкно");
				КонецЕсли;
				
				СтрокиЗаказа = ИтогиПоМестуРеализации.Выбрать();
				Пока СтрокиЗаказа.Следующий() Цикл
					ЗаполнитьЗначенияСвойств(ТаблицаТовары.Добавить(), СтрокиЗаказа);	
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		МестаРеализации.Сортировать("Фискализирован Убыв,КОплате Убыв");
		
		//ДанныеЛояльностиПоЗаказу = Лояльность.ПолучитьДанныеЛояльностиПоЗаказу(ЗаказСсылка, "INFO");
		ДанныеЛояльностиПоЗаказу = ЛояльностьКлиентСервер.ПолучитьДанныеГостя(ЗаказСсылка.НомерКартыЛояльности, Тест);
		Если НЕ ДанныеЛояльностиПоЗаказу.Ошибка Тогда
			НомерТелефона = Формат(ДанныеЛояльностиПоЗаказу.НомерТелефона, "ЧДЦ=; ЧГ=0");
			Email = ДанныеЛояльностиПоЗаказу.ЭлектроннаяПочта;
			ФИО = ДанныеЛояльностиПоЗаказу.ФИО;
			Баланс = ДанныеЛояльностиПоЗаказу.Баланс;
			НомерКартыЛояльности = СокрЛП(Формат(ДанныеЛояльностиПоЗаказу.НомерКарты, "ЧГ=0"));
		КонецЕсли;
		//НомерКартыЛояльности = ДанныеЛояльностиПоЗаказу.НомерКарты;
		
	Иначе
		
		ОчиститьДанныеФормы();
		
	КонецЕсли;
	
	Возврат СтруктураОшибки();
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеЭлементовДляМестаРеализации(МестоРеализации)
	
	// блок Кухни Полли
	Если МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		// логотипы на всех страницах
		Элементы.ЛогоККГурмэ.Картинка = БиблиотекаКартинок.ЛогоКухняПолли;
		Элементы.ЛогоККГурмэ1.Картинка = БиблиотекаКартинок.ЛогоКухняПолли;
		Элементы.ЛогоККГурмэ3.Картинка = БиблиотекаКартинок.ЛогоКухняПолли;
		
		Элементы.ЛогоККГурмэ.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
		Элементы.ЛогоККГурмэ.Высота = 7;
		
		Элементы.ЛогоККГурмэ2.Картинка = БиблиотекаКартинок.ЛогоКухняПолли;
		Элементы.ЛогоККГурмэ2.Ширина = 0;
		Элементы.ЛогоККГурмэ2.Высота = 0;
		Элементы.ЛогоККГурмэ2.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
		
		// СтраницаПриветствие
		Элементы.ГруппаИконки.Видимость = Ложь;
		
		Элементы.НадписьПриветствие1.Заголовок = Новый ФорматированнаяСтрока("ОПЛАТА ЗАКАЗА:");
		Элементы.НадписьПриветствие.Заголовок = Новый ФорматированнаяСтрока(
			"Приложите Вашу карту гостя
			|к считывателю
			|
			|",
			БиблиотекаКартинок.СтрелкаВнизОранжевая);
		//Элементы.НадписьПриветствие.Заголовок = 
		//	"Приложите Вашу карту гостя
		//	|к считывателю";
		
		// СтраницаПриветствие_1
		
		// СтраницаЗавершение_6
		// Не актуально для КП
		Элементы.СтрокаСостояния.Видимость = Истина;
		Элементы.ГруппаСтрокаСостояния.Видимость = Ложь;
		
		// СтраницаЗавершение_7
		Элементы.НадписьЗавершение_7_2.Заголовок = "Не забудьте сдать карту гостя";
		
	КонецЕсли;
	
	// блок Классного магазина
	Если МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.КМ") Тогда
		
		Элементы.ЛогоККГурмэ.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Лево;
		Элементы.ЛогоККГурмэ.Высота = 0;
		
		// СтраницаПриветствие
		Элементы.НадписьПриветствие1.Заголовок = Новый ФорматированнаяСтрока("ОПЛАТА заказа МясновЪ");
		Элементы.НадписьПриветствие.Заголовок = Новый ФорматированнаяСтрока(
			"Приложите Ваш БЕЙДЖ ГОСТЯ
			|к считывателю
			|
			|",
			БиблиотекаКартинок.СтрелкаВнизБелая140);
		Элементы.НадписьПриветствие.ЦветФона = ЦветаСтиля.ЦветТемы;
		Элементы.НадписьПриветствие.ЦветТекста = ЦветаСтиля.ЦветФонаФормы;
		
		
		// СтраницаПриветствие_1
		// не актуально при отсутствии КП
		
		// СтраницаЗавершение_6
		Элементы.ЛогоККГурмэ2.Ширина = 19;
		Элементы.ЛогоККГурмэ2.Высота = 2;
		Элементы.ЛогоККГурмэ2.РазмерКартинки = РазмерКартинки.Растянуть;
		
		Элементы.СтрокаСостояния.Видимость = Ложь;
		Элементы.ГруппаСтрокаСостояния.Видимость = Истина;
		
		// СтраницаЗавершение_7
		Элементы.НадписьЗавершение_7_1.Заголовок = 
			"Спасибо за покупки в
			|МясновЪ и Отдохни!
			|Ждём Вас снова!";
		Элементы.НадписьЗавершение_7_2.Заголовок = 
			"Оставьте БЕЙДЖ ГОСТЯ
			|в корзинке на кассе";
		
	КонецЕсли; 
	
	// блок МОКП
	
КонецПроцедуры

#КонецОбласти


#Область СервисныеПроцедуры

&НаКлиенте
Процедура ОткрытьМенюОпераций(Сотрудник = Неопределено) 

	флЗаказОткрыт = Истина;
	ЗавершитьОжидание();
	
	ПараметрыФормы = Новый Структура;
	Ф = ОткрытьФорму("Обработка.ГлавнаяФормаАК.Форма.СервисноеМеню", ПараметрыФормы, ЭтотОбъект, , , , Новый ОписаниеОповещения("ОткрытьМенюОперацийЗавершение", ЭтотОбъект));
	
	Если НЕ Ф.Открыта() Тогда
		флЗаказОткрыт = Ложь;
		ОтобразитьНачальнуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюОперацийЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	флЗаказОткрыт = Ложь;
	Если Результат = Неопределено Тогда
		ОтобразитьНачальнуюСтраницу();
	Иначе
		ВывестиСообщениеОбОшибке(Результат, Строка(Новый УникальныйИдентификатор));
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область Блокировка

&НаКлиенте
Функция ЗаблокироватьЗаказПоФирмамРМ(ЗаказСсылка)
	
	ЗаказОбъектБлок = ЗаказСсылка.ПолучитьОбъект();
	МассивФирм = ПолучитьМассивФирмРМ();
	Для каждого ТекФирма Из МассивФирм Цикл
		РезультатБлокировки = ЗаказОбъектБлок.ЗаблокироватьРедактированиеПоФирме(ТекФирма, );
		Если НЕ РезультатБлокировки.Успех Тогда
			Возврат РезультатБлокировки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатБлокировки;
	
КонецФункции

&НаКлиенте
Процедура РазблокироватьЗаказПоФирмамРМ()
	
	Если ЗаказОбъектБлок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФирм = ПолучитьМассивФирмРМ();
	Для каждого ТекФирма Из МассивФирм Цикл
		ЗаказОбъектБлок.РазблокироватьРедактированиеПоФирме(ТекФирма, );
	КонецЦикла;
	ЗаказОбъектБлок = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивФирмРМ()
	
	МассивФирм = Новый Массив;
	Если глПараметрыРМ.ККМЕсть Тогда
		МассивФирм.Добавить(глПараметрыРМ.ККМ.Фирма);
	КонецЕсли;	
	Если глПараметрыРМ.ККМЕстьДоп Тогда
		Для каждого ТО Из глПараметрыРМ.ККМСписокДоп Цикл
			МассивФирм.Добавить(ТО.Значение.Фирма);
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивФирм;
	
КонецФункции

#КонецОбласти


#Область Ожидание

&НаКлиенте
Процедура НачатьОжидание()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПриветствие;
	Если глРабочееМесто.МестоРеализации = ПредопределенноеЗначение("Справочник.МестаРеализации.Ресторан") Тогда
		Элементы.НадписьПриветствие.Видимость = Ложь;
	КонецЕсли;
	НачатьОжиданиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НачатьОжиданиеНаСервере()
	
	Элементы.ДекорацияОжидание.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	Элементы.НадписьОжидание.Заголовок = "Пожалуйста, подождите...";
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьОжидание()
	
	Элементы.ДекорацияОжидание.Картинка = Новый Картинка;
	Элементы.НадписьОжидание.Заголовок = "";
	Элементы.НадписьПриветствие.Видимость = Истина;

КонецПроцедуры

#КонецОбласти


&НаСервере
Функция ЗаказПоКартеДоступаНаСервере(КартаДоступа)
	
	Результат = Новый Структура("ЗаказСсылка,ОткрытыеМарки", Неопределено, "");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КартаДоступа", КартаДоступа);
	
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ОткрытыеЗаказыПоКартам.Заказ КАК Заказ
	|ПОМЕСТИТЬ т
	|ИЗ
	|	РегистрСведений.ОткрытыеЗаказыПоКартам КАК ОткрытыеЗаказыПоКартам
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Заказ.Товары КАК ЗаказТовары
	//|		ПО ОткрытыеЗаказыПоКартам.Заказ = ЗаказТовары.Ссылка
	//|			И (ЗаказТовары.Количество > 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|		ПО ОткрытыеЗаказыПоКартам.Заказ = ЗаказДопИнф.Заказ
	|ГДЕ
	|	ОткрытыеЗаказыПоКартам.КартаДоступа = &КартаДоступа
	|	И ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Заказ КАК Заказ
	|ИЗ
	|	т КАК т";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат.Вставить("ЗаказСсылка", Выборка.Заказ);
		Запрос.УстановитьПараметр("ЗаказСсылка",  Выборка.Заказ);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказТоварыДопИнф.Товар.Наименование КАК Товар
		|ИЗ
		|	РегистрСведений.ЗаказТоварыДопИнф КАК ЗаказТоварыДопИнф
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Марки КАК Марки
		|		ПО ЗаказТоварыДопИнф.Заказ = Марки.Заказ
		|			И ЗаказТоварыДопИнф.НомерМарки = Марки.НомерМарки
		|			И (ЗаказТоварыДопИнф.Товар ССЫЛКА Справочник.Товары)
		|			И (ЗаказТоварыДопИнф.Заказ = &ЗаказСсылка)
		|			И (Марки.Заказ = &ЗаказСсылка)";
		МассивМарок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Товар");
		Если МассивМарок.Количество() > 0 Тогда
			Результат.Вставить("ОткрытыеМарки", СтрСоединить(МассивМарок, Символы.ПС));
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивМестаРеализации(Фирма = Неопределено)
	
	Если Фирма = Неопределено Тогда
		Возврат ТаблицаЗначенийВМассив(МестаРеализации.Выгрузить());
	Иначе
		Возврат ТаблицаЗначенийВМассив(МестаРеализации.Выгрузить(Новый Структура("Фирма", Фирма)));
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьЗаказПоМестуРеализации(Фирма = Неопределено, НомерЧека = 0, НомерСмены = 0)
	
	Если НЕ ЗначениеЗаполнено(НомерЧека) Тогда
		НомерЧека = Число(Прав(СокрЛП(Заказ.Номер), 3));
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НомерСмены) Тогда
		НомерСмены = Число(Формат(Заказ.Дата, "ДФ=ddHH"));
	КонецЕсли;
	
	СтрукрутаРезультат = СформироватьСтруктуруШапкиДокумента(Заказ.Ссылка);
	
	// если несколько (неоплаченных) мест реализации, то для пресейла формируем "товары" к расчету только по выбранному
	ТекТовары = ТаблицаТовары.Выгрузить();
	Если ЗначениеЗаполнено(Фирма) Тогда
		Для каждого ТекСтрока Из ТекТовары Цикл
			Если НЕ ТекСтрока.Фирма = Фирма И ТекСтрока.СтатусОплаты = -1 Тогда
				ТекСтрока.СтатусОплаты = 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого ТекСтрока Из ТекТовары Цикл
			Если ТекСтрока.ККМ.Пустая() Тогда
				ТекСтрока.СтатусОплаты = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(МестоРеализации) Тогда
	//	ТекТовары = ТаблицаТовары.Выгрузить();
	//Иначе
	//	ТекТовары = ТаблицаТовары.Выгрузить(Новый Структура("МестоРеализации", МестоРеализации));
	//КонецЕсли;
	ТекТоварыТовары = ТекТовары.Скопировать(Новый Структура("_ТоварТип", "T"));
	ТекТоварыСпецифики = ТекТовары.Скопировать(Новый Структура("_ТоварТип", "S"), "НомерСтрокиТовара,НомерСтрокиСпецифики,Специфика,Количество,ИдСтроки,Цена,ЦенаРеализации");
	СтрукрутаРезультат.Вставить("Товары", ТаблицаЗначенийВМассив(ТекТоварыТовары));
	СтрукрутаРезультат.Вставить("Специфики", ТаблицаЗначенийВМассив(ТекТоварыСпецифики));
	
	СтрукрутаРезультат.Вставить("Купоны", ТаблицаЗначенийВМассив(Заказ.Купоны.Выгрузить()));
	
	СтрукрутаРезультат.Вставить("НомерЧека", НомерЧека);
	СтрукрутаРезультат.Вставить("НомерСмены", НомерСмены);
	Если НЕ Фирма = Неопределено Тогда
		СтрукрутаРезультат.Вставить("Фирма", Фирма);
	КонецЕсли;
	
	Возврат СтрукрутаРезультат;
	
КонецФункции

&НаСервере
Функция СформироватьТоварыДляПередачи(Фирма = Неопределено, Колонки = Неопределено)

	Если Фирма = Неопределено Тогда
		Возврат ТаблицаЗначенийВМассив(ТаблицаТовары.Выгрузить(, Колонки));
	Иначе
		Возврат ТаблицаЗначенийВМассив(ТаблицаТовары.Выгрузить(Новый Структура("Фирма", Фирма), Колонки));
	КонецЕсли;

КонецФункции 

&НаСервере
Функция ЗаказОплаченПолностью(ЗаказСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.Заказ.Товары КАК ЗаказТовары
	|ГДЕ
	|	ЗаказТовары.Ссылка = &ЗаказСсылка
	|	И НЕ ЕСТЬNULL(ЗаказТовары.ДокументОплаты.Фискализирован, ЛОЖЬ)
	|	И НЕ ЗаказТовары.Количество = 0
	|	И НЕ ЗаказТовары.СуммаРеализации = 0";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьЗаказ(Статус, Заказ)
	//:Заказ = Документы.Заказ.СоздатьДокумент();
	ЗаказСсылка = Заказ.Ссылка;
	Попытка
		ЗаписьЖурналаРегистрации("Изменение статуса заказа", УровеньЖурналаРегистрации.Информация,,ЗаказСсылка, Статус);	
	Исключение
	КонецПопытки;
	
	Заказ.Записать();
	
	НЗ = РегистрыСведений.ЗаказДопИнф.СоздатьНаборЗаписей();
	НЗ.Отбор.Заказ.Установить(ЗаказСсылка);
	НЗ.Прочитать();
	
	Если НЗ.Количество() Тогда
		ЗаписьРегистра = НЗ[0];
	Иначе 
	КонецЕсли;
	
	ЗаписьРегистра.Статус = Статус;
	Если Статус <> Перечисления.СтатусыЗаказа.Открыт Тогда
		ЗаписьРегистра.ДатаЗакрытия = ТекущаяДатаСеансаНаСервере();
		Если ЗначениеЗаполнено(Заказ.КартаДоступа) Тогда
			ксТрактир.ОсвободитьКартуДоступа(Заказ.КартаДоступа);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Заказ.КартаДоступа) Тогда
			ксТрактир.РегистрацияЗаказаПоКартеДоступа(Заказ.КартаДоступа, ЗаказСсылка);
		КонецЕсли;
	КонецЕсли;
	
	НЗ.Записать(Истина);	
	
	Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыЗаказа.Закрыт") Тогда
		ЛояльностьКлиент.ЗакрытьЗаказ(Заказ, ПротоколРасчетов);
		Заказ.Записать();
		ксТрактир.ОсвободитьКартуДоступаОтЗаказа(ЗаказСсылка);
		Обработки.ГлавнаяФормаАК.ПечатьПодвалаЛояльности(, глПараметрыРМ.ККМ, ЗаказСсылка);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область НеИспользуемые

&НаСервере
Процедура Декорация1НажатиеНаСервере(ИдентификаторКартыДоступа, ТекстОшибки = "")
	
	КартаДоступа = Справочники.КартыДоступа.НайтиПоРеквизиту("Идентификатор", ИдентификаторКартыДоступа);
	Если КартаДоступа.Пустая() Тогда
		ТекстОшибки = "Бейдж гостя не опознан.
		|Попробуйте еще раз или обратитесь к сотруднику магазина.";
	Иначе
		ЗаказСсылка = ЗаказПоКартеДоступаНаСервере(КартаДоступа);
		Если НЕ ЗначениеЗаполнено(ЗаказСсылка) Тогда
			ТекстОшибки = "Нет открытых заказов.
			|Обратитесь к сотруднику магазина.";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация1Нажатие(Элемент)
	
	глОтсечкаПростоя();
	
	СтруктураОшибки = Новый Структура("Ошибка,ТекстОшибки1,ТекстОшибки2,РезультатКнопкиОК", Ложь, "", "", "НачальноеОкно");

	ТекстОшибки = "";
	ИдентификаторКартыДоступа = "";
	ВвестиСтроку(ИдентификаторКартыДоступа, "ИД КартыГостя:", 50, Ложь);
	
	ЗаказСсылка = Документы.Заказ.НайтиПоНомеру("000000000000" + ИдентификаторКартыДоступа);
	
	флЗаказОткрыт = Истина;
	ОтобразитьЗаказВФорме(ЗаказСсылка);
	
КонецПроцедуры


&НаКлиенте
Функция ОткрытьКассовуюСмену()
	
	Возврат Обработки.ГлавнаяФормаАК.ОткрытьКассовуюСмену();
	
КонецФункции

&НаКлиенте
Функция ЗакрытьКассовуюСмену()
	
	Возврат Обработки.ГлавнаяФормаАК.ЗакрытьКассовуюСмену();
	
КонецФункции



&НаСервере
Процедура ВыборЯзыкаНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ТекущийЯзык() = Метаданные.Языки.Русский Тогда
		ПользовательИБ.Язык = Метаданные.Языки.English;
	Иначе
		ПользовательИБ.Язык = Метаданные.Языки.Русский;
	КонецЕсли;
	ПользовательИБ.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЯзыка(Команда)
	
	Возврат;
	ВыборЯзыкаНаСервере();
	ЗавершитьРаботуСистемы(Ложь, Истина);

КонецПроцедуры



#КонецОбласти

#КонецЕсли
