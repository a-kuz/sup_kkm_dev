
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОЖИДАНИЯ

// чтобы часики тикали
//
Процедура ОбновитьДатуВремя()
	
	ТекДата = ТекущаяДата();
	ЭлементыФормы.тДата.Заголовок	= Формат(ТекДата,"ДЛФ=Д");
	ЭлементыФормы.тВремя.Заголовок	= Формат(ТекДата,"ДЛФ=В");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ДействияПередОткрытиемФормы(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ДействияПередЗакрытиемФормы(ЭтаФорма, Отказ);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// неизменяемые надписи
	ЭлементыФормы.тЗаголовок.Заголовок = "Журнал бронирования";
	ЭлементыФормы.тПользователь.Заголовок = глПользователь.Наименование;
	
	// периодически обновляемые надписи
	ОбновитьДатуВремя();
	ПодключитьОбработчикОжидания("ОбновитьДатуВремя", 1);
	
	// вызов должен быть в конце обработчика
	ИнтерфейсРМ.ПриОткрытииОкна(ЭтаФорма);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ИнтерфейсРМ.ПриЗакрытииОкна();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	глОтсечкаПростоя();
	ТекущийЭлемент = ЭлементыФормы.ЖурналБрони;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыходИзБрони" Тогда
		ОбновитьЖурнал(Параметр);
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ЖурналБрониПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ЕстьБезМеста = Ложь;
	// посадочные места
	Текст = "";
	Док = ДанныеСтроки.Ссылка;
	КолВоСтрок = Док.ПосадочныеМеста.Количество();
	Для Каждого СтрокаТЧ Из Док.ПосадочныеМеста Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ПосадочноеМесто) Тогда
			Текст = Текст + НаимПосадочногоМеста(СтрокаТЧ.ПосадочноеМесто);
		Иначе
			Текст = Текст + "Без места";
			ЕстьБезМеста = Истина;
		КонецЕсли; 
		Если СтрокаТЧ.НомерСтроки <> КолВоСтрок Тогда
			Текст = Текст + ", ";
		КонецЕсли;
	КонецЦикла;
	ОформлениеСтроки.Ячейки.ПосадочныеМеста.УстановитьТекст(Текст);
	
	// время
	ТекстВремя = Формат(Док.ВремяНачала, "ДФ=ЧЧ:мм") + " - " + Формат(Док.ВремяКонца, "ДФ=ЧЧ:мм");
	ОформлениеСтроки.Ячейки.Время.УстановитьТекст(ТекстВремя);
	
	// дата
	Если НачалоДня(Док.ВремяНачала) = НачалоДня(Док.ВремяКонца) Тогда
		ТекстДата = Формат(Док.ВремяНачала, "ДФ=дд.ММ.гг");
	Иначе
		ТекстДата = Формат(Док.ВремяНачала, "ДФ=дд.ММ.гг") + " - " + Формат(Док.ВремяКонца, "ДФ=дд.ММ.гг");
	КонецЕсли;
	ОформлениеСтроки.Ячейки.Дата.УстановитьТекст(ТекстДата);
	
	// оформление цвета строки
	//Если Док.Интернет Тогда
	//	ОформлениеСтроки.ЦветФона = Новый Цвет(130,250,250);
	//КонецЕсли;
	Если ЕстьБезМеста Тогда
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		//ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , ,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаПоискНажатие(Элемент)
	
	НайтиБроньПоНомеру();
	
КонецПроцедуры

Процедура КнопкаУдалитьНажатие(Элемент)
	Если ИнтерфейсРМ.ПроверкаПраваДоступа("УдалениеБроней",Истина) Тогда
		УдалитьБронь();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаНовыйНажатие(Элемент)
	
	Если НЕ ИнтерфейсРМ.ПроверкаПраваДоступа("РежимБрони", Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьБронь();
	
КонецПроцедуры

Процедура КнопкаСтрелкаВверхНажатие(Элемент)
	
	ТекущийЭлемент = ЭлементыФормы.ЖурналБрони;
	WshShell.SendKeys("{UP}");
	
КонецПроцедуры

Процедура КнопкаСтрелкаВнизНажатие(Элемент)
	
	ТекущийЭлемент = ЭлементыФормы.ЖурналБрони;
	WshShell.SendKeys("{DOWN}");
	
КонецПроцедуры

Процедура КнопкаВыбратьНажатие(Элемент)
	
	ОбработкаВыбораСтроки();
	
КонецПроцедуры

Процедура ЖурналБрониВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработкаВыбораСтроки();
	
КонецПроцедуры
