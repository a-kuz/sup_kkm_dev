#Если Клиент Тогда

Перем ДатаНачала, ДатаКонца;
Перем ИспользоватьГруппыОплаты;
Перем СторнироватьВозвраты;
Перем ОсновнойВариантОплаты;
Перем МассивТоваровОшибок Экспорт;   // Массив товаров с ошибками

Функция Фирма(МестоРеализации)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Фирмы.Ссылка
	|ИЗ
	|	Справочник.Фирмы КАК Фирмы
	|ГДЕ
	|	Фирмы.ИнформационнаяБаза = &ИнформационнаяБаза
	|	И Фирмы.МестоРеализации = &МестоРеализации");

	Запрос.УстановитьПараметр("ИнформационнаяБаза", ПараметрыСеанса.ТекущаяИБ);
	Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Фирма = Справочники.Фирмы.ПустаяСсылка();
		ВвестиЗначение(Фирма, "Укажите фирму по " + МестоРеализации);
		Возврат Фирма;
	Иначе
		Возврат Рез.Выгрузить()[0][0];
	КонецЕсли;
КонецФункции

Функция Фирмы(МестоРеализации)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Фирмы.Ссылка
	|ИЗ
	|	Справочник.Фирмы КАК Фирмы
	|ГДЕ
	|	Фирмы.ИнформационнаяБаза = &ИнформационнаяБаза
	|	И Фирмы.МестоРеализации = &МестоРеализации");

	Запрос.УстановитьПараметр("ИнформационнаяБаза", ПараметрыСеанса.ТекущаяИБ);
	Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		ВызватьИсключение "Нет фирм по месту реализации " + МестоРеализации;	
	Иначе
		Возврат Рез.Выгрузить().ВыгрузитьКолонку(0);
	КонецЕсли;
КонецФункции

// Описание процедуры
//
Функция СформироватьОтчеты(МестоРеализации, ВыводитьСообщения = Ложь) Экспорт
	Фирмы = Фирмы(МестоРеализации);
	Для Каждого Фирма Из Фирмы Цикл
		СформироватьОтчетыПоФирме(Фирма, ВыводитьСообщения);
	КонецЦикла;
КонецФункции

Функция СформироватьОтчетыПоФирме(Фирма, ВыводитьСообщения = Ложь) Экспорт
		
	МестоРеализации = Фирма.МестоРеализации;
	Если ВыводитьСообщения Тогда
		Сообщить("-");
		Сообщить("Формирование отчетов по месту реализации: " + """" + МестоРеализации + """");
	КонецЕсли; 
	
	СписокСформированныхДокументов = Новый СписокЗначений;
	МассивТоваровОшибок = Новый Массив;
	
	// сначала определим начало и конец периода за который надо обрабатывать данные
	// с учетом целых закрытых смен
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МестоРеализации", МестоРеализации);
	Если РежимПереформирования Тогда
		
		Если ДатаПо <= ДатаС Тогда
			Возврат СписокСформированныхДокументов;
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("ДатаС", ДатаС);
		Запрос.УстановитьПараметр("ДатаПо", ДатаПо);
		
		// начало периода - открытие смены на ДатаС
		ТекстЗапросаНачала = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Дата КАК ДатаДок
			|ИЗ
			|	Документ.ОткрытиеСмены
			|ГДЕ
			|	МестоРеализации = &МестоРеализации И НЕ ПометкаУдаления
			|	И Дата <= &ДатаС
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаДок УБЫВ";
		
		// конец периода - закрытие смены на ДатаПо
		ТекстЗапросаКонец = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Дата КАК ДатаДок
			|ИЗ
			|	Документ.ЗакрытиеСмены
			|ГДЕ
			|	МестоРеализации = &МестоРеализации И НЕ ПометкаУдаления
			|	И Дата <= &ДатаПо
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаДок УБЫВ";
			
	Иначе // только за новые закрытые смены
		
		// начало периода - последний отчет ФО
		ТекстЗапросаНачала = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Дата КАК ДатаДок
			|ИЗ
			|	Документ.ОтчетФО
			|ГДЕ
			|	Склад = &МестоРеализации И НЕ ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаДок УБЫВ";
		
		// конец периода - последнее закрытие смены
		ТекстЗапросаКонец = "
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Дата КАК ДатаДок
			|ИЗ
			|	Документ.ЗакрытиеСмены
			|ГДЕ
			|	МестоРеализации = &МестоРеализации И НЕ ПометкаУдаления
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаДок УБЫВ";
	
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапросаНачала;
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаНачала = ?(Выборка.Следующий(), Выборка.ДатаДок,  '00010101' );
		
	Запрос.Текст = ТекстЗапросаКонец;
	Выборка = Запрос.Выполнить().Выбрать();
	ДатаКонца = ?(Выборка.Следующий(), Выборка.ДатаДок,  '00010101' );
	
	// получим выборку документов для формирования отчетов по сменам
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца",КонецДня(ДатаКонца));
	Запрос.УстановитьПараметр("Фирма", Фирма);
	Если РежимПереформирования Тогда
		// удаление старых документов
		Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Документ.ОтчетФО
						|ГДЕ
						|	Склад = &МестоРеализации
						|	И Дата МЕЖДУ &ДатаНачала И &ДатаКонца И Фирма = &Фирма
						|	И НЕ ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				Об = Выборка.Ссылка.ПолучитьОбъект();
				Об.УстановитьПометкуУдаления(Истина);
				Если ВыводитьСообщения Тогда
					Сообщить("Документ " + Выборка.Ссылка + " помечен на удаление");
				КонецЕсли;
				
			Исключение 
				Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);

				Если ВыводитьСообщения Тогда
					Сообщить("Формирование отчетов не выполнено!", СтатусСообщения.Внимание); 
				КонецЕсли;
				Возврат СписокСформированныхДокументов;
			КонецПопытки;
		КонецЦикла; 
		
	КонецЕсли; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПротоколРасчетов.Ссылка КАК ПротоколРасчетов,
	|	ПротоколРасчетов.Заказ	КАК Заказ,
	|	ПротоколРасчетов.Смена	КАК Смена,
	|	ЗакрытиеСмены.Дата		КАК ДатаЗакрытия
	|ИЗ
	|	Документ.ПротоколРасчетов КАК ПротоколРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|		ПО ПротоколРасчетов.Смена = ЗакрытиеСмены.Смена
	|ГДЕ
	|	ПротоколРасчетов.МестоРеализации = &МестоРеализации
	|	И ПротоколРасчетов.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И ПротоколРасчетов.Проведен
	|	И НЕ ПротоколРасчетов.Неучетный
	|	И Не заказ.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.ПротоколРасчетов.ПустаяСсылка)	КАК ПротоколРасчетов,
	|	ЗНАЧЕНИЕ(Документ.Заказ.ПустаяСсылка)				КАК Заказ,
	|	Удаление.Смена			КАК Смена,
	|	ЗакрытиеСмены.Дата		КАК ДатаЗакрытия
	|ИЗ
	|	Документ.Удаление КАК Удаление
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|		ПО Удаление.Смена = ЗакрытиеСмены.Смена
	|ГДЕ
	|	Удаление.МестоРеализации = &МестоРеализации
	|	И Удаление.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И Удаление.Причина.Списание
	|	И НЕ Удаление.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Документ.ПротоколРасчетов.ПустаяСсылка)	КАК ПротоколРасчетов,
	|	ЗНАЧЕНИЕ(Документ.Заказ.ПустаяСсылка)				КАК Заказ,
	|	Возврат.Смена			КАК Смена,
	|	ЗакрытиеСмены.Дата		КАК ДатаЗакрытия
	|ИЗ
	|	Документ.Возврат КАК Возврат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗакрытиеСмены КАК ЗакрытиеСмены
	|		ПО Возврат.Смена = ЗакрытиеСмены.Смена
	|ГДЕ
	|	Возврат.МестоРеализации = &МестоРеализации
	|	И Возврат.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И Возврат.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗакрытия
	|
	|ИТОГИ
	|	МАКСИМУМ(ДатаЗакрытия)
	|ПО
	|	Смена";
	
	Результат 		= Запрос.Выполнить();
	ВыборкаПоСменам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаПоСменам.Количество() = 0 Тогда 
		Если ВыводитьСообщения Тогда
			Сообщить("Нет данных.");
		КонецЕсли; 
		Возврат СписокСформированныхДокументов;
	КонецЕсли;
		
	Пока ВыборкаПоСменам.Следующий() Цикл
		
		ТаблицаРеализации = Обработки.ФормированиеОтчетовФО.ТаблицаОперативнойРеализации(ВыборкаПоСменам.Смена, Истина, Фирма).Скопировать(,
							"Количество,СуммаРозн,СуммаФакт,СтавкаНДСссылка,СуммаНДС,ТипРасхода,ККМ,Товар,ТоварСпецифики,ВариантОплаты,КассоваяСмена,СуммаКорр,ТипТовара,СуммаСпецифики,СуммаФактСпецифики");
		ТаблицаРеализации.Свернуть("ТипТовара,Товар,СтавкаНДСссылка,ТипРасхода,ККМ,Товар,ТоварСпецифики,ВариантОплаты,КассоваяСмена","Количество,СуммаРозн,СуммаФакт,СуммаНДС,СуммаКорр,СуммаСпецифики,СуммаФактСпецифики");
		ТаблицаРеализации.Колонки.Добавить("СуммаФактНач");
		ТаблицаРеализации.Колонки.Добавить("СуммаРознНач");
		ТаблицаРеализации.ЗагрузитьКолонку(ТаблицаРеализации.ВыгрузитьКолонку("СуммаФакт"),"СуммаФактНач");
		ТаблицаРеализации.ЗагрузитьКолонку(ТаблицаРеализации.ВыгрузитьКолонку("СуммаРозн"),"СуммаРознНач");
		ТипыРасхода = ТаблицаРеализации.Скопировать(, "ТипРасхода");
		ТипыРасхода.Свернуть("ТипРасхода");		
		Для Каждого ТипРасхода Из ТипыРасхода Цикл
			
			ОтчетФО = Документы.ОтчетФО.СоздатьДокумент();
			ОтчетФО.Дата = КонецДня(ВыборкаПоСменам.Смена.Дата);
			ОтчетФО.ТипРасхода = ТипРасхода.ТипРасхода;
			ОтчетФО.ГруппаОплаты = Константы.ОсновнаяГруппаОплаты.Получить();
			ОтчетФО.Фирма = Фирма;
			ОтчетФО.Склад = МестоРеализации;
			
			СтрокиТовары = ТаблицаРеализации.НайтиСтроки(Новый Структура("ТипРасхода, ТипТовара", ТипРасхода.ТипРасхода, "Товары"));
			СтрокиСпецифики = ТаблицаРеализации.НайтиСтроки(Новый Структура("ТипРасхода, ТипТовара", ТипРасхода.ТипРасхода, "Специфики"));
			
			Для Каждого Т Из СтрокиСпецифики Цикл
				Если Не Т.Количество Тогда
					Продолжить;
				КонецЕсли;
				
				Если Т.СуммаСпецифики Тогда
					ТоварыПоСпецифике = ТаблицаРеализации.НайтиСтроки(Новый Структура("ТипРасхода, ТипТовара, Товар, КассоваяСмена, ВариантОплаты", ТипРасхода.ТипРасхода, "Товары", Т.ТоварСпецифики, Т.КассоваяСмена, т.ВариантОплаты));
					Если ТоварыПоСпецифике.Количество() Тогда
						Если ТоварыПоСпецифике.Количество() > 1 Тогда
							Сообщить("" + Т.Товар + ": ТоварыПоСпецифике.Количество() = " + ТоварыПоСпецифике.Количество());
						КонецЕсли;
						СтрокаТоварПоСпецифике = ТоварыПоСпецифике[0];
						Если СтрокаТоварПоСпецифике.СуммаФакт Тогда
							ДоляСпецифики = Т.СуммаФактСпецифики / СтрокаТоварПоСпецифике.СуммаФактНач;
							СтрокаТоварПоСпецифике.СуммаРозн = СтрокаТоварПоСпецифике.СуммаРозн - Т.СуммаСпецифики;
							СтрокаТоварПоСпецифике.СуммаФакт = СтрокаТоварПоСпецифике.СуммаФакт - Т.СуммафактСпецифики;
							Т.СуммаНДС = СтрокаТоварПоСпецифике.СуммаНДС * ДоляСпецифики;
							СтрокаТоварПоСпецифике.СуммаНДС = СтрокаТоварПоСпецифике.СуммаНДС - Т.СуммаНДС;
						ИначеЕсли СтрокаТоварПоСпецифике.СуммаРозн Тогда
							ДоляСпецифики = Т.СуммаСпецифики / СтрокаТоварПоСпецифике.СуммаРознНач;
							СтрокаТоварПоСпецифике.СуммаРозн = СтрокаТоварПоСпецифике.СуммаРозн - Т.СуммаСпецифики;
							Т.СуммаНДС = СтрокаТоварПоСпецифике.СуммаНДС * ДоляСпецифики;
							СтрокаТоварПоСпецифике.СуммаНДС = СтрокаТоварПоСпецифике.СуммаНДС - Т.СуммаНДС;
						Иначе
							Сообщить("СтрокаТоварПоСпецифике.СуммаФакт = 0" );
							ДоляСпецифики = 0;
						КонецЕсли;         
					КонецЕсли;
					
					
					Нов = ОтчетФО.Товары.Добавить();
					Нов.ВариантОплаты = Т.ВариантОплаты;
					Нов.Номенклатура = Т.Товар.Номенклатура;
					Нов.ЕдиницаИзмерения = Нов.Номенклатура.БазоваяЕдиницаИзмерения;
					Нов.Количество = Т.Количество;
					Нов.Сумма = Т.СуммаФактСпецифики;
					Нов.СуммаБезСкидки = Т.СуммаСпецифики;
					Если Нов.Количество Тогда 
						Нов.Цена = Нов.СуммаБезСкидки / Нов.Количество;
					Иначе
						Нов.Цена = Нов.СуммаБезСкидки;
					КонецЕсли;
					Нов.ККМ = Т.ККМ;
					Нов.КассоваяСмена = Т.КассоваяСмена;
					Нов.СтавкаНДС = Т.СтавкаНДСссылка;
					Нов.СуммаНДС = Т.СуммаНДС;				
					
					Нов.Сумма = Макс(Нов.Сумма,-Нов.Сумма);
					Нов.Цена  = Макс(Нов.Цена, -Нов.Цена);
					Нов.СуммаБезСкидки = Макс(Нов.СуммаБезСкидки,-Нов.СуммаБезСкидки);
					Нов.Количество = Макс(Нов.Количество,-Нов.Количество);
					Нов.СуммаКорр = Т.СуммаКорр; 
					Если Т.ВариантОплаты = Справочники.ВариантыОплаты.Наличные Тогда
						ОтчетФО.СуммаНал=ОтчетФО.СуммаНал+Нов.Сумма;
					ИначеЕсли Т.ВариантОплаты = Справочники.ВариантыОплаты.Карта Тогда
						ОтчетФО.СуммаКредит=ОтчетФО.СуммаКредит+Нов.Сумма;
					КонецЕсли;
					Нов.Идентификатор = ИдСтроки(Т.Товар,Нов.ВариантОплаты, Нов.КассоваяСмена);//Т.ТоварСпецифики.УникальныйИдентификатор();
				Иначе
					Нов = ОтчетФО.Специфики.Добавить();
					Нов.Количество = Т.Количество;
					Нов.Номенклатура = Т.Товар.Номенклатура;
					Нов.ЕдиницаИзмерения = Нов.Номенклатура.БазоваяЕдиницаИзмерения;
					Нов.ИдентификаторТовара = ИдСтроки(Т.ТоварСпецифики, ?(Т.ВариантОплаты = null, Справочники.ВариантыОплаты.ПустаяСсылка(), Т.ВариантОплаты), ?(Т.КассоваяСмена = null, Документы.Касса_ОткрытиеСмены.ПустаяСсылка(),Т.КассоваяСмена));;

				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Т Из СтрокиТовары Цикл
				
				
				//Если Не Т.Количество Тогда
				//	Продолжить;
				//КонецЕсли;
				//
				
				Нов = ОтчетФО.Товары.Добавить();
				Нов.ВариантОплаты = Т.ВариантОплаты;
				Нов.Номенклатура = Т.Товар.Номенклатура;
				Нов.ЕдиницаИзмерения = Нов.Номенклатура.БазоваяЕдиницаИзмерения;
				Нов.Количество = Т.Количество;
				Нов.Сумма = Т.СуммаФакт;
				Нов.СуммаБезСкидки = Т.СуммаРозн;
				Если Нов.Количество Тогда 
					Нов.Цена = Нов.СуммаБезСкидки / Нов.Количество;
				Иначе
					Нов.Цена = Нов.СуммаБезСкидки;
				КонецЕсли;
				Нов.ККМ = Т.ККМ;
				Нов.КассоваяСмена = Т.КассоваяСмена;
				Нов.СтавкаНДС = Т.СтавкаНДСссылка;
				Нов.СуммаНДС = Т.СуммаНДС;				
				
				Нов.Сумма = Макс(Нов.Сумма,-Нов.Сумма);
				Нов.Цена  = Макс(Нов.Цена, -Нов.Цена);
				Нов.СуммаБезСкидки = Макс(Нов.СуммаБезСкидки,-Нов.СуммаБезСкидки);
				Нов.Количество = Макс(Нов.Количество,-Нов.Количество);
				Нов.СуммаКорр = Т.СуммаКорр; 
				Если Т.ВариантОплаты = Справочники.ВариантыОплаты.Наличные Тогда
					ОтчетФО.СуммаНал=ОтчетФО.СуммаНал+Нов.Сумма;
				ИначеЕсли Т.ВариантОплаты = Справочники.ВариантыОплаты.Карта Тогда
					ОтчетФО.СуммаКредит=ОтчетФО.СуммаКредит+Нов.Сумма;
				КонецЕсли;
				Нов.Идентификатор = ИдСтроки(Т.Товар,Нов.ВариантОплаты, Нов.КассоваяСмена);;
				
				
			КонецЦикла;
			
			ОтчетФО.Товары.Свернуть("Номенклатура,ЕдиницаИзмерения,Контрагент,ВариантОплаты,Идентификатор,ККМ,КассоваяСмена,СтавкаНДС","Количество,Сумма,СуммаБезСкидки,СуммаБонусов,СуммаКорр,СуммаНДС"); 
			ОтчетФО.ИтоговаяСумма = ОтчетФО.Товары.Итог("Сумма");
			ОтчетФО.Записать();
			СписокСформированныхДокументов.Добавить(ОтчетФО.Ссылка);
		КонецЦикла;
	КонецЦикла;
		
	Возврат СписокСформированныхДокументов
КонецФункции 

Функция ИдСтроки(Товар, ВариантОплаты, КассоваяСмена)
	Структура = Новый Структура("Товар, ВариантОплаты, КассоваяСмена", Товар, ВариантОплаты, КассоваяСмена);
		ХД = Новый ХешированиеДанных(ХешФункция.MD5);
	ХД.Добавить(ЗначениеВСтрокуВнутр(Структура));
	ХС = Лев(СтрЗаменить(ХД.ХешСумма," ",""),36);
	Возврат ХС;	
КонецФункции

#КонецЕсли