&НаКлиенте
Перем мИмяФайла,КаталогВременных, СисИнфо, Версия, СтруктураУИД,КоличествоПопытокПрочитатьПлан,ЗакрытьПринудительно, ВерсияHTML;
&НаКлиенте
Перем мИмяПути;                         // путь к файлу запорсов
&НаКлиенте
Перем мРезЗапроса;                      // результат 
&НаСервере
Перем мТаблицаВыборок;                  // таблица настроек выборок из результата
&НаКлиенте
Перем мИдентификаторТекСтроки;  
&НаКлиенте
Перем мСписокПоследнихОткрытыхФайлов;	// список последних открытых файлов
&НаКлиенте
Перем мДатаТекущейВерсииЗапроса;
&НаКлиенте
Перем мФайлЗапросовСохранитьБы;
&НаКлиенте
Перем мПутьКОбработке Экспорт;
&НаКлиенте
Перем мКомпонентаKeyBoardHook;
&НаКлиенте
Перем мПараметрыОтображения;
&НаКлиенте
Перем мСчетчикВыполнений;
&НаКлиенте
Перем мАктуальнаяПлатформа,мВерстияБраузераИЕ;

#Область ПолеHTML
 
&НаКлиенте
// Компонента нужна чтобы захватывать нажатяи клавиш, которые по умолчанию 1С до браузера не допускает
Процедура ПодключитьВнешнююКомпонентуKeyboardHook()
	//РасположениеВК = "D:\DATA\KH\Khook1C-VC++\Debug\KHook1C.dll";
	
	РасположениеВК = КаталогВременныхФайлов()+"K_Hook_1C.dll";
	
	Если НайтиФайлы(РасположениеВК).Количество()=0 Тогда
		ПолучитьФайл(ПоместитьМакетВХранилище("ВнешняяКомпонента"), РасположениеВК, Ложь); 
	КонецЕсли;
	
	ПодключитьВнешнююКомпоненту(РасположениеВК, "Hook",ТипВнешнейКомпоненты.Native);
	мКомпонентаKeyBoardHook = Новый("AddIn.Hook.KeyboardHook");
	мКомпонентаKeyBoardHook.ЗахватПервым			= Истина;//мАктуальнаяПлатформа;//Ложь
	мКомпонентаKeyBoardHook.КлавиатураЗаблокирована	= Ложь;
	мКомпонентаKeyBoardHook.СобытиеПриНажатии		= НЕ мАктуальнаяПлатформа;
	УстановитьАктивностьПерехватаКлавиш();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьАктивностьПерехватаКлавиш()
	флАктивность = ЭтаФорма.ВводДоступен() И (ЭтаФорма.ТекущийЭлемент = Элементы.ПолеРедактированияЗапросаHTML);
	мКомпонентаKeyBoardHook.ЗахватРазрешен					= флАктивность;
	мКомпонентаKeyBoardHook.НекоторыеКлавишиЗаблокированы 	= флАктивность;
	ПодключитьОбработчикОжидания("УстановитьАктивностьПерехватаКлавиш",0.1,Истина);
КонецПроцедуры

&НаКлиенте
Процедура АктивироватьПолеРедактированияЗапросаHTML()        
	РасположениеВебСтраницы = КаталогВременныхФайлов()+"CMR_"+ВерсияHTML;
	Если НайтиФайлы(РасположениеВебСтраницы).Количество()=0 Тогда
		ПутьКАрхиву = КаталогВременныхФайлов()+"CMR.zip";
		ПолучитьФайл(ПоместитьМакетВХранилище("CMR"),ПутьКАрхиву , Ложь); 
		ЧтениеАрхива = Новый ЧтениеZipФайла();
		ЧтениеАрхива.Открыть(ПутьКАрхиву);
		ЧтениеАрхива.ИзвлечьВсе(РасположениеВебСтраницы);
		УдалитьФайлы(ПутьКАрхиву);
	КонецЕсли;
	ПолеРедактированияЗапросаHTML = РасположениеВебСтраницы+"\CMR_"+мВерстияБраузераИЕ+".html";
	Элементы.ПолеРедактированияЗапросаHTML.Вперед();
КонецПроцедуры

&НаСервере
Функция ПоместитьМакетВХранилище(ИмяМакета) Экспорт
	Возврат ПоместитьВоВременноеХранилище(РеквизитФормыВЗначение("Объект").Получитьмакет(ИмяМакета));		
КонецФункции

&НаКлиенте
// Обработка перехваченных клавиш
// Вся эта процедура - один большой костыль, который нужен чтобы справиться с тем, что поле html документа не раотает как положено нормальному браузеру
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если Источник = "KeyboardHook" И ЭтаФорма.ТекущийЭлемент<>Элементы.ПолеРедактированияЗапросаHTML Тогда
		Возврат;
	КонецЕсли;
	
	ПолученноеЧисло	= Лев(Данные,5);
	ПолученноеЧисло	= Число(ПолученноеЧисло);
	
	КодСочетанияКлавиш = ПолученноеЧисло;
	
	Данные	= ПолученноеЧисло % 256;
	ПолученноеЧисло		= ПолученноеЧисло - Данные;
	РасширеннаяКлавиша	= ПолученноеЧисло % 512;
	ПолученноеЧисло		= ПолученноеЧисло - РасширеннаяКлавиша;
	ПравыйАльт	= ПолученноеЧисло % 1024;
	ПолученноеЧисло		= ПолученноеЧисло - ПравыйАльт;
	ЛевыйАльт	= ПолученноеЧисло % 2048;
	ПолученноеЧисло		= ПолученноеЧисло - ЛевыйАльт;
	ПравыйСонтрол	= ПолученноеЧисло % 4096;
	ПолученноеЧисло		= ПолученноеЧисло - ПравыйСонтрол;
	ЛевыйСонтрол	= ПолученноеЧисло % 8192;
	ПолученноеЧисло		= ПолученноеЧисло - ЛевыйСонтрол;
	ПравыйШифт	= ПолученноеЧисло % 16384;
	ПолученноеЧисло		= ПолученноеЧисло - ПравыйШифт;
	ЛевыйШифт	= ПолученноеЧисло;

	мПерехвата = Новый Массив;//Клавиши, которые 1С не пускает в браузер
	мПерехвата.Добавить(13);//Энтер
//	мПерехвата.Добавить(32);//Пробел
	мПерехвата.Добавить(33);
	мПерехвата.Добавить(34);
	мПерехвата.Добавить(35);
	мПерехвата.Добавить(36);
	мПерехвата.Добавить(37);
	мПерехвата.Добавить(38);
	мПерехвата.Добавить(39);
	мПерехвата.Добавить(40);
	мПерехвата.Добавить(90);
	
	ctrlKey		= ЛевыйСонтрол ИЛИ ПравыйСонтрол;
	altKey		= ЛевыйАльт ИЛИ ПравыйАльт;
	shiftKey	= ЛевыйШифт ИЛИ ПравыйШифт;
	
	Если Данные=32 И ctrlKey И НЕ shiftKey И НЕ altKey Тогда //Подпорка для работы Ctrl-Пробел
		ОкноБраузера().KeyTransfer(8, ложь, ложь, ложь);
	КонецЕсли;
	
	Если shiftKey ИЛИ ctrlKey ИЛИ мПерехвата.Найти(Данные)<>Неопределено Тогда
		ОкноБраузера().KeyTransfer(Данные, ctrlKey, shiftKey, altKey);
	КонецЕсли;
	
	//Если Данные=13 Тогда //По энтеру запускаем IdentTab
	//	Если мАктуальнаяПлатформа Тогда
	//		indentAuto();
	//	Иначе	
	//		ПодключитьОбработчикОжидания("indentAuto",0.1,Истина);
	//	КонецЕсли;	
	//КонецЕсли;
	
	Если Данные=9 И НЕ ctrlKey И shiftKey И НЕ altKey  Тогда //Shift-Tab
		indentLess();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура indentAuto()
	ОкноБраузера().indentAuto(); 
КонецПроцедуры

&НаКлиенте
Процедура indentLess()
	ОкноБраузера().indentLess(); 
КонецПроцедуры

&НаКлиенте
Функция ОкноБраузера()
	ДокументБраузера = Элементы.ПолеРедактированияЗапросаHTML.Документ;
    ОкноБраузера     = ДокументБраузера.parentWindow; // IE
    Если ОкноБраузера = Неопределено Тогда
        ОкноБраузера = ДокументБраузера.defaultView; // Прочие браузеры
	КонецЕсли;
	Возврат ОкноБраузера;
КонецФункции

&НаКлиенте
//Получает текст запроса из окна браузера и помещает в текстовый документ
Процедура ИзБраузераВТекст()
	ТекстЗапроса.УстановитьТекст(ОкноБраузера().GetQuery(""));
КонецПроцедуры

&НаКлиенте
//Выводит тест запроса из текстового документа в окно браузера
//Пока форма в первый раз не прогрузилась, может не исполниться, 
//поэтому неудачный запуск дублируем обработчиком ожидания, но не больше 10 раз
Процедура ИзТекстаВБраузер()
	Попытка
		ОкноБраузера().SetQuery(ТекстЗапроса.ПолучитьТекст());
		ОкноБраузера().setCursor("");	
		мСчетчикВыполнений = 0;
	Исключение
		Если мСчетчикВыполнений<10 Тогда
			ПодключитьОбработчикОжидания("ИзТекстаВБраузер",0.1,Истина);
			мСчетчикВыполнений=мСчетчикВыполнений+1;
		КонецЕсли;
	КонецПопытки;
КонецПроцедуры

#КонецОбласти


#Область ДеревоЗапросов

&НаКлиенте
// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - признак необходимости предупрежедния перед сохранением
//	ЗапрашиватьИмяФайла - признак необходимости запроса имени файла.
//
Функция вСохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь,ФайлСохранения = Неопределено,ПродолжитьЗапрос = Ложь)

	вСохранитьЗапросТекущейСтроки();
	Если ЗапрашиватьИмяФайла Тогда
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Длг.ПолноеИмяФайла = ИмяФайлаЗапроса;
		Длг.Каталог = ПутьФайлаЗапроса;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			ИмяФайлаЗапроса = Длг.ПолноеИмяФайла;
			ПутьФайлаЗапроса = Длг.Каталог;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ФайлСохранения<>Неопределено Тогда
		СтарыйФайл = ИмяФайлаЗапроса;
		СтарыйПуть = ПутьФайлаЗапроса;
		ИмяФайлаЗапроса = ФайлСохранения.ПолноеИмя;
		ПутьФайлаЗапроса = ФайлСохранения.Путь;
	ИначеЕсли НЕ ЗначениеЗаполнено(ИмяФайлаЗапроса) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	АдресВХранилище = СохранитьДеревоЗапросовВФайлНаСервере();
	Если ПолучитьФайл(АдресВХранилище,ИмяФайлаЗапроса,Ложь) Тогда
		Модифицированность = Ложь;
		
		Если СписокПоследныхОткрытыхФайлов.НайтиПоЗначению(ИмяФайлаЗапроса) = Неопределено Тогда
			СписокПоследныхОткрытыхФайлов.Вставить(0,ИмяФайлаЗапроса);
			Если СписокПоследныхОткрытыхФайлов.Количество() = 16 Тогда
				СписокПоследныхОткрытыхФайлов.Удалить(15);
			КонецЕсли; 
			
			СформироватьПодменюПоследнихФайлов();
		КонецЕсли; 
		Если ФайлСохранения<>Неопределено Тогда
			ИмяФайлаЗапроса = СтарыйФайл;
			ПутьФайлаЗапроса = СтарыйПуть;
		КонецЕсли;
		УправлениеДиалогом();

		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
	
КонецФункции // СохранитьЗапросыВФайл()
&НаКлиенте
//переносит список последних файлов в спец. подменю
//
Процедура СформироватьПодменюПоследнихФайлов()

	ПоследниеФайлыЗапросов.Очистить();
	
	//добавляем последний выполненный
	
	Для каждого ЭлементСписка Из СписокПоследныхОткрытыхФайлов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда Продолжить КонецЕсли; 
		
		Файл = Новый Файл(ЭлементСписка.Значение);
		
		Если Не Файл.Существует() Тогда Продолжить	КонецЕсли;  
		
		НовСтрока = ПоследниеФайлыЗапросов.Добавить();
		НовСтрока.Файл = Файл.Имя;
		НовСтрока.Каталог = Файл.Путь;
		
	КонецЦикла; 

КонецПроцедуры //СформироватьПодменюПоследнихФайлов

&НаСервере
Функция СохранитьДеревоЗапросовВФайлНаСервере()
	ИмяВременногоФайла =ПолучитьИмяВременногоФайла("sel"); 
	ЗначениеВФайл(ИмяВременногоФайла,РеквизитФормыВЗначение("ДеревоЗапросов"));
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные,УникальныйИдентификатор);
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат АдресВХранилище;
КонецФункции // СохранитьДеревоЗапросоввФайлНаСервере()

&НаКлиенте
Процедура СохранитьФайлНажатие(Элемент)
	// Вставить содержимое обработчика.
	вСохранитьЗапросыВФайл(Ложь,ИмяФайлаЗапроса="");
КонецПроцедуры
&НаКлиенте
Процедура СохранитьФайлКакНажатие(Элемент)
	вСохранитьЗапросыВФайл(Ложь,Истина);
КонецПроцедуры
&НаКлиенте
Процедура вСоздатьНовыйФайлЗапросов()

	мИмяФайла = "";
	мИмяПути = "";
	вОчиститьЗначения();
	мТекущаяСтрока = Новый Структура;
	мТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
    МИдентификаторТекСтроки =  мТекущаяСтрока.ПолучитьИдентификатор();
	Элементы.ДеревоЗапросов.ТекущаяСтрока = мТекущаяСтрока.ПолучитьИдентификатор();
	
	УстановитьПараметрыНовогоЗапроса(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	ДеревоЗапросовПриАктивизацииСтроки(Неопределено);
	
	Модифицированность = Ложь;
	
	//в новом файле всегда один запрос - сворачиваем панель запросов
	
	мПараметрыОтображения.ПанельСписокЗапросовСвернутаВлево = Истина;	

	УправлениеДиалогом();
	
	УстановитьДоступностьКнопокВерсий();
	
	ИзТекстаВБраузер();
КонецПроцедуры // СоздатьНовыйФайлЗапросов()

&НаКлиенте
Процедура вСохранитьЗапросТекущейСтроки()
	
	
	Если МИдентификаторТекСтроки = Неопределено Тогда
		Возврат
	КонецЕсли;
	мТекущаяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(МИдентификаторТекСтроки);
	
	Попытка
		ИзБраузераВТекст();
	Исключение
	КонецПопытки;
	
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда
		Если мТекущаяСтрока.ТекстЗапроса <> вПолучитьТекстЗапроса(Ложь) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
		мТекущаяСтрока.ТекстЗапроса 	= 	вПолучитьТекстЗапроса(Ложь);
		мТекущаяСтрока.ОписаниеЗапроса 	= 	ОписаниеЗапроса;
		ЗаполнитьКоллекциюКоллекцией(мТекущаяСтрока.ПараметрыЗапроса,ПараметрыЗапроса);
		мТекущаяСтрока.СпособВыгрузки 	= 	СпособВыгрузки;
		мТекущаяСтрока.ПоказыватьСлужебныеКолонкиРезультата = ПоказыватьСлужебныеКолонкиРезультата;
		ЗаполнитьКоллекциюКоллекцией(мТекущаяСтрока.ТаблицаВыборок,ТаблицаВыборок);
		мТекущаяСтрока.СпособВыборки 	= 	СпособВыборки;
		мТекущаяСтрока.ОбходитьИерархическиеВыборкиРекурсивно 	= 	ОбходитьИерархическиеВыборкиРекурсивно;
		ЗаполнитьКоллекциюКоллекцией(мТекущаяСтрока.ВерсииЗапроса,ВерсииЗапроса);
		мТекущаяСтрока.ДатаВерсииЗапроса =  мДатаТекущейВерсииЗапроса;

	КонецЕсли;

КонецПроцедуры // СохранитьЗапросТекущейСтроки(
&НаКлиенте
Функция ЗаполнитьКоллекциюКоллекцией(Приемник,Источник)
	Приемник.Очистить();
	Для Каждого СтрокаТЗ ИЗ	Источник Цикл
		НоваяСтрока = Приемник.Добавить();
		Если СтрокаТЗ.Свойство("Параметры") Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ,,"Параметры");
			ЗаполнитьКоллекциюКоллекцией(НоваяСтрока.Параметры,СтрокаТЗ.Параметры);
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
		КонецЕсли;
	КонецЦикла;
КонецФункции // ЗаполнитьКоллекциюКоллекцией()


&НаКлиенте
Процедура ЗагрузитьДеревоЗапросовИзФайла(ЗапрашиватьИмяФайла = Ложь)
	Если ЗапрашиватьИмяФайла Тогда
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Длг.ПолноеИмяФайла = ИмяФайлаЗапроса;
		Длг.Каталог = ПутьФайлаЗапроса;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			ИмяФайлаЗапроса = Длг.ПолноеИмяФайла;
			ПутьФайлаЗапроса = Длг.Каталог;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Файл = Новый Файл(ИмяФайлаЗапроса);
	Если НЕ Файл.Существует() Тогда
		ПоказатьОповещениеПользователя("Ошибка при загрузке файла",,"Файл "+ИмяФайлаЗапроса+" не обнаружен!");
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаЗапроса),УникальныйИдентификатор);
	
	Попытка
		ЗагрузитьФайлИзЗапросаНаСервере(АдресВХранилище);	
	Исключение
	КонецПопытки;
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда
		вОчиститьЗначения();
	Иначе
		МИдентификаторТекСтроки = Неопределено;
		Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Если ДеревоЗапросов.ПолучитьЭлементы().Количество()>1 Тогда
			мПараметрыОтображения.ПанельСписокЗапросовСвернутаВлево = Ложь;	
		Иначе
			мПараметрыОтображения.ПанельСписокЗапросовСвернутаВлево = Истина;	
		КонецЕсли;
		ДеревоЗапросовПриАктивизацииСтроки(Неопределено);
		УправлениеДиалогом();
		
	КонецЕсли;
КонецПроцедуры // ЗагрузитьДеревоЗапросовИзФайла()

&НаСервере
Процедура ЗагрузитьФайлИзЗапросаНаСервере(АдресВХранилище)
	ВременныйФайл = ПолучитьИмяВременногоФайла("sel");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ДвоичныеДанные.Записать(ВременныйФайл);
	ДвоичныеДанные = Неопределено;
	Дерево = ЗначениеИзФайла(ВременныйФайл);
	
	Попытка
		ЗначениеВРеквизитФормы(Дерево,"ДеревоЗапросов");
	Исключение
		Сообщить("Формат сохраненного файла не соответствует текущей версии обработки!");
	КонецПопытки;
	Попытка
		Если Дерево.Строки.Количество()<>ДеревоЗапросов.ПолучитьЭлементы().Количество() Тогда
			ЗагрузитьДеревоСтарогоЗапросника(Дерево.Строки,ДеревоЗапросов.ПолучитьЭлементы());	
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры // ЗагрузитьФайлИзЗапросаНаСервере()

&НаСервере
//Дерево запроса из старого запросника валится на ЗначениеВРеквизитФормы, если так получилось, заполним перебором
Процедура ЗагрузитьДеревоСтарогоЗапросника(СтрокиДерева,СтрокиДереваЗапросов)
	Для Каждого Строка Из СтрокиДерева Цикл
		НовСтрока = СтрокиДереваЗапросов.Добавить();
		//НовСтрока.ВерсииЗапроса								= Строка.ВерсииЗапроса;
		НовСтрока.ДатаВерсииЗапроса							= Строка.ДатаВерсииЗапроса;
		НовСтрока.Запрос									= Строка.Запрос;
		НовСтрока.ОбходитьИерархическиеВыборкиРекурсивно	= Строка.ОбходитьИерархическиеВыборкиРекурсивно;
		НовСтрока.ОписаниеЗапроса							= Строка.ОписаниеЗапроса;
		//НовСтрока.ПараметрыАлгоритма						= Строка.ПараметрыАлгоритма;
		//НовСтрока.ПараметрыЗапроса							= Строка.ПараметрыЗапроса;
		НовСтрока.ПоказыватьСлужебныеКолонкиРезультата		= Строка.ПоказыватьСлужебныеКолонкиРезультата;
		НовСтрока.СпособВыборки								= Строка.СпособВыборки;
		НовСтрока.СпособВыгрузки							= Строка.СпособВыгрузки;
		//НовСтрока.ТаблицаВыборок							= Строка.ТаблицаВыборок;
		НовСтрока.ТекстАлгоритма							= Строка.ТекстАлгоритма;
		НовСтрока.ТекстЗапроса								= Строка.ТекстЗапроса;
		ЗагрузитьДеревоСтарогоЗапросника(Строка.Строки,НовСтрока.ПолучитьЭлементы());
	КонецЦикла;
КонецПроцедуры



&НаКлиенте
// Обработчик активизации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	Если МИдентификаторТекСтроки = Элементы.ДеревоЗапросов.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	вСохранитьЗапросТекущейСтроки();
    МИдентификаторТекСтроки = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	
	Если МИдентификаторТекСтроки<>Неопределено Тогда
		мТекущаяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(МИдентификаторТекСтроки);	
	Иначе
		мТекущаяСтрока = Неопределено;	
	КонецЕсли;

	Если мТекущаяСтрока = Неопределено И ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда
		//в дереве вообще нет запросов
		вОчиститьЗначения();
		Возврат;
	КонецЕсли; 
	
	ИмяЗапроса = мТекущаяСтрока.Запрос;
	
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда

		вЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);

		ИсходнаяТаблицаПараметров = мТекущаяСтрока.ПараметрыЗапроса;
		ПараметрыЗапроса.Очистить();
		Если Не ИсходнаяТаблицаПараметров = НеОпределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаПараметров Цикл
				
				НоваяСтрока = ПараметрыЗапроса.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИсходнойТаблицы);
				//НоваяСтрока.ТаблицаЗначений = ЗаполнитьКоллекциюКоллекцией(НоваяСтрока.ТаблицаЗначений,СтрокаИсходнойТаблицы.ТаблицаЗначений);
				//НоваяСтрока.ОписаниеТаблицыЗначений = ЗаполнитьКоллекциюКоллекцией(НоваяСтрока.ОписаниеТаблицыЗначений,СтрокаИсходнойТаблицы.ОписаниеТаблицыЗначений);
			КонецЦикла;
		КонецЕсли;

        Если мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
			мТекущаяСтрока.СпособВыгрузки = 1;
		КонецЕсли;

		ИсходнаяТаблицаВыборок = мТекущаяСтрока.ТаблицаВыборок;
		ТаблицаВыборок.Очистить();
		Если Не ИсходнаяТаблицаВыборок = НеОпределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаВыборок Цикл
				НоваяСтрока = ТаблицаВыборок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИсходнойТаблицы);
			КонецЦикла;
		КонецЕсли;
		
		СпособВыгрузки = мТекущаяСтрока.СпособВыгрузки;
		СпособВыборки = мТекущаяСтрока.СпособВыборки;
		
		//в старых форматах много чего не было
		//восстанавливаем через попытку
		Попытка
			ОписаниеЗапроса = мТекущаяСтрока.ОписаниеЗапроса;
			ЗаполнитьКоллекциюКоллекцией(ВерсииЗапроса,мТекущаяСтрока.ВерсииЗапроса);
			мДатаТекущейВерсииЗапроса = мТекущаяСтрока.ДатаВерсииЗапроса;
		Исключение
		КонецПопытки; 
		
		ПоказыватьСлужебныеКолонкиРезультата = мТекущаяСтрока.ПоказыватьСлужебныеКолонкиРезультата;

	Иначе

		вЗадатьТекстЗапроса("");
		ПараметрыЗапроса.Очистить();
		ТаблицаВыборок.Очистить();
		ВерсииЗапроса.Очистить();

	КонецЕсли;

	УправлениеДиалогом();
	УстановитьДоступностьКнопокВерсий();
	
	ИзТекстаВБраузер();
КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()


&НаКлиенте
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	вСохранитьЗапросТекущейСтроки();
	
	ТекСтрока = ДеревоЗапросов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	//по умолчанию строки добавляются в тот же уровень
	
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 ИЛИ ТекСтрока.ПолучитьРодителя() = Неопределено Тогда
		//копируется строка в корне дерева в корень дерева
		НоваяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
		УровеньДерева = ДеревоЗапросов.ПолучитьЭлементы();
	Иначе	
		//копирование происходит под того же родителя
		НоваяСтрока = ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
		УровеньДерева = ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы();
	КонецЕсли; 
	
	Если Копирование Тогда
		//копируем содержимое
		вДобавитьСтроки(ТекСтрока.ПолучитьИдентификатор(), НоваяСтрока.ПолучитьИдентификатор(), "ДеревоЗапросов");	
	Иначе
		//заполним новую строку параметрами по умолчанию
		УстановитьПараметрыНовогоЗапроса(НоваяСтрока.ПолучитьИдентификатор());
		Элементы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли; 

КонецПроцедуры
&НаСервере
Процедура вДобавитьСтроки(ТекСтрокаГуид, ДобСтрокаГуид, Дерево)
	ТекСтрока = ЭтаФорма[Дерево].НайтиПоИдентификатору(ТекСтрокаГуид);
	ДобСтрока = ЭтаФорма[Дерево].НайтиПоИдентификатору(ДобСтрокаГуид);
	ЗаполнитьЗначенияДополнительный(ДобСтрока,ТекСтрока,ЭтаФорма[Дерево]);	
	Для Каждого Строка Из ТекСтрока.ПолучитьЭлементы() Цикл
		
		НоваяСтрока = ДобСтрока.ПолучитьЭлементы().Добавить();
		вДобавитьСтроки(Строка.ПолучитьИдентификатор(), НоваяСтрока.ПолучитьИдентификатор(), Дерево);
		
	КонецЦикла;

КонецПроцедуры // ДобавитьСтроки()


&НаКлиенте
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	мТекущаяСтрока = НеОпределено;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПослеУдаления(Элемент)
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество()=0 Тогда
		вСоздатьНовыйФайлЗапросов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока и Элемент.ТекущиеДанные.СпособВыгрузки = Неопределено Тогда
		Элемент.ТекущаяСтрока.СпособВыгрузки = 0;
	КонецЕсли;
	
	Если НоваяСтрока и Элемент.ТекущаяСтрока.СпособВыборки = Неопределено Тогда
		Элемент.ТекущаяСтрока.СпособВыборки = 0;
	КонецЕсли;
	
	ДеревоЗапросовПриАктивизацииСтроки(Элемент);

	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	Для каждого СтрокаДерева Из ДеревоЗапросов.ПолучитьЭлементы() Цикл
		
		Элементы.ДеревоЗапросов.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Функция СтруктураСвойствЗапроса()
	СтруктураСвойств = Новый Структура;
	
	СтруктураСвойств.Вставить("ТекстЗапроса",							"");
	СтруктураСвойств.Вставить("ПараметрыЗапроса",						Новый Структура);
	СтруктураСвойств.Вставить("СпособВыгрузки",							0);
	СтруктураСвойств.Вставить("ПоказыватьСлужебныеКолонкиРезультата",	Ложь);
	СтруктураСвойств.Вставить("СпособВыборки",							0);
	СтруктураСвойств.Вставить("ОбходитьИерархическиеВыборкиРекурсивно",	Ложь);
	СтруктураСвойств.Вставить("ОписаниеЗапроса",						"");
	СтруктураСвойств.Вставить("ТекстАлгоритма",							"");
	СтруктураСвойств.Вставить("ПараметрыАлгоритма",						"");
	СтруктураСвойств.Вставить("ВерсииЗапроса",							Новый Массив);
	СтруктураСвойств.Вставить("Выборки",								Новый Массив);
	
	Возврат СтруктураСвойств;
КонецФункции


#КонецОбласти


&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	Перем ОписаниеОповещения;
	ИзБраузераВТекст();
	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса.ПолучитьТекст()) Тогда
			Конструктор = Новый КонструкторЗапроса(ТекстЗапроса.ПолучитьТекст());
		Иначе
			Конструктор = Новый КонструкторЗапроса();
		КонецЕсли;
		Попытка
		Если Конструктор.ОткрытьМодально() Тогда
			ТекстЗапроса.УстановитьТекст(Конструктор.Текст);
		Иначе
			Модифицированность = Ложь;
		КонецЕсли;
		Исключение
			ВывестиНаКлиентеОшибкуЗапроса(ОписаниеОшибки());
		КонецПопытки;
		ИзТекстаВБраузер();
		Возврат;
   #КонецЕсли

	Попытка
		
		Выполнить("ОписаниеОповещения = Новый ОписаниеОповещения(""СконструированЗапрос"",ЭтаФорма)");
		//попытаемся создать конструктор для 8.3.5
		Конструктор = Неопределено;
		Если ЗначениеЗаполнено(ТекстЗапроса.ПолучитьТекст()) Тогда
			Выполнить("Конструктор = Новый КонструкторЗапроса(ТекстЗапроса.ПолучитьТекст());");
		Иначе
			Выполнить("Конструктор = Новый КонструкторЗапроса();");
		КонецЕсли;
			Выполнить("Конструктор.Показать(ОписаниеОповещения)");
		Возврат;
	Исключение
		Ошибка = ОписаниеОшибки();
		Если Найти(Ошибка,"Тип не определен")>0 Тогда
			ПоказатьОповещениеПользователя("Конструктор",,"Конструктор запроса для тонкого клиента доступен с версии 8.3.5!");
		Иначе
			ВывестиНаКлиентеОшибкуЗапроса(Ошибка);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ВывестиНаКлиентеОшибкуЗапроса(ТекстОшибки,ПроверочнаяСтрока = Неопределено)
	Сообщить(ТекстОшибки);
	Если ПроверочнаяСтрока = Неопределено Тогда
		ПроверочнаяСтрока = "{(1)}: Ошибка при вызове конструктора (КонструкторЗапроса): {(";
	КонецЕсли;
	ПозицияНачалаНенужногоТекста = Найти(ТекстОшибки,ПроверочнаяСтрока);
	ОкончаниеНенужногоТекста = ПозицияНачалаНенужногоТекста+СтрДлина(ПроверочнаяСтрока);
	
	Если ПозицияНачалаНенужногоТекста=0 Тогда
		Возврат;
	КонецЕсли;
	ОшибкаБезЛишнегоТекста = Сред(ТекстОшибки,ОкончаниеНенужногоТекста,СтрДлина(ТекстОшибки));
	ПозицияЗапятой = Найти(ОшибкаБезЛишнегоТекста,",");
	НомерСтрокиОшибки = Лев(ОшибкаБезЛишнегоТекста,ПозицияЗапятой-1);
	ОшибкаБезЛишнегоТекста = Сред(ОшибкаБезЛишнегоТекста,ПозицияЗапятой+2,СтрДлина(ОшибкаБезЛишнегоТекста));
	НомерКолонкиОшибки = Лев(ОшибкаБезЛишнегоТекста,Найти(ОшибкаБезЛишнегоТекста,")")-1);
	ТекствВидеСтроки = ТекстЗапроса.ПолучитьТекст();
	Попытка
		НомерСтрокиЧисло = Число(СтрЗаменить(НомерСтрокиОшибки,Символы.НПП,""));
		НомерСимволаЧисло = Число(СтрЗаменить(НомерКолонкиОшибки,Символы.НПП,""));
	Исключение
		Возврат;
	КонецПопытки;
	ТекНачалоСтроки = 1;
	Для Сч = 2 по НомерСтрокиЧисло Цикл
		СимволПереводаСтроки = Найти(Сред(ТекствВидеСтроки,ТекНачалоСтроки,СтрДлина(ТекствВидеСтроки)),Символы.ПС);
		Если СимволПереводаСтроки<>0 Тогда
			ТекНачалоСтроки = ТекНачалоСтроки+СимволПереводаСтроки;
		КонецЕсли;
	КонецЦикла;
	ПозицияНачалаВыделения = ТекНачалоСтроки+НомерКолонкиОшибки-1;
	ДлинаЗапроса = СтрДлина(ТекствВидеСтроки);
	ПозицияОкончанияВыделения = ПозицияНачалаВыделения+1;
	Для Сч = ПозицияНачалаВыделения+1 По ДлинаЗапроса Цикл
		Символ = Сред(ТекствВидеСтроки,Сч,1);
		Если Символ = " " или Символ = Символы.ПС или Символ = ")" или Символ = "(" или Символ = "	" Тогда
			Прервать;
		Иначе
			ПозицияОкончанияВыделения = Сч+1;
		КонецЕсли;
	КонецЦикла;
//	
	ТекущийЭлемент = Элементы.ПолеРедактированияЗапросаHTML;
	Элементы.ТекстЗапроса.УстановитьГраницыВыделения(ПозицияНачалаВыделения,ПозицияОкончанияВыделения);
	//Элементы.ТекстЗапроса.УстановитьГраницыВыделения(НомерСтрокиЧисло,НомерСимволаЧисло,НомерСтрокиЧисло,Сч+1);
	ОбновитьОтображениеДанных();
КонецПроцедуры // ВывестиНаКлиентеОшибкуЗапроса()

&НаКлиенте
Процедура СконструированЗапрос(Результат,Дополнительно) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапроса.УстановитьТекст(Результат);
	ИзТекстаВБраузер();
	Модифицированность = Истина;
КонецПроцедуры // СконструированЗапрос()

&НаКлиенте
// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура вЗадатьТекстЗапроса(Текст)
	ТекстЗапроса.УстановитьТекст(Текст);
	ИзТекстаВБраузер();
КонецПроцедуры // ЗадатьТекстЗапроса()

&НаКлиенте
// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура вОчиститьЗначения()

	ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	вЗадатьТекстЗапроса("");
	ПараметрыЗапроса.Очистить();
	ТаблицаВыборок.Очистить();
	ПоказыватьСлужебныеКолонкиРезультата = Ложь;
	
КонецПроцедуры // ОчиститьЗначения()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект = реквизитформывзначение("объект");
	Если НЕ Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные()) Тогда
		СтрокаОтладки = "ВнешниеОбработки.Создать("""+КаталогВременныхФайлов()+"zapr.epf"",Ложь).Дамп(Запрос)";
		ПутьФайлаОбработки = ОбработкаОбъект.ИспользуемоеИмяФайла;
		Если Найти(ПутьФайлаОбработки,"e1cib\")>0 Тогда
			Если Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки")<>Неопределено Тогда
				ДопОбработка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта","Запросник2_0");
				Если ЗначениеЗаполнено(ДопОбработка) Тогда
					Данные  = ДопОбработка.ХранилищеОбработки.Получить();
					Данные.Записать(КаталогВременныхФайлов()+"zapr.epf");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаОтладки = "Обработки."+ОбработкаОбъект.Метаданные().Имя+".Дамп(Запрос)";
	КонецЕсли;
	
КонецПроцедуры

//Выполняет метод по возможности асинхронно//
// Параметры:
//  Имя83  - Строка - имя метода в платформе 8.3
//  Имя82  - Строка - имя метода в платформе 8.2
//  ПараметрыМетода  - Массив - параметры вызываемого метода общие для 8.2 и 8.3
//  ПеременнаяРезультата  - Строка - Имя  переменной в доп. параметрых, в которую
//							будет записан результат функции
//  ПроцедураПродолжение  - Строка - Имя экпортной процедуры, в которой
//							код продолжения после асинхрона
//	ПроизвольныеПараметры - Структура - произвольные параметры для продолжения алгоритма

&НаКлиенте
Процедура ВыполнитьМетодСовместимость82(Имя83,Имя82,ПараметрыМетода,ПеременнаяРезультата="",ПроцедураПродолжение="",ПроизвольныеПараметры = Неопределено)
	Перем ОписанОп;
	
	Если ПроизвольныеПараметры = Неопределено Тогда
		ПроизвольныеПараметры = Новый Структура;
	КонецЕсли;
	ДопПараметры = Новый Структура("ТекстАлгоритма,МодульПродолжения,Парам",
		"ДополнительныеПараметры.Парам.Вставить("""+ПеременнаяРезультата+""",Значение);"+ПеременнаяРезультата+" = Значение",
			ПроцедураПродолжение,ПроизвольныеПараметры);
	СтрокаПараметров = "(";
	Если ПеременнаяРезультата = "" Тогда
		ДопПараметры.ТекстАлгоритма = ";";
	КонецЕсли;
	#Если ВебКлиент Тогда
		Возврат;//На веб клиенте не пожируешь..
	#КонецЕсли
	ЭтоПервый = Истина;
	Если мАктуальнаяПлатформа Тогда
		СтрокаПараметров = СтрокаПараметров+"ОписанОп";
		ЭтоПервый = Ложь;
	КонецЕсли;
	Для Сч = 0 по ПараметрыМетода.Количество()-1 Цикл
		СтрокаПараметров = СтрокаПараметров+?(ЭтоПервый,"",",")+"ПараметрыМетода["+Сч+"]";
		ЭтоПервый = Ложь;
	КонецЦикла;
	
	Если НЕ мАктуальнаяПлатформа Тогда
		СтрокаПараметров = СтрокаПараметров+")";
		Если ПеременнаяРезультата = "" Тогда
			Выполнить(Имя82+СтрокаПараметров);
			Выполнить("ОбработкаРезультатаКлиент(0,ДопПараметры)");

		Иначе
			Выполнить("ОбработкаРезультатаКлиент("+Имя82+СтрокаПараметров+",ДопПараметры)");
		КонецЕсли;
	Иначе
		Выполнить("ОписанОп = Новый ОписаниеОповещения(""ОбработкаРезультатаКлиент"",ЭтаФорма,ДопПараметры)");
		СтрокаПараметров = СтрокаПараметров+")";
		Выполнить(Имя83+СтрокаПараметров);
	КонецЕсли;

КонецПроцедуры // ВыполнитьМетодАсинхронно()

&НаКлиенте
Процедура ОбработкаРезультатаКлиент(Значение,ДополнительныеПараметры) Экспорт
	ТекстАлгоритма = ДополнительныеПараметры.ТекстАлгоритма;
	Выполнить(ТекстАлгоритма);
	Если ДополнительныеПараметры.МодульПродолжения <> "" Тогда
		Выполнить(ДополнительныеПараметры.МодульПродолжения+"("+ДополнительныеПараметры.Парам+")");
	КонецЕсли;

КонецПроцедуры // ОбработкаРезультатаКлиент()

&НаКлиенте
Процедура ОчиститьТекстЗапросаОтМусора()
	ИзБраузераВТекст();
	ТекстЗапроса.УстановитьТекст(обПропылесоситьТекстЗапроса(ТекстЗапроса.ПолучитьТекст()));
	ИзТекстаВБраузер();
КонецПроцедуры // ОчиститьТекстЗапросаОтМусора()

&НаКлиенте
Процедура ЗагрузкаПлановЗапроса()
	КоличествоПопытокПрочитатьПлан=КоличествоПопытокПрочитатьПлан+1;
	Для Каждого УидДляПлана Из СтруктураУИД Цикл
		Если УидДляПлана.Ключ = "ОсновнойЗапрос" Тогда
			СтруктураЗапроса = ПолучитьСтруктуруЗапроса(УидДляПлана.Значение.Начало,УидДляПлана.Значение.Конец);
			Если КоличествоПопытокПрочитатьПлан=3 И не ЗначениеЗаполнено(СтруктураЗапроса.План) Тогда
				СтруктураЗапроса.План = "Не удалось прочитать план запроса. Возможно, не прошло 60 секунд с момента настройки ЖР";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураЗапроса.План) Тогда
				РезультатВМетаданных = ПреобразоватьВМетаданные(СтруктураЗапроса.Запрос,СтруктураЗапроса.План,СтруктураЗапроса.ТипСУБД,АдресХранилищаМетаданных);
				СтруктураУИД.ОсновнойЗапрос.ПланМета = РезультатВМетаданных.ПланВыполненияЗапросаВМетаданных;
				СтруктураУИД.ОсновнойЗапрос.ЗапросМета = РезультатВМетаданных.ТекстЗапросаВВидеМетаданных;
				ПланЗапроса = РезультатВМетаданных.ПланВыполненияЗапросаВМетаданных;
				ТекстЗапросаСУБД = РезультатВМетаданных.ТекстЗапросаВВидеМетаданных;
				СтруктураУИД.ОсновнойЗапрос.Запрос = СтруктураЗапроса.Запрос;
				СтруктураУИД.ОсновнойЗапрос.План = СтруктураЗапроса.План;
				ОтключитьОбработчикОжидания("ЗагрузкаПлановЗапроса");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПолучениеПлановЗапроса()

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	ОчиститьТекстЗапросаОтМусора();
	Элементы.НадписьВыполнениеЗапроса.Заголовок = "Выполнение запроса...";
	//ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	СтруктураУид = Новый структура;
	#Если НЕ ВебКлиент Тогда
		СтараяМодифицированность = Модифицированность;
		Файл = Новый Файл(КаталогВременных+"ZaprTemp.Sel");
		вСохранитьЗапросыВФайл(Ложь,Ложь,Файл);
		Модифицированность = СтараяМодифицированность;
	#КонецЕсли
	//Перед выполнением проверим синтаксис
	
	ОшибкаСинтаксиса = ВыполнитьЗапросНаСервере(СтруктураУИД);
	Если ОшибкаСинтаксиса <> Неопределено Тогда
		ВывестиНаКлиентеОшибкуЗапроса(ОшибкаСинтаксиса,"}: Ошибка при вызове метода контекста (НайтиПараметры): {(");
	КонецЕсли;
	НовСтрока = ВерсииЗапроса.Добавить();
	НовСтрока.ДатаВерсии = ТекущаяДата();
	мДатаТекущейВерсииЗапроса = НовСтрока.ДатаВерсии;
	НовСтрока.ТекстЗапроса = ТекстЗапроса.ПолучитьТекст();
	ЗаполнитьКоллекциюКоллекцией(НовСтрока.Параметры,ПараметрыЗапроса);
	УстановитьДоступностьКнопокВерсий();

	УправлениеДиалогом();
	Если ВключеноПолучениеПланаЗапросов Тогда
		КоличествоПопытокПрочитатьПлан = 0;
		ПодключитьОбработчикОжидания("ЗагрузкаПлановЗапроса",3,Ложь);
		ПланЗапроса = "Ожидается получение плана запроса...";
		ТекстЗапросаСУБД = "Ожидается получение текста запроса СУБД...";
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ПолеРедактированияЗапросаHTML;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапросаНаСервере(обТекущийЗапрос)
	Для каждого СтрокаПараметров Из ПараметрыЗапроса Цикл
		Если СтрокаПараметров.ЭтоВыражение Тогда
			обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Вычислить(СтрокаПараметров.ЗначениеПараметра));
		Иначе
			Если ТипЗнч(СтрокаПараметров.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра.ВыгрузитьЗначения());
			ИначеЕсли ЗначениеЗаполнено(СтрокаПараметров.МоментВремениСсылка) Тогда	
				//это момент времени
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Новый МоментВремени(СтрокаПараметров.МоментВремениДата,СтрокаПараметров.МоментВремениСсылка));
			ИначеЕсли ЗначениеЗаполнено(СтрокаПараметров.ГраницаВид) Тогда
				//это граница
				Граница = Новый Граница(СтрокаПараметров.ГраницаЗначение,ВидГраницы[СтрокаПараметров.ГраницаВид]);
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Граница);
			ИначеЕсли Лев(СтрокаПараметров.ЗначениеПараметра,15) = "ТаблицаЗначений" Тогда	
				ТЗ = Новый ТаблицаЗначений;
				Для Каждого Колонка Из СтрокаПараметров.ОписаниеТаблицыЗначений Цикл
					ТЗ.Колонки.Добавить(Колонка.Значение.ИмяКолонки,Колонка.Значение.ТипЗначения);
				КонецЦикла;
				Для Каждого СтрокаТЗ Из СтрокаПараметров.ТаблицаЗначений Цикл
					НоваяСтрока = ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ.Значение);
				КонецЦикла;
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, ТЗ);
			Иначе	
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
			КонецЕсли;//  
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СохранитьВременнуюТаблицу(ЗапросПакета,ОбТекущийЗапрос,РезультатЗапроса,МассивПомещенныхТаблиц,ВремяВМиллисекундах)
	ИмяТаблицы = ЗапросПакета.ТаблицаДляПомещения;
	МассивПомещенныхТаблиц.Добавить(ИмяТаблицы);

	мНайдено = ВременныеТаблицы.НайтиСтроки(Новый Структура("Таблица",ИмяТаблицы));
	Если мНайдено.Количество()>0 Тогда
		ВременныеТаблицы.Удалить(мНайдено[0]);
	КонецЕсли;			

	Выборка =  РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Количество = Строка(Выборка[0]);
	КонецЕсли;

	НоваяСтрока = ВременныеТаблицы.Добавить();
	НоваяСтрока.Таблица				= ЗапросПакета.ТаблицаДляПомещения;
	НоваяСтрока.ВремяВыполнения		= Строка(ВремяВМиллисекундах/1000)+" сек.";
	НоваяСтрока.КоличествоСтрок		= Количество;
	НоваяСтрока.ТекстЗапроса		= ОбТекущийЗапрос.Текст;
	НоваяСтрока.Отладить			= "отладить";
	СоздатьХранилищеВТНаФорме(НоваяСтрока.Таблица,ОбТекущийЗапрос,НоваяСтрока);
КонецПроцедуры

&НаСервере
Процедура ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ИмяТаблицы, ТЗ, обТекущийЗапрос)
	ЗапросМенеджера = Новый Запрос;
	ЗапросМенеджера.МенеджерВременныхТаблиц = обТекущийЗапрос.МенеджерВременныхТаблиц;
	ЗапросМенеджера.Текст = "Выбрать * Поместить "+ИмяТаблицы+" Из &ТЗ Т";
	
	МассивУдаления = Новый Массив;
	РежимПострочногоСоздания = Ложь;
	Для Каждого КолонкаТЗ ИЗ ТЗ.Колонки Цикл
		Если КолонкаТЗ.ТипЗначения = Новый ОписаниеТипов("NULL") или КолонкаТЗ.ТипЗначения = Новый ОписаниеТипов() 
			Тогда
			МассивУдаления.Добавить(КолонкаТЗ);
		КонецЕсли;
		Если ТЗ.Количество()>0 и КолонкаТЗ.ТипЗначения.СодержитТип(типзнч(Тип("Число"))) Тогда
			РежимПострочногоСоздания = Истина;
		КонецЕсли;
	КонецЦикла;

	Для Каждого КолонкаТЗ Из МассивУдаления Цикл
		ИмяКолонки = КолонкаТЗ.Имя;
		ТЗ.Колонки.Удалить(ТЗ.Колонки.Индекс(ТЗ.Колонки.Найти(ИмяКолонки)));
		ТЗ.Колонки.Добавить(ИмяКолонки,Справочники.ТипВсеСсылки());
	КонецЦикла;
	
	Если РежимПострочногоСоздания Тогда
		ЗапросМенеджера.Текст = "";
		ПерваяСтрока = Истина;
		Для Каждого СтрокаТЗ Из ТЗ Цикл
			Если НЕ ПерваяСтрока Тогда ЗапросМенеджера.Текст = ЗапросМенеджера.Текст+" Объединить все " КонецЕсли;
			ЗапросМенеджера.Текст = ЗапросМенеджера.Текст +" Выбрать "+Символы.ПС;
			Для Каждого Колонка ИЗ ТЗ.Колонки Цикл
				ЭтоПоследняяКолонка = ТЗ.Колонки.Индекс(Колонка) = ТЗ.Колонки.Количество()-1;
				ЭтоКолонкаТипа =  Колонка.ТипЗначения.СодержитТип(типзнч(Тип("Число")));
				Если ЭтоКолонкаТипа Тогда
					ЗапросМенеджера.Текст = ЗапросМенеджера.Текст +
					?(Метаданные.НайтиПоТипу(СтрокаТЗ[Колонка.Имя])<>Неопределено ," ТИП("+Метаданные.НайтиПоТипу(СтрокаТЗ[Колонка.Имя]).ПолноеИмя()+")","Неопределено")
					+?(ПерваяСтрока," КАК "+Колонка.Имя,"")+?(ЭтоПоследняяКолонка,"",",");
				Иначе
					ЗапросМенеджера.Текст = ЗапросМенеджера.Текст +
					"&Строка"+ТЗ.Индекс(СтрокаТЗ)+"Колонка"+ТЗ.Колонки.Индекс(Колонка)+
					?(ПерваяСтрока," КАК "+Колонка.Имя,"")+?(ЭтоПоследняяКолонка,"",",");
					ЗапросМенеджера.УстановитьПараметр("Строка"+ТЗ.Индекс(СтрокаТЗ)+"Колонка"+ТЗ.Колонки.Индекс(Колонка),СтрокаТЗ[Колонка.Имя]);
					
				КонецЕсли;
			КонецЦикла;
			
			Если ПерваяСтрока Тогда
				ЗапросМенеджера.Текст = ЗапросМенеджера.Текст +Символы.ПС+"Поместить "+ИмяТаблицы+Символы.ПС;
				ПерваяСтрока = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		ЗапросМенеджера.УстановитьПараметр("ТЗ",ТЗ);
	КонецЕсли;

	ЗапросМенеджера.Выполнить();
КонецПроцедуры

&НаСервере
Процедура ПодключитьСохраненныеВременныеТаблицы(ЗапросПакета, обТекущийЗапрос,МассивПомещенныхТаблиц)
	Для Каждого Оператор Из ЗапросПакета.Операторы Цикл
		Если ТипЗнч(Оператор)=Тип("ОператорВыбратьСхемыЗапроса") Тогда
			Для Каждого Источник Из Оператор.Источники Цикл
				Если ТипЗнч(Источник.Источник)=Тип("ОписаниеВременнойТаблицыСхемыЗапроса") Тогда
					ИмяТаблицы = Источник.Источник.Псевдоним;
					Если МассивПомещенныхТаблиц.Найти(ИмяТаблицы)=Неопределено Тогда
						мНайдено = ВременныеТаблицы.НайтиСтроки(Новый Структура("Таблица",ИмяТаблицы));
						Если мНайдено.Количество()>0 Тогда
							ПоместитьТаблицуЗначенийВоВременнуюТаблицу(ИмяТаблицы,ПолучитьИзВременногоХранилища(мНайдено[0].Адрес),обТекущийЗапрос);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗапросНаСервере(СтруктураУИД)
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса.ПолучитьТекст());
	Ошибка = Неопределено;

	обТекущийЗапрос = Новый Запрос;
	обТекущийЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	обТекущийЗапрос.Текст = ТекстЗапроса.ПолучитьТекст();
	
	Попытка
		обТекущийЗапрос.НайтиПараметры();
	Исключение
		Ошибка = ОписаниеОшибки();	
		Возврат Ошибка;
	КонецПопытки;
	
	УстановитьПараметрыЗапросаНаСервере(обТекущийЗапрос);
	МассивПомещенныхТаблиц = Новый Массив;
	
	ОбщееВремяЗапроса = 0;
	Для Каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		ПодключитьСохраненныеВременныеТаблицы(ЗапросПакета, обТекущийЗапрос, МассивПомещенныхТаблиц);
		
		ОбТекущийЗапрос.Текст = ЗапросПакета.ПолучитьТекстЗапроса();
		Если ВключеноПолучениеПланаЗапросов Тогда
			//Добавим простенький запрос для идентификации
			УИДЗапроса = Новый УникальныйИдентификатор;
			УИДЗапросаОкончание = Новый УникальныйИдентификатор;
			обТекущийЗапрос.Текст = "Выбрать """+УИДЗапроса+""" ;"+Символы.ПС+обТекущийЗапрос.Текст+Символы.ПС
				+?(Найти(обТекущийЗапрос.Текст,";")>0,"",";")+"Выбрать """+УИДЗапросаОкончание+"""";
		КонецЕсли;
		
		ВремяНачала	= ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		Попытка
			Если ВключеноПолучениеПланаЗапросов Тогда
				РезультатЗапроса = ОбТекущийЗапрос.ВыполнитьПакет()[1];
			Иначе
				РезультатЗапроса = ОбТекущийЗапрос.Выполнить();
			КонецЕсли;
		Исключение
			Если Ошибка = Неопределено Тогда
				Сообщить(ОписаниеОшибки());
				Возврат Неопределено;
			Иначе
				Возврат Ошибка;
			КонецЕсли;
		КонецПопытки;
		
		ВремяВМиллисекундах	= ТекущаяУниверсальнаяДатаВМиллисекундах()-ВремяНачала;		
		ОбщееВремяЗапроса 	= ОбщееВремяЗапроса + ВремяВМиллисекундах;
		
		Если ТипЗнч(ЗапросПакета)=Тип("ЗапросВыбораСхемыЗапроса") И ЗначениеЗаполнено(ЗапросПакета.ТаблицаДляПомещения) Тогда
			СохранитьВременнуюТаблицу(ЗапросПакета,ОбТекущийЗапрос,РезультатЗапроса,МассивПомещенныхТаблиц,ВремяВМиллисекундах);
		КонецЕсли;
	КонецЦикла;
	Если ВключеноПолучениеПланаЗапросов Тогда
		СтруктураУИД.Вставить("ОсновнойЗапрос",Новый Структура("Начало,Конец,Запрос,План,ЗапросМета,ПланМета",УИДЗапроса,УИДЗапросаОкончание,"","","",""));
	КонецЕсли;
	
	АдресРезультатаЗапроса = ПоместитьВоВременноеХранилище(РезультатЗапроса,ЭтаФорма.УникальныйИдентификатор);
	ВывестиРезультат(РезультатЗапроса);
	
	Элементы.НадписьВыполнениеЗапроса.Заголовок = "Чистое время выполнения "+ОбщееВремяЗапроса/1000+" сек.";
	Элементы.ВременныеТаблицы.Заголовок 		= "Временные таблицы" + ?(ВременныеТаблицы.Количество()=0,"", "("+ВременныеТаблицы.Количество()+")");
	ВременнаяТаблица.Очистить();
	ИмяВременнойТаблицы = "";
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗапроса(УИД,УидКонца)
	ФайлыЛогаТЖ = НайтиФайлы(КаталогВременныхФайлов()+"ZaprosnikTemp","*.log",Истина);
	Для Каждого ФайлЛога Из ФайлыЛогаТЖ Цикл
		СодержаниеЛога = Новый ЧтениеТекста(ФайлЛога.ПолноеИмя,,,,Ложь);
		Выход = Ложь;
		Пока НЕ Выход Цикл
			СледующаяСтрока =  СодержаниеЛога.ПрочитатьСтроку();
			Если СледующаяСтрока = Неопределено Тогда
				Прервать;
			КонецЕсли;
			Если Найти(СледующаяСтрока,Строка(УИД))>0 Тогда
				Возврат ПрочитатьТекстыТЖ(СодержаниеЛога,УИД,УидКонца);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	Возврат Новый Структура("Запрос,План,ТипСУБД,ПланМета,ЗапросМета","","","","","");
КонецФункции // ПолучитьСтруктуруЗапроса()

&НаСервереБезКонтекста
Функция ПрочитатьТекстыТЖ(СодержаниеЛога, УИД,УИДКонца)
	Запрос = "";
	План = "";
	НачатоЧтениеЗапроса = Ложь;
	НачатоЧтениеПлана = Ложь;
	СпецСимвол = "'";
	ТекущееСобытие = "";
	ЗапросПрочитан = Ложь;
	ОкончательноПрочитан = Ложь;
	ПланПрочитан = Ложь;
	СимволКонцаЗапроса = "";
	АктуальныйЗапрос = "";
	Пока Истина Цикл
		СледующаяСтрока = СодержаниеЛога.ПрочитатьСтроку();
		Если СледующаяСтрока = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если Найти(СледующаяСтрока,",DBMSSQL,")>0 Тогда
			ТекущееСобытие = "DBMSSQL";
		ИначеЕсли Найти(СледующаяСтрока,",DBV8DBENG,")>0 Тогда
			ТекущееСобытие = "DBV8DBENG";
		ИначеЕсли Найти(СледующаяСтрока,",DBPOSTGRS,")>0 Тогда
			ТекущееСобытие = "DBPOSTGRS";
		КонецЕсли;
		ПозицияПлана = Найти(СледующаяСтрока,"planSQLText='");
		ПозицияЗапроса = Найти(СледующаяСтрока,"Sql=");
		ПозицияСпецсимвола = Найти(СледующаяСтрока,СпецСимвол);
		ПозицияСимволаКонцаЗапроса = Найти(СледующаяСтрока,СимволКонцаЗапроса);
		Если НачатоЧтениеЗапроса Тогда
			Если ПозицияСимволаКонцаЗапроса = 0 Тогда
				Запрос = Запрос + СледующаяСтрока + Символы.ПС;
			Иначе
				Запрос = Запрос + Лев(СледующаяСтрока,ПозицияСимволаКонцаЗапроса-1)+ Символы.ПС;
				НачатоЧтениеЗапроса = Ложь;
				Если Найти(Запрос,УИД)=0 и Найти(Врег(Запрос),"ACCRGOPT")=0 
					и Найти(Врег(Запрос),"ACCUMRGOPT")=0 
					и Найти(Врег(Запрос),"ACCUMRGAGGOPT")=0
					и Найти(Врег(Запрос),"TRUNCATE TABLE")=0 
					и Найти(Врег(Запрос),"DROP TABLE")=0 Тогда     
					ЗапросПрочитан = Истина;
					Если Найти(Врег(Запрос),врег(УИДКонца))>0 Тогда
						ОкончательноПрочитан = Истина;
						Возврат Новый Структура("Запрос,План, ТипСУБД,ПланМета,ЗапросМета",АктуальныйЗапрос,План,ТекущееСобытие,"","");
					КонецЕсли;
					АктуальныйЗапрос = Запрос;
				Иначе
					Запрос = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НачатоЧтениеПлана Тогда
			Если ПозицияСпецсимвола = 0 Тогда
				План = План +СледующаяСтрока+ Символы.ПС ;
			Иначе
				План = План + Лев(СледующаяСтрока,ПозицияСпецсимвола-1)+ Символы.ПС;
				НачатоЧтениеПлана = Ложь;
				Если Найти(План,УИД)=0
					и Найти(Врег(План),"ACCRGOPT")=0
					и Найти(Врег(План),"ACCUMRGAGGOPT")=0 Тогда
					ПланПрочитан = Истина;
				Иначе
					План = "";
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		Если ПозицияПлана <> 0 и ЗапросПрочитан Тогда
			План = "";
			Если ТекущееСобытие = "DBMSSQL" Тогда
				План = "Rows,Executes,EstimateRows,EstimateIO,EstimateCPU,AvgRowSize,TotalSubtreeCost,EstimateExecutions,StmtText"+Символы.ПС;
			ИначеЕсли ТекущееСобытие = "DBPOSTGRS" Тогда
			КонецЕсли;
			НачатоЧтениеПлана = Истина;
			План = План + Сред(СледующаяСтрока,ПозицияПлана+13,СтрДлина(СледующаяСтрока))+ Символы.ПС;
			
			Продолжить;
		ИначеЕсли ПозицияЗапроса <> 0 Тогда
			НачатоЧтениеЗапроса = Истина;
			Запрос = Сред(СледующаяСтрока,ПозицияЗапроса+4,СтрДлина(СледующаяСтрока))+ Символы.ПС;
			СимволКонцаЗапроса = Сред(СледующаяСтрока,ПозицияЗапроса+4,1);
			Если СимволКонцаЗапроса<>"'" и СимволКонцаЗапроса<>"""" Тогда
				СимволКонцаЗапроса = ",";
			Иначе
				Запрос = Сред(Запрос,2,СтрДлина(Запрос));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ОкончательноПрочитан и ПланПрочитан Тогда
			Возврат Новый Структура("Запрос,План,ТипСУБД,ПланМета,ЗапросМета",Запрос,План,ТекущееСобытие,"","");
		КонецЕсли;
	КонецЦикла;
	Возврат Новый Структура("Запрос,План,ТипСУБД,ПланМета,ЗапросМета","","","","","");

КонецФункции // ПрочитатьТекстыТЖ()

// Процедуры изменения реквизитов формы 
&НаСервере
Процедура СоздатьХранилищеВТНаФорме(ИмяТаблицы,Запрос,СтрокаВТ)
	Запрос.Текст = "Выбрать * Из "+ИмяТаблицы;
	ТЗ = Запрос.Выполнить().Выгрузить();
 	Если СтрокаВТ.Адрес <> "" Тогда
 		СтрокаВТ.Адрес = ПоместитьВоВременноеХранилище(ТЗ,СтрокаВТ.Адрес);
	Иначе
		СтрокаВТ.Адрес = ПоместитьВоВременноеХранилище(ТЗ,УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры // СоздатьХранилищеВТНаФорме()

Процедура ОчиститьХранилищеВТНаФорме(ИмяУдаляемойВт=Неопределено)
	МассивНаУдаление = Новый Массив;
	Для Каждого ИмяВт Из ВременныеТаблицы Цикл
		Если ВРЕГ(ИмяВТ.Таблица)<>Врег(ИмяУдаляемойВт) и ИмяУдаляемойВт<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ПоместитьВоВременноеХранилище(Неопределено,ИмяВт.Адрес);
	КонецЦикла;
КонецПроцедуры // СоздатьХранилищеВТНаФорме()

&НаСервере
Процедура ВывестиРезультат(мРезЗапроса)
	Если СпособВыгрузки = 0 Тогда
		РекФормы = "РезультатТаблица"
	Иначе                   
		РекФормы = "РезультатДерево";
	КонецЕсли;
	//Очистим колонки результата в форме
	Если СпособВыгрузки = 0 Тогда
		ЭтаФорма[РекФормы].Очистить();
	Иначе
		ЭтаФорма[РекФормы].ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	КоллекцияКолонок = РеквизитФормыВЗначение(РекФормы).Колонки;
	МассивУдаляемыхКолонок = Новый Массив;
	Для Каждого Колонка Из КоллекцияКолонок Цикл
		Если Колонка.Имя = "СлужебныйРек__"  Тогда
			Продолжить;
		КонецЕсли;
		МассивУдаляемыхКолонок.Добавить(РекФормы+"."+Колонка.Имя);
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) и РекФормы = "РезультатТаблица" и не врег(Колонка.Имя) = "УРОВЕНЬ" Тогда
			МассивУдаляемыхКолонок.Добавить(РекФормы+"Итог"+Колонка.Имя);
		КонецЕсли;
		ЭлементФормы = Элементы.Найти(РекФормы+Колонка.Имя);
		Если ЭлементФормы<>Неопределено Тогда
			Элементы.Удалить(ЭлементФормы);
		КонецЕсли;
		
	КонецЦикла;
	ИзменитьРеквизиты(,МассивУдаляемыхКолонок);

		
	
	МассивРеквизитов = Новый Массив;
	УдаляемыеКолонкиТЗ = Новый Структура;
	ЧисловыеКолонки = Новый Массив;
	Если мРезЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЕстьПроблемныеТипы = Ложь; //Для хранилищ, двоичных данных и т.п. нужно сохранять значение отдельно для дальнейшего просмотра
	Для Каждого КолонкаРез из мРезЗапроса.Колонки Цикл
		ТекТип = КолонкаРез.ТипЗначения;
		Если КолонкаРез.ТипЗначения.СодержитТип(Тип("РезультатЗапроса")) Тогда
			ТекТип = Новый ОписаниеТипов("Строка"); 
			ЕстьПроблемныеТипы = Истина;
			УдаляемыеКолонкиТЗ.Вставить(КолонкаРез.Имя,"РезультатЗапроса");
		ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			ТекТип = Новый ОписаниеТипов("Строка"); 
			ЕстьПроблемныеТипы = Истина;
			УдаляемыеКолонкиТЗ.Вставить(КолонкаРез.Имя,"ХранилищеЗначения");
		ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("Тип")) Тогда
			ТекТип = Новый ОписаниеТипов("Строка"); 
			ЕстьПроблемныеТипы = Истина;
			УдаляемыеКолонкиТЗ.Вставить(КолонкаРез.Имя,"ТекПредставление");

		ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("ДвоичныеДанные")) Тогда
			ТекТип = Новый ОписаниеТипов("Строка"); 
			ЕстьПроблемныеТипы = Истина;
			//УдаляемыеКолонкиТЗ.Вставить(КолонкаРез.Имя,"ХранилищеЗначения");

		ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			ЕстьПроблемныеТипы = Истина;
			ТекТип = Новый ОписаниеТипов("Строка"); 
			УдаляемыеКолонкиТЗ.Вставить(КолонкаРез.Имя, "ТекПредставление");
		ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("Число")) и РекФормы = "РезультатТаблица" и не Врег(КолонкаРез.Имя) = "УРОВЕНЬ" Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы(РекФормы+"Итог"+КолонкаРез.Имя, Новый ОписаниеТипов("Число"), "")); 
			ЧисловыеКолонки.Добавить(КолонкаРез.Имя);
		КонецЕсли;
		МассивРеквизитов.Добавить(Новый РеквизитФормы(КолонкаРез.Имя, ТекТип, РекФормы)); 
	КонецЦикла;
	Если ПоказыватьСлужебныеКолонкиРезультата Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ТипЗаписи", Новый ОписаниеТипов("Строка"), РекФормы)); 
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Группировка", Новый ОписаниеТипов("Строка"), РекФормы)); 
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Уровень", Новый ОписаниеТипов("Число"), РекФормы)); 
	КонецЕсли;
	Если СпособВыборки = 1 Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИмяВыборки_", Новый ОписаниеТипов("Строка"), РекФормы)); 
	КонецЕсли;
	ИзменитьРеквизиты(МассивРеквизитов);
	Если СпособВыборки = 1 Тогда
		НовыйЭлемент = Элементы.Добавить(РекФормы + "ИмяВыборки_", Тип("ПолеФормы"), Элементы[РекФормы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = "Имя выборки";
		НовыйЭлемент.ПутьКДанным = РекФормы+".ИмяВыборки_";
		НовыйЭлемент.ЦветТекста = WebЦвета.Коричневый;
		НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.Коричневый;
	КонецЕсли;
	
	Если ПоказыватьСлужебныеКолонкиРезультата Тогда
		НовыйЭлемент = Элементы.Добавить(РекФормы + "ТипЗаписи", Тип("ПолеФормы"), Элементы[РекФормы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = РекФормы+".ТипЗаписи";
		НовыйЭлемент.ЦветТекста = WebЦвета.Синий;
		НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.Синий;

		НовыйЭлемент = Элементы.Добавить(РекФормы + "Группировка", Тип("ПолеФормы"), Элементы[РекФормы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = РекФормы+".Группировка";
		НовыйЭлемент.ЦветТекста = WebЦвета.Синий;
		НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.Синий;

		НовыйЭлемент = Элементы.Добавить(РекФормы + "Уровень", Тип("ПолеФормы"), Элементы[РекФормы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = РекФормы+".Уровень";
		НовыйЭлемент.ЦветТекста = WebЦвета.Синий;
		НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.Синий;

	КонецЕсли;

	Для Каждого КолонкаРез из мРезЗапроса.Колонки Цикл
		НовыйЭлемент = Элементы.Добавить(РекФормы + КолонкаРез.Имя, Тип("ПолеФормы"), Элементы[РекФормы]);
		НовыйЭлемент.ТолькоПросмотр = Истина;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = РекФормы+"." + КолонкаРез.Имя;
		Если КолонкаРез.ТипЗначения.СодержитТип( Тип("Число")) и РекФормы = "РезультатТаблица" Тогда
			НовыйЭлемент.ОтображатьВПодвале = Истина;
			НовыйЭлемент.ПутьКДаннымПодвала = РекФормы+"Итог" + КолонкаРез.Имя;
		КонецЕсли;
		НайденноеСвойство = "";
		Если УдаляемыеКолонкиТЗ.Свойство(КолонкаРез.Имя,НайденноеСвойство) и (НайденноеСвойство = "ХранилищеЗначения"
			или НайденноеСвойство = "РезультатЗапроса"
			или НайденноеСвойство = "ДвоичныеДанные") Тогда
			НовыйЭлемент.ГиперссылкаЯчейки = Истина;
			НовыйЭлемент.ЦветТекста = WebЦвета.Синий;
		КонецЕсли;
	КонецЦикла;
	Если СпособВыгрузки = 0 Тогда
		Если СпособВыборки = 0 Тогда
			ТЗРезультата  = мРезЗапроса.Выгрузить();
			Если ЕстьПроблемныеТипы Тогда
				ТЗРасшифровка = ТЗРезультата.Скопировать();
				ТЗРасшифровка.Колонки.Добавить("СлужебныйРек__",Новый ОписаниеТипов("Число"));
			КонецЕсли;

			Для Каждого ПереоформляемаяКолонка Из УдаляемыеКолонкиТЗ Цикл
				ИмяКолонки = ПереоформляемаяКолонка.Ключ;

				Если ПереоформляемаяКолонка.Значение = "ТекПредставление" Тогда
					ТЗРезультата.Колонки.Добавить(ИмяКолонки+"Temp",Новый ОписаниеТипов("Строка"));
					Для Каждого СтрокаРез Из ТЗРезультата Цикл
						СтрокаРез[ИмяКолонки+"Temp"] = Строка(СтрокаРез[ИмяКолонки]);
					КонецЦикла;
					ТЗРезультата.Колонки.Удалить(ТЗРезультата.Колонки.Найти(ПереоформляемаяКолонка.Ключ));
					ТЗРезультата.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов("Строка"));
					Для Каждого СтрокаРез Из ТЗРезультата Цикл
						СтрокаРез[ИмяКолонки] = СтрокаРез[ИмяКолонки+"Temp"];
					КонецЦикла;
					ТЗРезультата.Колонки.Удалить(ТЗРезультата.Колонки.Найти(ПереоформляемаяКолонка.Ключ+"Temp"));

				Иначе
					ТЗРезультата.Колонки.Удалить(ТЗРезультата.Колонки.Найти(ПереоформляемаяКолонка.Ключ));
					ТЗРезультата.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов("Строка"));

					ТЗРезультата.ЗаполнитьЗначения(ПереоформляемаяКолонка.Значение,ИмяКолонки);
				КонецЕсли;
				
			КонецЦикла;
//			РезультатТаблица.Загрузить(ТЗРезультата);
			Для Каждого СтрокаРез иЗ ТЗРезультата Цикл
				НоваяСтрока = РезультатТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРез);
				Если ЕстьПроблемныеТипы Тогда
					ТЗРасшифровка[ТЗРезультата.Индекс(СтрокаРез)].СлужебныйРек__ = НоваяСтрока.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЦикла;
			Если ЕстьПроблемныеТипы Тогда
				АдресХранилищаРезультатаЗапроса = ПоместитьВоВременноеХранилище(ТЗРасшифровка,УникальныйИдентификатор);
			Иначе
				АдресХранилищаРезультатаЗапроса = "";
			КонецЕсли;
			
			Для Каждого ЧисловаяКолонка Из ЧисловыеКолонки Цикл
				ЭтаФорма[РекФормы+"Итог"+ЧисловаяКолонка] = ТЗРезультата.Итог(ЧисловаяКолонка);
			КонецЦикла;
			РезультатКоличествоСтрок = "Всего "+ТЗРезультата.Количество()+" строк";
		Иначе
			СкопироватьТаблицуВыборокВПеременную();
			СчетчикРекурсии = 0;
			Если мТаблицаВыборок.Количество() = 0 Тогда
				Сообщить("Не описана ни одна выборка из запроса!");
				Возврат;
			КонецЕсли; 
			ТЗРезультата = РеквизитФормыВЗначение("РезультатТаблица");
			ТЗРезультата.Очистить();
			ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии,мРезЗапроса,ТЗРезультата);
			ЗначениеВРеквизитФормы(ТЗРезультата,"РезультатТаблица");
		КонецЕсли;
	Иначе
		Если СпособВыборки = 0 Тогда
			ДеревоРезультата = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			ДеревоРезультата.Колонки.Добавить("СлужебныйРек__",Новый ОписаниеТипов("Число"));
			Для Каждого ПереоформляемаяКолонка Из УдаляемыеКолонкиТЗ Цикл
				ИмяКолонки = ПереоформляемаяКолонка.Ключ;
				ДеревоРезультата.Колонки.Удалить(ТЗРезультата.Колонки.Найти(ПереоформляемаяКолонка.Ключ));
				ДеревоРезультата.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов("Строка"));
				ДеревоРезультата.ЗаполнитьЗначения(ПереоформляемаяКолонка.Значение,ИмяКолонки);
			КонецЦикла;
			ЗначениеВДанныеФормы(ДеревоРезультата,РезультатДерево);
		Иначе
			СкопироватьТаблицуВыборокВПеременную();
			СчетчикРекурсии = 0;
			Если мТаблицаВыборок.Количество() = 0 Тогда
				Сообщить("Не описана ни одна выборка из запроса!");
				Возврат;
			КонецЕсли; 
			ДеревоРезультата = РеквизитФормыВЗначение("РезультатДерево");
			ДеревоРезультата.Строки.Очистить();
			ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии,мРезЗапроса,ДеревоРезультата.Строки);
			ЗначениеВРеквизитФормы(ДеревоРезультата,"РезультатДерево");
		КонецЕсли;
		РезультатКоличествоСтрок = "Всего "+мРезЗапроса.выбрать().Количество()+" строк";
	КонецЕсли;
	Элементы.Результаты.ТекущаяСтраница = Элементы.Результат;

	Элементы.РезультатТаблицаСлужебныйРек.Видимость = Элементы.РезультатТаблица.ПодчиненныеЭлементы.Количество()=1;
	
	//ЗначениеВРеквизитФормы(ТЗРезультата,"РезультатТаблица");
КонецПроцедуры // ВывестиРезультат()

Процедура ВывестиВыборкуЗапросаРекурсивно(Знач СчетчикРекурсии, Знач Выборка, ПриемникРезультата)
	
	СтрокаОписанияВыборки = мТаблицаВыборок[СчетчикРекурсии];
	
	Если СтрокаОписанияВыборки.ТипОбхода = "По группировкам" Тогда
		ТекТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкам;
	ИначеЕсли СтрокаОписанияВыборки.ТипОбхода = "По группировкам с иерархией"  Тогда
		ТекТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией
	Иначе
		ТекТипОбхода = "Прямой"
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаОписанияВыборки.Группировки) Тогда
		СтрокаГруппировки = СтрокаОписанияВыборки.Группировки;
	Иначе	
		СтрокаГруппировки = Неопределено;
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаОписанияВыборки.ГруппировкиДляЗначенийГруппировок) Тогда
		СтрокаГруппировкиДляЗначенийГруппировок = СтрокаОписанияВыборки.ГруппировкиДляЗначенийГруппировок;
	Иначе	
		СтрокаГруппировкиДляЗначенийГруппировок = Неопределено;
	КонецЕсли; 
	
	Попытка
		ТекВыборка = Выборка.Выбрать(ТекТипОбхода,СтрокаГруппировки,СтрокаГруппировкиДляЗначенийГруппировок); 
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Пока ТекВыборка.Следующий() Цикл
		
		НовСтрока = ПриемникРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,ТекВыборка);
		Если СпособВыборки = 1 Тогда
			Если Не ПустаяСтрока(СтрокаОписанияВыборки.Имя)Тогда
				НовСтрока.ИмяВыборки_ 	= СтрокаОписанияВыборки.Имя;
			Иначе	
				НовСтрока.ИмяВыборки_ 	= СтрокаОписанияВыборки.Группировки;
			КонецЕсли; 
			
		КонецЕсли; 
		Если ПоказыватьСлужебныеКолонкиРезультата Тогда
			НовСтрока.ТипЗаписи 	= ТекВыборка.ТипЗаписи();
			НовСтрока.Группировка	= ТекВыборка.Группировка();
			НовСтрока.Уровень 		= ТекВыборка.Уровень();
		КонецЕсли; 
		
		Если ТекТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией И ОбходитьИерархическиеВыборкиРекурсивно Тогда
			//такой тип обхода может иметь иерархическую вложенность
			//проходим его до упора
			ТекВыборкаВниз = ТекВыборка.Выбрать(ТекТипОбхода,СтрокаГруппировки,СтрокаГруппировкиДляЗначенийГруппировок);
			Если ТипЗнч(ПриемникРезультата) = Тип("КоллекцияСтрокДереваЗначений") Тогда
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии, ТекВыборка, НовСтрока.Строки)
			Иначе
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии, ТекВыборка, ПриемникРезультата)
			КонецЕсли; 
		КонецЕсли; 
		
		Если СчетчикРекурсии < мТаблицаВыборок.Количество() - 1 Тогда
			
			Если ТипЗнч(ПриемникРезультата) = Тип("КоллекцияСтрокДереваЗначений") Тогда
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии + 1, ТекВыборка, НовСтрока.Строки)
			Иначе
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии + 1, ТекВыборка, ПриемникРезультата)
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;  
    	
КонецПроцедуры //ВывестиВыборкуЗапросаРекурсивно


Процедура СкопироватьТаблицуВыборокВПеременную()
	
	мТаблицаВыборок = РеквизитФормыВЗначение("ТаблицаВыборок").СкопироватьКолонки();
	
	Для каждого Строка Из ТаблицаВыборок Цикл
		Если НЕ Строка.Включена Тогда Продолжить КонецЕсли; 
		НоваяСтрока = мТаблицаВыборок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла; 
	
КонецПроцедуры //Скоп

Процедура СократитьДоЗначимогоСимвола(ТекстЗапроса)
	Пока Истина Цикл
 		ТекСимвол = Лев(ТекстЗапроса,1);
		Если ТекСимвол="" Тогда
			Возврат;
		ИначеЕсли ТекСимвол = " " 
			Или ТекСимвол = Символы.ПС Тогда
			ТекстЗапроса = Сред(ТекстЗапроса,2,СтрДлина(ТекстЗапроса));
		Иначе
			Возврат;
		КонецЕсли;
 	КонецЦикла;
	

КонецПроцедуры // СократитьДоЗначимогоСимвола()

&НаКлиенте
Процедура ОткрытьФормуСовместимость82(ИмяОткрываемойФормы,СтруктураПараметров = Неопределено,МодульРезультата = "") Экспорт
	Если СисИнфо = Неопределено Тогда
		СисИнфо = Новый СистемнаяИнформация;
	КонецЕсли;
	
	Если Лев(СисИнфо.ВерсияПриложения,3)="8.2" Тогда
		Результат = ОткрытьФормуМодально(ИмяОткрываемойФормы,СтруктураПараметров,ЭтаФорма);
		Если МодульРезультата <> "" Тогда
			Выполнить(МодульРезультата+"(Результат,Неопределено)");
		КонецЕсли;
	Иначе
		Если МодульРезультата <> "" Тогда
			ОписаниеОповещения = Неопределено;
			Выполнить("ОписаниеОповещения = Новый ОписаниеОповещения(МодульРезультата,ЭтаФорма)");
			Выполнить("ОткрытьФорму(ИмяОткрываемойФормы,СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
		Иначе
			Выполнить("ОткрытьФорму(ИмяОткрываемойФормы,СтруктураПараметров,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры // ОткрытьФормуСовместимость82()


&НаКлиенте
Процедура КнопкаПараметры(Команда)
	ИзБраузераВТекст();
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ПараметрыЗапросаУпр");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыборки(Команда)
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ФормаВыборкиУпр");
КонецПроцедуры

//удаляет из текста запроса всю шнягу которая там при переносе из модуля 
//(палки, кавычки, точки с запятой)
&НаКлиенте
Функция обПропылесоситьТекстЗапроса(ИсходныйТекст) Экспорт
	
    ИсходныйТекст = СокрЛП(ИсходныйТекст);
	
	//вертипалки
    ОбработанныйТекст	=	СтрЗаменить(ИсходныйТекст,"|","");
	
	//открывающая кавычка
	Пока Лев(ОбработанныйТекст,1) = Символ(34) Цикл
		ОбработанныйТекст = Сред(ОбработанныйТекст,2);
		//закрывающая кавычка удаляется только если была открывающая
		//иначе может быть глюк со строковым выражением в запросе
		Пока Прав(ОбработанныйТекст,1) = Символ(34) Цикл
			ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
		КонецЦикла; 
	КонецЦикла; 
	//закрывающая точка с запятой
	Если Прав(ОбработанныйТекст,1) = ";" Тогда
	    ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
	КонецЕсли; 
	
	//двойные кавычки надо заменить на одинарные
	//Строка2Кавычки = Символ(34) + Символ(34);
	//Строка1Кавычка = Символ(34);
	
    //ОбработанныйТекст	=	СтрЗаменить(ОбработанныйТекст,Строка2Кавычки,Строка1Кавычка);
	
	Возврат ОбработанныйТекст;

КонецФункции //обПропылесоситьТекстЗапроса


&НаКлиенте
Процедура НадписьСкрытьПоказатьСписокЗапросовНажатие(Элемент)
	мПараметрыОтображения.ПанельСписокЗапросовСвернутаВлево = НЕ мПараметрыОтображения.ПанельСписокЗапросовСвернутаВлево; 
	УправлениеДиалогом();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьИмяОписание(Команда)
	мПараметрыОтображения.ПанельИмяОписаниеСвернута = НЕ мПараметрыОтображения.ПанельИмяОписаниеСвернута; 	
	УправлениеДиалогом();
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДиалогом()
	Элементы.ЛеваяЧастьВертикальная.Видимость					= НЕ мПараметрыОтображения.ПанельСписокЗапросовСвернутаВлево;
	Элементы.НадписьКартинкаСкрытьПанельЗапросов.Видимость		= НЕ мПараметрыОтображения.ПанельСписокЗапросовСвернутаВлево; 
	Элементы.НадписьКартинкаПоказатьСписокЗапросов.Видимость	= мПараметрыОтображения.ПанельСписокЗапросовСвернутаВлево; 
	Элементы.ИмяОписаниеЗапроса.Видимость						= НЕ мПараметрыОтображения.ПанельИмяОписаниеСвернута; 
		
	Если СпособВыгрузки = 0 Тогда
		//ТЗ
		Элементы.РезультатТаблица.Видимость = Истина;
		Элементы.РезультатДерево.Видимость = Ложь;
	Иначе
		//дерево
		Элементы.РезультатТаблица.Видимость = Ложь;
		Элементы.РезультатДерево.Видимость = Истина;
	КонецЕсли;
	
	Если ИмяФайлаЗапроса<>"" Тогда
		Заголовок = "Запросник "+Версия+": "+ИмяФайлаЗапроса;
	Иначе
		Заголовок = "Запросник "+Версия;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПодключитьВнешнююКомпонентуKeyboardHook();
	АктивироватьПолеРедактированияЗапросаHTML();
	
	Если ИмяФайлаЗапроса<>"" Тогда
		//Попытаемся загрузить
		ЗагрузитьДеревоЗапросовИзФайла(Ложь);
	КонецЕсли;
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда
		вСоздатьНовыйФайлЗапросов();
	КонецЕсли;
	УправлениеДиалогом();
	СформироватьПодменюПоследнихФайлов();
	Если ЗначениеЗаполнено(ПутьФайлаОбработки) Тогда
		ПодключитьОбработчикОжидания("ЗакачатьОбработкуНаСервер",1,Истина);
	КонецЕсли;
	ВыполнитьМетодСовместимость82("НачатьПолучениеКаталогаВременныхФайлов","КаталогВременныхФайлов",
		Новый Массив,"КаталогВременных");
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакачатьОбработкуНаСервер()
	Если Найти(Врег(СтрокаСоединенияИнформационнойБазы()),"FILE=")>0 Тогда
		//закачивать ничего не нужно
		СтрокаОтладки = "ВнешниеОбработки.Создать("""+ПутьФайлаОбработки+""",Ложь).Дамп(Запрос)";
		Возврат;
	КонецЕсли;
	попытка
	Данные = Новый ДвоичныеДанные(ПутьФайлаОбработки);
	Адрес = ПоместитьВоВременноеХранилище(Данные);
	ПолучитьОбработкуНаСервере(Адрес);	
	исключение
	КонецПопытки;
КонецПроцедуры // ЗакачатьОбработкуНаСервер()
&НаСервереБезКонтекста
Процедура ПолучитьОбработкуНаСервере(Адрес)
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	Данные.Записать(КаталогВременныхФайлов()+"zapr.epf");
КонецПроцедуры


&НаКлиенте
Процедура НовыйФайлНажатие(Элемент)
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		вСоздатьНовыйФайлЗапросов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлНажатие(Элемент)
	// Вставить содержимое обработчика.
	ЗагрузитьДеревоЗапросовИзФайла(Истина);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопокВерсий()

	Если ВерсииЗапроса.Количество()<=1 Тогда
		Объект.ПоказатьУправлениеВерсиями = Ложь;
		//Элементы.КнопкаПредыдущаяВерсия.Видимость = Ложь;
		//Элементы.КнопкаСледующаяВерсия.Видимость = Ложь;
		//Элементы.КнопкаСписокВерсий.Видимость = Ложь;
	Иначе	
		Объект.ПоказатьУправлениеВерсиями = Истина;
		//Элементы.КнопкаПредыдущаяВерсия.Видимость = Истина;
		//Элементы.КнопкаСледующаяВерсия.Видимость = Истина;
		//Элементы.КнопкаСписокВерсий.Видимость = Истина;
	КонецЕсли;//  
	
	//находим текущую версию
	
	СтрокаТекВерсия = ВерсииЗапроса.НайтиСтроки(Новый Структура("ДатаВерсии",мДатаТекущейВерсииЗапроса));
	Если СтрокаТекВерсия.Количество() > 0 Тогда
		СтрокаТекВерсия = СтрокаТекВерсия[0];
	Иначе
		СтрокаТекВерсия = Неопределено;
	КонецЕсли;
	
	Если СтрокаТекВерсия = Неопределено ИЛИ ВерсииЗапроса.Количество() = 0 Тогда
		Элементы.КнопкаПредыдущаяВерсия.Доступность = Ложь;
		Элементы.КнопкаСледующаяВерсия.Доступность = Ложь;
		Возврат;
	КонецЕсли;//  
	
	Элементы.КнопкаПредыдущаяВерсия.Доступность = Истина;
	Элементы.КнопкаСледующаяВерсия.Доступность = Истина;
	
	ТекИндекс = ВерсииЗапроса.Индекс(СтрокаТекВерсия);
	
	Если ТекИндекс = ВерсииЗапроса.Количество()-1 Тогда
		//это последняя строка
		//следующих версий нет
		Элементы.КнопкаСледующаяВерсия.Доступность = Ложь;
	КонецЕсли;//  

	Если ТекИндекс = 0 Тогда
		//это первая строка
		//предыдущих версий нет
		Элементы.КнопкаПредыдущаяВерсия.Доступность = Ложь;
	КонецЕсли;//  
	
КонецПроцедуры //УстановитьДоступностьКнопокВерсий

&НаСервере
Процедура ВыполнитьНаСервереПолностью(Знач ТекстАлгоритма,Знач ПараметрыАлгоритма,Знач ВыполнятьВТранзакции) Экспорт
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Выполнить(ТекстАлгоритма);
	Если ВыполнятьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры // ВыполнитьНаСервереПолностью()

&НаКлиенте
Функция вПолучитьТекстЗапроса(Знач ТолькоВыделенныйТекст = Ложь)

	Если Не ТолькоВыделенныйТекст Тогда
		Возврат ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

    ТекстЗап = Элементы.ТекстЗапроса.ВыделенныйТекст;
	Если СтрДлина(ТекстЗап) <> 0 Тогда
		Возврат ТекстЗап;
	Иначе
		Возврат ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

КонецФункции // ПолучитьТекстЗапроса()


&НаСервере
Процедура УстановитьПараметрыНовогоЗапроса(Уид)
	СтрокаДерева = ДеревоЗапросов.НайтиПоИдентификатору(Уид);
	СтрокаДерева.Запрос = "Новый";
	СтрокаДерева.СпособВыгрузки = 0;
	СтрокаДерева.СпособВыборки = 0;     
	СтрокаДерева.ОбходитьИерархическиеВыборкиРекурсивно = Истина;     
	СтрокаДерева.ТекстЗапроса = "";
	
	ПараметрыОбъект = РеквизитФормыВЗначение("ПараметрыЗапроса").СкопироватьКолонки();
	
	ЗначениеВДанныеФормы(ПараметрыОбъект,СтрокаДерева.ПараметрыЗапроса);
	ВерсииОбъект = РеквизитФормыВЗначение("ВерсииЗапроса").СкопироватьКолонки();
    ЗначениеВДанныеФормы(ВерсииОбъект,СтрокаДерева.ВерсииЗапроса);
КонецПроцедуры //У
&НаКлиенте
Процедура ПоследниеФайлыНажатие(Элемент)
	// Вставить содержимое обработчика.
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ПоследниеФайлыЗапросов",,"ВыборФайлаИзСпискаПоследних");
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаИзСпискаПоследних(Результат,ДополнительныеПараметры)  Экспорт
	Если Результат <> Неопределено Тогда
		ИмяФайлаЗапроса = Результат.Каталог + Результат.Файл;
		ПутьФайлаЗапроса = Результат.Каталог;
		ЗагрузитьДеревоЗапросовИзФайла(Ложь);
	КонецЕсли;
	

КонецПроцедуры // ВыборФайлаИзСпискаПоследних()


&НаКлиенте
Процедура ВыполнитьАлгоритм(Команда)
// Вставить содержимое обработчика.
 ПараметрыИсх = Новый Структура;
 ПараметрыИсх.Вставить("СтруктураРезультата",ПолучитьСтруктуруРезультата());
 ОткрытьФормуСовместимость82(мПутьКОбработке+".ВыполнениеАлгоритмаУпр",ПараметрыИсх);
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруРезультата()
	Если РезультатТаблица.Количество()>0 Тогда
		МассивВыгрузки = Новый Массив;
		МассивВыгрузки.Добавить(РезультатТаблица.Получить(0));
	КонецЕсли;
	РезультатОбъект = РезультатТаблица.Выгрузить(МассивВыгрузки);
	СтруктураКолонок = РезультатОбъект.Колонки;
	СтруктураОписания = Новый Структура;

	Для Каждого Колонка Из СтруктураКолонок Цикл
		Если Колонка.Имя = "СлужебныйРек__" Тогда
			Продолжить;
		КонецЕсли;
		Если РезультатОбъект.Количество()>0 Тогда
			СтруктураОписания.Вставить(Колонка.Имя,РезультатОбъект[0][Колонка.Имя]);
		Иначе
			СтруктураОписания.Вставить(Колонка.Имя,Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураОписания;
КонецФункции // ПолучитьСтруктуруРезультата()

&НаКлиенте
Процедура КнопкаПредыдущаяВерсия(Команда)
	СтрокаТекВерсия = ВерсииЗапроса.НайтиСтроки(Новый Структура("ДатаВерсии",мДатаТекущейВерсииЗапроса));
	
	Если СтрокаТекВерсия.Количество()=0 Тогда
		Возврат;
	КонецЕсли;//  
	
	ТекИндекс = ВерсииЗапроса.Индекс(СтрокаТекВерсия[0]);
	
	Если ТекИндекс = 0 Тогда
		//это последняя строка
		//следующих версий нет
		Возврат;
	КонецЕсли;//  
	
	УстановитьВерсиюЗапроса(ВерсииЗапроса[ТекИндекс-1]);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСледующаяВерсия(Команда)
	//находим текущую версию
	
	СтрокаТекВерсия = ВерсииЗапроса.НайтиСтроки(Новый Структура("ДатаВерсии",мДатаТекущейВерсииЗапроса));
	
	Если СтрокаТекВерсия.Количество()=0 Тогда
		Возврат;
	КонецЕсли;//  
	
	ТекИндекс = ВерсииЗапроса.Индекс(СтрокаТекВерсия[СтрокаТекВерсия.Количество()-1]);//Просто нулевой элемент взять нельзя, т.к. может оказаться две записи в пределах одной секунды
	
	Если ТекИндекс = ВерсииЗапроса.Количество()-1 Тогда
		//это последняя строка
		//следующих версий нет
		Возврат;
	КонецЕсли;//  
	
	УстановитьВерсиюЗапроса(ВерсииЗапроса[ТекИндекс+1]);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВерсиюЗапроса(СтрокаВерсии)
	мДатаТекущейВерсииЗапроса = СтрокаВерсии.ДатаВерсии;
	
	ТекстЗапроса.УстановитьТекст(СтрокаВерсии.ТекстЗапроса);
	ИзТекстаВБраузер();
	
	ПараметрыЗапроса.Очистить();
	
	ЗаполнитьКоллекциюКоллекцией(ПараметрыЗапроса,СтрокаВерсии.Параметры);
	
	Элементы.ПолеРедактированияЗапросаHTML.РасширеннаяПодсказка.Заголовок = "версия " + СокрЛП(мДатаТекущейВерсииЗапроса);
	Элементы.ПолеРедактированияЗапросаHTML.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
	ПоказатьНадписьВерсия("версия " + СокрЛП(мДатаТекущейВерсииЗапроса), 5);
	УстановитьДоступностьКнопокВерсий();

КонецПроцедуры // УстановитьВерсиюЗапроса()
&НаКлиенте
Процедура ПоказатьНадписьВерсия(ТекстСообщения, ВрямяПоказаСек)
	ОкноБраузера().ShowVersion(ТекстСообщения,ВрямяПоказаСек);
КонецПроцедуры //ПоказатьНадписьВерсия

&НаКлиенте
Процедура КнопкаСписокВерсий(Команда)
	ПараметрыИсх = Новый Структура;
	ПараметрыИсх.Вставить("Версии",ВерсииЗапроса);
	ПараметрыИсх.Вставить("ДатаТекВерсии",мДатаТекущейВерсииЗапроса);
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ВерсииЗапросаУпр",ПараметрыИсх,"ЗавершитьВыборВерсии");
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборВерсии(Результат,Дополнительное) Экспорт
	Если Результат <> Неопределено Тогда
		МассивВерсий = ВерсииЗапроса.НайтиСтроки(Новый Структура("ДатаВерсии",Результат));
		Если МассивВерсий.Количество()>0 Тогда
			УстановитьВерсиюЗапроса(МассивВерсий[0]);
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры // ЗавершитьВыборВерсии()


&НаСервере
Процедура ЗаполнитьЗначенияДополнительный(КудаЗаполнять,ЧтоЗаполнять,Коллекция)
	Если ТипЗнч(Коллекция) = Тип("ДанныеФормыДерево") Тогда
		ТипОбъекта = "ДеревоЗначений";
	Иначе
		ТипОбъекта = "ТаблицаЗначений";
	КонецЕсли;
	Колонки = ДанныеФормыВЗначение(Коллекция,Тип(ТипОбъекта)).Колонки;
	Для Каждого Колонка Из Колонки Цикл
		Если ТипЗнч(КудаЗаполнять[Колонка.Имя]) = Тип("ДанныеФормыКоллекция") Тогда
			КудаЗаполнять[Колонка.Имя].Очистить();
			Для Каждого СтрокаКоллекцииЗаполнения Из ЧтоЗаполнять[Колонка.Имя] Цикл
				НоваяСтрока = КудаЗаполнять[Колонка.Имя].Добавить();
				ЗаполнитьЗначенияДополнительный(НоваяСтрока,СтрокаКоллекцииЗаполнения,ЧтоЗаполнять[Колонка.Имя]);
			КонецЦикла;
		Иначе
			КудаЗаполнять[Колонка.Имя] = ЧтоЗаполнять[Колонка.Имя];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьЗначенияДополнительный()
&НаКлиенте
Процедура ИмяВременнойТаблицыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ФормаВыбораВТУпр",,"ВыбранаВТ")
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаВТ(Результат,ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ИмяВременнойТаблицы = Результат.Таблица;
		СтрокиВТ = ВременныеТаблицы.НайтиСтроки(Новый Структура("Таблица",Результат.Таблица));
		Если СтрокиВТ.Количество() = 0 Тогда
			Сообщить("Не найдено выбранной ВТ");
			Возврат;
		КонецЕсли;
		ИмяВременнойТаблицыПриИзменении(СтрокиВТ[0].ПолучитьИдентификатор());
		Если Результат.Отладка Тогда
			ОтладитьЗапросВременнойТаблицы(Результат.Таблица);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ВыбранаВТ()

&НаКлиенте
Процедура ИмяВременнойТаблицыПриИзменении(Элемент)
	ЗаполнитьВремТаблНаСервере(Элемент);
КонецПроцедуры
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьВремТаблНаСервере(ИдВТ)
	СтрокаВТ = ВременныеТаблицы.НайтиПоИдентификатору(ИдВТ);
	РекФормы = СтрокаВТ.Таблица;
	Если СтрокаВТ = Неопределено Тогда
		Сообщить("Не обнаружено временной таблицы в коллекции");
		Возврат;
	КонецЕсли;
	
	ТЗВременнойТ = ПолучитьИзВременногоХранилища(СтрокаВТ.Адрес);
	Если ТЗВременнойТ = Неопределено Тогда
		Сообщить("Не обнаружено сохраненного значения ВТ");
		Возврат;
	КонецЕсли;
	КоллекцияКолонок = ТЗВременнойТ.Колонки;
	МассивРеквизитов = Новый Массив;
	ОчиститьВременнуюТаблицу();
	
	Для Каждого Колонка Из КоллекцияКолонок Цикл
         МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ВременнаяТаблица"));
    КонецЦикла;
 
    ИзменитьРеквизиты(МассивРеквизитов);
	Для Каждого КолонкаРез из КоллекцияКолонок Цикл
		НовыйЭлемент = Элементы.Добавить("ВременнаяТаблица" + КолонкаРез.Имя, Тип("ПолеФормы"), Элементы["ВременнаяТаблица"]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ВременнаяТаблица." + КолонкаРез.Имя;
	КонецЦикла;
	ВременнаяТаблица.Загрузить(ТЗВременнойТ);
КонецПроцедуры // ЗаполнитьВремТаблНаСервере()

&НаСервере
Процедура ОчиститьВременнуюТаблицу()
	 Колонки = РеквизитФормыВЗначение("ВременнаяТаблица").Колонки;
	 МассивУдаляемыеРеквизитов = Новый Массив;
	 Для Каждого Колонка Из Колонки Цикл
		 Если Колонка.Имя = "СлужебныйРек__" Тогда
			 Продолжить;
		 КонецЕсли;
		 МассивУдаляемыеРеквизитов.Добавить("ВременнаяТаблица."+Колонка.Имя);
		 НайденныйЭлемент = Элементы.Найти("ВременнаяТаблица"+Колонка.Имя);
		 Если НайденныйЭлемент<>Неопределено Тогда
			 Элементы.Удалить(НайденныйЭлемент);
		 КонецЕсли;
	 КонецЦикла;
	 ИзменитьРеквизиты(,МассивУдаляемыеРеквизитов);

КонецПроцедуры // ОчиститьВременнуюТаблицу()

&НаКлиенте
Процедура РезультатТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "РезультатТаблицаСлужебныйРек" Тогда
		Возврат;
	КонецЕсли;
	Значение = РезультатТаблица.НайтиПоИдентификатору(ВыбраннаяСтрока)[СтрЗаменить(Поле.Имя,"РезультатТаблица","")];
	Если (Значение = "ХранилищеЗначения" или Значение = "РезультатЗапроса") и АдресХранилищаРезультатаЗапроса <> ""Тогда
		Значение = ПолучитьРасшифровкуПоля(ВыбраннаяСтрока,Поле.Имя);
	КонецЕсли;
	Если Значение = "ТаблицаЗначений" Тогда
		ПараметрыИсходящие = Новый Структура;
		ПараметрыИсходящие.Вставить("СтруктураКолонок",ПолучитьИзВременногоХранилища(АдресОписанияКолонокТЗРасшифровки));
		ПараметрыИсходящие.Вставить("ВходящийСписок",ПолучитьИзВременногоХранилища(АдресСоставаСтрокТЗРасшифровки));
		ПараметрыИсходящие.Вставить("ТолькоПросмотр",Истина);
		ОткрытьФормуСовместимость82(мПутьКОбработке+".ФормаТаблицыЗначенийУпр",ПараметрыИсходящие);
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("ДвоичныеДанные") Тогда
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Длг.ПолноеИмяФайла = ИмяФайлаЗапроса;
		Длг.Каталог = ПутьФайлаЗапроса;
		Длг.Заголовок = "Выберите файл для сохранения двоичных данных";
		
		Если Длг.Выбрать() Тогда
			ИмяФайлаСохранения = Длг.ПолноеИмяФайла;
			Значение.Записать(ИмяФайлаСохранения);
			ЗапуститьПриложение(ИмяФайлаСохранения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	Если Это82() Тогда
		ОткрытьЗначение(Значение);
	Иначе
		Выполнить("ПоказатьЗначение(,Значение)");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуПоля(ID,ИмяПоля)
	ЗначениеРасшифровки = ПолучитьИзВременногоХранилища(АдресХранилищаРезультатаЗапроса).Найти(РезультатТаблица.НайтиПоИдентификатору(ID).СлужебныйРек__,"СлужебныйРек__")[СтрЗаменить(ИмяПоля,"РезультатТаблица","")];
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ХранилищеЗначения") Тогда
		ЗначениеРасшифровки = ЗначениеРасшифровки.Получить();
	КонецЕсли;
	Если ТипЗнч(ЗначениеРасшифровки) = Тип("ТаблицаЗначений") Тогда
		ОписаниеКолонокТЗ = Новый СписокЗначений;
		МассивУдаляемых = Новый Массив;
		МассивУдаляемых.Добавить("ТЗРасшифровки");
	
		//добавим тз на форму
		СписокРасшифровки = Новый СписокЗначений;
		Для Каждого КолонкаРез из ЗначениеРасшифровки.Колонки Цикл
			ТекТип = КолонкаРез.ТипЗначения;
			
			Если КолонкаРез.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
				ТекТип = Новый ОписаниеТипов("Строка"); 
				ЕстьПроблемныеТипы = Истина;
			ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("Тип")) Тогда
				ТекТип = Новый ОписаниеТипов("Строка"); 
				ЕстьПроблемныеТипы = Истина;
				
			ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("Тип")) Тогда
				ТекТип = Новый ОписаниеТипов("Строка"); 
				ЕстьПроблемныеТипы = Истина;
				//УдаляемыеКолонкиТЗ.Вставить(КолонкаРез.Имя,"ХранилищеЗначения");
				
			ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
				ЕстьПроблемныеТипы = Истина;
				ТекТип = Новый ОписаниеТипов("Строка"); 
			КонецЕсли;
			ОписаниеКолонокТЗ.Добавить(Новый Структура("ТипЗначения,ИмяКолонки",ТекТип,КолонкаРез.Имя));
		КонецЦикла;
		Для Каждого СтрокаТЗ Из ЗначениеРасшифровки Цикл
			СтруктураТЗ = Новый Структура;
			Для Каждого ОписаниеКолонки Из ОписаниеКолонокТЗ Цикл
				СтруктураТЗ.Вставить(ОписаниеКолонки.Значение.ИмяКолонки,СтрокатЗ[ОписаниеКолонки.Значение.ИмяКолонки]);
			КонецЦикла;
			СписокРасшифровки.Добавить(СтруктураТЗ);
		КонецЦикла;
		АдресСоставаСтрокТЗРасшифровки = ПоместитьВоВременноеХранилище(СписокРасшифровки);
		АдресОписанияКолонокТЗРасшифровки = ПоместитьВоВременноеХранилище(ОписаниеКолонокТЗ);
		Возврат "ТаблицаЗначений"
	КонецЕсли;
	Возврат ЗначениеРасшифровки;
	
КонецФункции // ПолучитьРасшифровкуПоля()

&НаКлиенте
Функция Это82() Экспорт
	Если СисИнфо = Неопределено Тогда
		СисИнфо = Новый СистемнаяИнформация;
	КонецЕсли;
	Возврат Лев(СисИнфо.ВерсияПриложения,3)="8.2";
	

КонецФункции // ВерсияПриложения()

&НаКлиенте
Процедура ДобавитьПодчиненныйЗапрос(Команда)
	
	ТекСтрока = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	НовСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
	УстановитьПараметрыНовогоЗапроса(НовСтрока.ПолучитьИдентификатор());
	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = НовСтрока.ПолучитьИдентификатор();

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокуДерева(Команда)
	Если Элементы.ДеревоЗапросов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ВыборСтрокиДереваЗапросовУпр",,"ЗакончитьВыборСтрокаДерева");
КонецПроцедуры


&НаКлиенте
Процедура ЗакончитьВыборСтрокаДерева(Результат,ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		Если Результат = "ВерхнийУровень" Тогда
			НоваяСтрокаРодитель = ДеревоЗапросов
		Иначе
			НоваяСтрокаРодитель = ДеревоЗапросов.НайтиПоИдентификатору(Результат);
		КонецЕсли;
		НоваяСтрока = НоваяСтрокаРодитель.ПолучитьЭлементы().Добавить();
		ТекСтрока = Элементы.ДеревоЗапросов.ТекущиеДанные;
		вДобавитьСтроки(ТекСтрока.ПолучитьИдентификатор(), НоваяСтрока.ПолучитьИдентификатор(), "ДеревоЗапросов");		
		Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда
			РодительПрошлый = ДеревоЗапросов.ПолучитьЭлементы()
		Иначе
			РодительПрошлый = ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы();
		КонецЕсли;
		РодительПрошлый.Удалить(ТекСтрока);
	КонецЕсли;
	Модифицированность = Истина;

КонецПроцедуры // ЗакончитьВыборСтрокаДерева()

&НаКлиенте
Процедура СохранитьРезультат(Команда)
	// Обработчик нажатия кнопки командной панели "Сохранить в табличный документ"
	
	//Перем ЗаголовокКолонки;

	//Если мРезЗапроса <> Неопределено Тогда
	//	
	//	ФормаТабДок = ПолучитьФорму("ТабличныйДокумент",ЭтаФорма);
	//	ТабДок = ФормаТабДок.ЭлементыФормы.ПолеТабличногоДокумента;
	//	ТабДок.Очистить();
	//	
	//	КоличествоКолонок = мРезЗапроса.Колонки.Количество();

	//	Выборка = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

	//	ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
	//	ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
	//	ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
	//	ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
	//	ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
	//	ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
	//	ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
	//	ОбластьЗаголовка = ТабДок.ПолучитьОбласть(1, , 1, );
	//	
	//	Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
	//		Область = ОбластьЗаголовка.Область(1, ТекущееПоле + 1);
	//		Область.Текст = мРезЗапроса.Колонки[ТекущееПоле].Имя;
	//		Область.ШиринаКолонки = мРезЗапроса.Колонки[ТекущееПоле].Ширина;
	//	КонецЦикла;
	//	ТабДок.Вывести(ОбластьЗаголовка);
	//	ОбластьЗаголовка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
	//	
	//	ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина, , ,);
	//	ОбластьЗаголовка.ЦветФона = WebЦвета.ЦветокБелый;
	//	ОбластьЗаголовка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

	//	ТабДок.НачатьАвтогруппировкуСтрок();
	//	Пока Выборка.Следующий() Цикл
	//		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
	//			ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
	//		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
	//			ИсходнаяСтрока = ОбластьИерархическихЗаписей;
	//		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
	//			ИсходнаяСтрока = ОбластьОбщихИтогов;
	//		Иначе
	//			ИсходнаяСтрока = ДетальнаяСтрока;
	//		КонецЕсли;
	//			
	//		Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
	//			Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
	//			Область.Текст = Выборка[ТекущееПоле];
	//		КонецЦикла;
	//		ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
	//	КонецЦикла;
	//	ТабДок.ЗакончитьАвтогруппировкуСтрок();

	//	ФормаТабДок.Открыть();
	//	
	//КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура РаскрытьРезультат(Команда)
	// Вставить содержимое обработчика.
	ПараметрыИсх = Новый Структура;
	ПараметрыИсх.Вставить("РезультатТаблица",РезультатТаблица);
	ПараметрыИсх.Вставить("РезультатДерево",РезультатДерево);
	ПараметрыИсх.Вставить("ЭтоДерево",Элементы.РезультатДерево.Видимость);
	ОткрытьФормуСовместимость82(мПутьКОбработке+".РезультатУпр",ПараметрыИсх);
КонецПроцедуры

&НаКлиенте
Процедура ОтладитьВТ(Команда)
	// Вставить содержимое обработчика.
	ОтладитьЗапросВременнойТаблицы(ИмяВременнойТаблицы);
КонецПроцедуры

&НаКлиенте
//в дереве запросов создается запрос по формированию временной таблицы 
//в него копируются параметры текущего запроса
//и он отлаживается
Процедура ОтладитьЗапросВременнойТаблицы(ИмяВТ)

	Если Не ЗначениеЗаполнено(ИмяВТ) Тогда Возврат КонецЕсли; 
	
	//попытаемся найти таблицу в списке временных таблиц
	
	СтрокаВТ = ВременныеТаблицы.НайтиСтроки(Новый Структура("Таблица",ИмяВТ));
	
	Если СтрокаВТ.Количество() = 0 Тогда Возврат Иначе СтрокаВт = СтрокаВт[0] КонецЕсли; 
	
	ТекСтрока = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	//строка временной таблицы в дереве добавляется под родительский запрос
	
	ИмяСтрокиВДереве = "врем.табл. " + ИмяВТ;
	
	//сначала попробуем ее там найти
	
	СтрокаВтВДереве = Новый Массив;
	Для Каждого Поддерево Из ТекСтрока.ПолучитьЭлементы() Цикл
		Если Поддерево.Запрос = ИмяСтрокиВДереве Тогда
			СтрокаВТВДереве.Добавить(Поддерево);
		КонецЕсли;
	КонецЦикла;
	Если СтрокаВТВДереве.Количество()=0 Тогда
		СтрокаВТВДереве = ТекСтрока.ПолучитьЭлементы().Добавить();
	Иначе
		СтрокаВТВДереве = СтрокаВТВДереве[0];
	КонецЕсли; 
	
	УстановитьПараметрыНовогоЗапроса(СтрокаВТВДереве.ПолучитьИдентификатор());
	
	//копируем параметры запроса
	СтрокаВТВДереве.Запрос = ИмяСтрокиВДереве;
	
	//обрабатываем текст запроса
	
	ТекстЗапросаВТ = СтрокаВТ.ТекстЗапроса;
	
	//удаляем из текста запроса ПОМЕСТИТЬ и имя таблицы
	
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"ПОМЕСТИТЬ " + ИмяВТ,"");
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"поместить " + ИмяВТ,"");
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"Поместить " + ИмяВТ,"");
	
	СтрокаВТВДереве.ТекстЗапроса = ТекстЗапросаВТ;
	
	Для каждого ИсхПараметр Из ТекСтрока.ПараметрыЗапроса Цикл
		
		НовПараметр = СтрокаВТВДереве.ПараметрыЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НовПараметр,ИсхПараметр);
		
	КонецЦикла;	
	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = СтрокаВТВДереве.ПолучитьИдентификатор();
	
	ВремяВыполненияВТ = СтрокаВТ.ВремяВыполнения;
	
	//чистим результат
	РезультатДерево.ПолучитьЭлементы().Очистить();
	РезультатТаблица.Очистить();
	Элементы.НадписьВыполнениеЗапроса.Заголовок = "";
	РезультатКоличествоСтрок = "";
	
	////чистим данные по временным таблицам
	//ИмяВременнойТаблицы = "";
	//ВременныеТаблицы.Очистить();
	
	
	
	//ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.Результат;
	//ЭлементыФормы.ПанельРезультата.Страницы.ВременныеТаблицы.Заголовок = "Временные таблицы";
	Элементы.Результаты.ТекущаяСтраница = Элементы.Результат;
	Модифицированность = Истина;

КонецПроцедуры //ОтладитьЗапросВременнойТаблицы

&НаКлиенте
Процедура КнопкаКонструктора(Команда)
	ОткрытьКонструкторЗапроса(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДамп(Команда)
	ЗагрузитьДампНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДампНаСервере()
	ФайлыДампа = НайтиФайлы(КаталогВременныхФайлов(),"*.sdmp",Ложь);	
	Для Каждого Дамп Из ФайлыДампа Цикл
		СтруктураДампа = ЗначениеИзФайла(Дамп.ПолноеИмя);
		Если СтруктураДампа.ИБ <> СтрокаСоединенияИнформационнойБазы() Тогда
			Продолжить;
		КонецЕсли;
		УдалитьФайлы(Дамп.ПолноеИмя);
		НоваяСтрокаДерева = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
		НоваяСтрокаДерева.Запрос = "Отладка";
		НоваяСтрокаДерева.ТекстЗапроса = СтруктураДампа.ТекстЗапроса;
		Для Каждого ПараметрЗапроса Из СтруктураДампа.Параметры Цикл
			НовПараметр = НоваяСтрокаДерева.ПараметрыЗапроса.Добавить();
			НовПараметр.ИмяПараметра = ПараметрЗапроса.Ключ;
			НовПараметр.ЭтоВыражение = Ложь;
			
			Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Массив") Тогда
				//массив преобразуем в список, чтобы можно было смотреть/править интерактивно
				Список = Новый СписокЗначений;
				Список.ЗагрузитьЗначения(ПараметрЗапроса.Значение);
				НовПараметр.ЗначениеПараметра = Список;
			ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("МоментВремени") Тогда	
				
				НовПараметр.МоментВремениДата = ПараметрЗапроса.Значение.Дата;
				НовПараметр.МоментВремениСсылка = ПараметрЗапроса.Значение.Ссылка;	
				
				НовПараметр.ЗначениеПараметра = "Момент времени: " + СокрЛП(НовПараметр.МоментВремениСсылка) + ", дата: " + СокрЛП(НовПараметр.МоментВремениДата);
				
			ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Граница") Тогда	
				
				НовПараметр.ГраницаЗначение = ПараметрЗапроса.Значение.Значение;
				НовПараметр.ГраницаВид = ПараметрЗапроса.Значение.ВидГраницы;	
				
				НовПараметр.ЗначениеПараметра = "Граница: "+ СокрЛП(НовПараметр.ГраницаЗначение) + ",  " + СокрЛП(НовПараметр.ГраницаВид);
				
			ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("ТаблицаЗначений") Тогда	
				
				НовПараметр.ЗначениеПараметра = "ТаблицаЗначений : " + СокрЛП(ПараметрЗапроса.Значение.Количество()) + " стр.";
				ОписаниеТЗ = Новый СписокЗначений;
				Для Каждого Колонка Из ПараметрЗапроса.Значение.Колонки Цикл
					СтруктураТЗ = Новый Структура;
					СтруктураТЗ.Вставить("ИмяКолонки",Колонка.Имя);
					СтруктураТЗ.Вставить("ТипЗначения",Колонка.ТипЗначения);
					ОписаниеТЗ.Добавить(СтруктураТЗ);
				КонецЦикла;
				НовПараметр.ОписаниеТаблицыЗначений = ОписаниеТЗ;
				СписокДляТЗ = Новый СписокЗначений;
				Для Каждого СтрокаТЗ Из ПараметрЗапроса.Значение Цикл
					СтруктураСтроки = Новый Структура;
					Для Каждого Колонка Из ПараметрЗапроса.Значение.Колонки Цикл
						СтруктураСтроки.Вставить(Колонка.Имя,СтрокаТЗ[Колонка.Имя]);
					КонецЦикла;
					СписокДляТЗ.Добавить(СтруктураСтроки);
				КонецЦикла;
				НовПараметр.ТаблицаЗначений = СписокДляТЗ;	
				
			Иначе
				НовПараметр.ЗначениеПараметра = ПараметрЗапроса.Значение;	
			КонецЕсли;//
			Модифицированность = Истина;	
		КонецЦикла;
		Для Каждого Вт Из СтруктураДампа.МенеджерВТ Цикл
			Найдено = Ложь;
			Для Каждого ВТФормы Из ВременныеТаблицы Цикл
				
				Если Врег(ВТФормы.Таблица)=Врег(ВТ.Ключ) Тогда
					ВТФормы.ВремяВыполнения = "???";
					ВТФормы.КоличествоСтрок = ВТ.Значение.Количество();
					ВТФормы.Адрес =  ПоместитьВоВременноеХранилище(ВТ.Значение,УникальныйИдентификатор);
					Найдено = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не Найдено Тогда
				НовоеОписаниеВТ = ВременныеТаблицы.Добавить();
				НовоеОписаниеВТ.Таблица = ВТ.Ключ;
				НовоеОписаниеВТ.ВремяВыполнения = "???";
				НовоеОписаниеВТ.КоличествоСтрок = ВТ.Значение.Количество();
				НовоеОписаниеВТ.Адрес = ПоместитьВоВременноеХранилище(ВТ.Значение,УникальныйИдентификатор);
				//ИмяТаблицы = Вт.Ключ;
				//ТЗ = ВТ.Значение;
				//МассивРеквизитов = Новый Массив;
				//МассивТипаВыбора = Новый Массив;
				//МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
				//ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				//МассивРеквизитов.Добавить(Новый РеквизитФормы("ВТ_"+Врег(ИмяТаблицы), ОписаниеТипаВыбора, "","ВТ_"+Врег(ИмяТаблицы)));
				//
				//Для Каждого Колонка Из ТЗ.Колонки Цикл
				//	МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ВТ_"+Врег(ИмяТаблицы)));
				//КонецЦикла;
				//
				//ИзменитьРеквизиты(МассивРеквизитов);
				//
				//ЗначениеВРеквизитФормы(ТЗ,"ВТ_"+ИмяТаблицы);
			КонецЕсли;
			
	
		КонецЦикла;
		Если НЕ Элементы.ДеревоЗапросов.Видимость Тогда
			Элементы.ДеревоЗапросов.Видимость = Истина
		КонецЕсли;
		Элементы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрокаДерева.ПолучитьИдентификатор();
	
	КонецЦикла;
	
	
КонецПроцедуры // ЗагрузитьДампНаСервере()

&НаКлиенте
Процедура ПриЗакрытии()
	//ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере()
	//ВременныйФайлОбработки = КаталогВременныхФайлов()+"zapr.epf";
	//Найденные = НайтиФайлы(ВременныйФайлОбработки);
	//УдалитьФайлы(Найденные);
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаВМодуле(Команда)
	
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ФормаОтладкиВМодулеУпр",Новый Структура("ПутьОбработки",СтрокаОтладки));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСимволыМодуля(Команда)
	ИзБраузераВТекст();
	ТекстЗапроса.УстановитьТекст(обПропылесоситьТекстЗапроса(ТекстЗапроса.ПолучитьТекст()));
	ИзТекстаВБраузер();
КонецПроцедуры

&НаКлиенте
Процедура Закомментировать(Команда)
	ОкноБраузера().Comment(); 
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СнятьКомментарий(Команда)
	ОкноБраузера().Uncomment();  
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗапросИзСхемыКомпоновки(Команда)
	ОткрытыеОкна = получитьокна();
	Список = Новый СписокЗначений;
	ОсновнойЭлемент = Неопределено;
	Для каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		Если ОткрытоеОкно.Основное Тогда
			Продолжить;
		КонецЕсли;
		Список.Добавить(ОткрытоеОкно,ОткрытоеОкно.Заголовок);
		Если Найти(ОткрытоеОкно.Заголовок,"онсоль системы")>0 Тогда
			ОсновнойЭлемент = Список.НайтиПоЗначению(ОткрытоеОкно);
		КонецЕсли;
	КонецЦикла;
	Если СисИнфо = Неопределено Тогда
		СисИнфо = Новый СистемнаяИнформация;
	КонецЕсли;
	Если Лев(СисИнфо.ВерсияПриложения,3) = "8.2" Тогда
		Результат = Список.ВыбратьЭлемент("Выберите окно консоли компоновки данных:",ОсновнойЭлемент);
		КонецВыбораОкна(Результат,Неопределено);
	Иначе  	
		Выполнить("
	|ОписаниеОповещения = Новый ОписаниеОповещения(""КонецВыбораОкна"",ЭтаФорма);	
	|Если ОсновнойЭлемент<>Неопределено Тогда
	|		Список.ПоказатьВыборЭлемента(ОписаниеОповещения,""Выберите окно консоли компоновки данных:"",ОсновнойЭлемент);
	|	Иначе
	|		Список.ПоказатьВыборЭлемента(ОписаниеОповещения,""Выберите окно консоли компоновки данных:"");
	|	КонецЕсли;
	|");	
	КонецЕсли;
КонецПроцедуры

//
&НаКлиенте
Процедура КонецВыбораОкна(Результат,Дополнительные) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтекстУФ = Результат.Значение.ПолучитьСодержимое();
	Если КонтекстУФ.Элементы.Найти("ПанельРезультатов") = Неопределено Тогда
		ПоказатьОповещениеПользователя("Окно системы компоновки",,"Выбранное окно, похоже, не является окном консоли СКД...");
		Возврат;
	КонецЕсли;
	
	ТекстСКД = КонтекстУФ.ТекстМакетаКомпоновкиДанных;
	ТекСтрокаДерева = КонтекстУФ.Элементы.ДеревоОтчетов.ТекущиеДанные;
	Если ТекСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Схема = НайтиЭлементДереваОтчет(КонтекстУФ.Элементы.ДеревоОтчетов.ТекущиеДанные).Данные;
	Если Схема = "" Тогда
		Возврат;
	КонецЕсли;
	КомпоновщикНастроек = КонтекстУФ.Отчет.КомпоновщикНастроек;
	ПрочитатьМакетСКД(Схема,КомпоновщикНастроек,ТекСтрокаДерева.ТипСтроки);
		//Схема = ПоместитьВоВременноеХранилище(

КонецПроцедуры // КонецВыбораОкна()

&НаКлиенте
Функция НайтиЭлементДереваОтчет(Знач ЭлементДерева)
	
	Пока ЭлементДерева <> Неопределено Цикл
		
		Если ЭлементДерева.ТипСтроки = 0 Тогда
			
			Возврат ЭлементДерева;
			
		Иначе
			
			ЭлементДерева = ЭлементДерева.ПолучитьРодителя();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


&НаСервере
Процедура ПрочитатьМакетСКД(Схема,КомпоновщикНастроек,ТипСтроки)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Схема);
	СхемаКД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Если ТипСтроки = 1 Тогда
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКД, КомпоновщикНастроек.Настройки);
	Иначе
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКД, КомпоновщикНастроек.ПолучитьНастройки());
	КонецЕсли;
	Для Каждого НаборДанных Из МакетКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
			НоваяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Запрос = "Отладка запроса СКД";
			НоваяСтрока.ТекстЗапроса = НаборДанных.Запрос;
			Для Каждого ПараметрЗапроса Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
				НовПараметр = НоваяСтрока.ПараметрыЗапроса.Добавить();
				НовПараметр.ИмяПараметра = ПараметрЗапроса.Имя;
				НовПараметр.ЭтоВыражение = Ложь;
				
				Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Массив") Тогда
					//массив преобразуем в список, чтобы можно было смотреть/править интерактивно
					Список = Новый СписокЗначений;
					Список.ЗагрузитьЗначения(ПараметрЗапроса.Значение);
					НовПараметр.ЗначениеПараметра = Список;
				Иначе
					НовПараметр.ЗначениеПараметра = ПараметрЗапроса.Значение;	
				КонецЕсли;//
			КонецЦикла;
			Элементы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПрочитатьМакетСКД()

&НаКлиенте
Процедура РезультатТаблицаПриАктивизацииЯчейки(Элемент)
	РезультатТипЗначения = Строка(Элементы.РезультатТаблица.ТекущиеДанные);
	Если Элементы.РезультатТаблица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	Если ИмяЭлемента = "РезультатТаблицаСлужебныйРек" Тогда
		Возврат;
	КонецЕсли;
	ИмяЭлемента = Сред(ИмяЭлемента,СтрДлина("РезультатТаблица")+1,СтрДлина(ИмяЭлемента));
	РезультатТипЗначения = Строка(ТипЗнч(Элемент.ТекущиеДанные[ИмяЭлемента]));
КонецПроцедуры

&НаКлиенте
Процедура РезультатДеревоПриАктивизацииЯчейки(Элемент)
	Если Элементы.РезультатДерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	Если ИмяЭлемента = "РезультатДеревоСлужебныйРек" Тогда
		Возврат;
	КонецЕсли;
	ИмяЭлемента = Сред(ИмяЭлемента,СтрДлина("РезультатДерево")+1,СтрДлина(ИмяЭлемента));
	РезультатТипЗначения = ТипЗнч(Элемент.ТекущиеДанные[ИмяЭлемента]);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюИзменений(Команда)
	
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ИсторияВерсий");
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеПлановЗапроса(Команда)
	ОткрытьФормуСовместимость82(мПутьКОбработке+".НастройкаТехнологическогоЖурнала");
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиПланаНажатие(Элемент)
	ПолучениеПлановЗапроса(Неопределено);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяСУБД()
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	Позиция = Найти(СтрокаПодключения, "Ref=""");
	Если Позиция > 0 Тогда 
		СтрокаПодключения = Сред(СтрокаПодключения, Позиция + 5);
		Позиция = Найти(СтрокаПодключения, """");
		Если Позиция > 0 Тогда 
			Возврат Лев(СтрокаПодключения, Позиция - 1);
		Иначе
			Возврат СтрокаПодключения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Преобразовывает объекты запроса к объектам в виде метаданных ИБ
//
&НаСервереБезКонтекста
Функция ПреобразоватьВМетаданные(Знач ТекстЗапроса, Знач ПланВыполненияЗапроса, Знач ТипСУБД, Знач АдресХранилища)
	
	ТекстЗапросаВМетаданных = ТекстЗапроса;
	ПланЗапросаВМетаданных = ПланВыполненияЗапроса;
	
	ТипСтрока = новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150));
	ТипСтрокаЗначение = новый ОписаниеТипов("Строка", , );
	ТипЧисло = новый ОписаниеТипов("Число");
	Если АдресХранилища = "" Тогда
		ВВидеМетаданных = новый Структура();
		ВВидеМетаданных.Вставить("ТекстЗапросаВВидеМетаданных", "");
		ВВидеМетаданных.Вставить("ПланВыполненияЗапросаВМетаданных", "");	
		Возврат ВВидеМетаданных;
	КонецЕсли;
	СтруктураБД = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если СтруктураБД = Неопределено Тогда
		ВВидеМетаданных = новый Структура();
		ВВидеМетаданных.Вставить("ТекстЗапросаВВидеМетаданных", "");
		ВВидеМетаданных.Вставить("ПланВыполненияЗапросаВМетаданных", "");	
		Возврат ВВидеМетаданных;
	КонецЕсли;
	СтруктураБД.Сортировать("ИмяТаблицыХранения УБЫВ");
	
	СоответствиеБДИндекс = Новый Соответствие;
	
	СоответствиеБДПоля = Новый Соответствие;

	СоответствиеБД = Новый Соответствие;
	
	Для каждого Строка Из СтруктураБД Цикл
		СоответствиеБД.Вставить(Строка.ИмяТаблицыХранения,Строка.ИмяТаблицы);
	КонецЦикла;
	
	Для каждого Строка Из СтруктураБД Цикл 
		Для каждого Индекс Из Строка.Индексы цикл 
			
			Ключ = Индекс.ИмяИндексаХранения;
			СписокПоле = "";
			Разделитель = "";
			Для каждого Поле Из Индекс.Поля Цикл 
				Если ЗначениеЗаполнено(Поле.ИмяПоля) Тогда 
					СписокПоле = СписокПоле + Разделитель + Поле.ИмяПоля; // + "(" + Поле.Метаданные + ")";
					//Если ЗначениеЗаполнено(Поле.Метаданные) Тогда 
				КонецЕсли;
				Разделитель = ", ";
			КонецЦикла;
			СоответствиеБДИндекс.Вставить(Ключ,СписокПоле);
		КонецЦикла;
		
		Для каждого Поле Из Строка.Поля цикл 
			Если ЗначениеЗаполнено(Поле.ИмяПоля) Тогда 
				СоответствиеБДПоля.Вставить(Поле.ИмяПоляХранения,Поле.ИмяПоля);
			Иначе
				Позиция = Найти(Поле.ИмяПоляХранения, "_IDRRef");
				Если Позиция > 1 Тогда 
					ИмяОбъекта = Лев(Поле.ИмяПоляХранения, Позиция-1);
					ИмяТаблицы =  СоответствиеБД.Получить(ИмяОбъекта);
					СоответствиеБДПоля.Вставить(Поле.ИмяПоляХранения,"Ссылка(" + ИмяТаблицы + ")");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если ТипСУБД = "DBPOSTGRS" Тогда 
		ПланЗапросаВМетаданных = НРег(ПланЗапросаВМетаданных);
	ИначеЕсли ТипСУБД = "DBMSSQL" Тогда 
		// Очистка запроса
		ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "[" + ИмяСУБД() + "].[dbo].", "");
		ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "[tempdb].[dbo].", "");
		ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "#tt", "ВременнаяТаблица");
		ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, "dbo.", "");
		ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, "#tt", "ВременнаяТаблица");
		
	КонецЕсли;
	
	Для каждого Поле из СоответствиеБДИндекс Цикл 
		Если Найти(ПланЗапросаВМетаданных, Поле.Ключ) Тогда 
			Если ТипСУБД = "DBPOSTGRS" Тогда 
				Ключ = НРег(Поле.Ключ);
			Иначе
				Ключ = Поле.Ключ;
			КонецЕсли;
			ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, Ключ, НСтр("ru = 'Индекс по'") + " " + Поле.Значение + "");
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Поле из СоответствиеБДПоля Цикл 
		Если Найти(ТекстЗапросаВМетаданных, Поле.Ключ) Тогда 
			ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, Поле.Ключ, Поле.Значение);
			Если ТипСУБД = "DBPOSTGRS" Тогда 
				Ключ = НРег(Поле.Ключ);
			Иначе
				Ключ = Поле.Ключ;
			КонецЕсли;
			ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, Ключ, Поле.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Поле из СоответствиеБД Цикл 
		Если Найти(ТекстЗапросаВМетаданных, Поле.Ключ) Тогда 
			ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, Поле.Ключ, Поле.Значение);
			Если ТипСУБД = "DBPOSTGRS" Тогда 
				ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, НРег(Поле.Ключ), Поле.Значение);	
			ИначеЕсли ТипСУБД = "DBMSSQL" Тогда 
				ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "[" + Поле.Ключ + "]", Поле.Значение);	
			Иначе
				ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, Поле.Ключ, Поле.Значение);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВВидеМетаданных = новый Структура();
	ВВидеМетаданных.Вставить("ТекстЗапросаВВидеМетаданных", ТекстЗапросаВМетаданных);
	ВВидеМетаданных.Вставить("ПланВыполненияЗапросаВМетаданных", ПланЗапросаВМетаданных);	
	
	Возврат ВВидеМетаданных;
	
 	
КонецФункции

&НаКлиенте
Процедура ПолучитьТекстДляМодуля(Команда)
	ИзБраузераВТекст();
	
	ТекстМодуля = ТекстЗапроса.ПолучитьТекст();
	
	//одинарные кавычки надо заменить на двойные
	Строка2Кавычки = Символ(34) + Символ(34);
	Строка1Кавычка = Символ(34);
    ТекстМодуля	=	СтрЗаменить(ТекстМодуля,Строка1Кавычка,Строка2Кавычки);
	
	//открывающие и закрывающие 
	ТекстМодуля = Символ(34) + ТекстМодуля + Символ(34) + ";";
	
	
	ТекстДок = Новый ТекстовыйДокумент; 
	ТекстДок.УстановитьТекст(ТекстМодуля);
	
	Для сч = 2 по ТекстДок.КоличествоСтрок() Цикл
		Строка = ТекстДок.ПолучитьСтроку(сч);
		ТекстДок.ЗаменитьСтроку(сч,"|"+Строка);
	КонецЦикла;  
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Вариант1",Символы.ВК+ТекстДок.ПолучитьТекст());
	
	ТекстМодуля = 
	"Запрос = Новый Запрос;
	|Запрос.Текст = 
	|" 
	+ ТекстДок.ПолучитьТекст(); 
	
	Для каждого СтрокаПараметров Из ПараметрыЗапроса Цикл
		ТекстМодуля = ТекстМодуля + Символы.ПС + "Запрос.УстановитьПараметр(" + Строка1Кавычка + СокрЛП(СтрокаПараметров.ИмяПараметра) + Строка1Кавычка + ", );"
	КонецЦикла; 
	
	ТекстМодуля = ТекстМодуля + Символы.ПС + "Результат = Запрос.Выполнить();";
	СтруктураПараметров.Вставить("Вариант2",Символы.ВК + ТекстМодуля);
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ВариантыЗапросаДляБуфераУпр",СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура СпособыВыводаПланаПриИзменении(Элемент)
	Если СтруктураУид = Неопределено Тогда
		возврат;
	КонецЕсли;
	Если не СтруктураУид.Свойство("ОсновнойЗапрос") Тогда
		возврат;
	КонецЕсли;
	Если СпособыВыводаПлана = 0 Тогда
		ТекстЗапросаСУБД = СтруктураУид.ОсновнойЗапрос.ЗапросМета;
		ПланЗапроса = СтруктураУид.ОсновнойЗапрос.ПланМета;
	Иначе
		ТекстЗапросаСУБД = СтруктураУид.ОсновнойЗапрос.Запрос;
		ПланЗапроса = СтруктураУид.ОсновнойЗапрос.План;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяУниверсальнаяДатаВМиллисекундахСовм()
	ТекДата = 0;
	Попытка
		Выполнить("ТекДата = ТекущаяУниверсальнаяДатаВМиллисекундах()");
	Исключение
		Дата1с = ТекущаяДата();
		ТекДата = ((Дата1с-'19700101')*24*60*60+Час(Дата1с)*60*60+Час(Дата1с)*60+Секунда(Дата1с))*1000;
	КонецПопытки;
	Возврат ТекДата;
КонецФункции // ТекущаяУниверсальнаяДатаВМиллисекундах()()

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Перем ОписаниеОповещения;
	
	ИзБраузераВТекст();
	Модифицированность = ТекстЗапроса.ПолучитьТекст()<>ДеревоЗапросов.НайтиПоИдентификатору(мИдентификаторТекСтроки).ТекстЗапроса;
	
	Если ЗакрытьПринудительно = Истина Тогда
		Возврат;
	КонецЕсли;
	ТекстВопроса = "Сохранить изменения в редактируемых запросах?";	
	Если Это82() и Модифицированность Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		
		ЗакрытиеФормыПродолжение(Ответ,Неопределено);
	ИначеЕсли Модифицированность Тогда
		#Если НЕ ВебКлиент Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Выполнить("ОписаниеОповещения = Новый ОписаниеОповещения(""ЗакрытиеФормыПродолжение"",ЭтаФорма);
		|ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена)");
		#КонецЕсли
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыПродолжение(Ответ,ДополнительныеПараметры) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		вСохранитьЗапросыВФайл(Ложь,ИмяФайлаЗапроса="");
		ЗакрытьПринудительно = Истина;
		Закрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ЗакрытьПринудительно = Истина;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВерсиюЗапроса(Время) Экспорт
	НайденныеСтроки = ВерсииЗапроса.НайтиСтроки(Новый Структура("ДатаВерсии",Время));
	Для Каждого СтрокаКУдалению Из НайденныеСтроки Цикл
		ВерсииЗапроса.Удалить(ВерсииЗапроса.Индекс(СтрокаКУдалению));
	КонецЦикла;
	Модифицированность = Истина;
КонецПроцедуры // УдалитьВерсиюЗапроса()

&НаКлиенте
Процедура ТекстЗапросаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
//Ищем по дереву значений перебором
Функция НайтиСтрокуДерева(НаборЭлементов,ТекстПоиска)   
	СтрокиДерева = НаборЭлементов.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если ВРег(Лев(СтрокаДерева.Запрос,СтрДлина(ТекстПоиска)))=ТекстПоиска  Тогда
			Элементы.ДеревоЗапросов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();					
			Возврат Истина;
		КонецЕсли;	
		Если НайтиСтрокуДерева(СтрокаДерева,ТекстПоиска) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ПоискЗапросаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если НЕ ПустаяСтрока(Текст) Тогда
		НайтиСтрокуДерева(ДеревоЗапросов,ВРег(Текст));
	КонецЕсли;
	ПоискЗапроса = "";
КонецПроцедуры

&НаКлиенте
Процедура СпособВыгрузкиПриИзменении(Элемент)
	СпособВыгрузкиПриИзмененииНаСервере();
	УправлениеДиалогом();
КонецПроцедуры

&НаСервере
Процедура СпособВыгрузкиПриИзмененииНаСервере()
	Если ЗначениеЗаполнено(АдресРезультатаЗапроса) Тогда
		РезультатЗапроса = ПолучитьИзВременногоХранилища(АдресРезультатаЗапроса);
		ВывестиРезультат(РезультатЗапроса);
	КонецЕсли;	
КонецПроцедуры

мПараметрыОтображения = Новый Структура();
мПараметрыОтображения.Вставить("ПанельСписокЗапросовСвернутаВлево",	Ложь);
мПараметрыОтображения.Вставить("ПанельИмяОписаниеСвернута",			Истина);

мФайлЗапросовСохранитьБы = Ложь;

мТекущаяСтрока = Новый Структура;

мПутьКОбработке = Лев(ИмяФормы,СтрДлина(ИмяФормы)-9);

мСчетчикВыполнений = 0;
СисИнфо = Новый СистемнаяИнформация;
мАктуальнаяПлатформа	 = Лев(СисИнфо.ВерсияПриложения,10)>="8.3.5.1385";
мВерстияБраузераИЕ		 = ?(мАктуальнаяПлатформа,10,8);

Версия = "2.1.4";
ВерсияHTML = "0_3";
