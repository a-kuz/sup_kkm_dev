Перем ПараметрыОкна Экспорт;	// Структура, определяет положение и размеры окна.
Перем ВыбГруппа, ВыбПодгруппа, ВыбНастройкиГруппы, ВыбНастройкиПодгруппы;
Перем ЦветаСтрок;
Перем ДопПараметрыИнфо;

Процедура ВыводПредупреждения(Заголовок, Текст)

	ИнтерфейсРМ.ВопросПредупреждение("Ошибка",Заголовок,Текст,"","ОК","");
	
КонецПроцедуры

// Вызывается по кнопке ВЫБОР или при выборе строки списка
//
Процедура ВыборОчередности()
	
	Если ВыдатьПейджер Тогда
		Если НЕ ЗначениеЗаполнено(Пейджер) Тогда
			ВыводПредупреждения("Контроль выдачи пейджера!", "Пейджер не указан...");
			Возврат;
		ИначеЕсли НЕ ксТрактир.ПейджерСвободен(Пейджер) Тогда
			ВыводПредупреждения("Контроль выдачи пейджера!", "Указанный пейджер уже успели выдать...");
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ВыборСделан = Истина;
	Закрыть();
	
КонецПроцедуры

Процедура ИзменитьКурсПоСтроке(СтрокаТовар, Шаг)

	Если СтрокаТовар = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НовыйКурс = СтрокаТовар.Курс + Шаг;
	
	СтрокаТовар.Курс = НовыйКурс;
	
	//// Колонка "Сортировка" - нужна, чтобы строка всегда меняла свое положение при изменении курса.
	//// Иначе бы выглядено странно: нажимается "+" или "-", а строка может остаться на месте.
	//НовыйИндексСтроки = Товары.Индекс(СтрокаТовар) + Шаг;
	//Если (0 <= НовыйИндексСтроки) И (НовыйИндексСтроки <= Товары.Количество()-1) Тогда
	//	Товары.Сдвинуть(СтрокаТовар, Шаг);
	//КонецЕсли; 
	//
	//Для каждого Стр Из Товары Цикл
	//	Стр.Сортировка = Товары.Индекс(Стр);
	//КонецЦикла;	
	
	// Пересчет курсов по порядку, чтобы не было пропусков
	Товары.Сортировать("Курс,Время,НомерПП");
	//Товары.Сортировать("Курс,Сортировка");
	
	ТекКурс = НачальныйКурс - 1;
	ПоследнийИзмененныйКурс = -1;
	
	Для каждого Стр Из Товары Цикл
		Если Стр.Курс = ПоследнийИзмененныйКурс Тогда
			Стр.Курс = ТекКурс;
		
		Иначе
			ТекКурс = ТекКурс + 1;
			ПоследнийИзмененныйКурс = Стр.Курс;
			Стр.Курс = ТекКурс;
		КонецЕсли; 
	КонецЦикла; 
	
	// Сортировка по курсу
	Товары.Сортировать("Курс,Время,НомерПП");
	//Товары.Сортировать("Курс,Сортировка");
	
	//ЭлементыФормы.Товары.ОбновитьСтроки();
	
	// Отобразить изменения на ИнфоДисплее
	ВыводЗаказаНаИнфоДисплей();
	
КонецПроцедуры

Процедура УстановитьНачальнуюОчередность()

	Для каждого Стр Из Товары Цикл
		Стр.Курс = НачальныйКурс;
	КонецЦикла;		

КонецПроцедуры

Процедура ВыбратьПейджер()

	ФормаВыбора = ИнтерфейсРМ.ПолучитьОбъектОбработки("ВыборПейджера").ПолучитьФорму("Список");
	
	ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ФормаВыбора.ВыборСделан Тогда
		Возврат;
	КонецЕсли; 
	
	Пейджер = ФормаВыбора.Пейджер;
	
	//ЭлементыФормы.КнопкаПейджер.Заголовок = ?(ЗначениеЗаполнено(Пейджер), СокрЛП(Пейджер.Наименование), "ВЫБРАТЬ");
	
КонецПроцедуры

Процедура ВыводЗаказаНаИнфоДисплей(СброситьНастройки = Ложь)

	Если НЕ глПараметрыРМ.ИнфоДисплейЕсть Тогда
		Возврат;
	КонецЕсли; 

	// Отсортируем таблицу ТаблицаЗаказаКурс так, чтобы
	// 1) старые строки заказа были сверху и в том порядке, как они выведены в заказе.
	// 2) новые строки (которымм назначается очередность) были снизу и в том порядке, 
	//    как они выведены в ЭлементыФормы.Товары
	
	Для каждого Строка Из Товары Цикл
		СтрокаЗаказа = ТаблицаЗаказаКурс.Строки.Найти(Строка.НомерПП, "НомерПП");
		
		Если СтрокаЗаказа <> Неопределено Тогда
			СтрокаЗаказа.Сортировка2 = Товары.Индекс(Строка);
			СтрокаЗаказа.Очередность = Строка.Курс;
		КонецЕсли; 
	КонецЦикла; 
	
	ТаблицаЗаказаКурс.Строки.Сортировать("Сортировка1, Сортировка2");
	
	// Номер текущей строки
	
	СтрокаТовары = ЭлементыФормы.Товары.ТекущаяСтрока;
	
	Если СтрокаТовары <> Неопределено Тогда
		СтрокаЗаказа = ТаблицаЗаказаКурс.Строки.Найти(СтрокаТовары.НомерПП, "НомерПП");
		
		НомерСтрокиЗаказа = ?(СтрокаЗаказа <> Неопределено, ТаблицаЗаказаКурс.Строки.Индекс(СтрокаЗаказа)+1, ТаблицаЗаказаКурс.Строки.Количество());
	Иначе
		НомерСтрокиЗаказа = ТаблицаЗаказаКурс.Строки.Количество();
	КонецЕсли; 
	
	ДопПараметрыИнфо.НомерСтрокиЗаказа = НомерСтрокиЗаказа;
	ДопПараметрыИнфо.СуммаПоСтанцииНач = СуммаПоСтанцииНач;
	ДопПараметрыИнфо.СброситьНастройки = СброситьНастройки;
	
	ИнтерфейсРМ.ВыводНаИнфоДисплей("ПоказатьЗаказ", Заказ, ТаблицаЗаказаКурс, Неопределено, ДопПараметрыИнфо);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭтаФорма.Заголовок = "Выбор очередности";
	ЭлементыФормы.тОчередность.Заголовок = "Текущая очередность = "+НачальныйКурс;
	
	Если ТаблицаТовары.Количество() > 0 Тогда
		ЭлементыФормы.Товары.ТекущаяСтрока = ТаблицаТовары[0];
	КонецЕсли; 
	
	ЭлементыФормы.КнопкаПейджер.Видимость = ВыдатьПейджер;
	
	Если ВладелецФормы <> Неопределено Тогда
		// Владелец - это Обработка.Заказ.Форма0
		// ОпределитьПараметрыОкнаОчередности - определена в модуле объекта.
		
		// Это ширина и высота формы по умолчанию.
		// Ширина нормальная, а вот высоту нужно подогнать под высоту окна заказа.
		МинШирина = 824;//700;
		МинВысота = 570;
		
		ВладелецФормы.ОпределитьПараметрыОкнаОчередности(ПараметрыОкна, МинШирина, МинВысота);
	КонецЕсли; 
	Если ЗначениеЗаполнено(Пейджер) Тогда
		ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
		Если ЗначениеЗаполнено(глРабочееМесто.Станция.НаборПейджеров) Тогда
			СправочникСписок.Отбор.НаборПейджеров.Установить(глРабочееМесто.Станция.НаборПейджеров);
		Иначе	
			СправочникСписок.Отбор.Станция.Установить(глРабочееМесто.Станция);
		КонецЕсли; 
		
		СправочникСписок.Отбор.ПометкаУдаления.Установить(Ложь);
		СправочникСписок.Отбор.НеИспользуется.Установить(Ложь);
		СправочникСписок.Отбор.ЭтоГруппа.Установить(Ложь);
		ОтборСсылка = СправочникСписок.Отбор.Ссылка;
		
		ОтборСсылка.ВидСравнения = ВидСравнения.Равно;
		ОтборСсылка.Значение = Пейджер;
		ОтборСсылка.Использование = Истина;
		//ЭлементыФОрмы.СправочникСписок.Доступность=Ложь;
	Иначе
		ЗаполнитьТаблицуПейджеров();
	КонецЕсли;
	// Отобразить изменения на ИнфоДисплее
	ВыводЗаказаНаИнфоДисплей(Истина);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ИнтерфейсРМ.ПриОткрытииОкна(ЭтаФорма);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ИнтерфейсРМ.ПриЗакрытииОкна();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	глОтсечкаПростоя();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура КнопкаОКНажатие(Элемент)
	
	ВыборОчередности();
	
КонецПроцедуры

Процедура КнопкаВверхСпискаНажатие(Элемент)
	
	ЭлементыФормы.Товары.ТекущаяКолонка = ЭлементыФормы.Товары.Колонки.Наименование;
	ТекущийЭлемент = ЭлементыФормы.Товары;
	WshShell.SendKeys("{PGUP}"); 
	
КонецПроцедуры

Процедура КнопкаВнизСпискаНажатие(Элемент)
	
	ЭлементыФормы.Товары.ТекущаяКолонка = ЭлементыФормы.Товары.Колонки.Наименование;
	ТекущийЭлемент = ЭлементыФормы.Товары;
	WshShell.SendKeys("{PGDN}");
	
КонецПроцедуры

Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Инд = (ДанныеСтроки.Курс - НачальныйКурс) % 10; // от 0 до 9
	
	ОформлениеСтроки.Ячейки.Курс.ЦветФона = ЦветаСтрок[Инд];
	
	//Если ДанныеСтроки = ЭлементыФормы.Товары.ТекущаяСтрока Тогда
	//	ОформлениеСтроки.ЦветТекста = Новый Цвет(0,0,255);
	//Иначе
	//	ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветТекста3;
	//КонецЕсли; 
	
КонецПроцедуры

Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	Колонка = ЭлементыФормы.Товары.ТекущаяКолонка;
	
	Если Колонка = Неопределено Тогда
		Возврат;
	ИначеЕсли Колонка.Имя = "Плюс" Тогда
		Шаг = 1;
	ИначеЕсли Колонка.Имя = "Минус" Тогда
		Шаг = -1;
	Иначе
		Возврат;
	КонецЕсли; 
	
	Строка = ЭлементыФормы.Товары.ТекущаяСтрока;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИзменитьКурсПоСтроке(Строка, Шаг);
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура КнопкаСтрелкаВнизНажатие(Элемент)

	ИзменитьКурсПоСтроке(ЭлементыФормы.Товары.ТекущаяСтрока, 1);
	
КонецПроцедуры

Процедура КнопкаСтрелкаВверхНажатие(Элемент)
	
	ИзменитьКурсПоСтроке(ЭлементыФормы.Товары.ТекущаяСтрока, -1);
	
КонецПроцедуры

Процедура КнопкаДляВсехНажатие(Элемент)
	
	УстановитьНачальнуюОчередность();
	
КонецПроцедуры

Процедура КнопкаПейджерНажатие(Элемент)
	
	ВыбратьПейджер();
	
КонецПроцедуры

Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	
	Колонка = ЭлементыФормы.Товары.ТекущаяКолонка;
	
	Если Колонка = Неопределено Тогда
		Возврат;
	ИначеЕсли (Колонка.Имя = "Плюс") ИЛИ (Колонка.Имя = "Минус") Тогда
		Возврат;
	КонецЕсли; 
	
	Строка = ЭлементыФормы.Товары.ТекущаяСтрока;
	
	Если Строка = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ВыводЗаказаНаИнфоДисплей(); // для выделения текущей строки на инфо-дисплее
	
КонецПроцедуры

Процедура СправочникСписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	ВыборПейджера();
КонецПроцедуры

Процедура ВыборПейджера()
	ВыбПейджер = ЭлементыФормы.СправочникСписок.ТекущаяСтрока;
	
	Если НЕ ЗначениеЗаполнено(ВыбПейджер) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ВыбПейджер.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Пейджер     = ВыбПейджер;

КонецПроцедуры	

Процедура ЗаполнитьТаблицуПейджеров()
	
	ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Ложь;
	
	Если ЗначениеЗаполнено(глРабочееМесто.Станция.НаборПейджеров) Тогда
		СправочникСписок.Отбор.НаборПейджеров.Установить(глРабочееМесто.Станция.НаборПейджеров);
	Иначе	
		СправочникСписок.Отбор.Станция.Установить(глРабочееМесто.Станция);
	КонецЕсли; 
	
	СправочникСписок.Отбор.ПометкаУдаления.Установить(Ложь);
	СправочникСписок.Отбор.НеИспользуется.Установить(Ложь);
	СправочникСписок.Отбор.ЭтоГруппа.Установить(Ложь);
	
	// Исключим выданные пейджеры
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ВыданныеПейджеры.Пейджер
	|ИЗ
	|	РегистрСведений.ВыданныеПейджеры КАК ВыданныеПейджеры");
	
	МассивВыданных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пейджер");
	
	ОтборСсылка = СправочникСписок.Отбор.Ссылка;
	
	Если МассивВыданных.Количество() > 0 Тогда
		СписокВыданных = Новый СписокЗначений;
		СписокВыданных.ЗагрузитьЗначения(МассивВыданных);
		
		ОтборСсылка.ВидСравнения = ВидСравнения.НеВСписке;
		ОтборСсылка.Значение = СписокВыданных;
		ОтборСсылка.Использование = Истина;
	Иначе
		ОтборСсылка.Использование = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
	ВыборПейджера();
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

ПараметрыОкна = Новый Структура("Центр, Лево, Верх, Ширина, Высота", Истина);

ДопПараметрыИнфо = Новый Структура("НомерСтрокиЗаказа, СуммаПоСтанцииНач, СброситьНастройки, РежимВывода");
ДопПараметрыИнфо.РежимВывода = "Очередность";

ЦветаСтрок = Новый Массив;

ЦветаСтрок.Добавить(Новый Цвет(255,255,255));// 0
ЦветаСтрок.Добавить(Новый Цвет(248,255,179));// 1
ЦветаСтрок.Добавить(Новый Цвет(202,255,179));// 2
ЦветаСтрок.Добавить(Новый Цвет(179,255,219));// 3
ЦветаСтрок.Добавить(Новый Цвет(179,245,255));// 4
ЦветаСтрок.Добавить(Новый Цвет(179,215,255));// 5
ЦветаСтрок.Добавить(Новый Цвет(179,179,255));// 6
ЦветаСтрок.Добавить(Новый Цвет(215,179,255));// 7
ЦветаСтрок.Добавить(Новый Цвет(248,179,255));// 8
ЦветаСтрок.Добавить(Новый Цвет(255,179,202));// 9

//ЦветаСтрок.Добавить(Новый Цвет(255,255,255));// 0
//ЦветаСтрок.Добавить(Новый Цвет(255,254,229));// 1
//ЦветаСтрок.Добавить(Новый Цвет(244,255,229));// 2
//ЦветаСтрок.Добавить(Новый Цвет(231,255,229));// 3
//ЦветаСтрок.Добавить(Новый Цвет(229,255,240));// 4
//ЦветаСтрок.Добавить(Новый Цвет(229,255,255));// 5
//ЦветаСтрок.Добавить(Новый Цвет(229,245,255));// 6
//ЦветаСтрок.Добавить(Новый Цвет(229,233,255));// 7
//ЦветаСтрок.Добавить(Новый Цвет(240,229,255));// 8
//ЦветаСтрок.Добавить(Новый Цвет(255,229,255));// 9
 