Перем СохраняемоеЗначение Экспорт; // Структура хранящая значение настроек.
Перем ИмяОбъекта Экспорт;          // Хранит имя соответветствующее объекту.
Перем ВидФормыСохранить Экспорт;   // Переменная определяет вид открываемой формы, Истина - для сохранения настроек,
                                   // ложь - для восстановления
Перем ТипНастройки Экспорт;        // тип настройки сохранения.
Перем ТабличнаяЧасть Экспорт;      // табличная часть для сохранения.

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура передает в обработку параметры сохранения
//
// Параметры:
//  Имя                 - Имя объекта.
//  СохраняемоеЗначение - структура сохранения.
//  Сохранить             - булево, определяет вид формы.
//  ТипНастр              - тип настройки.
//  ТабЧастьДок           - табличная часть документа.
//
Процедура ПередатьПараметрыСохранения(ВлИмя, ВлСохраняемоеЗначение, Сохранить, ТипНастр, ТабЧастьДок ) Экспорт
	
	СохраняемоеЗначение = ВлСохраняемоеЗначение;
	ИмяОбъекта = ВлИмя;
	ВидФормыСохранить = Сохранить;
	ТипНастройки = ТипНастр;
	ТабличнаяЧасть = ТабЧастьДок;
	
КонецПроцедуры

// Процедура сохраняет настройки в справочник "НастройкиПользователей".
//
// Параметры:
//  Имя                   - имя объекта.
//  НаименованиеНастройки - название настройки.
//  Значение              - структура с настройкой.
//  Принадлежность        - владелец настройки.
//
Функция СохранитьНастройки(Имя, НаименованиеНастройки, Значение, Принадлежность) Экспорт
	
	Хранилище = Новый ХранилищеЗначения(Значение);	
	НоваяНастройка = Справочники.НастройкиПользователей.СоздатьЭлемент();
	Новаянастройка.Наименование = НаименованиеНастройки;
	НоваяНастройка.Объект = Имя;
	НоваяНастройка.Значение = Хранилище;
	НоваяНастройка.ВладелецНастройки = Принадлежность;
	НоваяНастройка.ТипНастройки = ТипНастройки;
	НоваяНастройка.Записать();
	Возврат НоваяНастройка.Ссылка;
	
КонецФункции

// Процедура заполняет список настроек при открытии.
//
// Параметры:
//  ГруппаНастроек - выбранное значение группы настроек.
//
Процедура ЗаполнитьСписокНастроек(ГруппаНастроек) Экспорт
	
	СписокНастроек.Очистить();
	Если ГруппаНастроек = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НастройкиПользователей.Наименование,
		|	НастройкиПользователей.ВладелецНастройки,
		|	НастройкиПользователей.Ссылка
		|ИЗ
		|	Справочник.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	((НастройкиПользователей.ВладелецНастройки = &Неопределено
		|			ИЛИ НастройкиПользователей.ВладелецНастройки = &ТекущийПользователь)
		|				И НастройкиПользователей.Объект = &ИмяОбъекта
		|                И НастройкиПользователей.ТИпНастройки = &ТипНастройки)";
		Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
		Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
		Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
		Запрос.УстановитьПараметр("Неопределено", Неопределено);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = СписокНастроек.Добавить();
			НоваяСтрока.НаименованиеНастройки   = Выборка.Наименование;
			НоваяСтрока.ИспользоватьПриОткрытии = Ложь;
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			Если Выборка.ВладелецНастройки = Неопределено Тогда              /////////Почему не NULL???*?
				НоваяСтрока.ОбщаяНастройка = Истина;
			Иначе
				НоваяСтрока.ОбщаяНастройка = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	НастройкиПользователей.Наименование,
		|	НастройкиПользователей.Ссылка
		|ИЗ
		|	Справочник.НастройкиПользователей КАК НастройкиПользователей
		|ГДЕ
		|	НастройкиПользователей.ВладелецНастройки = &ГруппаНастройки
		|	И НастройкиПользователей.Объект = &Имя
		| И НастройкиПользователей.ТИпНастройки = &ТипНастройки";
		Запрос.УстановитьПараметр("Имя", ИмяОбъекта);
		Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
		Запрос.УстановитьПараметр("ГруппаНастройки", ГруппаНастроек);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = СписокНастроек.Добавить();
			НоваяСтрока.НаименованиеНастройки   = Выборка.Наименование;
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			НоваяСтрока.ОбщаяНастройка = Ложь;
			НоваяСтрока.ИспользоватьПриОткрытии = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиОтчетовПриОткрытии.ЗначениеНастройки
	               |ИЗ
	               |	РегистрСведений.НастройкиОтчетовПриОткрытии КАК НастройкиОтчетовПриОткрытии
	               |ГДЕ
	               |	НастройкиОтчетовПриОткрытии.ИмяПользователя = &ТекущийПользователь
	               |	И НастройкиОтчетовПриОткрытии.ИмяОбъекта = &ИмяОбъекта";
	
	Запрос.УстановитьПараметр("ИмяОбъекта", ИмяОбъекта);
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		СтрокаНастройкиИспользуемойПриОткрытии = СписокНастроек.Найти(Выборка.ЗначениеНастройки);
		Если  СтрокаНастройкиИспользуемойПриОткрытии <> Неопределено  ТОгда
			
			СтрокаНастройкиИспользуемойПриОткрытии.ИспользоватьПриОткрытии = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
		
КонецПроцедуры

// Процедура изменяет признак использования при открытии в регистре.
//
// Параметры:
//  Строка - строка табличной части, из которой извлекаются параметры.
//
Процедура ИзменитьПризнакВосстанавливатьПриОткрытии(Строка)   Экспорт
	
	Если Строка.ИспользоватьПриОткрытии  Тогда
		Значение = Строка.Ссылка.Значение.Получить();
		
		СохранитьЗначениеНастройки(ИмяОбъекта, Строка.Ссылка);
	Иначе
		НаборЗаписей = РегистрыСведений.НастройкиОтчетовПриОткрытии.СоздатьНаборЗаписей(); 		
		НаборЗаписей.Отбор.ИмяПользователя.Установить(ПараметрыСеанса.ТекущийПользователь);
		НаборЗаписей.Отбор.ИмяОбъекта.Установить(ИмяОбъекта);
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет реквизиты формы согласно выбранной настройке.
//
// Параметры:
//  Значение - хранилище значения настройки.
//  Форма - форма сохранения настроек.
//
Процедура ВосстановитьНастройку(Значение, Форма) Экспорт
	
	Если ИмяОбъекта = "" Тогда  		
		Форма.ВосстановитьНастройку(Значение, ТабличнаяЧасть); 		
	Иначе                  		
		Форма.ВосстановитьНастройку(Значение);        		
	КонецЕсли;
	
КонецПроцедуры

// Сохраняет значение в конфигурации.
//
// Параметры:
//  Имя      - имя сохраняемого значения,
//  ВариантНастройки -используется если сохраняемое значение м.б.
//  Значение - сохраняемое значение.
//
Процедура СохранитьЗначениеНастройки(Имя, Значение) Экспорт
	
	НаборЗаписей = РегистрыСведений.НастройкиОтчетовПриОткрытии.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.ИмяПользователя.Установить(ПараметрыСеанса.ТекущийПользователь);
	НаборЗаписей.Отбор.ИмяОбъекта.Установить(Имя);
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.ИмяОбъекта = Имя;
	НоваяЗапись.ИмяПользователя = ПараметрыСеанса.ТекущийПользователь;
	Новаязапись.ЗначениеНастройки = Значение; 		
	НаборЗаписей.Записать();
			
КонецПроцедуры

// Сохраняет значение в конфигурации.
// Параметры:
//  Имя      - имя сохраненного значения.
//
// Возвращаемое значение:
//  Восстановленное значение, или Неопределенно, если значение восстановить не удалось.
//
Функция ВосстановитьЗначениеНастройкиПриОткрытии(Имя) Экспорт
	        
	Запрос = Новый Запрос();	
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиОтчетовПриОткрытии.ЗначениеНастройки
	|ИЗ
	|	РегистрСведений.НастройкиОтчетовПриОткрытии КАК НастройкиОтчетовПриОткрытии
	|ГДЕ
	|	НастройкиОтчетовПриОткрытии.ИмяПользователя = &ТекущийПользователь
	|	И НастройкиОтчетовПриОткрытии.ИмяОбъекта = &Имя";
	
	Запрос.УстановитьПараметр("ТекущийПользователь", ПараметрыСеанса.ТекущийПользователь);
	Запрос.УстановитьПараметр("Имя", Имя);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() тогда		
		Возврат Выборка.ЗначениеНастройки.Значение;		 
	Иначе
		Возврат Неопределено;
	КонецЕсли; 	
		
КонецФункции 
 