
Перем ПараметрыТО Экспорт;   // Параметры торгового оборудования.
Перем Результат Экспорт;     // Результат выполнения действия.
Перем DRV Экспорт;           // Драйвер

Перем Пароль, ИгнорироватьОбщийПароль;
Перем КодыМоделей;
Перем ТаблицаПараметрыСтроки;
Перем МаксДлинаСтроки;

#Если Клиент Тогда

// Производит инициализацию торгового оборудования.
//
Процедура Инициализация() Экспорт
	
	Если НЕ ЗагрузитьДрайвер() Тогда
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Ошибка загрузки драйвера!";
		Результат.Подробно	= "Программе не удалось загрузить драйвер ККМ...";
		Возврат;
	КонецЕсли; 
	
	
	//ПрочитатьПараметр("НеФискальныйРежим"	, Ложь );
	//ПрочитатьПараметр("PortNumber"			, 1 );
	//ПрочитатьПараметр("BaudRate"			, 18 );
	//ПрочитатьПараметр("MachineName"			, "" );
	//ПрочитатьПараметр("WriteLogFile"		, Ложь );
	//ПрочитатьПараметр("UseAccessPassword"	, Ложь );
	//ПрочитатьПараметр("AccessPassword"		, "" );
	//ПрочитатьПараметр("ФлагОбщийПароль"		, Ложь );
	//ПрочитатьПараметр("ОбщийПароль"			, "" );
	//ПрочитатьПараметр("ИдУстройства"		, "" );
	//ПрочитатьПараметр("PrintTax"			, 1 );
	//
	//Если СокрП(ТО.КодВида)="ПРН" Тогда
	//	ПрочитатьПараметр("ФлагПечатьПД"	, Ложь );
	//	ПрочитатьПараметр("КолвоСтрокНаЛист", 30 );
	//	Если КолвоСтрокНаЛист=0 Тогда
	//		КолвоСтрокНаЛист=30;
	//	КонецЕсли;
	//	ПрочитатьПараметр("СимволовВСтроке"	, 32 );
	//	ПрочитатьПараметр("SlipDocTopMargin", 0 );
	//	ПрочитатьПараметр("SlipDocLeftMargin", 0 );
	//КонецЕсли;
	
	КодыМоделей = Новый Структура;
	КодыМоделей.Вставить("ФеликсРК01"		,24);
	КодыМоделей.Вставить("ФеликсРФ02"		,14);
	КодыМоделей.Вставить("Феликс02К"		,15);
	КодыМоделей.Вставить("Феликс3СК"		,27);
	КодыМоделей.Вставить("ТриумФ"			,13);
	КодыМоделей.Вставить("ТОРНАДО"			,20);
	КодыМоделей.Вставить("Меркурий114Ф"		,17);
	КодыМоделей.Вставить("МеркурийСистемаФ"	,17);
	КодыМоделей.Вставить("POSPrintFP410K"	,101);
	КодыМоделей.Вставить("ПРИМ88ТК"			,104);
	КодыМоделей.Вставить("ПРИМ08ТК"			,105);
	КодыМоделей.Вставить("СП101ФРК"			,106);
	КодыМоделей.Вставить("FPrint02K"		,30);
	КодыМоделей.Вставить("FPrint03K"		,31);
	КодыМоделей.Вставить("FPrint88K"		,32);
	КодыМоделей.Вставить("FPrint5200K"		,35);
	КодыМоделей.Вставить("FPrint55"			,47);
	КодыМоделей.Вставить("FPrint22K"		,52);
	КодыМоделей.Вставить("ШтрихФРК01"		,25);
	КодыМоделей.Вставить("ШтрихФРФ02"		,18);
	КодыМоделей.Вставить("ШтрихФРФ03"		,18);
	//	КодыМоделей.Вставить("Штрих950К"		,00);
	КодыМоделей.Вставить("ШтрихМиниФРК"		,28);
	КодыМоделей.Вставить("ШтрихКомбо"		,107);
	КодыМоделей.Вставить("ШтрихМФРК"		,110);
	КодыМоделей.Вставить("ШтрихLightФРК"	,113);
	КодыМоделей.Вставить("ЭлвесМиниФРФ"		,19);
	КодыМоделей.Вставить("ЭлвесФРК"		    ,26);
	КодыМоделей.Вставить("MStarTK"			,111);
	КодыМоделей.Вставить("Bixolon01K"	    ,33);
	КодыМоделей.Вставить("ПиритФР01К"		,114);
	
	КодыМоделей.Вставить("АТОЛ25Ф"		,57);
	КодыМоделей.Вставить("АТОЛ77Ф"		,69);
    	
	ЗаполнитьПараметрыСтроки();
	
	ПрочитатьПараметр("AccessPassword","0");
	ПрочитатьПараметр("BaudRate",1);
	ПрочитатьПараметр("Model",КодыМоделей[то.КодМодели]);
	ПрочитатьПараметр("Password","30");
	ПрочитатьПараметр("PortNumber",1000 + PortNumber);
	ПрочитатьПараметр("PrintBarCodeText",Ложь);
	ПрочитатьПараметр("PrintTax",Истина);
	ПрочитатьПараметр("Scale",200);
	ПрочитатьПараметр("ScaleQR",300);
	ПрочитатьПараметр("ИдУстройства", "" );
	
	ПараметрыТО.Model = КодыМоделей[то.КодМодели];
	ТО.Параметры = ЗначениеВСтрокуВнутр(ПараметрыТО);
	ТО.Записать();
	
КонецПроцедуры

// Загружает драйвер ТО.
//
// Возвращаемое значение:
//  Истина - драйвер загружен, ложь - нет.
//
Функция ЗагрузитьДрайвер()
	
	//AddIn.ATOL_KKM_1C82_54FZ
	Если глТорговоеОборудование.Свойство("FPrnM45",DRV) Тогда
		Возврат Истина;
	КонецЕсли;
	Попытка
		Ответ = ПодключитьВнешнююКомпоненту("ОбщийМакет.ДрайверАтол", "ATOL_KKM_1C82_54FZ");
	    DRV = Новый ("AddIn.ATOL_KKM_1C82_54FZ.ATOL_KKM_1C82_54FZ");
	Исключение
		Инфо = ИнформацияОбОшибке();
		Сообщить(Инфо);
	КонецПопытки;
	
	Если DRV <> Неопределено Тогда
		глТорговоеОборудование.Вставить("FPrnM45", DRV);
		DRV = глТорговоеОборудование["FPrnM45"];
	КонецЕсли;
	
	
	
	
	
	
	
	//Попытка
	//	//ПодключитьВнешнююКомпоненту("AddIn.ATOL_KKM_1C");
	//	ошибка = ПодключитьВнешнююКомпоненту("AddIn.ATOL_KKM_1C82_54FZ","ATOL_KKM_1C82_54FZ",ТипВнешнейКомпоненты.Native);
	//	Если не ошибка Тогда 
	//		Сообщить(ОписаниеОшибки());
	//		ВызватьИсключение 0;
	//	КонецЕсли;
	//Исключение
	//	//Дд = ПолучитьОбщийМакет("ДрайверАтол");
	//	//ИмяФайла = КаталогВременныхФайлов() + "FprnM1C82_54FZ.dll";
	//	//Дд.Записать(ИмяФайла);
	//	ИмяФайла = КаталогПрограммы() + "FprnM1C82.dll";
	//	ЗагрузитьВнешнююКомпоненту(ИмяФайла);
	//КонецПопытки;
	
	//Попытка 
	//	//ЗагрузитьВнешнююКомпоненту("c:\program files\atol\drivers8\bin\FPrnM1C.dll");
	//	//ПодключитьВнешнююКомпоненту("AddIn.FPrnM45");
	//	//DRV = Новый("AddIn.FPrnM45");
	//	//ПодключитьВнешнююКомпоненту("AddIn.FPrnM8");
	//	//ПодключитьВнешнююКомпоненту("AddIn.ATOL_KKM_1C");
	//	//ЗагрузитьВнешнююКомпоненту("C:\Program Files (x86)\ATOL\Drivers8\Bin\FPrnM1C.dll");
	//	DRV = Новый("AddIn.ATOL_KKM_1C82_54FZ.ATOL_KKM_1C82_54FZ");
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Возврат Ложь;
	//КонецПопытки;
	
	//DRV.LockDevices = 1;
	
	//глТорговоеОборудование.Вставить("FPrnM45", DRV);
	
	Возврат Истина;
КонецФункции

// Выполняет чтение параметра ТО.
//
// Параметры:
//  ИмяПараметра        - имя параметра,
//  ЗначениеПоУмолчанию - значение по умолчанию для данного параметра.
//
// Возвращаемое значение:
//  Значение параметра или значение по умолчанию
//
Процедура ПрочитатьПараметр(ИмяПараметра,ЗначениеПоУмолчанию)
	
	Если НЕ ПараметрыТО.Свойство(ИмяПараметра) Тогда
		ПараметрыТО.Вставить(ИмяПараметра,ЗначениеПоУмолчанию);
	КонецЕсли; 
	
	Попытка
		Если ИмяПараметра = "PortNumber" ТОгда
			ЭтотОбъект[ИмяПараметра] = ?(ПараметрыТО[ИмяПараметра]> 1000,ПараметрыТО[ИмяПараметра] - 1000,ПараметрыТО[ИмяПараметра]);
		Иначе 
			ЭтотОбъект[ИмяПараметра] = ПараметрыТО[ИмяПараметра];
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Выполняет действие с ТО.
//
// Параметры:
//  Действие - имя действия,
//  ПараметрыДействия - произвольный набор параметров
//
Процедура ВыполнитьДействие( Действие, ПараметрыДействия=Неопределено ) Экспорт
	Возврат;	
	ПараметрыДействия.Свойство("Пароль",Пароль);
	
	Если НЕ ПараметрыДействия.Свойство("ИгнорироватьОбщийПароль",ИгнорироватьОбщийПароль) Тогда
		ИгнорироватьОбщийПароль = Ложь;
	КонецЕсли; 
	
	Если Действие = "Подключить" Тогда
		Подключить();
		Отключить();
		
	ИначеЕсли Действие = "Отключить" Тогда
		Отключить();
		
	ИначеЕсли Действие = "Регистрация" Тогда
		//РегистрацияНаККМ( ПараметрыДействия.ТаблицаЗадания );
		//Отключить();
		
	ИначеЕсли Действие = "Печать" Тогда
		//КолвоКопий = 1;
		//Если НЕ ПараметрыДействия.Свойство("КолвоКопий",КолвоКопий) Тогда
		//	КолвоКопий = 1;
		//КонецЕсли;
		//
		//Если ФлагПечатьПД Тогда
		//	ПечатьПД( ПараметрыДействия.ТаблицаЗадания, КолвоКопий );
		//Иначе
		//	Печать( ПараметрыДействия.ТаблицаЗадания, КолвоКопий );
		//КонецЕсли;
		//
		//Отключить();
	ИначеЕсли Действие = "отчет" и ПараметрыДействия.ТипОтчета = "Z" тогда
		//ЗакрытьСмену();
		//Отключить();
		
	ИначеЕсли Действие="Отчет" Тогда
		ПолучитьОтчет(ПараметрыДействия.ТипОтчета);
		Отключить();
		
	//ИначеЕсли Действие="СинхронизироватьВремя" Тогда
	//	СинхронизироватьВремя();
	//	Отключить();
		
	ИначеЕсли Действие="ОткрытьСмену" Тогда
		//ОткрытьСмену();
		
	ИначеЕсли Действие="ЗакрытьСмену" Тогда
		//ЗакрытьСмену();
		//Отключить();
	ИначеЕсли Действие = "" ТОгда
		
	Иначе
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Неизвестная команда!";
		Результат.Подробно	= "Команда """+Действие+""" не определена для "+ТО.Наименование;
		
	КонецЕсли;
	////МясновЪ
	////перезагрузка драйвера ККМ
	//DRV = 0;	
	//глТорговоеОборудование.Удалить("FPrnM45");
	//ЗагрузитьДрайвер();
	//Подключить();
	//Отключить();
	////конец
	////Мясновъ
	
КонецПроцедуры

#Область ФункцийРаботыСККТ

Функция ОткрытьЧек(ВходныеПараметры,ВыходныеПараметры)
	Ответ  = Истина;
	НомерСмены = 0;
	НомерЧека  = 0;
	ТипЧека = Ложь;
	ФискальныйЧек = Истина;
	
	Если не ВходныеПараметры.Свойство("ТипЧека") Тогда
		ВыходныеПараметры.Добавить("Ошибка входных параметров: не указан тип чека");
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("ФискальныйЧек") Тогда
		ВыходныеПараметры.Добавить("Ошибка входных параметров: не указан тип фискальности чека");
		Возврат Ложь;
	КонецЕсли;
	ТипЧека = ВходныеПараметры.ТипЧека;
	ФискальныйЧек = ВходныеПараметры.ФискальныйЧек;	
	
	Ответ = DRV.ОткрытьЧек(ПараметрыТО.ИдУстройства,ФискальныйЧек,ТипЧека,Истина,НомерЧека,НомерСмены);
	Если не Ответ Тогда 
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("");
		DRV.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ОтменитьЧек(ВыходныеПараметры) 
	//DRV.ОтменитьЧек();
	Попытка
		DRV.ОтменитьЧек(ПараметрыТО.ИдУстройства);
	Исключение
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.ОтменитьЧек>. " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;		
	Возврат Истина;
КонецФункции

Функция ЗакрытьЧек(ВыходныеПараметры)
	Ответ = Истина;
	СуммаНал = 0;
	СуммаБНал = 0;
	Если не DRV.ЗакрытьЧек(ИдУстройства, СуммаНал, СуммаБНал) Тогда
		Ответ = Ложь;
		ВыходныеПараметры.Добавить("");
		DRV.ПолучитьОшибку(ВыходныеПараметры[ВыходныеПараметры.Количество()-1]);
		ОтменитьЧек(ВыходныеПараметры);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция НапечататьОтчетСГашением(ВыходныеПараметры)
	Ответ = Истина;
	Ответ = DRV.НапечататьОтчетСГашением(ИдУстройства);
	Если не Ответ Тогда
		ВыходныеПараметры.Добавить("");
		DRV.ПолучитьОшибку(ВыходныеПараметры[1]);
		ОтменитьЧек(ВыходныеПараметры);
	КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция НапечататьОтчетБезГашения(ВыходныеПараметры)
	Ответ = Истина;
	ПодключитьВнешнююКомпоненту("AddIn.ATOL_KKM_1C");
	DRV1 = Новый("AddIn.ATOL_KKM_1C");
	
	Масс = Новый Массив;
	Масс.Добавить(ПараметрыТО.PortNumber - 1000);
	Масс.Добавить(15200);
	Масс.Добавить(ПараметрыТО.Password);
	Масс.Добавить(ПараметрыТО.AccessPassword);
	Масс.Добавить(КодыМоделей[то.КодМодели]);
	//Масс.Добавить("АТОЛ 25Ф");
	Масс.Добавить("1");
	
	
	Ид = Неопределено;
	Ответ = DRV1.Подключить(Масс,Ид);
	Если Не Ответ ТОгда
		ВыходныеПараметры.Добавить("");
		DRV1.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;
	
	
	Ответ = DRV1.НапечататьОтчетБезГашения(ИдУстройства);
	Если не Ответ Тогда
		ВыходныеПараметры.Добавить("");
		DRV1.ПолучитьОшибку(ВыходныеПараметры[1]);
		//ОтменитьЧек(ВыходныеПараметры);
	КонецЕсли;
	
	Ответ = DRV1.Отключить(Ид);

	DRV1 = Неопределено;
	
	Возврат Ответ;
КонецФункции

Функция ФисказизацияЧека(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	
	МассивСтрокЧека = Новый Массив;
	МассивСтрокОплаты = Новый Массив;
	ТипЧека = Ложь;
	
	Если не ВходныеПараметры.Свойство("СтрокиЧека") Тогда
		ВыходныеПараметры.Добавить("Ошибка входных параметров: нет строк чека");
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("СтрокиОплат") Тогда
		ВыходныеПараметры.Добавить("Ошибка входных параметров: нет строк оплаты");
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("ТипЧека") Тогда
		ВыходныеПараметры.Добавить("Ошибка входных параметров: не указан тип чека");
		Возврат Ложь;
	КонецЕсли;
	МассивСтрокЧека = ВходныеПараметры.СтрокиЧека;
	МассивСтрокОплаты = ВходныеПараметры.СтрокиОплат;
	ТипЧека = ВходныеПараметры.ТипЧека;
	СуммаЧека = 0;
	
	ДанныеЧека = ПолучитьXMLПакетЧека(МассивСтрокЧека,МассивСтрокОплаты,ТипЧека,СуммаЧека);
	НомерЧека = 0;
	НомерСмены = 0;
	ФискальныйПризнак = "";
	АдресСайтаПроверки = "";
	
	Попытка
		Ответ = DRV.СформироватьЧек(ПараметрыТО.ИдУстройства,ВходныеПараметры.Кассир,Ложь,ДанныеЧека,
									НомерЧека,НомерСмены,ФискальныйПризнак,АдресСайтаПроверки);
		Если не Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("");
			DRV.ПолучитьОшибку(ВыходныеПараметры[0]);
			Возврат Ответ;
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(номерЧека);
			ВыходныеПараметры.Добавить(ФискальныйПризнак);
			ВыходныеПараметры.Добавить(АдресСайтаПроверки);
		КонецЕсли;
	Исключение
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.СформироватьЧек>. " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
	// вставим отправку по почте или sms
	
	Возврат Ответ;
	
КонецФункции

Функция АннулироватьЧек(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	//Ответ = ОткрытьЧек(ВходныеПараметры,ВыходныеПараметры);
	//Если Ответ Тогда
	//	Ответ = ОтменитьЧек(ВыходныеПараметры);
	//КонецЕсли;
	Возврат Ответ;
КонецФункции

Функция ПечатьТекста(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	
	ДанныеЧека = ПолучитьXMLПакетТекста(ВходныеПараметры.Строки);
	
	Попытка
		Для каждого ТестПечати из ДанныеЧека Цикл
			Ответ = DRV.НапечататьТекстовыйДокумент(ПараметрыТО.ИдУстройства,ТестПечати);
			Если не Ответ Тогда
				ВыходныеПараметры.Очистить();
				ВыходныеПараметры.Добавить("");
				DRV.ПолучитьОшибку(ВыходныеПараметры[0]);
				Возврат Ответ;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.НапечататьТекстовыйДокумент>. " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
	Возврат Ответ;	
КонецФункции

Функция Внесение (ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	Если ТипЗнч(ВходныеПараметры) <> Тип("Число") ТОгда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка входных параметров: передано не число");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Ответ = DRV.НапечататьЧекВнесенияВыемки(ПараметрыТО.ИдУстройства,ВыходныеПараметры);
		Если не Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("");
			DRV.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
	Исключение
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>. " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;		
	Возврат Ответ;
КонецФункции

Функция Выемка (ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	Если ТипЗнч(ВходныеПараметры) <> Тип("Число") ТОгда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка входных параметров: передано не число");
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Ответ = DRV.НапечататьЧекВнесенияВыемки(ПараметрыТО.ИдУстройства,ВыходныеПараметры);
		Если не Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("");
			DRV.ПолучитьОшибку(ВыходныеПараметры[1]);
		КонецЕсли;
	Исключение
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.НапечататьЧекВнесенияВыемки>. " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;		
	Возврат Ответ;
КонецФункции

Функция ПечатьШтрихКода(ВходныеПараметры,ВыходныеПараметры)
	Ответ = Истина;
	
	Если ВходныеПараметры.Свойство("ШтрихКод") Тогда
		ШтрихКод = НСтр("ru='ШТРИХКОД:'") + ?(ВходныеПараметры.Свойство("ШтрихКод"), ВходныеПараметры.ШтрихКод, "");
		Если не DRV.НапечататьНефискСтроку(ИдУстройства, ШтрихКод) Тогда
			Ответ = Ложь;
			ВыходныеПараметры.Добавить("");
			DRV.ПолучитьОшибку(ВыходныеПараметры[ВыходныеПараметры.Количество()-1]);
			ОтменитьЧек(ВыходныеПараметры);
		КонецЕсли;
	Иначе
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка входных параметров: Ошибка ШК");
	КонецЕсли;
		
	Возврат Ответ;
КонецФункции

Функция ОткрытьДенежныйЯщик(ВыходныеПараметры)
	Ответ = Истина;

	Попытка
		Ответ = DRV.ОткрытьДенежныйЯщик(ПараметрыТО.ИдУстройства);
	Исключение
		Ответ = Ложь;
		ВыходныеПараметры.Добавить(НСтр("ru='Команда ""Открыть денежный ящик"" не поддерживается данным драйвером.'"));
		Возврат Ответ;
	КонецПопытки;
		
	Если НЕ Ответ Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("");
		DRV.ПолучитьОшибку(ВыходныеПараметры[1]);
	КонецЕсли;

	Возврат Ответ;
КонецФункции

Функция ОткрытьСмену(ВыходныеПараметры)
	ПараметрыККТ = "";
	Попытка
		Ответ = DRV.ПолучитьПараметрыККТ(ПараметрыТО.ИдУстройства,ПараметрыККТ);
	Исключение
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.ПолучитьПараметрыККТ>. " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	Кассир = "";
	НомерСмены     = 0;
	НомерДокумента = 0;
	
	Если Ответ Тогда
		Попытка 
			Ответ = DRV.ОткрытьСмену(ПараметрыТО.ИдУстройства,Кассир,НомерСмены,НомерДокумента);
		Исключение
			Ответ = Ложь;
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.ОткрытьСмену>. " + ОписаниеОшибки());
			Возврат Ответ;
		КонецПопытки;
	КонецЕсли;
	ВыходныеПараметры.Очистить();
	ВыходныеПараметры.Добавить(НомерСмены);
	ВыходныеПараметры.Добавить(НомерДокумента);
	Возврат Ответ;
КонецФункции

Функция ЗакрытьСмену(ВыходныеПараметры)
	Кассир = "";
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ФискальныеДанныеСтруктура = Неопределено;
	ПараметрыСостояния = Неопределено;
	
	Попытка
		ОтветСостояния = DRV.ПолучитьТекущееСостояние(ПараметрыТО.ИдУстройства,НомерДокумента,НомерСмены,СтатусСмены,ПараметрыСостояния);
		Ответ = DRV.ЗакрытьСмену(ПараметрыТО.ИдУстройства,Кассир,НомерСмены,НомерДокумента);
		Если ОтветСостояния Тогда
			ФискальныеДанныеСтруктура = ПолучитьПараметрыИзXMLПакета(ПараметрыСостояния,НомерСмены);
		КонецЕсли;
	Исключение
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.ЗакрытьСмену>. " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
	Если Ответ Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить(НомерСмены);
		ВыходныеПараметры.Добавить(НомерДокумента);
		ВыходныеПараметры.Добавить(ФискальныеДанныеСтруктура);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("");
		DRV.ПолучитьОшибку(ВыходныеПараметры[0]);
	КонецЕсли;
	
	Возврат Ответ;

КонецФункции

Функция ОтчетОТекущемСостоянииРасчетов(ВыходныеПараметры)
	
	Попытка 
		Ответ = DRV.ОтчетОТекущемСостоянииРасчетов(ПараметрыТО.ИдУстройства);
	Исключение
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.ОтчетОТекущемСостоянииРасчетов>. " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
	Если Ответ Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Смена открыта");
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("");
		DRV.ПолучитьОшибку(ВыходныеПараметры[0]);
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьТекущееСостояние(ВыходныеПараметры)
	
	НомерСмены     = 0;
	НомерДокумента = 0;
	СтатусСмены    = 0;
	ПараметрыСостояния = "";
	
	Попытка
		Ответ = DRV.ПолучитьТекущееСостояние(ПараметрыТО.ИДУстройства, НомерДокумента, НомерСмены, СтатусСмены, ПараметрыСостояния);
		Если не Ответ Тогда
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("");
			DRV.ПолучитьОшибку(ВыходныеПараметры[0]);
			Возврат Ответ;
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерСмены);
			ВыходныеПараметры.Добавить(НомерДокумента);
			ВыходныеПараметры.Добавить(СтатусСмены); 
			Если не ПустаяСтрока(ПараметрыСостояния) Тогда
				ВыходныеПараметры.Добавить(ПолучитьПараметрыСостоянияИзXMLПакета(ПараметрыСостояния));
			КонецЕсли;
		КонецЕсли;
	Исключение
		Ответ = Ложь;
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка вызова метода <ОбъектДрайвера.ПолучитьТекущееСостояние>. " + ОписаниеОшибки());
		Возврат Ответ;
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

#Область ДопПроцедуры

Функция ПолучитьПараметрыИзXMLПакета(Данные,НомерСмены)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = новый Структура;
	Параметры.Вставить("КоличествоНепереданныхФД"   , Неопределено); 
	Параметры.Вставить("НомерПервогоНепереданногоФД", Неопределено); 
	Параметры.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); 
	Параметры.Вставить("ДатаСменыККТ");
	Параметры.Вставить("НомерСменыККТ",НомерСмены);
	Параметры.Вставить("КоличествоЧеков");
	Параметры.Вставить("КоличествоФД");
	Параметры.Вставить("ПревышеноВремяОжиданияОтветаОФД");
	Параметры.Вставить("НеобходимаСтрочнаяЗаменаФН");
	Параметры.Вставить("ПамятьФНПереполнена");
	Параметры.Вставить("РесурсФНИсчерпан");
	
	Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.КоличествоНепереданныхФД    = Число(ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter"));
			Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
			ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
			Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
				Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьXMLПакетЧека(МассивСтрокЧека,МассивСтрокОплаты,ТипЧека,СуммаЧека)
	
	СуммаЧека = 0;
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("CheckPackage");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Parameters");
	
	ЗаписьXML.ЗаписатьАтрибут("PaymentType", XMLСтрока(?(ТипЧека,2,1)));
	//// Email отправляет средствами 1C
	//Если ОбщиеПараметры.Свойство("Отправляет1СEmail") И НЕ ОбщиеПараметры.Отправляет1СEmail Тогда
	//	ЗаписьXML.ЗаписатьАтрибут("CustomerEmail", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательEmail"), ОбщиеПараметры.ПокупательEmail, "")));
	//КонецЕсли;
	//// SMS отправляет средствами 1C
	//Если ОбщиеПараметры.Свойство("Отправляет1СSMS") И НЕ ОбщиеПараметры.Отправляет1СSMS Тогда
	//	ЗаписьXML.ЗаписатьАтрибут("CustomerPhone", XMLСтрока(?(ОбщиеПараметры.Свойство("ПокупательНомер"), ОбщиеПараметры.ПокупательНомер, "")));
	//КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Если МассивСтрокЧека.Количество() <> 0 Тогда
		ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
		Для инд = 0 по МассивСтрокЧека.Количество() - 1 Цикл
			ПозицияЧека = МассивСтрокЧека[инд];
			Если ПозицияЧека.Свойство("ФискальнаяСтрока") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("FiscalString");
				ЗаписьXML.ЗаписатьАтрибут("Name"      , XMLСтрока(ПозицияЧека.Наименование));
				ЗаписьXML.ЗаписатьАтрибут("Quantity"  , XMLСтрока(ПозицияЧека.Количество));
				ЗаписьXML.ЗаписатьАтрибут("Price"     , XMLСтрока(ПозицияЧека.Цена));
				ЗаписьXML.ЗаписатьАтрибут("Amount"    , XMLСтрока(ПозицияЧека.Сумма));
				ЗаписьXML.ЗаписатьАтрибут("Tax"       , XMLСтрока(ПозицияЧека.СтавкаНДС));
				ЗаписьXML.ЗаписатьКонецЭлемента();
				СуммаЧека = СуммаЧека + ПозицияЧека.Сумма;
			ИначеЕсли ПозицияЧека.Свойство("Текст") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
				ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(ПозицияЧека.Текст));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			ИначеЕсли ПозицияЧека.Свойство("ШтрихКод") Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				Если СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) = 13 Тогда
					ТипШК = "EAN13";
				ИначеЕсли СтрДлина(СокрЛП(ПозицияЧека.ШтрихКод)) = 8 Тогда
					ТипШК = "EAN8";
				Иначе
					ТипШК = "QR";
				КонецЕсли;
				ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТипШК));
				ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ПозицияЧека.ШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьКонецЭлемента();
	КонецЕсли;
	
	Если МассивСтрокОплаты.Количество() <> 0 Тогда
		СуммаНал = 0;
		СуммаБНал = 0;
		Для индекс = 0 по МассивСтрокОплаты.Количество() - 1 Цикл
			ПозицияОплаты = МассивСтрокОплаты[индекс];
			ТипОплаты = ?(ПозицияОплаты.Свойство("ТипОплаты") , ПозицияОплаты.ТипОплаты, "Нал");
			СуммаОплаты = ?(ПозицияОплаты.Свойство("Сумма") , ПозицияОплаты.Сумма, 0);
			Если ТипОплаты = "Нал" Тогда
				СуммаНал = СуммаНал + СуммаОплаты;
			Иначе
				СуммаБНал = СуммаБНал + СуммаОплаты;
			КонецЕсли;
		КонецЦикла;
		ЗаписьXML.ЗаписатьНачалоЭлемента("Payments");
		ЗаписьXML.ЗаписатьАтрибут("Cash", XMLСтрока(СуммаНал));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType1", XMLСтрока(СуммаБНал));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType2", XMLСтрока(0));
		ЗаписьXML.ЗаписатьАтрибут("CashLessType3", XMLСтрока(0));
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция ПолучитьXMLПакетТекста(Строки)
	
	ВыхЗнач = Новый Массив();
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
	
		Для индекс = 0 по Строки.Количество() - 1 Цикл
			СтрокаТекста = Строки[индекс];
			Если СокрЛП(СтрокаТекста) = "[отрезка]" Тогда
				ЗаписьXML.ЗаписатьКонецЭлемента();
				ЗаписьXML.ЗаписатьКонецЭлемента();
				Текст = ЗаписьXML.Закрыть();
				ВыхЗнач.Добавить(Текст);
				
				ЗаписьXML = Новый ЗаписьXML();
				ЗаписьXML.УстановитьСтроку("UTF-8");
				ЗаписьXML.ЗаписатьОбъявлениеXML();
				ЗаписьXML.ЗаписатьНачалоЭлемента("Document");
				ЗаписьXML.ЗаписатьНачалоЭлемента("Positions");
			ИначеЕсли найти(СтрокаТекста,"|ШтрихКод|") > 0 Тогда
				поз = Найти(СтрокаТекста,"|ШтрихКод|");
				ВыделеннаяСтрока = Сред(СтрокаТекста, Поз + СтрДлина("|ШтрихКод|") + 1);
	 			ВремШтрихКод = Сред(ВыделеннаяСтрока,1, Найти(ВыделеннаяСтрока, "|") - 1); 
				Если СтрДлина(СокрЛП(ВремШтрихКод)) = 13 Тогда
					ТипШК = "EAN13";
				ИначеЕсли СтрДлина(СокрЛП(ВремШтрихКод)) = 8 Тогда
					ТипШК = "EAN8";
				Иначе
					ТипШК = "QR";
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Barcode");
				ЗаписьXML.ЗаписатьАтрибут("BarcodeType", XMLСтрока(ТипШК));
				ЗаписьXML.ЗаписатьАтрибут("Barcode", XMLСтрока(ВремШтрихКод));
				ЗаписьXML.ЗаписатьКонецЭлемента();
			Иначе
				Если СтрДлина(СтрокаТекста) > 48 Тогда
					Пока СтрДлина(СтрокаТекста) > 48 Цикл
						СтрТекста = Лев(СтрокаТекста,48);
						ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
						ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(СтрТекста));
						ЗаписьXML.ЗаписатьКонецЭлемента();
						СтрокаТекста = Сред(СтрокаТекста,49);
						Если СтрДлина(СтрокаТекста) <> 0 Тогда
							ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
							ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(СтрокаТекста));
							ЗаписьXML.ЗаписатьКонецЭлемента();
						КонецЕсли;
					КонецЦикла;
				Иначе
					ЗаписьXML.ЗаписатьНачалоЭлемента("TextString");
					ЗаписьXML.ЗаписатьАтрибут("Text", XMLСтрока(СтрокаТекста));
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Текст = ЗаписьXML.Закрыть();
	
	ВыхЗнач.Добавить(Текст);
	
	Возврат ВыхЗнач;

КонецФункции

Функция ПолучитьПараметрыСостоянияИзXMLПакета(Данные) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML; 
	ЧтениеXML.УстановитьСтроку(Данные);
	ЧтениеXML.ПерейтиКСодержимому();
	
	Параметры = Новый Структура();
	Параметры.Вставить("КоличествоНепереданныхФД"   , Неопределено); 
	Параметры.Вставить("НомерПервогоНепереданногоФД", Неопределено); 
	Параметры.Вставить("ДатаПервогоНепереданногоФД ", Неопределено); 
	
	Если ЧтениеXML.Имя = "StatusParameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
		Если ЧтениеXML.Прочитать() И ЧтениеXML.Имя = "Parameters" И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
			Параметры.КоличествоНепереданныхФД    = Число(ЧтениеXML.ЗначениеАтрибута("BacklogDocumentsCounter"));
			Параметры.НомерПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstNumber");
			ДатаПервогоНепереданногоФД = ЧтениеXML.ЗначениеАтрибута("BacklogDocumentFirstDateTime");
			Если НЕ ПустаяСтрока(ДатаПервогоНепереданногоФД) Тогда
				Параметры.ДатаПервогоНепереданногоФД = XMLЗначение(Тип("Дата"), ДатаПервогоНепереданногоФД);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область ТочкаВхода
// Точка входа
Функция ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ВыходныеПараметры = новый Массив;
	
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Отключить();
			Возврат Ложь;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Отключить();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Подключить();
	
	Если Команда = "ОткрытьСмену" тогда
		ответКоманды = ОткрытьСмену(ВыходныеПараметры);
	ИначеЕсли Команда = "ЗакрытьСмену" Тогда
		ответКоманды =  ЗакрытьСмену(ВыходныеПараметры);
		//Возврат НапечататьОтчетСГашением(ВыходныеПараметры);
	ИначеЕсли Команда = "НапечататьОтчетБезГашения" Тогда
		Возврат НапечататьОтчетБезГашения(ВыходныеПараметры);
	ИначеЕсли Команда = "НапечататьОтчетСГашением" Тогда
		//Возврат НапечататьОтчетСГашением(ВыходныеПараметры);
	ИначеЕсли Команда = "ОтчетОТекущемСостоянииРасчетов" Тогда
		ответКоманды =  ОтчетОТекущемСостоянииРасчетов(ВыходныеПараметры);
	ИначеЕсли Команда = "ФискализацияЧека" Тогда
		ответКоманды =  ФисказизацияЧека(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "АннулироватьЧек" Тогда
		ответКоманды =  АннулироватьЧек(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "ПечатьТекста" Тогда
		ответКоманды =  ПечатьТекста(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "ОткрытьЧек" Тогда
		ответКоманды =  ОткрытьЧек(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "ОтменитьЧек" Тогда
		ответКоманды =  ОтменитьЧек(ВыходныеПараметры);
	ИначеЕсли Команда = "Внесение" Тогда
		ответКоманды =  Внесение(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "Выемка" Тогда
		ответКоманды =  Выемка(ВходныеПараметры,ВыходныеПараметры);
	//ИначеЕсли Команда = "ПечатьШтрихКода" Тогда
		//Возврат ПечатьШтрихКода(ВходныеПараметры,ВыходныеПараметры);
	ИначеЕсли Команда = "ОткрытьДенежныйЯщик" Тогда
		ответКоманды =  ОткрытьДенежныйЯщик(ВыходныеПараметры);
	ИначеЕсли Команда = "ПолучитьТекущееСостояние" Тогда
		ответКоманды = ПолучитьТекущееСостояние(ВыходныеПараметры);
	Иначе
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Неизвестная команда");
		Отключить();
		Возврат Ложь;
	КонецЕсли;
	
	Отключить();
	
	Возврат ответКоманды;
	
КонецФункции

#КонецОбласти

// Обработка ошибок
//
Функция Ошибка() Экспорт
	
	Если DRV.ResultCode=-12 Тогда	// не поддерживается в данной модели
		Возврат Ложь;
	КонецЕсли;
	
	Если DRV.ResultCode = -3828 Тогда 	// Z-отчет, смена не открыта
		Результат.СменаНеОткрыта = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	Если DRV.ResultCode <> 0 Тогда
		
		ЗаписьЖурналаРегистрации("Торговое оборудование.Ошибка", УровеньЖурналаРегистрации.Ошибка, ТО.Метаданные(), ТО.Ссылка, DRV.ResultDescription);
		
		Результат.Ошибка = Истина;
		Результат.Описание = "Ошибка ККМ: "+DRV.ResultCode;
		Результат.Подробно = DRV.ResultDescription;
		//Если DRV.resultcode = -10 или DRV.resultcode = -1 тогда
		//	Текст1 = "ВЫШЕЛ ЧЕК ?";
		//	
		//	Текст2 = "Чек вышел из кассы ?";
		//	
		//	ответ = ИнтерфейсРМ.ВопросПредупреждение("Вопрос", Текст1, Текст2, "ДА","НЕТ","");
		//	Если ответ = "ДА" тогда
		//		Результат.Ошибка = ложь;
		//	Иначе
				Результат.Ошибка = истина;
		//	КонецЕсли;
		//КонецЕсли;
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Установка параметров подключения
//
Функция Подключить(БезПроверок=Ложь) Экспорт
	
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Возврат Ложь;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого парам из ПараметрыТО Цикл
		ИмяПараметра = парам.Ключ;
		ЗначениеПараметра = парам.Значение;
		DRV.УстановитьПараметр(ИмяПараметра,ЗначениеПараметра);
	КонецЦикла;
	
	ПараметрыТО.вставить("ИдУстройства","");
	Попытка
		Ответ = DRV.Подключить(ПараметрыТО.ИдУстройства);
	Исключение
		Результат.Ошибка = Истина;
		Результат.Описание = "ошибка подключения";
		Результат.Подробно = "Ошибка вызова метода <ОбъектДрайвера.Подключить>.";
		Возврат Ложь;
	КонецПопытки;
	
	Если не Ответ Тогда
		Результат.Ошибка = Истина;
		Результат.Описание = "ошибка подключения";
		DRV.ПолучитьОшибку(Результат.Подробно);
		Возврат Ложь;
	КонецЕсли;
	
	Если не ТО.Ссылка.Пустая() Тогда
		Попытка
			ТО.Параметры = ЗначениеВСтрокуВнутр(ПараметрыТО);
			то.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Отключение драйвера
//
Процедура Отключить() Экспорт
	
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Возврат;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Возврат;
		КонецЕсли;
	КонецЕсли;
	DRV.Отключить(ПараметрыТО.ИдУстройства);
	//DRV.ResetMode();
	//DRV.DeviceEnabled=0;
	
КонецПроцедуры

Функция ТестУстройства() Экспорт
	Если ТипЗнч(ПараметрыТО) <> Тип("Структура") Тогда
		Если ТО.Ссылка.Пустая() Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Не задан объект справочника ТО";
			Результат.Подробно = "Не задан объект справочника ТО";
			Возврат Ложь;
		Иначе
			ПараметрыТО = ЗначениеИзСтрокиВнутр(ТО.Параметры);
		КонецЕсли;
	КонецЕсли;
	
	Если DRV = Неопределено Тогда
		Ответ = ЗагрузитьДрайвер();
		Если не Ответ Тогда
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка загрузки Драйвера";
			Результат.Подробно = "Ошибка загрузки Драйвера";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого парам из ПараметрыТО Цикл
		ИмяПараметра = парам.Ключ;
		ЗначениеПараметра = парам.Значение;
		DRV.УстановитьПараметр(ИмяПараметра,ЗначениеПараметра);
	КонецЦикла;
	
	РезультатТеста = "";
	АктивированДемоРежим = "";
	
	Попытка
		Ответ = DRV.ТестУстройства(РезультатТеста, АктивированДемоРежим);
		Если Ответ Тогда
			Результат.Ошибка = Ложь;
			Результат.Описание = РезультатТеста;
			//Результат.Подробно = ОписОш;
			Возврат Истина;
		Иначе
			ОписОш = "";
			DRV.ПолучитьОшибку(ОписОш);
			Результат.Ошибка = Истина;
			Результат.Описание = "Ошибка ККМ";
			Результат.Подробно = ОписОш;
			Возврат ложь;
		КонецЕсли;			
	Исключение
		Результат.Ошибка = Истина;
		Результат.Описание = "Ошибка ККМ";
		Результат.Подробно = "Ошибка вызова метода <ОбъектДрайвера.ТестУстройства>." + ОписаниеОшибки();
		Возврат ложь;
	КонецПопытки;
	
КонецФункции

// Синхронизация времени ККМ с системным
//
Процедура СинхронизироватьВремя()
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если DRV.Protocol=0 Тогда
		// протокол АТОЛ 1.х - надо перейти в режим отчетов с гашением
		DRV.Mode=3;
		DRV.SetMode();
		Если Ошибка() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// на другие сутки время не переводим
	Если ТекущаяДата() > КонецДня(Дата(DRV.Year,DRV.Month,DRV.Day)) ИЛИ 
		ТекущаяДата() < НачалоДня(Дата(DRV.Year,DRV.Month,DRV.Day)) Тогда
		
		Предупреждение("Ошибка времени" + Символы.ПС + "Нельзя перевести время на другие сутки!");
		
		Возврат;
	КонецЕсли;
	 
	Если Дата(DRV.Year,DRV.Month,DRV.Day) <> НачалоДня(ТекущаяДата()) Тогда
		DRV.Day		= День(ТекущаяДата());
		DRV.Month	= Месяц(ТекущаяДата());
		DRV.Year	= Год(ТекущаяДата());
		DRV.SetDate();
		Если DRV.ResultCode=-3893 Тогда
			// требуется подтверждение
			DRV.SetDate();
		КонецЕсли;
		Если Ошибка() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	DRV.Hour	= Час(ТекущаяДата());
	DRV.Minute	= Минута(ТекущаяДата());
	DRV.Second	= Секунда(ТекущаяДата());
	DRV.SetTime();
	
	Ошибка();
	
КонецПроцедуры

// Форматирование строк
//
Функция ДополнитьСтроку(Стр, ДлинаСтроки, Выравнивание=0, СтрДоб=" ")
	
	ТекДлинаСтроки = СтрДлина(Стр);
	
	Если ТекДлинаСтроки >= ДлинаСтроки Тогда
		Если Выравнивание=2 Тогда	// по правому краю
			Возврат Прав(Стр, ДлинаСтроки);
		Иначе
			Возврат Лев(Стр, ДлинаСтроки);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьСлева	=0;
	ДобавитьСправа	=0;
	
	Если Выравнивание=0 Тогда		// по левому краю
		ДобавитьСправа=ДлинаСтроки-ТекДлинаСтроки;
		
	ИначеЕсли Выравнивание=2 Тогда	// по правому краю
		ДобавитьСлева =ДлинаСтроки-ТекДлинаСтроки;
		
	Иначе							// по центру
		ДобавитьСлева =Цел((ДлинаСтроки-ТекДлинаСтроки)/2);
		ДобавитьСправа=ДлинаСтроки-ТекДлинаСтроки-ДобавитьСлева;
		
	КонецЕсли;
	
	Для н=1 По ДобавитьСлева Цикл
		Стр=СтрДоб+Стр;
	КонецЦикла;
	
	Для н=1 По ДобавитьСправа Цикл
		Стр=Стр+СтрДоб;
	КонецЦикла;
	
	Возврат Стр;
КонецФункции

// Перенос строк по словам
//
Функция ПереносСтрок(ИсходнаяСтрока,ФрмДлина)
	
	// сначала получим список слов исходной строки
	СписокСлов = Новый Массив;
	Стр=СокрЛП(ИсходнаяСтрока)+" ";
	
	Пока ЗначениеЗаполнено(Стр) Цикл
		н=Найти(Стр," ");
		СписокСлов.Добавить(Лев(Стр,н-1));
		Стр=Сред(Стр,н+1);
	КонецЦикла;
	
	// а теперь отформатируем под нужную длину
	СписокСтрок = Новый Массив;
	
	нс=0;
	Пока нс<=СписокСлов.Количество()-1 Цикл
		
		Стр="";
		Пока СтрДлина(Стр+СписокСлов[нс]) + ?(Стр="",0,1) <= ФрмДлина Цикл
			
			Стр=Стр+?(Стр="",""," ")+СписокСлов[нс];
			
			нс=нс+1;
			Если нс>СписокСлов.Количество()-1 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ДлинаСтроки=СтрДлина(Стр)+?(Стр="",0,1);
		
		Если нс<=СписокСлов.Количество()-1 И ДлинаСтроки < Цел(ФрмДлина/2)+1 Тогда
			// строка заполнена меньше чем на половину, а следующее слово уже не помещается - 
			// обрезаем его и переносим остаток
			Слово=СписокСлов[нс];
			
			Стр=Стр+?(Стр="",""," ")+Лев(Слово,ФрмДлина-ДлинаСтроки-1)+"-";
			СписокСлов.Вставить(нс+1,Сред(Слово,ФрмДлина-ДлинаСтроки));
			
			нс=нс+1;
		КонецЕсли;
		
		СписокСтрок.Добавить(Стр);
	КонецЦикла;
	
	Возврат СписокСтрок;
КонецФункции

// Выполнение конкретных действий на ККМ
//
Функция ВыполнитьДействиеККМ(Тип, Параметры)
	Возврат Истина;
	Если Тип="Строка" Тогда
		СтрПечати		=Строка(Параметры.Caption);
		Выравнивание	=Число(Параметры.Alignment);
		Перенос			=Число(Параметры.TextWrap);
		
		DRV.TextWrap=0;  // встроенным переносом пользоваться нельзя, потому как 
		// нам надо еще и выравнивание вправо, по центру, а этого нет
		
		Если (Перенос=0) ИЛИ (СтрДлина(СтрПечати)<=МаксДлинаСтроки) Тогда
			
			DRV.Caption=ДополнитьСтроку(СтрПечати, МаксДлинаСтроки, Выравнивание, " ");
			DRV.PrintString();
			
		Иначе
			
			СписокСтрок=ПереносСтрок(СтрПечати,МаксДлинаСтроки);
			Для каждого СтрПечати Из СписокСтрок Цикл
				DRV.Caption=ДополнитьСтроку(СтрПечати, МаксДлинаСтроки, Выравнивание, " ");
				DRV.PrintString();
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Тип="Картинка" Тогда
		//FileName=СокрЛП(Параметры.FileName);
		FileName=СокрЛП(Параметры.Caption);
		
		DRV.FileName	=FileName;					Если Ошибка() Тогда Возврат Ложь; КонецЕсли;
		DRV.PrintPurpose=1;
		DRV.PrintBitmapFromFile();
		
	ИначеЕсли Тип="ШтрихКод" Тогда
		Barcode				=Строка(Параметры.Caption);
		Height				=Число(Параметры.BarCodeHeight); Если Height=0 Тогда Height=50; КонецЕсли;
		BarcodeType			=Число(Параметры.BarCodeType);
		BarcodeControlCode	=Число(Параметры.BarCodeControlCode);
		PrintBarcodeText	=?(ЗначениеЗаполнено(Параметры.BarCodePrintText),1,0);
		
		Если ЗначениеЗаполнено(Barcode) Тогда
			DRV.Barcode				=Barcode;			Если Ошибка() Тогда Возврат Ложь; КонецЕсли;
			DRV.Height				=Height;			Если Ошибка() Тогда Возврат Ложь; КонецЕсли;
			DRV.PrintBarcodeText	=PrintBarcodeText;	Если Ошибка() Тогда Возврат Ложь; КонецЕсли;
			Попытка
				DRV.BarcodeType		=BarcodeType;
			Исключение КонецПопытки;
			Попытка
				DRV.BarcodeControlCode=BarcodeControlCode;
			Исключение КонецПопытки;
			DRV.PrintPurpose		=1;
			DRV.PrintBarcode();
		КонецЕсли;
		
	ИначеЕсли Тип="Внесение" Тогда
		DRV.Summ=Число(Параметры.Summ);		Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
		DRV.CashIncome();
		
	ИначеЕсли Тип="Выплата" Тогда
		DRV.Summ=Число(Параметры.Summ);		Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
		DRV.CashOutcome();
		
	ИначеЕсли Тип="ОткрытьЧекПродажа" Тогда
		DRV.CheckType=1;
		DRV.OpenCheck();
		
	ИначеЕсли Тип="ОткрытьЧекВозврат" Тогда
		DRV.CheckType=2;
		DRV.OpenCheck();
		
	ИначеЕсли Тип="ЗакрытьЧек" Тогда
		DRV.CloseCheck();
		
	ИначеЕсли Тип="ОтменаЧека" Тогда
		DRV.CancelCheck();
		
	ИначеЕсли Тип="Регистрация" Тогда
		Name		=Лев(Параметры.Name,Мин(DRV.CharLineLength,40));
		Price		=Число(Параметры.Price);
		Quantity	=Число(Параметры.Quantity);		Если Quantity=0 Тогда Quantity=1; КонецЕсли;
		Department = Число(Параметры.Department);	Если Department=0 Тогда Department=1; КонецЕсли;
		
		DRV.Name		=Name;						Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
		DRV.Price		=Price;						Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
		DRV.Quantity	=Quantity;					Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
		DRV.Department	=Department;				Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
		DRV.Registration();
		
	ИначеЕсли Тип="Возврат" Тогда
		Name		=Лев(Параметры.Name,Мин(DRV.CharLineLength,40));
		Price		=Число(Параметры.Price);
		Quantity	=Число(Параметры.Quantity);		Если Quantity=0 Тогда Quantity=1; КонецЕсли;
		EnableCheckSumm	=?(ЗначениеЗаполнено(Параметры.EnableCheckSumm),1,0);
		
		DRV.Name		=Name;						Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
		DRV.Price		=Price;						Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
		DRV.Quantity	=Quantity;					Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
		DRV.EnableCheckSumm=EnableCheckSumm;		Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
		DRV.Return();
		
	ИначеЕсли Тип="Оплата" Тогда
		Summ		=Число(Параметры.Summ);
		TypeClose	=Макс(1,Число(Параметры.TypeClose)) - 1;	// в драйвере наличные - 0, а у нас 1
		
		Если Summ<0 Тогда
			DRV.Summ		=-Summ;					Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
			DRV.TypeClose	=TypeClose;				Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
			DRV.StornoPayment();
		Иначе
			DRV.Summ		=Summ;					Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
			DRV.TypeClose	=TypeClose;				Если Ошибка() Тогда DRV.CancelCheck(); Возврат Ложь; КонецЕсли;
			DRV.Payment();
		КонецЕсли;
		
	ИначеЕсли Тип="ЧастичнаяОтрезка" Тогда
		// принудительная частичная отрезка внутри задания
		// Предварительно печатаем заголовок для корректной отрезки 
		DRV.PrintHeader();
		// Отрезка 
		DRV.PartialCut();
		
	КонецЕсли;
	
	Если Ошибка() Тогда
		DRV.CancelCheck();
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Определяет использовать общий пароль или нет
//
Функция ПарольДляРегистрации(ТаблицаЗадания)
	
	Если НЕ ФлагОбщийПароль Тогда
		Возврат СокрЛП(Пароль);
	КонецЕсли;
	
	// общий пароль применяется только для регистрации продаж,
	// если это выплата или внесение денег в кассу, то используется введеный пароль
	Для каждого Задание Из ТаблицаЗадания Цикл
		Если Задание.ТипДанных="Внесение" ИЛИ Задание.ТипДанных="Выплата" Тогда
			Возврат СокрЛП(Пароль);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СокрЛП(ОбщийПароль);
КонецФункции

// Процедура печати чека
//
Процедура РегистрацияНаККМ(ТаблицаЗадания)
	
	Если НЕ Подключить() Тогда
		Возврат;
	КонецЕсли;
	
	DRV.ОткрытьЧек(ИдУстройства,,,,истина);
	//
	//// проверка состояния последнего чека (GetStatus() вызывается в Подключить())
	//Если (DRV.Mode=1) И (DRV.CheckState<>0) Тогда
	//	DRV.CancelCheck();
	//	Если Ошибка() Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// проверка текущего режима
	//DRV.Mode	=1;
	//DRV.SetMode();
	//Если Ошибка() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если НеФискальныйРежим Тогда
	//	ПреобразоватьЗаданиеВНефискальное(ТаблицаЗадания);
	//	Печать(ТаблицаЗадания);
	//	Возврат;
	//КонецЕсли; 
	//
	//СтрПечати="";
	//Для каждого Задание Из ТаблицаЗадания Цикл
	//	
	//	ТипДанных=Задание.ТипДанных;
	//	
	//	Если (ТипДанных="Строка") ИЛИ (ТипДанных="ШтрихКод") ИЛИ (ТипДанных="Картинка") Тогда
	//		Параметры = СформироватьСтруктуруПараметровСтроки(Задание.Данные, Задание.Параметры);
	//		
	//		СтрПечати=СтрПечати+Параметры.Caption;
	//		Если Параметры.TextNewLine=0 Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Параметры.Caption = СтрПечати;
	//		СтрПечати="";
	//		
	//	Иначе
	//		Параметры=Задание.Параметры;
	//	КонецЕсли;
	//	
	//	Если НЕ ВыполнитьДействиеККМ(ТипДанных,Параметры) Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//КонецЦикла;
	
КонецПроцедуры

// Заменяет в таблице задания фискальные команды печатью строк
//
Процедура ПреобразоватьЗаданиеВНефискальное(ТаблицаЗадания)
	
	Задание = ТаблицаЗадания.Вставить(0);
	Задание.Данные    = "НЕФИСКАЛЬНЫЙ ЧЕК";
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Центр,ПереводСтроки";
	
	ИтогоСуммаЧека		= 0;
	ИтогоСуммаОплаты	= 0;
	ИндексСтроки		= 0;
	
	Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
		
		Задание = ТаблицаЗадания[ИндексСтроки];
		Тип = Задание.ТипДанных;
		
		Если Тип="Внесение" Тогда
			СтрВправо = "="+Формат( Задание.Параметры.Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку("ВНЕСЕНИЕ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
		ИначеЕсли Тип="Выплата" Тогда
			СтрВправо = "="+Формат( Задание.Параметры.Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку("ВЫПЛАТА", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
		ИначеЕсли Тип="ОткрытьЧекПродажа" Тогда
			Задание.ТипДанных = "Пропустить";
			
		ИначеЕсли Тип="ОткрытьЧекВозврат" Тогда
			Задание.Данные    = "ВОЗВРАТ";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Лево,ПереводСтроки";
			
		ИначеЕсли Тип="ЗакрытьЧек" Тогда
			Если ИтогоСуммаОплаты > ИтогоСуммаЧека Тогда
				СтрВправо = "="+Формат( ИтогоСуммаОплаты - ИтогоСуммаЧека, "ЧЦ=15;ЧДЦ=2");
				Задание.Данные    = ДополнитьСтроку("СДАЧА", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
				Задание.ТипДанных = "Строка";
				Задание.Параметры = "Право,ПереводСтроки";
				Задание = ТаблицаЗадания.Добавить();
			КонецЕсли; 
			
			Задание.Данные    = "НЕФИСКАЛЬНЫЙ ЧЕК";
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Центр,ПереводСтроки";
			
		ИначеЕсли Тип="Регистрация" ИЛИ Тип="Возврат" Тогда
			Price		=Число(Задание.Параметры.Price);
			Quantity	=Число(Задание.Параметры.Quantity);
			
			Задание.Данные    = "="+Формат( Price*Quantity, "ЧЦ=15;ЧДЦ=2" );
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
			ИтогоСуммаЧека = ИтогоСуммаЧека + Price*Quantity;
			
		ИначеЕсли Тип="Оплата" Тогда
			Summ		=Число(Задание.Параметры.Summ);
			TypeClose	=Макс(1,Число(Задание.Параметры.TypeClose)) - 1;	// в драйвере наличные - 0, а у нас 1
			
			Если ИтогоСуммаОплаты = 0 Тогда
				СтрВправо = "="+Формат(ИтогоСуммаЧека, "ЧЦ=15;ЧДЦ=2");
				Задание.Данные    = ДополнитьСтроку("ИТОГ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
				Задание.ТипДанных = "Строка";
				Задание.Параметры = "Право,ПереводСтроки";
				
				ИндексСтроки = ИндексСтроки + 1;
				Задание = ТаблицаЗадания.Вставить(ИндексСтроки);
			КонецЕсли;
			
			СтрВлево  = ?(TypeClose=0, "НАЛИЧНЫМИ", "ТИП ОПЛАТЫ "+TypeClose);
			СтрВправо = "="+Формат(Summ, "ЧЦ=15;ЧДЦ=2");
			Задание.Данные    = ДополнитьСтроку(СтрВлево, МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
			Задание.ТипДанных = "Строка";
			Задание.Параметры = "Право,ПереводСтроки";
			
			ИтогоСуммаОплаты = ИтогоСуммаОплаты + Summ;
			
		КонецЕсли;
		
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
	Задание = ТаблицаЗадания.Добавить();
	СтрВправо = Формат( ТекущаяДата(), "ДФ=дд-ММ-гг")+" "+Формат( ТекущаяДата(), "ДФ=ЧЧ:мм");
	Задание.Данные    = ДополнитьСтроку("#0001", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,ПереводСтроки";
	
	Задание = ТаблицаЗадания.Добавить();
	СтрВправо = "0000001 ";
	Задание.Данные    = ДополнитьСтроку(" ККМ", МаксДлинаСтроки - СтрДлина(СтрВправо) ) + СтрВправо;
	Задание.ТипДанных = "Строка";
	Задание.Параметры = "Право,ПереводСтроки";
	
КонецПроцедуры
 
// Нефискальная печать задания
//
Процедура Печать(ТаблицаЗадания, КолвоКопий=1)
	
	Перем ТипДанных,Параметры;
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	
	Для н=1 По КолвоКопий Цикл
		
	//Если Найти("ПРИМ88ТК,ПРИМ08ТК,СП101ФРК,",СокрЛП(ТО.КодМодели)) Тогда
		// эти фискальные регистраторы  печатают только при открытом документе,
		// и в методе PrintHeader() для этого специально что-то сделано
		DRV.PrintHeader();
	//КонецЕсли;
		ИндексСтроки = 0;
		Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
			
			Если НЕ СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,ТипДанных,Параметры,"Строка,ШтрихКод,Картинка") Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ВыполнитьДействиеККМ(ТипДанных,Параметры) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		//Если Найти("ПРИМ88ТК,ПРИМ08ТК,СП101ФРК",СокрЛП(ТО.КодМодели)) Тогда
			DRV.PrintFooter();
			Если Найти("ПРИМ88ТК,ПРИМ08ТК",СокрЛП(ТО.КодМодели)) Тогда
				DRV.PartialCut();
			КонецЕсли;
			
		//Иначе
		//	DRV.PrintHeader();
		//	DRV.PartialCut();
			
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Нефискальная печать на станции подкладного документа
//
Процедура ПечатьПД(ТаблицаЗадания, КолвоКопий=1)
	Перем Параметры;
	
	//мясновъ
	//перенаправляем в обычную Печать т.к. нет режима печати ПД
	
	Печать(ТаблицаЗадания,КолвоКопий);
	возврат;
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	// подкладная печать работает только в режиме регистрации ???
	DRV.Mode	=1;
	DRV.SetMode();
	Если Ошибка() Тогда
		Возврат;
	КонецЕсли;
	
	DRV.SlipDocCharLineLength	=ПараметрыТО.СимволовВСтроке;
	DRV.SlipDocTopMargin		=SlipDocTopMargin;
	DRV.SlipDocLeftMargin		=SlipDocLeftMargin;
	
	Для н=1 По КолвоКопий Цикл
		
		
		ИндексСтроки = 0;
		Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
			
			DRV.BeginDocument();
			Пока DRV.ResultCode=-3807 Цикл
				Текст1 = "Вставьте бумагу!";
				Текст2 = "Вставьте бумагу и нажмите <ОК>" +Символы.ПС+ "Для отмены печати нажмите <Отмена>";
				Если ИнтерфейсРМ.ВопросПредупреждение("Предупреждение", Текст1, Текст2, "ОК","","Esc=Отмена") = "Отмена" Тогда
					Результат.Ошибка = Истина;
					Результат.Описание = "";
					Возврат;
				КонецЕсли;
				
				DRV.BeginDocument();
			КонецЦикла;
			
			Если Ошибка() Тогда
				Возврат;
			КонецЕсли;
			
			НомСтр=0;
			Пока СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,,Параметры,"Строка")=1 Цикл
				
				DRV.Caption=ДополнитьСтроку(Параметры.Caption, DRV.SlipDocCharLineLength, Число(Параметры.Alignment), " ");
				DRV.PrintString();
				
				НомСтр=НомСтр+1;
				Если НомСтр=КолвоСтрокНаЛист Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			DRV.SlipDocOrientation=0;
			DRV.EndDocument();
			Задержка(3000);
			Если Ошибка() Тогда
				DRV.ClearOutput();
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьСтрокуЗадания(ТаблицаЗадания,ИндексСтроки,ТипДанных="",Параметры,СтрТипыДанных)
	
	СтрПечати="";
	Пока ИндексСтроки <= ТаблицаЗадания.Количество()-1 Цикл
		
		Задание = ТаблицаЗадания[ИндексСтроки];
		
		ТипДанных=Задание.ТипДанных;
		Если Найти(СтрТипыДанных,ТипДанных)=0 Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Если ТипДанных = "ЧастичнаяОтрезка" Тогда
				Возврат Истина;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Параметры = СформироватьСтруктуруПараметровСтроки(Задание.Данные, Задание.Параметры);
		
		СтрПечати=СтрПечати+Параметры.Caption;
		Если Параметры.TextNewLine=0 Тогда
			ИндексСтроки = ИндексСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		Параметры.Caption = СтрПечати;
		ИндексСтроки = ИндексСтроки + 1;
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура Задержка(ВремяМСек)
	
	Отсечка=РаботаСокнами.GetTimer();
	Пока РаботаСокнами.GetTimer()-Отсечка < ВремяМСек Цикл
	КонецЦикла;
	
КонецПроцедуры

// Формирование отчетов ККМ
//
Процедура ПолучитьОтчет(ТипОтчета)
	
	Если НЕ Подключить(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	// проверка состояния последнего чека
	Если (DRV.Mode=1) И (DRV.CheckState<>0) Тогда
		DRV.CancelCheck();
		Если Ошибка() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипОтчета="Z" Тогда
		Mode=3;
		ReportType=1;
	Иначе
		Mode=2;
		Если ТипОтчета="X" Тогда
			ReportType=2;
		ИначеЕсли ТипОтчета="ПоСекциям" Тогда
			ReportType=7;
		ИначеЕсли ТипОтчета="ПоКассирам" Тогда
			ReportType=8;
		ИначеЕсли ТипОтчета="Почасовой" Тогда
			ReportType=10;
		КонецЕсли;
	КонецЕсли;
	
	// установка необходимого режима и типа отчета
	DRV.Mode=Mode;
	DRV.SetMode();
	Если Ошибка() Тогда
		Возврат;
	КонецЕсли;
	
	DRV.ReportType=ReportType;
	DRV.Report();
	Ошибка();
	
КонецПроцедуры

// Принудительное открытие смены
//
//Процедура ОткрытьСмену()
	
	//Если НЕ Подключить(Истина) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//DRV.Mode=1;
	//DRV.SetMode();
	//Если Ошибка() Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//DRV.OpenSession();
	//
	//Ошибка();
//КонецПроцедуры

//Процедура ЗакрытьСмену()
//	Рез = DRV.НапечататьОтчетСГашением(ИдУстройства);
//	Если не рез Тогда
//		ОписОш = "";
//		DRV.ПолучитьОшибку(ОписОш);
//		Сообщить("Ошибка при закрытии смены:" + ОписОш);
//	КонецЕсли;
//	
//КонецПроцедуры

// Формирует таблицу значений из макета "ПараметрыСтроки"
//
Процедура ЗаполнитьПараметрыСтроки()
	
	ТаблицаПараметрыСтроки = Новый ТаблицаЗначений;
	ТаблицаПараметрыСтроки.Колонки.Добавить("ИдПарам");
	ТаблицаПараметрыСтроки.Колонки.Добавить("СтрЗнач");
	ТаблицаПараметрыСтроки.Колонки.Добавить("ЧислЗач");
	
	Таб = ПолучитьМакет("ПараметрыСтроки");
	
	Для НомСтр=1 По Таб.ВысотаТаблицы Цикл
		
		ИдПарам = Таб.Область(НомСтр,1).Текст;
		Если НЕ ЗначениеЗаполнено(ИдПарам) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыСтроки = ТаблицаПараметрыСтроки.Добавить();
		ПараметрыСтроки.ИдПарам = ИдПарам;
		ПараметрыСтроки.СтрЗнач = Врег(Таб.Область(НомСтр,2).Текст);
		ПараметрыСтроки.ЧислЗач = Число(Таб.Область(НомСтр,3).Текст);
		
	КонецЦикла;
	
КонецПроцедуры

// Преобразует строку параметров в структуру, используя таблицу параметров
//
Функция СформироватьСтруктуруПараметровСтроки(Знач СтрПечати, Знач СтрПараметры)
	
	СтруктураПараметров = Новый Структура;
	
	Если СтрПечати="СтрОтчерк" Тогда
		СтрПечати="==================================================";
	ИначеЕсли СтрПечати="СтрЧерта" Тогда
		СтрПечати="--------------------------------------------------";
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Caption",СтрПечати);
	
	РазделительСтрок = Символы.ПС + Символы.ВК;
	СтрПараметры = СтрЗаменить(СтрПараметры, РазделительСтрок,"");	// убираем лишние переводы строк
	СтрПараметры = СтрЗаменить(СтрПараметры, ",", РазделительСтрок);
	
	Для н=1 По СтрЧислоСтрок(СтрПараметры) Цикл
		
		Парам = СтрПолучитьСтроку(СтрПараметры,н);
		
		Если Лев(Парам,8)="ВысотаШК" Тогда
			ЧислЗач = Число(Сред(Парам,9))*5;	// в драйвере ККМ не в мм, а в неких элементарных строках
			СтруктураПараметров.Вставить("BarCodeHeight", ЧислЗач);
		Иначе
			ПараметрыСтроки = ТаблицаПараметрыСтроки.Найти(Врег(Парам), "СтрЗнач");
			Если ПараметрыСтроки <> Неопределено Тогда
				СтруктураПараметров.Вставить(ПараметрыСтроки.ИдПарам, ПараметрыСтроки.ЧислЗач);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ПараметрыСтроки Из ТаблицаПараметрыСтроки Цикл
		
		Если НЕ СтруктураПараметров.Свойство(ПараметрыСтроки.ИдПарам) Тогда
			СтруктураПараметров.Вставить(ПараметрыСтроки.ИдПарам, ПараметрыСтроки.ЧислЗач);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураПараметров;
КонецФункции

#КонецЕсли

Результат = Новый Структура("Ошибка,Описание,Подробно,СменаНеОткрыта", Ложь,"","",Ложь);

ИгнорироватьОбщийПароль = Ложь;
