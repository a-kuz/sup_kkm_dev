#Если Клиент Тогда
Перем Получено Экспорт;
Перем Коплате Экспорт ;
Перем Товары Экспорт;
Перем РезультатОплаты Экспорт;
Перем Оплачено Экспорт;
Перем ККМ, Обработка_ККМ;
Перем СтрокаНал, СтрокаБезнал;
Перем ВыбВариант Экспорт;
Перем фИдетОплата Экспорт;

// Обязательная процедура для работы с обработкой через ИнтерфейсРМ.ПолучитьОбъектОбработки()
// Вызывается каждый раз при обращении к объекту обработки.
// Здесь надо прописать сброс переменных в начальные значения
// Реквизиты и табличные части уже сброшены
Процедура УстановкаНачальныхЗначений() Экспорт
	СтрокаНал = Неопределено;
	СтрокаБезнал = Неопределено;
	Оплачено = 0;
	СтрокаНал = Неопределено;
	СтрокаБезнал = Неопределено;
	Коплате = 0;
	Получено = 0;
	РезультатОплаты = Новый Структура("Успех, Отмена, Неудача, СделанаОтменаОплатыКартой, Сдача", Ложь, Ложь, Ложь, Ложь, 0);
	Товары = Неопределено;
	фИдетОплата = Ложь;
	ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
	ВыбВариант = Неопределено;
	ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
	
КонецПроцедуры

Функция СуммаРеализации() Экспорт
	Если глПараметрыРМ.МестоРеализации = Справочники.МестаРеализации.Ресторан Тогда
		Возврат Заказ.Товары.Итог("СуммаРеализации");
	КонецЕсли;
	СуммаРеализации = 0;
	Для Каждого Т Из Товары Цикл
		Если Т.СтатусОплаты=-1 И глПараметрыРМ.Фирма = Т.Фирма Тогда
			СуммаРеализации = СуммаРеализации + Т.СуммаРеализации;
		КонецЕсли;
	КонецЦикла;
	Возврат СуммаРеализации;
КонецФункции

Процедура ИнициализироватьПротокол() Экспорт
	ПротоколРасчетов = Документы.ПротоколРасчетов.СоздатьДокумент();
	СсылкаНового = Документы.ПротоколРасчетов.ПолучитьСсылку(Новый УникальныйИдентификатор);
	ПротоколРасчетов.УстановитьСсылкуНового(СсылкаНового);
	ЗаполнитьЗначенияСвойств(ПротоколРасчетов, Заказ);
	ПротоколРасчетов.Заказ = Заказ.Ссылка;
	ПротоколРасчетов.Дата = ТекущаяДатаНаСервере();
	ПротоколРасчетов.ККМ = ККМ.Ссылка;
	ПротоколРасчетов.Смена = ИнтерфейсРМ.ТекущаяСмена();
	ПротоколРасчетов.МестоРеализации = глПараметрыРМ.МестоРеализации;
	ПротоколРасчетов.Фирма = глПараметрыРМ.Фирма;
	ПротоколРасчетов.РабочееМесто = глРабочееМесто;
	ПротоколРасчетов.Автор = глПользователь;
	Товары = Заказ.Товары;
	ВыводНаДПитого(СуммаРеализации());
КонецПроцедуры

Процедура ИнициализироватьПротоколПоВозврату() Экспорт
	ПротоколРасчетов = Документы.ПротоколРасчетов.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ПротоколРасчетов, докВозврат);
	ПротоколРасчетов.Заказ = докВозврат.Ссылка;
	ПротоколРасчетов.Дата = ТекущаяДата();
	ПротоколРасчетов.ККМ = ККМ.Ссылка;
	ПротоколРасчетов.Смена = ИнтерфейсРМ.ТекущаяСмена();
	ПротоколРасчетов.Фирма = глПараметрыРМ.Фирма;
	ПротоколРасчетов.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
	ПротоколРасчетов.МестоРеализации = глПараметрыРМ.МестоРеализации;
	ПротоколРасчетов.РабочееМесто = глРабочееМесто;
	ПротоколРасчетов.Автор = глПользователь;
	
	ВыводНаДПитого(докВозврат.Товары.Итог("Сумма"));
КонецПроцедуры

Функция ЗначениеНДС(СтавкаНДС, Числом = Ложь) Экспорт
	Если Не ЗначениеЗаполнено(СтавкаНДС) Тогда
		Возврат 0;
	КонецЕсли;
	стрНДС = Строка(СтавкаНДС);
	Если Найти(стрНДС,"18") Тогда
		Возврат "18";
	ИначеЕсли Найти(стрНДС,"10") Тогда
		Возврат "10";
	Иначе
		Возврат ?(Числом, 0, "без НДС");
	КонецЕсли;
КонецФункции

Функция ОплатаКартой() Экспорт

	Если СтрокаБезнал.СуммаФакт Тогда
		Возврат Истина;
	КонецЕсли;
	ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
	Обработка_ПС = Обработка_ПС;
	РезультатИнит = ИнициализацияТО(ОбъектТерминал,Обработка_ПС,глПараметрыРМ);
	ВыходныеПараметры = ВыходныеПараметры;
	
	Попытка
		Обработка_ПС.ВыполнитьКоманду("ОплатитьПлатежнойКартой",Новый Структура("Сумма", СтрокаБезнал.Сумма), ВыходныеПараметры);
	Исключение
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
		Возврат Ложь;
	КонецПопытки;
	
	Если ВыходныеПараметры.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
	идТранзакцииПлатежнойСистемы = ВыходныеПараметры[1];
	ПротоколРасчетов.идТранзакцииПлатежнойСистемы = идТранзакцииПлатежнойСистемы;
	Строки = Строки;
	Попытка
		Строки = ВыходныеПараметры[2].Строки;
		ПротоколРасчетов.Слип = ПротоколРасчетов.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
	Исключение
		Если ТипЗнч(Строки) <> Тип("Массив") Тогда
			Строки = Массив("Ошибка при получении слип чека от терминала");
		КонецЕсли;
	КонецПопытки;
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	
	// Печать слипчека
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", Строки);
	ПараметрыВыходные = ПараметрыВыходные;
	Попытка
		Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",Параметры,ПараметрыВыходные);
	Исключение
		ЗарегистрироватьСобытие("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка,, Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ВозвратНаКарту() Экспорт
	

	Если СтрокаБезнал.СуммаФакт Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
	Обработка_ПС = Обработка_ПС;
	РезультатИнит = ИнициализацияТО(ОбъектТерминал,Обработка_ПС,глПараметрыРМ);
	ВыходныеПараметры = ВыходныеПараметры;
	
	Попытка
		Обработка_ПС.ВыполнитьКоманду("ВернутьПлатежПоПлатежнойКарте",Новый Структура("Сумма", СтрокаБезнал.Сумма), ВыходныеПараметры);
	Исключение
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
		Возврат Ложь;
	КонецПопытки;
	
	Если ВыходныеПараметры.Количество() <> 3 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
	идТранзакцииПлатежнойСистемы = ВыходныеПараметры[1];
	ПротоколРасчетов.идТранзакцииПлатежнойСистемы = идТранзакцииПлатежнойСистемы;
	Строки = Строки;
	Попытка
		Строки = ВыходныеПараметры[2].Строки;
		ПротоколРасчетов.Слип = ПротоколРасчетов.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
	Исключение
		Если ТипЗнч(Строки) <> Тип("Массив") Тогда
			Строки = Массив("Ошибка при получении слип чека от терминала");
		КонецЕсли;
	КонецПопытки;
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", Строки);
	ПараметрыВыходные = ПараметрыВыходные;
	Попытка
		Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста", Параметры, ПараметрыВыходные);
		ПоказатьОшибкуККМ(ПараметрыВыходные);	
	Исключение
		ЗарегистрироватьСобытие("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка,, докВозврат.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция Фискализация() Экспорт
	Если глПараметрыРМ.МестоРеализации = Справочники.МестаРеализации.Ресторан Тогда
		Возврат Фискализация_КП();		
	КонецЕсли;
	Если ПротоколРасчетов.Фискализирован Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтрокаБезнал = Неопределено Тогда
		СуммаБезнал = 0;
	Иначе
		СуммаБезнал = СтрокаБезнал.Сумма;
	КонецЕсли;
	
	
	СуммаНал = Получено;
			
	//{ Автономная
	Если КассаАвтономная() Тогда
		РезультатОплаты.Успех = Истина;

		Если СуммаБезнал Тогда
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты через ПС", "Операция оплаты прошла?","ДА","","НЕТ") = "ДА" Тогда
				СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
				Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты", "Чек пробит?","ДА","","НЕТ") = "ДА" Тогда
					Если Не СтрокаНал = Неопределено Тогда
						СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
					КонецЕсли;
					ПротоколРасчетов.Фискализирован = 1;
					ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = 0;
					РезультатОплаты.Успех = Истина;
				Иначе
					РезультатОплаты.Неудача = Истина;
					РезультатОплаты.Успех = Ложь;
				КонецЕсли;

			Иначе
				СтрокаБезнал.СуммаФакт = 0;
				РезультатОплаты.Отмена =Истина;
				РезультатОплаты.Успех = Ложь;
				
			КонецЕсли;
						
		ИначеЕсли СуммаНал Тогда
		
			СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
			ПротоколРасчетов.Фискализирован = 1;
			
		КонецЕсли;	
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		ПечатьПодвалаЛояльности();
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()"); // Касса автономная
		Если ПротоколРасчетов.Фискализирован Тогда
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать(РежимЗаписиДокумента.Проведение)",,,Заказ.Ссылка);
		КонецЕсли;
		
		Возврат РезультатОплаты.Успех;
		
	КонецЕсли;
	//} Автономная	
	Если СуммаБезнал Тогда
		ЗарегистрироватьСобытие("Оплата.Оплата картой.До вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
		Пока Истина Цикл
			
			Если Не ОплатаКартой() Тогда
				ЗарегистрироватьСобытие("Оплата.Оплата картой.После вызова.Ошибка",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Если ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Оплата картой не удалась", "Ошибка при работе с платежным терминалом","Повтор","","Отмена",,,,,Заказ.Ссылка,"") = "Отмена" Тогда
					Если ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) Тогда
						Если ИнтерфейсРМ.ВопросПредупреждение("Предложение", "Чек будет оплачен наличными?", "","Да","","Нет",,,,,Заказ.Ссылка,"") = "Да" Тогда
							Получено = Коплате;
							СуммаНал = Коплате;
							СуммаБезнал = 0;
							ПротоколРасчетов.Протокол.Очистить();
							ЗаполнитьПротокол();						
							Прервать;
						Иначе
							Возврат Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗарегистрироватьСобытие("Оплата.Оплата картой.После вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
	КонецЕсли;
	
	СтрокиЧека = Новый Массив;
	СуммаСкидкиНаЧек = 0;
	Для Каждого Т Из Товары Цикл
		Если Не ЗначениеЗаполнено(Т.Товар) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Т.СтатусОплаты <> -1 Тогда
			Продолжить;
		КонецЕсли;
		Т.ДокументОплаты = ПротоколРасчетов.Ссылка;
		Если Т.КоличествоУдалено И Т.СуммаРеализации * Т.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		
		СтрокиЧека.Добавить(Новый Структура);
		СтрокаЧека = СтрокиЧека.Получить(СтрокиЧека.Количество()-1);
		
		СтрокаЧека.Вставить("ФискальнаяСтрока", "");
		СтрокаЧека.Вставить("Наименование", Т.Товар.Наименование);
		СтрокаЧека.Вставить("Количество",?(Т.Количество,Т.Количество,1));
		Если Т.Количество Тогда
			Цена = Т.ЦенаРеализации;
		Иначе
			Цена = 0;
		КонецЕсли;
		СтрокаЧека.Вставить("Цена", Цена);
		СтрокаЧека.Вставить("Сумма", СтрокаЧека.Цена*СтрокаЧека.Количество);
		СтрокаЧека.Вставить("НомерСекции", Т.Товар.Категория.НомерОтдела);
		
		СтрокаЧека.Вставить("СтавкаНДС", ЗначениеНДС(Т.Товар.Категория.СтавкаНДС));
		
		Попытка
			СтавкаНДСчислом = ЗначениеНДС(Т.Товар.Категория.СтавкаНДС,Истина);
			СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*СтавкаНДСчислом/100);
		Исключение
		КонецПопытки;
		СуммаСкидкиНаЧек = СуммаСкидкиНаЧек + Окр((СтрокаЧека.Цена*СтрокаЧека.Количество),2) - Т.СуммаРеализации;
	КонецЦикла;
	СтрокиОплат = Новый Массив;
	
	Если СуммаБезнал Тогда
		
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Безнал");
		СтрокаОплат.Вставить("Сумма", СуммаБезнал);
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;
	
	Если СуммаНал Тогда
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Нал");
		СтрокаОплат.Вставить("Сумма", СуммаНал);          	
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;	
	
	Параметры = Новый Структура;
	Параметры.Вставить("Кассир", Строка(глПользователь));
	Параметры.Вставить("СтрокиЧека", СтрокиЧека);
	Параметры.Вставить("СтрокиОплат", СтрокиОплат);
	
	СуммаСкидкиНаЧек = Цел(СуммаСкидкиНаЧек * 100);
	СуммаСкидкиНаЧек  = СуммаСкидкиНаЧек / 100;
	Если СуммаСкидкиНаЧек >= 0.01 Тогда
		Параметры.Вставить("СуммаСкидкиНаЧек", СуммаСкидкиНаЧек);
	Иначе
		Параметры.Вставить("СуммаСкидкиНаЧек", 0);
	КонецЕсли;
	Параметры.Вставить("ТипЧека", Ложь);
	Если ЗначениеЗаполнено(Email) Тогда
		Параметры.Вставить("EmailКлиента", Email);
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		R = ирКэш.Получить().RegExp;
		R.Global = 1;
		R.Pattern = "\D";
		НомерТелефона=R.Replace(НомерТелефона,"");
		Параметры.Вставить("ТелефонКлиента", НомерТелефона);
	КонецЕсли;
	ПараметрыВыходные = ПараметрыВыходные;
	Если СтрокиЧека.Количество() Тогда
		Попытка
			ЗарегистрироватьСобытие("Оплата.Фискализация.Входные параметры",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()",,2,Заказ.Ссылка);
			Пока Истина Цикл
				РезультатКомандыФискализация = Обработка_ККМ.ВыполнитьКоманду("ФискализацияЧека",Параметры,ПараметрыВыходные);
				ЗарегистрироватьСобытие("Оплата.Фискализация.Выходные параметры",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка,ЗначениеВСтрокуВнутр(ПараметрыВыходные));
				Если Не РезультатКомандыФискализация Тогда // проверим на "НОМЕР ФД ИЗМЕНИЛСЯ"
					Если ТипЗнч(ПараметрыВыходные) = Тип("Структура") Тогда
						Ошибки = Ошибки;
						Если ПараметрыВыходные.Свойство("ОписаниеОшибки", Ошибки) Тогда
							Если ТипЗнч(Ошибки) = Тип("Массив")  Тогда
								СтрОшибка = СтрСоединить(Ошибки, Символы.ПС);
								Если ЗначениеЗаполнено(СтрОшибка) Тогда
									Если СтрНайти(СтрОшибка, "НОМЕР ФД ИЗМЕНИЛСЯ") Тогда
										РезультатКомандыФискализация = Истина;
									КонецЕсли;	
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если РезультатКомандыФискализация = Истина Тогда
					Прервать;
				Иначе
					Если ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Фискализация не удалась", "Ошибка при работе с принтером чеков","Повтор","","Отмена",,,,,,"к") = "Отмена" Тогда
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			фОшибка = Ложь;
		Исключение
			РезультатОплаты.Неудача = Истина;
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка ККМ", ОписаниеОшибки(), "","ОК", "");
			фОшибка = Истина;
		КонецПопытки;
	Иначе
		РезультатКомандыФискализация = Истина;
		фОшибка = Ложь;
		ПараметрыВыходные = "Не фискализирован";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПротоколРасчетов.ОтветФН) Тогда
		ЗарегистрироватьСобытие("Фискализация.Изменение ответа ФН", УровеньЖурналаРегистрации.Предупреждение, , Заказ.Ссылка, ПротоколРасчетов.ОтветФН);
	КонецЕсли;
	ПротоколРасчетов.ОтветФН = ПротоколРасчетов.ОтветФН + ЗначениеВСтрокуВнутр(ПараметрыВыходные);
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	
	Если фОшибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РезультатКомандыФискализация Тогда
		Если Не СтрокаБезнал = Неопределено Тогда
			СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;	
		КонецЕсли; 
		
		Если Не СтрокаНал = Неопределено Тогда
			СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
		КонецЕсли; 
		
		ПротоколРасчетов.Фискализирован = Истина;
		ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = Ложь;
		ПротоколРасчетов.ИтогСуммаФакт = СуммаРеализации();
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		
		Если Не Заказ.НомерЧека Тогда
			Если ТипЗнч(ПараметрыВыходные) = Тип("Структура") Тогда
				ПараметрыВыходные.Свойство("НомерЧека", Заказ.НомерЧека);
				ПараметрыВыходные.Свойство("НомерСмены", Заказ.НомерСмены);
				ПараметрыВыходные.Свойство("НомерЧека", ПротоколРасчетов.НомерЧека);
				ПараметрыВыходные.Свойство("НомерСмены", ПротоколРасчетов.НомерСмены);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) Тогда
			РезультатОплаты.Неудача = Истина;
		ИначеЕсли ПротоколРасчетов.Протокол.Итог("СуммаФакт") Тогда
			РезультатОплаты.Неудача = Истина;
		Иначе
			РезультатОплаты.Отмена = Истина;
		КонецЕсли;
		
		ПоказатьОшибкуККМ(ПараметрыВыходные);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

// TODO: объединить функции Фискализация() И Фискализация_КП() 
Функция Фискализация_КП() Экспорт
		
	Если ПротоколРасчетов.Фискализирован Тогда
		Возврат Истина;
	КонецЕсли;

	Если СтрокаБезнал = Неопределено Тогда
		СуммаБезнал = 0;
	Иначе
		СуммаБезнал = СтрокаБезнал.Сумма;
	КонецЕсли;
	
	Если СтрокаНал = Неопределено Тогда
		СуммаНал = 0;
	Иначе
		СуммаНал = СтрокаНал.Сумма;
	КонецЕсли;
		
	//{ Автономная
	Если КассаАвтономная() Тогда
		РезультатОплаты.Успех = Истина;

		Если СуммаБезнал Тогда
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты через ПС", "Операция оплаты прошла?","ДА","","НЕТ") = "ДА" Тогда
				СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
				Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты", "Чек пробит?","ДА","","НЕТ") = "ДА" Тогда
					Если Не СтрокаНал = Неопределено Тогда
						СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
					КонецЕсли;
					ПротоколРасчетов.Фискализирован = 1;
					ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = 0;
					РезультатОплаты.Успех = Истина;
				Иначе
					РезультатОплаты.Неудача = Истина;
					РезультатОплаты.Успех = Ложь;
				КонецЕсли;

			Иначе
				СтрокаБезнал.СуммаФакт = 0;
				РезультатОплаты.Отмена =Истина;
			КонецЕсли;
			
							
		ИначеЕсли СуммаНал Тогда
		
			СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
			ПротоколРасчетов.Фискализирован = 1;
			
		КонецЕсли;	
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()"); // Касса автономная
		Если ПротоколРасчетов.Фискализирован Тогда
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать(РежимЗаписиДокумента.Проведение)",,,Заказ.Ссылка);
		КонецЕсли;
		
		Возврат РезультатОплаты.Успех;
	КонецЕсли;
	//} Автономная
	
	Если СуммаБезнал Тогда
		ЗарегистрироватьСобытие("Оплата.Оплата картой.До вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
		Если Не ОплатаКартой() Тогда
			ЗарегистрироватьСобытие("Оплата.Оплата картой.После вызова.Ошибка",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Оплата картой не удалась", "Ошибка при работе с платежным терминалом","","ОК","");
			Возврат Ложь;
		КонецЕсли;
		ЗарегистрироватьСобытие("Оплата.Оплата картой.После вызова",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка);
	КонецЕсли;

	Товары = Заказ.Товары;
	СтрокиЧека = Новый Массив;
	СуммаПоСтрокам = 0;
	Для Каждого Т Из Товары Цикл
		Если Не ЗначениеЗаполнено(Т.Товар) Тогда
			Продолжить;
		КонецЕсли;
				
		//Если Не (Т.Количество И Т.СуммаРеализации) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если Не (Т.Количество) Тогда
			Продолжить;
		КонецЕсли;

		Т.ДокументОплаты = ПротоколРасчетов.Ссылка;
		СтрокиЧека.Добавить(Новый Структура);
		СтрокаЧека = СтрокиЧека.Получить(СтрокиЧека.Количество()-1);
		
		СтрокаЧека.Вставить("ФискальнаяСтрока", "");
		СтрокаЧека.Вставить("Наименование", Т.Товар.Наименование);
		СтрокаЧека.Вставить("Количество",?(Т.Количество,Т.Количество,1));
		Цена = Т.ЦенаРеализации;
		СтрокаЧека.Вставить("Цена", Цена);
		СтрокаЧека.Вставить("Сумма",
		СтрокаЧека.Цена*СтрокаЧека.Количество);
		СтрокаЧека.Вставить("НомерСекции", Т.Товар.Категория.НомерОтдела);
		
		СтрокаЧека.Вставить("СтавкаНДС", ЗначениеНДС(Т.Товар.Категория.СтавкаНДС));
		Попытка
			СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*СтрокаЧека.СтавкаНДС/100);	
		Исключение
			СтрокаЧека.Вставить("НДС", 0);
		КонецПопытки;
		СуммаПоСтрокам = СуммаПоСтрокам + СтрокаЧека.Сумма;
		
		СпецификиСтроки = Заказ.Специфики.НайтиСтроки(Новый Структура("НомерСтрокиТовара", Т.НомерСтроки));
		Для Каждого СтрокаСпецифика Из СпецификиСтроки Цикл
			Если Не СтрокаСпецифика.ЦенаРеализации Тогда
				Продолжить;
			КонецЕсли;

			СтрокиЧека.Добавить(Новый Структура);
			СтрокаЧека = СтрокиЧека.Получить(СтрокиЧека.Количество()-1);
			
			СтрокаЧека.Вставить("ФискальнаяСтрока", "");
			СтрокаЧека.Вставить("Наименование", СтрокаСпецифика.Специфика.Наименование);
			СтрокаЧека.Вставить("Количество",?(Т.Количество,Т.Количество,1));
			Цена = СтрокаСпецифика.ЦенаРеализации;
			СтрокаЧека.Вставить("Цена", Цена);
			СтрокаЧека.Вставить("Сумма",
			СтрокаЧека.Цена * СтрокаЧека.Количество);
			СтрокаЧека.Вставить("НомерСекции", Т.Товар.Категория.НомерОтдела);
			
			СтрокаЧека.Вставить("СтавкаНДС", ЗначениеНДС(Т.Товар.Категория.СтавкаНДС));
			Попытка
				СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*СтрокаЧека.СтавкаНДС/100);	
			Исключение
				СтрокаЧека.Вставить("НДС", 0);
			КонецПопытки;
			СуммаПоСтрокам = СуммаПоСтрокам + СтрокаЧека.Сумма;
			
		КонецЦикла;
	КонецЦикла;
	
	СтрокиОплат = Новый Массив;
	
	Если СуммаНал Тогда
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Нал");
		СтрокаОплат.Вставить("Сумма", СуммаНал);
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;	
	Если СуммаБезнал Тогда
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Безнал");
		СтрокаОплат.Вставить("Сумма", СуммаБезнал);
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;
	
	Если СуммаПоСтрокам <> СуммаРеализации() Тогда
		
		Текст1 = "Ошибка подготовки чека" ;
		Текст2 = "Сумма по строкам чека не равна сумме всех оплат";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", Текст1, Текст2, "","ОК","");
		ЗарегистрироватьСобытие("Оплата.Ошибка подготовки чека",УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, "Сумма по строкам = " + СуммаПоСтрокам + "; СуммаЗаказа = " + (СуммаБезнал + СуммаНал));
		РезультатОплаты.Вставить("Неудача", Истина);
		Возврат Ложь;
		
	КонецЕсли;
	
		
	Параметры = Новый Структура;
	Параметры.Вставить("Кассир", Строка(глПользователь));
	Параметры.Вставить("СтрокиЧека", СтрокиЧека);
	Параметры.Вставить("СтрокиОплат", СтрокиОплат);
	//Параметры.Вставить("СуммаСкидкиНаЧек",0.99);
	Параметры.Вставить("ТипЧека", Ложь);
	Если ЗначениеЗаполнено(Email) Тогда
		Параметры.Вставить("EmailКлиента", Email);
	КонецЕсли;
	Если ЗначениеЗаполнено(НомерТелефона) Тогда
		R = ирКэш.Получить().RegExp;
		R.Global = 1;
		R.Pattern = "\D";
		НомерТелефона=R.Replace(НомерТелефона,"");
		Параметры.Вставить("ТелефонКлиента", НомерТелефона);
	КонецЕсли;

	ПараметрыВыходные = ПараметрыВыходные;
	Если ПараметрыВыходные = Неопределено Тогда
		ПараметрыВыходные = Новый Структура;
	КонецЕсли;
	
	Если СтрокиЧека.Количество() Тогда
		
		ЗарегистрироватьСобытие("Оплата.Фискализация.Входные параметры",УровеньЖурналаРегистрации.Информация,,Заказ, ЗначениеВСтрокуВнутр(Параметры));
		Попытка
			РезультатКомандыФискализация = Обработка_ККМ.ВыполнитьКоманду("ФискализацияЧека",Параметры,ПараметрыВыходные);
			ПротоколРасчетов.Фискализирован = РезультатКомандыФискализация;
			фОшибка = Не РезультатКомандыФискализация;
		Исключение
			ОписаниеОшибки = Новый Массив;
			ОписаниеОшибки.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ПараметрыВыходные.Вставить("ОписаниеОшибки", ОписаниеОшибки);
			Р = Новый Структура("Ошибка, Описание, Подробно", Истина, ОписаниеОшибки[0], ОписаниеОшибки[0]);
			РезультатКомандыФискализация = Ложь;
			фОшибка = Истина;
		КонецПопытки;
	Иначе
		ПараметрыВыходные = "Не фискализирован";
		Возврат Истина;
	КонецЕсли;
		
	Если фОшибка Тогда
		Если ПротоколРасчетов.Протокол.Итог("СуммаФакт") Тогда
			РезультатОплаты.Неудача = Истина;
		Иначе
			РезультатОплаты.Отмена = Истина;
		КонецЕсли;
		ПоказатьОшибкуККМ(ПараметрыВыходные);
		Возврат Ложь;
	Иначе
		ПротоколРасчетов.ОтветФН = ПротоколРасчетов.ОтветФН + ЗначениеВСтрокуВнутр(ПараметрыВыходные);
		ПротоколРасчетов.Протокол.ЗагрузитьКолонку(ПротоколРасчетов.Протокол.ВыгрузитьКолонку("Сумма"), "СуммаФакт");
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()"); // Касса автономная
		Если ПротоколРасчетов.Фискализирован Тогда
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать(РежимЗаписиДокумента.Проведение)",,,Заказ.Ссылка);
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
КонецФункции

Функция ФискализацияВозврата() Экспорт
	
	Если ПротоколРасчетов.Фискализирован Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрокаБезнал = Неопределено Тогда
		СуммаБезнал = 0;
	Иначе
		СуммаБезнал = СтрокаБезнал.Сумма;
	КонецЕсли;
	
	Если СтрокаНал = Неопределено Тогда
		СуммаНал = 0;
	Иначе
		СуммаНал = СтрокаНал.Сумма;
	КонецЕсли;
	
	
	
	Если КассаАвтономная() Тогда
		
		Если СуммаБезнал Тогда
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты через ПС", "Операция оплаты прошла?","ДА","","НЕТ") = "ДА" Тогда
				СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
			КонецЕсли;
			
			Если ИнтерфейсРМ.ВопросПредупреждение("Вопрос", "Подтверждение оплаты", "Чек пробит?","ДА","","НЕТ") = "ДА" Тогда
				Если Не СтрокаНал = Неопределено Тогда
					СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
				КонецЕсли;
				ПротоколРасчетов.Фискализирован = 1;
			КонецЕсли;
				
		Иначе
			СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
			ПротоколРасчетов.Фискализирован = 1;
		КонецЕсли;	
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Если ПротоколРасчетов.Фискализирован Тогда
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать(РежимЗаписиДокумента.Проведение)",,,докВозврат.Ссылка);
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
		
	Если СуммаБезнал Тогда
		Если Не ВозвратНаКарту() Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Возврат на карту не удался",
			"Ошибка при работе с платежным терминалом","","Ок","");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиЧека = Новый Массив;
	Для Каждого Т Из Товары Цикл
		Если Не ЗначениеЗаполнено(Т.Товар) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Т.КоличествоУдалено И Т.Сумма * Т.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;


		СтрокиЧека.Добавить(Новый Структура);
		СтрокаЧека = СтрокиЧека.Получить(СтрокиЧека.Количество()-1);
		
		СтрокаЧека.Вставить("ФискальнаяСтрока", "");
		СтрокаЧека.Вставить("Наименование", Т.Товар.Наименование);
		СтрокаЧека.Вставить("Количество",Т.Количество);
		СтрокаЧека.Вставить("Цена", Т.Цена);
		СтрокаЧека.Вставить("Сумма", Т.Сумма);
		СтрокаЧека.Вставить("НомерСекции", Т.Товар.Категория.НомерОтдела);
		
		СтрокаЧека.Вставить("СтавкаНДС", ЗначениеНДС(Т.Товар.Категория.СтавкаНДС));
		СтавкаНДСчислом = ЗначениеНДС(Т.Товар.Категория.СтавкаНДС,Истина);
		СтрокаЧека.Вставить("НДС", СтрокаЧека.Сумма*СтавкаНДСчислом/100);
	КонецЦикла;
	
	СтрокиОплат = Новый Массив;
	
	Если СуммаНал Тогда
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Нал");
		СтрокаОплат.Вставить("Сумма", СуммаНал);
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;	
	Если СуммаБезнал Тогда
		СтрокаОплат = Новый Структура;
		СтрокаОплат.Вставить("ТипОплаты", "Безнал");
		СтрокаОплат.Вставить("Сумма", СуммаБезнал);
		СтрокиОплат.Добавить(СтрокаОплат);
	КонецЕсли;
		
	Параметры = Новый Структура;
	Параметры.Вставить("Кассир", Строка(глПользователь));
	Параметры.Вставить("СтрокиЧека", СтрокиЧека);
	Параметры.Вставить("СтрокиОплат", СтрокиОплат);
	Параметры.Вставить("ТипЧека", Истина);
	Параметры.Вставить("СуммаСкидкиНаЧек", 0);
	ПараметрыВыходные = ПараметрыВыходные;
	Попытка
		Пока Истина Цикл
				РезультатКомандыФискализация = Обработка_ККМ.ВыполнитьКоманду("ФискализацияЧека",Параметры,ПараметрыВыходные);
				ЗарегистрироватьСобытие("Оплата.Фискализация.Выходные параметры",УровеньЖурналаРегистрации.Информация,,Заказ.Ссылка,ЗначениеВСтрокуВнутр(ПараметрыВыходные));
				Если РезультатКомандыФискализация = Истина Тогда
					Прервать;
				Иначе
					Если ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Фискализация не удалась", "Ошибка при работе с принтером чеков","Повтор","","Отмена",,,,,,"м") = "Отмена" Тогда
						Прервать;
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		фОшибка = Ложь;
	Исключение
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка ККМ", ОписаниеОшибки(), "","ОК", "");
		фОшибка = Истина;
	КонецПопытки;
	ПротоколРасчетов.ОтветФН = ПротоколРасчетов.ОтветФН + ЗначениеВСтрокуВнутр(ПараметрыВыходные);
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	Если ПротоколРасчетов.Протокол.Количество() Тогда
		РезультатОплаты.Вставить("ВариантОплаты", ПротоколРасчетов.Протокол[0].ВариантОплаты);
	КонецЕсли;
	
	Если фОшибка Тогда
		Возврат Ложь;
	КонецЕсли;
	    
	Если РезультатКомандыФискализация Тогда
		Если Не СтрокаБезнал = Неопределено Тогда
			СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;	
		КонецЕсли; 
		
		Если Не СтрокаНал = Неопределено Тогда
			СтрокаНал.СуммаФакт = СтрокаНал.Сумма;
		КонецЕсли; 
		
		ПротоколРасчетов.Фискализирован = Истина;
		ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = 0;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Возврат Истина;
	Иначе
		
		СтрОшибка = ПараметрыВыходные.ОписаниеОшибки[0];
		СтрОшибка2 = "";
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка оплаты",СтрОшибка, СтрОшибка2,"","ОК","");
		Возврат Ложь;
		
	КонецЕсли;
	



КонецФункции

Процедура ОткрытьЧек() Экспорт
	Если Найти(глПараметрыРМ.ККМ, "автономная") Тогда
		Попытка
			Заказ.НомерЧека = 999;
			Заказ.НомерСмены = 999;	
		Исключение
			докВозврат.НомерЧека = 999;
			докВозврат.НомерСмены = 999;
		КонецПопытки;
		
		Попытка
			ПротоколРасчетов.НомерЧека = 999;
			ПротоколРасчетов.НомерСмены = 999;
		Исключение
		КонецПопытки;
		Возврат;
	КонецЕсли;

	ККМ = глПараметрыРМ.ККМ.ПолучитьОбъект();
	Обработка_ККМ = Обработка_ККМ;
	ИнициализацияТО(ККМ, Обработка_ККМ, глПараметрыРМ);
	Параметры = Новый Структура;
	Параметры.Вставить("Кассир", Строка(глПользователь));
	Параметры.Вставить("ТипЧека", Ложь);
	ПараметрыВыходные = Новый Массив;
	Попытка
		РезультатКомандыФискализация = Обработка_ККМ.ВыполнитьКоманду("ПолучитьТекущееСостояние",Параметры,ПараметрыВыходные);
		ПоказатьОшибкуККМ(ПараметрыВыходные);
	Исключение
		//Сообщить(ОписаниеОшибки());		
	КонецПопытки;
	
	Если ПараметрыВыходные.Количество() > 2 Тогда
		ЭтоЗаказ = Ложь;
		Попытка
			ЭтоНовый = Заказ.ЭтоНовый();
			ЭтоЗаказ = Истина;
		Исключение
		КонецПопытки;
		Если ЭтоЗаказ Тогда
			Попытка
				Фискализирован = ПротоколРасчетов.Фискализирован
			Исключение
				Фискализирован = Ложь;
			КонецПопытки;
			
			Если Не Фискализирован Тогда
				Заказ.НомерЧека = ПараметрыВыходные.НомерЧека;
				Заказ.НомерСмены = ПараметрыВыходные.НомерСмены;
				Попытка
					ПротоколРасчетов.НомерЧека = ПараметрыВыходные.НомерЧека;
					ПротоколРасчетов.НомерСмены = ПараметрыВыходные.НомерСмены;	
				Исключение
				КонецПопытки;

			КонецЕсли;
			
		Иначе
			докВозврат.НомерЧека = ПараметрыВыходные.НомерЧека;
			докВозврат.НомерСмены = ПараметрыВыходные.НомерСмены;
		КонецЕсли;
		
		глПараметрыРМ.Вставить("НомерТекущегоЧека", ПараметрыВыходные.НомерЧека);
		глПараметрыРМ.Вставить("НомерСмены",  ПараметрыВыходные.НомерСмены);
	КонецЕсли;
	
		
КонецПроцедуры

Процедура ЗаполнитьПротокол() Экспорт
	УдяляемыеСтрокиПротокола = Новый Массив;
	Для Каждого Т Из ПротоколРасчетов.Протокол Цикл
		Если Не Т.СуммаФакт Тогда
			УдяляемыеСтрокиПротокола.Добавить(Т);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Т Из УдяляемыеСтрокиПротокола Цикл
		ПротоколРасчетов.Протокол.Удалить(Т);
	КонецЦикла;
	Товары = Заказ.Товары;
	СтрокаБезнал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Карта, "ВариантОплаты");
	Если СтрокаБезнал = Неопределено Тогда
		СуммаБезнал = Макс(Коплате - Получено, 0);
	Иначе
		СуммаБезнал = СтрокаБезнал.Сумма;	
	КонецЕсли; 
	
	Если СуммаРеализации() > СуммаБезнал Тогда
		СтрокаНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Наличные, "ВариантОплаты");
		Если СтрокаНал = Неопределено Тогда
			СтрокаНал = ПротоколРасчетов.Протокол.Добавить();
			СтрокаНал.Действие = Перечисления.ДействияПриОплате.Взнос;
			СтрокаНал.ВариантОплаты = Справочники.ВариантыОплаты.Наличные;
		КонецЕсли;
		СтрокаНал.Сумма = СуммаРеализации() - СуммаБезнал;
	Иначе
		
		Если СтрокаНал <> Неопределено Тогда
			СтрокаНал.Сумма = 0;
			СтрокаНал.СуммаФакт = 0;
		КонецЕсли;

	КонецЕсли;		
	
	Если СуммаБезнал Тогда
		
		Если СтрокаБезнал = Неопределено Тогда
			
			СтрокаБезнал = ПротоколРасчетов.Протокол.Добавить();
			СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
			
			СтрокаБезнал.ВариантОплаты = ?(ВыбВариант=Неопределено, Справочники.ВариантыОплаты.Карта, ВыбВариант);
			
		КонецЕсли;
		СтрокаБезнал.Сумма = СуммаБезнал;
	Иначе
		Если СтрокаБезнал <> Неопределено Тогда
			СтрокаБезнал.Сумма = 0;
			СтрокаБезнал.СуммаФакт = 0;
		КонецЕсли;
	КонецЕсли;
	ПротоколРасчетов.НомерЧека = Заказ.НомерЧека;
	ПротоколРасчетов.НомерСмены = Заказ.НомерСмены;
КонецПроцедуры

Процедура ВыводНаДПитого(Сумма) Экспорт
	ИнтерфейсРМ.ВыводНаДП("ВывестиТекст", "ИТОГО: "+Символы.ПС + формат(Сумма,"ЧДЦ=2") + " руб.");
КонецПроцедуры

Процедура ЗаполнитьПротоколПоВозврату(Картой) Экспорт
	Если ПротоколРасчетов.Фискализирован Тогда
		Возврат;
	КонецЕсли;
	УдяляемыеСтрокиПротокола = Новый Массив;
	Для Каждого Т Из ПротоколРасчетов.Протокол Цикл
		Если Не Т.СуммаФакт Тогда
			УдяляемыеСтрокиПротокола.Добавить(Т);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Т Из УдяляемыеСтрокиПротокола Цикл
		ПротоколРасчетов.Протокол.Удалить(Т);
	КонецЦикла;

	СтрокаБезнал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Карта, "ВариантОплаты");
	СтрокаНал = ПротоколРасчетов.Протокол.Найти(Справочники.ВариантыОплаты.Наличные, "ВариантОплаты");
	СуммаБезнал = ?(Картой, Коплате, 0);
	СуммаНал	= ?(Картой, 0, Коплате);
	
	Если СтрокаНал <> Неопределено Тогда
		СтрокаНал.Сумма = СуммаНал;
		СтрокаНал.СуммаФакт = 0;
	КонецЕсли;

	Если СтрокаБезнал <> Неопределено Тогда
		СтрокаБезнал.Сумма = 0;
		СтрокаБезнал.СуммаФакт = 0;
	КонецЕсли;

	Если СуммаНал Тогда
		Если СтрокаНал = Неопределено Тогда
			СтрокаНал = ПротоколРасчетов.Протокол.Добавить();
			СтрокаНал.Действие = Перечисления.ДействияПриОплате.Взнос;
			СтрокаНал.ВариантОплаты = Справочники.ВариантыОплаты.Наличные;
		КонецЕсли;
		СтрокаНал.Сумма = СуммаНал;
	КонецЕсли;		
	
	Если СуммаБезнал Тогда
		
		Если СтрокаБезнал = Неопределено Тогда
			
			СтрокаБезнал = ПротоколРасчетов.Протокол.Добавить();
			СтрокаБезнал.Действие = Перечисления.ДействияПриОплате.Взнос;
			СтрокаБезнал.ВариантОплаты = Справочники.ВариантыОплаты.Карта;
			
		КонецЕсли;
		СтрокаБезнал.Сумма = СуммаБезнал;
	КонецЕсли;
КонецПроцедуры

Процедура ОтменаТранзакцииПлатежнойСистемы() Экспорт
	ЗарегистрироватьСобытие("Оплата.ОтменаТранзакцииПлатежнойСистемы.ВходВпроцедуру", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
	ЗаполнитьПротокол();
	
	Если КассаАвтономная() Тогда
		ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена = Истина;
		ПротоколРасчетов.Протокол.Очистить();
		РезультатОплаты.СделанаОтменаОплатыКартой = Истина;  
		РезультатОплаты.Неудача = Ложь;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Возврат;
	КонецЕсли;
	ОтменаВегаис();
	ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
	Обработка_ПС = Обработка_ПС;
	РезультатИнит = ИнициализацияТО(ОбъектТерминал,Обработка_ПС,глПараметрыРМ);		
	ВыходныеПараметры = Новый Массив;
	
	фОшибка = Ложь;
	Попытка
		СуммаБезнал = Макс(СтрокаБезнал.СуммаФакт, 0);
		Обработка_ПС.ВыполнитьКоманду("ОтменитьПлатежПоПлатежнойКарте",Новый Структура("Сумма, СсылочныйНомер",СуммаБезнал, ПротоколРасчетов.идТранзакцииПлатежнойСистемы), ВыходныеПараметры);
	Исключение
		ЗарегистрироватьСобытие("Платежная система", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Заказ, Заказ.Ссылка, "Не удалось отменить транзакцию " + ПротоколРасчетов.идТранзакцииПлатежнойСистемы + " " + ОписаниеОшибки());
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
		фОшибка = Истина;
	КонецПопытки;
	РезультатОплаты.Неудача = Истина;
	Если Не фОшибка Тогда
		Если ВыходныеПараметры.Количество() = 3 Тогда
			Строки = ВыходныеПараметры[2].Строки;
			Если ТипЗнч(Строки) = Тип("Массив") Тогда
				ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена = Истина;
				Попытка
					Строки = ВыходныеПараметры[2].Строки;
				Исключение
					Если ТипЗнч(Строки) <> Тип("Массив") Тогда
						Строки = Массив("Ошибка при получении слип чека от терминала");
					КонецЕсли;
				КонецПопытки;
				ПротоколРасчетов.Слип = ПротоколРасчетов.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
				ПротоколРасчетов.Протокол.Очистить();
				РезультатОплаты.СделанаОтменаОплатыКартой = Истина;
				РезультатОплаты.Неудача = Ложь;
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");                       				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОтменаТранзакцииПлатежнойСистемыПоВозврату(Картой) Экспорт
	ЗарегистрироватьСобытие("Оплата.ОтменаТранзакцииПлатежнойСистемыПоВозврату.ВходВпроцедуру", УровеньЖурналаРегистрации.Информация, , докВозврат.Ссылка);
	ЗаполнитьПротоколПоВозврату(Картой);
	
	Если КассаАвтономная() Тогда
		ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена = Истина;
		ПротоколРасчетов.Протокол.Очистить();
		РезультатОплаты.СделанаОтменаОплатыКартой = Истина;  
		РезультатОплаты.Неудача = Ложь;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Возврат;
	КонецЕсли;
	ОтменаВегаис();
	ОбъектТерминал = глПараметрыРМ.ПлатежнаяСистема.ПолучитьОбъект();
	Обработка_ПС = Обработка_ПС;
	РезультатИнит = ИнициализацияТО(ОбъектТерминал,Обработка_ПС,глПараметрыРМ);		
	ВыходныеПараметры = Новый Массив;
	
	фОшибка = Ложь;
	Попытка
		СуммаБезнал = Макс(СтрокаБезнал.СуммаФакт, 0);
		Обработка_ПС.ВыполнитьКоманду("ОтменитьПлатежПоПлатежнойКарте",Новый Структура("Сумма, СсылочныйНомер",СуммаБезнал, ПротоколРасчетов.идТранзакцииПлатежнойСистемы), ВыходныеПараметры);
	Исключение
		ЗарегистрироватьСобытие("Платежная система", УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.Возврат, докВозврат.Ссылка, "Не удалось отменить транзакцию " + ПротоколРасчетов.идТранзакцииПлатежнойСистемы + " " + ОписаниеОшибки());
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка", "Ошибка платежной системы", ОписаниеОшибки(), "","ОК", "");
		фОшибка = Истина;
	КонецПопытки;
	РезультатОплаты.Неудача = Истина;
	Если Не фОшибка Тогда
		Если ВыходныеПараметры.Количество() = 3 Тогда
			Строки = ВыходныеПараметры[2].Строки;
			Если ТипЗнч(Строки) = Тип("Массив") Тогда
				ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена = Истина;
				Попытка
					Строки = ВыходныеПараметры[2].Строки;
				Исключение
					Если ТипЗнч(Строки) <> Тип("Массив") Тогда
						Строки = Массив("Ошибка при получении слип чека от терминала");
					КонецЕсли;
				КонецПопытки;
				ПротоколРасчетов.Слип = ПротоколРасчетов.Слип + ПолучитьСтрокуИзМассива(Строки, Символы.ПС);
				ПротоколРасчетов.Протокол.Очистить();
				РезультатОплаты.СделанаОтменаОплатыКартой = Истина;
				РезультатОплаты.Неудача = Ложь;
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");                       				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОткрытьДенежныйЯщик() Экспорт
	Если КассаАвтономная() Тогда
		Возврат;
	КонецЕсли;
	Обработка_ККМ.ВыполнитьКоманду("ОткрытьДенежныйЯщик",Новый Структура, Новый Структура);
КонецПроцедуры

Функция Оплата() Экспорт
	ЗарегистрироватьСобытие("Оплата.Вход в процедуру оплаты", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
	
	Если фИдетОплата Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Идет оплата","Процесс оплаты уже запущен","","ОК","",,6);
		ЗарегистрироватьСобытие("Оплата.ПовторныйВходВОплату",УровеньЖурналаРегистрации.Ошибка,,Заказ.Ссылка);
		Возврат Ложь;
	КонецЕсли;
	
	Товары = Заказ.Товары;
	Если Не Товары.Итог("Количество") Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Заказ сторнирован","","","ОК","",,6);
		ЗарегистрироватьСобытие("Оплата.Заказ сторнирован",УровеньЖурналаРегистрации.Ошибка,,Заказ.Ссылка);
		Возврат Ложь;
	КонецЕсли;
	
	фИдетОплата = Истина;
	Если Получено Тогда
		ОткрытьДенежныйЯщик();
	КонецЕсли;
	РезультатКонтроля = глОбработки.ГлавнаяФорма.ВыполнитьКонтрольПоТекущемуДокументу();
	Если Не РезультатКонтроля Тогда
		РезультатОплаты.Вставить("Успех", Ложь);
		РезультатОплаты.Вставить("Отмена", Истина);
		РезультатОплаты.Вставить("Неудача", Ложь);
		фИдетОплата = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьПротокол();
	ПротоколРасчетов.Заблокировать();
	
	//{ Отправка в ЕГАИС
	Если Товары.Итог("фАлкоголь") Тогда	
		Если Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) Или ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
			
			Если Алкоголь.ЗаписатьВExcise(Заказ) Тогда
				ПротоколРасчетов.ДобавленыЗаписиВexcise = 1;
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
			Иначе
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Ошибка при записи в Excise", "Не удалось записать PDF в Excise.
				|Обратитесь в ЦТО");
				РезультатОплаты.Отмена = Истина;
				ПротоколРасчетов.Разблокировать(); 
				Возврат Ложь;
			КонецЕсли;
			
			РезультатЕГАИС = Алкоголь.ОтправитьЗаказВЕГАИС(Заказ,Ложь,ПротоколРасчетов);
			
			Если РезультатЕГАИС.Успех Тогда 
				ПротоколРасчетов.ИдентификаторЗапросаЕГАИС = РезультатЕГАИС.ИдентификаторЗапроса; 
				ПротоколРасчетов.ПодписьЕГАИС = РезультатЕГАИС.Подпись;
				ПротоколРасчетов.ОтветМодуляЕГАИС = РезультатЕГАИС.ОтветМодуляЕГАИС;
				ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = "";
				ПротоколРасчетов.ОтветМодуляЕГАИС_Отмена = "";
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
			Иначе
				ИнтерфейсРМ.ВопросПредупреждение("Ошибка",РезультатЕГАИС.ОшибкаЗаголовок,РезультатЕГАИС.ОшибкаТекст,"","ОК","",,0);
				РезультатОплаты.Отмена = Истина;
				ПротоколРасчетов.Разблокировать(); 
				Алкоголь.ЗаписатьВExcise(Заказ, Истина);
				ПротоколРасчетов.ДобавленыЗаписиВexcise = Ложь;
				ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
				фИдетОплата = Ложь;
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; //}

	Заказ.ПересчетНДС(); 
	ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ, "Объект.Записать()");
	
	Если ВыбВариант <> Неопределено Тогда
		СтрокаБезнал.СуммаФакт = СтрокаБезнал.Сумма;
		СтрокаБезнал.ВариантыОплаты = ВыбВариант;
		РезультатФискализации = Истина;	
	Иначе
		ЗарегистрироватьСобытие("Оплата.Фискализация.До вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
		РезультатФискализации = Фискализация();
		ЗарегистрироватьСобытие("Оплата.Фискализация.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, СтрШаблон("РезультатФискализации = %1",РезультатФискализации));
	КонецЕсли;

	РезультатОплаты.Успех = РезультатФискализации;
	ПротоколРасчетов.Фискализирован = РезультатФискализации;
	Если РезультатФискализации Тогда
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		ПротоколРасчетов.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
		ПротоколРасчетов.ККМ = ПротоколРасчетов.КассоваяСмена.Касса;
		ПротоколРасчетов.РабочееМесто = глРабочееМесто;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Попытка
			ПротоколРасчетов.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ЗарегистрироватьСобытие("Ошибка проведения протокола расчетов", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		Если ЗначениеЗаполнено(ПротоколРасчетов.КассоваяСмена) Тогда
			Заказ.КассоваяСмена = ПротоколРасчетов.КассоваяСмена;
			Для Каждого Т Из Заказ.Товары Цикл
			КонецЦикла;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ, "Объект.Записать()",,, Заказ.Ссылка);
		КонецЕсли;
				
		Попытка ПечатьЧекаЕГАИС() Исключение КонецПопытки;
		
		//{ Закрываем заказ, чтобы при вылете на финализации попадали в новый заказ
		ЗарегистрироватьСобытие("Оплата.Закрытие заказа перед финализацией", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
		НЗ = РегистрыСведений.ЗаказДопИнф.СоздатьНаборЗаписей();
		НЗ.Отбор.Заказ.Установить(Заказ.Ссылка);
		НЗ.Прочитать();
		Если НЗ.Количество() Тогда
			НЗ.ЗагрузитьКолонку(Массив(ПротоколРасчетов.Ссылка),"ПротоколРасчетов");
			НЗ.ЗагрузитьКолонку(Массив(Перечисления.СтатусыЗаказа.Закрыт),"Статус");
			НЗ.Записать();
		КонецЕсли;//}
				
		ЗарегистрироватьСобытие("Оплата.ФинализацияЧека.До вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
		Для Каждого Т Из Заказ.Товары Цикл
			Если Т.СтатусОплаты = -1 И Т.Фирма = глПараметрыРМ.Фирма Тогда
				Т.СтатусОплаты = 1;
				Т.ДокументОплаты = ПротоколРасчетов.Ссылка;
			КонецЕсли;
		КонецЦикла;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ, "Объект.Записать()",,, Заказ.Ссылка);
		Попытка
			ЛояльностьКлиент.ФинализацияЧека(Заказ, ПротоколРасчетов);
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(Заказ, "Объект.Записать()",,, Заказ.Ссылка);
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()",,, Заказ.Ссылка);
		Исключение
			ЗарегистрироватьСобытие("Оплата.ФинализацияЧека.Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка, , Заказ.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		ЗарегистрироватьСобытие("Оплата.ФинализацияЧека.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
		
		Если Не глПараметрыРМ.МестоРеализации = Справочники.МестаРеализации.Ресторан Тогда
			Попытка ПечатьПодвалаЛояльности() Исключение КонецПопытки;
			ЗарегистрироватьСобытие("Оплата.ПечатьПодвалаЛояльности.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
		КонецЕсли;
	Иначе // если РезультатФискализации = Ложь
		ОтменаВегаис();
	КонецЕсли;
	ПротоколРасчетов.Разблокировать();
	фИдетОплата = Ложь;
	Возврат РезультатФискализации;
КонецФункции

Функция ВозвратОплаты(Картой = Ложь) Экспорт 
	ЗарегистрироватьСобытие("Возврат оплаты.Вход в процедуру", УровеньЖурналаРегистрации.Информация, , докВозврат.Ссылка);
	Если фИдетОплата Тогда
		ИнтерфейсРМ.ВопросПредупреждение("Ошибка","Идет оплата","Процесс оплаты уже запущен","","ОК","",,6);
		ЗарегистрироватьСобытие("Оплата.ПовторныйВходВОплату",УровеньЖурналаРегистрации.Ошибка,,докВозврат.Ссылка);
		Возврат Ложь;
	КонецЕсли;
	фИдетОплата = Истина;
	
	ЗаполнитьПротоколПоВозврату(Картой);
	ПротоколРасчетов.Заблокировать();
	Если Товары.Итог("фАлкоголь") Тогда
		РезультатЕГАИС = ВозвратВегаис();	
		Если Не РезультатЕГАИС.Успех Тогда
			ИнтерфейсРМ.ВопросПредупреждение("Ошибка",РезультатЕГАИС.ОшибкаЗаголовок,РезультатЕГАИС.ОшибкаТекст,"","ОК","",,0);
			РезультатОплаты.Отмена = Истина;
			ПротоколРасчетов.Разблокировать();
			фИдетОплата = Ложь;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	РезультатФискализации = ФискализацияВозврата();	
	РезультатОплаты.Успех = РезультатФискализации;
	Если РезультатФискализации Тогда
		ПротоколРасчетов.ИтогСуммаФакт = ПротоколРасчетов.Протокол.Итог("СуммаФакт");
		ПротоколРасчетов.КассоваяСмена = Обработки.ОткрытиЗакрытиеСменыКасса.ПолучитьСменуКассы();
		ПротоколРасчетов.ККМ = ПротоколРасчетов.КассоваяСмена.Касса;
		ПротоколРасчетов.РабочееМесто = глРабочееМесто;
						
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Попытка
			ПротоколРасчетов.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ЗарегистрироватьСобытие("Ошибка проведения протокола расчетов", УровеньЖурналаРегистрации.Ошибка, , докВозврат.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Попытка
			ПечатьЧекаЕГАИС();	
		Исключение
		КонецПопытки;
		
		
		Попытка
			Если Товары.Итог("фАлкоголь") Тогда
				Если Алкоголь.ЗаписатьВExcise(докВозврат, Истина) Тогда
					ПротоколРасчетов.ДобавленыЗаписиВexcise = 1;
					ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
				Иначе
					ЗарегистрироватьСобытие("Excise", УровеньЖурналаРегистрации.Ошибка, 	, докВозврат.Ссылка, "Не удалось записать в Excise");
				КонецЕсли;
			КонецЕсли;
		Исключение
			ЗарегистрироватьСобытие("Excise", УровеньЖурналаРегистрации.Ошибка, , докВозврат.Ссылка, "Не удалось записать в Excise");
		КонецПопытки;
		
	Иначе // РезультатФискализации = Ложь
		
		Если ЗначениеЗаполнено(ПротоколРасчетов.идТранзакцииПлатежнойСистемы) И Не ПротоколРасчетов.ТранзакцияПлатежнойСистемыОтменена Тогда
			ОтменаТранзакцииПлатежнойСистемыПоВозврату(Картой);
			РезультатФискализации = Ложь;
			РезультатОплаты.Отмена = Истина;
		Иначе
			ОтменаВозвратаВегаис();	
		КонецЕсли;
		
	КонецЕсли;
	Попытка
		ПротоколРасчетов.Разблокировать();
	Исключение
		ЗарегистрироватьСобытие("Ошибка выполнения", УровеньЖурналаРегистрации.Ошибка,, докВозврат.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	фИдетОплата = Ложь;
	Возврат РезультатФискализации;
КонецФункции

Процедура ОтменаВегаис()
	ОтменаЧека = Истина;
	Если ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) И Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
		ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = Истина;
		Заказ.Заблокирован = 1;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		ЗарегистрироватьСобытие("Оплата.ОтменаВегаис.До вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "ПротоколРасчетов.ИдентификаторЗапросаЕГАИС = " + ПротоколРасчетов.ИдентификаторЗапросаЕГАИС + "
		|ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = " + ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена);
		РезультатЕГАИС = Алкоголь.ОтправитьЗаказВЕГАИС(Заказ, ОтменаЧека);		
		ЗарегистрироватьСобытие("Оплата.ОтменаВегаис.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка, "ПротоколРасчетов.ИдентификаторЗапросаЕГАИС = " + ПротоколРасчетов.ИдентификаторЗапросаЕГАИС + "
		|ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = " + РезультатЕГАИС.ИдентификаторЗапроса);
		Если РезультатЕГАИС.Успех Тогда                                     	
			ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = Ложь;
			Заказ.Заблокирован = 0;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		Иначе
			РезультатОплаты.Вставить("Неудача", Истина);
		КонецЕсли;
		ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = РезультатЕГАИС.ИдентификаторЗапроса; 
		ПротоколРасчетов.ОтветМодуляЕГАИС_Отмена = РезультатЕГАИС.ОтветМодуляЕГАИС;
		Алкоголь.ЗаписатьВExcise(Заказ, Истина);
		ПротоколРасчетов.ДобавленыЗаписиВexcise = Ложь;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	КонецЕсли;
КонецПроцедуры

Процедура ОтменаВозвратаВегаис()
	Если ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) И Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
		РезультатЕГАИС = Алкоголь.ОтправитьЗаказВЕГАИС(докВозврат);
		//РезультатЕГАИС = Новый Структура("Успех, ИдентификаторЗапроса, Подпись, ОтветМодуляЕГАИС", 1, "1","1","1");
		Если Не РезультатЕГАИС.Успех Тогда                                     	
			ПротоколРасчетов.НеУдалосьОтправитьОтменуВегаис = Истина;
			докВозврат.Заблокирован = 1;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
			РезультатОплаты.Вставить("Неудача", Истина);
		КонецЕсли;
		ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = РезультатЕГАИС.ИдентификаторЗапроса; 
		ПротоколРасчетов.ОтветМодуляЕГАИС_Отмена = РезультатЕГАИС.ОтветМодуляЕГАИС;
		ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
	КонецЕсли;

КонецПроцедуры

Функция ВозвратВегаис()
	Если Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) ИЛИ ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена) Тогда
		РезультатЕГАИС = Алкоголь.ОтправитьЗаказВЕГАИС(докВозврат, Истина);
		//РезультатЕГАИС = Новый Структура("Успех, ИдентификаторЗапроса, Подпись, ОтветМодуляЕГАИС", 1, "1","1","1");
		Если РезультатЕГАИС.Успех Тогда
			ПротоколРасчетов.ИдентификаторЗапросаЕГАИС = РезультатЕГАИС.ИдентификаторЗапроса; 
			ПротоколРасчетов.ИдентификаторЗапросаЕГАИС_Отмена = "";
			ПротоколРасчетов.ОтветМодуляЕГАИС = РезультатЕГАИС.ОтветМодуляЕГАИС;
			ПротоколРасчетов.ПодписьЕГАИС = РезультатЕГАИС.Подпись;
			ИнтерфейсРМ.ПопыткаДействияСОбъектом(ПротоколРасчетов, "Объект.Записать()");
		КонецЕсли;
		Возврат РезультатЕГАИС;
	Иначе
		РезультатЕГАИС = Новый Структура("Успех, ИдентификаторЗапроса, Подпись, ОтветМодуляЕГАИС", 1, "1","1","1");
		Возврат РезультатЕГАИС;
	КонецЕсли;
	
КонецФункции

Функция КассаАвтономная()
	КассаАвтономная = Неопределено;
	глПараметрыРМ.Свойство("КассаАвтономная", КассаАвтономная);
	Если КассаАвтономная = Неопределено Тогда
		 КассаАвтономная = Найти(НРег(глПараметрыРМ.ККМ), "автономная");
		 глПараметрыРМ.Вставить("КассаАвтономная", КассаАвтономная);
	КонецЕсли;
	Если КассаАвтономная Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

Процедура ПечатьПодвалаЛояльности()
	Если ПустаяСтрока(Заказ.ПодвалЧека) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиПодвала = РазложитьСтрокуВМассив(Заказ.ПодвалЧека, Символы.ПС);
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", СтрокиПодвала);
	Параметры.Вставить("ТипШрифта", 0);
	ПараметрыВыходные = ПараметрыВыходные;
	Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",Параметры,ПараметрыВыходные);
	ПоказатьОшибкуККМ(ПараметрыВыходные);

КонецПроцедуры

// Выводит на ККТ слип ЕГАИС: QR код, ссылку и подпись
Функция ПечатьЧекаЕГАИС() Экспорт
 
	Если Не ЗначениеЗаполнено(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЗарегистрироватьСобытие("Оплата.Печать чека ЕГАИС.До вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
	Строки = Новый Массив;
	Строки.Добавить("|ШтрихКод|" + ПротоколРасчетов.ИдентификаторЗапросаЕГАИС);
	Строки.Добавить(" ");
	Строки.Добавить(ПротоколРасчетов.ИдентификаторЗапросаЕГАИС);
	Строки.Добавить(" ");
	Строки.Добавить(ПротоколРасчетов.ПодписьЕГАИС);
	Параметры = Новый Структура;
	Параметры.Вставить("Строки", Строки);
	ПараметрыВыходные = ПараметрыВыходные;
	ЗарегистрироватьСобытие("Оплата.Печать чека ЕГАИС.После вызова", УровеньЖурналаРегистрации.Информация, , Заказ.Ссылка);
	Попытка
		Результат = Обработка_ККМ.ВыполнитьКоманду("ПечатьТекста",Параметры,ПараметрыВыходные);
		ПоказатьОшибкуККМ(ПараметрыВыходные);
	Исключение
	КонецПопытки;
	Возврат Результат;
КонецФункции
#КонецЕсли
