

#Если Клиент Тогда

Перем ПараметрыТО Экспорт;   // Параметры торгового оборудования.
Перем Результат Экспорт;     // Результат выполнения действия.
Перем DRV Экспорт;           // Объект драйвера торгового оборудования.

// Производит инициализацию торгового оборудования.
//
Процедура Инициализация() Экспорт
	
	Если НЕ ЗагрузитьДрайвер() Тогда
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Ошибка загрузки драйвера!";
		Результат.Подробно	= "Программе не удалось загрузить драйвер платежных систем...";
		Возврат;
	КонецЕсли; 
	
	ПрочитатьПараметр("CurrentDeviceNumber", 1);
	
КонецПроцедуры

// Загружает драйвер ТО.
//
// Возвращаемое значение:
//  Истина - драйвер загружен, ложь - нет.
//
Функция ЗагрузитьДрайвер()
	
	//Если глТорговоеОборудование.Свойство("PayCARD",DRV) Тогда
	//	Возврат Истина;
	//КонецЕсли; 
	//
	//Попытка 
	//	ЗагрузитьВнешнююКомпоненту("PayCARD.dll");
	//	DRV = Новый("AddIn.PayCARD");
	//Исключение
	//	Возврат Ложь;
	//КонецПопытки;
	//
	//глТорговоеОборудование.Вставить("PayCARD", DRV);
	
	Если глТорговоеОборудование.Свойство("PayCARD",DRV) Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Попытка 
		ПодключитьВнешнююКомпоненту("AddIn.SBRFCOMObject");
		DRV = Новый("AddIn.SBRFCOMExtension");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	глТорговоеОборудование.Вставить("PayCARD", DRV);
	
	
	Возврат Истина;
КонецФункции

// Выполняет чтение параметра ТО.
//
// Параметры:
//  ИмяПараметра        - имя параметра,
//  ЗначениеПоУмолчанию - значение по умолчанию для данного параметра.
//
// Возвращаемое значение:
//  Значение параметра или значение по умолчанию
//
Процедура ПрочитатьПараметр(ИмяПараметра,ЗначениеПоУмолчанию)
	
	Если НЕ ПараметрыТО.Свойство(ИмяПараметра) Тогда
		ПараметрыТО.Вставить(ИмяПараметра,ЗначениеПоУмолчанию);
	КонецЕсли; 
	
	ЭтотОбъект[ИмяПараметра] = ПараметрыТО[ИмяПараметра];
	
КонецПроцедуры

#Область ТочкаВхода

Функция ВыполнитьКоманду(Команда, ВходныеПараметры, ВыходныеПараметры) Экспорт
	
	ответКоманды = Истина;
	
	ВыходныеПараметры = Новый Массив();
	
	попытка
		глОжидание.Начало("Пожалуйста, подождите...", "Работа с банковским терминалом");
		Если Команда = "ОплатитьПлатежнойКартой" Тогда
			ответКоманды = ОплатитьПлатежнойКартой(ВходныеПараметры,ВыходныеПараметры);
		ИначеЕсли Команда = "ВернутьПлатежПоПлатежнойКарте" Тогда
			ответКоманды = ВернутьПлатежПоПлатежнойКарте(ВходныеПараметры,ВыходныеПараметры);
		ИначеЕсли Команда = "ОтменитьПлатежПоПлатежнойКарте" Тогда
			ответКоманды = ОтменитьПлатежПоПлатежнойКарте(ВходныеПараметры,ВыходныеПараметры);
		ИначеЕсли Команда = "АварийнаяОтменаОперации" Тогда
			ответКоманды = АварийнаяОтменаОперации(ВходныеПараметры,ВыходныеПараметры);
		ИначеЕсли Команда = "ИтогиДняПоКартам" Тогда
			ответКоманды = ИтогиДняПоКартам(ВыходныеПараметры);
		ИначеЕсли Команда = "ПолучитьСтрокиСлипЧека" Тогда
			ответКоманды = ПолучитьСтрокиСлипЧека(ВыходныеПараметры);
		ИначеЕсли Команда = "ОтчетПоСбербанку" Тогда
			ответКоманды = ОтчетПоСбербанку(ВыходныеПараметры);
		Иначе
			глОжидание.Конец();
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("Неизвестная команда");
			Возврат Ложь;
		КонецЕсли;
		глОжидание.Конец();
	Исключение
		глОжидание.Конец();
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Неизвестная ошибка");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат ответКоманды;
	
КонецФункции

#КонецОбласти

#Область ФункцииРаботыСЭквайрингом

Функция ОплатитьПлатежнойКартой(ВходныеПараметры,ВыходныеПараметры)
		
	Если не ВходныеПараметры.Свойство("Сумма") тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка входных параметров: нет суммы чека");
		Возврат Ложь;
	Иначе
		Сумма = ВходныеПараметры.Сумма;
	КонецЕсли;
	
	Отдел = Неопределено;
	Если ВходныеПараметры.Свойство("Отдел") Тогда 
		Отдел = ВыходныеПараметры.Отдел;
	КонецЕсли;
	
	СсылочныйНомер = Неопределено;
	КодАвторизации = Неопределено;
	КодХеш = Неопределено;
	КартаСбербанка = Неопределено;
	НазваниеКарты = Неопределено;
	НомерКарты = "****************";
	
	DRV.ТипКарты = 0;
	
	Если Отдел <> Неопределено Тогда // оплата по отделам
		Попытка
			Ответ = DRV.ОплатитьПлатежнойКартойНомОтдела(Сумма * 100, Отдел, СсылочныйНомер, КодАвторизации, КодХеш, КартаСбербанка, НазваниеКарты, НомерКарты);
		Исключение
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	Иначе		
		Попытка
			Ответ = DRV.ОплатитьПлатежнойКартой(Сумма * 100, СсылочныйНомер, КодАвторизации, КодХеш, КартаСбербанка, НазваниеКарты, НомерКарты);
		Исключение
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если Не Ответ Тогда
		ВыходныеПараметры.Очистить();
		СтрОшибки = "";
		КодОшибки = DRV.ПолучитьОшибку(СтрОшибки);
		ВыходныеПараметры.Добавить(" " + КодОшибки + ": " + СтрОшибки);
	Иначе
		Ответ = ПолучитьСтрокиСлипЧека(ВыходныеПараметры);
		Если Ответ Тогда
			Слип = ВыходныеПараметры[0];
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(СсылочныйНомер);
			ВыходныеПараметры.Добавить(Слип);
		Иначе
			АварийнаяОтменаОперации(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьСтрокиСлипЧека(ВыходныеПараметры)
	
	СлипЧек = "";
	
	КолСтрокСлип = DRV.КоличествоСтрокСлипЧека;
	Для Инд = 1 по КолСтрокСлип Цикл
		СтрокаСлип = "";
		Ответ = DRV.ПолучитьСтрокуСлипЧека(Инд,СтрокаСлип);
		Если Ответ Тогда
			// код символа частичного отеза - 22
			Если КодСимвола(СтрокаСлип) = 22 Тогда
				СлипЧек = СлипЧек + Символы.ПС + "[отрезка]";
			Иначе
				СлипЧек = СлипЧек + СтрокаСлип + ?(Инд = КолСтрокСлип, "",Символы.ПС);
			КонецЕсли;
		Иначе
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("Ошибка при получении строк слип-чека");
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Ответ Тогда
		//КопииСлип = "";
		//Для к = 1 по DRV.КоличествоКопийСлипЧека Цикл
		//	КопииСлип = КопииСлип + СлипЧек + ?(к = DRV.КоличествоКопийСлипЧека, "", Символы.ПС + "[отрезка]" + Символы.ПС);
		//КонецЦикла;
		//СлипЧек = КопииСлип;
		ВыходныеПараметры.Очистить();
		ВыхМас = Новый Массив;
		ВыхСтрук = Новый Структура;
		Для к = 1 по СтрЧислоСтрок(СлипЧек) Цикл
			Стр = СтрПолучитьСтроку(СлипЧек,к);
			ВыхМас.Добавить(Стр);
		КонецЦикла;
		ВыхСтрук.Вставить("Строки",ВыхМас);
		ВыходныеПараметры.Добавить(ВыхСтрук);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ВернутьПлатежПоПлатежнойКарте(ВходныеПараметры,ВыходныеПараметры)
	
	Если не ВходныеПараметры.Свойство("Сумма") Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка входных параметров: нет суммы чека");
		Возврат Ложь;
	КонецЕсли;
	
	Отдел = Неопределено;
	Если ВходныеПараметры.Свойство("Отдел") Тогда 
		Отдел = ВыходныеПараметры.Отдел;
	КонецЕсли;
	
	Сумма = ВходныеПараметры.Сумма;
	
	СсылочныйНомер = Неопределено;
	КодАвторизации = Неопределено;
	КодХеш         = Неопределено;
	КартаСбербанка = Неопределено;
	НазваниеКарты  = Неопределено;
	НомерКарты = Неопределено;
	
	DRV.ТипКарты = 0;
	
	Если Отдел <> Неопределено Тогда // оплата по отделам
		Попытка
			Ответ = DRV.ВернутьПлатежПоПлатежнойКартеНомОтдела(Сумма * 100, Отдел, СсылочныйНомер, КодАвторизации, КодХеш, КартаСбербанка, НазваниеКарты, НомерКарты);
		Исключение
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;		
	Иначе
		Попытка
			Ответ = DRV.ВернутьПлатежПоПлатежнойКарте(Сумма * 100, СсылочныйНомер, КодАвторизации, КодХеш, КартаСбербанка, НазваниеКарты, НомерКарты);
		Исключение
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;		
	КонецЕсли;
	
	Если Не Ответ Тогда
		ВыходныеПараметры.Очистить();
		СтрОшибки = "";
		КодОшибки = DRV.ПолучитьОшибку(СтрОшибки);
		ВыходныеПараметры.Добавить(" " + КодОшибки + ": " + СтрОшибки);
	Иначе
		Ответ = ПолучитьСтрокиСлипЧека(ВыходныеПараметры);
		Если Ответ Тогда
			Слип = ВыходныеПараметры[0];
			ВыходныеПараметры.Очистить();
			//ВыходныеПараметры.Добавить("****************");
			ВыходныеПараметры.Добавить(НомерКарты);
			ВыходныеПараметры.Добавить(СсылочныйНомер);
			ВыходныеПараметры.Добавить(Слип);
		Иначе
			АварийнаяОтменаОперации(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ответ;
		
КонецФункции

Функция ОтменитьПлатежПоПлатежнойКарте(ВходныеПараметры,ВыходныеПараметры)
	
	Если не ВходныеПараметры.Свойство("Сумма") Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка входных параметров: нет суммы чека");
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("СсылочныйНомер") Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка входных параметров: нет Ссылочного номера");
		Возврат Ложь;
	КонецЕсли;
	
	DRV.ТипКарты = 0;
	
	Сумма = ВходныеПараметры.Сумма;
	СсылочныйНомер = ВходныеПараметры.СсылочныйНомер;
	
	Ответ = DRV.ОтменитьПлатежПоПлатежнойКарте(Сумма * 100, СсылочныйНомер);
	Если не Ответ Тогда
		ВыходныеПараметры.Очистить();
		СтрОшибки = "";
		КодОшибки = DRV.ПолучитьОшибку(СтрОшибки);
		ВыходныеПараметры.Добавить(" " + КодОшибки + ": " + СтрОшибки);
	иначе
		Ответ = ПолучитьСтрокиСлипЧека(ВыходныеПараметры);
		Если Ответ Тогда
			Слип = ВыходныеПараметры[0];
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить("****************");
			ВыходныеПараметры.Добавить(СсылочныйНомер);
			ВыходныеПараметры.Добавить(Слип);
		Иначе
			АварийнаяОтменаОперации(ВходныеПараметры,ВыходныеПараметры);
		КонецЕсли;
		
	КонецЕсли;		
	
	Возврат Ответ;
	
КонецФункции

Функция АварийнаяОтменаОперации(ВходныеПараметры,ВыходныеПараметры)
	
	Если не ВходныеПараметры.Свойство("Сумма") Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка входных параметров: нет суммы чека");
		Возврат Ложь;
	КонецЕсли;
	Если не ВходныеПараметры.Свойство("СсылочныйНомер") Тогда
		ВыходныеПараметры.Очистить();
		ВыходныеПараметры.Добавить("Ошибка входных параметров: нет Ссылочного номера");
		Возврат Ложь;
	КонецЕсли;
	
	DRV.ТипКарты = 0;
	
	Сумма = ВходныеПараметры.Сумма;
	СсылочныйНомер = ВходныеПараметры.СсылочныйНомер;
	
	Ответ = DRV.ОтменитьПлатежПоПлатежнойКарте(Сумма * 100, СсылочныйНомер);
	Если не Ответ Тогда
		ВыходныеПараметры.Очистить();
		СтрОшибки = "";
		КодОшибки = DRV.ПолучитьОшибку(СтрОшибки);
		ВыходныеПараметры.Добавить(" " + КодОшибки + ": " + СтрОшибки);
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ИтогиДняПоКартам(ВыходныеПараметры)
	
	Ответ = DRV.ИтогиДняПоКартам();
	Если не Ответ Тогда
		ВыходныеПараметры.Очистить();
		СтрОшибки = "";
		КодОшибки = DRV.ПолучитьОшибку(СтрОшибки);
		ВыходныеПараметры.Добавить(" " + КодОшибки + ": " + СтрОшибки);
	Иначе 
		Ответ = ПолучитьСтрокиСлипЧека(ВыходныеПараметры);
		Если Ответ Тогда
			Слип = ВыходныеПараметры[0];
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Слип);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

Функция ОтчетПоСбербанку(ВыходныеПараметры)
	
	Ответ = DRV.СоздатьОтчет();
	Если не Ответ Тогда
		ВыходныеПараметры.Очистить();
		СтрОшибки = "";
		КодОшибки = DRV.ПолучитьОшибку(СтрОшибки);
		ВыходныеПараметры.Добавить(" " + КодОшибки + ": " + СтрОшибки);
	Иначе 
		Ответ = ПолучитьСтрокиСлипЧека(ВыходныеПараметры);
		Если Ответ Тогда
			Слип = ВыходныеПараметры[0];
			ВыходныеПараметры.Очистить();
			ВыходныеПараметры.Добавить(Слип);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

#КонецОбласти

// Выполняет действие с ТО.
//
// Параметры:
//  Действие - имя действия,
//  ПараметрыДействия - произвольный набор параметров, туда же присваивается возвращаемое значение функции.
//
Процедура ВыполнитьДействие(Действие,ПараметрыДействия) Экспорт
	
	Возврат;
	
	Если Действие = "Подключить" Тогда
		Подключить();
		
	ИначеЕсли Действие = "Отключить" Тогда
		Отключить();
		
	ИначеЕсли Действие="ПодготовкаАвторизации" Тогда
		Подключить();
		ПодготовкаАвторизации(ПараметрыДействия);
		
	ИначеЕсли Действие="ВыполнитьОперацию" Тогда
		Подключить();
		ВыполнитьОперацию(ПараметрыДействия);
		
	ИначеЕсли Действие="Отчет" Тогда
		Подключить();
		СнятьОтчет(ПараметрыДействия);
		
	Иначе
		Результат.Ошибка	= Истина;
		Результат.Описание	= "Неизвестная команда!";
		Результат.Подробно	= "Команда """+Действие+""" не определена для "+ТО.Наименование;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку ошибок ТО.
//
// Возвращаемое значение:
//  Истина - есть ошибка, ложь - нет.
//
Функция Ошибка()
	
	Если DRV.ResultCode = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Торговое оборудование.Ошибка",	УровеньЖурналаРегистрации.Предупреждение, ,	ТО.Ссылка, Строка(DRV.ResultCode)+" - "+DRV.ResultDescription);
	
	Результат.Ошибка = Истина;
	
	Если DRV.ResultCode > -10000 Тогда
		Результат.Описание = "Ошибка "+DRV.ResultCode;
		Результат.Подробно = СокрЛП(DRV.ResultDescription);
	Иначе
		// подробное сообщение выдается драйвером
		Результат.Описание = "";
		Результат.Подробно = "";
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Выполняет подключение ТО.
//
// Возвращаемое значение:
//  Истина - есть ошибка, ложь - нет.
//
Процедура Подключить() Экспорт
	
	// все свойства настраиваются через драйвер
	DRV.CurrentDeviceNumber	= CurrentDeviceNumber;
	
	// мы будем поддерживать только авторизацию по карте через ридер, без всяких ручных вводов
	//DRV.EnableKeyboardCardEntry=0;
	
КонецПроцедуры

// Выполняет отключение ТО.
//
// Возвращаемое значение:
//  Истина - есть ошибка, ложь - нет.
//
Процедура Отключить() Экспорт
	
КонецПроцедуры

Процедура ПодготовкаАвторизации(ПараметрыДействия)
	
	DRV.TerminalNumber		= ПараметрыДействия.НомерТерминала;
	DRV.CardNumber			= "";
	DRV.DataTracks			= ПараметрыДействия.ДанныеКарты;
	DRV.Sum					= ПараметрыДействия.Сумма;
	DRV.ReferenceNumber		= ПараметрыДействия.СсылочныйНомер;
	DRV.CharLineLength		= Число(ПараметрыДействия.ШиринаЛенты);
	DRV.ECRSessionNumber	= Число(ПараметрыДействия.НомерСмены);
	DRV.ECRReceiptNumber	= Число(ПараметрыДействия.НомерЧека);
	
	Если ПараметрыДействия.ТипОперации="Оплата" Тогда
		DRV.OperationType = 0;
		
	ИначеЕсли ПараметрыДействия.ТипОперации="Возврат" Тогда
		DRV.OperationType = 1;
		
	ИначеЕсли ПараметрыДействия.ТипОперации="ОтменаОплаты" Тогда
		DRV.OperationType = 2;
		
	ИначеЕсли ПараметрыДействия.ТипОперации="ОтменаВозврата" Тогда
		DRV.OperationType = 3;
		
	Иначе
		DRV.OperationType = -1;
		
	КонецЕсли;
	
	DRV.PrepareOnLineAuthorization();   

	Результат.Вставить("НуженВводКарты", DRV.NeedReaderEntryDataTracks=1);
	
	Ошибка();
	
КонецПроцедуры

Процедура ВыполнитьОперацию(ПараметрыДействия)

	DRV.TerminalNumber		= ПараметрыДействия.НомерТерминала;
	DRV.CardNumber			= "";
	DRV.DataTracks			= ПараметрыДействия.ДанныеКарты;
	DRV.Sum					= ПараметрыДействия.Сумма;
	DRV.ReferenceNumber		= ПараметрыДействия.СсылочныйНомер;
	DRV.CharLineLength		= Число(ПараметрыДействия.ШиринаЛенты);
	DRV.ECRSessionNumber	= Число(ПараметрыДействия.НомерСмены);
	DRV.ECRReceiptNumber	= Число(ПараметрыДействия.НомерЧека);
	
	DRV.OnLineAuthorization();
	
	Если DRV.ResultCode = 0 ИЛИ ( DRV.ResultCode <= -10000 И DRV.ResultCode > -11000) тогда
		
		Док = Документы.ТранзакцияПлатежнойСистемы.СоздатьДокумент();
		Док.Дата = ТекущаяДата();
		Док.НомерТерминала		= ПараметрыДействия.НомерТерминала;
		Док.ДатаТранзакции		= DRV.TransDate;
		Док.ВремяТранзакции		= DRV.TransTime;
		Док.НомерКарты			= DRV.CardNumber;
		Док.СрокДействияКарты	= DRV.CardExpDate;
		Док.ТипАвторизации		= DRV.AuthorizationType;
		Док.ТипОперации			= DRV.OperationType;
		Док.КодАвторизации		= DRV.AuthCode;
		Док.Сумма				= DRV.Sum;
		Док.ТипТранзакции		= DRV.TransType;
		Док.ИДТерминала			= DRV.TerminalID;
		Док.КодОтвета			= DRV.ResponseCode;
		Док.НомерСлипа			= DRV.SlipNumber;
		Док.НомерСообщения		= DRV.MsgNumber;
		Док.СсылочныйНомер		= DRV.ReferenceNumber;
		Док.Записать();
		
		Результат.Вставить("ДанныеКарты"	,DRV.DataTracks);
		Результат.Вставить("СсылочныйНомер"	,DRV.ReferenceNumber);
		Результат.Вставить("ТекстСлипа"		,DRV.TextStr);
		
	КонецЕсли;
	
	Ошибка();
	
КонецПроцедуры

Процедура СнятьОтчет(ПараметрыДействия)
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, 
							|	ИДТерминала,
							|	ДатаТранзакции,
							|	ВремяТранзакции,
							|	НомерКарты,
							|	СрокДействияКарты,
							|	ТипОперации,
							|	КодАвторизации,
							|	Сумма,
							|	ТипТранзакции,
							|	КодОтвета,
							|	НомерСлипа,
							|	НомерСообщения,
							|	СсылочныйНомер
							|ИЗ
							|	Документ.ТранзакцияПлатежнойСистемы
							|ГДЕ 
							|	НомерТерминала = &НомерТерминала
							|
							|ДЛЯ ИЗМЕНЕНИЯ
							|");
	
	Запрос.УстановитьПараметр("НомерТерминала", ПараметрыДействия.НомерТерминала);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество()=0 Тогда
		Результат.Вставить("Сообщение", "В текущей банковской смене не зафиксировано ни одной операции...");
		Возврат;
	КонецЕсли; 
	
	DRV.TerminalNumber	= ПараметрыДействия.НомерТерминала;
	DRV.CharLineLength	= Число(ПараметрыДействия.ШиринаЛенты);
	
	Если ПараметрыДействия.ТипОперации="ЗакрытиеСмены" Тогда
		DRV.ReportType=0;
		
	ИначеЕсли ПараметрыДействия.ТипОперации="ЖурналОпераций" Тогда
		DRV.ReportType=1;
		
	ИначеЕсли ПараметрыДействия.ТипОперации="ИтогиОпераций" Тогда
		DRV.ReportType=2;
		
	Иначе
		DRV.ReportType=-1;
		
	КонецЕсли;
	
	DRV.BeginReport();
	Если Ошибка() Тогда
		DRV.ResetState();
		Возврат;
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		DRV.RepTerminalID		= Выборка.ИДТерминала;
		DRV.RepTransDate		= Выборка.ДатаТранзакции;
		DRV.RepTransTime		= Выборка.ВремяТранзакции;
		DRV.RepCardNumber		= Выборка.НомерКарты;
		DRV.RepCardExpDate		= Выборка.СрокДействияКарты;
		DRV.RepOperationType	= Выборка.ТипОперации;
		DRV.RepAuthCode			= Выборка.КодАвторизации;
		DRV.RepSum				= Выборка.Сумма;
		DRV.RepTransType		= Выборка.ТипТранзакции;
		DRV.RepResponseCode		= Выборка.КодОтвета;
		DRV.RepSlipNumber		= Выборка.НомерСлипа;
		DRV.RepMsgNumber		= Выборка.НомерСообщения;
		DRV.RepReferenceNumber	= Выборка.СсылочныйНомер;
		
		DRV.AddToReport();
		Если Ошибка() Тогда
			DRV.ResetState();
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	DRV.EndReport();
	Если Ошибка() Тогда
		DRV.ResetState();
		Возврат;
	КонецЕсли;
	
	Результат.Вставить("ТекстСлипа", DRV.TextStr);
	
	Если ПараметрыДействия.ТипОперации="ЗакрытиеСмены" Тогда
		
		НачатьТранзакцию();
		
		Выборка.Сбросить();
		Пока Выборка.Следующий() Цикл
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъект.Удалить();
		КонецЦикла;
		
		Результат.Вставить("Сообщение", "Банковская смена закрыта!");
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

Результат = Новый Структура("Ошибка,Описание,Подробно",Ложь,"","");

#КонецЕсли
