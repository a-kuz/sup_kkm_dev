Перем ТаблицаВремени Экспорт;
Перем ТаблицаПосадочныхМест Экспорт;

Функция НапечататьДанныеГрафика() Экспорт
	
	Таб = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("График");
	
	/////////////////////////////////////////
	// определение вспомогательных переменных
	ТаблицаВремени = Новый ТаблицаЗначений;
	ТаблицаВремени.Колонки.Добавить("НачалоИнтервала");
	ТаблицаВремени.Колонки.Добавить("НомерКолонки");
	
	ТаблицаПосадочныхМест = Новый ТаблицаЗначений;
	ТаблицаПосадочныхМест.Колонки.Добавить("НомерСтроки");
	ТаблицаПосадочныхМест.Колонки.Добавить("ПосадочноеМесто");
	
	КолВоКолонок = 0;
	НомерСтроки  = 4;
	НомерКолонки = 13;
	
	ЦветЗапретаЗаказа = Новый Цвет(255, 165, 0);
	ЦветЗабронировано = Новый Цвет(255, 0, 0);
	
	СекВремяС 	 = Час(ВремяС)*60*60+Минута(ВремяС)*60;
	СекВремяПо 	 = Час(ВремяПо)*60*60+Минута(ВремяПо)*60;

	/////////////////////////////
	// получение областей макета
	ОбластьШапки 			= Макет.ПолучитьОбласть("Шапка|ПосадочныеМеста");
	ОбластьЧасы  			= Макет.ПолучитьОбласть("Шапка|Час"+Дискретность);
	ОбластьЗанятость 		= Макет.ПолучитьОбласть("СтрокаПосадочноеМесто|Час"+Дискретность);
	СтрокаПосадочноеМесто 	= Макет.ПолучитьОбласть("СтрокаПосадочноеМесто|ПосадочныеМеста");
    		
	// Шапка
	
	Таб.Вывести(ОбластьШапки);
	
	// Присоединим время
	Если Дискретность <> "1440" Тогда
		НачалоПериода = ДатаС;
	Иначе
		НачалоПериода = НачалоДня(ДатаС);
	КонецЕсли;
	Если Дискретность = "15" Тогда
		ШагКолонки = 4;
	ИначеЕсли Дискретность = "30" Тогда
		ШагКолонки = 2;
	ИначеЕсли Дискретность = "60" Тогда
		ШагКолонки = 1;
	ИначеЕсли Дискретность = "1440" Тогда
		ШагКолонки = 1;
	КонецЕсли;
	Секунды = Число(Дискретность)*60;	
	Сч = НомерКолонки;
	Пока НачалоПериода < ДатаПо Цикл
		
		Если Дискретность <> "1440" Тогда
			ОбластьЧасы.Параметры.ТекЧас = Час(НачалоПериода);
		КонецЕсли;
		Таб.Присоединить(ОбластьЧасы, 1);
		
		// сформируем таблицу времени
		Счетчик = ШагКолонки;
		Пока Счетчик <> 0 Цикл
			НоваяСтрока 				= ТаблицаВремени.Добавить();
			НоваяСтрока.НачалоИнтервала = НачалоПериода;
			НоваяСтрока.НомерКолонки	= Сч;
			НачалоПериода 				= НачалоПериода + Секунды;
			Сч 							= Сч + 1;
			Счетчик 					= Счетчик - 1;
		КонецЦикла;
		КолВоКолонок = КолВоКолонок + 1;
	КонецЦикла;
	
	// выборка из запроса
	Выборка = ПолучитьВыборку();
		
	Пока Выборка.Следующий() Цикл
		Если ТаблицаПосадочныхМест.Найти(Выборка.ПосадочноеМесто) = Неопределено Тогда
			СтрокаПосадочноеМесто.Параметры.Заполнить(Выборка);
			Наименование = Выборка.Наименование + " № " + Выборка.Код;		
			СтрокаПосадочноеМесто.Параметры.Наименование = Наименование;
			Таб.Вывести(СтрокаПосадочноеМесто);
			Счетчик = КолВоКолонок;
			Пока Счетчик <> 0 Цикл
				Таб.Присоединить(ОбластьЗанятость, 1);
				Счетчик = Счетчик - 1;
			КонецЦикла;
		Иначе
			НомерСтроки = НомерСтроки - 1; //больше одной записи об одном посадочном месте
		КонецЕсли;
		Если Выборка.Состояние <> NULL Тогда
			КолонкаС = НомерКолонки+Цел(Выборка.КолонкаС);
			Колонки  = КолонкаС + ОкрЗначение(Выборка.Колонки);
			Обл = Таб.Область(СтрЗаменить("R" + НомерСтроки + "C" + КолонкаС + ":" + "R" + НомерСтроки + "C" + Колонки, Символы.НПП, ""));
			Обл.Расшифровка = Выборка.Регистратор;
			Если Выборка.Состояние = Перечисления.СостоянияБрони.Забронировано Тогда
				Обл.ЦветФона = ЦветЗабронировано;
				Обл.Объединить();
				Обл.Текст = Выборка.КлиентСтр;
				Обл.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
			ИначеЕсли  Выборка.Состояние = Перечисления.СостоянияБрони.ЗапретВводаЗаказов Тогда
				Обл.ЦветФона = ЦветЗапретаЗаказа;
			КонецЕсли;
		КонецЕсли;
		Стр = ТаблицаПосадочныхМест.Добавить();
		Стр.НомерСтроки = НомерСтроки;
		Стр.ПосадочноеМесто = Выборка.ПосадочноеМесто;
		НомерСтроки = НомерСтроки + 1;		
	КонецЦикла;
	
	// Удалим "не рабочие" часы
	Если (ЗначениеЗаполнено(ВремяС) ИЛИ ЗначениеЗаполнено(ВремяПо)) И Дискретность <> "1440" Тогда
		Сч = ТаблицаВремени.Количество();
		Если ВремяС < ВремяПо Тогда	
			Пока Сч <> 0 Цикл
				СтрокаВремени = ТаблицаВремени[Сч-1];
				НачДня = НачалоДня(СтрокаВремени.НачалоИнтервала);
				Сч = Сч-1;
				Если НачДня+СекВремяС <= СтрокаВремени.НачалоИнтервала И СтрокаВремени.НачалоИнтервала < НачДня + СекВремяПо Тогда
					Продолжить;
				КонецЕсли;
				УдаляемаяОбласть = Таб.Область("R1C" + СтрокаВремени.НомерКолонки + ":R" + НомерСтроки + "C" + СтрокаВремени.НомерКолонки);
				Таб.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
				ТаблицаВремени.Удалить(СтрокаВремени);
			КонецЦикла;
		Иначе
			Пока Сч <> 0 Цикл
				СтрокаВремени = ТаблицаВремени[Сч-1];
				НачДня = НачалоДня(СтрокаВремени.НачалоИнтервала);
				КонДня = КонецДня(СтрокаВремени.НачалоИнтервала);
				Сч = Сч-1;
				Если НачДня+СекВремяС <= СтрокаВремени.НачалоИнтервала ИЛИ СтрокаВремени.НачалоИнтервала < НачДня + СекВремяПо Тогда
					Продолжить;
				КонецЕсли;
				УдаляемаяОбласть = Таб.Область("R1C" + СтрокаВремени.НомерКолонки + ":R" + НомерСтроки + "C" + СтрокаВремени.НомерКолонки);
				Таб.УдалитьОбласть(УдаляемаяОбласть, ТипСмещенияТабличногоДокумента.ПоГоризонтали);
				ТаблицаВремени.Удалить(СтрокаВремени);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Оформим шапку
	Сч = НомерКолонки;
	Сч2 = НомерКолонки;
	ТекДень = ДеньГода(ДатаС);
	ПослДень = ДеньГода(КонецГода(ДатаС));
	ТекИнтервал = ДатаС;
	СплЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	мШрифт = Новый Шрифт(,8,Истина);
	Для Каждого СтрВремени Из ТаблицаВремени Цикл
		СтрВремени.НомерКолонки = Сч;
		Сч = Сч + 1;
		НомерДня = ДеньГода(СтрВремени.НачалоИнтервала);
		ТекКолонка = СтрВремени.НомерКолонки;		
		Если НомерДня > ТекДень ИЛИ ТекДень = ПослДень Тогда
			Обл = Таб.Область(СтрЗаменить("R1" + "C" + Сч2 + ":" + "R1" + "C" + (ТекКолонка-1), Символы.НПП, "")); 
			Обл.Объединить();
			Обл.ГраницаСправа = СплЛиния;
			Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр; 			
			Обл.Текст = СформироватьСтрокуДня(ТекИнтервал);
			Обл.Шрифт = мШрифт;
			ТекИнтервал = СтрВремени.НачалоИнтервала;
			ТекДень = НомерДня; 
			Сч2 = ТекКолонка;
		КонецЕсли;
	КонецЦикла;
	Если ТаблицаВремени.Количество() > 0 Тогда
		Обл = Таб.Область(СтрЗаменить("R1" + "C" + Сч2 + ":" + "R1" + "C" + (ТекКолонка), Символы.НПП, ""));
		Обл.Объединить();
		Обл.ГраницаСправа = СплЛиния;
		Обл.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр; 			
		Обл.Текст = СформироватьСтрокуДня(ТекИнтервал);
		Обл.Шрифт = мШрифт;
	КонецЕсли;
	
	Возврат Таб;
	
КонецФункции

Функция ПолучитьВыборку()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	Бронирование.Период,
	|	Бронирование.Регистратор,
	|	Бронирование.ПосадочноеМесто,
	|	Бронирование.Состояние,
	|	Бронирование.НомерСтроки
	|ПОМЕСТИТЬ ТабБронирование
	|ИЗ
	|	РегистрСведений.Бронирование КАК Бронирование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таб.Состояние КАК Состояние,
	|	Таб.НачалоИнтервала,
	|	Таб.Регистратор,
	|	Таб.КонецИнтервала,
	|	Таб.ПосадочноеМесто,
	|	Таб.Регистратор.КлиентСтр КАК КлиентСтр,
	|	Таб.ПосадочноеМесто.Наименование КАК Наименование,
	|	Таб.ПосадочноеМесто.Код КАК Код,
	|	Таб.КолонкиС КАК КолонкаС,
	|	Таб.Колонки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПосадочныеМестаЗабронировано.Состояние КАК Состояние,
	|		ПосадочныеМестаЗабронировано.Период КАК НачалоИнтервала,
	|		ПосадочныеМестаЗабронировано.Регистратор КАК Регистратор,
	|		ПосадочныеМестаСвободно.Период КАК КонецИнтервала,
	|		ПосадочныеМестаЗабронировано.ПосадочноеМесто КАК ПосадочноеМесто,
	|		ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачала, ПосадочныеМестаЗабронировано.Период, МИНУТА) / &Дискретность КАК ЧИСЛО(10, 3)) КАК КолонкиС,
	|		ВЫБОР
	|			КОГДА &Дискретность <> 1440
	|				ТОГДА (ВЫРАЗИТЬ(РАЗНОСТЬДАТ(ПосадочныеМестаЗабронировано.Период, ПосадочныеМестаСвободно.Период, МИНУТА) / &Дискретность КАК ЧИСЛО(10, 2))) - 1
	|			ИНАЧЕ РАЗНОСТЬДАТ(ПосадочныеМестаЗабронировано.Период, ДОБАВИТЬКДАТЕ(ПосадочныеМестаСвободно.Период, СЕКУНДА, -1), ДЕНЬ)
	|		КОНЕЦ КАК Колонки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТабБронирование.Состояние КАК Состояние,
	|			ТабБронирование.Период КАК Период,
	|			ТабБронирование.Регистратор КАК Регистратор,
	|			ТабБронирование.НомерСтроки КАК НомерСтроки,
	|			ТабБронирование.ПосадочноеМесто КАК ПосадочноеМесто
	|		ИЗ
	|			ТабБронирование КАК ТабБронирование
	|		ГДЕ
	|			ТабБронирование.Период МЕЖДУ &ДатаНачала И &ДатаКон
	|			И ТабБронирование.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБрони.Забронировано)) КАК ПосадочныеМестаЗабронировано
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТабБронирование.Период КАК Период,
	|				ТабБронирование.Регистратор КАК Регистратор,
	|				ТабБронирование.НомерСтроки КАК НомерСтроки
	|			ИЗ
	|				ТабБронирование КАК ТабБронирование
	|			ГДЕ
	|				ТабБронирование.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБрони.Свободно)) КАК ПосадочныеМестаСвободно
	|			ПО ПосадочныеМестаЗабронировано.Регистратор = ПосадочныеМестаСвободно.Регистратор
	|				И (ПосадочныеМестаЗабронировано.НомерСтроки + 1 = ПосадочныеМестаСвободно.НомерСтроки)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПосадочныеМестаЗапретЗаказа.Состояние,
	|		ПосадочныеМестаЗапретЗаказа.Период,
	|		ПосадочныеМестаЗапретЗаказа.Регистратор,
	|		ПосадочныеМестаЗабронировано.Период,
	|		ПосадочныеМестаЗапретЗаказа.ПосадочноеМесто,
	|		ВЫБОР
	|			КОГДА &ДатаНачала < ПосадочныеМестаЗапретЗаказа.Период
	|				ТОГДА (ВЫРАЗИТЬ(РАЗНОСТЬДАТ(ПосадочныеМестаЗапретЗаказа.Период, ПосадочныеМестаЗабронировано.Период, МИНУТА) / &Дискретность КАК ЧИСЛО(10, 2))) - 1
	|			ИНАЧЕ (ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачала, ПосадочныеМестаЗабронировано.Период, МИНУТА) / &Дискретность КАК ЧИСЛО(10, 2))) - 1
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &ДатаНачала < ПосадочныеМестаЗапретЗаказа.Период
	|				ТОГДА ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачала, ПосадочныеМестаЗапретЗаказа.Период, МИНУТА) / &Дискретность КАК ЧИСЛО(10, 2))
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ТабБронирование.Состояние КАК Состояние,
	|			ТабБронирование.Период КАК Период,
	|			ТабБронирование.НомерСтроки КАК НомерСтроки,
	|			ТабБронирование.ПосадочноеМесто КАК ПосадочноеМесто,
	|			ТабБронирование.Регистратор КАК Регистратор
	|		ИЗ
	|			ТабБронирование КАК ТабБронирование
	|		ГДЕ
	|			ТабБронирование.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБрони.Забронировано)
	|			И ТабБронирование.Период МЕЖДУ &ДатаНачала И &ДатаКон) КАК ПосадочныеМестаЗабронировано
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				ТабБронирование.Период КАК Период,
	|				ТабБронирование.Регистратор КАК Регистратор,
	|				ТабБронирование.НомерСтроки КАК НомерСтроки,
	|				ТабБронирование.Состояние КАК Состояние,
	|				ТабБронирование.ПосадочноеМесто КАК ПосадочноеМесто
	|			ИЗ
	|				ТабБронирование КАК ТабБронирование
	|			ГДЕ
	|				ТабБронирование.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБрони.ЗапретВводаЗаказов)) КАК ПосадочныеМестаЗапретЗаказа
	|			ПО ПосадочныеМестаЗабронировано.Регистратор = ПосадочныеМестаЗапретЗаказа.Регистратор
	|				И (ПосадочныеМестаЗабронировано.НомерСтроки = ПосадочныеМестаЗапретЗаказа.НомерСтроки + 1)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL,
	|		NULL,
	|		NULL,
	|		NULL,
	|		ПосадочныеМеста.Ссылка,
	|		NULL,
	|		NULL
	|	ИЗ
	|		Справочник.ПосадочныеМеста КАК ПосадочныеМеста
	|	ГДЕ
	|		ПосадочныеМеста.ПометкаУдаления = ЛОЖЬ
	|		И ПосадочныеМеста.ЭтоГруппа = ЛОЖЬ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		БронированиеСрезПоследних.Состояние,
	|		БронированиеСрезПоследних.Период,
	|		БронированиеСрезПоследних.Регистратор,
	|		ТабБронирование.Период,
	|		БронированиеСрезПоследних.ПосадочноеМесто,
	|		ВЫБОР
	|			КОГДА &ДатаНачала > БронированиеСрезПоследних.Период
	|				ТОГДА 0
	|			ИНАЧЕ (ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачала, ТабБронирование.Период, МИНУТА) / &Дискретность КАК ЧИСЛО(10, 2))) - 1
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА &ДатаНачала > БронированиеСрезПоследних.Период
	|				ТОГДА (ВЫРАЗИТЬ(РАЗНОСТЬДАТ(&ДатаНачала, ТабБронирование.Период, МИНУТА) / &Дискретность КАК ЧИСЛО(10, 2))) - 1
	|			ИНАЧЕ (ВЫРАЗИТЬ(РАЗНОСТЬДАТ(БронированиеСрезПоследних.Период, ТабБронирование.Период, МИНУТА) / &Дискретность КАК ЧИСЛО(10, 2))) - 1
	|		КОНЕЦ
	|	ИЗ
	|		РегистрСведений.Бронирование.СрезПоследних(&ДатаНачала, ) КАК БронированиеСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабБронирование КАК ТабБронирование
	|			ПО БронированиеСрезПоследних.Регистратор = ТабБронирование.Регистратор
	|				И БронированиеСрезПоследних.Регистратор = ТабБронирование.ПосадочноеМесто
	|	ГДЕ
	|		БронированиеСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБрони.Забронировано)
	|		И ТабБронирование.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБрони.Свободно)) КАК Таб
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &МестоРеализации = ЗНАЧЕНИЕ(Справочник.МестаРеализации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Таб.ПосадочноеМесто.МестоРеализации = &МестоРеализации
	|					ИЛИ Таб.ПосадочноеМесто.МестоРеализации = ЗНАЧЕНИЕ(Справочник.МестаРеализации.ПустаяСсылка)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код,
	|	Состояние УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаКон"					, ДатаПо);
	Запрос.УстановитьПараметр("ДатаНачала"				, ?(Дискретность<>"1440",ДатаС + 1, НачалоДня(ДатаС)+1));
	Запрос.УстановитьПараметр("Дискретность"			, Число(Дискретность));
	Запрос.УстановитьПараметр("ПомещениеСвободно"		, Перечисления.СостоянияБрони.Свободно);
	Запрос.УстановитьПараметр("ПомещениеЗабронировано"	, Перечисления.СостоянияБрони.Забронировано);
	Запрос.УстановитьПараметр("МестоРеализации"			, МестоРеализации);
    	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция СформироватьСтрокуДня(ПараметрДата)
	
	НомерДняНедели = ДеньНедели(ПараметрДата);
	Если НомерДняНедели = 1 Тогда
		ЭтотДень = "Понедельник";
	ИначеЕсли НомерДняНедели = 2 Тогда
		ЭтотДень = "Вторник";
	ИначеЕсли НомерДняНедели = 3 Тогда
		ЭтотДень = "Среда";
	ИначеЕсли НомерДняНедели = 4 Тогда
		ЭтотДень = "Четверг";
	ИначеЕсли НомерДняНедели = 5 Тогда
		ЭтотДень = "Пятница";
	ИначеЕсли НомерДняНедели = 6 Тогда
		ЭтотДень = "Суббота";
	ИначеЕсли НомерДняНедели = 7 Тогда
		ЭтотДень = "Воскресенье";
	КонецЕсли;
	
	Результат = Формат(ПараметрДата, "ДФ=dd.MM.yy") + ", " + ЭтотДень;
	
	Возврат Результат;
	
КонецФункции

Функция ОкрЗначение(Число)
	
	Рез = Макс(Число,0);
	Если Цел(Рез) <> Рез Тогда
		Рез = Цел(Рез + 1);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

