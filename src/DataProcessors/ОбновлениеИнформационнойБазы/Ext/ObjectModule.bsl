
#Если Клиент Тогда

Перем СписокВерсий;				// используется для последовательного обновления ИБ
Перем МакетОписаниеОбновлений;
Перем ДокументОписаниеОбновлений;

//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
Процедура ВыполнитьОбновление() Экспорт
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	
	// это для обновления с НАНО
	Если Лев(ТекущаяВерсияИБ,1) = "1" Тогда
		ТекущаяВерсияИБ = "3.0.5.1";
	КонецЕсли; 
	
	// Первоначальное заполнение пустой информационной базы
	Если ТекущаяВерсияИБ = "" Тогда
		
		НачатьТранзакцию();
		
		Если НЕ Справочники.Валюты.Выбрать().Следующий() Тогда 
			ЗаполнитьПустуюИБ();
		КонецЕсли;
		
		// Установка номера версии информационной базы
		Константы.ВерсияПрограммы.Установить(глВерсия);
		Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия);
		
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = Метаданные.Версия Тогда
			Сообщить("Начальное заполнение информационной базы выполнено успешно.", СтатусСообщения.Информация);
		КонецЕсли;
		
		ПолучитьОбщуюФорму("ФормаКонстант").Открыть();
		
		Возврат;
	КонецЕсли;
	
	
	// Подготовка к выводу формы описания обновлений.
	МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений"+глВерсия);
	ДокументОписаниеОбновлений = Новый ТабличныйДокумент;
	
	// Обновление информационной базы.
	// Последовательно вызываются процедуры для обновления с соответствующей версии.
	
	ТекущаяВерсия = СписокВерсий.НайтиПоЗначению(ТекущаяВерсияИБ);
	ИндексТекущейВерсии = ?(ТекущаяВерсия = Неопределено, 0, СписокВерсий.Индекс(ТекущаяВерсия) );
	
	НоваяВерсия = СписокВерсий.НайтиПоЗначению(Метаданные.Версия);
	Если НоваяВерсия = Неопределено Тогда
		Предупреждение("А список версий обновлять кто будет?");
		Возврат;
	КонецЕсли; 
	
	Для ИндексВерсии=ИндексТекущейВерсии+1 По СписокВерсий.Индекс(НоваяВерсия) Цикл
		
		Версия = СписокВерсий[ИндексВерсии];
		Версия.Представление = СтрЗаменить(Версия.Значение, ".","");
		
		СтрСообщения = "обновление информационной базы на версию " + Версия.Значение;
		Сообщить("Выполняется " + СтрСообщения, СтатусСообщения.Информация);
		
		НачатьТранзакцию();
		
		// процедура обновления
		Если Версия.Пометка Тогда
			Выполнить("ОбновлениеНаВерсию"+Версия.Представление+"()");
		КонецЕсли; 
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(Версия.Значение);
		
		ЗафиксироватьТранзакцию();
		
		Если Константы.НомерВерсииКонфигурации.Получить() = Версия.Значение Тогда
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			//Сообщить("Выполнено " + СтрСообщения, СтатусСообщения.Информация);
			ЗарегистрироватьСобытие("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , ,"Выполнено " + СтрСообщения);
			
			Попытка
				ВывестиОписаниеИзменений(Версия.Представление)
			Исключение
			КонецПопытки;
			
		Иначе
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Сообщить("Обновление информационной базы выполнено успешно!", СтатусСообщения.Информация);
	
	Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
		ДокументОписаниеОбновлений.ТолькоПросмотр = Ложь;
		ДокументОписаниеОбновлений.ОтображатьЗаголовки = Ложь;
		ДокументОписаниеОбновлений.ОтображатьСетку = Ложь;
		ДокументОписаниеОбновлений.Показать("Дополнения к описанию");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

Процедура ЗаполнитьПустуюИБ()
	
	// основная валюта
	СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();
	СправочникОбъект.Код                       = "643";
	СправочникОбъект.Наименование              = "руб.";
	СправочникОбъект.НаименованиеПолное        = "Российский рубль";
	СправочникОбъект.ПараметрыПрописиНаРусском = "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2";
	СправочникОбъект.Записать();
	
	Рубли = СправочникОбъект.Ссылка;
	Константы.ОсновнаяВалюта.Установить(Рубли);
	ПроверитьКорректностьКурсаНа01_01_1980(Рубли);
	
	// типы цен
	СправочникОбъект = Справочники.ТипыЦен.Розничная.ПолучитьОбъект();
	СправочникОбъект.Валюта = Рубли;
	СправочникОбъект.Записать();
	СправочникОбъект = Справочники.ТипыЦен.Себестоимость.ПолучитьОбъект();
	СправочникОбъект.Валюта = Рубли;
	СправочникОбъект.Записать();
	
	// основная единица измерения
	СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
	СправочникОбъект.Код                       = "796";
	СправочникОбъект.Наименование              = "шт";
	СправочникОбъект.НаименованиеПолное        = "штука";
	СправочникОбъект.Записать();
	Константы.ОсновнаяЕдиницаИзмерения.Установить(СправочникОбъект.Ссылка);
	
	// основное место реализации
	СправочникОбъект = Справочники.МестаРеализации.СоздатьЭлемент();
	СправочникОбъект.Наименование	= "Основное место реализации";
	СправочникОбъект.НомерОтдела	= 1;
	Если глВерсия>1 Тогда
		СправочникОбъект.ТипЦен = Справочники.ТипыЦен.Розничная;
	КонецЕсли;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Записать();
	Константы.ОсновноеМестоРеализации.Установить(СправочникОбъект.Ссылка);
	
	// основное правило округления
	СправочникОбъект = Справочники.ПравилаОкругления.СоздатьЭлемент();
	СправочникОбъект.Наименование	= "Основное";
	СправочникОбъект.Кратность		= 1;
	СправочникОбъект.Режим			= 3;
	СправочникОбъект.Записать();
	Константы.ОсновноеПравилоОкругления.Установить(СправочникОбъект.Ссылка);
	
	// основная категория
	СправочникОбъект = Справочники.КатегорииТоваров.СоздатьЭлемент();
	СправочникОбъект.Наименование			= "Основная";
	СправочникОбъект.СтавкаНДС				= Перечисления.СтавкиНДС.НДС18;
	СправочникОбъект.ПравилоОкругления		= Константы.ОсновноеПравилоОкругления.Получить();
	СправочникОбъект.Записать();
	Константы.ОсновнаяКатегорияТоваров.Установить(СправочникОбъект.Ссылка);
	
	// основной вариант оплаты
	СправочникОбъект = Справочники.ВариантыОплаты.СоздатьЭлемент();
	СправочникОбъект.Наименование			= "Наличные";
	СправочникОбъект.Тип					= Перечисления.ТипыОплаты.Нал;
	СправочникОбъект.НомерВККМ				= 1;
	СправочникОбъект.Записать();
	Константы.ОсновнойВариантОплаты.Установить(СправочникОбъект.Ссылка);
	
	// причины удалений и возвратов
	СправочникОбъект = Справочники.ПричиныУдалений.ОсновнаяУдаление.ПолучитьОбъект();
	СправочникОбъект.Тип	= Перечисления.ТипыПричинУдалений.Удаление;
	СправочникОбъект.Записать();
	СправочникОбъект = Справочники.ПричиныУдалений.ОсновнаяВозврат.ПолучитьОбъект();
	СправочникОбъект.Тип	= Перечисления.ТипыПричинУдалений.Возврат;
	СправочникОбъект.Записать();
	
	// основная ставка НДС
	Константы.ОсновнаяСтавкаНДС.Установить(Перечисления.СтавкиНДС.НДС18);
	
	// префикс внутренних ШК
	Константы.ПрефиксВнутреннихШК.Установить(21);
	
	// префикс ШК на счетах
	Константы.ПрефиксШКсчета.Установить(22);
	
	Если глВерсия>1 Тогда
		// префикс ШК на марках и корешках
		Константы.ПрефиксШКмарки.Установить(23);
		Константы.ПрефиксШКкорешка.Установить(24);
	КонецЕсли; 
	
	Если глВерсия=3 Тогда
		// типы дней для тарификации
		СправочникОбъект = Справочники.ТипыДней.СоздатьЭлемент();
		СправочникОбъект.Наименование = "Все дни";
		СправочникОбъект.Привязка = 127;
		СправочникОбъект.Записать();
		// единицы времени
		СправочникОбъект = Справочники.ЕдиницыВремени.СоздатьЭлемент();
		СправочникОбъект.Наименование = "час";
		СправочникОбъект.Код = 60;
		СправочникОбъект.Записать();
	КонецЕсли; 
	
	ЗаполнитьДанныеРИБ();
	
	ЗаполнитьШаблоныЦентраБезопасности();
	
	СправочникТипыКартинокДобавитьРекомендуемыйРазмер();
	
КонецПроцедуры

Процедура ПереходНаДругуюВерсию()
	
	// при переходе с ЛАЙТа
	ЗаполнитьДанныеРИБ();
	
	Если глВерсия=3 Тогда
		
		Сообщить("Выполняется обновление информационной базы на версию ПРЕМИУМ", СтатусСообщения.Информация);
		
		НачатьТранзакцию();
		
		// в спр. Товары добавился реквизит "Тип"
		Выборка = Справочники.Товары.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ Выборка.ЭтоГруппа И Выборка.Тип.Пустая() Тогда
				Объект = Выборка.ПолучитьОбъект();
				Объект.Тип = Перечисления.ТипыТоваров.Товар;
				Объект.Записать();
			КонецЕсли; 
		КонецЦикла;
		
		// типы дней для тарификации
		Если НЕ Справочники.ТипыДней.Выбрать().Следующий() Тогда
			СправочникОбъект = Справочники.ТипыДней.СоздатьЭлемент();
			СправочникОбъект.Наименование = "Все дни";
			СправочникОбъект.Привязка = 127;
			СправочникОбъект.Записать();
		КонецЕсли; 
		
		// единицы времени
		Если НЕ Справочники.ЕдиницыВремени.Выбрать().Следующий() Тогда
			СправочникОбъект = Справочники.ЕдиницыВремени.СоздатьЭлемент();
			СправочникОбъект.Наименование = "час";
			СправочникОбъект.Код = 60;
			СправочникОбъект.Записать();
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРИБ()
	
	Если глВерсия=1 Тогда
		Возврат;
	КонецЕсли; 
	
	ПланОбменаОбъект = ПланыОбмена.Основной.ЭтотУзел().ПолучитьОбъект();
	Если ЗначениеЗаполнено(ПланОбменаОбъект.ИнформационнаяБаза) Тогда
		Возврат;
	КонецЕсли; 
	
	ПланОбменаОбъект.Код                   = "Ц";
	ПланОбменаОбъект.Наименование          = "Центр";
	ПланОбменаОбъект.Центр                 = Истина;
	ПланОбменаОбъект.ИнформационнаяБаза = Справочники.ИнформационныеБазы.Центр;
	ПланОбменаОбъект.Записать();
	
	Константы.ИБВедениеСправочников.Установить(Справочники.ИнформационныеБазы.Центр);
	
	УправлениеРИБ.УстановитьПараметрыРИБ();
	
КонецПроцедуры

Процедура ЗаполнитьШаблоныЦентраБезопасности()

	Если Справочники.ШаблоныДействий.Выбрать().Следующий() Тогда
		Возврат;
	КонецЕсли; 
	
	Шаблон = Справочники.ШаблоныДействий.СоздатьЭлемент();
	Шаблон.Наименование = "Отмена пречека со скидкой";
	Шаблон.ВнутриЗаказа = Истина;
	Шаблон.ПоследовательностьДействий.Добавить().Событие = Справочники.События.ЗаказОтменаПредварительногоСчета;
	Шаблон.ПоследовательностьДействий.Добавить().Событие = Справочники.События.ЗаказРучнаяСкидка;
	Шаблон.ПоследовательностьДействий.Добавить().Событие = Справочники.События.ОплатаЗафиксирована;
	Шаблон.Записать();
	
	Шаблон = Справочники.ШаблоныДействий.СоздатьЭлемент();
	Шаблон.Наименование = "Перенос позиций (карусель)";
	Шаблон.ВнутриЗаказа = Истина;
	Шаблон.ПоследовательностьДействий.Добавить().Событие = Справочники.События.ЗаказДобавлениеПриРазделении;
	Шаблон.ПоследовательностьДействий.Добавить().Событие = Справочники.События.ЗаказУдалениеПриРазделении;
	Шаблон.Записать();
	
КонецПроцедуры

// Заполнение реквизита РекомендуемыйРазмер в предопределенных элементах
//
Процедура СправочникТипыКартинокДобавитьРекомендуемыйРазмер()
	
	Объект = Справочники.ТипыКартинок.Пиктограмма.ПолучитьОбъект();
	Объект.РекомендуемыйРазмер = "256pix";
	Объект.Записать();
    Объект = Справочники.ТипыКартинок.ПиктограммаБольшая.ПолучитьОбъект();
	Объект.РекомендуемыйРазмер = "320pix";
	Объект.Записать();
    Объект = Справочники.ТипыКартинок.Изображение.ПолучитьОбъект();
	Объект.РекомендуемыйРазмер = "800pix";
	Объект.Записать();
    Объект = Справочники.ТипыКартинок.ИзображениеБольшое.ПолучитьОбъект();
	Объект.РекомендуемыйРазмер = "1280pix";
	Объект.Записать();

КонецПроцедуры	

// Перезаполнение наименования по старому шаблону
//
Процедура СправочникПосадочныеМестаПерезаполнитьНаименованиеПоШаблону()
	
	СтарыйШаблон = "[Место.Наименование] № [Место.Код]";
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПосадочныеМеста.Ссылка ИЗ Справочник.ПосадочныеМеста КАК ПосадочныеМеста");
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;	
		          		
		Место = Выборка.Ссылка.ПолучитьОбъект();
		Место.Номер 		= Место.Код;
		Место.Емкость 		= 1;
		Место.Наименование	= Вычислить(Шаблон2Выражение(СтарыйШаблон));
		Место.Записать();

	КонецЦикла;	
	
	ЗафиксироватьТранзакцию();

	
	Сообщить("В справочнике ""Посадочные места"", перезаполнено наименование в соответствии с шаблоном ""[Место.Наименование] № [Место.Код]""");
	Сообщить("Добавлена возможность перезаполнения справочника ""Посадочные места"", типовой шаблон ""Стол №[Место.Номер]""");

КонецПроцедуры	

// Заполнить МестоПроизводстваСписок из МестоПроизводства
//
Процедура МестоПроизводстваСписокЗаполнить()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РабочиеМеста.Ссылка,
	|	РабочиеМеста.ПараметрыРМ
	|ИЗ
	|	Справочник.РабочиеМеста КАК РабочиеМеста
	|ГДЕ
	|	РабочиеМеста.Тип = &Тип
	|");
	
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыРМ.Производство);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			СтруктураПараметров = ЗначениеИзСтрокиВнутр(Выборка.ПараметрыРМ);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если СтруктураПараметров.Свойство("МестоПроизводства") И ЗначениеЗаполнено(СтруктураПараметров.МестоПроизводства) Тогда
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			МестоПроизводстваСписок = Новый СписокЗначений;
			МестоПроизводстваСписок.Добавить(СтруктураПараметров.МестоПроизводства);
			СтруктураПараметров.Вставить("МестоПроизводстваСписок",МестоПроизводстваСписок);
			ПараметрыРМ = ЗначениеВСтрокуВнутр(СтруктураПараметров);
			Объект.ПараметрыРМ = ПараметрыРМ;
			Объект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры	

// Заполняем регистр ЗаказТоварыДопИнф по открытым заказам
//
Процедура ЗаказТоварыДопИнфЗаполнить()
	
	ИспользоватьЗаказТоварыДопИнф = Константы.ПодтверждениеГотовности.Получить()
									ИЛИ Константы.ПодтверждениеВыдачи.Получить()
									ИЛИ Константы.ПодтверждениеГотовностиИВыдачиПриОплатаЗаказа.Получить()
									ИЛИ Константы.ПодтверждениеГотовностиПриВыдачиБлюда.Получить();
	
	Если НЕ ИспользоватьЗаказТоварыДопИнф Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	РабочиеМеста.Ссылка,
		|	РабочиеМеста.Тип,
		|	РабочиеМеста.ПараметрыРМ
		|ИЗ
		|	Справочник.РабочиеМеста КАК РабочиеМеста
		|ГДЕ
		|	НЕ РабочиеМеста.ПометкаУдаления
		|");
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Попытка
				СтруктураПараметров = ЗначениеИзСтрокиВнутр(Выборка.ПараметрыРМ);
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если Выборка.Тип = Перечисления.ТипыРМ.Производство 
				ИЛИ (СтруктураПараметров.Свойство("ЗаказИспользоватьКурсы") И СтруктураПараметров.ЗаказИспользоватьКурсы)
				ИЛИ (СтруктураПараметров.Свойство("ЗаказВыделятьДозаказы") И СтруктураПараметров.ЗаказВыделятьДозаказы) Тогда
				ИспользоватьЗаказТоварыДопИнф = Истина;
	            Прервать;
			КонецЕсли;
			
		КонецЦикла;	
		
	КонецЕсли;	
									
	Если НЕ ИспользоватьЗаказТоварыДопИнф Тогда
		Возврат;		
	КонецЕсли;	
	
	Константы.РаботаСПодтверждениямиПозицийЗаказа.Установить(Истина);
									
	// Для создания ИдСтроки
	НомерКлюча 			= СтрЗаменить( Константы.КлючЗащиты_НомерКлюча.Получить(), Символы.НПП, "");
	// Для создания ИдСтроки
	ГСЧ 				= Новый ГенераторСлучайныхЧисел();
	// Для работы с подачами
	ИспользоватьКурсы	= ?(глПараметрыРМ=Неопределено ИЛИ глВерсия=1, Ложь, глПараметрыРМ.ЗаказИспользоватьКурсы);

	// Дерево таблицы заказа для записи в регистр
	ДеревоТоваров = Новый ДеревоЗначений;
	ДеревоТоваров.Колонки.Добавить("Товар");
	ДеревоТоваров.Колонки.Добавить("Количество");
	ДеревоТоваров.Колонки.Добавить("Статус");
	ДеревоТоваров.Колонки.Добавить("ГруппаПечати");
	ДеревоТоваров.Колонки.Добавить("Подача");
	ДеревоТоваров.Колонки.Добавить("ИдСтроки");
	ДеревоТоваров.Колонки.Добавить("КодПодтверждения");
	ДеревоТоваров.Колонки.Добавить("ВремяДозаказ");
	ДеревоТоваров.Колонки.Добавить("ВремяЗаказано");
	ДеревоТоваров.Колонки.Добавить("ВремяГотово");
	ДеревоТоваров.Колонки.Добавить("ВремяВыдано");
	ДеревоТоваров.Колонки.Добавить("РежимПодтверждения");
	
	// Выборка открытых заказов
	Запрос = Новый Запрос("
	|	ВЫБРАТЬ
	|		ЗаказДопИнф.Заказ.Ссылка КАК ДокСсылка
	|	ИЗ
	|		РегистрСведений.ЗаказДопИнф КАК ЗаказДопИнф
	|	ГДЕ
	|		ЗаказДопИнф.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказа.Открыт)
	|		И НЕ ЗаказДопИнф.Заказ.ПометкаУдаления");	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Для формирования КодПодтверждения
		Заказ 				= Выборка.ДокСсылка;
		// Для формирования КодПодтверждения
		ВремяСекунд 		= Формат(Заказ.Дата-НачалоДня(ТекущаяДата()),"ЧГ=");
		// Номер заказа как 1 часть кода подтверждения
		НомерЗаказа			= Строка(Формат(Число(Заказ.Номер),"ЧГ="));
		// Количество знаков для формирования 2 части кода подтверждения
		КолДопЗнаковМарки	= 10 - СтрДлина(НомерЗаказа);
		
		// Новое дерево товаров
		ДеревоТоваров.Строки.Очистить();
		
		// Заполняем дерево товарами.
		ТаблицаТоваров = Заказ.Товары.Выгрузить();
		Для Каждого СтрокаТовара Из ТаблицаТоваров Цикл
			НовСтрокаДерева							= ДеревоТоваров.Строки.Добавить();
			НовСтрокаДерева.Товар					= СтрокаТовара.Товар;
			НовСтрокаДерева.Количество				= СтрокаТовара.Количество;
			НовСтрокаДерева.Статус					= СтрокаТовара.Статус;
			НовСтрокаДерева.ГруппаПечати			= СтрокаТовара.ГруппаПечати;
			НовСтрокаДерева.ВремяДозаказ			= Заказ.Дата;
			// Если есть подача то ВремяЗаказано - время подачи
			Если ЗначениеЗаполнено(СтрокаТовара.Подача) Тогда
				НовСтрокаДерева.Подача				= СтрокаТовара.Подача.Номер;
				НовСтрокаДерева.ВремяДозаказ		= СтрокаТовара.Подача.Дата;
				НовСтрокаДерева.ВремяЗаказано		= СтрокаТовара.Подача.Дата;
			// Если нет подача то ВремяЗаказано - время документа заказ	
			Иначе
				НовСтрокаДерева.Подача				= 0;
				НовСтрокаДерева.ВремяДозаказ		= Заказ.Дата;
				НовСтрокаДерева.ВремяЗаказано		= Заказ.Дата;
			КонецЕсли;
			
			НовСтрокаДерева.ИдСтроки				= "t" + НомерКлюча +"_"+ Формат(ТекущаяДата() - Дата(1970,1,1), "ЧГ=") + ГСЧ.СлучайноеЧисло(1,999);
			
			РежимПодтверждения	= НовСтрокаДерева.ГруппаПечати.РежимПодтверждения;
			Если РежимПодтверждения = 1 И НЕ ИспользоватьКурсы Тогда
				РежимПодтверждения = 0;
			КонецЕсли; 
			НовСтрокаДерева.РежимПодтверждения		= РежимПодтверждения;
			
			Если РежимПодтверждения = 0 Тогда
				КодПодтверждения = НомерЗаказа + Прав("0000000000" + Строка(ВремяСекунд) + Прав("00" + СтрокаТовара.ГруппаПечати.Код,2),КолДопЗнаковМарки); 
			ИначеЕсли РежимПодтверждения = 1 Тогда
				КодПодтверждения = НомерЗаказа + Прав("0000000000" + Строка(ВремяСекунд) + Прав("00" + СтрокаТовара.ГруппаПечати.Код,2) + Прав("0" + ?(ЗначениеЗаполнено(СтрокаТовара.Подача), СтрокаТовара.Подача.Номер, "0"), 1),КолДопЗнаковМарки);
			Иначе
				КодПодтверждения = НомерЗаказа + Прав("0000000000" + СтрокаТовара.ИдСтроки,КолДопЗнаковМарки);
			КонецЕсли;
			НовСтрокаДерева.КодПодтверждения		= КодПодтверждения;
			
		КонецЦикла; 
		
		// Дополняем дерево спецификами.
		ТаблицаСпецифик = Заказ.Специфики.Выгрузить();
		ТаблицаСпецифик.Колонки.Добавить("СтрокаТаблицыЗаказа");
		Для каждого СтрокаСпецифики Из ТаблицаСпецифик Цикл
			Если СтрокаСпецифики.НомерСтрокиСпецифики = 0 Тогда
				СтрокаТовара = ДеревоТоваров.Строки[СтрокаСпецифики.НомерСтрокиТовара-1];
			Иначе
				СтрокаТовара = ТаблицаСпецифик[СтрокаСпецифики.НомерСтрокиСпецифики-1].СтрокаТаблицыЗаказа;
			КонецЕсли; 
			НовСтрокаДерева							= СтрокаТовара.Строки.Добавить();
			НовСтрокаДерева.Товар					= СтрокаСпецифики.Специфика;
			НовСтрокаДерева.Количество				= СтрокаТовара.Количество;
			НовСтрокаДерева.Статус					= СтрокаТовара.Статус;
			НовСтрокаДерева.ВремяДозаказ			= СтрокаТовара.ВремяДозаказ;
			НовСтрокаДерева.Подача					= СтрокаТовара.Подача;
			НовСтрокаДерева.ВремяЗаказано			= СтрокаТовара.ВремяЗаказано;
			НовСтрокаДерева.ВремяГотово				= СтрокаТовара.ВремяГотово;
			НовСтрокаДерева.ВремяВыдано				= СтрокаТовара.ВремяВыдано;
			НовСтрокаДерева.ИдСтроки				= "t" + НомерКлюча +"_"+ Формат(ТекущаяДата() - Дата(1970,1,1), "ЧГ=") + ГСЧ.СлучайноеЧисло(1,999);
			
			Если ЗначениеЗаполнено(СтрокаСпецифики.ГруппаПечати) Тогда
				НовСтрокаДерева.ГруппаПечати		= СтрокаСпецифики.ГруппаПечати;
				РежимПодтверждения	= НовСтрокаДерева.ГруппаПечати.РежимПодтверждения;
				Если РежимПодтверждения = 1 И НЕ ИспользоватьКурсы Тогда
					РежимПодтверждения = 0;
				КонецЕсли; 
				НовСтрокаДерева.РежимПодтверждения	= РежимПодтверждения;
			Иначе
				РежимПодтверждения	= СтрокаТовара.РежимПодтверждения;
				НовСтрокаДерева.ГруппаПечати		= СтрокаТовара.ГруппаПечати;
				НовСтрокаДерева.РежимПодтверждения	= РежимПодтверждения;
			КонецЕсли;
			
			Если РежимПодтверждения = 0 Тогда
				КодПодтверждения = НомерЗаказа + Прав("0000000000" + Строка(ВремяСекунд) + Прав("00" + СтрокаТовара.ГруппаПечати.Код,2),КолДопЗнаковМарки); 
			ИначеЕсли РежимПодтверждения = 1 Тогда
				КодПодтверждения = НомерЗаказа + Прав("0000000000" + Строка(ВремяСекунд) + Прав("00" + СтрокаТовара.ГруппаПечати.Код,2) + Прав("0" + ?(ЗначениеЗаполнено(СтрокаТовара.Подача), СтрокаТовара.Подача.Номер, "0"), 1),КолДопЗнаковМарки);
			Иначе
				КодПодтверждения = НомерЗаказа + Прав("0000000000" + СтрокаТовара.ИдСтроки,КолДопЗнаковМарки);
			КонецЕсли;
			НовСтрокаДерева.КодПодтверждения		= КодПодтверждения;
			
			СтрокаСпецифики.СтрокаТаблицыЗаказа	= НовСтрокаДерева;
		КонецЦикла;
		
		// Если дерево есть, записываем в регистр
		Если ДеревоТоваров.Строки.Количество() > 0 Тогда 
			
			ЗаписатьВРегистрЗаказТоварыДопИнф(Заказ, ДеревоТоваров);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры	

// Вызывается из ОбновлениеНаВерсию30212/ЗаказТоварыДопИнфЗаполнить()
// Запись в регистр таблицы товаров и специфик по заказу
Процедура ЗаписатьВРегистрЗаказТоварыДопИнф(Заказ, ДеревоТоваров, ИдСтрокиВладельца = Неопределено)

	НачатьТранзакцию();
	
	Для Каждого СтрокаТовара Из ДеревоТоваров.Строки Цикл
		
		МенеджерЗаписи = РегистрыСведений.ЗаказТоварыДопИнф.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Заказ				= Заказ.Ссылка;
		МенеджерЗаписи.ИдСтроки				= СтрокаТовара.ИдСтроки;
		МенеджерЗаписи.ВремяДозаказ			= СтрокаТовара.ВремяДозаказ;
		МенеджерЗаписи.ВремяЗаказано		= СтрокаТовара.ВремяЗаказано;
		МенеджерЗаписи.АвторЗаказано		= Заказ.Автор;
		МенеджерЗаписи.Статус				= СтрокаТовара.Статус;
		МенеджерЗаписи.КодПодтверждения		= СтрокаТовара.КодПодтверждения;
		МенеджерЗаписи.ГруппаПечати			= СтрокаТовара.ГруппаПечати;
		МенеджерЗаписи.Товар				= СтрокаТовара.Товар;
		// Проставляем подачу только товару
		Если ТипЗнч(СтрокаТовара.Товар) = Тип("СправочникСсылка.Товары") Тогда
			МенеджерЗаписи.Подача			= СтрокаТовара.Подача;
		КонецЕсли;
		МенеджерЗаписи.Количество			= СтрокаТовара.Количество;
		МенеджерЗаписи.ИдСтрокиВладельца	= ИдСтрокиВладельца;
		МенеджерЗаписи.Записать();
		
		Если ЗначениеЗаполнено(СтрокаТовара.Строки) Тогда
			ЗаписатьВРегистрЗаказТоварыДопИнф(Заказ, СтрокаТовара, СтрокаТовара.ИдСтроки)
		КонецЕсли;	
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
//
Процедура ВывестиОписаниеИзменений(НомерВерсии)
	
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + НомерВерсии));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерВерсии);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерВерсии));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// Список версий используется для последовательного обновления ИБ
// В списке обязательно должна присутствовать текущая версия
// Значение = версии конфигурации
// Представление формируется автоматом как значение без точек, используется для идентификации процедуры обновления и областей таблицы описания обновлений
// Признак пометки: если Истина то нужно определить процедуру ОбновлениеНаВерсию<Представление>, в которой прописать необходимые действия над ИБ

СписокВерсий = Новый СписокЗначений;
СписокВерсий.Добавить("3.0.2.1");

#КонецЕсли
