
Перем ФильтрИзображений; // Содержит строку всех возможных графических расширений
Перем ОтображатьПроводник; // Управляет видимостью панели проводника

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	// Глобальный обработчик измненеия реквизита "ТипОбъекта"
	// Обработчик будет срабатывать даже при программном изменении реквизита
	ПодключитьОбработчикИзмененияДанных("ТипОбъекта", "ПриИзмененииТипаОбъекта");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура КнопкаСформироватьНажатие(Кнопка)
	
	СформироватьОтчет();
	
КонецПроцедуры

Процедура ДействияФормыСвернутьВсеГруппировки(Кнопка)
	СвернутьГруппировкиОтчета();
КонецПроцедуры

Процедура ДействияФормыРазверунтьВсеГруппировки(Кнопка)
	РазвернутьГруппировкиОтчета();
КонецПроцедуры

Процедура КоманднаяПанельПроводникаПроводник(Кнопка)
	Кнопка.Пометка = Не Кнопка.Пометка;
	ОбновитьФлагОтображенияПроводника(Кнопка.Пометка);
КонецПроцедуры

Процедура ПолеВводаКаталогНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ВыбратьКаталог() Тогда
		ОбновитьПроводник();
	КонецЕсли;
КонецПроцедуры

Процедура ПолеВводаКаталогПриИзменении(Элемент)
	ПриИзмененииКаталога();
КонецПроцедуры

// ОБРАБОТКА ПЕРЕТАСКИВАНИЯ В ТАБДОК - ПРИЕМ ДАННЫХ ОТ ИСТОЧНИКА
Процедура РезультатПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
    // Условие ниже большое, но необходимое
	// Строго проверяются параметры перетаскивания
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") И
		 ПараметрыПеретаскивания.Значение.Свойство("Источник") И 
		 ПараметрыПеретаскивания.Значение.Источник = ЭлементыФормы.ТабличноеПолеПроводник И 
		 Область.Расшифровка <> Неопределено И 
		 ТипЗнч(Область.Расшифровка) = Тип("Структура") И 
		 Область.Расшифровка.Свойство("Имя") И
		 Область.Расшифровка.Имя = "Картинка" Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	Иначе
		ПараметрыПеретаскивания.Действие			= ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия	= ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;
КонецПроцедуры

Процедура РезультатПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Область)
	
	СтандартнаяОбработка = Ложь;
	Объект = Область.Расшифровка.Объект;
	ТипКартинки = Область.Расшифровка.ТипКартинки;
	АдресФайла = ПараметрыПеретаскивания.Значение.ПолноеИмяФайла;
	ИмяКартинкиОтчете = Область.Расшифровка.ИмяКартинки;
	
	Попытка
		ХранилищеИзображения = РегистрыСведений.Картинки.ДобавитьИзображение(Объект, ТипКартинки, АдресФайла, Истина);
	Исключение
		Сообщить("Не удалось добавить изображения.", СтатусСообщения.Важное);
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
		Возврат;
	КонецПопытки;
	
	// Обновляем расшифровку
	Область.Расшифровка.ЕстьКартинка = Истина;
	Область.Расшифровка.Хранилище = ХранилищеИзображения.Хранилище;
	
	// Обновляем представление картинки
	РисунокОбъекта = ТабДокРезультат.Рисунки[ИмяКартинкиОтчете];
	РисунокОбъекта.Картинка = Область.Расшифровка.Хранилище.Получить();
	РисунокОбъекта.Линия = ЛинияКартинки;
	
	// Это нужно чтобы произошел "перевыбор" элемента формы и в результате обновится картинка
	Элемент.ТекущаяОбласть = Область;
	
КонецПроцедуры

// ОБРАБОТКА ПЕРЕТАСКИВАНИЯ ИЗ ПРОВОДНИКА - ОТПРАВКА ДАННЫХ ОТ ИСТОЧНИКА
Процедура ТабличноеПолеПроводникНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	// Перетаскивать можно только файлы
	Если Не Элемент.ТекущиеДанные.ЭтоКаталог Тогда
		
		// Необходимо чтобы активизировались обработчики перетаскивания в поле табличного документа
		// При это отвалится расшифровка, но в обработчике "ОкончаниеПеретаскивания" мы вернем значение ТолькоПросмотр = Истина
		// и расшифровка заработает
		ТабДокРезультат.ТолькоПросмотр = Ложь;
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Источник", Элемент);
		СтруктураПараметров.Вставить("ПолноеИмяФайла", Элемент.ТекущиеДанные.ПолноеИмя);
		
		ПараметрыПеретаскивания.Значение = СтруктураПараметров;
		
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПолеПроводникОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// Необходимо для возобновления работы расшифровки в отчете
	ТабДокРезультат.ТолькоПросмотр = Истина;
КонецПроцедуры

Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("Имя") И Расшифровка.Имя = "Картинка" Тогда
		СтандартнаяОбработка = Ложь;
		
		// В зависимости от наличия картинки есть разный набор действий
		Если Расшифровка.ЕстьКартинка Тогда
			Список = Новый СписокЗначений;
			Список.Добавить("Открыть",,,БиблиотекаКартинок.Лупа);
			Список.Добавить("Выбрать картинку",,,БиблиотекаКартинок.ОткрытьФайл);
			Список.Добавить("Удалить картинку",,,БиблиотекаКартинок.УдалитьНепосредственно);
			ВыбранноеДействие = ВыбратьИзМеню(Список);
			Если ВыбранноеДействие <> Неопределено Тогда
				ВыбранноеДействие = ВыбранноеДействие.Значение;
			КонецЕсли;
		Иначе
			ВыбранноеДействие = "Выбрать картинку";
		КонецЕсли;
		
		// Выполнение выбранного действия пользователя
		Если ВыбранноеДействие = "Открыть" Тогда
			ОткрытьЗначение(Расшифровка.Хранилище.Получить());
		ИначеЕсли ВыбранноеДействие = "Выбрать картинку" Тогда
			// Не надо каждый раз создавать новое хранилище изображения, сначала попытаемся обновить существующее
			ХранилищеИзображенияСсылка = Расшифровка.ХранилищеИзображения;
			Если ЗначениеЗаполнено(ХранилищеИзображенияСсылка) Тогда
				ХранилищеИзображенияОбъект = Расшифровка.ХранилищеИзображения.ПолучитьОбъект()
			Иначе
				ХранилищеИзображенияОбъект = Справочники.ХранилищеДополнительнойИнформации.СоздатьЭлемент();
			КонецЕсли;
			
			Если ХранилищеИзображенияОбъект.ВыбратьИзображениеИзФайла(Истина) <> Ложь Тогда
				// Обновляем запись в регистре
				РегистрыСведений.Картинки.ДобавитьИзображение(Расшифровка.Объект, Расшифровка.ТипКартинки, ХранилищеИзображенияОбъект.Ссылка, Истина);
				
				
				Расшифровка.ЕстьКартинка = Истина;
				Расшифровка.Хранилище = ХранилищеИзображенияОбъект.Хранилище;
				
				// Обновляем представление картинки
				Элемент.ТекущаяОбласть.Картинка = ХранилищеИзображенияОбъект.Хранилище.Получить();
				Элемент.ТекущаяОбласть.Линия = ЛинияКартинки;
				
				// Это нужно чтобы произошел "перевыбор" элемента формы и в результате обновится картинка
				Элемент.ТекущаяОбласть = Элемент.ТекущаяОбласть;
			КонецЕсли;
		ИначеЕсли ВыбранноеДействие = "Удалить картинку" Тогда
			
			ХранилищеИзображенияСсылка = Расшифровка.ХранилищеИзображения;
			// Если прежнее хранилище изображения заполнено, То просто удаляем там хранилище и обновляем запись в регистре
			Если ЗначениеЗаполнено(ХранилищеИзображенияСсылка) Тогда
				ХранилищеИзображенияОбъект = ХранилищеИзображенияСсылка.ПолучитьОбъект();
				ХранилищеИзображенияОбъект.УдалитьИзображение();
				РегистрыСведений.Картинки.ДобавитьИзображение(Расшифровка.Объект, Расшифровка.ТипКартинки, ХранилищеИзображенияОбъект.Ссылка, Истина);
			КонецЕсли;
			
			// Обновляем расшифровку картинки
			Расшифровка.ЕстьКартинка = Ложь;
			Расшифровка.Хранилище = Неопределено;
		
			// Обновляем представление картинки
			Элемент.ТекущаяОбласть.Картинка = КартинкаПоУмолчанию;
			Элемент.ТекущаяОбласть.Линия = ЛинияПустойКартинки;
			
			// Это нужно чтобы произошел "перевыбор" элемента формы и в результате обновится картинка
			Элемент.ТекущаяОбласть = Элемент.ТекущаяОбласть;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПолеПроводникВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	// Для каталогов предусмотрен переход вглубь
	Если ВыбраннаяСтрока.ЭтоКаталог Тогда
		СтандартнаяОбработка = Ложь;
		Каталог = ВыбраннаяСтрока.ПолноеИмя;
		ПриИзмененииКаталога();
	КонецЕсли;
КонецПроцедуры

Процедура КнопкаВверхПоКаталогуНажатие(Элемент)
	ВверхПоКаталогу();
	ПриИзмененииКаталога();
КонецПроцедуры

Процедура КнопкаОбновитьПроводникНажатие(Элемент)
	ОбновитьПроводник();
КонецПроцедуры

Процедура ТабличноеПолеПроводникПриАктивизацииСтроки(Элемент)
	ОбновитьПредставлениеФайлаВПроводнике();	
КонецПроцедуры

Процедура ПредставлениеФайлаНажатие(Элемент)
	ОткрытьЗначение(Элемент.Картинка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ ФОРМЫ

Процедура ОбновитьПредставлениеФайлаВПроводнике()
	
	ТекДанные = ЭлементыФормы.ТабличноеПолеПроводник.ТекущиеДанные;
	Если ТекДанные <> Неопределено И НЕ ТекДанные.ЭтоКаталог Тогда
		ЭлементыФормы.ПредставлениеФайла.Картинка = Новый Картинка(ТекДанные.ПолноеИмя);	
	Иначе
		ЭлементыФормы.ПредставлениеФайла.Картинка = Новый Картинка;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет реквизит "Каталог" путем перехода в родительскую папку от текущего уровня
Процедура ВверхПоКаталогу() 
	
	Файл = Новый Файл(Каталог);
	Если Файл.Существует() Тогда
		Каталог = Файл.Путь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет проверку каталога на существование и корректирует при неоходимости адрес каталог (возможно передали файл)
Процедура ПроверкаКаталога()
	
	Файл = Новый Файл(Каталог);
	Если Файл.Существует() Тогда
		Если Не Файл.ЭтоКаталог() Тогда
			Каталог = Файл.Путь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Меняет значение реквизита "ОтображатьПроводник" и обновляет видимость проводника в форме
Процедура ОбновитьФлагОтображенияПроводника(Флаг)
	ОтображатьПроводник = Флаг;
	
	ОбновитьВидимостьПроводника();
КонецПроцедуры

Процедура ОбновитьВидимостьПроводника()
	
	ЭлементыФормы.КоманднаяПанельПроводника.Кнопки.Проводник.Пометка = ОтображатьПроводник;
	
	// Магия для корректной свертки и развертки панели проводника
	// Прощу обратить внимание, какие привязки и табличного документа, верт. разделителя
	// Они все на самом деле привязаны к левой границы панели проводника
	Если ОтображатьПроводник = Ложь Тогда
		ЭлементыФормы.ПанельПроводника.Свертка 		  = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Право;
		ЭлементыФормы.ПанельПроводника.Свертка 		  = РежимСверткиЭлементаУправления.Право;
	Иначе
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Право;
		ЭлементыФормы.ПанельПроводника.Свертка = РежимСверткиЭлементаУправления.Право;
		ЭлементыФормы.ПанельПроводника.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.РазделительВертикальный.Свертка = РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;

КонецПроцедуры

// Действия при изменении каталога проводника
Процедура ПриИзмененииКаталога()
	
	ПроверкаКаталога();
	
	ОбновитьПроводник();
	
КонецПроцедуры

// Функция позволяет пользователю выбрать каталог
// Возвращает Истину если пользователь что-то выбрал и Ложь в противном случае
Функция ВыбратьКаталог()
	
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Каталог = Каталог;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите каталог с изображениями'");
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		Каталог = ДиалогОткрытияФайла.Каталог;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Процедура выполняет обход файлов текущего каталога проводника и читает эти значения в таблицу в форме
Процедура ОбновитьПроводник()
	Проводник.Очистить();
	
	ФайлКаталог = Новый Файл(Каталог);
	Если ФайлКаталог.Существует() Тогда
		
		Проводник.Очистить();
		ФайлыКаталога = НайтиФайлы(Каталог, "*");
		Для Каждого Файл Из ФайлыКаталога Цикл
			// Читаем только каталоги и файлы с графическим расширением
			Если НЕ Файл.ЭтоКаталог() И Найти(ФильтрИзображений, Файл.Расширение) = 0 Тогда
				Продолжить;
			ИначеЕсли Файл.Существует() Тогда
				СтрокаПроводника = Проводник.Добавить();
				СтрокаПроводника.ПолноеИмя = Файл.ПолноеИмя;
				СтрокаПроводника.ЭтоКаталог = Файл.ЭтоКаталог();
				СтрокаПроводника.Имя = Файл.Имя;
				Если СтрокаПроводника.ЭтоКаталог Тогда                                          
					СтрокаПроводника.КартинкаИндекс = 0;
				Иначе
					СтрокаПроводника.КартинкаИндекс = 1;
					СтрокаПроводника.Размер = Справочники.ХранилищеДополнительнойИнформации.ПолучитьПредставлениеРазмера(Файл.Размер());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// В первую очередь идут каталоги, потом имена 
	Проводник.Сортировать("ЭтоКаталог УБЫВ, Имя ВОЗР");
КонецПроцедуры

// Список выбора типа объекта связан с типом значения измерения "Объекта" регистра "Картинки"
// Оттуда и берем значения списка выбора
Процедура ЗаполнитьСписокВыбораДляТипаОбъекта()
	
	ЭлементыФормы.ТипОбъекта.СписокВыбора.Очистить();
	
	// На текущий момент поддерживается работа с картинками для товаров и мест реализации
	ВозможныеТипыОбъекта = Метаданные.РегистрыСведений.Картинки.Измерения.Объект.Тип.Типы();
	Для Каждого Тип Из ВозможныеТипыОбъекта Цикл
		ВозможныйТипОбъекта = Новый(Тип);
		ЭлементыФормы.ТипОбъекта.СписокВыбора.Добавить(ВозможныйТипОбъекта, Тип);
	КонецЦикла;
	
КонецПроцедуры

// Обработка при изменении реквизита "ТипОбъекта"
Процедура ПриИзмененииТипаОбъекта(ПутьКДанным = Неопределено)
	
	Если ТипОбъекта = Неопределено Тогда
		ПредставлениеТипаОбъекта = "< неопределено >";
	Иначе
		ПредставлениеТипаОбъекта = ТипОбъекта.Метаданные().Синоним;
	КонецЕсли;
	
	Если ТипЗнч(ТекОбъект) <> ТипЗнч(ТипОбъекта) Тогда
		
		ТекОбъект = Неопределено;
		ЭлементыФормы.ТекОбъект.Значение = ТипОбъекта;
		
	КонецЕсли;
    	
КонецПроцедуры

Процедура ДействияФормыСинхронизироватьИзображения(Кнопка)
	Кнопка.Пометка = Истина;
	ЭлементыФормы.ИндикаторСинхронизацииИзображений.Видимость = Истина;
	
	//ТрактиръМобайл.СинхронизироватьИзображения(ЭлементыФормы.ИндикаторСинхронизацииИзображений);
	
	Предупреждение("Синхронизация изображений завершена.");
	
	ЭлементыФормы.ИндикаторСинхронизацииИзображений.Видимость = Ложь;
	Кнопка.Пометка = Ложь;
КонецПроцедуры

// 
//
Процедура ВнешнийВызовСформировать() Экспорт
	
	КнопкаСформироватьНажатие(Неопределено);
	
КонецПроцедуры	

Процедура ДействияФормыОчиститьURL(Кнопка)
	
	Состояние("Очистка URL картинок...");
	
	НаборЗаписейКартинок = РегистрыСведений.Картинки.СоздатьНаборЗаписей();
	НаборЗаписейКартинок.Прочитать();
	Для Каждого Запись Из НаборЗаписейКартинок Цикл
		Запись.URLСсылка = "";
	КонецЦикла;
	НаборЗаписейКартинок.Записать();
	
	Предупреждение("Очистка успешно завершена!");
	
КонецПроцедуры

ТабДокРезультат = ЭлементыФормы.Результат;

ПриИзмененииТипаОбъекта();

ЗаполнитьСписокВыбораДляТипаОбъекта();

ОтображатьПроводник = Истина;

WSS = Новый COMОбъект("WScript.Shell");
Каталог = WSS.SpecialFolders().Item("Desktop");
ОбновитьПроводник();

ОбновитьВидимостьПроводника();
ФильтрИзображений = ХранилищеДополнительнойИнформации.ПолучитьФильтрИзображений();