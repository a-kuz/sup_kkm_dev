Перем ОсновнойМакет;
Перем ТабДокРезультат Экспорт;  // Табличный документ куда будет выводиться результат отчета
Перем ТаблицаКартинок; // Таблица хранит все картинки объектов
Перем ЛинияЗагруженнойКартинки Экспорт;
Перем ЛинияКартинки Экспорт;
Перем ЛинияПустойКартинки Экспорт;
Перем КартинкаПоУмолчанию Экспорт;
Перем ЦветаГруппировок; // Содержит цвета строк отчета

Функция ПроверкаЗаполненияПараметров() Экспорт
	
	СтруктураПроверки = Новый Структура;
	СтруктураПроверки.Вставить("Отказ", Ложь);
	СтруктураПроверки.Вставить("Сообщение", "");
	
	Если ТипОбъекта = Неопределено Тогда
		СтруктураПроверки.Отказ = Истина;
		СтруктураПроверки.Сообщение = СтруктураПроверки.Сообщение + Символы.ПС + "- Не заполнено значение параметра ""Тип объекта""."; 
	КонецЕсли;
	
	Если ТипыКартинок.Количество() = 0 Тогда
		СтруктураПроверки.Отказ = Истина;
		СтруктураПроверки.Сообщение = СтруктураПроверки.Сообщение + Символы.ПС + "- Не заполнено значение параметра ""Типы картинок""."; 
	КонецЕсли;
	
	Если СтруктураПроверки.Отказ = Истина Тогда
		СтруктураПроверки.Сообщение = "Пожалуйста, проверьте заполнение параметров:" + СтруктураПроверки.Сообщение;
	КонецЕсли;
	
	Возврат СтруктураПроверки;
КонецФункции

Процедура СформироватьОтчет() Экспорт
	
	СтруктураПроверки = ПроверкаЗаполненияПараметров();
	
	Если СтруктураПроверки.Отказ = Истина Тогда
		Сообщить(СтруктураПроверки.Сообщение, СтатусСообщения.Важное);	
		Возврат;
	КонецЕсли;
	
	ТабДокРезультат.Очистить();
	
	ТипЗначенияОбъекта = ТипЗнч(ТипОбъекта);
	
	Если ЗначениеЗаполнено(ТекОбъект) Тогда
		УсловиеПоОбъекту	= " ГДЕ ТаблицаОбъектов.Ссылка В ИЕРАРХИИ (&ТекОбъект) ";
	Иначе
		УсловиеПоОбъекту	= "";
	КонецЕсли;	
	УсловиеПоГруппам		= "";
	УсловиеИтогов			= "";
	
	
	// Для запроса подготавливаем дополнительные "куски" запроса
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗначенияОбъекта) Тогда
		ТаблицаОбъекта = "Справочник." + ТипОбъекта.Метаданные().Имя;
		
		Если ТипОбъекта.Метаданные().Иерархический Тогда
			УсловиеИтогов = " ИТОГИ ПО Объект ТОЛЬКО ИЕРАРХИЯ ";
			Если Строка(ТипОбъекта.Метаданные().ВидИерархии) = "ИерархияГруппИЭлементов" И ЗначениеЗаполнено(ТекОбъект) Тогда
				УсловиеПоГруппам = " И НЕ ТаблицаОбъектов.ЭтоГруппа ";
			Иначе
				УсловиеПоГруппам = " ГДЕ НЕ ТаблицаОбъектов.ЭтоГруппа ";
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗначенияОбъекта) Тогда
		ТаблицаОбъекта = "Документ." + ТипОбъекта.Метаданные().Имя;
	КонецЕсли;
	
	// Запрос получает все возможные картинки объектов
	// Важно понимать, что запрос получает как существующие картинки, так и не существующие
	// Результат запроса передается в переменную ТаблицаКартинок
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТипыКартинок.ТипКартинки,
	               |	ТипыКартинок.Порядок
	               |ПОМЕСТИТЬ ТипыКартинок
	               |ИЗ
	               |	&ТипыКартинок КАК ТипыКартинок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВложенныйЗапрос.Объект,
	               |	ВложенныйЗапрос.ТипКартинки,
	               |	Картинки.ХранилищеИзображения,
	               |	Картинки.ХранилищеИзображения.Хранилище КАК Хранилище,
	               |	Картинки.URLСсылка,
	               |	Картинки.ДатаДобавления
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ТаблицаОбъектов.Ссылка КАК Объект,
	               |		ТипыКартинок.ТипКартинки КАК ТипКартинки,
	               |		ТипыКартинок.Порядок КАК Порядок
	               |	ИЗ
	               |		" + ТаблицаОбъекта + " КАК ТаблицаОбъектов,
	               |		ТипыКартинок КАК ТипыКартинок "+ УсловиеПоОбъекту +") КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Картинки КАК Картинки
	               |		ПО ВложенныйЗапрос.Объект = Картинки.Объект
	               |			И ВложенныйЗапрос.ТипКартинки = Картинки.ТипКартинки 
				   |
				   |УПОРЯДОЧИТЬ ПО
	               |	ВложенныйЗапрос.Объект,
	               |	ВложенныйЗапрос.Порядок
	               |АВТОУПОРЯДОЧИВАНИЕ";
				   
	Запрос.УстановитьПараметр("ТипыКартинок", ПреобразоватьТипыКартинокВТаблицу());
	Запрос.УстановитьПараметр("ТекОбъект"	, ТекОбъект);
	
	ТаблицаКартинок = Запрос.Выполнить().Выгрузить();
	
	// Запрос строит иерархию объектов
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОбъектов.Ссылка КАК Объект
	               |ИЗ
	               |	" + ТаблицаОбъекта + " КАК ТаблицаОбъектов" + УсловиеПоОбъекту + УсловиеПоГруппам + УсловиеИтогов + "
	               |АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.УстановитьПараметр("ТекОбъект"	, ТекОбъект);			   
	ДеревоРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	СформироватьШапку();
	
	ТабДокРезультат.НачатьАвтогруппировкуСтрок();
	СформироватьМакет(ДеревоРезультат.Строки, 0);
	ТабДокРезультат.ЗакончитьАвтогруппировкуСтрок();
	
	СвернутьГруппировкиОтчета();
	
КонецПроцедуры

Процедура СвернутьГруппировкиОтчета() Экспорт
	Для УровеньГруппировки = 0 по 9 Цикл
		ТабДокРезультат.ПоказатьУровеньГруппировокСтрок(9-УровеньГруппировки);
	КонецЦикла;
КонецПроцедуры

Процедура РазвернутьГруппировкиОтчета() Экспорт
	Для уровеньГруппировки = 0 по 9 Цикл
		ТабДокРезультат.ПоказатьУровеньГруппировокСтрок(УровеньГруппировки);
	КонецЦикла;
КонецПроцедуры

// Функция преобразует значение реквизита "ТипыКартинок" в табличное представление (таблица значений)
// Возвращаемое значение - ТаблицаЗначений с колонками "ТипКартинки" и "Порядок"
Функция ПреобразоватьТипыКартинокВТаблицу()
	
	ТаблицаТиповКартинок = Новый ТаблицаЗначений;
	ТаблицаТиповКартинок.Колонки.Добавить("ТипКартинки", Новый ОписаниеТипов("СправочникСсылка.ТипыКартинок"));
	ТаблицаТиповКартинок.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));
	Для Каждого ЭлТипКартинки Из ТипыКартинок Цикл
		НСтрока = ТаблицаТиповКартинок.Добавить();
		НСтрока.ТипКартинки = ЭлТипКартинки.Значение;
		НСтрока.Порядок = ТипыКартинок.Индекс(ЭлТипКартинки);
	КонецЦикла;

	Возврат ТаблицаТиповКартинок;
КонецФункции

Процедура СформироватьШапку()
	ОбластьОбъекта = ОсновнойМакет.ПолучитьОбласть("Шапка|Наименование");
	ТабДокРезультат.Вывести(ОбластьОбъекта);
	
	Для Каждого ЭлТипКартинки Из ТипыКартинок Цикл
		ОбластьКартинки = ОсновнойМакет.ПолучитьОбласть("Шапка|Картинка");
		ОбластьКартинки.Параметры.ТипКартинки = ЭлТипКартинки.Значение;
		ОбластьКартинки.Параметры.РекомендуемыйРазмер = ЭлТипКартинки.Значение.РекомендуемыйРазмер;
		ТабДокРезультат.Присоединить(ОбластьКартинки);
	КонецЦикла;
	ТабДокРезультат.ФиксацияСверху = ОбластьОбъекта.ВысотаТаблицы;
КонецПроцедуры

// Рекурсивная функция формирования результата отчета
// Происходит обход дерева иерархии объектов и сцепка картинок с объектом
Процедура СформироватьМакет(СтрокиДерева, Уровень)
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		// Заполняем ячейку "Наименование"
		ОбластьОбъекта = ОсновнойМакет.ПолучитьОбласть("Элемент|Наименование");
		ОбластьОбъекта.Параметры.Заполнить(СтрокаДерева);
		ОбластьОбъекта.Параметры.ДопИнформация = ?(ТипЗнч(СтрокаДерева.Объект) = Тип("ДокументСсылка.Новость"), СтрокаДерева.Объект.Заголовок, "");
		// Для каждого уровня свой цвет, кроме последнего уровня
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ЦветУровня = ПолучитьЦветФонаУровня(Уровень);
		Иначе
			ЦветУровня = ПолучитьЦветФонаУровня();
		КонецЕсли;
		
		ОбластьОбъекта.Область().ЦветФона = ЦветУровня;
		ТабДокРезультат.Вывести(ОбластьОбъекта, Уровень);
		
		// Заполняем ячейки "Картинка"
		// Тут как раз происходит сцепка объекта и картинок
		ЗаполнитьКартинкиОбъекта(СтрокаДерева.Объект, ЦветУровня);
		
		// Если есть дочернии элементы дерева, то спускаемся по рекурсии глубже
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			СформироватьМакет(СтрокаДерева.Строки, Уровень + 1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьКартинкиОбъекта(Объект, ЦветУровня)
	КартинкиОбъекта = ТаблицаКартинок.НайтиСтроки(Новый Структура("Объект", Объект));
	// Перебираем все картинки объекта
	Для Каждого СтрКартинка Из КартинкиОбъекта Цикл
		ОбластьКартинки = ОсновнойМакет.ПолучитьОбласть("Элемент|Картинка");
		ОбластьКартинки.Параметры.Заполнить(СтрКартинка);
		ОбластьКартинки.Область().ЦветФона = ЦветУровня;
		
		ЕстьКартинка = Ложь;
		// Чтобы корректно работала расшифровка и перетаскивание изображений на ячейку, зададим собственное имя картинки
		ИмяКартинки = "a" + Объект.УникальныйИдентификатор() + СтрКартинка.ТипКартинки.УникальныйИдентификатор();
		Если ЗначениеЗаполнено(СтрКартинка.ХранилищеИзображения) Тогда
			Картинка = СтрКартинка.Хранилище.Получить();
			Если Картинка <> Неопределено Тогда
				ЕстьКартинка = Истина;	
				ОбластьКартинки.Рисунки.КартинкаОбъекта.Картинка = Картинка;
				Если ЗначениеЗаполнено(СтрКартинка.ДатаДобавления) Тогда
					ОбластьКартинки.Параметры.ДопИнформация = "Добавлено:" + Формат(СтрКартинка.ДатаДобавления,"ДФ='dd.MM.yyyy'");
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрКартинка.URLСсылка) Тогда
					ОбластьКартинки.Рисунки.КартинкаОбъекта.Линия = ЛинияЗагруженнойКартинки;
				Иначе
					ОбластьКартинки.Рисунки.КартинкаОбъекта.Линия = ЛинияКартинки;
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли;
		ОбластьКартинки.Рисунки.КартинкаОбъекта.Имя = ИмяКартинки;
		
		// Подготавливаем структуру для расшифровки и механизма перетаскивания
		ОбластьКартинки.Параметры.КлючЗаписи = Новый Структура("Имя, Объект, ТипКартинки, ХранилищеИзображения, Хранилище, ЕстьКартинка, ИмяКартинки",
		                                                        "Картинка", 
																Объект, 
																СтрКартинка.ТипКартинки, 
																СтрКартинка.ХранилищеИзображения, 
																СтрКартинка.Хранилище, 
																ЕстьКартинка,
																ИмяКартинки);
		ТабДокРезультат.Присоединить(ОбластьКартинки);
	КонецЦикла;	
КонецПроцедуры

// Функция возвращает цвет в зависимости от уровня иерархии
Функция ПолучитьЦветФонаУровня(Уровень = -1)
	Если Уровень < 0 ИЛИ Уровень > ЦветаГруппировок.Количество() - 1 Тогда
		Возврат ЦветаГруппировок[ЦветаГруппировок.Количество()-1];
	Иначе
		Возврат ЦветаГруппировок[Уровень]
	КонецЕсли;
КонецФункции


ТабДокРезультат = Неопределено;
ОсновнойМакет = ПолучитьМакет("Макет");

ЛинияЗагруженнойКартинки = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная,2);
ЛинияКартинки = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная,1);
ЛинияПустойКартинки = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Пунктир,1);

ТипОбъекта = Справочники.Товары.ПустаяСсылка();

ТипыКартинок.Добавить(Справочники.ТипыКартинок.ИзображениеБольшое);
ТипыКартинок.Добавить(Справочники.ТипыКартинок.Изображение);
ТипыКартинок.Добавить(Справочники.ТипыКартинок.ПиктограммаБольшая);
ТипыКартинок.Добавить(Справочники.ТипыКартинок.Пиктограмма);

ОбластьКартинки = ОсновнойМакет.ПолучитьОбласть("Элемент|Картинка");
КартинкаПоУмолчанию = ОбластьКартинки.Рисунки.КартинкаОбъекта.Картинка;

// Массив цветов группировок
ЦветаГруппировок = Новый Массив;
ЦветаГруппировок.Добавить(ЦветаСтиля.ЦветФонаГруппировкиОтчета1);
ЦветаГруппировок.Добавить(ЦветаСтиля.ЦветФонаГруппировкиОтчета2);
ЦветаГруппировок.Добавить(Новый Цвет(255,255,255));
